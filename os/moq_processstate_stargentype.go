// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package os

import (
	"fmt"
	"math/bits"
	"sync/atomic"
	"time"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that os.ProcessState_starGenType is
// mocked completely
var _ ProcessState_starGenType = (*MoqProcessState_starGenType_mock)(nil)

// ProcessState_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type ProcessState_starGenType interface {
	UserTime() time.Duration
	SystemTime() time.Duration
	Exited() bool
	Success() bool
	Sys() any
	SysUsage() any
	Pid() int
	String() string
	ExitCode() int
}

// MoqProcessState_starGenType holds the state of a moq of the
// ProcessState_starGenType type
type MoqProcessState_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqProcessState_starGenType_mock

	ResultsByParams_UserTime   []MoqProcessState_starGenType_UserTime_resultsByParams
	ResultsByParams_SystemTime []MoqProcessState_starGenType_SystemTime_resultsByParams
	ResultsByParams_Exited     []MoqProcessState_starGenType_Exited_resultsByParams
	ResultsByParams_Success    []MoqProcessState_starGenType_Success_resultsByParams
	ResultsByParams_Sys        []MoqProcessState_starGenType_Sys_resultsByParams
	ResultsByParams_SysUsage   []MoqProcessState_starGenType_SysUsage_resultsByParams
	ResultsByParams_Pid        []MoqProcessState_starGenType_Pid_resultsByParams
	ResultsByParams_String     []MoqProcessState_starGenType_String_resultsByParams
	ResultsByParams_ExitCode   []MoqProcessState_starGenType_ExitCode_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			UserTime   struct{}
			SystemTime struct{}
			Exited     struct{}
			Success    struct{}
			Sys        struct{}
			SysUsage   struct{}
			Pid        struct{}
			String     struct{}
			ExitCode   struct{}
		}
	}
}

// MoqProcessState_starGenType_mock isolates the mock interface of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_mock struct {
	Moq *MoqProcessState_starGenType
}

// MoqProcessState_starGenType_recorder isolates the recorder interface of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_recorder struct {
	Moq *MoqProcessState_starGenType
}

// MoqProcessState_starGenType_UserTime_params holds the params of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_UserTime_params struct{}

// MoqProcessState_starGenType_UserTime_paramsKey holds the map key params of
// the ProcessState_starGenType type
type MoqProcessState_starGenType_UserTime_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqProcessState_starGenType_UserTime_resultsByParams contains the results
// for a given set of parameters for the ProcessState_starGenType type
type MoqProcessState_starGenType_UserTime_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqProcessState_starGenType_UserTime_paramsKey]*MoqProcessState_starGenType_UserTime_results
}

// MoqProcessState_starGenType_UserTime_doFn defines the type of function
// needed when calling AndDo for the ProcessState_starGenType type
type MoqProcessState_starGenType_UserTime_doFn func()

// MoqProcessState_starGenType_UserTime_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ProcessState_starGenType type
type MoqProcessState_starGenType_UserTime_doReturnFn func() time.Duration

// MoqProcessState_starGenType_UserTime_results holds the results of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_UserTime_results struct {
	Params  MoqProcessState_starGenType_UserTime_params
	Results []struct {
		Values *struct {
			Result1 time.Duration
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_UserTime_doFn
		DoReturnFn MoqProcessState_starGenType_UserTime_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqProcessState_starGenType_UserTime_fnRecorder routes recorded function
// calls to the MoqProcessState_starGenType moq
type MoqProcessState_starGenType_UserTime_fnRecorder struct {
	Params    MoqProcessState_starGenType_UserTime_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqProcessState_starGenType_UserTime_results
	Moq       *MoqProcessState_starGenType
}

// MoqProcessState_starGenType_UserTime_anyParams isolates the any params
// functions of the ProcessState_starGenType type
type MoqProcessState_starGenType_UserTime_anyParams struct {
	Recorder *MoqProcessState_starGenType_UserTime_fnRecorder
}

// MoqProcessState_starGenType_SystemTime_params holds the params of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_SystemTime_params struct{}

// MoqProcessState_starGenType_SystemTime_paramsKey holds the map key params of
// the ProcessState_starGenType type
type MoqProcessState_starGenType_SystemTime_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqProcessState_starGenType_SystemTime_resultsByParams contains the results
// for a given set of parameters for the ProcessState_starGenType type
type MoqProcessState_starGenType_SystemTime_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqProcessState_starGenType_SystemTime_paramsKey]*MoqProcessState_starGenType_SystemTime_results
}

// MoqProcessState_starGenType_SystemTime_doFn defines the type of function
// needed when calling AndDo for the ProcessState_starGenType type
type MoqProcessState_starGenType_SystemTime_doFn func()

// MoqProcessState_starGenType_SystemTime_doReturnFn defines the type of
// function needed when calling DoReturnResults for the
// ProcessState_starGenType type
type MoqProcessState_starGenType_SystemTime_doReturnFn func() time.Duration

// MoqProcessState_starGenType_SystemTime_results holds the results of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_SystemTime_results struct {
	Params  MoqProcessState_starGenType_SystemTime_params
	Results []struct {
		Values *struct {
			Result1 time.Duration
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_SystemTime_doFn
		DoReturnFn MoqProcessState_starGenType_SystemTime_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqProcessState_starGenType_SystemTime_fnRecorder routes recorded function
// calls to the MoqProcessState_starGenType moq
type MoqProcessState_starGenType_SystemTime_fnRecorder struct {
	Params    MoqProcessState_starGenType_SystemTime_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqProcessState_starGenType_SystemTime_results
	Moq       *MoqProcessState_starGenType
}

// MoqProcessState_starGenType_SystemTime_anyParams isolates the any params
// functions of the ProcessState_starGenType type
type MoqProcessState_starGenType_SystemTime_anyParams struct {
	Recorder *MoqProcessState_starGenType_SystemTime_fnRecorder
}

// MoqProcessState_starGenType_Exited_params holds the params of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_Exited_params struct{}

// MoqProcessState_starGenType_Exited_paramsKey holds the map key params of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_Exited_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqProcessState_starGenType_Exited_resultsByParams contains the results for
// a given set of parameters for the ProcessState_starGenType type
type MoqProcessState_starGenType_Exited_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqProcessState_starGenType_Exited_paramsKey]*MoqProcessState_starGenType_Exited_results
}

// MoqProcessState_starGenType_Exited_doFn defines the type of function needed
// when calling AndDo for the ProcessState_starGenType type
type MoqProcessState_starGenType_Exited_doFn func()

// MoqProcessState_starGenType_Exited_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ProcessState_starGenType type
type MoqProcessState_starGenType_Exited_doReturnFn func() bool

// MoqProcessState_starGenType_Exited_results holds the results of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_Exited_results struct {
	Params  MoqProcessState_starGenType_Exited_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_Exited_doFn
		DoReturnFn MoqProcessState_starGenType_Exited_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqProcessState_starGenType_Exited_fnRecorder routes recorded function calls
// to the MoqProcessState_starGenType moq
type MoqProcessState_starGenType_Exited_fnRecorder struct {
	Params    MoqProcessState_starGenType_Exited_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqProcessState_starGenType_Exited_results
	Moq       *MoqProcessState_starGenType
}

// MoqProcessState_starGenType_Exited_anyParams isolates the any params
// functions of the ProcessState_starGenType type
type MoqProcessState_starGenType_Exited_anyParams struct {
	Recorder *MoqProcessState_starGenType_Exited_fnRecorder
}

// MoqProcessState_starGenType_Success_params holds the params of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_Success_params struct{}

// MoqProcessState_starGenType_Success_paramsKey holds the map key params of
// the ProcessState_starGenType type
type MoqProcessState_starGenType_Success_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqProcessState_starGenType_Success_resultsByParams contains the results for
// a given set of parameters for the ProcessState_starGenType type
type MoqProcessState_starGenType_Success_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqProcessState_starGenType_Success_paramsKey]*MoqProcessState_starGenType_Success_results
}

// MoqProcessState_starGenType_Success_doFn defines the type of function needed
// when calling AndDo for the ProcessState_starGenType type
type MoqProcessState_starGenType_Success_doFn func()

// MoqProcessState_starGenType_Success_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ProcessState_starGenType type
type MoqProcessState_starGenType_Success_doReturnFn func() bool

// MoqProcessState_starGenType_Success_results holds the results of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_Success_results struct {
	Params  MoqProcessState_starGenType_Success_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_Success_doFn
		DoReturnFn MoqProcessState_starGenType_Success_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqProcessState_starGenType_Success_fnRecorder routes recorded function
// calls to the MoqProcessState_starGenType moq
type MoqProcessState_starGenType_Success_fnRecorder struct {
	Params    MoqProcessState_starGenType_Success_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqProcessState_starGenType_Success_results
	Moq       *MoqProcessState_starGenType
}

// MoqProcessState_starGenType_Success_anyParams isolates the any params
// functions of the ProcessState_starGenType type
type MoqProcessState_starGenType_Success_anyParams struct {
	Recorder *MoqProcessState_starGenType_Success_fnRecorder
}

// MoqProcessState_starGenType_Sys_params holds the params of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_Sys_params struct{}

// MoqProcessState_starGenType_Sys_paramsKey holds the map key params of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_Sys_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqProcessState_starGenType_Sys_resultsByParams contains the results for a
// given set of parameters for the ProcessState_starGenType type
type MoqProcessState_starGenType_Sys_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqProcessState_starGenType_Sys_paramsKey]*MoqProcessState_starGenType_Sys_results
}

// MoqProcessState_starGenType_Sys_doFn defines the type of function needed
// when calling AndDo for the ProcessState_starGenType type
type MoqProcessState_starGenType_Sys_doFn func()

// MoqProcessState_starGenType_Sys_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ProcessState_starGenType type
type MoqProcessState_starGenType_Sys_doReturnFn func() any

// MoqProcessState_starGenType_Sys_results holds the results of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_Sys_results struct {
	Params  MoqProcessState_starGenType_Sys_params
	Results []struct {
		Values *struct {
			Result1 any
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_Sys_doFn
		DoReturnFn MoqProcessState_starGenType_Sys_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqProcessState_starGenType_Sys_fnRecorder routes recorded function calls to
// the MoqProcessState_starGenType moq
type MoqProcessState_starGenType_Sys_fnRecorder struct {
	Params    MoqProcessState_starGenType_Sys_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqProcessState_starGenType_Sys_results
	Moq       *MoqProcessState_starGenType
}

// MoqProcessState_starGenType_Sys_anyParams isolates the any params functions
// of the ProcessState_starGenType type
type MoqProcessState_starGenType_Sys_anyParams struct {
	Recorder *MoqProcessState_starGenType_Sys_fnRecorder
}

// MoqProcessState_starGenType_SysUsage_params holds the params of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_SysUsage_params struct{}

// MoqProcessState_starGenType_SysUsage_paramsKey holds the map key params of
// the ProcessState_starGenType type
type MoqProcessState_starGenType_SysUsage_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqProcessState_starGenType_SysUsage_resultsByParams contains the results
// for a given set of parameters for the ProcessState_starGenType type
type MoqProcessState_starGenType_SysUsage_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqProcessState_starGenType_SysUsage_paramsKey]*MoqProcessState_starGenType_SysUsage_results
}

// MoqProcessState_starGenType_SysUsage_doFn defines the type of function
// needed when calling AndDo for the ProcessState_starGenType type
type MoqProcessState_starGenType_SysUsage_doFn func()

// MoqProcessState_starGenType_SysUsage_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ProcessState_starGenType type
type MoqProcessState_starGenType_SysUsage_doReturnFn func() any

// MoqProcessState_starGenType_SysUsage_results holds the results of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_SysUsage_results struct {
	Params  MoqProcessState_starGenType_SysUsage_params
	Results []struct {
		Values *struct {
			Result1 any
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_SysUsage_doFn
		DoReturnFn MoqProcessState_starGenType_SysUsage_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqProcessState_starGenType_SysUsage_fnRecorder routes recorded function
// calls to the MoqProcessState_starGenType moq
type MoqProcessState_starGenType_SysUsage_fnRecorder struct {
	Params    MoqProcessState_starGenType_SysUsage_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqProcessState_starGenType_SysUsage_results
	Moq       *MoqProcessState_starGenType
}

// MoqProcessState_starGenType_SysUsage_anyParams isolates the any params
// functions of the ProcessState_starGenType type
type MoqProcessState_starGenType_SysUsage_anyParams struct {
	Recorder *MoqProcessState_starGenType_SysUsage_fnRecorder
}

// MoqProcessState_starGenType_Pid_params holds the params of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_Pid_params struct{}

// MoqProcessState_starGenType_Pid_paramsKey holds the map key params of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_Pid_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqProcessState_starGenType_Pid_resultsByParams contains the results for a
// given set of parameters for the ProcessState_starGenType type
type MoqProcessState_starGenType_Pid_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqProcessState_starGenType_Pid_paramsKey]*MoqProcessState_starGenType_Pid_results
}

// MoqProcessState_starGenType_Pid_doFn defines the type of function needed
// when calling AndDo for the ProcessState_starGenType type
type MoqProcessState_starGenType_Pid_doFn func()

// MoqProcessState_starGenType_Pid_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ProcessState_starGenType type
type MoqProcessState_starGenType_Pid_doReturnFn func() int

// MoqProcessState_starGenType_Pid_results holds the results of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_Pid_results struct {
	Params  MoqProcessState_starGenType_Pid_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_Pid_doFn
		DoReturnFn MoqProcessState_starGenType_Pid_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqProcessState_starGenType_Pid_fnRecorder routes recorded function calls to
// the MoqProcessState_starGenType moq
type MoqProcessState_starGenType_Pid_fnRecorder struct {
	Params    MoqProcessState_starGenType_Pid_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqProcessState_starGenType_Pid_results
	Moq       *MoqProcessState_starGenType
}

// MoqProcessState_starGenType_Pid_anyParams isolates the any params functions
// of the ProcessState_starGenType type
type MoqProcessState_starGenType_Pid_anyParams struct {
	Recorder *MoqProcessState_starGenType_Pid_fnRecorder
}

// MoqProcessState_starGenType_String_params holds the params of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_String_params struct{}

// MoqProcessState_starGenType_String_paramsKey holds the map key params of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqProcessState_starGenType_String_resultsByParams contains the results for
// a given set of parameters for the ProcessState_starGenType type
type MoqProcessState_starGenType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqProcessState_starGenType_String_paramsKey]*MoqProcessState_starGenType_String_results
}

// MoqProcessState_starGenType_String_doFn defines the type of function needed
// when calling AndDo for the ProcessState_starGenType type
type MoqProcessState_starGenType_String_doFn func()

// MoqProcessState_starGenType_String_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ProcessState_starGenType type
type MoqProcessState_starGenType_String_doReturnFn func() string

// MoqProcessState_starGenType_String_results holds the results of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_String_results struct {
	Params  MoqProcessState_starGenType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_String_doFn
		DoReturnFn MoqProcessState_starGenType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqProcessState_starGenType_String_fnRecorder routes recorded function calls
// to the MoqProcessState_starGenType moq
type MoqProcessState_starGenType_String_fnRecorder struct {
	Params    MoqProcessState_starGenType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqProcessState_starGenType_String_results
	Moq       *MoqProcessState_starGenType
}

// MoqProcessState_starGenType_String_anyParams isolates the any params
// functions of the ProcessState_starGenType type
type MoqProcessState_starGenType_String_anyParams struct {
	Recorder *MoqProcessState_starGenType_String_fnRecorder
}

// MoqProcessState_starGenType_ExitCode_params holds the params of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_ExitCode_params struct{}

// MoqProcessState_starGenType_ExitCode_paramsKey holds the map key params of
// the ProcessState_starGenType type
type MoqProcessState_starGenType_ExitCode_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqProcessState_starGenType_ExitCode_resultsByParams contains the results
// for a given set of parameters for the ProcessState_starGenType type
type MoqProcessState_starGenType_ExitCode_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqProcessState_starGenType_ExitCode_paramsKey]*MoqProcessState_starGenType_ExitCode_results
}

// MoqProcessState_starGenType_ExitCode_doFn defines the type of function
// needed when calling AndDo for the ProcessState_starGenType type
type MoqProcessState_starGenType_ExitCode_doFn func()

// MoqProcessState_starGenType_ExitCode_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ProcessState_starGenType type
type MoqProcessState_starGenType_ExitCode_doReturnFn func() int

// MoqProcessState_starGenType_ExitCode_results holds the results of the
// ProcessState_starGenType type
type MoqProcessState_starGenType_ExitCode_results struct {
	Params  MoqProcessState_starGenType_ExitCode_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_ExitCode_doFn
		DoReturnFn MoqProcessState_starGenType_ExitCode_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqProcessState_starGenType_ExitCode_fnRecorder routes recorded function
// calls to the MoqProcessState_starGenType moq
type MoqProcessState_starGenType_ExitCode_fnRecorder struct {
	Params    MoqProcessState_starGenType_ExitCode_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqProcessState_starGenType_ExitCode_results
	Moq       *MoqProcessState_starGenType
}

// MoqProcessState_starGenType_ExitCode_anyParams isolates the any params
// functions of the ProcessState_starGenType type
type MoqProcessState_starGenType_ExitCode_anyParams struct {
	Recorder *MoqProcessState_starGenType_ExitCode_fnRecorder
}

// NewMoqProcessState_starGenType creates a new moq of the
// ProcessState_starGenType type
func NewMoqProcessState_starGenType(scene *moq.Scene, config *moq.Config) *MoqProcessState_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqProcessState_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqProcessState_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				UserTime   struct{}
				SystemTime struct{}
				Exited     struct{}
				Success    struct{}
				Sys        struct{}
				SysUsage   struct{}
				Pid        struct{}
				String     struct{}
				ExitCode   struct{}
			}
		}{ParameterIndexing: struct {
			UserTime   struct{}
			SystemTime struct{}
			Exited     struct{}
			Success    struct{}
			Sys        struct{}
			SysUsage   struct{}
			Pid        struct{}
			String     struct{}
			ExitCode   struct{}
		}{
			UserTime:   struct{}{},
			SystemTime: struct{}{},
			Exited:     struct{}{},
			Success:    struct{}{},
			Sys:        struct{}{},
			SysUsage:   struct{}{},
			Pid:        struct{}{},
			String:     struct{}{},
			ExitCode:   struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the ProcessState_starGenType type
func (m *MoqProcessState_starGenType) Mock() *MoqProcessState_starGenType_mock { return m.Moq }

func (m *MoqProcessState_starGenType_mock) UserTime() (result1 time.Duration) {
	m.Moq.Scene.T.Helper()
	params := MoqProcessState_starGenType_UserTime_params{}
	var results *MoqProcessState_starGenType_UserTime_results
	for _, resultsByParams := range m.Moq.ResultsByParams_UserTime {
		paramsKey := m.Moq.ParamsKey_UserTime(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_UserTime(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_UserTime(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_UserTime(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqProcessState_starGenType_mock) SystemTime() (result1 time.Duration) {
	m.Moq.Scene.T.Helper()
	params := MoqProcessState_starGenType_SystemTime_params{}
	var results *MoqProcessState_starGenType_SystemTime_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SystemTime {
		paramsKey := m.Moq.ParamsKey_SystemTime(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SystemTime(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SystemTime(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SystemTime(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqProcessState_starGenType_mock) Exited() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqProcessState_starGenType_Exited_params{}
	var results *MoqProcessState_starGenType_Exited_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Exited {
		paramsKey := m.Moq.ParamsKey_Exited(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Exited(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Exited(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Exited(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqProcessState_starGenType_mock) Success() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqProcessState_starGenType_Success_params{}
	var results *MoqProcessState_starGenType_Success_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Success {
		paramsKey := m.Moq.ParamsKey_Success(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Success(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Success(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Success(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqProcessState_starGenType_mock) Sys() (result1 any) {
	m.Moq.Scene.T.Helper()
	params := MoqProcessState_starGenType_Sys_params{}
	var results *MoqProcessState_starGenType_Sys_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Sys {
		paramsKey := m.Moq.ParamsKey_Sys(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Sys(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Sys(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Sys(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqProcessState_starGenType_mock) SysUsage() (result1 any) {
	m.Moq.Scene.T.Helper()
	params := MoqProcessState_starGenType_SysUsage_params{}
	var results *MoqProcessState_starGenType_SysUsage_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SysUsage {
		paramsKey := m.Moq.ParamsKey_SysUsage(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SysUsage(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SysUsage(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SysUsage(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqProcessState_starGenType_mock) Pid() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqProcessState_starGenType_Pid_params{}
	var results *MoqProcessState_starGenType_Pid_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Pid {
		paramsKey := m.Moq.ParamsKey_Pid(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Pid(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Pid(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Pid(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqProcessState_starGenType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqProcessState_starGenType_String_params{}
	var results *MoqProcessState_starGenType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqProcessState_starGenType_mock) ExitCode() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqProcessState_starGenType_ExitCode_params{}
	var results *MoqProcessState_starGenType_ExitCode_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ExitCode {
		paramsKey := m.Moq.ParamsKey_ExitCode(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ExitCode(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ExitCode(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ExitCode(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the ProcessState_starGenType
// type
func (m *MoqProcessState_starGenType) OnCall() *MoqProcessState_starGenType_recorder {
	return &MoqProcessState_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqProcessState_starGenType_recorder) UserTime() *MoqProcessState_starGenType_UserTime_fnRecorder {
	return &MoqProcessState_starGenType_UserTime_fnRecorder{
		Params:   MoqProcessState_starGenType_UserTime_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqProcessState_starGenType_UserTime_fnRecorder) Any() *MoqProcessState_starGenType_UserTime_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UserTime(r.Params))
		return nil
	}
	return &MoqProcessState_starGenType_UserTime_anyParams{Recorder: r}
}

func (r *MoqProcessState_starGenType_UserTime_fnRecorder) Seq() *MoqProcessState_starGenType_UserTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UserTime(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqProcessState_starGenType_UserTime_fnRecorder) NoSeq() *MoqProcessState_starGenType_UserTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UserTime(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqProcessState_starGenType_UserTime_fnRecorder) ReturnResults(result1 time.Duration) *MoqProcessState_starGenType_UserTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 time.Duration
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_UserTime_doFn
		DoReturnFn MoqProcessState_starGenType_UserTime_doReturnFn
	}{
		Values: &struct {
			Result1 time.Duration
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqProcessState_starGenType_UserTime_fnRecorder) AndDo(fn MoqProcessState_starGenType_UserTime_doFn) *MoqProcessState_starGenType_UserTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqProcessState_starGenType_UserTime_fnRecorder) DoReturnResults(fn MoqProcessState_starGenType_UserTime_doReturnFn) *MoqProcessState_starGenType_UserTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 time.Duration
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_UserTime_doFn
		DoReturnFn MoqProcessState_starGenType_UserTime_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqProcessState_starGenType_UserTime_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqProcessState_starGenType_UserTime_resultsByParams
	for n, res := range r.Moq.ResultsByParams_UserTime {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqProcessState_starGenType_UserTime_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqProcessState_starGenType_UserTime_paramsKey]*MoqProcessState_starGenType_UserTime_results{},
		}
		r.Moq.ResultsByParams_UserTime = append(r.Moq.ResultsByParams_UserTime, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_UserTime) {
			copy(r.Moq.ResultsByParams_UserTime[insertAt+1:], r.Moq.ResultsByParams_UserTime[insertAt:0])
			r.Moq.ResultsByParams_UserTime[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_UserTime(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqProcessState_starGenType_UserTime_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqProcessState_starGenType_UserTime_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqProcessState_starGenType_UserTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 time.Duration
				}
				Sequence   uint32
				DoFn       MoqProcessState_starGenType_UserTime_doFn
				DoReturnFn MoqProcessState_starGenType_UserTime_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqProcessState_starGenType) PrettyParams_UserTime(params MoqProcessState_starGenType_UserTime_params) string {
	return fmt.Sprintf("UserTime()")
}

func (m *MoqProcessState_starGenType) ParamsKey_UserTime(params MoqProcessState_starGenType_UserTime_params, anyParams uint64) MoqProcessState_starGenType_UserTime_paramsKey {
	m.Scene.T.Helper()
	return MoqProcessState_starGenType_UserTime_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqProcessState_starGenType_recorder) SystemTime() *MoqProcessState_starGenType_SystemTime_fnRecorder {
	return &MoqProcessState_starGenType_SystemTime_fnRecorder{
		Params:   MoqProcessState_starGenType_SystemTime_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqProcessState_starGenType_SystemTime_fnRecorder) Any() *MoqProcessState_starGenType_SystemTime_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SystemTime(r.Params))
		return nil
	}
	return &MoqProcessState_starGenType_SystemTime_anyParams{Recorder: r}
}

func (r *MoqProcessState_starGenType_SystemTime_fnRecorder) Seq() *MoqProcessState_starGenType_SystemTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SystemTime(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqProcessState_starGenType_SystemTime_fnRecorder) NoSeq() *MoqProcessState_starGenType_SystemTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SystemTime(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqProcessState_starGenType_SystemTime_fnRecorder) ReturnResults(result1 time.Duration) *MoqProcessState_starGenType_SystemTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 time.Duration
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_SystemTime_doFn
		DoReturnFn MoqProcessState_starGenType_SystemTime_doReturnFn
	}{
		Values: &struct {
			Result1 time.Duration
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqProcessState_starGenType_SystemTime_fnRecorder) AndDo(fn MoqProcessState_starGenType_SystemTime_doFn) *MoqProcessState_starGenType_SystemTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqProcessState_starGenType_SystemTime_fnRecorder) DoReturnResults(fn MoqProcessState_starGenType_SystemTime_doReturnFn) *MoqProcessState_starGenType_SystemTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 time.Duration
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_SystemTime_doFn
		DoReturnFn MoqProcessState_starGenType_SystemTime_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqProcessState_starGenType_SystemTime_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqProcessState_starGenType_SystemTime_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SystemTime {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqProcessState_starGenType_SystemTime_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqProcessState_starGenType_SystemTime_paramsKey]*MoqProcessState_starGenType_SystemTime_results{},
		}
		r.Moq.ResultsByParams_SystemTime = append(r.Moq.ResultsByParams_SystemTime, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SystemTime) {
			copy(r.Moq.ResultsByParams_SystemTime[insertAt+1:], r.Moq.ResultsByParams_SystemTime[insertAt:0])
			r.Moq.ResultsByParams_SystemTime[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SystemTime(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqProcessState_starGenType_SystemTime_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqProcessState_starGenType_SystemTime_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqProcessState_starGenType_SystemTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 time.Duration
				}
				Sequence   uint32
				DoFn       MoqProcessState_starGenType_SystemTime_doFn
				DoReturnFn MoqProcessState_starGenType_SystemTime_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqProcessState_starGenType) PrettyParams_SystemTime(params MoqProcessState_starGenType_SystemTime_params) string {
	return fmt.Sprintf("SystemTime()")
}

func (m *MoqProcessState_starGenType) ParamsKey_SystemTime(params MoqProcessState_starGenType_SystemTime_params, anyParams uint64) MoqProcessState_starGenType_SystemTime_paramsKey {
	m.Scene.T.Helper()
	return MoqProcessState_starGenType_SystemTime_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqProcessState_starGenType_recorder) Exited() *MoqProcessState_starGenType_Exited_fnRecorder {
	return &MoqProcessState_starGenType_Exited_fnRecorder{
		Params:   MoqProcessState_starGenType_Exited_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqProcessState_starGenType_Exited_fnRecorder) Any() *MoqProcessState_starGenType_Exited_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Exited(r.Params))
		return nil
	}
	return &MoqProcessState_starGenType_Exited_anyParams{Recorder: r}
}

func (r *MoqProcessState_starGenType_Exited_fnRecorder) Seq() *MoqProcessState_starGenType_Exited_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Exited(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqProcessState_starGenType_Exited_fnRecorder) NoSeq() *MoqProcessState_starGenType_Exited_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Exited(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqProcessState_starGenType_Exited_fnRecorder) ReturnResults(result1 bool) *MoqProcessState_starGenType_Exited_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_Exited_doFn
		DoReturnFn MoqProcessState_starGenType_Exited_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqProcessState_starGenType_Exited_fnRecorder) AndDo(fn MoqProcessState_starGenType_Exited_doFn) *MoqProcessState_starGenType_Exited_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqProcessState_starGenType_Exited_fnRecorder) DoReturnResults(fn MoqProcessState_starGenType_Exited_doReturnFn) *MoqProcessState_starGenType_Exited_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_Exited_doFn
		DoReturnFn MoqProcessState_starGenType_Exited_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqProcessState_starGenType_Exited_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqProcessState_starGenType_Exited_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Exited {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqProcessState_starGenType_Exited_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqProcessState_starGenType_Exited_paramsKey]*MoqProcessState_starGenType_Exited_results{},
		}
		r.Moq.ResultsByParams_Exited = append(r.Moq.ResultsByParams_Exited, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Exited) {
			copy(r.Moq.ResultsByParams_Exited[insertAt+1:], r.Moq.ResultsByParams_Exited[insertAt:0])
			r.Moq.ResultsByParams_Exited[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Exited(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqProcessState_starGenType_Exited_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqProcessState_starGenType_Exited_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqProcessState_starGenType_Exited_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqProcessState_starGenType_Exited_doFn
				DoReturnFn MoqProcessState_starGenType_Exited_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqProcessState_starGenType) PrettyParams_Exited(params MoqProcessState_starGenType_Exited_params) string {
	return fmt.Sprintf("Exited()")
}

func (m *MoqProcessState_starGenType) ParamsKey_Exited(params MoqProcessState_starGenType_Exited_params, anyParams uint64) MoqProcessState_starGenType_Exited_paramsKey {
	m.Scene.T.Helper()
	return MoqProcessState_starGenType_Exited_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqProcessState_starGenType_recorder) Success() *MoqProcessState_starGenType_Success_fnRecorder {
	return &MoqProcessState_starGenType_Success_fnRecorder{
		Params:   MoqProcessState_starGenType_Success_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqProcessState_starGenType_Success_fnRecorder) Any() *MoqProcessState_starGenType_Success_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Success(r.Params))
		return nil
	}
	return &MoqProcessState_starGenType_Success_anyParams{Recorder: r}
}

func (r *MoqProcessState_starGenType_Success_fnRecorder) Seq() *MoqProcessState_starGenType_Success_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Success(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqProcessState_starGenType_Success_fnRecorder) NoSeq() *MoqProcessState_starGenType_Success_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Success(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqProcessState_starGenType_Success_fnRecorder) ReturnResults(result1 bool) *MoqProcessState_starGenType_Success_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_Success_doFn
		DoReturnFn MoqProcessState_starGenType_Success_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqProcessState_starGenType_Success_fnRecorder) AndDo(fn MoqProcessState_starGenType_Success_doFn) *MoqProcessState_starGenType_Success_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqProcessState_starGenType_Success_fnRecorder) DoReturnResults(fn MoqProcessState_starGenType_Success_doReturnFn) *MoqProcessState_starGenType_Success_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_Success_doFn
		DoReturnFn MoqProcessState_starGenType_Success_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqProcessState_starGenType_Success_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqProcessState_starGenType_Success_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Success {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqProcessState_starGenType_Success_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqProcessState_starGenType_Success_paramsKey]*MoqProcessState_starGenType_Success_results{},
		}
		r.Moq.ResultsByParams_Success = append(r.Moq.ResultsByParams_Success, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Success) {
			copy(r.Moq.ResultsByParams_Success[insertAt+1:], r.Moq.ResultsByParams_Success[insertAt:0])
			r.Moq.ResultsByParams_Success[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Success(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqProcessState_starGenType_Success_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqProcessState_starGenType_Success_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqProcessState_starGenType_Success_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqProcessState_starGenType_Success_doFn
				DoReturnFn MoqProcessState_starGenType_Success_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqProcessState_starGenType) PrettyParams_Success(params MoqProcessState_starGenType_Success_params) string {
	return fmt.Sprintf("Success()")
}

func (m *MoqProcessState_starGenType) ParamsKey_Success(params MoqProcessState_starGenType_Success_params, anyParams uint64) MoqProcessState_starGenType_Success_paramsKey {
	m.Scene.T.Helper()
	return MoqProcessState_starGenType_Success_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqProcessState_starGenType_recorder) Sys() *MoqProcessState_starGenType_Sys_fnRecorder {
	return &MoqProcessState_starGenType_Sys_fnRecorder{
		Params:   MoqProcessState_starGenType_Sys_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqProcessState_starGenType_Sys_fnRecorder) Any() *MoqProcessState_starGenType_Sys_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sys(r.Params))
		return nil
	}
	return &MoqProcessState_starGenType_Sys_anyParams{Recorder: r}
}

func (r *MoqProcessState_starGenType_Sys_fnRecorder) Seq() *MoqProcessState_starGenType_Sys_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sys(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqProcessState_starGenType_Sys_fnRecorder) NoSeq() *MoqProcessState_starGenType_Sys_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sys(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqProcessState_starGenType_Sys_fnRecorder) ReturnResults(result1 any) *MoqProcessState_starGenType_Sys_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 any
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_Sys_doFn
		DoReturnFn MoqProcessState_starGenType_Sys_doReturnFn
	}{
		Values: &struct {
			Result1 any
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqProcessState_starGenType_Sys_fnRecorder) AndDo(fn MoqProcessState_starGenType_Sys_doFn) *MoqProcessState_starGenType_Sys_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqProcessState_starGenType_Sys_fnRecorder) DoReturnResults(fn MoqProcessState_starGenType_Sys_doReturnFn) *MoqProcessState_starGenType_Sys_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 any
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_Sys_doFn
		DoReturnFn MoqProcessState_starGenType_Sys_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqProcessState_starGenType_Sys_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqProcessState_starGenType_Sys_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Sys {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqProcessState_starGenType_Sys_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqProcessState_starGenType_Sys_paramsKey]*MoqProcessState_starGenType_Sys_results{},
		}
		r.Moq.ResultsByParams_Sys = append(r.Moq.ResultsByParams_Sys, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Sys) {
			copy(r.Moq.ResultsByParams_Sys[insertAt+1:], r.Moq.ResultsByParams_Sys[insertAt:0])
			r.Moq.ResultsByParams_Sys[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Sys(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqProcessState_starGenType_Sys_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqProcessState_starGenType_Sys_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqProcessState_starGenType_Sys_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 any
				}
				Sequence   uint32
				DoFn       MoqProcessState_starGenType_Sys_doFn
				DoReturnFn MoqProcessState_starGenType_Sys_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqProcessState_starGenType) PrettyParams_Sys(params MoqProcessState_starGenType_Sys_params) string {
	return fmt.Sprintf("Sys()")
}

func (m *MoqProcessState_starGenType) ParamsKey_Sys(params MoqProcessState_starGenType_Sys_params, anyParams uint64) MoqProcessState_starGenType_Sys_paramsKey {
	m.Scene.T.Helper()
	return MoqProcessState_starGenType_Sys_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqProcessState_starGenType_recorder) SysUsage() *MoqProcessState_starGenType_SysUsage_fnRecorder {
	return &MoqProcessState_starGenType_SysUsage_fnRecorder{
		Params:   MoqProcessState_starGenType_SysUsage_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqProcessState_starGenType_SysUsage_fnRecorder) Any() *MoqProcessState_starGenType_SysUsage_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SysUsage(r.Params))
		return nil
	}
	return &MoqProcessState_starGenType_SysUsage_anyParams{Recorder: r}
}

func (r *MoqProcessState_starGenType_SysUsage_fnRecorder) Seq() *MoqProcessState_starGenType_SysUsage_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SysUsage(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqProcessState_starGenType_SysUsage_fnRecorder) NoSeq() *MoqProcessState_starGenType_SysUsage_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SysUsage(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqProcessState_starGenType_SysUsage_fnRecorder) ReturnResults(result1 any) *MoqProcessState_starGenType_SysUsage_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 any
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_SysUsage_doFn
		DoReturnFn MoqProcessState_starGenType_SysUsage_doReturnFn
	}{
		Values: &struct {
			Result1 any
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqProcessState_starGenType_SysUsage_fnRecorder) AndDo(fn MoqProcessState_starGenType_SysUsage_doFn) *MoqProcessState_starGenType_SysUsage_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqProcessState_starGenType_SysUsage_fnRecorder) DoReturnResults(fn MoqProcessState_starGenType_SysUsage_doReturnFn) *MoqProcessState_starGenType_SysUsage_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 any
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_SysUsage_doFn
		DoReturnFn MoqProcessState_starGenType_SysUsage_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqProcessState_starGenType_SysUsage_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqProcessState_starGenType_SysUsage_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SysUsage {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqProcessState_starGenType_SysUsage_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqProcessState_starGenType_SysUsage_paramsKey]*MoqProcessState_starGenType_SysUsage_results{},
		}
		r.Moq.ResultsByParams_SysUsage = append(r.Moq.ResultsByParams_SysUsage, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SysUsage) {
			copy(r.Moq.ResultsByParams_SysUsage[insertAt+1:], r.Moq.ResultsByParams_SysUsage[insertAt:0])
			r.Moq.ResultsByParams_SysUsage[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SysUsage(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqProcessState_starGenType_SysUsage_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqProcessState_starGenType_SysUsage_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqProcessState_starGenType_SysUsage_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 any
				}
				Sequence   uint32
				DoFn       MoqProcessState_starGenType_SysUsage_doFn
				DoReturnFn MoqProcessState_starGenType_SysUsage_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqProcessState_starGenType) PrettyParams_SysUsage(params MoqProcessState_starGenType_SysUsage_params) string {
	return fmt.Sprintf("SysUsage()")
}

func (m *MoqProcessState_starGenType) ParamsKey_SysUsage(params MoqProcessState_starGenType_SysUsage_params, anyParams uint64) MoqProcessState_starGenType_SysUsage_paramsKey {
	m.Scene.T.Helper()
	return MoqProcessState_starGenType_SysUsage_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqProcessState_starGenType_recorder) Pid() *MoqProcessState_starGenType_Pid_fnRecorder {
	return &MoqProcessState_starGenType_Pid_fnRecorder{
		Params:   MoqProcessState_starGenType_Pid_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqProcessState_starGenType_Pid_fnRecorder) Any() *MoqProcessState_starGenType_Pid_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Pid(r.Params))
		return nil
	}
	return &MoqProcessState_starGenType_Pid_anyParams{Recorder: r}
}

func (r *MoqProcessState_starGenType_Pid_fnRecorder) Seq() *MoqProcessState_starGenType_Pid_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Pid(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqProcessState_starGenType_Pid_fnRecorder) NoSeq() *MoqProcessState_starGenType_Pid_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Pid(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqProcessState_starGenType_Pid_fnRecorder) ReturnResults(result1 int) *MoqProcessState_starGenType_Pid_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_Pid_doFn
		DoReturnFn MoqProcessState_starGenType_Pid_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqProcessState_starGenType_Pid_fnRecorder) AndDo(fn MoqProcessState_starGenType_Pid_doFn) *MoqProcessState_starGenType_Pid_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqProcessState_starGenType_Pid_fnRecorder) DoReturnResults(fn MoqProcessState_starGenType_Pid_doReturnFn) *MoqProcessState_starGenType_Pid_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_Pid_doFn
		DoReturnFn MoqProcessState_starGenType_Pid_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqProcessState_starGenType_Pid_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqProcessState_starGenType_Pid_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Pid {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqProcessState_starGenType_Pid_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqProcessState_starGenType_Pid_paramsKey]*MoqProcessState_starGenType_Pid_results{},
		}
		r.Moq.ResultsByParams_Pid = append(r.Moq.ResultsByParams_Pid, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Pid) {
			copy(r.Moq.ResultsByParams_Pid[insertAt+1:], r.Moq.ResultsByParams_Pid[insertAt:0])
			r.Moq.ResultsByParams_Pid[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Pid(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqProcessState_starGenType_Pid_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqProcessState_starGenType_Pid_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqProcessState_starGenType_Pid_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqProcessState_starGenType_Pid_doFn
				DoReturnFn MoqProcessState_starGenType_Pid_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqProcessState_starGenType) PrettyParams_Pid(params MoqProcessState_starGenType_Pid_params) string {
	return fmt.Sprintf("Pid()")
}

func (m *MoqProcessState_starGenType) ParamsKey_Pid(params MoqProcessState_starGenType_Pid_params, anyParams uint64) MoqProcessState_starGenType_Pid_paramsKey {
	m.Scene.T.Helper()
	return MoqProcessState_starGenType_Pid_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqProcessState_starGenType_recorder) String() *MoqProcessState_starGenType_String_fnRecorder {
	return &MoqProcessState_starGenType_String_fnRecorder{
		Params:   MoqProcessState_starGenType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqProcessState_starGenType_String_fnRecorder) Any() *MoqProcessState_starGenType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqProcessState_starGenType_String_anyParams{Recorder: r}
}

func (r *MoqProcessState_starGenType_String_fnRecorder) Seq() *MoqProcessState_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqProcessState_starGenType_String_fnRecorder) NoSeq() *MoqProcessState_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqProcessState_starGenType_String_fnRecorder) ReturnResults(result1 string) *MoqProcessState_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_String_doFn
		DoReturnFn MoqProcessState_starGenType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqProcessState_starGenType_String_fnRecorder) AndDo(fn MoqProcessState_starGenType_String_doFn) *MoqProcessState_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqProcessState_starGenType_String_fnRecorder) DoReturnResults(fn MoqProcessState_starGenType_String_doReturnFn) *MoqProcessState_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_String_doFn
		DoReturnFn MoqProcessState_starGenType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqProcessState_starGenType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqProcessState_starGenType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqProcessState_starGenType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqProcessState_starGenType_String_paramsKey]*MoqProcessState_starGenType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqProcessState_starGenType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqProcessState_starGenType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqProcessState_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqProcessState_starGenType_String_doFn
				DoReturnFn MoqProcessState_starGenType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqProcessState_starGenType) PrettyParams_String(params MoqProcessState_starGenType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqProcessState_starGenType) ParamsKey_String(params MoqProcessState_starGenType_String_params, anyParams uint64) MoqProcessState_starGenType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqProcessState_starGenType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqProcessState_starGenType_recorder) ExitCode() *MoqProcessState_starGenType_ExitCode_fnRecorder {
	return &MoqProcessState_starGenType_ExitCode_fnRecorder{
		Params:   MoqProcessState_starGenType_ExitCode_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqProcessState_starGenType_ExitCode_fnRecorder) Any() *MoqProcessState_starGenType_ExitCode_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExitCode(r.Params))
		return nil
	}
	return &MoqProcessState_starGenType_ExitCode_anyParams{Recorder: r}
}

func (r *MoqProcessState_starGenType_ExitCode_fnRecorder) Seq() *MoqProcessState_starGenType_ExitCode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExitCode(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqProcessState_starGenType_ExitCode_fnRecorder) NoSeq() *MoqProcessState_starGenType_ExitCode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExitCode(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqProcessState_starGenType_ExitCode_fnRecorder) ReturnResults(result1 int) *MoqProcessState_starGenType_ExitCode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_ExitCode_doFn
		DoReturnFn MoqProcessState_starGenType_ExitCode_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqProcessState_starGenType_ExitCode_fnRecorder) AndDo(fn MoqProcessState_starGenType_ExitCode_doFn) *MoqProcessState_starGenType_ExitCode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqProcessState_starGenType_ExitCode_fnRecorder) DoReturnResults(fn MoqProcessState_starGenType_ExitCode_doReturnFn) *MoqProcessState_starGenType_ExitCode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqProcessState_starGenType_ExitCode_doFn
		DoReturnFn MoqProcessState_starGenType_ExitCode_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqProcessState_starGenType_ExitCode_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqProcessState_starGenType_ExitCode_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ExitCode {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqProcessState_starGenType_ExitCode_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqProcessState_starGenType_ExitCode_paramsKey]*MoqProcessState_starGenType_ExitCode_results{},
		}
		r.Moq.ResultsByParams_ExitCode = append(r.Moq.ResultsByParams_ExitCode, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ExitCode) {
			copy(r.Moq.ResultsByParams_ExitCode[insertAt+1:], r.Moq.ResultsByParams_ExitCode[insertAt:0])
			r.Moq.ResultsByParams_ExitCode[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ExitCode(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqProcessState_starGenType_ExitCode_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqProcessState_starGenType_ExitCode_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqProcessState_starGenType_ExitCode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqProcessState_starGenType_ExitCode_doFn
				DoReturnFn MoqProcessState_starGenType_ExitCode_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqProcessState_starGenType) PrettyParams_ExitCode(params MoqProcessState_starGenType_ExitCode_params) string {
	return fmt.Sprintf("ExitCode()")
}

func (m *MoqProcessState_starGenType) ParamsKey_ExitCode(params MoqProcessState_starGenType_ExitCode_params, anyParams uint64) MoqProcessState_starGenType_ExitCode_paramsKey {
	m.Scene.T.Helper()
	return MoqProcessState_starGenType_ExitCode_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqProcessState_starGenType) Reset() {
	m.ResultsByParams_UserTime = nil
	m.ResultsByParams_SystemTime = nil
	m.ResultsByParams_Exited = nil
	m.ResultsByParams_Success = nil
	m.ResultsByParams_Sys = nil
	m.ResultsByParams_SysUsage = nil
	m.ResultsByParams_Pid = nil
	m.ResultsByParams_String = nil
	m.ResultsByParams_ExitCode = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqProcessState_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_UserTime {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_UserTime(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SystemTime {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SystemTime(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Exited {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Exited(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Success {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Success(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Sys {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Sys(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SysUsage {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SysUsage(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Pid {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Pid(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ExitCode {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ExitCode(results.Params))
			}
		}
	}
}
