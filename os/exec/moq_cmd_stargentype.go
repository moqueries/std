// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package exec

import (
	"fmt"
	"io"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that exec.Cmd_starGenType is mocked
// completely
var _ Cmd_starGenType = (*MoqCmd_starGenType_mock)(nil)

// Cmd_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Cmd_starGenType interface {
	String() string
	Run() error
	Start() error
	Wait() error
	Output() ([]byte, error)
	CombinedOutput() ([]byte, error)
	StdinPipe() (io.WriteCloser, error)
	StdoutPipe() (io.ReadCloser, error)
	StderrPipe() (io.ReadCloser, error)
}

// MoqCmd_starGenType holds the state of a moq of the Cmd_starGenType type
type MoqCmd_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqCmd_starGenType_mock

	ResultsByParams_String         []MoqCmd_starGenType_String_resultsByParams
	ResultsByParams_Run            []MoqCmd_starGenType_Run_resultsByParams
	ResultsByParams_Start          []MoqCmd_starGenType_Start_resultsByParams
	ResultsByParams_Wait           []MoqCmd_starGenType_Wait_resultsByParams
	ResultsByParams_Output         []MoqCmd_starGenType_Output_resultsByParams
	ResultsByParams_CombinedOutput []MoqCmd_starGenType_CombinedOutput_resultsByParams
	ResultsByParams_StdinPipe      []MoqCmd_starGenType_StdinPipe_resultsByParams
	ResultsByParams_StdoutPipe     []MoqCmd_starGenType_StdoutPipe_resultsByParams
	ResultsByParams_StderrPipe     []MoqCmd_starGenType_StderrPipe_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			String         struct{}
			Run            struct{}
			Start          struct{}
			Wait           struct{}
			Output         struct{}
			CombinedOutput struct{}
			StdinPipe      struct{}
			StdoutPipe     struct{}
			StderrPipe     struct{}
		}
	}
}

// MoqCmd_starGenType_mock isolates the mock interface of the Cmd_starGenType
// type
type MoqCmd_starGenType_mock struct {
	Moq *MoqCmd_starGenType
}

// MoqCmd_starGenType_recorder isolates the recorder interface of the
// Cmd_starGenType type
type MoqCmd_starGenType_recorder struct {
	Moq *MoqCmd_starGenType
}

// MoqCmd_starGenType_String_params holds the params of the Cmd_starGenType
// type
type MoqCmd_starGenType_String_params struct{}

// MoqCmd_starGenType_String_paramsKey holds the map key params of the
// Cmd_starGenType type
type MoqCmd_starGenType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqCmd_starGenType_String_resultsByParams contains the results for a given
// set of parameters for the Cmd_starGenType type
type MoqCmd_starGenType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCmd_starGenType_String_paramsKey]*MoqCmd_starGenType_String_results
}

// MoqCmd_starGenType_String_doFn defines the type of function needed when
// calling AndDo for the Cmd_starGenType type
type MoqCmd_starGenType_String_doFn func()

// MoqCmd_starGenType_String_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Cmd_starGenType type
type MoqCmd_starGenType_String_doReturnFn func() string

// MoqCmd_starGenType_String_results holds the results of the Cmd_starGenType
// type
type MoqCmd_starGenType_String_results struct {
	Params  MoqCmd_starGenType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_String_doFn
		DoReturnFn MoqCmd_starGenType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCmd_starGenType_String_fnRecorder routes recorded function calls to the
// MoqCmd_starGenType moq
type MoqCmd_starGenType_String_fnRecorder struct {
	Params    MoqCmd_starGenType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCmd_starGenType_String_results
	Moq       *MoqCmd_starGenType
}

// MoqCmd_starGenType_String_anyParams isolates the any params functions of the
// Cmd_starGenType type
type MoqCmd_starGenType_String_anyParams struct {
	Recorder *MoqCmd_starGenType_String_fnRecorder
}

// MoqCmd_starGenType_Run_params holds the params of the Cmd_starGenType type
type MoqCmd_starGenType_Run_params struct{}

// MoqCmd_starGenType_Run_paramsKey holds the map key params of the
// Cmd_starGenType type
type MoqCmd_starGenType_Run_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqCmd_starGenType_Run_resultsByParams contains the results for a given set
// of parameters for the Cmd_starGenType type
type MoqCmd_starGenType_Run_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCmd_starGenType_Run_paramsKey]*MoqCmd_starGenType_Run_results
}

// MoqCmd_starGenType_Run_doFn defines the type of function needed when calling
// AndDo for the Cmd_starGenType type
type MoqCmd_starGenType_Run_doFn func()

// MoqCmd_starGenType_Run_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Cmd_starGenType type
type MoqCmd_starGenType_Run_doReturnFn func() error

// MoqCmd_starGenType_Run_results holds the results of the Cmd_starGenType type
type MoqCmd_starGenType_Run_results struct {
	Params  MoqCmd_starGenType_Run_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_Run_doFn
		DoReturnFn MoqCmd_starGenType_Run_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCmd_starGenType_Run_fnRecorder routes recorded function calls to the
// MoqCmd_starGenType moq
type MoqCmd_starGenType_Run_fnRecorder struct {
	Params    MoqCmd_starGenType_Run_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCmd_starGenType_Run_results
	Moq       *MoqCmd_starGenType
}

// MoqCmd_starGenType_Run_anyParams isolates the any params functions of the
// Cmd_starGenType type
type MoqCmd_starGenType_Run_anyParams struct {
	Recorder *MoqCmd_starGenType_Run_fnRecorder
}

// MoqCmd_starGenType_Start_params holds the params of the Cmd_starGenType type
type MoqCmd_starGenType_Start_params struct{}

// MoqCmd_starGenType_Start_paramsKey holds the map key params of the
// Cmd_starGenType type
type MoqCmd_starGenType_Start_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqCmd_starGenType_Start_resultsByParams contains the results for a given
// set of parameters for the Cmd_starGenType type
type MoqCmd_starGenType_Start_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCmd_starGenType_Start_paramsKey]*MoqCmd_starGenType_Start_results
}

// MoqCmd_starGenType_Start_doFn defines the type of function needed when
// calling AndDo for the Cmd_starGenType type
type MoqCmd_starGenType_Start_doFn func()

// MoqCmd_starGenType_Start_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Cmd_starGenType type
type MoqCmd_starGenType_Start_doReturnFn func() error

// MoqCmd_starGenType_Start_results holds the results of the Cmd_starGenType
// type
type MoqCmd_starGenType_Start_results struct {
	Params  MoqCmd_starGenType_Start_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_Start_doFn
		DoReturnFn MoqCmd_starGenType_Start_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCmd_starGenType_Start_fnRecorder routes recorded function calls to the
// MoqCmd_starGenType moq
type MoqCmd_starGenType_Start_fnRecorder struct {
	Params    MoqCmd_starGenType_Start_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCmd_starGenType_Start_results
	Moq       *MoqCmd_starGenType
}

// MoqCmd_starGenType_Start_anyParams isolates the any params functions of the
// Cmd_starGenType type
type MoqCmd_starGenType_Start_anyParams struct {
	Recorder *MoqCmd_starGenType_Start_fnRecorder
}

// MoqCmd_starGenType_Wait_params holds the params of the Cmd_starGenType type
type MoqCmd_starGenType_Wait_params struct{}

// MoqCmd_starGenType_Wait_paramsKey holds the map key params of the
// Cmd_starGenType type
type MoqCmd_starGenType_Wait_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqCmd_starGenType_Wait_resultsByParams contains the results for a given set
// of parameters for the Cmd_starGenType type
type MoqCmd_starGenType_Wait_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCmd_starGenType_Wait_paramsKey]*MoqCmd_starGenType_Wait_results
}

// MoqCmd_starGenType_Wait_doFn defines the type of function needed when
// calling AndDo for the Cmd_starGenType type
type MoqCmd_starGenType_Wait_doFn func()

// MoqCmd_starGenType_Wait_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Cmd_starGenType type
type MoqCmd_starGenType_Wait_doReturnFn func() error

// MoqCmd_starGenType_Wait_results holds the results of the Cmd_starGenType
// type
type MoqCmd_starGenType_Wait_results struct {
	Params  MoqCmd_starGenType_Wait_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_Wait_doFn
		DoReturnFn MoqCmd_starGenType_Wait_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCmd_starGenType_Wait_fnRecorder routes recorded function calls to the
// MoqCmd_starGenType moq
type MoqCmd_starGenType_Wait_fnRecorder struct {
	Params    MoqCmd_starGenType_Wait_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCmd_starGenType_Wait_results
	Moq       *MoqCmd_starGenType
}

// MoqCmd_starGenType_Wait_anyParams isolates the any params functions of the
// Cmd_starGenType type
type MoqCmd_starGenType_Wait_anyParams struct {
	Recorder *MoqCmd_starGenType_Wait_fnRecorder
}

// MoqCmd_starGenType_Output_params holds the params of the Cmd_starGenType
// type
type MoqCmd_starGenType_Output_params struct{}

// MoqCmd_starGenType_Output_paramsKey holds the map key params of the
// Cmd_starGenType type
type MoqCmd_starGenType_Output_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqCmd_starGenType_Output_resultsByParams contains the results for a given
// set of parameters for the Cmd_starGenType type
type MoqCmd_starGenType_Output_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCmd_starGenType_Output_paramsKey]*MoqCmd_starGenType_Output_results
}

// MoqCmd_starGenType_Output_doFn defines the type of function needed when
// calling AndDo for the Cmd_starGenType type
type MoqCmd_starGenType_Output_doFn func()

// MoqCmd_starGenType_Output_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Cmd_starGenType type
type MoqCmd_starGenType_Output_doReturnFn func() ([]byte, error)

// MoqCmd_starGenType_Output_results holds the results of the Cmd_starGenType
// type
type MoqCmd_starGenType_Output_results struct {
	Params  MoqCmd_starGenType_Output_params
	Results []struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_Output_doFn
		DoReturnFn MoqCmd_starGenType_Output_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCmd_starGenType_Output_fnRecorder routes recorded function calls to the
// MoqCmd_starGenType moq
type MoqCmd_starGenType_Output_fnRecorder struct {
	Params    MoqCmd_starGenType_Output_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCmd_starGenType_Output_results
	Moq       *MoqCmd_starGenType
}

// MoqCmd_starGenType_Output_anyParams isolates the any params functions of the
// Cmd_starGenType type
type MoqCmd_starGenType_Output_anyParams struct {
	Recorder *MoqCmd_starGenType_Output_fnRecorder
}

// MoqCmd_starGenType_CombinedOutput_params holds the params of the
// Cmd_starGenType type
type MoqCmd_starGenType_CombinedOutput_params struct{}

// MoqCmd_starGenType_CombinedOutput_paramsKey holds the map key params of the
// Cmd_starGenType type
type MoqCmd_starGenType_CombinedOutput_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqCmd_starGenType_CombinedOutput_resultsByParams contains the results for a
// given set of parameters for the Cmd_starGenType type
type MoqCmd_starGenType_CombinedOutput_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCmd_starGenType_CombinedOutput_paramsKey]*MoqCmd_starGenType_CombinedOutput_results
}

// MoqCmd_starGenType_CombinedOutput_doFn defines the type of function needed
// when calling AndDo for the Cmd_starGenType type
type MoqCmd_starGenType_CombinedOutput_doFn func()

// MoqCmd_starGenType_CombinedOutput_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Cmd_starGenType type
type MoqCmd_starGenType_CombinedOutput_doReturnFn func() ([]byte, error)

// MoqCmd_starGenType_CombinedOutput_results holds the results of the
// Cmd_starGenType type
type MoqCmd_starGenType_CombinedOutput_results struct {
	Params  MoqCmd_starGenType_CombinedOutput_params
	Results []struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_CombinedOutput_doFn
		DoReturnFn MoqCmd_starGenType_CombinedOutput_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCmd_starGenType_CombinedOutput_fnRecorder routes recorded function calls
// to the MoqCmd_starGenType moq
type MoqCmd_starGenType_CombinedOutput_fnRecorder struct {
	Params    MoqCmd_starGenType_CombinedOutput_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCmd_starGenType_CombinedOutput_results
	Moq       *MoqCmd_starGenType
}

// MoqCmd_starGenType_CombinedOutput_anyParams isolates the any params
// functions of the Cmd_starGenType type
type MoqCmd_starGenType_CombinedOutput_anyParams struct {
	Recorder *MoqCmd_starGenType_CombinedOutput_fnRecorder
}

// MoqCmd_starGenType_StdinPipe_params holds the params of the Cmd_starGenType
// type
type MoqCmd_starGenType_StdinPipe_params struct{}

// MoqCmd_starGenType_StdinPipe_paramsKey holds the map key params of the
// Cmd_starGenType type
type MoqCmd_starGenType_StdinPipe_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqCmd_starGenType_StdinPipe_resultsByParams contains the results for a
// given set of parameters for the Cmd_starGenType type
type MoqCmd_starGenType_StdinPipe_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCmd_starGenType_StdinPipe_paramsKey]*MoqCmd_starGenType_StdinPipe_results
}

// MoqCmd_starGenType_StdinPipe_doFn defines the type of function needed when
// calling AndDo for the Cmd_starGenType type
type MoqCmd_starGenType_StdinPipe_doFn func()

// MoqCmd_starGenType_StdinPipe_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Cmd_starGenType type
type MoqCmd_starGenType_StdinPipe_doReturnFn func() (io.WriteCloser, error)

// MoqCmd_starGenType_StdinPipe_results holds the results of the
// Cmd_starGenType type
type MoqCmd_starGenType_StdinPipe_results struct {
	Params  MoqCmd_starGenType_StdinPipe_params
	Results []struct {
		Values *struct {
			Result1 io.WriteCloser
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_StdinPipe_doFn
		DoReturnFn MoqCmd_starGenType_StdinPipe_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCmd_starGenType_StdinPipe_fnRecorder routes recorded function calls to
// the MoqCmd_starGenType moq
type MoqCmd_starGenType_StdinPipe_fnRecorder struct {
	Params    MoqCmd_starGenType_StdinPipe_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCmd_starGenType_StdinPipe_results
	Moq       *MoqCmd_starGenType
}

// MoqCmd_starGenType_StdinPipe_anyParams isolates the any params functions of
// the Cmd_starGenType type
type MoqCmd_starGenType_StdinPipe_anyParams struct {
	Recorder *MoqCmd_starGenType_StdinPipe_fnRecorder
}

// MoqCmd_starGenType_StdoutPipe_params holds the params of the Cmd_starGenType
// type
type MoqCmd_starGenType_StdoutPipe_params struct{}

// MoqCmd_starGenType_StdoutPipe_paramsKey holds the map key params of the
// Cmd_starGenType type
type MoqCmd_starGenType_StdoutPipe_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqCmd_starGenType_StdoutPipe_resultsByParams contains the results for a
// given set of parameters for the Cmd_starGenType type
type MoqCmd_starGenType_StdoutPipe_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCmd_starGenType_StdoutPipe_paramsKey]*MoqCmd_starGenType_StdoutPipe_results
}

// MoqCmd_starGenType_StdoutPipe_doFn defines the type of function needed when
// calling AndDo for the Cmd_starGenType type
type MoqCmd_starGenType_StdoutPipe_doFn func()

// MoqCmd_starGenType_StdoutPipe_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Cmd_starGenType type
type MoqCmd_starGenType_StdoutPipe_doReturnFn func() (io.ReadCloser, error)

// MoqCmd_starGenType_StdoutPipe_results holds the results of the
// Cmd_starGenType type
type MoqCmd_starGenType_StdoutPipe_results struct {
	Params  MoqCmd_starGenType_StdoutPipe_params
	Results []struct {
		Values *struct {
			Result1 io.ReadCloser
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_StdoutPipe_doFn
		DoReturnFn MoqCmd_starGenType_StdoutPipe_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCmd_starGenType_StdoutPipe_fnRecorder routes recorded function calls to
// the MoqCmd_starGenType moq
type MoqCmd_starGenType_StdoutPipe_fnRecorder struct {
	Params    MoqCmd_starGenType_StdoutPipe_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCmd_starGenType_StdoutPipe_results
	Moq       *MoqCmd_starGenType
}

// MoqCmd_starGenType_StdoutPipe_anyParams isolates the any params functions of
// the Cmd_starGenType type
type MoqCmd_starGenType_StdoutPipe_anyParams struct {
	Recorder *MoqCmd_starGenType_StdoutPipe_fnRecorder
}

// MoqCmd_starGenType_StderrPipe_params holds the params of the Cmd_starGenType
// type
type MoqCmd_starGenType_StderrPipe_params struct{}

// MoqCmd_starGenType_StderrPipe_paramsKey holds the map key params of the
// Cmd_starGenType type
type MoqCmd_starGenType_StderrPipe_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqCmd_starGenType_StderrPipe_resultsByParams contains the results for a
// given set of parameters for the Cmd_starGenType type
type MoqCmd_starGenType_StderrPipe_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCmd_starGenType_StderrPipe_paramsKey]*MoqCmd_starGenType_StderrPipe_results
}

// MoqCmd_starGenType_StderrPipe_doFn defines the type of function needed when
// calling AndDo for the Cmd_starGenType type
type MoqCmd_starGenType_StderrPipe_doFn func()

// MoqCmd_starGenType_StderrPipe_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Cmd_starGenType type
type MoqCmd_starGenType_StderrPipe_doReturnFn func() (io.ReadCloser, error)

// MoqCmd_starGenType_StderrPipe_results holds the results of the
// Cmd_starGenType type
type MoqCmd_starGenType_StderrPipe_results struct {
	Params  MoqCmd_starGenType_StderrPipe_params
	Results []struct {
		Values *struct {
			Result1 io.ReadCloser
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_StderrPipe_doFn
		DoReturnFn MoqCmd_starGenType_StderrPipe_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCmd_starGenType_StderrPipe_fnRecorder routes recorded function calls to
// the MoqCmd_starGenType moq
type MoqCmd_starGenType_StderrPipe_fnRecorder struct {
	Params    MoqCmd_starGenType_StderrPipe_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCmd_starGenType_StderrPipe_results
	Moq       *MoqCmd_starGenType
}

// MoqCmd_starGenType_StderrPipe_anyParams isolates the any params functions of
// the Cmd_starGenType type
type MoqCmd_starGenType_StderrPipe_anyParams struct {
	Recorder *MoqCmd_starGenType_StderrPipe_fnRecorder
}

// NewMoqCmd_starGenType creates a new moq of the Cmd_starGenType type
func NewMoqCmd_starGenType(scene *moq.Scene, config *moq.Config) *MoqCmd_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqCmd_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqCmd_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				String         struct{}
				Run            struct{}
				Start          struct{}
				Wait           struct{}
				Output         struct{}
				CombinedOutput struct{}
				StdinPipe      struct{}
				StdoutPipe     struct{}
				StderrPipe     struct{}
			}
		}{ParameterIndexing: struct {
			String         struct{}
			Run            struct{}
			Start          struct{}
			Wait           struct{}
			Output         struct{}
			CombinedOutput struct{}
			StdinPipe      struct{}
			StdoutPipe     struct{}
			StderrPipe     struct{}
		}{
			String:         struct{}{},
			Run:            struct{}{},
			Start:          struct{}{},
			Wait:           struct{}{},
			Output:         struct{}{},
			CombinedOutput: struct{}{},
			StdinPipe:      struct{}{},
			StdoutPipe:     struct{}{},
			StderrPipe:     struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Cmd_starGenType type
func (m *MoqCmd_starGenType) Mock() *MoqCmd_starGenType_mock { return m.Moq }

func (m *MoqCmd_starGenType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqCmd_starGenType_String_params{}
	var results *MoqCmd_starGenType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqCmd_starGenType_mock) Run() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqCmd_starGenType_Run_params{}
	var results *MoqCmd_starGenType_Run_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Run {
		paramsKey := m.Moq.ParamsKey_Run(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Run(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Run(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Run(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqCmd_starGenType_mock) Start() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqCmd_starGenType_Start_params{}
	var results *MoqCmd_starGenType_Start_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Start {
		paramsKey := m.Moq.ParamsKey_Start(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Start(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Start(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Start(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqCmd_starGenType_mock) Wait() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqCmd_starGenType_Wait_params{}
	var results *MoqCmd_starGenType_Wait_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Wait {
		paramsKey := m.Moq.ParamsKey_Wait(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Wait(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Wait(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Wait(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqCmd_starGenType_mock) Output() (result1 []byte, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqCmd_starGenType_Output_params{}
	var results *MoqCmd_starGenType_Output_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Output {
		paramsKey := m.Moq.ParamsKey_Output(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Output(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Output(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Output(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqCmd_starGenType_mock) CombinedOutput() (result1 []byte, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqCmd_starGenType_CombinedOutput_params{}
	var results *MoqCmd_starGenType_CombinedOutput_results
	for _, resultsByParams := range m.Moq.ResultsByParams_CombinedOutput {
		paramsKey := m.Moq.ParamsKey_CombinedOutput(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_CombinedOutput(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_CombinedOutput(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_CombinedOutput(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqCmd_starGenType_mock) StdinPipe() (result1 io.WriteCloser, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqCmd_starGenType_StdinPipe_params{}
	var results *MoqCmd_starGenType_StdinPipe_results
	for _, resultsByParams := range m.Moq.ResultsByParams_StdinPipe {
		paramsKey := m.Moq.ParamsKey_StdinPipe(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_StdinPipe(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_StdinPipe(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_StdinPipe(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqCmd_starGenType_mock) StdoutPipe() (result1 io.ReadCloser, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqCmd_starGenType_StdoutPipe_params{}
	var results *MoqCmd_starGenType_StdoutPipe_results
	for _, resultsByParams := range m.Moq.ResultsByParams_StdoutPipe {
		paramsKey := m.Moq.ParamsKey_StdoutPipe(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_StdoutPipe(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_StdoutPipe(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_StdoutPipe(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqCmd_starGenType_mock) StderrPipe() (result1 io.ReadCloser, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqCmd_starGenType_StderrPipe_params{}
	var results *MoqCmd_starGenType_StderrPipe_results
	for _, resultsByParams := range m.Moq.ResultsByParams_StderrPipe {
		paramsKey := m.Moq.ParamsKey_StderrPipe(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_StderrPipe(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_StderrPipe(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_StderrPipe(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Cmd_starGenType type
func (m *MoqCmd_starGenType) OnCall() *MoqCmd_starGenType_recorder {
	return &MoqCmd_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqCmd_starGenType_recorder) String() *MoqCmd_starGenType_String_fnRecorder {
	return &MoqCmd_starGenType_String_fnRecorder{
		Params:   MoqCmd_starGenType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCmd_starGenType_String_fnRecorder) Any() *MoqCmd_starGenType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqCmd_starGenType_String_anyParams{Recorder: r}
}

func (r *MoqCmd_starGenType_String_fnRecorder) Seq() *MoqCmd_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCmd_starGenType_String_fnRecorder) NoSeq() *MoqCmd_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCmd_starGenType_String_fnRecorder) ReturnResults(result1 string) *MoqCmd_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_String_doFn
		DoReturnFn MoqCmd_starGenType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCmd_starGenType_String_fnRecorder) AndDo(fn MoqCmd_starGenType_String_doFn) *MoqCmd_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCmd_starGenType_String_fnRecorder) DoReturnResults(fn MoqCmd_starGenType_String_doReturnFn) *MoqCmd_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_String_doFn
		DoReturnFn MoqCmd_starGenType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCmd_starGenType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCmd_starGenType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCmd_starGenType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCmd_starGenType_String_paramsKey]*MoqCmd_starGenType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCmd_starGenType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCmd_starGenType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCmd_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqCmd_starGenType_String_doFn
				DoReturnFn MoqCmd_starGenType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCmd_starGenType) PrettyParams_String(params MoqCmd_starGenType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqCmd_starGenType) ParamsKey_String(params MoqCmd_starGenType_String_params, anyParams uint64) MoqCmd_starGenType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqCmd_starGenType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqCmd_starGenType_recorder) Run() *MoqCmd_starGenType_Run_fnRecorder {
	return &MoqCmd_starGenType_Run_fnRecorder{
		Params:   MoqCmd_starGenType_Run_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCmd_starGenType_Run_fnRecorder) Any() *MoqCmd_starGenType_Run_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Run(r.Params))
		return nil
	}
	return &MoqCmd_starGenType_Run_anyParams{Recorder: r}
}

func (r *MoqCmd_starGenType_Run_fnRecorder) Seq() *MoqCmd_starGenType_Run_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Run(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCmd_starGenType_Run_fnRecorder) NoSeq() *MoqCmd_starGenType_Run_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Run(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCmd_starGenType_Run_fnRecorder) ReturnResults(result1 error) *MoqCmd_starGenType_Run_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_Run_doFn
		DoReturnFn MoqCmd_starGenType_Run_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCmd_starGenType_Run_fnRecorder) AndDo(fn MoqCmd_starGenType_Run_doFn) *MoqCmd_starGenType_Run_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCmd_starGenType_Run_fnRecorder) DoReturnResults(fn MoqCmd_starGenType_Run_doReturnFn) *MoqCmd_starGenType_Run_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_Run_doFn
		DoReturnFn MoqCmd_starGenType_Run_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCmd_starGenType_Run_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCmd_starGenType_Run_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Run {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCmd_starGenType_Run_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCmd_starGenType_Run_paramsKey]*MoqCmd_starGenType_Run_results{},
		}
		r.Moq.ResultsByParams_Run = append(r.Moq.ResultsByParams_Run, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Run) {
			copy(r.Moq.ResultsByParams_Run[insertAt+1:], r.Moq.ResultsByParams_Run[insertAt:0])
			r.Moq.ResultsByParams_Run[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Run(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCmd_starGenType_Run_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCmd_starGenType_Run_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCmd_starGenType_Run_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqCmd_starGenType_Run_doFn
				DoReturnFn MoqCmd_starGenType_Run_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCmd_starGenType) PrettyParams_Run(params MoqCmd_starGenType_Run_params) string {
	return fmt.Sprintf("Run()")
}

func (m *MoqCmd_starGenType) ParamsKey_Run(params MoqCmd_starGenType_Run_params, anyParams uint64) MoqCmd_starGenType_Run_paramsKey {
	m.Scene.T.Helper()
	return MoqCmd_starGenType_Run_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqCmd_starGenType_recorder) Start() *MoqCmd_starGenType_Start_fnRecorder {
	return &MoqCmd_starGenType_Start_fnRecorder{
		Params:   MoqCmd_starGenType_Start_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCmd_starGenType_Start_fnRecorder) Any() *MoqCmd_starGenType_Start_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Start(r.Params))
		return nil
	}
	return &MoqCmd_starGenType_Start_anyParams{Recorder: r}
}

func (r *MoqCmd_starGenType_Start_fnRecorder) Seq() *MoqCmd_starGenType_Start_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Start(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCmd_starGenType_Start_fnRecorder) NoSeq() *MoqCmd_starGenType_Start_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Start(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCmd_starGenType_Start_fnRecorder) ReturnResults(result1 error) *MoqCmd_starGenType_Start_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_Start_doFn
		DoReturnFn MoqCmd_starGenType_Start_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCmd_starGenType_Start_fnRecorder) AndDo(fn MoqCmd_starGenType_Start_doFn) *MoqCmd_starGenType_Start_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCmd_starGenType_Start_fnRecorder) DoReturnResults(fn MoqCmd_starGenType_Start_doReturnFn) *MoqCmd_starGenType_Start_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_Start_doFn
		DoReturnFn MoqCmd_starGenType_Start_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCmd_starGenType_Start_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCmd_starGenType_Start_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Start {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCmd_starGenType_Start_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCmd_starGenType_Start_paramsKey]*MoqCmd_starGenType_Start_results{},
		}
		r.Moq.ResultsByParams_Start = append(r.Moq.ResultsByParams_Start, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Start) {
			copy(r.Moq.ResultsByParams_Start[insertAt+1:], r.Moq.ResultsByParams_Start[insertAt:0])
			r.Moq.ResultsByParams_Start[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Start(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCmd_starGenType_Start_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCmd_starGenType_Start_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCmd_starGenType_Start_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqCmd_starGenType_Start_doFn
				DoReturnFn MoqCmd_starGenType_Start_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCmd_starGenType) PrettyParams_Start(params MoqCmd_starGenType_Start_params) string {
	return fmt.Sprintf("Start()")
}

func (m *MoqCmd_starGenType) ParamsKey_Start(params MoqCmd_starGenType_Start_params, anyParams uint64) MoqCmd_starGenType_Start_paramsKey {
	m.Scene.T.Helper()
	return MoqCmd_starGenType_Start_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqCmd_starGenType_recorder) Wait() *MoqCmd_starGenType_Wait_fnRecorder {
	return &MoqCmd_starGenType_Wait_fnRecorder{
		Params:   MoqCmd_starGenType_Wait_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCmd_starGenType_Wait_fnRecorder) Any() *MoqCmd_starGenType_Wait_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Wait(r.Params))
		return nil
	}
	return &MoqCmd_starGenType_Wait_anyParams{Recorder: r}
}

func (r *MoqCmd_starGenType_Wait_fnRecorder) Seq() *MoqCmd_starGenType_Wait_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Wait(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCmd_starGenType_Wait_fnRecorder) NoSeq() *MoqCmd_starGenType_Wait_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Wait(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCmd_starGenType_Wait_fnRecorder) ReturnResults(result1 error) *MoqCmd_starGenType_Wait_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_Wait_doFn
		DoReturnFn MoqCmd_starGenType_Wait_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCmd_starGenType_Wait_fnRecorder) AndDo(fn MoqCmd_starGenType_Wait_doFn) *MoqCmd_starGenType_Wait_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCmd_starGenType_Wait_fnRecorder) DoReturnResults(fn MoqCmd_starGenType_Wait_doReturnFn) *MoqCmd_starGenType_Wait_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_Wait_doFn
		DoReturnFn MoqCmd_starGenType_Wait_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCmd_starGenType_Wait_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCmd_starGenType_Wait_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Wait {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCmd_starGenType_Wait_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCmd_starGenType_Wait_paramsKey]*MoqCmd_starGenType_Wait_results{},
		}
		r.Moq.ResultsByParams_Wait = append(r.Moq.ResultsByParams_Wait, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Wait) {
			copy(r.Moq.ResultsByParams_Wait[insertAt+1:], r.Moq.ResultsByParams_Wait[insertAt:0])
			r.Moq.ResultsByParams_Wait[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Wait(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCmd_starGenType_Wait_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCmd_starGenType_Wait_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCmd_starGenType_Wait_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqCmd_starGenType_Wait_doFn
				DoReturnFn MoqCmd_starGenType_Wait_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCmd_starGenType) PrettyParams_Wait(params MoqCmd_starGenType_Wait_params) string {
	return fmt.Sprintf("Wait()")
}

func (m *MoqCmd_starGenType) ParamsKey_Wait(params MoqCmd_starGenType_Wait_params, anyParams uint64) MoqCmd_starGenType_Wait_paramsKey {
	m.Scene.T.Helper()
	return MoqCmd_starGenType_Wait_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqCmd_starGenType_recorder) Output() *MoqCmd_starGenType_Output_fnRecorder {
	return &MoqCmd_starGenType_Output_fnRecorder{
		Params:   MoqCmd_starGenType_Output_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCmd_starGenType_Output_fnRecorder) Any() *MoqCmd_starGenType_Output_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Output(r.Params))
		return nil
	}
	return &MoqCmd_starGenType_Output_anyParams{Recorder: r}
}

func (r *MoqCmd_starGenType_Output_fnRecorder) Seq() *MoqCmd_starGenType_Output_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Output(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCmd_starGenType_Output_fnRecorder) NoSeq() *MoqCmd_starGenType_Output_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Output(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCmd_starGenType_Output_fnRecorder) ReturnResults(result1 []byte, result2 error) *MoqCmd_starGenType_Output_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_Output_doFn
		DoReturnFn MoqCmd_starGenType_Output_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCmd_starGenType_Output_fnRecorder) AndDo(fn MoqCmd_starGenType_Output_doFn) *MoqCmd_starGenType_Output_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCmd_starGenType_Output_fnRecorder) DoReturnResults(fn MoqCmd_starGenType_Output_doReturnFn) *MoqCmd_starGenType_Output_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_Output_doFn
		DoReturnFn MoqCmd_starGenType_Output_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCmd_starGenType_Output_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCmd_starGenType_Output_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Output {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCmd_starGenType_Output_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCmd_starGenType_Output_paramsKey]*MoqCmd_starGenType_Output_results{},
		}
		r.Moq.ResultsByParams_Output = append(r.Moq.ResultsByParams_Output, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Output) {
			copy(r.Moq.ResultsByParams_Output[insertAt+1:], r.Moq.ResultsByParams_Output[insertAt:0])
			r.Moq.ResultsByParams_Output[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Output(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCmd_starGenType_Output_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCmd_starGenType_Output_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCmd_starGenType_Output_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqCmd_starGenType_Output_doFn
				DoReturnFn MoqCmd_starGenType_Output_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCmd_starGenType) PrettyParams_Output(params MoqCmd_starGenType_Output_params) string {
	return fmt.Sprintf("Output()")
}

func (m *MoqCmd_starGenType) ParamsKey_Output(params MoqCmd_starGenType_Output_params, anyParams uint64) MoqCmd_starGenType_Output_paramsKey {
	m.Scene.T.Helper()
	return MoqCmd_starGenType_Output_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqCmd_starGenType_recorder) CombinedOutput() *MoqCmd_starGenType_CombinedOutput_fnRecorder {
	return &MoqCmd_starGenType_CombinedOutput_fnRecorder{
		Params:   MoqCmd_starGenType_CombinedOutput_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCmd_starGenType_CombinedOutput_fnRecorder) Any() *MoqCmd_starGenType_CombinedOutput_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CombinedOutput(r.Params))
		return nil
	}
	return &MoqCmd_starGenType_CombinedOutput_anyParams{Recorder: r}
}

func (r *MoqCmd_starGenType_CombinedOutput_fnRecorder) Seq() *MoqCmd_starGenType_CombinedOutput_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CombinedOutput(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCmd_starGenType_CombinedOutput_fnRecorder) NoSeq() *MoqCmd_starGenType_CombinedOutput_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CombinedOutput(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCmd_starGenType_CombinedOutput_fnRecorder) ReturnResults(result1 []byte, result2 error) *MoqCmd_starGenType_CombinedOutput_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_CombinedOutput_doFn
		DoReturnFn MoqCmd_starGenType_CombinedOutput_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCmd_starGenType_CombinedOutput_fnRecorder) AndDo(fn MoqCmd_starGenType_CombinedOutput_doFn) *MoqCmd_starGenType_CombinedOutput_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCmd_starGenType_CombinedOutput_fnRecorder) DoReturnResults(fn MoqCmd_starGenType_CombinedOutput_doReturnFn) *MoqCmd_starGenType_CombinedOutput_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_CombinedOutput_doFn
		DoReturnFn MoqCmd_starGenType_CombinedOutput_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCmd_starGenType_CombinedOutput_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCmd_starGenType_CombinedOutput_resultsByParams
	for n, res := range r.Moq.ResultsByParams_CombinedOutput {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCmd_starGenType_CombinedOutput_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCmd_starGenType_CombinedOutput_paramsKey]*MoqCmd_starGenType_CombinedOutput_results{},
		}
		r.Moq.ResultsByParams_CombinedOutput = append(r.Moq.ResultsByParams_CombinedOutput, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_CombinedOutput) {
			copy(r.Moq.ResultsByParams_CombinedOutput[insertAt+1:], r.Moq.ResultsByParams_CombinedOutput[insertAt:0])
			r.Moq.ResultsByParams_CombinedOutput[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_CombinedOutput(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCmd_starGenType_CombinedOutput_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCmd_starGenType_CombinedOutput_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCmd_starGenType_CombinedOutput_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqCmd_starGenType_CombinedOutput_doFn
				DoReturnFn MoqCmd_starGenType_CombinedOutput_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCmd_starGenType) PrettyParams_CombinedOutput(params MoqCmd_starGenType_CombinedOutput_params) string {
	return fmt.Sprintf("CombinedOutput()")
}

func (m *MoqCmd_starGenType) ParamsKey_CombinedOutput(params MoqCmd_starGenType_CombinedOutput_params, anyParams uint64) MoqCmd_starGenType_CombinedOutput_paramsKey {
	m.Scene.T.Helper()
	return MoqCmd_starGenType_CombinedOutput_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqCmd_starGenType_recorder) StdinPipe() *MoqCmd_starGenType_StdinPipe_fnRecorder {
	return &MoqCmd_starGenType_StdinPipe_fnRecorder{
		Params:   MoqCmd_starGenType_StdinPipe_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCmd_starGenType_StdinPipe_fnRecorder) Any() *MoqCmd_starGenType_StdinPipe_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StdinPipe(r.Params))
		return nil
	}
	return &MoqCmd_starGenType_StdinPipe_anyParams{Recorder: r}
}

func (r *MoqCmd_starGenType_StdinPipe_fnRecorder) Seq() *MoqCmd_starGenType_StdinPipe_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StdinPipe(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCmd_starGenType_StdinPipe_fnRecorder) NoSeq() *MoqCmd_starGenType_StdinPipe_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StdinPipe(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCmd_starGenType_StdinPipe_fnRecorder) ReturnResults(result1 io.WriteCloser, result2 error) *MoqCmd_starGenType_StdinPipe_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.WriteCloser
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_StdinPipe_doFn
		DoReturnFn MoqCmd_starGenType_StdinPipe_doReturnFn
	}{
		Values: &struct {
			Result1 io.WriteCloser
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCmd_starGenType_StdinPipe_fnRecorder) AndDo(fn MoqCmd_starGenType_StdinPipe_doFn) *MoqCmd_starGenType_StdinPipe_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCmd_starGenType_StdinPipe_fnRecorder) DoReturnResults(fn MoqCmd_starGenType_StdinPipe_doReturnFn) *MoqCmd_starGenType_StdinPipe_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.WriteCloser
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_StdinPipe_doFn
		DoReturnFn MoqCmd_starGenType_StdinPipe_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCmd_starGenType_StdinPipe_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCmd_starGenType_StdinPipe_resultsByParams
	for n, res := range r.Moq.ResultsByParams_StdinPipe {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCmd_starGenType_StdinPipe_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCmd_starGenType_StdinPipe_paramsKey]*MoqCmd_starGenType_StdinPipe_results{},
		}
		r.Moq.ResultsByParams_StdinPipe = append(r.Moq.ResultsByParams_StdinPipe, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_StdinPipe) {
			copy(r.Moq.ResultsByParams_StdinPipe[insertAt+1:], r.Moq.ResultsByParams_StdinPipe[insertAt:0])
			r.Moq.ResultsByParams_StdinPipe[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_StdinPipe(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCmd_starGenType_StdinPipe_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCmd_starGenType_StdinPipe_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCmd_starGenType_StdinPipe_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 io.WriteCloser
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqCmd_starGenType_StdinPipe_doFn
				DoReturnFn MoqCmd_starGenType_StdinPipe_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCmd_starGenType) PrettyParams_StdinPipe(params MoqCmd_starGenType_StdinPipe_params) string {
	return fmt.Sprintf("StdinPipe()")
}

func (m *MoqCmd_starGenType) ParamsKey_StdinPipe(params MoqCmd_starGenType_StdinPipe_params, anyParams uint64) MoqCmd_starGenType_StdinPipe_paramsKey {
	m.Scene.T.Helper()
	return MoqCmd_starGenType_StdinPipe_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqCmd_starGenType_recorder) StdoutPipe() *MoqCmd_starGenType_StdoutPipe_fnRecorder {
	return &MoqCmd_starGenType_StdoutPipe_fnRecorder{
		Params:   MoqCmd_starGenType_StdoutPipe_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCmd_starGenType_StdoutPipe_fnRecorder) Any() *MoqCmd_starGenType_StdoutPipe_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StdoutPipe(r.Params))
		return nil
	}
	return &MoqCmd_starGenType_StdoutPipe_anyParams{Recorder: r}
}

func (r *MoqCmd_starGenType_StdoutPipe_fnRecorder) Seq() *MoqCmd_starGenType_StdoutPipe_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StdoutPipe(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCmd_starGenType_StdoutPipe_fnRecorder) NoSeq() *MoqCmd_starGenType_StdoutPipe_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StdoutPipe(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCmd_starGenType_StdoutPipe_fnRecorder) ReturnResults(result1 io.ReadCloser, result2 error) *MoqCmd_starGenType_StdoutPipe_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.ReadCloser
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_StdoutPipe_doFn
		DoReturnFn MoqCmd_starGenType_StdoutPipe_doReturnFn
	}{
		Values: &struct {
			Result1 io.ReadCloser
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCmd_starGenType_StdoutPipe_fnRecorder) AndDo(fn MoqCmd_starGenType_StdoutPipe_doFn) *MoqCmd_starGenType_StdoutPipe_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCmd_starGenType_StdoutPipe_fnRecorder) DoReturnResults(fn MoqCmd_starGenType_StdoutPipe_doReturnFn) *MoqCmd_starGenType_StdoutPipe_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.ReadCloser
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_StdoutPipe_doFn
		DoReturnFn MoqCmd_starGenType_StdoutPipe_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCmd_starGenType_StdoutPipe_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCmd_starGenType_StdoutPipe_resultsByParams
	for n, res := range r.Moq.ResultsByParams_StdoutPipe {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCmd_starGenType_StdoutPipe_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCmd_starGenType_StdoutPipe_paramsKey]*MoqCmd_starGenType_StdoutPipe_results{},
		}
		r.Moq.ResultsByParams_StdoutPipe = append(r.Moq.ResultsByParams_StdoutPipe, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_StdoutPipe) {
			copy(r.Moq.ResultsByParams_StdoutPipe[insertAt+1:], r.Moq.ResultsByParams_StdoutPipe[insertAt:0])
			r.Moq.ResultsByParams_StdoutPipe[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_StdoutPipe(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCmd_starGenType_StdoutPipe_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCmd_starGenType_StdoutPipe_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCmd_starGenType_StdoutPipe_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 io.ReadCloser
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqCmd_starGenType_StdoutPipe_doFn
				DoReturnFn MoqCmd_starGenType_StdoutPipe_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCmd_starGenType) PrettyParams_StdoutPipe(params MoqCmd_starGenType_StdoutPipe_params) string {
	return fmt.Sprintf("StdoutPipe()")
}

func (m *MoqCmd_starGenType) ParamsKey_StdoutPipe(params MoqCmd_starGenType_StdoutPipe_params, anyParams uint64) MoqCmd_starGenType_StdoutPipe_paramsKey {
	m.Scene.T.Helper()
	return MoqCmd_starGenType_StdoutPipe_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqCmd_starGenType_recorder) StderrPipe() *MoqCmd_starGenType_StderrPipe_fnRecorder {
	return &MoqCmd_starGenType_StderrPipe_fnRecorder{
		Params:   MoqCmd_starGenType_StderrPipe_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCmd_starGenType_StderrPipe_fnRecorder) Any() *MoqCmd_starGenType_StderrPipe_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StderrPipe(r.Params))
		return nil
	}
	return &MoqCmd_starGenType_StderrPipe_anyParams{Recorder: r}
}

func (r *MoqCmd_starGenType_StderrPipe_fnRecorder) Seq() *MoqCmd_starGenType_StderrPipe_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StderrPipe(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCmd_starGenType_StderrPipe_fnRecorder) NoSeq() *MoqCmd_starGenType_StderrPipe_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StderrPipe(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCmd_starGenType_StderrPipe_fnRecorder) ReturnResults(result1 io.ReadCloser, result2 error) *MoqCmd_starGenType_StderrPipe_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.ReadCloser
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_StderrPipe_doFn
		DoReturnFn MoqCmd_starGenType_StderrPipe_doReturnFn
	}{
		Values: &struct {
			Result1 io.ReadCloser
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCmd_starGenType_StderrPipe_fnRecorder) AndDo(fn MoqCmd_starGenType_StderrPipe_doFn) *MoqCmd_starGenType_StderrPipe_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCmd_starGenType_StderrPipe_fnRecorder) DoReturnResults(fn MoqCmd_starGenType_StderrPipe_doReturnFn) *MoqCmd_starGenType_StderrPipe_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.ReadCloser
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqCmd_starGenType_StderrPipe_doFn
		DoReturnFn MoqCmd_starGenType_StderrPipe_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCmd_starGenType_StderrPipe_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCmd_starGenType_StderrPipe_resultsByParams
	for n, res := range r.Moq.ResultsByParams_StderrPipe {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCmd_starGenType_StderrPipe_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCmd_starGenType_StderrPipe_paramsKey]*MoqCmd_starGenType_StderrPipe_results{},
		}
		r.Moq.ResultsByParams_StderrPipe = append(r.Moq.ResultsByParams_StderrPipe, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_StderrPipe) {
			copy(r.Moq.ResultsByParams_StderrPipe[insertAt+1:], r.Moq.ResultsByParams_StderrPipe[insertAt:0])
			r.Moq.ResultsByParams_StderrPipe[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_StderrPipe(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCmd_starGenType_StderrPipe_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCmd_starGenType_StderrPipe_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCmd_starGenType_StderrPipe_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 io.ReadCloser
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqCmd_starGenType_StderrPipe_doFn
				DoReturnFn MoqCmd_starGenType_StderrPipe_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCmd_starGenType) PrettyParams_StderrPipe(params MoqCmd_starGenType_StderrPipe_params) string {
	return fmt.Sprintf("StderrPipe()")
}

func (m *MoqCmd_starGenType) ParamsKey_StderrPipe(params MoqCmd_starGenType_StderrPipe_params, anyParams uint64) MoqCmd_starGenType_StderrPipe_paramsKey {
	m.Scene.T.Helper()
	return MoqCmd_starGenType_StderrPipe_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqCmd_starGenType) Reset() {
	m.ResultsByParams_String = nil
	m.ResultsByParams_Run = nil
	m.ResultsByParams_Start = nil
	m.ResultsByParams_Wait = nil
	m.ResultsByParams_Output = nil
	m.ResultsByParams_CombinedOutput = nil
	m.ResultsByParams_StdinPipe = nil
	m.ResultsByParams_StdoutPipe = nil
	m.ResultsByParams_StderrPipe = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqCmd_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Run {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Run(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Start {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Start(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Wait {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Wait(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Output {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Output(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_CombinedOutput {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_CombinedOutput(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_StdinPipe {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_StdinPipe(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_StdoutPipe {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_StdoutPipe(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_StderrPipe {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_StderrPipe(results.Params))
			}
		}
	}
}
