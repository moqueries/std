// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package os

import (
	"fmt"
	"math/bits"
	"os"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that os.Process_starGenType is mocked
// completely
var _ Process_starGenType = (*MoqProcess_starGenType_mock)(nil)

// Process_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Process_starGenType interface {
	Release() error
	Kill() error
	Wait() (*os.ProcessState, error)
	Signal(sig os.Signal) error
}

// MoqProcess_starGenType holds the state of a moq of the Process_starGenType
// type
type MoqProcess_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqProcess_starGenType_mock

	ResultsByParams_Release []MoqProcess_starGenType_Release_resultsByParams
	ResultsByParams_Kill    []MoqProcess_starGenType_Kill_resultsByParams
	ResultsByParams_Wait    []MoqProcess_starGenType_Wait_resultsByParams
	ResultsByParams_Signal  []MoqProcess_starGenType_Signal_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Release struct{}
			Kill    struct{}
			Wait    struct{}
			Signal  struct {
				Sig moq.ParamIndexing
			}
		}
	}
	// MoqProcess_starGenType_mock isolates the mock interface of the
}

// Process_starGenType type
type MoqProcess_starGenType_mock struct {
	Moq *MoqProcess_starGenType
}

// MoqProcess_starGenType_recorder isolates the recorder interface of the
// Process_starGenType type
type MoqProcess_starGenType_recorder struct {
	Moq *MoqProcess_starGenType
}

// MoqProcess_starGenType_Release_params holds the params of the
// Process_starGenType type
type MoqProcess_starGenType_Release_params struct{}

// MoqProcess_starGenType_Release_paramsKey holds the map key params of the
// Process_starGenType type
type MoqProcess_starGenType_Release_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqProcess_starGenType_Release_resultsByParams contains the results for a
// given set of parameters for the Process_starGenType type
type MoqProcess_starGenType_Release_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqProcess_starGenType_Release_paramsKey]*MoqProcess_starGenType_Release_results
}

// MoqProcess_starGenType_Release_doFn defines the type of function needed when
// calling AndDo for the Process_starGenType type
type MoqProcess_starGenType_Release_doFn func()

// MoqProcess_starGenType_Release_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Process_starGenType type
type MoqProcess_starGenType_Release_doReturnFn func() error

// MoqProcess_starGenType_Release_results holds the results of the
// Process_starGenType type
type MoqProcess_starGenType_Release_results struct {
	Params  MoqProcess_starGenType_Release_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqProcess_starGenType_Release_doFn
		DoReturnFn MoqProcess_starGenType_Release_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqProcess_starGenType_Release_fnRecorder routes recorded function calls to
// the MoqProcess_starGenType moq
type MoqProcess_starGenType_Release_fnRecorder struct {
	Params    MoqProcess_starGenType_Release_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqProcess_starGenType_Release_results
	Moq       *MoqProcess_starGenType
}

// MoqProcess_starGenType_Release_anyParams isolates the any params functions
// of the Process_starGenType type
type MoqProcess_starGenType_Release_anyParams struct {
	Recorder *MoqProcess_starGenType_Release_fnRecorder
}

// MoqProcess_starGenType_Kill_params holds the params of the
// Process_starGenType type
type MoqProcess_starGenType_Kill_params struct{}

// MoqProcess_starGenType_Kill_paramsKey holds the map key params of the
// Process_starGenType type
type MoqProcess_starGenType_Kill_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqProcess_starGenType_Kill_resultsByParams contains the results for a given
// set of parameters for the Process_starGenType type
type MoqProcess_starGenType_Kill_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqProcess_starGenType_Kill_paramsKey]*MoqProcess_starGenType_Kill_results
}

// MoqProcess_starGenType_Kill_doFn defines the type of function needed when
// calling AndDo for the Process_starGenType type
type MoqProcess_starGenType_Kill_doFn func()

// MoqProcess_starGenType_Kill_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Process_starGenType type
type MoqProcess_starGenType_Kill_doReturnFn func() error

// MoqProcess_starGenType_Kill_results holds the results of the
// Process_starGenType type
type MoqProcess_starGenType_Kill_results struct {
	Params  MoqProcess_starGenType_Kill_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqProcess_starGenType_Kill_doFn
		DoReturnFn MoqProcess_starGenType_Kill_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqProcess_starGenType_Kill_fnRecorder routes recorded function calls to the
// MoqProcess_starGenType moq
type MoqProcess_starGenType_Kill_fnRecorder struct {
	Params    MoqProcess_starGenType_Kill_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqProcess_starGenType_Kill_results
	Moq       *MoqProcess_starGenType
}

// MoqProcess_starGenType_Kill_anyParams isolates the any params functions of
// the Process_starGenType type
type MoqProcess_starGenType_Kill_anyParams struct {
	Recorder *MoqProcess_starGenType_Kill_fnRecorder
}

// MoqProcess_starGenType_Wait_params holds the params of the
// Process_starGenType type
type MoqProcess_starGenType_Wait_params struct{}

// MoqProcess_starGenType_Wait_paramsKey holds the map key params of the
// Process_starGenType type
type MoqProcess_starGenType_Wait_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqProcess_starGenType_Wait_resultsByParams contains the results for a given
// set of parameters for the Process_starGenType type
type MoqProcess_starGenType_Wait_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqProcess_starGenType_Wait_paramsKey]*MoqProcess_starGenType_Wait_results
}

// MoqProcess_starGenType_Wait_doFn defines the type of function needed when
// calling AndDo for the Process_starGenType type
type MoqProcess_starGenType_Wait_doFn func()

// MoqProcess_starGenType_Wait_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Process_starGenType type
type MoqProcess_starGenType_Wait_doReturnFn func() (*os.ProcessState, error)

// MoqProcess_starGenType_Wait_results holds the results of the
// Process_starGenType type
type MoqProcess_starGenType_Wait_results struct {
	Params  MoqProcess_starGenType_Wait_params
	Results []struct {
		Values *struct {
			Result1 *os.ProcessState
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqProcess_starGenType_Wait_doFn
		DoReturnFn MoqProcess_starGenType_Wait_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqProcess_starGenType_Wait_fnRecorder routes recorded function calls to the
// MoqProcess_starGenType moq
type MoqProcess_starGenType_Wait_fnRecorder struct {
	Params    MoqProcess_starGenType_Wait_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqProcess_starGenType_Wait_results
	Moq       *MoqProcess_starGenType
}

// MoqProcess_starGenType_Wait_anyParams isolates the any params functions of
// the Process_starGenType type
type MoqProcess_starGenType_Wait_anyParams struct {
	Recorder *MoqProcess_starGenType_Wait_fnRecorder
}

// MoqProcess_starGenType_Signal_params holds the params of the
// Process_starGenType type
type MoqProcess_starGenType_Signal_params struct{ Sig os.Signal }

// MoqProcess_starGenType_Signal_paramsKey holds the map key params of the
// Process_starGenType type
type MoqProcess_starGenType_Signal_paramsKey struct {
	Params struct{ Sig os.Signal }
	Hashes struct{ Sig hash.Hash }
}

// MoqProcess_starGenType_Signal_resultsByParams contains the results for a
// given set of parameters for the Process_starGenType type
type MoqProcess_starGenType_Signal_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqProcess_starGenType_Signal_paramsKey]*MoqProcess_starGenType_Signal_results
}

// MoqProcess_starGenType_Signal_doFn defines the type of function needed when
// calling AndDo for the Process_starGenType type
type MoqProcess_starGenType_Signal_doFn func(sig os.Signal)

// MoqProcess_starGenType_Signal_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Process_starGenType type
type MoqProcess_starGenType_Signal_doReturnFn func(sig os.Signal) error

// MoqProcess_starGenType_Signal_results holds the results of the
// Process_starGenType type
type MoqProcess_starGenType_Signal_results struct {
	Params  MoqProcess_starGenType_Signal_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqProcess_starGenType_Signal_doFn
		DoReturnFn MoqProcess_starGenType_Signal_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqProcess_starGenType_Signal_fnRecorder routes recorded function calls to
// the MoqProcess_starGenType moq
type MoqProcess_starGenType_Signal_fnRecorder struct {
	Params    MoqProcess_starGenType_Signal_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqProcess_starGenType_Signal_results
	Moq       *MoqProcess_starGenType
}

// MoqProcess_starGenType_Signal_anyParams isolates the any params functions of
// the Process_starGenType type
type MoqProcess_starGenType_Signal_anyParams struct {
	Recorder *MoqProcess_starGenType_Signal_fnRecorder
}

// NewMoqProcess_starGenType creates a new moq of the Process_starGenType type
func NewMoqProcess_starGenType(scene *moq.Scene, config *moq.Config) *MoqProcess_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqProcess_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqProcess_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Release struct{}
				Kill    struct{}
				Wait    struct{}
				Signal  struct {
					Sig moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Release struct{}
			Kill    struct{}
			Wait    struct{}
			Signal  struct {
				Sig moq.ParamIndexing
			}
		}{
			Release: struct{}{},
			Kill:    struct{}{},
			Wait:    struct{}{},
			Signal: struct {
				Sig moq.ParamIndexing
			}{
				Sig: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Process_starGenType type
func (m *MoqProcess_starGenType) Mock() *MoqProcess_starGenType_mock { return m.Moq }

func (m *MoqProcess_starGenType_mock) Release() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqProcess_starGenType_Release_params{}
	var results *MoqProcess_starGenType_Release_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Release {
		paramsKey := m.Moq.ParamsKey_Release(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Release(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Release(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Release(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqProcess_starGenType_mock) Kill() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqProcess_starGenType_Kill_params{}
	var results *MoqProcess_starGenType_Kill_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Kill {
		paramsKey := m.Moq.ParamsKey_Kill(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Kill(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Kill(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Kill(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqProcess_starGenType_mock) Wait() (result1 *os.ProcessState, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqProcess_starGenType_Wait_params{}
	var results *MoqProcess_starGenType_Wait_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Wait {
		paramsKey := m.Moq.ParamsKey_Wait(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Wait(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Wait(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Wait(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqProcess_starGenType_mock) Signal(sig os.Signal) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqProcess_starGenType_Signal_params{
		Sig: sig,
	}
	var results *MoqProcess_starGenType_Signal_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Signal {
		paramsKey := m.Moq.ParamsKey_Signal(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Signal(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Signal(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Signal(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(sig)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(sig)
	}
	return
}

// OnCall returns the recorder implementation of the Process_starGenType type
func (m *MoqProcess_starGenType) OnCall() *MoqProcess_starGenType_recorder {
	return &MoqProcess_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqProcess_starGenType_recorder) Release() *MoqProcess_starGenType_Release_fnRecorder {
	return &MoqProcess_starGenType_Release_fnRecorder{
		Params:   MoqProcess_starGenType_Release_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqProcess_starGenType_Release_fnRecorder) Any() *MoqProcess_starGenType_Release_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Release(r.Params))
		return nil
	}
	return &MoqProcess_starGenType_Release_anyParams{Recorder: r}
}

func (r *MoqProcess_starGenType_Release_fnRecorder) Seq() *MoqProcess_starGenType_Release_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Release(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqProcess_starGenType_Release_fnRecorder) NoSeq() *MoqProcess_starGenType_Release_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Release(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqProcess_starGenType_Release_fnRecorder) ReturnResults(result1 error) *MoqProcess_starGenType_Release_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqProcess_starGenType_Release_doFn
		DoReturnFn MoqProcess_starGenType_Release_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqProcess_starGenType_Release_fnRecorder) AndDo(fn MoqProcess_starGenType_Release_doFn) *MoqProcess_starGenType_Release_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqProcess_starGenType_Release_fnRecorder) DoReturnResults(fn MoqProcess_starGenType_Release_doReturnFn) *MoqProcess_starGenType_Release_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqProcess_starGenType_Release_doFn
		DoReturnFn MoqProcess_starGenType_Release_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqProcess_starGenType_Release_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqProcess_starGenType_Release_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Release {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqProcess_starGenType_Release_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqProcess_starGenType_Release_paramsKey]*MoqProcess_starGenType_Release_results{},
		}
		r.Moq.ResultsByParams_Release = append(r.Moq.ResultsByParams_Release, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Release) {
			copy(r.Moq.ResultsByParams_Release[insertAt+1:], r.Moq.ResultsByParams_Release[insertAt:0])
			r.Moq.ResultsByParams_Release[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Release(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqProcess_starGenType_Release_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqProcess_starGenType_Release_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqProcess_starGenType_Release_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqProcess_starGenType_Release_doFn
				DoReturnFn MoqProcess_starGenType_Release_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqProcess_starGenType) PrettyParams_Release(params MoqProcess_starGenType_Release_params) string {
	return fmt.Sprintf("Release()")
}

func (m *MoqProcess_starGenType) ParamsKey_Release(params MoqProcess_starGenType_Release_params, anyParams uint64) MoqProcess_starGenType_Release_paramsKey {
	m.Scene.T.Helper()
	return MoqProcess_starGenType_Release_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqProcess_starGenType_recorder) Kill() *MoqProcess_starGenType_Kill_fnRecorder {
	return &MoqProcess_starGenType_Kill_fnRecorder{
		Params:   MoqProcess_starGenType_Kill_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqProcess_starGenType_Kill_fnRecorder) Any() *MoqProcess_starGenType_Kill_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Kill(r.Params))
		return nil
	}
	return &MoqProcess_starGenType_Kill_anyParams{Recorder: r}
}

func (r *MoqProcess_starGenType_Kill_fnRecorder) Seq() *MoqProcess_starGenType_Kill_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Kill(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqProcess_starGenType_Kill_fnRecorder) NoSeq() *MoqProcess_starGenType_Kill_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Kill(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqProcess_starGenType_Kill_fnRecorder) ReturnResults(result1 error) *MoqProcess_starGenType_Kill_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqProcess_starGenType_Kill_doFn
		DoReturnFn MoqProcess_starGenType_Kill_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqProcess_starGenType_Kill_fnRecorder) AndDo(fn MoqProcess_starGenType_Kill_doFn) *MoqProcess_starGenType_Kill_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqProcess_starGenType_Kill_fnRecorder) DoReturnResults(fn MoqProcess_starGenType_Kill_doReturnFn) *MoqProcess_starGenType_Kill_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqProcess_starGenType_Kill_doFn
		DoReturnFn MoqProcess_starGenType_Kill_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqProcess_starGenType_Kill_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqProcess_starGenType_Kill_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Kill {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqProcess_starGenType_Kill_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqProcess_starGenType_Kill_paramsKey]*MoqProcess_starGenType_Kill_results{},
		}
		r.Moq.ResultsByParams_Kill = append(r.Moq.ResultsByParams_Kill, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Kill) {
			copy(r.Moq.ResultsByParams_Kill[insertAt+1:], r.Moq.ResultsByParams_Kill[insertAt:0])
			r.Moq.ResultsByParams_Kill[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Kill(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqProcess_starGenType_Kill_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqProcess_starGenType_Kill_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqProcess_starGenType_Kill_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqProcess_starGenType_Kill_doFn
				DoReturnFn MoqProcess_starGenType_Kill_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqProcess_starGenType) PrettyParams_Kill(params MoqProcess_starGenType_Kill_params) string {
	return fmt.Sprintf("Kill()")
}

func (m *MoqProcess_starGenType) ParamsKey_Kill(params MoqProcess_starGenType_Kill_params, anyParams uint64) MoqProcess_starGenType_Kill_paramsKey {
	m.Scene.T.Helper()
	return MoqProcess_starGenType_Kill_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqProcess_starGenType_recorder) Wait() *MoqProcess_starGenType_Wait_fnRecorder {
	return &MoqProcess_starGenType_Wait_fnRecorder{
		Params:   MoqProcess_starGenType_Wait_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqProcess_starGenType_Wait_fnRecorder) Any() *MoqProcess_starGenType_Wait_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Wait(r.Params))
		return nil
	}
	return &MoqProcess_starGenType_Wait_anyParams{Recorder: r}
}

func (r *MoqProcess_starGenType_Wait_fnRecorder) Seq() *MoqProcess_starGenType_Wait_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Wait(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqProcess_starGenType_Wait_fnRecorder) NoSeq() *MoqProcess_starGenType_Wait_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Wait(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqProcess_starGenType_Wait_fnRecorder) ReturnResults(result1 *os.ProcessState, result2 error) *MoqProcess_starGenType_Wait_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *os.ProcessState
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqProcess_starGenType_Wait_doFn
		DoReturnFn MoqProcess_starGenType_Wait_doReturnFn
	}{
		Values: &struct {
			Result1 *os.ProcessState
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqProcess_starGenType_Wait_fnRecorder) AndDo(fn MoqProcess_starGenType_Wait_doFn) *MoqProcess_starGenType_Wait_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqProcess_starGenType_Wait_fnRecorder) DoReturnResults(fn MoqProcess_starGenType_Wait_doReturnFn) *MoqProcess_starGenType_Wait_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *os.ProcessState
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqProcess_starGenType_Wait_doFn
		DoReturnFn MoqProcess_starGenType_Wait_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqProcess_starGenType_Wait_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqProcess_starGenType_Wait_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Wait {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqProcess_starGenType_Wait_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqProcess_starGenType_Wait_paramsKey]*MoqProcess_starGenType_Wait_results{},
		}
		r.Moq.ResultsByParams_Wait = append(r.Moq.ResultsByParams_Wait, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Wait) {
			copy(r.Moq.ResultsByParams_Wait[insertAt+1:], r.Moq.ResultsByParams_Wait[insertAt:0])
			r.Moq.ResultsByParams_Wait[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Wait(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqProcess_starGenType_Wait_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqProcess_starGenType_Wait_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqProcess_starGenType_Wait_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *os.ProcessState
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqProcess_starGenType_Wait_doFn
				DoReturnFn MoqProcess_starGenType_Wait_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqProcess_starGenType) PrettyParams_Wait(params MoqProcess_starGenType_Wait_params) string {
	return fmt.Sprintf("Wait()")
}

func (m *MoqProcess_starGenType) ParamsKey_Wait(params MoqProcess_starGenType_Wait_params, anyParams uint64) MoqProcess_starGenType_Wait_paramsKey {
	m.Scene.T.Helper()
	return MoqProcess_starGenType_Wait_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqProcess_starGenType_recorder) Signal(sig os.Signal) *MoqProcess_starGenType_Signal_fnRecorder {
	return &MoqProcess_starGenType_Signal_fnRecorder{
		Params: MoqProcess_starGenType_Signal_params{
			Sig: sig,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqProcess_starGenType_Signal_fnRecorder) Any() *MoqProcess_starGenType_Signal_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Signal(r.Params))
		return nil
	}
	return &MoqProcess_starGenType_Signal_anyParams{Recorder: r}
}

func (a *MoqProcess_starGenType_Signal_anyParams) Sig() *MoqProcess_starGenType_Signal_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqProcess_starGenType_Signal_fnRecorder) Seq() *MoqProcess_starGenType_Signal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Signal(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqProcess_starGenType_Signal_fnRecorder) NoSeq() *MoqProcess_starGenType_Signal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Signal(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqProcess_starGenType_Signal_fnRecorder) ReturnResults(result1 error) *MoqProcess_starGenType_Signal_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqProcess_starGenType_Signal_doFn
		DoReturnFn MoqProcess_starGenType_Signal_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqProcess_starGenType_Signal_fnRecorder) AndDo(fn MoqProcess_starGenType_Signal_doFn) *MoqProcess_starGenType_Signal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqProcess_starGenType_Signal_fnRecorder) DoReturnResults(fn MoqProcess_starGenType_Signal_doReturnFn) *MoqProcess_starGenType_Signal_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqProcess_starGenType_Signal_doFn
		DoReturnFn MoqProcess_starGenType_Signal_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqProcess_starGenType_Signal_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqProcess_starGenType_Signal_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Signal {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqProcess_starGenType_Signal_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqProcess_starGenType_Signal_paramsKey]*MoqProcess_starGenType_Signal_results{},
		}
		r.Moq.ResultsByParams_Signal = append(r.Moq.ResultsByParams_Signal, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Signal) {
			copy(r.Moq.ResultsByParams_Signal[insertAt+1:], r.Moq.ResultsByParams_Signal[insertAt:0])
			r.Moq.ResultsByParams_Signal[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Signal(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqProcess_starGenType_Signal_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqProcess_starGenType_Signal_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqProcess_starGenType_Signal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqProcess_starGenType_Signal_doFn
				DoReturnFn MoqProcess_starGenType_Signal_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqProcess_starGenType) PrettyParams_Signal(params MoqProcess_starGenType_Signal_params) string {
	return fmt.Sprintf("Signal(%#v)", params.Sig)
}

func (m *MoqProcess_starGenType) ParamsKey_Signal(params MoqProcess_starGenType_Signal_params, anyParams uint64) MoqProcess_starGenType_Signal_paramsKey {
	m.Scene.T.Helper()
	var sigUsed os.Signal
	var sigUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Signal.Sig == moq.ParamIndexByValue {
			sigUsed = params.Sig
		} else {
			sigUsedHash = hash.DeepHash(params.Sig)
		}
	}
	return MoqProcess_starGenType_Signal_paramsKey{
		Params: struct{ Sig os.Signal }{
			Sig: sigUsed,
		},
		Hashes: struct{ Sig hash.Hash }{
			Sig: sigUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqProcess_starGenType) Reset() {
	m.ResultsByParams_Release = nil
	m.ResultsByParams_Kill = nil
	m.ResultsByParams_Wait = nil
	m.ResultsByParams_Signal = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqProcess_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Release {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Release(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Kill {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Kill(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Wait {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Wait(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Signal {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Signal(results.Params))
			}
		}
	}
}
