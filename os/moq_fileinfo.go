// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package os

import (
	"fmt"
	"math/bits"
	"os"
	"sync/atomic"
	"time"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that os.FileInfo is mocked completely
var _ os.FileInfo = (*MoqFileInfo_mock)(nil)

// MoqFileInfo holds the state of a moq of the FileInfo type
type MoqFileInfo struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqFileInfo_mock

	ResultsByParams_Name    []MoqFileInfo_Name_resultsByParams
	ResultsByParams_Size    []MoqFileInfo_Size_resultsByParams
	ResultsByParams_Mode    []MoqFileInfo_Mode_resultsByParams
	ResultsByParams_ModTime []MoqFileInfo_ModTime_resultsByParams
	ResultsByParams_IsDir   []MoqFileInfo_IsDir_resultsByParams
	ResultsByParams_Sys     []MoqFileInfo_Sys_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Name    struct{}
			Size    struct{}
			Mode    struct{}
			ModTime struct{}
			IsDir   struct{}
			Sys     struct{}
		}
	}
}

// MoqFileInfo_mock isolates the mock interface of the FileInfo type
type MoqFileInfo_mock struct {
	Moq *MoqFileInfo
}

// MoqFileInfo_recorder isolates the recorder interface of the FileInfo type
type MoqFileInfo_recorder struct {
	Moq *MoqFileInfo
}

// MoqFileInfo_Name_params holds the params of the FileInfo type
type MoqFileInfo_Name_params struct{}

// MoqFileInfo_Name_paramsKey holds the map key params of the FileInfo type
type MoqFileInfo_Name_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFileInfo_Name_resultsByParams contains the results for a given set of
// parameters for the FileInfo type
type MoqFileInfo_Name_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFileInfo_Name_paramsKey]*MoqFileInfo_Name_results
}

// MoqFileInfo_Name_doFn defines the type of function needed when calling AndDo
// for the FileInfo type
type MoqFileInfo_Name_doFn func()

// MoqFileInfo_Name_doReturnFn defines the type of function needed when calling
// DoReturnResults for the FileInfo type
type MoqFileInfo_Name_doReturnFn func() string

// MoqFileInfo_Name_results holds the results of the FileInfo type
type MoqFileInfo_Name_results struct {
	Params  MoqFileInfo_Name_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqFileInfo_Name_doFn
		DoReturnFn MoqFileInfo_Name_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFileInfo_Name_fnRecorder routes recorded function calls to the
// MoqFileInfo moq
type MoqFileInfo_Name_fnRecorder struct {
	Params    MoqFileInfo_Name_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFileInfo_Name_results
	Moq       *MoqFileInfo
}

// MoqFileInfo_Name_anyParams isolates the any params functions of the FileInfo
// type
type MoqFileInfo_Name_anyParams struct {
	Recorder *MoqFileInfo_Name_fnRecorder
}

// MoqFileInfo_Size_params holds the params of the FileInfo type
type MoqFileInfo_Size_params struct{}

// MoqFileInfo_Size_paramsKey holds the map key params of the FileInfo type
type MoqFileInfo_Size_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFileInfo_Size_resultsByParams contains the results for a given set of
// parameters for the FileInfo type
type MoqFileInfo_Size_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFileInfo_Size_paramsKey]*MoqFileInfo_Size_results
}

// MoqFileInfo_Size_doFn defines the type of function needed when calling AndDo
// for the FileInfo type
type MoqFileInfo_Size_doFn func()

// MoqFileInfo_Size_doReturnFn defines the type of function needed when calling
// DoReturnResults for the FileInfo type
type MoqFileInfo_Size_doReturnFn func() int64

// MoqFileInfo_Size_results holds the results of the FileInfo type
type MoqFileInfo_Size_results struct {
	Params  MoqFileInfo_Size_params
	Results []struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqFileInfo_Size_doFn
		DoReturnFn MoqFileInfo_Size_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFileInfo_Size_fnRecorder routes recorded function calls to the
// MoqFileInfo moq
type MoqFileInfo_Size_fnRecorder struct {
	Params    MoqFileInfo_Size_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFileInfo_Size_results
	Moq       *MoqFileInfo
}

// MoqFileInfo_Size_anyParams isolates the any params functions of the FileInfo
// type
type MoqFileInfo_Size_anyParams struct {
	Recorder *MoqFileInfo_Size_fnRecorder
}

// MoqFileInfo_Mode_params holds the params of the FileInfo type
type MoqFileInfo_Mode_params struct{}

// MoqFileInfo_Mode_paramsKey holds the map key params of the FileInfo type
type MoqFileInfo_Mode_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFileInfo_Mode_resultsByParams contains the results for a given set of
// parameters for the FileInfo type
type MoqFileInfo_Mode_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFileInfo_Mode_paramsKey]*MoqFileInfo_Mode_results
}

// MoqFileInfo_Mode_doFn defines the type of function needed when calling AndDo
// for the FileInfo type
type MoqFileInfo_Mode_doFn func()

// MoqFileInfo_Mode_doReturnFn defines the type of function needed when calling
// DoReturnResults for the FileInfo type
type MoqFileInfo_Mode_doReturnFn func() os.FileMode

// MoqFileInfo_Mode_results holds the results of the FileInfo type
type MoqFileInfo_Mode_results struct {
	Params  MoqFileInfo_Mode_params
	Results []struct {
		Values *struct {
			Result1 os.FileMode
		}
		Sequence   uint32
		DoFn       MoqFileInfo_Mode_doFn
		DoReturnFn MoqFileInfo_Mode_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFileInfo_Mode_fnRecorder routes recorded function calls to the
// MoqFileInfo moq
type MoqFileInfo_Mode_fnRecorder struct {
	Params    MoqFileInfo_Mode_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFileInfo_Mode_results
	Moq       *MoqFileInfo
}

// MoqFileInfo_Mode_anyParams isolates the any params functions of the FileInfo
// type
type MoqFileInfo_Mode_anyParams struct {
	Recorder *MoqFileInfo_Mode_fnRecorder
}

// MoqFileInfo_ModTime_params holds the params of the FileInfo type
type MoqFileInfo_ModTime_params struct{}

// MoqFileInfo_ModTime_paramsKey holds the map key params of the FileInfo type
type MoqFileInfo_ModTime_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFileInfo_ModTime_resultsByParams contains the results for a given set of
// parameters for the FileInfo type
type MoqFileInfo_ModTime_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFileInfo_ModTime_paramsKey]*MoqFileInfo_ModTime_results
}

// MoqFileInfo_ModTime_doFn defines the type of function needed when calling
// AndDo for the FileInfo type
type MoqFileInfo_ModTime_doFn func()

// MoqFileInfo_ModTime_doReturnFn defines the type of function needed when
// calling DoReturnResults for the FileInfo type
type MoqFileInfo_ModTime_doReturnFn func() time.Time

// MoqFileInfo_ModTime_results holds the results of the FileInfo type
type MoqFileInfo_ModTime_results struct {
	Params  MoqFileInfo_ModTime_params
	Results []struct {
		Values *struct {
			Result1 time.Time
		}
		Sequence   uint32
		DoFn       MoqFileInfo_ModTime_doFn
		DoReturnFn MoqFileInfo_ModTime_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFileInfo_ModTime_fnRecorder routes recorded function calls to the
// MoqFileInfo moq
type MoqFileInfo_ModTime_fnRecorder struct {
	Params    MoqFileInfo_ModTime_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFileInfo_ModTime_results
	Moq       *MoqFileInfo
}

// MoqFileInfo_ModTime_anyParams isolates the any params functions of the
// FileInfo type
type MoqFileInfo_ModTime_anyParams struct {
	Recorder *MoqFileInfo_ModTime_fnRecorder
}

// MoqFileInfo_IsDir_params holds the params of the FileInfo type
type MoqFileInfo_IsDir_params struct{}

// MoqFileInfo_IsDir_paramsKey holds the map key params of the FileInfo type
type MoqFileInfo_IsDir_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFileInfo_IsDir_resultsByParams contains the results for a given set of
// parameters for the FileInfo type
type MoqFileInfo_IsDir_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFileInfo_IsDir_paramsKey]*MoqFileInfo_IsDir_results
}

// MoqFileInfo_IsDir_doFn defines the type of function needed when calling
// AndDo for the FileInfo type
type MoqFileInfo_IsDir_doFn func()

// MoqFileInfo_IsDir_doReturnFn defines the type of function needed when
// calling DoReturnResults for the FileInfo type
type MoqFileInfo_IsDir_doReturnFn func() bool

// MoqFileInfo_IsDir_results holds the results of the FileInfo type
type MoqFileInfo_IsDir_results struct {
	Params  MoqFileInfo_IsDir_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqFileInfo_IsDir_doFn
		DoReturnFn MoqFileInfo_IsDir_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFileInfo_IsDir_fnRecorder routes recorded function calls to the
// MoqFileInfo moq
type MoqFileInfo_IsDir_fnRecorder struct {
	Params    MoqFileInfo_IsDir_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFileInfo_IsDir_results
	Moq       *MoqFileInfo
}

// MoqFileInfo_IsDir_anyParams isolates the any params functions of the
// FileInfo type
type MoqFileInfo_IsDir_anyParams struct {
	Recorder *MoqFileInfo_IsDir_fnRecorder
}

// MoqFileInfo_Sys_params holds the params of the FileInfo type
type MoqFileInfo_Sys_params struct{}

// MoqFileInfo_Sys_paramsKey holds the map key params of the FileInfo type
type MoqFileInfo_Sys_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFileInfo_Sys_resultsByParams contains the results for a given set of
// parameters for the FileInfo type
type MoqFileInfo_Sys_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFileInfo_Sys_paramsKey]*MoqFileInfo_Sys_results
}

// MoqFileInfo_Sys_doFn defines the type of function needed when calling AndDo
// for the FileInfo type
type MoqFileInfo_Sys_doFn func()

// MoqFileInfo_Sys_doReturnFn defines the type of function needed when calling
// DoReturnResults for the FileInfo type
type MoqFileInfo_Sys_doReturnFn func() interface{}

// MoqFileInfo_Sys_results holds the results of the FileInfo type
type MoqFileInfo_Sys_results struct {
	Params  MoqFileInfo_Sys_params
	Results []struct {
		Values *struct {
			Result1 interface{}
		}
		Sequence   uint32
		DoFn       MoqFileInfo_Sys_doFn
		DoReturnFn MoqFileInfo_Sys_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFileInfo_Sys_fnRecorder routes recorded function calls to the MoqFileInfo
// moq
type MoqFileInfo_Sys_fnRecorder struct {
	Params    MoqFileInfo_Sys_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFileInfo_Sys_results
	Moq       *MoqFileInfo
}

// MoqFileInfo_Sys_anyParams isolates the any params functions of the FileInfo
// type
type MoqFileInfo_Sys_anyParams struct {
	Recorder *MoqFileInfo_Sys_fnRecorder
}

// NewMoqFileInfo creates a new moq of the FileInfo type
func NewMoqFileInfo(scene *moq.Scene, config *moq.Config) *MoqFileInfo {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqFileInfo{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqFileInfo_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Name    struct{}
				Size    struct{}
				Mode    struct{}
				ModTime struct{}
				IsDir   struct{}
				Sys     struct{}
			}
		}{ParameterIndexing: struct {
			Name    struct{}
			Size    struct{}
			Mode    struct{}
			ModTime struct{}
			IsDir   struct{}
			Sys     struct{}
		}{
			Name:    struct{}{},
			Size:    struct{}{},
			Mode:    struct{}{},
			ModTime: struct{}{},
			IsDir:   struct{}{},
			Sys:     struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the FileInfo type
func (m *MoqFileInfo) Mock() *MoqFileInfo_mock { return m.Moq }

func (m *MoqFileInfo_mock) Name() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqFileInfo_Name_params{}
	var results *MoqFileInfo_Name_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Name {
		paramsKey := m.Moq.ParamsKey_Name(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Name(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Name(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Name(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqFileInfo_mock) Size() (result1 int64) {
	m.Moq.Scene.T.Helper()
	params := MoqFileInfo_Size_params{}
	var results *MoqFileInfo_Size_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Size {
		paramsKey := m.Moq.ParamsKey_Size(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Size(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Size(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Size(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqFileInfo_mock) Mode() (result1 os.FileMode) {
	m.Moq.Scene.T.Helper()
	params := MoqFileInfo_Mode_params{}
	var results *MoqFileInfo_Mode_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Mode {
		paramsKey := m.Moq.ParamsKey_Mode(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Mode(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Mode(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Mode(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqFileInfo_mock) ModTime() (result1 time.Time) {
	m.Moq.Scene.T.Helper()
	params := MoqFileInfo_ModTime_params{}
	var results *MoqFileInfo_ModTime_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ModTime {
		paramsKey := m.Moq.ParamsKey_ModTime(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ModTime(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ModTime(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ModTime(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqFileInfo_mock) IsDir() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqFileInfo_IsDir_params{}
	var results *MoqFileInfo_IsDir_results
	for _, resultsByParams := range m.Moq.ResultsByParams_IsDir {
		paramsKey := m.Moq.ParamsKey_IsDir(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_IsDir(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_IsDir(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_IsDir(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqFileInfo_mock) Sys() (result1 interface{}) {
	m.Moq.Scene.T.Helper()
	params := MoqFileInfo_Sys_params{}
	var results *MoqFileInfo_Sys_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Sys {
		paramsKey := m.Moq.ParamsKey_Sys(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Sys(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Sys(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Sys(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the FileInfo type
func (m *MoqFileInfo) OnCall() *MoqFileInfo_recorder {
	return &MoqFileInfo_recorder{
		Moq: m,
	}
}

func (m *MoqFileInfo_recorder) Name() *MoqFileInfo_Name_fnRecorder {
	return &MoqFileInfo_Name_fnRecorder{
		Params:   MoqFileInfo_Name_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFileInfo_Name_fnRecorder) Any() *MoqFileInfo_Name_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	return &MoqFileInfo_Name_anyParams{Recorder: r}
}

func (r *MoqFileInfo_Name_fnRecorder) Seq() *MoqFileInfo_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFileInfo_Name_fnRecorder) NoSeq() *MoqFileInfo_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFileInfo_Name_fnRecorder) ReturnResults(result1 string) *MoqFileInfo_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqFileInfo_Name_doFn
		DoReturnFn MoqFileInfo_Name_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFileInfo_Name_fnRecorder) AndDo(fn MoqFileInfo_Name_doFn) *MoqFileInfo_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFileInfo_Name_fnRecorder) DoReturnResults(fn MoqFileInfo_Name_doReturnFn) *MoqFileInfo_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqFileInfo_Name_doFn
		DoReturnFn MoqFileInfo_Name_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFileInfo_Name_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFileInfo_Name_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Name {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFileInfo_Name_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFileInfo_Name_paramsKey]*MoqFileInfo_Name_results{},
		}
		r.Moq.ResultsByParams_Name = append(r.Moq.ResultsByParams_Name, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Name) {
			copy(r.Moq.ResultsByParams_Name[insertAt+1:], r.Moq.ResultsByParams_Name[insertAt:0])
			r.Moq.ResultsByParams_Name[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Name(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFileInfo_Name_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFileInfo_Name_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFileInfo_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqFileInfo_Name_doFn
				DoReturnFn MoqFileInfo_Name_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFileInfo) PrettyParams_Name(params MoqFileInfo_Name_params) string {
	return fmt.Sprintf("Name()")
}

func (m *MoqFileInfo) ParamsKey_Name(params MoqFileInfo_Name_params, anyParams uint64) MoqFileInfo_Name_paramsKey {
	m.Scene.T.Helper()
	return MoqFileInfo_Name_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFileInfo_recorder) Size() *MoqFileInfo_Size_fnRecorder {
	return &MoqFileInfo_Size_fnRecorder{
		Params:   MoqFileInfo_Size_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFileInfo_Size_fnRecorder) Any() *MoqFileInfo_Size_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Size(r.Params))
		return nil
	}
	return &MoqFileInfo_Size_anyParams{Recorder: r}
}

func (r *MoqFileInfo_Size_fnRecorder) Seq() *MoqFileInfo_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Size(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFileInfo_Size_fnRecorder) NoSeq() *MoqFileInfo_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Size(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFileInfo_Size_fnRecorder) ReturnResults(result1 int64) *MoqFileInfo_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqFileInfo_Size_doFn
		DoReturnFn MoqFileInfo_Size_doReturnFn
	}{
		Values: &struct {
			Result1 int64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFileInfo_Size_fnRecorder) AndDo(fn MoqFileInfo_Size_doFn) *MoqFileInfo_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFileInfo_Size_fnRecorder) DoReturnResults(fn MoqFileInfo_Size_doReturnFn) *MoqFileInfo_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqFileInfo_Size_doFn
		DoReturnFn MoqFileInfo_Size_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFileInfo_Size_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFileInfo_Size_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Size {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFileInfo_Size_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFileInfo_Size_paramsKey]*MoqFileInfo_Size_results{},
		}
		r.Moq.ResultsByParams_Size = append(r.Moq.ResultsByParams_Size, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Size) {
			copy(r.Moq.ResultsByParams_Size[insertAt+1:], r.Moq.ResultsByParams_Size[insertAt:0])
			r.Moq.ResultsByParams_Size[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Size(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFileInfo_Size_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFileInfo_Size_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFileInfo_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int64
				}
				Sequence   uint32
				DoFn       MoqFileInfo_Size_doFn
				DoReturnFn MoqFileInfo_Size_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFileInfo) PrettyParams_Size(params MoqFileInfo_Size_params) string {
	return fmt.Sprintf("Size()")
}

func (m *MoqFileInfo) ParamsKey_Size(params MoqFileInfo_Size_params, anyParams uint64) MoqFileInfo_Size_paramsKey {
	m.Scene.T.Helper()
	return MoqFileInfo_Size_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFileInfo_recorder) Mode() *MoqFileInfo_Mode_fnRecorder {
	return &MoqFileInfo_Mode_fnRecorder{
		Params:   MoqFileInfo_Mode_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFileInfo_Mode_fnRecorder) Any() *MoqFileInfo_Mode_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Mode(r.Params))
		return nil
	}
	return &MoqFileInfo_Mode_anyParams{Recorder: r}
}

func (r *MoqFileInfo_Mode_fnRecorder) Seq() *MoqFileInfo_Mode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Mode(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFileInfo_Mode_fnRecorder) NoSeq() *MoqFileInfo_Mode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Mode(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFileInfo_Mode_fnRecorder) ReturnResults(result1 os.FileMode) *MoqFileInfo_Mode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 os.FileMode
		}
		Sequence   uint32
		DoFn       MoqFileInfo_Mode_doFn
		DoReturnFn MoqFileInfo_Mode_doReturnFn
	}{
		Values: &struct {
			Result1 os.FileMode
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFileInfo_Mode_fnRecorder) AndDo(fn MoqFileInfo_Mode_doFn) *MoqFileInfo_Mode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFileInfo_Mode_fnRecorder) DoReturnResults(fn MoqFileInfo_Mode_doReturnFn) *MoqFileInfo_Mode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 os.FileMode
		}
		Sequence   uint32
		DoFn       MoqFileInfo_Mode_doFn
		DoReturnFn MoqFileInfo_Mode_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFileInfo_Mode_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFileInfo_Mode_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Mode {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFileInfo_Mode_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFileInfo_Mode_paramsKey]*MoqFileInfo_Mode_results{},
		}
		r.Moq.ResultsByParams_Mode = append(r.Moq.ResultsByParams_Mode, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Mode) {
			copy(r.Moq.ResultsByParams_Mode[insertAt+1:], r.Moq.ResultsByParams_Mode[insertAt:0])
			r.Moq.ResultsByParams_Mode[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Mode(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFileInfo_Mode_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFileInfo_Mode_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFileInfo_Mode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 os.FileMode
				}
				Sequence   uint32
				DoFn       MoqFileInfo_Mode_doFn
				DoReturnFn MoqFileInfo_Mode_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFileInfo) PrettyParams_Mode(params MoqFileInfo_Mode_params) string {
	return fmt.Sprintf("Mode()")
}

func (m *MoqFileInfo) ParamsKey_Mode(params MoqFileInfo_Mode_params, anyParams uint64) MoqFileInfo_Mode_paramsKey {
	m.Scene.T.Helper()
	return MoqFileInfo_Mode_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFileInfo_recorder) ModTime() *MoqFileInfo_ModTime_fnRecorder {
	return &MoqFileInfo_ModTime_fnRecorder{
		Params:   MoqFileInfo_ModTime_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFileInfo_ModTime_fnRecorder) Any() *MoqFileInfo_ModTime_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ModTime(r.Params))
		return nil
	}
	return &MoqFileInfo_ModTime_anyParams{Recorder: r}
}

func (r *MoqFileInfo_ModTime_fnRecorder) Seq() *MoqFileInfo_ModTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ModTime(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFileInfo_ModTime_fnRecorder) NoSeq() *MoqFileInfo_ModTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ModTime(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFileInfo_ModTime_fnRecorder) ReturnResults(result1 time.Time) *MoqFileInfo_ModTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 time.Time
		}
		Sequence   uint32
		DoFn       MoqFileInfo_ModTime_doFn
		DoReturnFn MoqFileInfo_ModTime_doReturnFn
	}{
		Values: &struct {
			Result1 time.Time
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFileInfo_ModTime_fnRecorder) AndDo(fn MoqFileInfo_ModTime_doFn) *MoqFileInfo_ModTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFileInfo_ModTime_fnRecorder) DoReturnResults(fn MoqFileInfo_ModTime_doReturnFn) *MoqFileInfo_ModTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 time.Time
		}
		Sequence   uint32
		DoFn       MoqFileInfo_ModTime_doFn
		DoReturnFn MoqFileInfo_ModTime_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFileInfo_ModTime_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFileInfo_ModTime_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ModTime {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFileInfo_ModTime_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFileInfo_ModTime_paramsKey]*MoqFileInfo_ModTime_results{},
		}
		r.Moq.ResultsByParams_ModTime = append(r.Moq.ResultsByParams_ModTime, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ModTime) {
			copy(r.Moq.ResultsByParams_ModTime[insertAt+1:], r.Moq.ResultsByParams_ModTime[insertAt:0])
			r.Moq.ResultsByParams_ModTime[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ModTime(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFileInfo_ModTime_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFileInfo_ModTime_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFileInfo_ModTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 time.Time
				}
				Sequence   uint32
				DoFn       MoqFileInfo_ModTime_doFn
				DoReturnFn MoqFileInfo_ModTime_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFileInfo) PrettyParams_ModTime(params MoqFileInfo_ModTime_params) string {
	return fmt.Sprintf("ModTime()")
}

func (m *MoqFileInfo) ParamsKey_ModTime(params MoqFileInfo_ModTime_params, anyParams uint64) MoqFileInfo_ModTime_paramsKey {
	m.Scene.T.Helper()
	return MoqFileInfo_ModTime_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFileInfo_recorder) IsDir() *MoqFileInfo_IsDir_fnRecorder {
	return &MoqFileInfo_IsDir_fnRecorder{
		Params:   MoqFileInfo_IsDir_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFileInfo_IsDir_fnRecorder) Any() *MoqFileInfo_IsDir_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsDir(r.Params))
		return nil
	}
	return &MoqFileInfo_IsDir_anyParams{Recorder: r}
}

func (r *MoqFileInfo_IsDir_fnRecorder) Seq() *MoqFileInfo_IsDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsDir(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFileInfo_IsDir_fnRecorder) NoSeq() *MoqFileInfo_IsDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsDir(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFileInfo_IsDir_fnRecorder) ReturnResults(result1 bool) *MoqFileInfo_IsDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqFileInfo_IsDir_doFn
		DoReturnFn MoqFileInfo_IsDir_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFileInfo_IsDir_fnRecorder) AndDo(fn MoqFileInfo_IsDir_doFn) *MoqFileInfo_IsDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFileInfo_IsDir_fnRecorder) DoReturnResults(fn MoqFileInfo_IsDir_doReturnFn) *MoqFileInfo_IsDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqFileInfo_IsDir_doFn
		DoReturnFn MoqFileInfo_IsDir_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFileInfo_IsDir_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFileInfo_IsDir_resultsByParams
	for n, res := range r.Moq.ResultsByParams_IsDir {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFileInfo_IsDir_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFileInfo_IsDir_paramsKey]*MoqFileInfo_IsDir_results{},
		}
		r.Moq.ResultsByParams_IsDir = append(r.Moq.ResultsByParams_IsDir, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_IsDir) {
			copy(r.Moq.ResultsByParams_IsDir[insertAt+1:], r.Moq.ResultsByParams_IsDir[insertAt:0])
			r.Moq.ResultsByParams_IsDir[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_IsDir(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFileInfo_IsDir_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFileInfo_IsDir_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFileInfo_IsDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqFileInfo_IsDir_doFn
				DoReturnFn MoqFileInfo_IsDir_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFileInfo) PrettyParams_IsDir(params MoqFileInfo_IsDir_params) string {
	return fmt.Sprintf("IsDir()")
}

func (m *MoqFileInfo) ParamsKey_IsDir(params MoqFileInfo_IsDir_params, anyParams uint64) MoqFileInfo_IsDir_paramsKey {
	m.Scene.T.Helper()
	return MoqFileInfo_IsDir_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFileInfo_recorder) Sys() *MoqFileInfo_Sys_fnRecorder {
	return &MoqFileInfo_Sys_fnRecorder{
		Params:   MoqFileInfo_Sys_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFileInfo_Sys_fnRecorder) Any() *MoqFileInfo_Sys_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sys(r.Params))
		return nil
	}
	return &MoqFileInfo_Sys_anyParams{Recorder: r}
}

func (r *MoqFileInfo_Sys_fnRecorder) Seq() *MoqFileInfo_Sys_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sys(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFileInfo_Sys_fnRecorder) NoSeq() *MoqFileInfo_Sys_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sys(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFileInfo_Sys_fnRecorder) ReturnResults(result1 interface{}) *MoqFileInfo_Sys_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 interface{}
		}
		Sequence   uint32
		DoFn       MoqFileInfo_Sys_doFn
		DoReturnFn MoqFileInfo_Sys_doReturnFn
	}{
		Values: &struct {
			Result1 interface{}
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFileInfo_Sys_fnRecorder) AndDo(fn MoqFileInfo_Sys_doFn) *MoqFileInfo_Sys_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFileInfo_Sys_fnRecorder) DoReturnResults(fn MoqFileInfo_Sys_doReturnFn) *MoqFileInfo_Sys_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 interface{}
		}
		Sequence   uint32
		DoFn       MoqFileInfo_Sys_doFn
		DoReturnFn MoqFileInfo_Sys_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFileInfo_Sys_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFileInfo_Sys_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Sys {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFileInfo_Sys_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFileInfo_Sys_paramsKey]*MoqFileInfo_Sys_results{},
		}
		r.Moq.ResultsByParams_Sys = append(r.Moq.ResultsByParams_Sys, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Sys) {
			copy(r.Moq.ResultsByParams_Sys[insertAt+1:], r.Moq.ResultsByParams_Sys[insertAt:0])
			r.Moq.ResultsByParams_Sys[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Sys(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFileInfo_Sys_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFileInfo_Sys_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFileInfo_Sys_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 interface{}
				}
				Sequence   uint32
				DoFn       MoqFileInfo_Sys_doFn
				DoReturnFn MoqFileInfo_Sys_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFileInfo) PrettyParams_Sys(params MoqFileInfo_Sys_params) string {
	return fmt.Sprintf("Sys()")
}

func (m *MoqFileInfo) ParamsKey_Sys(params MoqFileInfo_Sys_params, anyParams uint64) MoqFileInfo_Sys_paramsKey {
	m.Scene.T.Helper()
	return MoqFileInfo_Sys_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqFileInfo) Reset() {
	m.ResultsByParams_Name = nil
	m.ResultsByParams_Size = nil
	m.ResultsByParams_Mode = nil
	m.ResultsByParams_ModTime = nil
	m.ResultsByParams_IsDir = nil
	m.ResultsByParams_Sys = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqFileInfo) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Name {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Name(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Size {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Size(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Mode {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Mode(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ModTime {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ModTime(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_IsDir {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_IsDir(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Sys {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Sys(results.Params))
			}
		}
	}
}
