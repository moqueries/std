// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package sort

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that sort.Float64Slice_genType is
// mocked completely
var _ Float64Slice_genType = (*MoqFloat64Slice_genType_mock)(nil)

// Float64Slice_genType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Float64Slice_genType interface {
	Search(x float64) int
	Len() int
	Less(i, j int) bool
	Swap(i, j int)
	Sort()
}

// MoqFloat64Slice_genType holds the state of a moq of the Float64Slice_genType
// type
type MoqFloat64Slice_genType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqFloat64Slice_genType_mock

	ResultsByParams_Search []MoqFloat64Slice_genType_Search_resultsByParams
	ResultsByParams_Len    []MoqFloat64Slice_genType_Len_resultsByParams
	ResultsByParams_Less   []MoqFloat64Slice_genType_Less_resultsByParams
	ResultsByParams_Swap   []MoqFloat64Slice_genType_Swap_resultsByParams
	ResultsByParams_Sort   []MoqFloat64Slice_genType_Sort_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Search struct {
				X moq.ParamIndexing
			}
			Len  struct{}
			Less struct {
				Param1 moq.ParamIndexing
				J      moq.ParamIndexing
			}
			Swap struct {
				Param1 moq.ParamIndexing
				J      moq.ParamIndexing
			}
			Sort struct{}
		}
	}
}

// MoqFloat64Slice_genType_mock isolates the mock interface of the
// Float64Slice_genType type
type MoqFloat64Slice_genType_mock struct {
	Moq *MoqFloat64Slice_genType
}

// MoqFloat64Slice_genType_recorder isolates the recorder interface of the
// Float64Slice_genType type
type MoqFloat64Slice_genType_recorder struct {
	Moq *MoqFloat64Slice_genType
}

// MoqFloat64Slice_genType_Search_params holds the params of the
// Float64Slice_genType type
type MoqFloat64Slice_genType_Search_params struct{ X float64 }

// MoqFloat64Slice_genType_Search_paramsKey holds the map key params of the
// Float64Slice_genType type
type MoqFloat64Slice_genType_Search_paramsKey struct {
	Params struct{ X float64 }
	Hashes struct{ X hash.Hash }
}

// MoqFloat64Slice_genType_Search_resultsByParams contains the results for a
// given set of parameters for the Float64Slice_genType type
type MoqFloat64Slice_genType_Search_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFloat64Slice_genType_Search_paramsKey]*MoqFloat64Slice_genType_Search_results
}

// MoqFloat64Slice_genType_Search_doFn defines the type of function needed when
// calling AndDo for the Float64Slice_genType type
type MoqFloat64Slice_genType_Search_doFn func(x float64)

// MoqFloat64Slice_genType_Search_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Float64Slice_genType type
type MoqFloat64Slice_genType_Search_doReturnFn func(x float64) int

// MoqFloat64Slice_genType_Search_results holds the results of the
// Float64Slice_genType type
type MoqFloat64Slice_genType_Search_results struct {
	Params  MoqFloat64Slice_genType_Search_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqFloat64Slice_genType_Search_doFn
		DoReturnFn MoqFloat64Slice_genType_Search_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFloat64Slice_genType_Search_fnRecorder routes recorded function calls to
// the MoqFloat64Slice_genType moq
type MoqFloat64Slice_genType_Search_fnRecorder struct {
	Params    MoqFloat64Slice_genType_Search_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFloat64Slice_genType_Search_results
	Moq       *MoqFloat64Slice_genType
}

// MoqFloat64Slice_genType_Search_anyParams isolates the any params functions
// of the Float64Slice_genType type
type MoqFloat64Slice_genType_Search_anyParams struct {
	Recorder *MoqFloat64Slice_genType_Search_fnRecorder
}

// MoqFloat64Slice_genType_Len_params holds the params of the
// Float64Slice_genType type
type MoqFloat64Slice_genType_Len_params struct{}

// MoqFloat64Slice_genType_Len_paramsKey holds the map key params of the
// Float64Slice_genType type
type MoqFloat64Slice_genType_Len_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFloat64Slice_genType_Len_resultsByParams contains the results for a given
// set of parameters for the Float64Slice_genType type
type MoqFloat64Slice_genType_Len_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFloat64Slice_genType_Len_paramsKey]*MoqFloat64Slice_genType_Len_results
}

// MoqFloat64Slice_genType_Len_doFn defines the type of function needed when
// calling AndDo for the Float64Slice_genType type
type MoqFloat64Slice_genType_Len_doFn func()

// MoqFloat64Slice_genType_Len_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Float64Slice_genType type
type MoqFloat64Slice_genType_Len_doReturnFn func() int

// MoqFloat64Slice_genType_Len_results holds the results of the
// Float64Slice_genType type
type MoqFloat64Slice_genType_Len_results struct {
	Params  MoqFloat64Slice_genType_Len_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqFloat64Slice_genType_Len_doFn
		DoReturnFn MoqFloat64Slice_genType_Len_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFloat64Slice_genType_Len_fnRecorder routes recorded function calls to the
// MoqFloat64Slice_genType moq
type MoqFloat64Slice_genType_Len_fnRecorder struct {
	Params    MoqFloat64Slice_genType_Len_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFloat64Slice_genType_Len_results
	Moq       *MoqFloat64Slice_genType
}

// MoqFloat64Slice_genType_Len_anyParams isolates the any params functions of
// the Float64Slice_genType type
type MoqFloat64Slice_genType_Len_anyParams struct {
	Recorder *MoqFloat64Slice_genType_Len_fnRecorder
}

// MoqFloat64Slice_genType_Less_params holds the params of the
// Float64Slice_genType type
type MoqFloat64Slice_genType_Less_params struct{ Param1, J int }

// MoqFloat64Slice_genType_Less_paramsKey holds the map key params of the
// Float64Slice_genType type
type MoqFloat64Slice_genType_Less_paramsKey struct {
	Params struct{ Param1, J int }
	Hashes struct{ Param1, J hash.Hash }
}

// MoqFloat64Slice_genType_Less_resultsByParams contains the results for a
// given set of parameters for the Float64Slice_genType type
type MoqFloat64Slice_genType_Less_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFloat64Slice_genType_Less_paramsKey]*MoqFloat64Slice_genType_Less_results
}

// MoqFloat64Slice_genType_Less_doFn defines the type of function needed when
// calling AndDo for the Float64Slice_genType type
type MoqFloat64Slice_genType_Less_doFn func(i, j int)

// MoqFloat64Slice_genType_Less_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Float64Slice_genType type
type MoqFloat64Slice_genType_Less_doReturnFn func(i, j int) bool

// MoqFloat64Slice_genType_Less_results holds the results of the
// Float64Slice_genType type
type MoqFloat64Slice_genType_Less_results struct {
	Params  MoqFloat64Slice_genType_Less_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqFloat64Slice_genType_Less_doFn
		DoReturnFn MoqFloat64Slice_genType_Less_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFloat64Slice_genType_Less_fnRecorder routes recorded function calls to
// the MoqFloat64Slice_genType moq
type MoqFloat64Slice_genType_Less_fnRecorder struct {
	Params    MoqFloat64Slice_genType_Less_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFloat64Slice_genType_Less_results
	Moq       *MoqFloat64Slice_genType
}

// MoqFloat64Slice_genType_Less_anyParams isolates the any params functions of
// the Float64Slice_genType type
type MoqFloat64Slice_genType_Less_anyParams struct {
	Recorder *MoqFloat64Slice_genType_Less_fnRecorder
}

// MoqFloat64Slice_genType_Swap_params holds the params of the
// Float64Slice_genType type
type MoqFloat64Slice_genType_Swap_params struct{ Param1, J int }

// MoqFloat64Slice_genType_Swap_paramsKey holds the map key params of the
// Float64Slice_genType type
type MoqFloat64Slice_genType_Swap_paramsKey struct {
	Params struct{ Param1, J int }
	Hashes struct{ Param1, J hash.Hash }
}

// MoqFloat64Slice_genType_Swap_resultsByParams contains the results for a
// given set of parameters for the Float64Slice_genType type
type MoqFloat64Slice_genType_Swap_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFloat64Slice_genType_Swap_paramsKey]*MoqFloat64Slice_genType_Swap_results
}

// MoqFloat64Slice_genType_Swap_doFn defines the type of function needed when
// calling AndDo for the Float64Slice_genType type
type MoqFloat64Slice_genType_Swap_doFn func(i, j int)

// MoqFloat64Slice_genType_Swap_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Float64Slice_genType type
type MoqFloat64Slice_genType_Swap_doReturnFn func(i, j int)

// MoqFloat64Slice_genType_Swap_results holds the results of the
// Float64Slice_genType type
type MoqFloat64Slice_genType_Swap_results struct {
	Params  MoqFloat64Slice_genType_Swap_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFloat64Slice_genType_Swap_doFn
		DoReturnFn MoqFloat64Slice_genType_Swap_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFloat64Slice_genType_Swap_fnRecorder routes recorded function calls to
// the MoqFloat64Slice_genType moq
type MoqFloat64Slice_genType_Swap_fnRecorder struct {
	Params    MoqFloat64Slice_genType_Swap_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFloat64Slice_genType_Swap_results
	Moq       *MoqFloat64Slice_genType
}

// MoqFloat64Slice_genType_Swap_anyParams isolates the any params functions of
// the Float64Slice_genType type
type MoqFloat64Slice_genType_Swap_anyParams struct {
	Recorder *MoqFloat64Slice_genType_Swap_fnRecorder
}

// MoqFloat64Slice_genType_Sort_params holds the params of the
// Float64Slice_genType type
type MoqFloat64Slice_genType_Sort_params struct{}

// MoqFloat64Slice_genType_Sort_paramsKey holds the map key params of the
// Float64Slice_genType type
type MoqFloat64Slice_genType_Sort_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFloat64Slice_genType_Sort_resultsByParams contains the results for a
// given set of parameters for the Float64Slice_genType type
type MoqFloat64Slice_genType_Sort_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFloat64Slice_genType_Sort_paramsKey]*MoqFloat64Slice_genType_Sort_results
}

// MoqFloat64Slice_genType_Sort_doFn defines the type of function needed when
// calling AndDo for the Float64Slice_genType type
type MoqFloat64Slice_genType_Sort_doFn func()

// MoqFloat64Slice_genType_Sort_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Float64Slice_genType type
type MoqFloat64Slice_genType_Sort_doReturnFn func()

// MoqFloat64Slice_genType_Sort_results holds the results of the
// Float64Slice_genType type
type MoqFloat64Slice_genType_Sort_results struct {
	Params  MoqFloat64Slice_genType_Sort_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFloat64Slice_genType_Sort_doFn
		DoReturnFn MoqFloat64Slice_genType_Sort_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFloat64Slice_genType_Sort_fnRecorder routes recorded function calls to
// the MoqFloat64Slice_genType moq
type MoqFloat64Slice_genType_Sort_fnRecorder struct {
	Params    MoqFloat64Slice_genType_Sort_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFloat64Slice_genType_Sort_results
	Moq       *MoqFloat64Slice_genType
}

// MoqFloat64Slice_genType_Sort_anyParams isolates the any params functions of
// the Float64Slice_genType type
type MoqFloat64Slice_genType_Sort_anyParams struct {
	Recorder *MoqFloat64Slice_genType_Sort_fnRecorder
}

// NewMoqFloat64Slice_genType creates a new moq of the Float64Slice_genType
// type
func NewMoqFloat64Slice_genType(scene *moq.Scene, config *moq.Config) *MoqFloat64Slice_genType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqFloat64Slice_genType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqFloat64Slice_genType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Search struct {
					X moq.ParamIndexing
				}
				Len  struct{}
				Less struct {
					Param1 moq.ParamIndexing
					J      moq.ParamIndexing
				}
				Swap struct {
					Param1 moq.ParamIndexing
					J      moq.ParamIndexing
				}
				Sort struct{}
			}
		}{ParameterIndexing: struct {
			Search struct {
				X moq.ParamIndexing
			}
			Len  struct{}
			Less struct {
				Param1 moq.ParamIndexing
				J      moq.ParamIndexing
			}
			Swap struct {
				Param1 moq.ParamIndexing
				J      moq.ParamIndexing
			}
			Sort struct{}
		}{
			Search: struct {
				X moq.ParamIndexing
			}{
				X: moq.ParamIndexByValue,
			},
			Len: struct{}{},
			Less: struct {
				Param1 moq.ParamIndexing
				J      moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
				J:      moq.ParamIndexByValue,
			},
			Swap: struct {
				Param1 moq.ParamIndexing
				J      moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
				J:      moq.ParamIndexByValue,
			},
			Sort: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Float64Slice_genType type
func (m *MoqFloat64Slice_genType) Mock() *MoqFloat64Slice_genType_mock { return m.Moq }

func (m *MoqFloat64Slice_genType_mock) Search(x float64) (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqFloat64Slice_genType_Search_params{
		X: x,
	}
	var results *MoqFloat64Slice_genType_Search_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Search {
		paramsKey := m.Moq.ParamsKey_Search(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Search(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Search(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Search(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(x)
	}
	return
}

func (m *MoqFloat64Slice_genType_mock) Len() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqFloat64Slice_genType_Len_params{}
	var results *MoqFloat64Slice_genType_Len_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Len {
		paramsKey := m.Moq.ParamsKey_Len(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Len(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Len(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Len(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqFloat64Slice_genType_mock) Less(param1, j int) (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqFloat64Slice_genType_Less_params{
		Param1: param1,
		J:      j,
	}
	var results *MoqFloat64Slice_genType_Less_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Less {
		paramsKey := m.Moq.ParamsKey_Less(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Less(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Less(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Less(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1, j)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1, j)
	}
	return
}

func (m *MoqFloat64Slice_genType_mock) Swap(param1, j int) {
	m.Moq.Scene.T.Helper()
	params := MoqFloat64Slice_genType_Swap_params{
		Param1: param1,
		J:      j,
	}
	var results *MoqFloat64Slice_genType_Swap_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Swap {
		paramsKey := m.Moq.ParamsKey_Swap(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Swap(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Swap(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Swap(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1, j)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(param1, j)
	}
	return
}

func (m *MoqFloat64Slice_genType_mock) Sort() {
	m.Moq.Scene.T.Helper()
	params := MoqFloat64Slice_genType_Sort_params{}
	var results *MoqFloat64Slice_genType_Sort_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Sort {
		paramsKey := m.Moq.ParamsKey_Sort(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Sort(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Sort(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Sort(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Float64Slice_genType type
func (m *MoqFloat64Slice_genType) OnCall() *MoqFloat64Slice_genType_recorder {
	return &MoqFloat64Slice_genType_recorder{
		Moq: m,
	}
}

func (m *MoqFloat64Slice_genType_recorder) Search(x float64) *MoqFloat64Slice_genType_Search_fnRecorder {
	return &MoqFloat64Slice_genType_Search_fnRecorder{
		Params: MoqFloat64Slice_genType_Search_params{
			X: x,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFloat64Slice_genType_Search_fnRecorder) Any() *MoqFloat64Slice_genType_Search_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Search(r.Params))
		return nil
	}
	return &MoqFloat64Slice_genType_Search_anyParams{Recorder: r}
}

func (a *MoqFloat64Slice_genType_Search_anyParams) X() *MoqFloat64Slice_genType_Search_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqFloat64Slice_genType_Search_fnRecorder) Seq() *MoqFloat64Slice_genType_Search_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Search(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFloat64Slice_genType_Search_fnRecorder) NoSeq() *MoqFloat64Slice_genType_Search_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Search(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFloat64Slice_genType_Search_fnRecorder) ReturnResults(result1 int) *MoqFloat64Slice_genType_Search_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqFloat64Slice_genType_Search_doFn
		DoReturnFn MoqFloat64Slice_genType_Search_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFloat64Slice_genType_Search_fnRecorder) AndDo(fn MoqFloat64Slice_genType_Search_doFn) *MoqFloat64Slice_genType_Search_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFloat64Slice_genType_Search_fnRecorder) DoReturnResults(fn MoqFloat64Slice_genType_Search_doReturnFn) *MoqFloat64Slice_genType_Search_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqFloat64Slice_genType_Search_doFn
		DoReturnFn MoqFloat64Slice_genType_Search_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFloat64Slice_genType_Search_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFloat64Slice_genType_Search_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Search {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFloat64Slice_genType_Search_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFloat64Slice_genType_Search_paramsKey]*MoqFloat64Slice_genType_Search_results{},
		}
		r.Moq.ResultsByParams_Search = append(r.Moq.ResultsByParams_Search, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Search) {
			copy(r.Moq.ResultsByParams_Search[insertAt+1:], r.Moq.ResultsByParams_Search[insertAt:0])
			r.Moq.ResultsByParams_Search[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Search(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFloat64Slice_genType_Search_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFloat64Slice_genType_Search_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFloat64Slice_genType_Search_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqFloat64Slice_genType_Search_doFn
				DoReturnFn MoqFloat64Slice_genType_Search_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFloat64Slice_genType) PrettyParams_Search(params MoqFloat64Slice_genType_Search_params) string {
	return fmt.Sprintf("Search(%#v)", params.X)
}

func (m *MoqFloat64Slice_genType) ParamsKey_Search(params MoqFloat64Slice_genType_Search_params, anyParams uint64) MoqFloat64Slice_genType_Search_paramsKey {
	m.Scene.T.Helper()
	var xUsed float64
	var xUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Search.X == moq.ParamIndexByValue {
			xUsed = params.X
		} else {
			xUsedHash = hash.DeepHash(params.X)
		}
	}
	return MoqFloat64Slice_genType_Search_paramsKey{
		Params: struct{ X float64 }{
			X: xUsed,
		},
		Hashes: struct{ X hash.Hash }{
			X: xUsedHash,
		},
	}
}

func (m *MoqFloat64Slice_genType_recorder) Len() *MoqFloat64Slice_genType_Len_fnRecorder {
	return &MoqFloat64Slice_genType_Len_fnRecorder{
		Params:   MoqFloat64Slice_genType_Len_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFloat64Slice_genType_Len_fnRecorder) Any() *MoqFloat64Slice_genType_Len_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Len(r.Params))
		return nil
	}
	return &MoqFloat64Slice_genType_Len_anyParams{Recorder: r}
}

func (r *MoqFloat64Slice_genType_Len_fnRecorder) Seq() *MoqFloat64Slice_genType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Len(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFloat64Slice_genType_Len_fnRecorder) NoSeq() *MoqFloat64Slice_genType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Len(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFloat64Slice_genType_Len_fnRecorder) ReturnResults(result1 int) *MoqFloat64Slice_genType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqFloat64Slice_genType_Len_doFn
		DoReturnFn MoqFloat64Slice_genType_Len_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFloat64Slice_genType_Len_fnRecorder) AndDo(fn MoqFloat64Slice_genType_Len_doFn) *MoqFloat64Slice_genType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFloat64Slice_genType_Len_fnRecorder) DoReturnResults(fn MoqFloat64Slice_genType_Len_doReturnFn) *MoqFloat64Slice_genType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqFloat64Slice_genType_Len_doFn
		DoReturnFn MoqFloat64Slice_genType_Len_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFloat64Slice_genType_Len_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFloat64Slice_genType_Len_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Len {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFloat64Slice_genType_Len_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFloat64Slice_genType_Len_paramsKey]*MoqFloat64Slice_genType_Len_results{},
		}
		r.Moq.ResultsByParams_Len = append(r.Moq.ResultsByParams_Len, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Len) {
			copy(r.Moq.ResultsByParams_Len[insertAt+1:], r.Moq.ResultsByParams_Len[insertAt:0])
			r.Moq.ResultsByParams_Len[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Len(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFloat64Slice_genType_Len_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFloat64Slice_genType_Len_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFloat64Slice_genType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqFloat64Slice_genType_Len_doFn
				DoReturnFn MoqFloat64Slice_genType_Len_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFloat64Slice_genType) PrettyParams_Len(params MoqFloat64Slice_genType_Len_params) string {
	return fmt.Sprintf("Len()")
}

func (m *MoqFloat64Slice_genType) ParamsKey_Len(params MoqFloat64Slice_genType_Len_params, anyParams uint64) MoqFloat64Slice_genType_Len_paramsKey {
	m.Scene.T.Helper()
	return MoqFloat64Slice_genType_Len_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFloat64Slice_genType_recorder) Less(param1, j int) *MoqFloat64Slice_genType_Less_fnRecorder {
	return &MoqFloat64Slice_genType_Less_fnRecorder{
		Params: MoqFloat64Slice_genType_Less_params{
			Param1: param1,
			J:      j,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFloat64Slice_genType_Less_fnRecorder) Any() *MoqFloat64Slice_genType_Less_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Less(r.Params))
		return nil
	}
	return &MoqFloat64Slice_genType_Less_anyParams{Recorder: r}
}

func (a *MoqFloat64Slice_genType_Less_anyParams) Param1() *MoqFloat64Slice_genType_Less_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFloat64Slice_genType_Less_anyParams) J() *MoqFloat64Slice_genType_Less_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqFloat64Slice_genType_Less_fnRecorder) Seq() *MoqFloat64Slice_genType_Less_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Less(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFloat64Slice_genType_Less_fnRecorder) NoSeq() *MoqFloat64Slice_genType_Less_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Less(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFloat64Slice_genType_Less_fnRecorder) ReturnResults(result1 bool) *MoqFloat64Slice_genType_Less_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqFloat64Slice_genType_Less_doFn
		DoReturnFn MoqFloat64Slice_genType_Less_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFloat64Slice_genType_Less_fnRecorder) AndDo(fn MoqFloat64Slice_genType_Less_doFn) *MoqFloat64Slice_genType_Less_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFloat64Slice_genType_Less_fnRecorder) DoReturnResults(fn MoqFloat64Slice_genType_Less_doReturnFn) *MoqFloat64Slice_genType_Less_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqFloat64Slice_genType_Less_doFn
		DoReturnFn MoqFloat64Slice_genType_Less_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFloat64Slice_genType_Less_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFloat64Slice_genType_Less_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Less {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFloat64Slice_genType_Less_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFloat64Slice_genType_Less_paramsKey]*MoqFloat64Slice_genType_Less_results{},
		}
		r.Moq.ResultsByParams_Less = append(r.Moq.ResultsByParams_Less, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Less) {
			copy(r.Moq.ResultsByParams_Less[insertAt+1:], r.Moq.ResultsByParams_Less[insertAt:0])
			r.Moq.ResultsByParams_Less[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Less(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFloat64Slice_genType_Less_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFloat64Slice_genType_Less_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFloat64Slice_genType_Less_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqFloat64Slice_genType_Less_doFn
				DoReturnFn MoqFloat64Slice_genType_Less_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFloat64Slice_genType) PrettyParams_Less(params MoqFloat64Slice_genType_Less_params) string {
	return fmt.Sprintf("Less(%#v, %#v)", params.Param1, params.J)
}

func (m *MoqFloat64Slice_genType) ParamsKey_Less(params MoqFloat64Slice_genType_Less_params, anyParams uint64) MoqFloat64Slice_genType_Less_paramsKey {
	m.Scene.T.Helper()
	var param1Used int
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Less.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	var jUsed int
	var jUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Less.J == moq.ParamIndexByValue {
			jUsed = params.J
		} else {
			jUsedHash = hash.DeepHash(params.J)
		}
	}
	return MoqFloat64Slice_genType_Less_paramsKey{
		Params: struct{ Param1, J int }{
			Param1: param1Used,
			J:      jUsed,
		},
		Hashes: struct{ Param1, J hash.Hash }{
			Param1: param1UsedHash,
			J:      jUsedHash,
		},
	}
}

func (m *MoqFloat64Slice_genType_recorder) Swap(param1, j int) *MoqFloat64Slice_genType_Swap_fnRecorder {
	return &MoqFloat64Slice_genType_Swap_fnRecorder{
		Params: MoqFloat64Slice_genType_Swap_params{
			Param1: param1,
			J:      j,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFloat64Slice_genType_Swap_fnRecorder) Any() *MoqFloat64Slice_genType_Swap_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Swap(r.Params))
		return nil
	}
	return &MoqFloat64Slice_genType_Swap_anyParams{Recorder: r}
}

func (a *MoqFloat64Slice_genType_Swap_anyParams) Param1() *MoqFloat64Slice_genType_Swap_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFloat64Slice_genType_Swap_anyParams) J() *MoqFloat64Slice_genType_Swap_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqFloat64Slice_genType_Swap_fnRecorder) Seq() *MoqFloat64Slice_genType_Swap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Swap(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFloat64Slice_genType_Swap_fnRecorder) NoSeq() *MoqFloat64Slice_genType_Swap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Swap(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFloat64Slice_genType_Swap_fnRecorder) ReturnResults() *MoqFloat64Slice_genType_Swap_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFloat64Slice_genType_Swap_doFn
		DoReturnFn MoqFloat64Slice_genType_Swap_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFloat64Slice_genType_Swap_fnRecorder) AndDo(fn MoqFloat64Slice_genType_Swap_doFn) *MoqFloat64Slice_genType_Swap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFloat64Slice_genType_Swap_fnRecorder) DoReturnResults(fn MoqFloat64Slice_genType_Swap_doReturnFn) *MoqFloat64Slice_genType_Swap_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFloat64Slice_genType_Swap_doFn
		DoReturnFn MoqFloat64Slice_genType_Swap_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFloat64Slice_genType_Swap_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFloat64Slice_genType_Swap_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Swap {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFloat64Slice_genType_Swap_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFloat64Slice_genType_Swap_paramsKey]*MoqFloat64Slice_genType_Swap_results{},
		}
		r.Moq.ResultsByParams_Swap = append(r.Moq.ResultsByParams_Swap, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Swap) {
			copy(r.Moq.ResultsByParams_Swap[insertAt+1:], r.Moq.ResultsByParams_Swap[insertAt:0])
			r.Moq.ResultsByParams_Swap[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Swap(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFloat64Slice_genType_Swap_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFloat64Slice_genType_Swap_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFloat64Slice_genType_Swap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFloat64Slice_genType_Swap_doFn
				DoReturnFn MoqFloat64Slice_genType_Swap_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFloat64Slice_genType) PrettyParams_Swap(params MoqFloat64Slice_genType_Swap_params) string {
	return fmt.Sprintf("Swap(%#v, %#v)", params.Param1, params.J)
}

func (m *MoqFloat64Slice_genType) ParamsKey_Swap(params MoqFloat64Slice_genType_Swap_params, anyParams uint64) MoqFloat64Slice_genType_Swap_paramsKey {
	m.Scene.T.Helper()
	var param1Used int
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Swap.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	var jUsed int
	var jUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Swap.J == moq.ParamIndexByValue {
			jUsed = params.J
		} else {
			jUsedHash = hash.DeepHash(params.J)
		}
	}
	return MoqFloat64Slice_genType_Swap_paramsKey{
		Params: struct{ Param1, J int }{
			Param1: param1Used,
			J:      jUsed,
		},
		Hashes: struct{ Param1, J hash.Hash }{
			Param1: param1UsedHash,
			J:      jUsedHash,
		},
	}
}

func (m *MoqFloat64Slice_genType_recorder) Sort() *MoqFloat64Slice_genType_Sort_fnRecorder {
	return &MoqFloat64Slice_genType_Sort_fnRecorder{
		Params:   MoqFloat64Slice_genType_Sort_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFloat64Slice_genType_Sort_fnRecorder) Any() *MoqFloat64Slice_genType_Sort_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sort(r.Params))
		return nil
	}
	return &MoqFloat64Slice_genType_Sort_anyParams{Recorder: r}
}

func (r *MoqFloat64Slice_genType_Sort_fnRecorder) Seq() *MoqFloat64Slice_genType_Sort_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sort(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFloat64Slice_genType_Sort_fnRecorder) NoSeq() *MoqFloat64Slice_genType_Sort_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sort(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFloat64Slice_genType_Sort_fnRecorder) ReturnResults() *MoqFloat64Slice_genType_Sort_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFloat64Slice_genType_Sort_doFn
		DoReturnFn MoqFloat64Slice_genType_Sort_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFloat64Slice_genType_Sort_fnRecorder) AndDo(fn MoqFloat64Slice_genType_Sort_doFn) *MoqFloat64Slice_genType_Sort_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFloat64Slice_genType_Sort_fnRecorder) DoReturnResults(fn MoqFloat64Slice_genType_Sort_doReturnFn) *MoqFloat64Slice_genType_Sort_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFloat64Slice_genType_Sort_doFn
		DoReturnFn MoqFloat64Slice_genType_Sort_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFloat64Slice_genType_Sort_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFloat64Slice_genType_Sort_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Sort {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFloat64Slice_genType_Sort_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFloat64Slice_genType_Sort_paramsKey]*MoqFloat64Slice_genType_Sort_results{},
		}
		r.Moq.ResultsByParams_Sort = append(r.Moq.ResultsByParams_Sort, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Sort) {
			copy(r.Moq.ResultsByParams_Sort[insertAt+1:], r.Moq.ResultsByParams_Sort[insertAt:0])
			r.Moq.ResultsByParams_Sort[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Sort(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFloat64Slice_genType_Sort_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFloat64Slice_genType_Sort_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFloat64Slice_genType_Sort_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFloat64Slice_genType_Sort_doFn
				DoReturnFn MoqFloat64Slice_genType_Sort_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFloat64Slice_genType) PrettyParams_Sort(params MoqFloat64Slice_genType_Sort_params) string {
	return fmt.Sprintf("Sort()")
}

func (m *MoqFloat64Slice_genType) ParamsKey_Sort(params MoqFloat64Slice_genType_Sort_params, anyParams uint64) MoqFloat64Slice_genType_Sort_paramsKey {
	m.Scene.T.Helper()
	return MoqFloat64Slice_genType_Sort_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqFloat64Slice_genType) Reset() {
	m.ResultsByParams_Search = nil
	m.ResultsByParams_Len = nil
	m.ResultsByParams_Less = nil
	m.ResultsByParams_Swap = nil
	m.ResultsByParams_Sort = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqFloat64Slice_genType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Search {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Search(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Len {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Len(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Less {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Less(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Swap {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Swap(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Sort {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Sort(results.Params))
			}
		}
	}
}
