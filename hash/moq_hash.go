// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package hash

import (
	"fmt"
	"hash"
	"math/bits"
	"sync/atomic"

	hash1 "moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that hash.Hash is mocked completely
var _ hash.Hash = (*MoqHash_mock)(nil)

// MoqHash holds the state of a moq of the Hash type
type MoqHash struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqHash_mock

	ResultsByParams_Write     []MoqHash_Write_resultsByParams
	ResultsByParams_Sum       []MoqHash_Sum_resultsByParams
	ResultsByParams_Reset     []MoqHash_Reset_resultsByParams
	ResultsByParams_Size      []MoqHash_Size_resultsByParams
	ResultsByParams_BlockSize []MoqHash_BlockSize_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Write struct {
				P moq.ParamIndexing
			}
			Sum struct {
				B moq.ParamIndexing
			}
			Reset     struct{}
			Size      struct{}
			BlockSize struct{}
		}
	}
}

// MoqHash_mock isolates the mock interface of the Hash type
type MoqHash_mock struct {
	Moq *MoqHash
}

// MoqHash_recorder isolates the recorder interface of the Hash type
type MoqHash_recorder struct {
	Moq *MoqHash
}

// MoqHash_Write_params holds the params of the Hash type
type MoqHash_Write_params struct{ P []byte }

// MoqHash_Write_paramsKey holds the map key params of the Hash type
type MoqHash_Write_paramsKey struct {
	Params struct{}
	Hashes struct{ P hash1.Hash }
}

// MoqHash_Write_resultsByParams contains the results for a given set of
// parameters for the Hash type
type MoqHash_Write_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_Write_paramsKey]*MoqHash_Write_results
}

// MoqHash_Write_doFn defines the type of function needed when calling AndDo
// for the Hash type
type MoqHash_Write_doFn func(p []byte)

// MoqHash_Write_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Hash type
type MoqHash_Write_doReturnFn func(p []byte) (n int, err error)

// MoqHash_Write_results holds the results of the Hash type
type MoqHash_Write_results struct {
	Params  MoqHash_Write_params
	Results []struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqHash_Write_doFn
		DoReturnFn MoqHash_Write_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_Write_fnRecorder routes recorded function calls to the MoqHash moq
type MoqHash_Write_fnRecorder struct {
	Params    MoqHash_Write_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_Write_results
	Moq       *MoqHash
}

// MoqHash_Write_anyParams isolates the any params functions of the Hash type
type MoqHash_Write_anyParams struct {
	Recorder *MoqHash_Write_fnRecorder
}

// MoqHash_Sum_params holds the params of the Hash type
type MoqHash_Sum_params struct{ B []byte }

// MoqHash_Sum_paramsKey holds the map key params of the Hash type
type MoqHash_Sum_paramsKey struct {
	Params struct{}
	Hashes struct{ B hash1.Hash }
}

// MoqHash_Sum_resultsByParams contains the results for a given set of
// parameters for the Hash type
type MoqHash_Sum_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_Sum_paramsKey]*MoqHash_Sum_results
}

// MoqHash_Sum_doFn defines the type of function needed when calling AndDo for
// the Hash type
type MoqHash_Sum_doFn func(b []byte)

// MoqHash_Sum_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Hash type
type MoqHash_Sum_doReturnFn func(b []byte) []byte

// MoqHash_Sum_results holds the results of the Hash type
type MoqHash_Sum_results struct {
	Params  MoqHash_Sum_params
	Results []struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqHash_Sum_doFn
		DoReturnFn MoqHash_Sum_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_Sum_fnRecorder routes recorded function calls to the MoqHash moq
type MoqHash_Sum_fnRecorder struct {
	Params    MoqHash_Sum_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_Sum_results
	Moq       *MoqHash
}

// MoqHash_Sum_anyParams isolates the any params functions of the Hash type
type MoqHash_Sum_anyParams struct {
	Recorder *MoqHash_Sum_fnRecorder
}

// MoqHash_Reset_params holds the params of the Hash type
type MoqHash_Reset_params struct{}

// MoqHash_Reset_paramsKey holds the map key params of the Hash type
type MoqHash_Reset_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqHash_Reset_resultsByParams contains the results for a given set of
// parameters for the Hash type
type MoqHash_Reset_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_Reset_paramsKey]*MoqHash_Reset_results
}

// MoqHash_Reset_doFn defines the type of function needed when calling AndDo
// for the Hash type
type MoqHash_Reset_doFn func()

// MoqHash_Reset_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Hash type
type MoqHash_Reset_doReturnFn func()

// MoqHash_Reset_results holds the results of the Hash type
type MoqHash_Reset_results struct {
	Params  MoqHash_Reset_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqHash_Reset_doFn
		DoReturnFn MoqHash_Reset_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_Reset_fnRecorder routes recorded function calls to the MoqHash moq
type MoqHash_Reset_fnRecorder struct {
	Params    MoqHash_Reset_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_Reset_results
	Moq       *MoqHash
}

// MoqHash_Reset_anyParams isolates the any params functions of the Hash type
type MoqHash_Reset_anyParams struct {
	Recorder *MoqHash_Reset_fnRecorder
}

// MoqHash_Size_params holds the params of the Hash type
type MoqHash_Size_params struct{}

// MoqHash_Size_paramsKey holds the map key params of the Hash type
type MoqHash_Size_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqHash_Size_resultsByParams contains the results for a given set of
// parameters for the Hash type
type MoqHash_Size_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_Size_paramsKey]*MoqHash_Size_results
}

// MoqHash_Size_doFn defines the type of function needed when calling AndDo for
// the Hash type
type MoqHash_Size_doFn func()

// MoqHash_Size_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Hash type
type MoqHash_Size_doReturnFn func() int

// MoqHash_Size_results holds the results of the Hash type
type MoqHash_Size_results struct {
	Params  MoqHash_Size_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqHash_Size_doFn
		DoReturnFn MoqHash_Size_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_Size_fnRecorder routes recorded function calls to the MoqHash moq
type MoqHash_Size_fnRecorder struct {
	Params    MoqHash_Size_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_Size_results
	Moq       *MoqHash
}

// MoqHash_Size_anyParams isolates the any params functions of the Hash type
type MoqHash_Size_anyParams struct {
	Recorder *MoqHash_Size_fnRecorder
}

// MoqHash_BlockSize_params holds the params of the Hash type
type MoqHash_BlockSize_params struct{}

// MoqHash_BlockSize_paramsKey holds the map key params of the Hash type
type MoqHash_BlockSize_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqHash_BlockSize_resultsByParams contains the results for a given set of
// parameters for the Hash type
type MoqHash_BlockSize_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_BlockSize_paramsKey]*MoqHash_BlockSize_results
}

// MoqHash_BlockSize_doFn defines the type of function needed when calling
// AndDo for the Hash type
type MoqHash_BlockSize_doFn func()

// MoqHash_BlockSize_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Hash type
type MoqHash_BlockSize_doReturnFn func() int

// MoqHash_BlockSize_results holds the results of the Hash type
type MoqHash_BlockSize_results struct {
	Params  MoqHash_BlockSize_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqHash_BlockSize_doFn
		DoReturnFn MoqHash_BlockSize_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_BlockSize_fnRecorder routes recorded function calls to the MoqHash
// moq
type MoqHash_BlockSize_fnRecorder struct {
	Params    MoqHash_BlockSize_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_BlockSize_results
	Moq       *MoqHash
}

// MoqHash_BlockSize_anyParams isolates the any params functions of the Hash
// type
type MoqHash_BlockSize_anyParams struct {
	Recorder *MoqHash_BlockSize_fnRecorder
}

// NewMoqHash creates a new moq of the Hash type
func NewMoqHash(scene *moq.Scene, config *moq.Config) *MoqHash {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqHash{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqHash_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Write struct {
					P moq.ParamIndexing
				}
				Sum struct {
					B moq.ParamIndexing
				}
				Reset     struct{}
				Size      struct{}
				BlockSize struct{}
			}
		}{ParameterIndexing: struct {
			Write struct {
				P moq.ParamIndexing
			}
			Sum struct {
				B moq.ParamIndexing
			}
			Reset     struct{}
			Size      struct{}
			BlockSize struct{}
		}{
			Write: struct {
				P moq.ParamIndexing
			}{
				P: moq.ParamIndexByHash,
			},
			Sum: struct {
				B moq.ParamIndexing
			}{
				B: moq.ParamIndexByHash,
			},
			Reset:     struct{}{},
			Size:      struct{}{},
			BlockSize: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Hash type
func (m *MoqHash) Mock() *MoqHash_mock { return m.Moq }

func (m *MoqHash_mock) Write(p []byte) (n int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqHash_Write_params{
		P: p,
	}
	var results *MoqHash_Write_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Write {
		paramsKey := m.Moq.ParamsKey_Write(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Write(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Write(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Write(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(p)
	}
	return
}

func (m *MoqHash_mock) Sum(b []byte) (result1 []byte) {
	m.Moq.Scene.T.Helper()
	params := MoqHash_Sum_params{
		B: b,
	}
	var results *MoqHash_Sum_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Sum {
		paramsKey := m.Moq.ParamsKey_Sum(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Sum(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Sum(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Sum(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(b)
	}
	return
}

func (m *MoqHash_mock) Reset() {
	m.Moq.Scene.T.Helper()
	params := MoqHash_Reset_params{}
	var results *MoqHash_Reset_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Reset {
		paramsKey := m.Moq.ParamsKey_Reset(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Reset(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Reset(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Reset(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqHash_mock) Size() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqHash_Size_params{}
	var results *MoqHash_Size_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Size {
		paramsKey := m.Moq.ParamsKey_Size(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Size(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Size(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Size(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqHash_mock) BlockSize() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqHash_BlockSize_params{}
	var results *MoqHash_BlockSize_results
	for _, resultsByParams := range m.Moq.ResultsByParams_BlockSize {
		paramsKey := m.Moq.ParamsKey_BlockSize(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_BlockSize(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_BlockSize(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_BlockSize(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Hash type
func (m *MoqHash) OnCall() *MoqHash_recorder {
	return &MoqHash_recorder{
		Moq: m,
	}
}

func (m *MoqHash_recorder) Write(p []byte) *MoqHash_Write_fnRecorder {
	return &MoqHash_Write_fnRecorder{
		Params: MoqHash_Write_params{
			P: p,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_Write_fnRecorder) Any() *MoqHash_Write_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	return &MoqHash_Write_anyParams{Recorder: r}
}

func (a *MoqHash_Write_anyParams) P() *MoqHash_Write_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqHash_Write_fnRecorder) Seq() *MoqHash_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_Write_fnRecorder) NoSeq() *MoqHash_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_Write_fnRecorder) ReturnResults(n int, err error) *MoqHash_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqHash_Write_doFn
		DoReturnFn MoqHash_Write_doReturnFn
	}{
		Values: &struct {
			N   int
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_Write_fnRecorder) AndDo(fn MoqHash_Write_doFn) *MoqHash_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_Write_fnRecorder) DoReturnResults(fn MoqHash_Write_doReturnFn) *MoqHash_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqHash_Write_doFn
		DoReturnFn MoqHash_Write_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_Write_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_Write_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Write {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_Write_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_Write_paramsKey]*MoqHash_Write_results{},
		}
		r.Moq.ResultsByParams_Write = append(r.Moq.ResultsByParams_Write, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Write) {
			copy(r.Moq.ResultsByParams_Write[insertAt+1:], r.Moq.ResultsByParams_Write[insertAt:0])
			r.Moq.ResultsByParams_Write[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Write(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_Write_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_Write_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int
					Err error
				}
				Sequence   uint32
				DoFn       MoqHash_Write_doFn
				DoReturnFn MoqHash_Write_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash) PrettyParams_Write(params MoqHash_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.P)
}

func (m *MoqHash) ParamsKey_Write(params MoqHash_Write_params, anyParams uint64) MoqHash_Write_paramsKey {
	m.Scene.T.Helper()
	var pUsedHash hash1.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Write.P == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The p parameter of the Write function can't be indexed by value")
		}
		pUsedHash = hash1.DeepHash(params.P)
	}
	return MoqHash_Write_paramsKey{
		Params: struct{}{},
		Hashes: struct{ P hash1.Hash }{
			P: pUsedHash,
		},
	}
}

func (m *MoqHash_recorder) Sum(b []byte) *MoqHash_Sum_fnRecorder {
	return &MoqHash_Sum_fnRecorder{
		Params: MoqHash_Sum_params{
			B: b,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_Sum_fnRecorder) Any() *MoqHash_Sum_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sum(r.Params))
		return nil
	}
	return &MoqHash_Sum_anyParams{Recorder: r}
}

func (a *MoqHash_Sum_anyParams) B() *MoqHash_Sum_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqHash_Sum_fnRecorder) Seq() *MoqHash_Sum_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sum(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_Sum_fnRecorder) NoSeq() *MoqHash_Sum_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sum(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_Sum_fnRecorder) ReturnResults(result1 []byte) *MoqHash_Sum_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqHash_Sum_doFn
		DoReturnFn MoqHash_Sum_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_Sum_fnRecorder) AndDo(fn MoqHash_Sum_doFn) *MoqHash_Sum_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_Sum_fnRecorder) DoReturnResults(fn MoqHash_Sum_doReturnFn) *MoqHash_Sum_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqHash_Sum_doFn
		DoReturnFn MoqHash_Sum_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_Sum_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_Sum_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Sum {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_Sum_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_Sum_paramsKey]*MoqHash_Sum_results{},
		}
		r.Moq.ResultsByParams_Sum = append(r.Moq.ResultsByParams_Sum, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Sum) {
			copy(r.Moq.ResultsByParams_Sum[insertAt+1:], r.Moq.ResultsByParams_Sum[insertAt:0])
			r.Moq.ResultsByParams_Sum[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Sum(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_Sum_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_Sum_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_Sum_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
				}
				Sequence   uint32
				DoFn       MoqHash_Sum_doFn
				DoReturnFn MoqHash_Sum_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash) PrettyParams_Sum(params MoqHash_Sum_params) string {
	return fmt.Sprintf("Sum(%#v)", params.B)
}

func (m *MoqHash) ParamsKey_Sum(params MoqHash_Sum_params, anyParams uint64) MoqHash_Sum_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash1.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Sum.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the Sum function can't be indexed by value")
		}
		bUsedHash = hash1.DeepHash(params.B)
	}
	return MoqHash_Sum_paramsKey{
		Params: struct{}{},
		Hashes: struct{ B hash1.Hash }{
			B: bUsedHash,
		},
	}
}

func (m *MoqHash_recorder) Reset() *MoqHash_Reset_fnRecorder {
	return &MoqHash_Reset_fnRecorder{
		Params:   MoqHash_Reset_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_Reset_fnRecorder) Any() *MoqHash_Reset_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	return &MoqHash_Reset_anyParams{Recorder: r}
}

func (r *MoqHash_Reset_fnRecorder) Seq() *MoqHash_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_Reset_fnRecorder) NoSeq() *MoqHash_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_Reset_fnRecorder) ReturnResults() *MoqHash_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqHash_Reset_doFn
		DoReturnFn MoqHash_Reset_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_Reset_fnRecorder) AndDo(fn MoqHash_Reset_doFn) *MoqHash_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_Reset_fnRecorder) DoReturnResults(fn MoqHash_Reset_doReturnFn) *MoqHash_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqHash_Reset_doFn
		DoReturnFn MoqHash_Reset_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_Reset_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_Reset_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Reset {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_Reset_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_Reset_paramsKey]*MoqHash_Reset_results{},
		}
		r.Moq.ResultsByParams_Reset = append(r.Moq.ResultsByParams_Reset, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Reset) {
			copy(r.Moq.ResultsByParams_Reset[insertAt+1:], r.Moq.ResultsByParams_Reset[insertAt:0])
			r.Moq.ResultsByParams_Reset[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Reset(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_Reset_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_Reset_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqHash_Reset_doFn
				DoReturnFn MoqHash_Reset_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash) PrettyParams_Reset(params MoqHash_Reset_params) string {
	return fmt.Sprintf("Reset()")
}

func (m *MoqHash) ParamsKey_Reset(params MoqHash_Reset_params, anyParams uint64) MoqHash_Reset_paramsKey {
	m.Scene.T.Helper()
	return MoqHash_Reset_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqHash_recorder) Size() *MoqHash_Size_fnRecorder {
	return &MoqHash_Size_fnRecorder{
		Params:   MoqHash_Size_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_Size_fnRecorder) Any() *MoqHash_Size_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Size(r.Params))
		return nil
	}
	return &MoqHash_Size_anyParams{Recorder: r}
}

func (r *MoqHash_Size_fnRecorder) Seq() *MoqHash_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Size(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_Size_fnRecorder) NoSeq() *MoqHash_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Size(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_Size_fnRecorder) ReturnResults(result1 int) *MoqHash_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqHash_Size_doFn
		DoReturnFn MoqHash_Size_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_Size_fnRecorder) AndDo(fn MoqHash_Size_doFn) *MoqHash_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_Size_fnRecorder) DoReturnResults(fn MoqHash_Size_doReturnFn) *MoqHash_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqHash_Size_doFn
		DoReturnFn MoqHash_Size_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_Size_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_Size_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Size {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_Size_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_Size_paramsKey]*MoqHash_Size_results{},
		}
		r.Moq.ResultsByParams_Size = append(r.Moq.ResultsByParams_Size, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Size) {
			copy(r.Moq.ResultsByParams_Size[insertAt+1:], r.Moq.ResultsByParams_Size[insertAt:0])
			r.Moq.ResultsByParams_Size[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Size(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_Size_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_Size_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqHash_Size_doFn
				DoReturnFn MoqHash_Size_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash) PrettyParams_Size(params MoqHash_Size_params) string { return fmt.Sprintf("Size()") }

func (m *MoqHash) ParamsKey_Size(params MoqHash_Size_params, anyParams uint64) MoqHash_Size_paramsKey {
	m.Scene.T.Helper()
	return MoqHash_Size_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqHash_recorder) BlockSize() *MoqHash_BlockSize_fnRecorder {
	return &MoqHash_BlockSize_fnRecorder{
		Params:   MoqHash_BlockSize_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_BlockSize_fnRecorder) Any() *MoqHash_BlockSize_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BlockSize(r.Params))
		return nil
	}
	return &MoqHash_BlockSize_anyParams{Recorder: r}
}

func (r *MoqHash_BlockSize_fnRecorder) Seq() *MoqHash_BlockSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BlockSize(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_BlockSize_fnRecorder) NoSeq() *MoqHash_BlockSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BlockSize(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_BlockSize_fnRecorder) ReturnResults(result1 int) *MoqHash_BlockSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqHash_BlockSize_doFn
		DoReturnFn MoqHash_BlockSize_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_BlockSize_fnRecorder) AndDo(fn MoqHash_BlockSize_doFn) *MoqHash_BlockSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_BlockSize_fnRecorder) DoReturnResults(fn MoqHash_BlockSize_doReturnFn) *MoqHash_BlockSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqHash_BlockSize_doFn
		DoReturnFn MoqHash_BlockSize_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_BlockSize_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_BlockSize_resultsByParams
	for n, res := range r.Moq.ResultsByParams_BlockSize {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_BlockSize_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_BlockSize_paramsKey]*MoqHash_BlockSize_results{},
		}
		r.Moq.ResultsByParams_BlockSize = append(r.Moq.ResultsByParams_BlockSize, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_BlockSize) {
			copy(r.Moq.ResultsByParams_BlockSize[insertAt+1:], r.Moq.ResultsByParams_BlockSize[insertAt:0])
			r.Moq.ResultsByParams_BlockSize[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_BlockSize(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_BlockSize_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_BlockSize_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_BlockSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqHash_BlockSize_doFn
				DoReturnFn MoqHash_BlockSize_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash) PrettyParams_BlockSize(params MoqHash_BlockSize_params) string {
	return fmt.Sprintf("BlockSize()")
}

func (m *MoqHash) ParamsKey_BlockSize(params MoqHash_BlockSize_params, anyParams uint64) MoqHash_BlockSize_paramsKey {
	m.Scene.T.Helper()
	return MoqHash_BlockSize_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqHash) Reset() {
	m.ResultsByParams_Write = nil
	m.ResultsByParams_Sum = nil
	m.ResultsByParams_Reset = nil
	m.ResultsByParams_Size = nil
	m.ResultsByParams_BlockSize = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqHash) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Write {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Write(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Sum {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Sum(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Reset {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Reset(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Size {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Size(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_BlockSize {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_BlockSize(results.Params))
			}
		}
	}
}
