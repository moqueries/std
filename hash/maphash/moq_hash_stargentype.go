// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package maphash

import (
	"fmt"
	"hash/maphash"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that maphash.Hash_starGenType is mocked
// completely
var _ Hash_starGenType = (*MoqHash_starGenType_mock)(nil)

// Hash_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Hash_starGenType interface {
	WriteByte(b byte) error
	Write(b []byte) (int, error)
	WriteString(s string) (int, error)
	Seed() maphash.Seed
	SetSeed(seed maphash.Seed)
	Reset()
	Sum64() uint64
	Sum(b []byte) []byte
	Size() int
	BlockSize() int
}

// MoqHash_starGenType holds the state of a moq of the Hash_starGenType type
type MoqHash_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqHash_starGenType_mock

	ResultsByParams_WriteByte   []MoqHash_starGenType_WriteByte_resultsByParams
	ResultsByParams_Write       []MoqHash_starGenType_Write_resultsByParams
	ResultsByParams_WriteString []MoqHash_starGenType_WriteString_resultsByParams
	ResultsByParams_Seed        []MoqHash_starGenType_Seed_resultsByParams
	ResultsByParams_SetSeed     []MoqHash_starGenType_SetSeed_resultsByParams
	ResultsByParams_Reset       []MoqHash_starGenType_Reset_resultsByParams
	ResultsByParams_Sum64       []MoqHash_starGenType_Sum64_resultsByParams
	ResultsByParams_Sum         []MoqHash_starGenType_Sum_resultsByParams
	ResultsByParams_Size        []MoqHash_starGenType_Size_resultsByParams
	ResultsByParams_BlockSize   []MoqHash_starGenType_BlockSize_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			WriteByte struct {
				B moq.ParamIndexing
			}
			Write struct {
				B moq.ParamIndexing
			}
			WriteString struct {
				S moq.ParamIndexing
			}
			Seed    struct{}
			SetSeed struct {
				Seed moq.ParamIndexing
			}
			Reset struct{}
			Sum64 struct{}
			Sum   struct {
				B moq.ParamIndexing
			}
			Size      struct{}
			BlockSize struct{}
		}
	}
}

// MoqHash_starGenType_mock isolates the mock interface of the Hash_starGenType
// type
type MoqHash_starGenType_mock struct {
	Moq *MoqHash_starGenType
}

// MoqHash_starGenType_recorder isolates the recorder interface of the
// Hash_starGenType type
type MoqHash_starGenType_recorder struct {
	Moq *MoqHash_starGenType
}

// MoqHash_starGenType_WriteByte_params holds the params of the
// Hash_starGenType type
type MoqHash_starGenType_WriteByte_params struct{ B byte }

// MoqHash_starGenType_WriteByte_paramsKey holds the map key params of the
// Hash_starGenType type
type MoqHash_starGenType_WriteByte_paramsKey struct {
	Params struct{ B byte }
	Hashes struct{ B hash.Hash }
}

// MoqHash_starGenType_WriteByte_resultsByParams contains the results for a
// given set of parameters for the Hash_starGenType type
type MoqHash_starGenType_WriteByte_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_starGenType_WriteByte_paramsKey]*MoqHash_starGenType_WriteByte_results
}

// MoqHash_starGenType_WriteByte_doFn defines the type of function needed when
// calling AndDo for the Hash_starGenType type
type MoqHash_starGenType_WriteByte_doFn func(b byte)

// MoqHash_starGenType_WriteByte_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Hash_starGenType type
type MoqHash_starGenType_WriteByte_doReturnFn func(b byte) error

// MoqHash_starGenType_WriteByte_results holds the results of the
// Hash_starGenType type
type MoqHash_starGenType_WriteByte_results struct {
	Params  MoqHash_starGenType_WriteByte_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_WriteByte_doFn
		DoReturnFn MoqHash_starGenType_WriteByte_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_starGenType_WriteByte_fnRecorder routes recorded function calls to
// the MoqHash_starGenType moq
type MoqHash_starGenType_WriteByte_fnRecorder struct {
	Params    MoqHash_starGenType_WriteByte_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_starGenType_WriteByte_results
	Moq       *MoqHash_starGenType
}

// MoqHash_starGenType_WriteByte_anyParams isolates the any params functions of
// the Hash_starGenType type
type MoqHash_starGenType_WriteByte_anyParams struct {
	Recorder *MoqHash_starGenType_WriteByte_fnRecorder
}

// MoqHash_starGenType_Write_params holds the params of the Hash_starGenType
// type
type MoqHash_starGenType_Write_params struct{ B []byte }

// MoqHash_starGenType_Write_paramsKey holds the map key params of the
// Hash_starGenType type
type MoqHash_starGenType_Write_paramsKey struct {
	Params struct{}
	Hashes struct{ B hash.Hash }
}

// MoqHash_starGenType_Write_resultsByParams contains the results for a given
// set of parameters for the Hash_starGenType type
type MoqHash_starGenType_Write_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_starGenType_Write_paramsKey]*MoqHash_starGenType_Write_results
}

// MoqHash_starGenType_Write_doFn defines the type of function needed when
// calling AndDo for the Hash_starGenType type
type MoqHash_starGenType_Write_doFn func(b []byte)

// MoqHash_starGenType_Write_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Hash_starGenType type
type MoqHash_starGenType_Write_doReturnFn func(b []byte) (int, error)

// MoqHash_starGenType_Write_results holds the results of the Hash_starGenType
// type
type MoqHash_starGenType_Write_results struct {
	Params  MoqHash_starGenType_Write_params
	Results []struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_Write_doFn
		DoReturnFn MoqHash_starGenType_Write_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_starGenType_Write_fnRecorder routes recorded function calls to the
// MoqHash_starGenType moq
type MoqHash_starGenType_Write_fnRecorder struct {
	Params    MoqHash_starGenType_Write_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_starGenType_Write_results
	Moq       *MoqHash_starGenType
}

// MoqHash_starGenType_Write_anyParams isolates the any params functions of the
// Hash_starGenType type
type MoqHash_starGenType_Write_anyParams struct {
	Recorder *MoqHash_starGenType_Write_fnRecorder
}

// MoqHash_starGenType_WriteString_params holds the params of the
// Hash_starGenType type
type MoqHash_starGenType_WriteString_params struct{ S string }

// MoqHash_starGenType_WriteString_paramsKey holds the map key params of the
// Hash_starGenType type
type MoqHash_starGenType_WriteString_paramsKey struct {
	Params struct{ S string }
	Hashes struct{ S hash.Hash }
}

// MoqHash_starGenType_WriteString_resultsByParams contains the results for a
// given set of parameters for the Hash_starGenType type
type MoqHash_starGenType_WriteString_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_starGenType_WriteString_paramsKey]*MoqHash_starGenType_WriteString_results
}

// MoqHash_starGenType_WriteString_doFn defines the type of function needed
// when calling AndDo for the Hash_starGenType type
type MoqHash_starGenType_WriteString_doFn func(s string)

// MoqHash_starGenType_WriteString_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Hash_starGenType type
type MoqHash_starGenType_WriteString_doReturnFn func(s string) (int, error)

// MoqHash_starGenType_WriteString_results holds the results of the
// Hash_starGenType type
type MoqHash_starGenType_WriteString_results struct {
	Params  MoqHash_starGenType_WriteString_params
	Results []struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_WriteString_doFn
		DoReturnFn MoqHash_starGenType_WriteString_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_starGenType_WriteString_fnRecorder routes recorded function calls to
// the MoqHash_starGenType moq
type MoqHash_starGenType_WriteString_fnRecorder struct {
	Params    MoqHash_starGenType_WriteString_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_starGenType_WriteString_results
	Moq       *MoqHash_starGenType
}

// MoqHash_starGenType_WriteString_anyParams isolates the any params functions
// of the Hash_starGenType type
type MoqHash_starGenType_WriteString_anyParams struct {
	Recorder *MoqHash_starGenType_WriteString_fnRecorder
}

// MoqHash_starGenType_Seed_params holds the params of the Hash_starGenType
// type
type MoqHash_starGenType_Seed_params struct{}

// MoqHash_starGenType_Seed_paramsKey holds the map key params of the
// Hash_starGenType type
type MoqHash_starGenType_Seed_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqHash_starGenType_Seed_resultsByParams contains the results for a given
// set of parameters for the Hash_starGenType type
type MoqHash_starGenType_Seed_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_starGenType_Seed_paramsKey]*MoqHash_starGenType_Seed_results
}

// MoqHash_starGenType_Seed_doFn defines the type of function needed when
// calling AndDo for the Hash_starGenType type
type MoqHash_starGenType_Seed_doFn func()

// MoqHash_starGenType_Seed_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Hash_starGenType type
type MoqHash_starGenType_Seed_doReturnFn func() maphash.Seed

// MoqHash_starGenType_Seed_results holds the results of the Hash_starGenType
// type
type MoqHash_starGenType_Seed_results struct {
	Params  MoqHash_starGenType_Seed_params
	Results []struct {
		Values *struct {
			Result1 maphash.Seed
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_Seed_doFn
		DoReturnFn MoqHash_starGenType_Seed_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_starGenType_Seed_fnRecorder routes recorded function calls to the
// MoqHash_starGenType moq
type MoqHash_starGenType_Seed_fnRecorder struct {
	Params    MoqHash_starGenType_Seed_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_starGenType_Seed_results
	Moq       *MoqHash_starGenType
}

// MoqHash_starGenType_Seed_anyParams isolates the any params functions of the
// Hash_starGenType type
type MoqHash_starGenType_Seed_anyParams struct {
	Recorder *MoqHash_starGenType_Seed_fnRecorder
}

// MoqHash_starGenType_SetSeed_params holds the params of the Hash_starGenType
// type
type MoqHash_starGenType_SetSeed_params struct{ Seed maphash.Seed }

// MoqHash_starGenType_SetSeed_paramsKey holds the map key params of the
// Hash_starGenType type
type MoqHash_starGenType_SetSeed_paramsKey struct {
	Params struct{ Seed maphash.Seed }
	Hashes struct{ Seed hash.Hash }
}

// MoqHash_starGenType_SetSeed_resultsByParams contains the results for a given
// set of parameters for the Hash_starGenType type
type MoqHash_starGenType_SetSeed_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_starGenType_SetSeed_paramsKey]*MoqHash_starGenType_SetSeed_results
}

// MoqHash_starGenType_SetSeed_doFn defines the type of function needed when
// calling AndDo for the Hash_starGenType type
type MoqHash_starGenType_SetSeed_doFn func(seed maphash.Seed)

// MoqHash_starGenType_SetSeed_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Hash_starGenType type
type MoqHash_starGenType_SetSeed_doReturnFn func(seed maphash.Seed)

// MoqHash_starGenType_SetSeed_results holds the results of the
// Hash_starGenType type
type MoqHash_starGenType_SetSeed_results struct {
	Params  MoqHash_starGenType_SetSeed_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqHash_starGenType_SetSeed_doFn
		DoReturnFn MoqHash_starGenType_SetSeed_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_starGenType_SetSeed_fnRecorder routes recorded function calls to the
// MoqHash_starGenType moq
type MoqHash_starGenType_SetSeed_fnRecorder struct {
	Params    MoqHash_starGenType_SetSeed_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_starGenType_SetSeed_results
	Moq       *MoqHash_starGenType
}

// MoqHash_starGenType_SetSeed_anyParams isolates the any params functions of
// the Hash_starGenType type
type MoqHash_starGenType_SetSeed_anyParams struct {
	Recorder *MoqHash_starGenType_SetSeed_fnRecorder
}

// MoqHash_starGenType_Reset_params holds the params of the Hash_starGenType
// type
type MoqHash_starGenType_Reset_params struct{}

// MoqHash_starGenType_Reset_paramsKey holds the map key params of the
// Hash_starGenType type
type MoqHash_starGenType_Reset_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqHash_starGenType_Reset_resultsByParams contains the results for a given
// set of parameters for the Hash_starGenType type
type MoqHash_starGenType_Reset_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_starGenType_Reset_paramsKey]*MoqHash_starGenType_Reset_results
}

// MoqHash_starGenType_Reset_doFn defines the type of function needed when
// calling AndDo for the Hash_starGenType type
type MoqHash_starGenType_Reset_doFn func()

// MoqHash_starGenType_Reset_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Hash_starGenType type
type MoqHash_starGenType_Reset_doReturnFn func()

// MoqHash_starGenType_Reset_results holds the results of the Hash_starGenType
// type
type MoqHash_starGenType_Reset_results struct {
	Params  MoqHash_starGenType_Reset_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqHash_starGenType_Reset_doFn
		DoReturnFn MoqHash_starGenType_Reset_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_starGenType_Reset_fnRecorder routes recorded function calls to the
// MoqHash_starGenType moq
type MoqHash_starGenType_Reset_fnRecorder struct {
	Params    MoqHash_starGenType_Reset_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_starGenType_Reset_results
	Moq       *MoqHash_starGenType
}

// MoqHash_starGenType_Reset_anyParams isolates the any params functions of the
// Hash_starGenType type
type MoqHash_starGenType_Reset_anyParams struct {
	Recorder *MoqHash_starGenType_Reset_fnRecorder
}

// MoqHash_starGenType_Sum64_params holds the params of the Hash_starGenType
// type
type MoqHash_starGenType_Sum64_params struct{}

// MoqHash_starGenType_Sum64_paramsKey holds the map key params of the
// Hash_starGenType type
type MoqHash_starGenType_Sum64_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqHash_starGenType_Sum64_resultsByParams contains the results for a given
// set of parameters for the Hash_starGenType type
type MoqHash_starGenType_Sum64_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_starGenType_Sum64_paramsKey]*MoqHash_starGenType_Sum64_results
}

// MoqHash_starGenType_Sum64_doFn defines the type of function needed when
// calling AndDo for the Hash_starGenType type
type MoqHash_starGenType_Sum64_doFn func()

// MoqHash_starGenType_Sum64_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Hash_starGenType type
type MoqHash_starGenType_Sum64_doReturnFn func() uint64

// MoqHash_starGenType_Sum64_results holds the results of the Hash_starGenType
// type
type MoqHash_starGenType_Sum64_results struct {
	Params  MoqHash_starGenType_Sum64_params
	Results []struct {
		Values *struct {
			Result1 uint64
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_Sum64_doFn
		DoReturnFn MoqHash_starGenType_Sum64_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_starGenType_Sum64_fnRecorder routes recorded function calls to the
// MoqHash_starGenType moq
type MoqHash_starGenType_Sum64_fnRecorder struct {
	Params    MoqHash_starGenType_Sum64_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_starGenType_Sum64_results
	Moq       *MoqHash_starGenType
}

// MoqHash_starGenType_Sum64_anyParams isolates the any params functions of the
// Hash_starGenType type
type MoqHash_starGenType_Sum64_anyParams struct {
	Recorder *MoqHash_starGenType_Sum64_fnRecorder
}

// MoqHash_starGenType_Sum_params holds the params of the Hash_starGenType type
type MoqHash_starGenType_Sum_params struct{ B []byte }

// MoqHash_starGenType_Sum_paramsKey holds the map key params of the
// Hash_starGenType type
type MoqHash_starGenType_Sum_paramsKey struct {
	Params struct{}
	Hashes struct{ B hash.Hash }
}

// MoqHash_starGenType_Sum_resultsByParams contains the results for a given set
// of parameters for the Hash_starGenType type
type MoqHash_starGenType_Sum_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_starGenType_Sum_paramsKey]*MoqHash_starGenType_Sum_results
}

// MoqHash_starGenType_Sum_doFn defines the type of function needed when
// calling AndDo for the Hash_starGenType type
type MoqHash_starGenType_Sum_doFn func(b []byte)

// MoqHash_starGenType_Sum_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Hash_starGenType type
type MoqHash_starGenType_Sum_doReturnFn func(b []byte) []byte

// MoqHash_starGenType_Sum_results holds the results of the Hash_starGenType
// type
type MoqHash_starGenType_Sum_results struct {
	Params  MoqHash_starGenType_Sum_params
	Results []struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_Sum_doFn
		DoReturnFn MoqHash_starGenType_Sum_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_starGenType_Sum_fnRecorder routes recorded function calls to the
// MoqHash_starGenType moq
type MoqHash_starGenType_Sum_fnRecorder struct {
	Params    MoqHash_starGenType_Sum_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_starGenType_Sum_results
	Moq       *MoqHash_starGenType
}

// MoqHash_starGenType_Sum_anyParams isolates the any params functions of the
// Hash_starGenType type
type MoqHash_starGenType_Sum_anyParams struct {
	Recorder *MoqHash_starGenType_Sum_fnRecorder
}

// MoqHash_starGenType_Size_params holds the params of the Hash_starGenType
// type
type MoqHash_starGenType_Size_params struct{}

// MoqHash_starGenType_Size_paramsKey holds the map key params of the
// Hash_starGenType type
type MoqHash_starGenType_Size_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqHash_starGenType_Size_resultsByParams contains the results for a given
// set of parameters for the Hash_starGenType type
type MoqHash_starGenType_Size_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_starGenType_Size_paramsKey]*MoqHash_starGenType_Size_results
}

// MoqHash_starGenType_Size_doFn defines the type of function needed when
// calling AndDo for the Hash_starGenType type
type MoqHash_starGenType_Size_doFn func()

// MoqHash_starGenType_Size_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Hash_starGenType type
type MoqHash_starGenType_Size_doReturnFn func() int

// MoqHash_starGenType_Size_results holds the results of the Hash_starGenType
// type
type MoqHash_starGenType_Size_results struct {
	Params  MoqHash_starGenType_Size_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_Size_doFn
		DoReturnFn MoqHash_starGenType_Size_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_starGenType_Size_fnRecorder routes recorded function calls to the
// MoqHash_starGenType moq
type MoqHash_starGenType_Size_fnRecorder struct {
	Params    MoqHash_starGenType_Size_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_starGenType_Size_results
	Moq       *MoqHash_starGenType
}

// MoqHash_starGenType_Size_anyParams isolates the any params functions of the
// Hash_starGenType type
type MoqHash_starGenType_Size_anyParams struct {
	Recorder *MoqHash_starGenType_Size_fnRecorder
}

// MoqHash_starGenType_BlockSize_params holds the params of the
// Hash_starGenType type
type MoqHash_starGenType_BlockSize_params struct{}

// MoqHash_starGenType_BlockSize_paramsKey holds the map key params of the
// Hash_starGenType type
type MoqHash_starGenType_BlockSize_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqHash_starGenType_BlockSize_resultsByParams contains the results for a
// given set of parameters for the Hash_starGenType type
type MoqHash_starGenType_BlockSize_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_starGenType_BlockSize_paramsKey]*MoqHash_starGenType_BlockSize_results
}

// MoqHash_starGenType_BlockSize_doFn defines the type of function needed when
// calling AndDo for the Hash_starGenType type
type MoqHash_starGenType_BlockSize_doFn func()

// MoqHash_starGenType_BlockSize_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Hash_starGenType type
type MoqHash_starGenType_BlockSize_doReturnFn func() int

// MoqHash_starGenType_BlockSize_results holds the results of the
// Hash_starGenType type
type MoqHash_starGenType_BlockSize_results struct {
	Params  MoqHash_starGenType_BlockSize_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_BlockSize_doFn
		DoReturnFn MoqHash_starGenType_BlockSize_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_starGenType_BlockSize_fnRecorder routes recorded function calls to
// the MoqHash_starGenType moq
type MoqHash_starGenType_BlockSize_fnRecorder struct {
	Params    MoqHash_starGenType_BlockSize_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_starGenType_BlockSize_results
	Moq       *MoqHash_starGenType
}

// MoqHash_starGenType_BlockSize_anyParams isolates the any params functions of
// the Hash_starGenType type
type MoqHash_starGenType_BlockSize_anyParams struct {
	Recorder *MoqHash_starGenType_BlockSize_fnRecorder
}

// NewMoqHash_starGenType creates a new moq of the Hash_starGenType type
func NewMoqHash_starGenType(scene *moq.Scene, config *moq.Config) *MoqHash_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqHash_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqHash_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				WriteByte struct {
					B moq.ParamIndexing
				}
				Write struct {
					B moq.ParamIndexing
				}
				WriteString struct {
					S moq.ParamIndexing
				}
				Seed    struct{}
				SetSeed struct {
					Seed moq.ParamIndexing
				}
				Reset struct{}
				Sum64 struct{}
				Sum   struct {
					B moq.ParamIndexing
				}
				Size      struct{}
				BlockSize struct{}
			}
		}{ParameterIndexing: struct {
			WriteByte struct {
				B moq.ParamIndexing
			}
			Write struct {
				B moq.ParamIndexing
			}
			WriteString struct {
				S moq.ParamIndexing
			}
			Seed    struct{}
			SetSeed struct {
				Seed moq.ParamIndexing
			}
			Reset struct{}
			Sum64 struct{}
			Sum   struct {
				B moq.ParamIndexing
			}
			Size      struct{}
			BlockSize struct{}
		}{
			WriteByte: struct {
				B moq.ParamIndexing
			}{
				B: moq.ParamIndexByValue,
			},
			Write: struct {
				B moq.ParamIndexing
			}{
				B: moq.ParamIndexByHash,
			},
			WriteString: struct {
				S moq.ParamIndexing
			}{
				S: moq.ParamIndexByValue,
			},
			Seed: struct{}{},
			SetSeed: struct {
				Seed moq.ParamIndexing
			}{
				Seed: moq.ParamIndexByValue,
			},
			Reset: struct{}{},
			Sum64: struct{}{},
			Sum: struct {
				B moq.ParamIndexing
			}{
				B: moq.ParamIndexByHash,
			},
			Size:      struct{}{},
			BlockSize: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Hash_starGenType type
func (m *MoqHash_starGenType) Mock() *MoqHash_starGenType_mock { return m.Moq }

func (m *MoqHash_starGenType_mock) WriteByte(b byte) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqHash_starGenType_WriteByte_params{
		B: b,
	}
	var results *MoqHash_starGenType_WriteByte_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteByte {
		paramsKey := m.Moq.ParamsKey_WriteByte(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteByte(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteByte(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteByte(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(b)
	}
	return
}

func (m *MoqHash_starGenType_mock) Write(b []byte) (result1 int, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqHash_starGenType_Write_params{
		B: b,
	}
	var results *MoqHash_starGenType_Write_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Write {
		paramsKey := m.Moq.ParamsKey_Write(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Write(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Write(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Write(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(b)
	}
	return
}

func (m *MoqHash_starGenType_mock) WriteString(s string) (result1 int, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqHash_starGenType_WriteString_params{
		S: s,
	}
	var results *MoqHash_starGenType_WriteString_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteString {
		paramsKey := m.Moq.ParamsKey_WriteString(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteString(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteString(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteString(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(s)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(s)
	}
	return
}

func (m *MoqHash_starGenType_mock) Seed() (result1 maphash.Seed) {
	m.Moq.Scene.T.Helper()
	params := MoqHash_starGenType_Seed_params{}
	var results *MoqHash_starGenType_Seed_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Seed {
		paramsKey := m.Moq.ParamsKey_Seed(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Seed(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Seed(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Seed(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqHash_starGenType_mock) SetSeed(seed maphash.Seed) {
	m.Moq.Scene.T.Helper()
	params := MoqHash_starGenType_SetSeed_params{
		Seed: seed,
	}
	var results *MoqHash_starGenType_SetSeed_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetSeed {
		paramsKey := m.Moq.ParamsKey_SetSeed(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetSeed(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetSeed(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetSeed(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(seed)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(seed)
	}
	return
}

func (m *MoqHash_starGenType_mock) Reset() {
	m.Moq.Scene.T.Helper()
	params := MoqHash_starGenType_Reset_params{}
	var results *MoqHash_starGenType_Reset_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Reset {
		paramsKey := m.Moq.ParamsKey_Reset(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Reset(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Reset(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Reset(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqHash_starGenType_mock) Sum64() (result1 uint64) {
	m.Moq.Scene.T.Helper()
	params := MoqHash_starGenType_Sum64_params{}
	var results *MoqHash_starGenType_Sum64_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Sum64 {
		paramsKey := m.Moq.ParamsKey_Sum64(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Sum64(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Sum64(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Sum64(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqHash_starGenType_mock) Sum(b []byte) (result1 []byte) {
	m.Moq.Scene.T.Helper()
	params := MoqHash_starGenType_Sum_params{
		B: b,
	}
	var results *MoqHash_starGenType_Sum_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Sum {
		paramsKey := m.Moq.ParamsKey_Sum(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Sum(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Sum(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Sum(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(b)
	}
	return
}

func (m *MoqHash_starGenType_mock) Size() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqHash_starGenType_Size_params{}
	var results *MoqHash_starGenType_Size_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Size {
		paramsKey := m.Moq.ParamsKey_Size(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Size(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Size(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Size(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqHash_starGenType_mock) BlockSize() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqHash_starGenType_BlockSize_params{}
	var results *MoqHash_starGenType_BlockSize_results
	for _, resultsByParams := range m.Moq.ResultsByParams_BlockSize {
		paramsKey := m.Moq.ParamsKey_BlockSize(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_BlockSize(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_BlockSize(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_BlockSize(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Hash_starGenType type
func (m *MoqHash_starGenType) OnCall() *MoqHash_starGenType_recorder {
	return &MoqHash_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqHash_starGenType_recorder) WriteByte(b byte) *MoqHash_starGenType_WriteByte_fnRecorder {
	return &MoqHash_starGenType_WriteByte_fnRecorder{
		Params: MoqHash_starGenType_WriteByte_params{
			B: b,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_starGenType_WriteByte_fnRecorder) Any() *MoqHash_starGenType_WriteByte_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteByte(r.Params))
		return nil
	}
	return &MoqHash_starGenType_WriteByte_anyParams{Recorder: r}
}

func (a *MoqHash_starGenType_WriteByte_anyParams) B() *MoqHash_starGenType_WriteByte_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqHash_starGenType_WriteByte_fnRecorder) Seq() *MoqHash_starGenType_WriteByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteByte(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_starGenType_WriteByte_fnRecorder) NoSeq() *MoqHash_starGenType_WriteByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteByte(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_starGenType_WriteByte_fnRecorder) ReturnResults(result1 error) *MoqHash_starGenType_WriteByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_WriteByte_doFn
		DoReturnFn MoqHash_starGenType_WriteByte_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_starGenType_WriteByte_fnRecorder) AndDo(fn MoqHash_starGenType_WriteByte_doFn) *MoqHash_starGenType_WriteByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_starGenType_WriteByte_fnRecorder) DoReturnResults(fn MoqHash_starGenType_WriteByte_doReturnFn) *MoqHash_starGenType_WriteByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_WriteByte_doFn
		DoReturnFn MoqHash_starGenType_WriteByte_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_starGenType_WriteByte_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_starGenType_WriteByte_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteByte {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_starGenType_WriteByte_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_starGenType_WriteByte_paramsKey]*MoqHash_starGenType_WriteByte_results{},
		}
		r.Moq.ResultsByParams_WriteByte = append(r.Moq.ResultsByParams_WriteByte, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteByte) {
			copy(r.Moq.ResultsByParams_WriteByte[insertAt+1:], r.Moq.ResultsByParams_WriteByte[insertAt:0])
			r.Moq.ResultsByParams_WriteByte[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteByte(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_starGenType_WriteByte_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_starGenType_WriteByte_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_starGenType_WriteByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqHash_starGenType_WriteByte_doFn
				DoReturnFn MoqHash_starGenType_WriteByte_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash_starGenType) PrettyParams_WriteByte(params MoqHash_starGenType_WriteByte_params) string {
	return fmt.Sprintf("WriteByte(%#v)", params.B)
}

func (m *MoqHash_starGenType) ParamsKey_WriteByte(params MoqHash_starGenType_WriteByte_params, anyParams uint64) MoqHash_starGenType_WriteByte_paramsKey {
	m.Scene.T.Helper()
	var bUsed byte
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteByte.B == moq.ParamIndexByValue {
			bUsed = params.B
		} else {
			bUsedHash = hash.DeepHash(params.B)
		}
	}
	return MoqHash_starGenType_WriteByte_paramsKey{
		Params: struct{ B byte }{
			B: bUsed,
		},
		Hashes: struct{ B hash.Hash }{
			B: bUsedHash,
		},
	}
}

func (m *MoqHash_starGenType_recorder) Write(b []byte) *MoqHash_starGenType_Write_fnRecorder {
	return &MoqHash_starGenType_Write_fnRecorder{
		Params: MoqHash_starGenType_Write_params{
			B: b,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_starGenType_Write_fnRecorder) Any() *MoqHash_starGenType_Write_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	return &MoqHash_starGenType_Write_anyParams{Recorder: r}
}

func (a *MoqHash_starGenType_Write_anyParams) B() *MoqHash_starGenType_Write_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqHash_starGenType_Write_fnRecorder) Seq() *MoqHash_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_starGenType_Write_fnRecorder) NoSeq() *MoqHash_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_starGenType_Write_fnRecorder) ReturnResults(result1 int, result2 error) *MoqHash_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_Write_doFn
		DoReturnFn MoqHash_starGenType_Write_doReturnFn
	}{
		Values: &struct {
			Result1 int
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_starGenType_Write_fnRecorder) AndDo(fn MoqHash_starGenType_Write_doFn) *MoqHash_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_starGenType_Write_fnRecorder) DoReturnResults(fn MoqHash_starGenType_Write_doReturnFn) *MoqHash_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_Write_doFn
		DoReturnFn MoqHash_starGenType_Write_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_starGenType_Write_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_starGenType_Write_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Write {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_starGenType_Write_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_starGenType_Write_paramsKey]*MoqHash_starGenType_Write_results{},
		}
		r.Moq.ResultsByParams_Write = append(r.Moq.ResultsByParams_Write, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Write) {
			copy(r.Moq.ResultsByParams_Write[insertAt+1:], r.Moq.ResultsByParams_Write[insertAt:0])
			r.Moq.ResultsByParams_Write[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Write(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_starGenType_Write_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_starGenType_Write_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqHash_starGenType_Write_doFn
				DoReturnFn MoqHash_starGenType_Write_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash_starGenType) PrettyParams_Write(params MoqHash_starGenType_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.B)
}

func (m *MoqHash_starGenType) ParamsKey_Write(params MoqHash_starGenType_Write_params, anyParams uint64) MoqHash_starGenType_Write_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Write.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the Write function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	return MoqHash_starGenType_Write_paramsKey{
		Params: struct{}{},
		Hashes: struct{ B hash.Hash }{
			B: bUsedHash,
		},
	}
}

func (m *MoqHash_starGenType_recorder) WriteString(s string) *MoqHash_starGenType_WriteString_fnRecorder {
	return &MoqHash_starGenType_WriteString_fnRecorder{
		Params: MoqHash_starGenType_WriteString_params{
			S: s,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_starGenType_WriteString_fnRecorder) Any() *MoqHash_starGenType_WriteString_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteString(r.Params))
		return nil
	}
	return &MoqHash_starGenType_WriteString_anyParams{Recorder: r}
}

func (a *MoqHash_starGenType_WriteString_anyParams) S() *MoqHash_starGenType_WriteString_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqHash_starGenType_WriteString_fnRecorder) Seq() *MoqHash_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteString(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_starGenType_WriteString_fnRecorder) NoSeq() *MoqHash_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteString(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_starGenType_WriteString_fnRecorder) ReturnResults(result1 int, result2 error) *MoqHash_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_WriteString_doFn
		DoReturnFn MoqHash_starGenType_WriteString_doReturnFn
	}{
		Values: &struct {
			Result1 int
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_starGenType_WriteString_fnRecorder) AndDo(fn MoqHash_starGenType_WriteString_doFn) *MoqHash_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_starGenType_WriteString_fnRecorder) DoReturnResults(fn MoqHash_starGenType_WriteString_doReturnFn) *MoqHash_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_WriteString_doFn
		DoReturnFn MoqHash_starGenType_WriteString_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_starGenType_WriteString_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_starGenType_WriteString_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteString {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_starGenType_WriteString_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_starGenType_WriteString_paramsKey]*MoqHash_starGenType_WriteString_results{},
		}
		r.Moq.ResultsByParams_WriteString = append(r.Moq.ResultsByParams_WriteString, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteString) {
			copy(r.Moq.ResultsByParams_WriteString[insertAt+1:], r.Moq.ResultsByParams_WriteString[insertAt:0])
			r.Moq.ResultsByParams_WriteString[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteString(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_starGenType_WriteString_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_starGenType_WriteString_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqHash_starGenType_WriteString_doFn
				DoReturnFn MoqHash_starGenType_WriteString_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash_starGenType) PrettyParams_WriteString(params MoqHash_starGenType_WriteString_params) string {
	return fmt.Sprintf("WriteString(%#v)", params.S)
}

func (m *MoqHash_starGenType) ParamsKey_WriteString(params MoqHash_starGenType_WriteString_params, anyParams uint64) MoqHash_starGenType_WriteString_paramsKey {
	m.Scene.T.Helper()
	var sUsed string
	var sUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteString.S == moq.ParamIndexByValue {
			sUsed = params.S
		} else {
			sUsedHash = hash.DeepHash(params.S)
		}
	}
	return MoqHash_starGenType_WriteString_paramsKey{
		Params: struct{ S string }{
			S: sUsed,
		},
		Hashes: struct{ S hash.Hash }{
			S: sUsedHash,
		},
	}
}

func (m *MoqHash_starGenType_recorder) Seed() *MoqHash_starGenType_Seed_fnRecorder {
	return &MoqHash_starGenType_Seed_fnRecorder{
		Params:   MoqHash_starGenType_Seed_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_starGenType_Seed_fnRecorder) Any() *MoqHash_starGenType_Seed_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seed(r.Params))
		return nil
	}
	return &MoqHash_starGenType_Seed_anyParams{Recorder: r}
}

func (r *MoqHash_starGenType_Seed_fnRecorder) Seq() *MoqHash_starGenType_Seed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seed(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_starGenType_Seed_fnRecorder) NoSeq() *MoqHash_starGenType_Seed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seed(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_starGenType_Seed_fnRecorder) ReturnResults(result1 maphash.Seed) *MoqHash_starGenType_Seed_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 maphash.Seed
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_Seed_doFn
		DoReturnFn MoqHash_starGenType_Seed_doReturnFn
	}{
		Values: &struct {
			Result1 maphash.Seed
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_starGenType_Seed_fnRecorder) AndDo(fn MoqHash_starGenType_Seed_doFn) *MoqHash_starGenType_Seed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_starGenType_Seed_fnRecorder) DoReturnResults(fn MoqHash_starGenType_Seed_doReturnFn) *MoqHash_starGenType_Seed_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 maphash.Seed
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_Seed_doFn
		DoReturnFn MoqHash_starGenType_Seed_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_starGenType_Seed_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_starGenType_Seed_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Seed {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_starGenType_Seed_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_starGenType_Seed_paramsKey]*MoqHash_starGenType_Seed_results{},
		}
		r.Moq.ResultsByParams_Seed = append(r.Moq.ResultsByParams_Seed, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Seed) {
			copy(r.Moq.ResultsByParams_Seed[insertAt+1:], r.Moq.ResultsByParams_Seed[insertAt:0])
			r.Moq.ResultsByParams_Seed[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Seed(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_starGenType_Seed_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_starGenType_Seed_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_starGenType_Seed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 maphash.Seed
				}
				Sequence   uint32
				DoFn       MoqHash_starGenType_Seed_doFn
				DoReturnFn MoqHash_starGenType_Seed_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash_starGenType) PrettyParams_Seed(params MoqHash_starGenType_Seed_params) string {
	return fmt.Sprintf("Seed()")
}

func (m *MoqHash_starGenType) ParamsKey_Seed(params MoqHash_starGenType_Seed_params, anyParams uint64) MoqHash_starGenType_Seed_paramsKey {
	m.Scene.T.Helper()
	return MoqHash_starGenType_Seed_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqHash_starGenType_recorder) SetSeed(seed maphash.Seed) *MoqHash_starGenType_SetSeed_fnRecorder {
	return &MoqHash_starGenType_SetSeed_fnRecorder{
		Params: MoqHash_starGenType_SetSeed_params{
			Seed: seed,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_starGenType_SetSeed_fnRecorder) Any() *MoqHash_starGenType_SetSeed_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetSeed(r.Params))
		return nil
	}
	return &MoqHash_starGenType_SetSeed_anyParams{Recorder: r}
}

func (a *MoqHash_starGenType_SetSeed_anyParams) Seed() *MoqHash_starGenType_SetSeed_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqHash_starGenType_SetSeed_fnRecorder) Seq() *MoqHash_starGenType_SetSeed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetSeed(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_starGenType_SetSeed_fnRecorder) NoSeq() *MoqHash_starGenType_SetSeed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetSeed(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_starGenType_SetSeed_fnRecorder) ReturnResults() *MoqHash_starGenType_SetSeed_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqHash_starGenType_SetSeed_doFn
		DoReturnFn MoqHash_starGenType_SetSeed_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_starGenType_SetSeed_fnRecorder) AndDo(fn MoqHash_starGenType_SetSeed_doFn) *MoqHash_starGenType_SetSeed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_starGenType_SetSeed_fnRecorder) DoReturnResults(fn MoqHash_starGenType_SetSeed_doReturnFn) *MoqHash_starGenType_SetSeed_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqHash_starGenType_SetSeed_doFn
		DoReturnFn MoqHash_starGenType_SetSeed_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_starGenType_SetSeed_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_starGenType_SetSeed_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetSeed {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_starGenType_SetSeed_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_starGenType_SetSeed_paramsKey]*MoqHash_starGenType_SetSeed_results{},
		}
		r.Moq.ResultsByParams_SetSeed = append(r.Moq.ResultsByParams_SetSeed, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetSeed) {
			copy(r.Moq.ResultsByParams_SetSeed[insertAt+1:], r.Moq.ResultsByParams_SetSeed[insertAt:0])
			r.Moq.ResultsByParams_SetSeed[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetSeed(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_starGenType_SetSeed_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_starGenType_SetSeed_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_starGenType_SetSeed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqHash_starGenType_SetSeed_doFn
				DoReturnFn MoqHash_starGenType_SetSeed_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash_starGenType) PrettyParams_SetSeed(params MoqHash_starGenType_SetSeed_params) string {
	return fmt.Sprintf("SetSeed(%#v)", params.Seed)
}

func (m *MoqHash_starGenType) ParamsKey_SetSeed(params MoqHash_starGenType_SetSeed_params, anyParams uint64) MoqHash_starGenType_SetSeed_paramsKey {
	m.Scene.T.Helper()
	var seedUsed maphash.Seed
	var seedUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetSeed.Seed == moq.ParamIndexByValue {
			seedUsed = params.Seed
		} else {
			seedUsedHash = hash.DeepHash(params.Seed)
		}
	}
	return MoqHash_starGenType_SetSeed_paramsKey{
		Params: struct{ Seed maphash.Seed }{
			Seed: seedUsed,
		},
		Hashes: struct{ Seed hash.Hash }{
			Seed: seedUsedHash,
		},
	}
}

func (m *MoqHash_starGenType_recorder) Reset() *MoqHash_starGenType_Reset_fnRecorder {
	return &MoqHash_starGenType_Reset_fnRecorder{
		Params:   MoqHash_starGenType_Reset_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_starGenType_Reset_fnRecorder) Any() *MoqHash_starGenType_Reset_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	return &MoqHash_starGenType_Reset_anyParams{Recorder: r}
}

func (r *MoqHash_starGenType_Reset_fnRecorder) Seq() *MoqHash_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_starGenType_Reset_fnRecorder) NoSeq() *MoqHash_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_starGenType_Reset_fnRecorder) ReturnResults() *MoqHash_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqHash_starGenType_Reset_doFn
		DoReturnFn MoqHash_starGenType_Reset_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_starGenType_Reset_fnRecorder) AndDo(fn MoqHash_starGenType_Reset_doFn) *MoqHash_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_starGenType_Reset_fnRecorder) DoReturnResults(fn MoqHash_starGenType_Reset_doReturnFn) *MoqHash_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqHash_starGenType_Reset_doFn
		DoReturnFn MoqHash_starGenType_Reset_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_starGenType_Reset_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_starGenType_Reset_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Reset {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_starGenType_Reset_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_starGenType_Reset_paramsKey]*MoqHash_starGenType_Reset_results{},
		}
		r.Moq.ResultsByParams_Reset = append(r.Moq.ResultsByParams_Reset, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Reset) {
			copy(r.Moq.ResultsByParams_Reset[insertAt+1:], r.Moq.ResultsByParams_Reset[insertAt:0])
			r.Moq.ResultsByParams_Reset[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Reset(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_starGenType_Reset_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_starGenType_Reset_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqHash_starGenType_Reset_doFn
				DoReturnFn MoqHash_starGenType_Reset_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash_starGenType) PrettyParams_Reset(params MoqHash_starGenType_Reset_params) string {
	return fmt.Sprintf("Reset()")
}

func (m *MoqHash_starGenType) ParamsKey_Reset(params MoqHash_starGenType_Reset_params, anyParams uint64) MoqHash_starGenType_Reset_paramsKey {
	m.Scene.T.Helper()
	return MoqHash_starGenType_Reset_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqHash_starGenType_recorder) Sum64() *MoqHash_starGenType_Sum64_fnRecorder {
	return &MoqHash_starGenType_Sum64_fnRecorder{
		Params:   MoqHash_starGenType_Sum64_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_starGenType_Sum64_fnRecorder) Any() *MoqHash_starGenType_Sum64_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sum64(r.Params))
		return nil
	}
	return &MoqHash_starGenType_Sum64_anyParams{Recorder: r}
}

func (r *MoqHash_starGenType_Sum64_fnRecorder) Seq() *MoqHash_starGenType_Sum64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sum64(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_starGenType_Sum64_fnRecorder) NoSeq() *MoqHash_starGenType_Sum64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sum64(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_starGenType_Sum64_fnRecorder) ReturnResults(result1 uint64) *MoqHash_starGenType_Sum64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint64
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_Sum64_doFn
		DoReturnFn MoqHash_starGenType_Sum64_doReturnFn
	}{
		Values: &struct {
			Result1 uint64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_starGenType_Sum64_fnRecorder) AndDo(fn MoqHash_starGenType_Sum64_doFn) *MoqHash_starGenType_Sum64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_starGenType_Sum64_fnRecorder) DoReturnResults(fn MoqHash_starGenType_Sum64_doReturnFn) *MoqHash_starGenType_Sum64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint64
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_Sum64_doFn
		DoReturnFn MoqHash_starGenType_Sum64_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_starGenType_Sum64_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_starGenType_Sum64_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Sum64 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_starGenType_Sum64_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_starGenType_Sum64_paramsKey]*MoqHash_starGenType_Sum64_results{},
		}
		r.Moq.ResultsByParams_Sum64 = append(r.Moq.ResultsByParams_Sum64, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Sum64) {
			copy(r.Moq.ResultsByParams_Sum64[insertAt+1:], r.Moq.ResultsByParams_Sum64[insertAt:0])
			r.Moq.ResultsByParams_Sum64[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Sum64(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_starGenType_Sum64_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_starGenType_Sum64_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_starGenType_Sum64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 uint64
				}
				Sequence   uint32
				DoFn       MoqHash_starGenType_Sum64_doFn
				DoReturnFn MoqHash_starGenType_Sum64_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash_starGenType) PrettyParams_Sum64(params MoqHash_starGenType_Sum64_params) string {
	return fmt.Sprintf("Sum64()")
}

func (m *MoqHash_starGenType) ParamsKey_Sum64(params MoqHash_starGenType_Sum64_params, anyParams uint64) MoqHash_starGenType_Sum64_paramsKey {
	m.Scene.T.Helper()
	return MoqHash_starGenType_Sum64_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqHash_starGenType_recorder) Sum(b []byte) *MoqHash_starGenType_Sum_fnRecorder {
	return &MoqHash_starGenType_Sum_fnRecorder{
		Params: MoqHash_starGenType_Sum_params{
			B: b,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_starGenType_Sum_fnRecorder) Any() *MoqHash_starGenType_Sum_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sum(r.Params))
		return nil
	}
	return &MoqHash_starGenType_Sum_anyParams{Recorder: r}
}

func (a *MoqHash_starGenType_Sum_anyParams) B() *MoqHash_starGenType_Sum_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqHash_starGenType_Sum_fnRecorder) Seq() *MoqHash_starGenType_Sum_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sum(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_starGenType_Sum_fnRecorder) NoSeq() *MoqHash_starGenType_Sum_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sum(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_starGenType_Sum_fnRecorder) ReturnResults(result1 []byte) *MoqHash_starGenType_Sum_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_Sum_doFn
		DoReturnFn MoqHash_starGenType_Sum_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_starGenType_Sum_fnRecorder) AndDo(fn MoqHash_starGenType_Sum_doFn) *MoqHash_starGenType_Sum_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_starGenType_Sum_fnRecorder) DoReturnResults(fn MoqHash_starGenType_Sum_doReturnFn) *MoqHash_starGenType_Sum_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_Sum_doFn
		DoReturnFn MoqHash_starGenType_Sum_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_starGenType_Sum_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_starGenType_Sum_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Sum {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_starGenType_Sum_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_starGenType_Sum_paramsKey]*MoqHash_starGenType_Sum_results{},
		}
		r.Moq.ResultsByParams_Sum = append(r.Moq.ResultsByParams_Sum, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Sum) {
			copy(r.Moq.ResultsByParams_Sum[insertAt+1:], r.Moq.ResultsByParams_Sum[insertAt:0])
			r.Moq.ResultsByParams_Sum[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Sum(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_starGenType_Sum_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_starGenType_Sum_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_starGenType_Sum_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
				}
				Sequence   uint32
				DoFn       MoqHash_starGenType_Sum_doFn
				DoReturnFn MoqHash_starGenType_Sum_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash_starGenType) PrettyParams_Sum(params MoqHash_starGenType_Sum_params) string {
	return fmt.Sprintf("Sum(%#v)", params.B)
}

func (m *MoqHash_starGenType) ParamsKey_Sum(params MoqHash_starGenType_Sum_params, anyParams uint64) MoqHash_starGenType_Sum_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Sum.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the Sum function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	return MoqHash_starGenType_Sum_paramsKey{
		Params: struct{}{},
		Hashes: struct{ B hash.Hash }{
			B: bUsedHash,
		},
	}
}

func (m *MoqHash_starGenType_recorder) Size() *MoqHash_starGenType_Size_fnRecorder {
	return &MoqHash_starGenType_Size_fnRecorder{
		Params:   MoqHash_starGenType_Size_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_starGenType_Size_fnRecorder) Any() *MoqHash_starGenType_Size_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Size(r.Params))
		return nil
	}
	return &MoqHash_starGenType_Size_anyParams{Recorder: r}
}

func (r *MoqHash_starGenType_Size_fnRecorder) Seq() *MoqHash_starGenType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Size(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_starGenType_Size_fnRecorder) NoSeq() *MoqHash_starGenType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Size(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_starGenType_Size_fnRecorder) ReturnResults(result1 int) *MoqHash_starGenType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_Size_doFn
		DoReturnFn MoqHash_starGenType_Size_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_starGenType_Size_fnRecorder) AndDo(fn MoqHash_starGenType_Size_doFn) *MoqHash_starGenType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_starGenType_Size_fnRecorder) DoReturnResults(fn MoqHash_starGenType_Size_doReturnFn) *MoqHash_starGenType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_Size_doFn
		DoReturnFn MoqHash_starGenType_Size_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_starGenType_Size_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_starGenType_Size_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Size {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_starGenType_Size_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_starGenType_Size_paramsKey]*MoqHash_starGenType_Size_results{},
		}
		r.Moq.ResultsByParams_Size = append(r.Moq.ResultsByParams_Size, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Size) {
			copy(r.Moq.ResultsByParams_Size[insertAt+1:], r.Moq.ResultsByParams_Size[insertAt:0])
			r.Moq.ResultsByParams_Size[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Size(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_starGenType_Size_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_starGenType_Size_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_starGenType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqHash_starGenType_Size_doFn
				DoReturnFn MoqHash_starGenType_Size_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash_starGenType) PrettyParams_Size(params MoqHash_starGenType_Size_params) string {
	return fmt.Sprintf("Size()")
}

func (m *MoqHash_starGenType) ParamsKey_Size(params MoqHash_starGenType_Size_params, anyParams uint64) MoqHash_starGenType_Size_paramsKey {
	m.Scene.T.Helper()
	return MoqHash_starGenType_Size_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqHash_starGenType_recorder) BlockSize() *MoqHash_starGenType_BlockSize_fnRecorder {
	return &MoqHash_starGenType_BlockSize_fnRecorder{
		Params:   MoqHash_starGenType_BlockSize_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_starGenType_BlockSize_fnRecorder) Any() *MoqHash_starGenType_BlockSize_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BlockSize(r.Params))
		return nil
	}
	return &MoqHash_starGenType_BlockSize_anyParams{Recorder: r}
}

func (r *MoqHash_starGenType_BlockSize_fnRecorder) Seq() *MoqHash_starGenType_BlockSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BlockSize(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_starGenType_BlockSize_fnRecorder) NoSeq() *MoqHash_starGenType_BlockSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BlockSize(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_starGenType_BlockSize_fnRecorder) ReturnResults(result1 int) *MoqHash_starGenType_BlockSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_BlockSize_doFn
		DoReturnFn MoqHash_starGenType_BlockSize_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_starGenType_BlockSize_fnRecorder) AndDo(fn MoqHash_starGenType_BlockSize_doFn) *MoqHash_starGenType_BlockSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_starGenType_BlockSize_fnRecorder) DoReturnResults(fn MoqHash_starGenType_BlockSize_doReturnFn) *MoqHash_starGenType_BlockSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqHash_starGenType_BlockSize_doFn
		DoReturnFn MoqHash_starGenType_BlockSize_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_starGenType_BlockSize_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_starGenType_BlockSize_resultsByParams
	for n, res := range r.Moq.ResultsByParams_BlockSize {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_starGenType_BlockSize_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_starGenType_BlockSize_paramsKey]*MoqHash_starGenType_BlockSize_results{},
		}
		r.Moq.ResultsByParams_BlockSize = append(r.Moq.ResultsByParams_BlockSize, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_BlockSize) {
			copy(r.Moq.ResultsByParams_BlockSize[insertAt+1:], r.Moq.ResultsByParams_BlockSize[insertAt:0])
			r.Moq.ResultsByParams_BlockSize[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_BlockSize(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_starGenType_BlockSize_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_starGenType_BlockSize_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_starGenType_BlockSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqHash_starGenType_BlockSize_doFn
				DoReturnFn MoqHash_starGenType_BlockSize_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash_starGenType) PrettyParams_BlockSize(params MoqHash_starGenType_BlockSize_params) string {
	return fmt.Sprintf("BlockSize()")
}

func (m *MoqHash_starGenType) ParamsKey_BlockSize(params MoqHash_starGenType_BlockSize_params, anyParams uint64) MoqHash_starGenType_BlockSize_paramsKey {
	m.Scene.T.Helper()
	return MoqHash_starGenType_BlockSize_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqHash_starGenType) Reset() {
	m.ResultsByParams_WriteByte = nil
	m.ResultsByParams_Write = nil
	m.ResultsByParams_WriteString = nil
	m.ResultsByParams_Seed = nil
	m.ResultsByParams_SetSeed = nil
	m.ResultsByParams_Reset = nil
	m.ResultsByParams_Sum64 = nil
	m.ResultsByParams_Sum = nil
	m.ResultsByParams_Size = nil
	m.ResultsByParams_BlockSize = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqHash_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_WriteByte {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteByte(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Write {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Write(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteString {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteString(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Seed {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Seed(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetSeed {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetSeed(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Reset {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Reset(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Sum64 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Sum64(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Sum {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Sum(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Size {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Size(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_BlockSize {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_BlockSize(results.Params))
			}
		}
	}
}
