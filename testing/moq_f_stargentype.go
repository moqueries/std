// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package testing

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that testing.F_starGenType is mocked
// completely
var _ F_starGenType = (*MoqF_starGenType_mock)(nil)

// F_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type F_starGenType interface {
	Helper()
	Fail()
	Skipped() bool
	Add(args ...any)
	Fuzz(ff any)
}

// MoqF_starGenType holds the state of a moq of the F_starGenType type
type MoqF_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqF_starGenType_mock

	ResultsByParams_Helper  []MoqF_starGenType_Helper_resultsByParams
	ResultsByParams_Fail    []MoqF_starGenType_Fail_resultsByParams
	ResultsByParams_Skipped []MoqF_starGenType_Skipped_resultsByParams
	ResultsByParams_Add     []MoqF_starGenType_Add_resultsByParams
	ResultsByParams_Fuzz    []MoqF_starGenType_Fuzz_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Helper  struct{}
			Fail    struct{}
			Skipped struct{}
			Add     struct {
				Args moq.ParamIndexing
			}
			Fuzz struct {
				Ff moq.ParamIndexing
			}
		}
	}
	// MoqF_starGenType_mock isolates the mock interface of the F_starGenType type
}

type MoqF_starGenType_mock struct {
	Moq *MoqF_starGenType
}

// MoqF_starGenType_recorder isolates the recorder interface of the
// F_starGenType type
type MoqF_starGenType_recorder struct {
	Moq *MoqF_starGenType
}

// MoqF_starGenType_Helper_params holds the params of the F_starGenType type
type MoqF_starGenType_Helper_params struct{}

// MoqF_starGenType_Helper_paramsKey holds the map key params of the
// F_starGenType type
type MoqF_starGenType_Helper_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqF_starGenType_Helper_resultsByParams contains the results for a given set
// of parameters for the F_starGenType type
type MoqF_starGenType_Helper_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqF_starGenType_Helper_paramsKey]*MoqF_starGenType_Helper_results
}

// MoqF_starGenType_Helper_doFn defines the type of function needed when
// calling AndDo for the F_starGenType type
type MoqF_starGenType_Helper_doFn func()

// MoqF_starGenType_Helper_doReturnFn defines the type of function needed when
// calling DoReturnResults for the F_starGenType type
type MoqF_starGenType_Helper_doReturnFn func()

// MoqF_starGenType_Helper_results holds the results of the F_starGenType type
type MoqF_starGenType_Helper_results struct {
	Params  MoqF_starGenType_Helper_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqF_starGenType_Helper_doFn
		DoReturnFn MoqF_starGenType_Helper_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqF_starGenType_Helper_fnRecorder routes recorded function calls to the
// MoqF_starGenType moq
type MoqF_starGenType_Helper_fnRecorder struct {
	Params    MoqF_starGenType_Helper_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqF_starGenType_Helper_results
	Moq       *MoqF_starGenType
}

// MoqF_starGenType_Helper_anyParams isolates the any params functions of the
// F_starGenType type
type MoqF_starGenType_Helper_anyParams struct {
	Recorder *MoqF_starGenType_Helper_fnRecorder
}

// MoqF_starGenType_Fail_params holds the params of the F_starGenType type
type MoqF_starGenType_Fail_params struct{}

// MoqF_starGenType_Fail_paramsKey holds the map key params of the
// F_starGenType type
type MoqF_starGenType_Fail_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqF_starGenType_Fail_resultsByParams contains the results for a given set
// of parameters for the F_starGenType type
type MoqF_starGenType_Fail_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqF_starGenType_Fail_paramsKey]*MoqF_starGenType_Fail_results
}

// MoqF_starGenType_Fail_doFn defines the type of function needed when calling
// AndDo for the F_starGenType type
type MoqF_starGenType_Fail_doFn func()

// MoqF_starGenType_Fail_doReturnFn defines the type of function needed when
// calling DoReturnResults for the F_starGenType type
type MoqF_starGenType_Fail_doReturnFn func()

// MoqF_starGenType_Fail_results holds the results of the F_starGenType type
type MoqF_starGenType_Fail_results struct {
	Params  MoqF_starGenType_Fail_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqF_starGenType_Fail_doFn
		DoReturnFn MoqF_starGenType_Fail_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqF_starGenType_Fail_fnRecorder routes recorded function calls to the
// MoqF_starGenType moq
type MoqF_starGenType_Fail_fnRecorder struct {
	Params    MoqF_starGenType_Fail_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqF_starGenType_Fail_results
	Moq       *MoqF_starGenType
}

// MoqF_starGenType_Fail_anyParams isolates the any params functions of the
// F_starGenType type
type MoqF_starGenType_Fail_anyParams struct {
	Recorder *MoqF_starGenType_Fail_fnRecorder
}

// MoqF_starGenType_Skipped_params holds the params of the F_starGenType type
type MoqF_starGenType_Skipped_params struct{}

// MoqF_starGenType_Skipped_paramsKey holds the map key params of the
// F_starGenType type
type MoqF_starGenType_Skipped_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqF_starGenType_Skipped_resultsByParams contains the results for a given
// set of parameters for the F_starGenType type
type MoqF_starGenType_Skipped_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqF_starGenType_Skipped_paramsKey]*MoqF_starGenType_Skipped_results
}

// MoqF_starGenType_Skipped_doFn defines the type of function needed when
// calling AndDo for the F_starGenType type
type MoqF_starGenType_Skipped_doFn func()

// MoqF_starGenType_Skipped_doReturnFn defines the type of function needed when
// calling DoReturnResults for the F_starGenType type
type MoqF_starGenType_Skipped_doReturnFn func() bool

// MoqF_starGenType_Skipped_results holds the results of the F_starGenType type
type MoqF_starGenType_Skipped_results struct {
	Params  MoqF_starGenType_Skipped_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqF_starGenType_Skipped_doFn
		DoReturnFn MoqF_starGenType_Skipped_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqF_starGenType_Skipped_fnRecorder routes recorded function calls to the
// MoqF_starGenType moq
type MoqF_starGenType_Skipped_fnRecorder struct {
	Params    MoqF_starGenType_Skipped_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqF_starGenType_Skipped_results
	Moq       *MoqF_starGenType
}

// MoqF_starGenType_Skipped_anyParams isolates the any params functions of the
// F_starGenType type
type MoqF_starGenType_Skipped_anyParams struct {
	Recorder *MoqF_starGenType_Skipped_fnRecorder
}

// MoqF_starGenType_Add_params holds the params of the F_starGenType type
type MoqF_starGenType_Add_params struct{ Args []any }

// MoqF_starGenType_Add_paramsKey holds the map key params of the F_starGenType
// type
type MoqF_starGenType_Add_paramsKey struct {
	Params struct{}
	Hashes struct{ Args hash.Hash }
}

// MoqF_starGenType_Add_resultsByParams contains the results for a given set of
// parameters for the F_starGenType type
type MoqF_starGenType_Add_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqF_starGenType_Add_paramsKey]*MoqF_starGenType_Add_results
}

// MoqF_starGenType_Add_doFn defines the type of function needed when calling
// AndDo for the F_starGenType type
type MoqF_starGenType_Add_doFn func(args ...any)

// MoqF_starGenType_Add_doReturnFn defines the type of function needed when
// calling DoReturnResults for the F_starGenType type
type MoqF_starGenType_Add_doReturnFn func(args ...any)

// MoqF_starGenType_Add_results holds the results of the F_starGenType type
type MoqF_starGenType_Add_results struct {
	Params  MoqF_starGenType_Add_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqF_starGenType_Add_doFn
		DoReturnFn MoqF_starGenType_Add_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqF_starGenType_Add_fnRecorder routes recorded function calls to the
// MoqF_starGenType moq
type MoqF_starGenType_Add_fnRecorder struct {
	Params    MoqF_starGenType_Add_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqF_starGenType_Add_results
	Moq       *MoqF_starGenType
}

// MoqF_starGenType_Add_anyParams isolates the any params functions of the
// F_starGenType type
type MoqF_starGenType_Add_anyParams struct {
	Recorder *MoqF_starGenType_Add_fnRecorder
}

// MoqF_starGenType_Fuzz_params holds the params of the F_starGenType type
type MoqF_starGenType_Fuzz_params struct{ Ff any }

// MoqF_starGenType_Fuzz_paramsKey holds the map key params of the
// F_starGenType type
type MoqF_starGenType_Fuzz_paramsKey struct {
	Params struct{ Ff any }
	Hashes struct{ Ff hash.Hash }
}

// MoqF_starGenType_Fuzz_resultsByParams contains the results for a given set
// of parameters for the F_starGenType type
type MoqF_starGenType_Fuzz_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqF_starGenType_Fuzz_paramsKey]*MoqF_starGenType_Fuzz_results
}

// MoqF_starGenType_Fuzz_doFn defines the type of function needed when calling
// AndDo for the F_starGenType type
type MoqF_starGenType_Fuzz_doFn func(ff any)

// MoqF_starGenType_Fuzz_doReturnFn defines the type of function needed when
// calling DoReturnResults for the F_starGenType type
type MoqF_starGenType_Fuzz_doReturnFn func(ff any)

// MoqF_starGenType_Fuzz_results holds the results of the F_starGenType type
type MoqF_starGenType_Fuzz_results struct {
	Params  MoqF_starGenType_Fuzz_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqF_starGenType_Fuzz_doFn
		DoReturnFn MoqF_starGenType_Fuzz_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqF_starGenType_Fuzz_fnRecorder routes recorded function calls to the
// MoqF_starGenType moq
type MoqF_starGenType_Fuzz_fnRecorder struct {
	Params    MoqF_starGenType_Fuzz_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqF_starGenType_Fuzz_results
	Moq       *MoqF_starGenType
}

// MoqF_starGenType_Fuzz_anyParams isolates the any params functions of the
// F_starGenType type
type MoqF_starGenType_Fuzz_anyParams struct {
	Recorder *MoqF_starGenType_Fuzz_fnRecorder
}

// NewMoqF_starGenType creates a new moq of the F_starGenType type
func NewMoqF_starGenType(scene *moq.Scene, config *moq.Config) *MoqF_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqF_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqF_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Helper  struct{}
				Fail    struct{}
				Skipped struct{}
				Add     struct {
					Args moq.ParamIndexing
				}
				Fuzz struct {
					Ff moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Helper  struct{}
			Fail    struct{}
			Skipped struct{}
			Add     struct {
				Args moq.ParamIndexing
			}
			Fuzz struct {
				Ff moq.ParamIndexing
			}
		}{
			Helper:  struct{}{},
			Fail:    struct{}{},
			Skipped: struct{}{},
			Add: struct {
				Args moq.ParamIndexing
			}{
				Args: moq.ParamIndexByHash,
			},
			Fuzz: struct {
				Ff moq.ParamIndexing
			}{
				Ff: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the F_starGenType type
func (m *MoqF_starGenType) Mock() *MoqF_starGenType_mock { return m.Moq }

func (m *MoqF_starGenType_mock) Helper() {
	m.Moq.Scene.T.Helper()
	params := MoqF_starGenType_Helper_params{}
	var results *MoqF_starGenType_Helper_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Helper {
		paramsKey := m.Moq.ParamsKey_Helper(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Helper(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Helper(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Helper(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqF_starGenType_mock) Fail() {
	m.Moq.Scene.T.Helper()
	params := MoqF_starGenType_Fail_params{}
	var results *MoqF_starGenType_Fail_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Fail {
		paramsKey := m.Moq.ParamsKey_Fail(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Fail(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Fail(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Fail(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqF_starGenType_mock) Skipped() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqF_starGenType_Skipped_params{}
	var results *MoqF_starGenType_Skipped_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Skipped {
		paramsKey := m.Moq.ParamsKey_Skipped(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Skipped(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Skipped(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Skipped(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqF_starGenType_mock) Add(args ...any) {
	m.Moq.Scene.T.Helper()
	params := MoqF_starGenType_Add_params{
		Args: args,
	}
	var results *MoqF_starGenType_Add_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Add {
		paramsKey := m.Moq.ParamsKey_Add(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Add(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Add(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Add(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(args...)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(args...)
	}
	return
}

func (m *MoqF_starGenType_mock) Fuzz(ff any) {
	m.Moq.Scene.T.Helper()
	params := MoqF_starGenType_Fuzz_params{
		Ff: ff,
	}
	var results *MoqF_starGenType_Fuzz_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Fuzz {
		paramsKey := m.Moq.ParamsKey_Fuzz(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Fuzz(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Fuzz(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Fuzz(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ff)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(ff)
	}
	return
}

// OnCall returns the recorder implementation of the F_starGenType type
func (m *MoqF_starGenType) OnCall() *MoqF_starGenType_recorder {
	return &MoqF_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqF_starGenType_recorder) Helper() *MoqF_starGenType_Helper_fnRecorder {
	return &MoqF_starGenType_Helper_fnRecorder{
		Params:   MoqF_starGenType_Helper_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqF_starGenType_Helper_fnRecorder) Any() *MoqF_starGenType_Helper_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Helper(r.Params))
		return nil
	}
	return &MoqF_starGenType_Helper_anyParams{Recorder: r}
}

func (r *MoqF_starGenType_Helper_fnRecorder) Seq() *MoqF_starGenType_Helper_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Helper(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqF_starGenType_Helper_fnRecorder) NoSeq() *MoqF_starGenType_Helper_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Helper(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqF_starGenType_Helper_fnRecorder) ReturnResults() *MoqF_starGenType_Helper_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqF_starGenType_Helper_doFn
		DoReturnFn MoqF_starGenType_Helper_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqF_starGenType_Helper_fnRecorder) AndDo(fn MoqF_starGenType_Helper_doFn) *MoqF_starGenType_Helper_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqF_starGenType_Helper_fnRecorder) DoReturnResults(fn MoqF_starGenType_Helper_doReturnFn) *MoqF_starGenType_Helper_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqF_starGenType_Helper_doFn
		DoReturnFn MoqF_starGenType_Helper_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqF_starGenType_Helper_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqF_starGenType_Helper_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Helper {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqF_starGenType_Helper_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqF_starGenType_Helper_paramsKey]*MoqF_starGenType_Helper_results{},
		}
		r.Moq.ResultsByParams_Helper = append(r.Moq.ResultsByParams_Helper, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Helper) {
			copy(r.Moq.ResultsByParams_Helper[insertAt+1:], r.Moq.ResultsByParams_Helper[insertAt:0])
			r.Moq.ResultsByParams_Helper[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Helper(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqF_starGenType_Helper_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqF_starGenType_Helper_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqF_starGenType_Helper_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqF_starGenType_Helper_doFn
				DoReturnFn MoqF_starGenType_Helper_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqF_starGenType) PrettyParams_Helper(params MoqF_starGenType_Helper_params) string {
	return fmt.Sprintf("Helper()")
}

func (m *MoqF_starGenType) ParamsKey_Helper(params MoqF_starGenType_Helper_params, anyParams uint64) MoqF_starGenType_Helper_paramsKey {
	m.Scene.T.Helper()
	return MoqF_starGenType_Helper_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqF_starGenType_recorder) Fail() *MoqF_starGenType_Fail_fnRecorder {
	return &MoqF_starGenType_Fail_fnRecorder{
		Params:   MoqF_starGenType_Fail_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqF_starGenType_Fail_fnRecorder) Any() *MoqF_starGenType_Fail_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Fail(r.Params))
		return nil
	}
	return &MoqF_starGenType_Fail_anyParams{Recorder: r}
}

func (r *MoqF_starGenType_Fail_fnRecorder) Seq() *MoqF_starGenType_Fail_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Fail(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqF_starGenType_Fail_fnRecorder) NoSeq() *MoqF_starGenType_Fail_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Fail(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqF_starGenType_Fail_fnRecorder) ReturnResults() *MoqF_starGenType_Fail_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqF_starGenType_Fail_doFn
		DoReturnFn MoqF_starGenType_Fail_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqF_starGenType_Fail_fnRecorder) AndDo(fn MoqF_starGenType_Fail_doFn) *MoqF_starGenType_Fail_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqF_starGenType_Fail_fnRecorder) DoReturnResults(fn MoqF_starGenType_Fail_doReturnFn) *MoqF_starGenType_Fail_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqF_starGenType_Fail_doFn
		DoReturnFn MoqF_starGenType_Fail_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqF_starGenType_Fail_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqF_starGenType_Fail_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Fail {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqF_starGenType_Fail_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqF_starGenType_Fail_paramsKey]*MoqF_starGenType_Fail_results{},
		}
		r.Moq.ResultsByParams_Fail = append(r.Moq.ResultsByParams_Fail, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Fail) {
			copy(r.Moq.ResultsByParams_Fail[insertAt+1:], r.Moq.ResultsByParams_Fail[insertAt:0])
			r.Moq.ResultsByParams_Fail[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Fail(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqF_starGenType_Fail_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqF_starGenType_Fail_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqF_starGenType_Fail_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqF_starGenType_Fail_doFn
				DoReturnFn MoqF_starGenType_Fail_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqF_starGenType) PrettyParams_Fail(params MoqF_starGenType_Fail_params) string {
	return fmt.Sprintf("Fail()")
}

func (m *MoqF_starGenType) ParamsKey_Fail(params MoqF_starGenType_Fail_params, anyParams uint64) MoqF_starGenType_Fail_paramsKey {
	m.Scene.T.Helper()
	return MoqF_starGenType_Fail_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqF_starGenType_recorder) Skipped() *MoqF_starGenType_Skipped_fnRecorder {
	return &MoqF_starGenType_Skipped_fnRecorder{
		Params:   MoqF_starGenType_Skipped_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqF_starGenType_Skipped_fnRecorder) Any() *MoqF_starGenType_Skipped_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Skipped(r.Params))
		return nil
	}
	return &MoqF_starGenType_Skipped_anyParams{Recorder: r}
}

func (r *MoqF_starGenType_Skipped_fnRecorder) Seq() *MoqF_starGenType_Skipped_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Skipped(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqF_starGenType_Skipped_fnRecorder) NoSeq() *MoqF_starGenType_Skipped_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Skipped(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqF_starGenType_Skipped_fnRecorder) ReturnResults(result1 bool) *MoqF_starGenType_Skipped_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqF_starGenType_Skipped_doFn
		DoReturnFn MoqF_starGenType_Skipped_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqF_starGenType_Skipped_fnRecorder) AndDo(fn MoqF_starGenType_Skipped_doFn) *MoqF_starGenType_Skipped_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqF_starGenType_Skipped_fnRecorder) DoReturnResults(fn MoqF_starGenType_Skipped_doReturnFn) *MoqF_starGenType_Skipped_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqF_starGenType_Skipped_doFn
		DoReturnFn MoqF_starGenType_Skipped_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqF_starGenType_Skipped_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqF_starGenType_Skipped_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Skipped {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqF_starGenType_Skipped_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqF_starGenType_Skipped_paramsKey]*MoqF_starGenType_Skipped_results{},
		}
		r.Moq.ResultsByParams_Skipped = append(r.Moq.ResultsByParams_Skipped, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Skipped) {
			copy(r.Moq.ResultsByParams_Skipped[insertAt+1:], r.Moq.ResultsByParams_Skipped[insertAt:0])
			r.Moq.ResultsByParams_Skipped[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Skipped(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqF_starGenType_Skipped_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqF_starGenType_Skipped_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqF_starGenType_Skipped_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqF_starGenType_Skipped_doFn
				DoReturnFn MoqF_starGenType_Skipped_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqF_starGenType) PrettyParams_Skipped(params MoqF_starGenType_Skipped_params) string {
	return fmt.Sprintf("Skipped()")
}

func (m *MoqF_starGenType) ParamsKey_Skipped(params MoqF_starGenType_Skipped_params, anyParams uint64) MoqF_starGenType_Skipped_paramsKey {
	m.Scene.T.Helper()
	return MoqF_starGenType_Skipped_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqF_starGenType_recorder) Add(args ...any) *MoqF_starGenType_Add_fnRecorder {
	return &MoqF_starGenType_Add_fnRecorder{
		Params: MoqF_starGenType_Add_params{
			Args: args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqF_starGenType_Add_fnRecorder) Any() *MoqF_starGenType_Add_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	return &MoqF_starGenType_Add_anyParams{Recorder: r}
}

func (a *MoqF_starGenType_Add_anyParams) Args() *MoqF_starGenType_Add_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqF_starGenType_Add_fnRecorder) Seq() *MoqF_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqF_starGenType_Add_fnRecorder) NoSeq() *MoqF_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqF_starGenType_Add_fnRecorder) ReturnResults() *MoqF_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqF_starGenType_Add_doFn
		DoReturnFn MoqF_starGenType_Add_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqF_starGenType_Add_fnRecorder) AndDo(fn MoqF_starGenType_Add_doFn) *MoqF_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqF_starGenType_Add_fnRecorder) DoReturnResults(fn MoqF_starGenType_Add_doReturnFn) *MoqF_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqF_starGenType_Add_doFn
		DoReturnFn MoqF_starGenType_Add_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqF_starGenType_Add_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqF_starGenType_Add_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Add {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqF_starGenType_Add_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqF_starGenType_Add_paramsKey]*MoqF_starGenType_Add_results{},
		}
		r.Moq.ResultsByParams_Add = append(r.Moq.ResultsByParams_Add, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Add) {
			copy(r.Moq.ResultsByParams_Add[insertAt+1:], r.Moq.ResultsByParams_Add[insertAt:0])
			r.Moq.ResultsByParams_Add[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Add(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqF_starGenType_Add_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqF_starGenType_Add_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqF_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqF_starGenType_Add_doFn
				DoReturnFn MoqF_starGenType_Add_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqF_starGenType) PrettyParams_Add(params MoqF_starGenType_Add_params) string {
	return fmt.Sprintf("Add(%#v)", params.Args)
}

func (m *MoqF_starGenType) ParamsKey_Add(params MoqF_starGenType_Add_params, anyParams uint64) MoqF_starGenType_Add_paramsKey {
	m.Scene.T.Helper()
	var argsUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Add.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the Add function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqF_starGenType_Add_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Args hash.Hash }{
			Args: argsUsedHash,
		},
	}
}

func (m *MoqF_starGenType_recorder) Fuzz(ff any) *MoqF_starGenType_Fuzz_fnRecorder {
	return &MoqF_starGenType_Fuzz_fnRecorder{
		Params: MoqF_starGenType_Fuzz_params{
			Ff: ff,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqF_starGenType_Fuzz_fnRecorder) Any() *MoqF_starGenType_Fuzz_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Fuzz(r.Params))
		return nil
	}
	return &MoqF_starGenType_Fuzz_anyParams{Recorder: r}
}

func (a *MoqF_starGenType_Fuzz_anyParams) Ff() *MoqF_starGenType_Fuzz_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqF_starGenType_Fuzz_fnRecorder) Seq() *MoqF_starGenType_Fuzz_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Fuzz(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqF_starGenType_Fuzz_fnRecorder) NoSeq() *MoqF_starGenType_Fuzz_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Fuzz(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqF_starGenType_Fuzz_fnRecorder) ReturnResults() *MoqF_starGenType_Fuzz_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqF_starGenType_Fuzz_doFn
		DoReturnFn MoqF_starGenType_Fuzz_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqF_starGenType_Fuzz_fnRecorder) AndDo(fn MoqF_starGenType_Fuzz_doFn) *MoqF_starGenType_Fuzz_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqF_starGenType_Fuzz_fnRecorder) DoReturnResults(fn MoqF_starGenType_Fuzz_doReturnFn) *MoqF_starGenType_Fuzz_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqF_starGenType_Fuzz_doFn
		DoReturnFn MoqF_starGenType_Fuzz_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqF_starGenType_Fuzz_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqF_starGenType_Fuzz_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Fuzz {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqF_starGenType_Fuzz_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqF_starGenType_Fuzz_paramsKey]*MoqF_starGenType_Fuzz_results{},
		}
		r.Moq.ResultsByParams_Fuzz = append(r.Moq.ResultsByParams_Fuzz, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Fuzz) {
			copy(r.Moq.ResultsByParams_Fuzz[insertAt+1:], r.Moq.ResultsByParams_Fuzz[insertAt:0])
			r.Moq.ResultsByParams_Fuzz[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Fuzz(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqF_starGenType_Fuzz_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqF_starGenType_Fuzz_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqF_starGenType_Fuzz_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqF_starGenType_Fuzz_doFn
				DoReturnFn MoqF_starGenType_Fuzz_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqF_starGenType) PrettyParams_Fuzz(params MoqF_starGenType_Fuzz_params) string {
	return fmt.Sprintf("Fuzz(%#v)", params.Ff)
}

func (m *MoqF_starGenType) ParamsKey_Fuzz(params MoqF_starGenType_Fuzz_params, anyParams uint64) MoqF_starGenType_Fuzz_paramsKey {
	m.Scene.T.Helper()
	var ffUsed any
	var ffUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Fuzz.Ff == moq.ParamIndexByValue {
			ffUsed = params.Ff
		} else {
			ffUsedHash = hash.DeepHash(params.Ff)
		}
	}
	return MoqF_starGenType_Fuzz_paramsKey{
		Params: struct{ Ff any }{
			Ff: ffUsed,
		},
		Hashes: struct{ Ff hash.Hash }{
			Ff: ffUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqF_starGenType) Reset() {
	m.ResultsByParams_Helper = nil
	m.ResultsByParams_Fail = nil
	m.ResultsByParams_Skipped = nil
	m.ResultsByParams_Add = nil
	m.ResultsByParams_Fuzz = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqF_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Helper {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Helper(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Fail {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Fail(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Skipped {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Skipped(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Add {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Add(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Fuzz {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Fuzz(results.Params))
			}
		}
	}
}
