// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package testing

import (
	"fmt"
	"math/bits"
	"sync/atomic"
	"testing"
	"time"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that testing.T_starGenType is mocked
// completely
var _ T_starGenType = (*MoqT_starGenType_mock)(nil)

// T_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type T_starGenType interface {
	Parallel()
	Setenv(key, value string)
	Run(name string, f func(t *testing.T)) bool
	Deadline() (deadline time.Time, ok bool)
}

// MoqT_starGenType holds the state of a moq of the T_starGenType type
type MoqT_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqT_starGenType_mock

	ResultsByParams_Parallel []MoqT_starGenType_Parallel_resultsByParams
	ResultsByParams_Setenv   []MoqT_starGenType_Setenv_resultsByParams
	ResultsByParams_Run      []MoqT_starGenType_Run_resultsByParams
	ResultsByParams_Deadline []MoqT_starGenType_Deadline_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Parallel struct{}
			Setenv   struct {
				Key   moq.ParamIndexing
				Value moq.ParamIndexing
			}
			Run struct {
				Name moq.ParamIndexing
				F    moq.ParamIndexing
			}
			Deadline struct{}
		}
	}
}

// MoqT_starGenType_mock isolates the mock interface of the T_starGenType type
type MoqT_starGenType_mock struct {
	Moq *MoqT_starGenType
}

// MoqT_starGenType_recorder isolates the recorder interface of the
// T_starGenType type
type MoqT_starGenType_recorder struct {
	Moq *MoqT_starGenType
}

// MoqT_starGenType_Parallel_params holds the params of the T_starGenType type
type MoqT_starGenType_Parallel_params struct{}

// MoqT_starGenType_Parallel_paramsKey holds the map key params of the
// T_starGenType type
type MoqT_starGenType_Parallel_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqT_starGenType_Parallel_resultsByParams contains the results for a given
// set of parameters for the T_starGenType type
type MoqT_starGenType_Parallel_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqT_starGenType_Parallel_paramsKey]*MoqT_starGenType_Parallel_results
}

// MoqT_starGenType_Parallel_doFn defines the type of function needed when
// calling AndDo for the T_starGenType type
type MoqT_starGenType_Parallel_doFn func()

// MoqT_starGenType_Parallel_doReturnFn defines the type of function needed
// when calling DoReturnResults for the T_starGenType type
type MoqT_starGenType_Parallel_doReturnFn func()

// MoqT_starGenType_Parallel_results holds the results of the T_starGenType
// type
type MoqT_starGenType_Parallel_results struct {
	Params  MoqT_starGenType_Parallel_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqT_starGenType_Parallel_doFn
		DoReturnFn MoqT_starGenType_Parallel_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqT_starGenType_Parallel_fnRecorder routes recorded function calls to the
// MoqT_starGenType moq
type MoqT_starGenType_Parallel_fnRecorder struct {
	Params    MoqT_starGenType_Parallel_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqT_starGenType_Parallel_results
	Moq       *MoqT_starGenType
}

// MoqT_starGenType_Parallel_anyParams isolates the any params functions of the
// T_starGenType type
type MoqT_starGenType_Parallel_anyParams struct {
	Recorder *MoqT_starGenType_Parallel_fnRecorder
}

// MoqT_starGenType_Setenv_params holds the params of the T_starGenType type
type MoqT_starGenType_Setenv_params struct{ Key, Value string }

// MoqT_starGenType_Setenv_paramsKey holds the map key params of the
// T_starGenType type
type MoqT_starGenType_Setenv_paramsKey struct {
	Params struct{ Key, Value string }
	Hashes struct{ Key, Value hash.Hash }
}

// MoqT_starGenType_Setenv_resultsByParams contains the results for a given set
// of parameters for the T_starGenType type
type MoqT_starGenType_Setenv_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqT_starGenType_Setenv_paramsKey]*MoqT_starGenType_Setenv_results
}

// MoqT_starGenType_Setenv_doFn defines the type of function needed when
// calling AndDo for the T_starGenType type
type MoqT_starGenType_Setenv_doFn func(key, value string)

// MoqT_starGenType_Setenv_doReturnFn defines the type of function needed when
// calling DoReturnResults for the T_starGenType type
type MoqT_starGenType_Setenv_doReturnFn func(key, value string)

// MoqT_starGenType_Setenv_results holds the results of the T_starGenType type
type MoqT_starGenType_Setenv_results struct {
	Params  MoqT_starGenType_Setenv_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqT_starGenType_Setenv_doFn
		DoReturnFn MoqT_starGenType_Setenv_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqT_starGenType_Setenv_fnRecorder routes recorded function calls to the
// MoqT_starGenType moq
type MoqT_starGenType_Setenv_fnRecorder struct {
	Params    MoqT_starGenType_Setenv_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqT_starGenType_Setenv_results
	Moq       *MoqT_starGenType
}

// MoqT_starGenType_Setenv_anyParams isolates the any params functions of the
// T_starGenType type
type MoqT_starGenType_Setenv_anyParams struct {
	Recorder *MoqT_starGenType_Setenv_fnRecorder
}

// MoqT_starGenType_Run_params holds the params of the T_starGenType type
type MoqT_starGenType_Run_params struct {
	Name string
	F    func(t *testing.T)
}

// MoqT_starGenType_Run_paramsKey holds the map key params of the T_starGenType
// type
type MoqT_starGenType_Run_paramsKey struct {
	Params struct{ Name string }
	Hashes struct {
		Name hash.Hash
		F    hash.Hash
	}
}

// MoqT_starGenType_Run_resultsByParams contains the results for a given set of
// parameters for the T_starGenType type
type MoqT_starGenType_Run_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqT_starGenType_Run_paramsKey]*MoqT_starGenType_Run_results
}

// MoqT_starGenType_Run_doFn defines the type of function needed when calling
// AndDo for the T_starGenType type
type MoqT_starGenType_Run_doFn func(name string, f func(t *testing.T))

// MoqT_starGenType_Run_doReturnFn defines the type of function needed when
// calling DoReturnResults for the T_starGenType type
type MoqT_starGenType_Run_doReturnFn func(name string, f func(t *testing.T)) bool

// MoqT_starGenType_Run_results holds the results of the T_starGenType type
type MoqT_starGenType_Run_results struct {
	Params  MoqT_starGenType_Run_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqT_starGenType_Run_doFn
		DoReturnFn MoqT_starGenType_Run_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqT_starGenType_Run_fnRecorder routes recorded function calls to the
// MoqT_starGenType moq
type MoqT_starGenType_Run_fnRecorder struct {
	Params    MoqT_starGenType_Run_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqT_starGenType_Run_results
	Moq       *MoqT_starGenType
}

// MoqT_starGenType_Run_anyParams isolates the any params functions of the
// T_starGenType type
type MoqT_starGenType_Run_anyParams struct {
	Recorder *MoqT_starGenType_Run_fnRecorder
}

// MoqT_starGenType_Deadline_params holds the params of the T_starGenType type
type MoqT_starGenType_Deadline_params struct{}

// MoqT_starGenType_Deadline_paramsKey holds the map key params of the
// T_starGenType type
type MoqT_starGenType_Deadline_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqT_starGenType_Deadline_resultsByParams contains the results for a given
// set of parameters for the T_starGenType type
type MoqT_starGenType_Deadline_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqT_starGenType_Deadline_paramsKey]*MoqT_starGenType_Deadline_results
}

// MoqT_starGenType_Deadline_doFn defines the type of function needed when
// calling AndDo for the T_starGenType type
type MoqT_starGenType_Deadline_doFn func()

// MoqT_starGenType_Deadline_doReturnFn defines the type of function needed
// when calling DoReturnResults for the T_starGenType type
type MoqT_starGenType_Deadline_doReturnFn func() (deadline time.Time, ok bool)

// MoqT_starGenType_Deadline_results holds the results of the T_starGenType
// type
type MoqT_starGenType_Deadline_results struct {
	Params  MoqT_starGenType_Deadline_params
	Results []struct {
		Values *struct {
			Deadline time.Time
			Ok       bool
		}
		Sequence   uint32
		DoFn       MoqT_starGenType_Deadline_doFn
		DoReturnFn MoqT_starGenType_Deadline_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqT_starGenType_Deadline_fnRecorder routes recorded function calls to the
// MoqT_starGenType moq
type MoqT_starGenType_Deadline_fnRecorder struct {
	Params    MoqT_starGenType_Deadline_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqT_starGenType_Deadline_results
	Moq       *MoqT_starGenType
}

// MoqT_starGenType_Deadline_anyParams isolates the any params functions of the
// T_starGenType type
type MoqT_starGenType_Deadline_anyParams struct {
	Recorder *MoqT_starGenType_Deadline_fnRecorder
}

// NewMoqT_starGenType creates a new moq of the T_starGenType type
func NewMoqT_starGenType(scene *moq.Scene, config *moq.Config) *MoqT_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqT_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqT_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Parallel struct{}
				Setenv   struct {
					Key   moq.ParamIndexing
					Value moq.ParamIndexing
				}
				Run struct {
					Name moq.ParamIndexing
					F    moq.ParamIndexing
				}
				Deadline struct{}
			}
		}{ParameterIndexing: struct {
			Parallel struct{}
			Setenv   struct {
				Key   moq.ParamIndexing
				Value moq.ParamIndexing
			}
			Run struct {
				Name moq.ParamIndexing
				F    moq.ParamIndexing
			}
			Deadline struct{}
		}{
			Parallel: struct{}{},
			Setenv: struct {
				Key   moq.ParamIndexing
				Value moq.ParamIndexing
			}{
				Key:   moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
			},
			Run: struct {
				Name moq.ParamIndexing
				F    moq.ParamIndexing
			}{
				Name: moq.ParamIndexByValue,
				F:    moq.ParamIndexByHash,
			},
			Deadline: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the T_starGenType type
func (m *MoqT_starGenType) Mock() *MoqT_starGenType_mock { return m.Moq }

func (m *MoqT_starGenType_mock) Parallel() {
	m.Moq.Scene.T.Helper()
	params := MoqT_starGenType_Parallel_params{}
	var results *MoqT_starGenType_Parallel_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Parallel {
		paramsKey := m.Moq.ParamsKey_Parallel(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Parallel(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Parallel(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Parallel(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqT_starGenType_mock) Setenv(key, value string) {
	m.Moq.Scene.T.Helper()
	params := MoqT_starGenType_Setenv_params{
		Key:   key,
		Value: value,
	}
	var results *MoqT_starGenType_Setenv_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Setenv {
		paramsKey := m.Moq.ParamsKey_Setenv(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Setenv(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Setenv(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Setenv(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key, value)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(key, value)
	}
	return
}

func (m *MoqT_starGenType_mock) Run(name string, f func(t *testing.T)) (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqT_starGenType_Run_params{
		Name: name,
		F:    f,
	}
	var results *MoqT_starGenType_Run_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Run {
		paramsKey := m.Moq.ParamsKey_Run(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Run(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Run(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Run(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name, f)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(name, f)
	}
	return
}

func (m *MoqT_starGenType_mock) Deadline() (deadline time.Time, ok bool) {
	m.Moq.Scene.T.Helper()
	params := MoqT_starGenType_Deadline_params{}
	var results *MoqT_starGenType_Deadline_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Deadline {
		paramsKey := m.Moq.ParamsKey_Deadline(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Deadline(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Deadline(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Deadline(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		deadline = result.Values.Deadline
		ok = result.Values.Ok
	}
	if result.DoReturnFn != nil {
		deadline, ok = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the T_starGenType type
func (m *MoqT_starGenType) OnCall() *MoqT_starGenType_recorder {
	return &MoqT_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqT_starGenType_recorder) Parallel() *MoqT_starGenType_Parallel_fnRecorder {
	return &MoqT_starGenType_Parallel_fnRecorder{
		Params:   MoqT_starGenType_Parallel_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqT_starGenType_Parallel_fnRecorder) Any() *MoqT_starGenType_Parallel_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Parallel(r.Params))
		return nil
	}
	return &MoqT_starGenType_Parallel_anyParams{Recorder: r}
}

func (r *MoqT_starGenType_Parallel_fnRecorder) Seq() *MoqT_starGenType_Parallel_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Parallel(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqT_starGenType_Parallel_fnRecorder) NoSeq() *MoqT_starGenType_Parallel_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Parallel(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqT_starGenType_Parallel_fnRecorder) ReturnResults() *MoqT_starGenType_Parallel_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqT_starGenType_Parallel_doFn
		DoReturnFn MoqT_starGenType_Parallel_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqT_starGenType_Parallel_fnRecorder) AndDo(fn MoqT_starGenType_Parallel_doFn) *MoqT_starGenType_Parallel_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqT_starGenType_Parallel_fnRecorder) DoReturnResults(fn MoqT_starGenType_Parallel_doReturnFn) *MoqT_starGenType_Parallel_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqT_starGenType_Parallel_doFn
		DoReturnFn MoqT_starGenType_Parallel_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqT_starGenType_Parallel_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqT_starGenType_Parallel_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Parallel {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqT_starGenType_Parallel_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqT_starGenType_Parallel_paramsKey]*MoqT_starGenType_Parallel_results{},
		}
		r.Moq.ResultsByParams_Parallel = append(r.Moq.ResultsByParams_Parallel, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Parallel) {
			copy(r.Moq.ResultsByParams_Parallel[insertAt+1:], r.Moq.ResultsByParams_Parallel[insertAt:0])
			r.Moq.ResultsByParams_Parallel[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Parallel(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqT_starGenType_Parallel_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqT_starGenType_Parallel_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqT_starGenType_Parallel_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqT_starGenType_Parallel_doFn
				DoReturnFn MoqT_starGenType_Parallel_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqT_starGenType) PrettyParams_Parallel(params MoqT_starGenType_Parallel_params) string {
	return fmt.Sprintf("Parallel()")
}

func (m *MoqT_starGenType) ParamsKey_Parallel(params MoqT_starGenType_Parallel_params, anyParams uint64) MoqT_starGenType_Parallel_paramsKey {
	m.Scene.T.Helper()
	return MoqT_starGenType_Parallel_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqT_starGenType_recorder) Setenv(key, value string) *MoqT_starGenType_Setenv_fnRecorder {
	return &MoqT_starGenType_Setenv_fnRecorder{
		Params: MoqT_starGenType_Setenv_params{
			Key:   key,
			Value: value,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqT_starGenType_Setenv_fnRecorder) Any() *MoqT_starGenType_Setenv_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Setenv(r.Params))
		return nil
	}
	return &MoqT_starGenType_Setenv_anyParams{Recorder: r}
}

func (a *MoqT_starGenType_Setenv_anyParams) Key() *MoqT_starGenType_Setenv_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqT_starGenType_Setenv_anyParams) Value() *MoqT_starGenType_Setenv_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqT_starGenType_Setenv_fnRecorder) Seq() *MoqT_starGenType_Setenv_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Setenv(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqT_starGenType_Setenv_fnRecorder) NoSeq() *MoqT_starGenType_Setenv_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Setenv(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqT_starGenType_Setenv_fnRecorder) ReturnResults() *MoqT_starGenType_Setenv_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqT_starGenType_Setenv_doFn
		DoReturnFn MoqT_starGenType_Setenv_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqT_starGenType_Setenv_fnRecorder) AndDo(fn MoqT_starGenType_Setenv_doFn) *MoqT_starGenType_Setenv_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqT_starGenType_Setenv_fnRecorder) DoReturnResults(fn MoqT_starGenType_Setenv_doReturnFn) *MoqT_starGenType_Setenv_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqT_starGenType_Setenv_doFn
		DoReturnFn MoqT_starGenType_Setenv_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqT_starGenType_Setenv_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqT_starGenType_Setenv_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Setenv {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqT_starGenType_Setenv_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqT_starGenType_Setenv_paramsKey]*MoqT_starGenType_Setenv_results{},
		}
		r.Moq.ResultsByParams_Setenv = append(r.Moq.ResultsByParams_Setenv, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Setenv) {
			copy(r.Moq.ResultsByParams_Setenv[insertAt+1:], r.Moq.ResultsByParams_Setenv[insertAt:0])
			r.Moq.ResultsByParams_Setenv[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Setenv(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqT_starGenType_Setenv_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqT_starGenType_Setenv_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqT_starGenType_Setenv_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqT_starGenType_Setenv_doFn
				DoReturnFn MoqT_starGenType_Setenv_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqT_starGenType) PrettyParams_Setenv(params MoqT_starGenType_Setenv_params) string {
	return fmt.Sprintf("Setenv(%#v, %#v)", params.Key, params.Value)
}

func (m *MoqT_starGenType) ParamsKey_Setenv(params MoqT_starGenType_Setenv_params, anyParams uint64) MoqT_starGenType_Setenv_paramsKey {
	m.Scene.T.Helper()
	var keyUsed string
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Setenv.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	var valueUsed string
	var valueUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Setenv.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	return MoqT_starGenType_Setenv_paramsKey{
		Params: struct{ Key, Value string }{
			Key:   keyUsed,
			Value: valueUsed,
		},
		Hashes: struct{ Key, Value hash.Hash }{
			Key:   keyUsedHash,
			Value: valueUsedHash,
		},
	}
}

func (m *MoqT_starGenType_recorder) Run(name string, f func(t *testing.T)) *MoqT_starGenType_Run_fnRecorder {
	return &MoqT_starGenType_Run_fnRecorder{
		Params: MoqT_starGenType_Run_params{
			Name: name,
			F:    f,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqT_starGenType_Run_fnRecorder) Any() *MoqT_starGenType_Run_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Run(r.Params))
		return nil
	}
	return &MoqT_starGenType_Run_anyParams{Recorder: r}
}

func (a *MoqT_starGenType_Run_anyParams) Name() *MoqT_starGenType_Run_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqT_starGenType_Run_anyParams) F() *MoqT_starGenType_Run_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqT_starGenType_Run_fnRecorder) Seq() *MoqT_starGenType_Run_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Run(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqT_starGenType_Run_fnRecorder) NoSeq() *MoqT_starGenType_Run_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Run(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqT_starGenType_Run_fnRecorder) ReturnResults(result1 bool) *MoqT_starGenType_Run_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqT_starGenType_Run_doFn
		DoReturnFn MoqT_starGenType_Run_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqT_starGenType_Run_fnRecorder) AndDo(fn MoqT_starGenType_Run_doFn) *MoqT_starGenType_Run_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqT_starGenType_Run_fnRecorder) DoReturnResults(fn MoqT_starGenType_Run_doReturnFn) *MoqT_starGenType_Run_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqT_starGenType_Run_doFn
		DoReturnFn MoqT_starGenType_Run_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqT_starGenType_Run_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqT_starGenType_Run_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Run {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqT_starGenType_Run_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqT_starGenType_Run_paramsKey]*MoqT_starGenType_Run_results{},
		}
		r.Moq.ResultsByParams_Run = append(r.Moq.ResultsByParams_Run, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Run) {
			copy(r.Moq.ResultsByParams_Run[insertAt+1:], r.Moq.ResultsByParams_Run[insertAt:0])
			r.Moq.ResultsByParams_Run[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Run(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqT_starGenType_Run_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqT_starGenType_Run_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqT_starGenType_Run_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqT_starGenType_Run_doFn
				DoReturnFn MoqT_starGenType_Run_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqT_starGenType) PrettyParams_Run(params MoqT_starGenType_Run_params) string {
	return fmt.Sprintf("Run(%#v, %#v)", params.Name, params.F)
}

func (m *MoqT_starGenType) ParamsKey_Run(params MoqT_starGenType_Run_params, anyParams uint64) MoqT_starGenType_Run_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Run.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var fUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Run.F == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The f parameter of the Run function can't be indexed by value")
		}
		fUsedHash = hash.DeepHash(params.F)
	}
	return MoqT_starGenType_Run_paramsKey{
		Params: struct{ Name string }{
			Name: nameUsed,
		},
		Hashes: struct {
			Name hash.Hash
			F    hash.Hash
		}{
			Name: nameUsedHash,
			F:    fUsedHash,
		},
	}
}

func (m *MoqT_starGenType_recorder) Deadline() *MoqT_starGenType_Deadline_fnRecorder {
	return &MoqT_starGenType_Deadline_fnRecorder{
		Params:   MoqT_starGenType_Deadline_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqT_starGenType_Deadline_fnRecorder) Any() *MoqT_starGenType_Deadline_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Deadline(r.Params))
		return nil
	}
	return &MoqT_starGenType_Deadline_anyParams{Recorder: r}
}

func (r *MoqT_starGenType_Deadline_fnRecorder) Seq() *MoqT_starGenType_Deadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Deadline(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqT_starGenType_Deadline_fnRecorder) NoSeq() *MoqT_starGenType_Deadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Deadline(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqT_starGenType_Deadline_fnRecorder) ReturnResults(deadline time.Time, ok bool) *MoqT_starGenType_Deadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Deadline time.Time
			Ok       bool
		}
		Sequence   uint32
		DoFn       MoqT_starGenType_Deadline_doFn
		DoReturnFn MoqT_starGenType_Deadline_doReturnFn
	}{
		Values: &struct {
			Deadline time.Time
			Ok       bool
		}{
			Deadline: deadline,
			Ok:       ok,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqT_starGenType_Deadline_fnRecorder) AndDo(fn MoqT_starGenType_Deadline_doFn) *MoqT_starGenType_Deadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqT_starGenType_Deadline_fnRecorder) DoReturnResults(fn MoqT_starGenType_Deadline_doReturnFn) *MoqT_starGenType_Deadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Deadline time.Time
			Ok       bool
		}
		Sequence   uint32
		DoFn       MoqT_starGenType_Deadline_doFn
		DoReturnFn MoqT_starGenType_Deadline_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqT_starGenType_Deadline_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqT_starGenType_Deadline_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Deadline {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqT_starGenType_Deadline_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqT_starGenType_Deadline_paramsKey]*MoqT_starGenType_Deadline_results{},
		}
		r.Moq.ResultsByParams_Deadline = append(r.Moq.ResultsByParams_Deadline, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Deadline) {
			copy(r.Moq.ResultsByParams_Deadline[insertAt+1:], r.Moq.ResultsByParams_Deadline[insertAt:0])
			r.Moq.ResultsByParams_Deadline[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Deadline(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqT_starGenType_Deadline_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqT_starGenType_Deadline_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqT_starGenType_Deadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Deadline time.Time
					Ok       bool
				}
				Sequence   uint32
				DoFn       MoqT_starGenType_Deadline_doFn
				DoReturnFn MoqT_starGenType_Deadline_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqT_starGenType) PrettyParams_Deadline(params MoqT_starGenType_Deadline_params) string {
	return fmt.Sprintf("Deadline()")
}

func (m *MoqT_starGenType) ParamsKey_Deadline(params MoqT_starGenType_Deadline_params, anyParams uint64) MoqT_starGenType_Deadline_paramsKey {
	m.Scene.T.Helper()
	return MoqT_starGenType_Deadline_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqT_starGenType) Reset() {
	m.ResultsByParams_Parallel = nil
	m.ResultsByParams_Setenv = nil
	m.ResultsByParams_Run = nil
	m.ResultsByParams_Deadline = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqT_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Parallel {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Parallel(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Setenv {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Setenv(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Run {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Run(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Deadline {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Deadline(results.Params))
			}
		}
	}
}
