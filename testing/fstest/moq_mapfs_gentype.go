// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package fstest

import (
	"fmt"
	"io/fs"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that fstest.MapFS_genType is mocked
// completely
var _ MapFS_genType = (*MoqMapFS_genType_mock)(nil)

// MapFS_genType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type MapFS_genType interface {
	Open(name string) (fs.File, error)
	ReadFile(name string) ([]byte, error)
	Stat(name string) (fs.FileInfo, error)
	ReadDir(name string) ([]fs.DirEntry, error)
	Glob(pattern string) ([]string, error)
	Sub(dir string) (fs.FS, error)
}

// MoqMapFS_genType holds the state of a moq of the MapFS_genType type
type MoqMapFS_genType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqMapFS_genType_mock

	ResultsByParams_Open     []MoqMapFS_genType_Open_resultsByParams
	ResultsByParams_ReadFile []MoqMapFS_genType_ReadFile_resultsByParams
	ResultsByParams_Stat     []MoqMapFS_genType_Stat_resultsByParams
	ResultsByParams_ReadDir  []MoqMapFS_genType_ReadDir_resultsByParams
	ResultsByParams_Glob     []MoqMapFS_genType_Glob_resultsByParams
	ResultsByParams_Sub      []MoqMapFS_genType_Sub_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Open struct {
				Name moq.ParamIndexing
			}
			ReadFile struct {
				Name moq.ParamIndexing
			}
			Stat struct {
				Name moq.ParamIndexing
			}
			ReadDir struct {
				Name moq.ParamIndexing
			}
			Glob struct {
				Pattern moq.ParamIndexing
			}
			Sub struct {
				Dir moq.ParamIndexing
			}
		}
	}
	// MoqMapFS_genType_mock isolates the mock interface of the MapFS_genType type
}

type MoqMapFS_genType_mock struct {
	Moq *MoqMapFS_genType
}

// MoqMapFS_genType_recorder isolates the recorder interface of the
// MapFS_genType type
type MoqMapFS_genType_recorder struct {
	Moq *MoqMapFS_genType
}

// MoqMapFS_genType_Open_params holds the params of the MapFS_genType type
type MoqMapFS_genType_Open_params struct{ Name string }

// MoqMapFS_genType_Open_paramsKey holds the map key params of the
// MapFS_genType type
type MoqMapFS_genType_Open_paramsKey struct {
	Params struct{ Name string }
	Hashes struct{ Name hash.Hash }
}

// MoqMapFS_genType_Open_resultsByParams contains the results for a given set
// of parameters for the MapFS_genType type
type MoqMapFS_genType_Open_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMapFS_genType_Open_paramsKey]*MoqMapFS_genType_Open_results
}

// MoqMapFS_genType_Open_doFn defines the type of function needed when calling
// AndDo for the MapFS_genType type
type MoqMapFS_genType_Open_doFn func(name string)

// MoqMapFS_genType_Open_doReturnFn defines the type of function needed when
// calling DoReturnResults for the MapFS_genType type
type MoqMapFS_genType_Open_doReturnFn func(name string) (fs.File, error)

// MoqMapFS_genType_Open_results holds the results of the MapFS_genType type
type MoqMapFS_genType_Open_results struct {
	Params  MoqMapFS_genType_Open_params
	Results []struct {
		Values *struct {
			Result1 fs.File
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqMapFS_genType_Open_doFn
		DoReturnFn MoqMapFS_genType_Open_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMapFS_genType_Open_fnRecorder routes recorded function calls to the
// MoqMapFS_genType moq
type MoqMapFS_genType_Open_fnRecorder struct {
	Params    MoqMapFS_genType_Open_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMapFS_genType_Open_results
	Moq       *MoqMapFS_genType
}

// MoqMapFS_genType_Open_anyParams isolates the any params functions of the
// MapFS_genType type
type MoqMapFS_genType_Open_anyParams struct {
	Recorder *MoqMapFS_genType_Open_fnRecorder
}

// MoqMapFS_genType_ReadFile_params holds the params of the MapFS_genType type
type MoqMapFS_genType_ReadFile_params struct{ Name string }

// MoqMapFS_genType_ReadFile_paramsKey holds the map key params of the
// MapFS_genType type
type MoqMapFS_genType_ReadFile_paramsKey struct {
	Params struct{ Name string }
	Hashes struct{ Name hash.Hash }
}

// MoqMapFS_genType_ReadFile_resultsByParams contains the results for a given
// set of parameters for the MapFS_genType type
type MoqMapFS_genType_ReadFile_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMapFS_genType_ReadFile_paramsKey]*MoqMapFS_genType_ReadFile_results
}

// MoqMapFS_genType_ReadFile_doFn defines the type of function needed when
// calling AndDo for the MapFS_genType type
type MoqMapFS_genType_ReadFile_doFn func(name string)

// MoqMapFS_genType_ReadFile_doReturnFn defines the type of function needed
// when calling DoReturnResults for the MapFS_genType type
type MoqMapFS_genType_ReadFile_doReturnFn func(name string) ([]byte, error)

// MoqMapFS_genType_ReadFile_results holds the results of the MapFS_genType
// type
type MoqMapFS_genType_ReadFile_results struct {
	Params  MoqMapFS_genType_ReadFile_params
	Results []struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqMapFS_genType_ReadFile_doFn
		DoReturnFn MoqMapFS_genType_ReadFile_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMapFS_genType_ReadFile_fnRecorder routes recorded function calls to the
// MoqMapFS_genType moq
type MoqMapFS_genType_ReadFile_fnRecorder struct {
	Params    MoqMapFS_genType_ReadFile_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMapFS_genType_ReadFile_results
	Moq       *MoqMapFS_genType
}

// MoqMapFS_genType_ReadFile_anyParams isolates the any params functions of the
// MapFS_genType type
type MoqMapFS_genType_ReadFile_anyParams struct {
	Recorder *MoqMapFS_genType_ReadFile_fnRecorder
}

// MoqMapFS_genType_Stat_params holds the params of the MapFS_genType type
type MoqMapFS_genType_Stat_params struct{ Name string }

// MoqMapFS_genType_Stat_paramsKey holds the map key params of the
// MapFS_genType type
type MoqMapFS_genType_Stat_paramsKey struct {
	Params struct{ Name string }
	Hashes struct{ Name hash.Hash }
}

// MoqMapFS_genType_Stat_resultsByParams contains the results for a given set
// of parameters for the MapFS_genType type
type MoqMapFS_genType_Stat_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMapFS_genType_Stat_paramsKey]*MoqMapFS_genType_Stat_results
}

// MoqMapFS_genType_Stat_doFn defines the type of function needed when calling
// AndDo for the MapFS_genType type
type MoqMapFS_genType_Stat_doFn func(name string)

// MoqMapFS_genType_Stat_doReturnFn defines the type of function needed when
// calling DoReturnResults for the MapFS_genType type
type MoqMapFS_genType_Stat_doReturnFn func(name string) (fs.FileInfo, error)

// MoqMapFS_genType_Stat_results holds the results of the MapFS_genType type
type MoqMapFS_genType_Stat_results struct {
	Params  MoqMapFS_genType_Stat_params
	Results []struct {
		Values *struct {
			Result1 fs.FileInfo
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqMapFS_genType_Stat_doFn
		DoReturnFn MoqMapFS_genType_Stat_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMapFS_genType_Stat_fnRecorder routes recorded function calls to the
// MoqMapFS_genType moq
type MoqMapFS_genType_Stat_fnRecorder struct {
	Params    MoqMapFS_genType_Stat_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMapFS_genType_Stat_results
	Moq       *MoqMapFS_genType
}

// MoqMapFS_genType_Stat_anyParams isolates the any params functions of the
// MapFS_genType type
type MoqMapFS_genType_Stat_anyParams struct {
	Recorder *MoqMapFS_genType_Stat_fnRecorder
}

// MoqMapFS_genType_ReadDir_params holds the params of the MapFS_genType type
type MoqMapFS_genType_ReadDir_params struct{ Name string }

// MoqMapFS_genType_ReadDir_paramsKey holds the map key params of the
// MapFS_genType type
type MoqMapFS_genType_ReadDir_paramsKey struct {
	Params struct{ Name string }
	Hashes struct{ Name hash.Hash }
}

// MoqMapFS_genType_ReadDir_resultsByParams contains the results for a given
// set of parameters for the MapFS_genType type
type MoqMapFS_genType_ReadDir_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMapFS_genType_ReadDir_paramsKey]*MoqMapFS_genType_ReadDir_results
}

// MoqMapFS_genType_ReadDir_doFn defines the type of function needed when
// calling AndDo for the MapFS_genType type
type MoqMapFS_genType_ReadDir_doFn func(name string)

// MoqMapFS_genType_ReadDir_doReturnFn defines the type of function needed when
// calling DoReturnResults for the MapFS_genType type
type MoqMapFS_genType_ReadDir_doReturnFn func(name string) ([]fs.DirEntry, error)

// MoqMapFS_genType_ReadDir_results holds the results of the MapFS_genType type
type MoqMapFS_genType_ReadDir_results struct {
	Params  MoqMapFS_genType_ReadDir_params
	Results []struct {
		Values *struct {
			Result1 []fs.DirEntry
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqMapFS_genType_ReadDir_doFn
		DoReturnFn MoqMapFS_genType_ReadDir_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMapFS_genType_ReadDir_fnRecorder routes recorded function calls to the
// MoqMapFS_genType moq
type MoqMapFS_genType_ReadDir_fnRecorder struct {
	Params    MoqMapFS_genType_ReadDir_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMapFS_genType_ReadDir_results
	Moq       *MoqMapFS_genType
}

// MoqMapFS_genType_ReadDir_anyParams isolates the any params functions of the
// MapFS_genType type
type MoqMapFS_genType_ReadDir_anyParams struct {
	Recorder *MoqMapFS_genType_ReadDir_fnRecorder
}

// MoqMapFS_genType_Glob_params holds the params of the MapFS_genType type
type MoqMapFS_genType_Glob_params struct{ Pattern string }

// MoqMapFS_genType_Glob_paramsKey holds the map key params of the
// MapFS_genType type
type MoqMapFS_genType_Glob_paramsKey struct {
	Params struct{ Pattern string }
	Hashes struct{ Pattern hash.Hash }
}

// MoqMapFS_genType_Glob_resultsByParams contains the results for a given set
// of parameters for the MapFS_genType type
type MoqMapFS_genType_Glob_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMapFS_genType_Glob_paramsKey]*MoqMapFS_genType_Glob_results
}

// MoqMapFS_genType_Glob_doFn defines the type of function needed when calling
// AndDo for the MapFS_genType type
type MoqMapFS_genType_Glob_doFn func(pattern string)

// MoqMapFS_genType_Glob_doReturnFn defines the type of function needed when
// calling DoReturnResults for the MapFS_genType type
type MoqMapFS_genType_Glob_doReturnFn func(pattern string) ([]string, error)

// MoqMapFS_genType_Glob_results holds the results of the MapFS_genType type
type MoqMapFS_genType_Glob_results struct {
	Params  MoqMapFS_genType_Glob_params
	Results []struct {
		Values *struct {
			Result1 []string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqMapFS_genType_Glob_doFn
		DoReturnFn MoqMapFS_genType_Glob_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMapFS_genType_Glob_fnRecorder routes recorded function calls to the
// MoqMapFS_genType moq
type MoqMapFS_genType_Glob_fnRecorder struct {
	Params    MoqMapFS_genType_Glob_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMapFS_genType_Glob_results
	Moq       *MoqMapFS_genType
}

// MoqMapFS_genType_Glob_anyParams isolates the any params functions of the
// MapFS_genType type
type MoqMapFS_genType_Glob_anyParams struct {
	Recorder *MoqMapFS_genType_Glob_fnRecorder
}

// MoqMapFS_genType_Sub_params holds the params of the MapFS_genType type
type MoqMapFS_genType_Sub_params struct{ Dir string }

// MoqMapFS_genType_Sub_paramsKey holds the map key params of the MapFS_genType
// type
type MoqMapFS_genType_Sub_paramsKey struct {
	Params struct{ Dir string }
	Hashes struct{ Dir hash.Hash }
}

// MoqMapFS_genType_Sub_resultsByParams contains the results for a given set of
// parameters for the MapFS_genType type
type MoqMapFS_genType_Sub_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMapFS_genType_Sub_paramsKey]*MoqMapFS_genType_Sub_results
}

// MoqMapFS_genType_Sub_doFn defines the type of function needed when calling
// AndDo for the MapFS_genType type
type MoqMapFS_genType_Sub_doFn func(dir string)

// MoqMapFS_genType_Sub_doReturnFn defines the type of function needed when
// calling DoReturnResults for the MapFS_genType type
type MoqMapFS_genType_Sub_doReturnFn func(dir string) (fs.FS, error)

// MoqMapFS_genType_Sub_results holds the results of the MapFS_genType type
type MoqMapFS_genType_Sub_results struct {
	Params  MoqMapFS_genType_Sub_params
	Results []struct {
		Values *struct {
			Result1 fs.FS
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqMapFS_genType_Sub_doFn
		DoReturnFn MoqMapFS_genType_Sub_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMapFS_genType_Sub_fnRecorder routes recorded function calls to the
// MoqMapFS_genType moq
type MoqMapFS_genType_Sub_fnRecorder struct {
	Params    MoqMapFS_genType_Sub_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMapFS_genType_Sub_results
	Moq       *MoqMapFS_genType
}

// MoqMapFS_genType_Sub_anyParams isolates the any params functions of the
// MapFS_genType type
type MoqMapFS_genType_Sub_anyParams struct {
	Recorder *MoqMapFS_genType_Sub_fnRecorder
}

// NewMoqMapFS_genType creates a new moq of the MapFS_genType type
func NewMoqMapFS_genType(scene *moq.Scene, config *moq.Config) *MoqMapFS_genType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqMapFS_genType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqMapFS_genType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Open struct {
					Name moq.ParamIndexing
				}
				ReadFile struct {
					Name moq.ParamIndexing
				}
				Stat struct {
					Name moq.ParamIndexing
				}
				ReadDir struct {
					Name moq.ParamIndexing
				}
				Glob struct {
					Pattern moq.ParamIndexing
				}
				Sub struct {
					Dir moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Open struct {
				Name moq.ParamIndexing
			}
			ReadFile struct {
				Name moq.ParamIndexing
			}
			Stat struct {
				Name moq.ParamIndexing
			}
			ReadDir struct {
				Name moq.ParamIndexing
			}
			Glob struct {
				Pattern moq.ParamIndexing
			}
			Sub struct {
				Dir moq.ParamIndexing
			}
		}{
			Open: struct {
				Name moq.ParamIndexing
			}{
				Name: moq.ParamIndexByValue,
			},
			ReadFile: struct {
				Name moq.ParamIndexing
			}{
				Name: moq.ParamIndexByValue,
			},
			Stat: struct {
				Name moq.ParamIndexing
			}{
				Name: moq.ParamIndexByValue,
			},
			ReadDir: struct {
				Name moq.ParamIndexing
			}{
				Name: moq.ParamIndexByValue,
			},
			Glob: struct {
				Pattern moq.ParamIndexing
			}{
				Pattern: moq.ParamIndexByValue,
			},
			Sub: struct {
				Dir moq.ParamIndexing
			}{
				Dir: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the MapFS_genType type
func (m *MoqMapFS_genType) Mock() *MoqMapFS_genType_mock { return m.Moq }

func (m *MoqMapFS_genType_mock) Open(name string) (result1 fs.File, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqMapFS_genType_Open_params{
		Name: name,
	}
	var results *MoqMapFS_genType_Open_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Open {
		paramsKey := m.Moq.ParamsKey_Open(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Open(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Open(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Open(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(name)
	}
	return
}

func (m *MoqMapFS_genType_mock) ReadFile(name string) (result1 []byte, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqMapFS_genType_ReadFile_params{
		Name: name,
	}
	var results *MoqMapFS_genType_ReadFile_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadFile {
		paramsKey := m.Moq.ParamsKey_ReadFile(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadFile(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadFile(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadFile(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(name)
	}
	return
}

func (m *MoqMapFS_genType_mock) Stat(name string) (result1 fs.FileInfo, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqMapFS_genType_Stat_params{
		Name: name,
	}
	var results *MoqMapFS_genType_Stat_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Stat {
		paramsKey := m.Moq.ParamsKey_Stat(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Stat(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Stat(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Stat(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(name)
	}
	return
}

func (m *MoqMapFS_genType_mock) ReadDir(name string) (result1 []fs.DirEntry, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqMapFS_genType_ReadDir_params{
		Name: name,
	}
	var results *MoqMapFS_genType_ReadDir_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadDir {
		paramsKey := m.Moq.ParamsKey_ReadDir(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadDir(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadDir(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadDir(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(name)
	}
	return
}

func (m *MoqMapFS_genType_mock) Glob(pattern string) (result1 []string, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqMapFS_genType_Glob_params{
		Pattern: pattern,
	}
	var results *MoqMapFS_genType_Glob_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Glob {
		paramsKey := m.Moq.ParamsKey_Glob(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Glob(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Glob(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Glob(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(pattern)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(pattern)
	}
	return
}

func (m *MoqMapFS_genType_mock) Sub(dir string) (result1 fs.FS, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqMapFS_genType_Sub_params{
		Dir: dir,
	}
	var results *MoqMapFS_genType_Sub_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Sub {
		paramsKey := m.Moq.ParamsKey_Sub(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Sub(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Sub(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Sub(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(dir)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(dir)
	}
	return
}

// OnCall returns the recorder implementation of the MapFS_genType type
func (m *MoqMapFS_genType) OnCall() *MoqMapFS_genType_recorder {
	return &MoqMapFS_genType_recorder{
		Moq: m,
	}
}

func (m *MoqMapFS_genType_recorder) Open(name string) *MoqMapFS_genType_Open_fnRecorder {
	return &MoqMapFS_genType_Open_fnRecorder{
		Params: MoqMapFS_genType_Open_params{
			Name: name,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMapFS_genType_Open_fnRecorder) Any() *MoqMapFS_genType_Open_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Open(r.Params))
		return nil
	}
	return &MoqMapFS_genType_Open_anyParams{Recorder: r}
}

func (a *MoqMapFS_genType_Open_anyParams) Name() *MoqMapFS_genType_Open_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqMapFS_genType_Open_fnRecorder) Seq() *MoqMapFS_genType_Open_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Open(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMapFS_genType_Open_fnRecorder) NoSeq() *MoqMapFS_genType_Open_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Open(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMapFS_genType_Open_fnRecorder) ReturnResults(result1 fs.File, result2 error) *MoqMapFS_genType_Open_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 fs.File
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqMapFS_genType_Open_doFn
		DoReturnFn MoqMapFS_genType_Open_doReturnFn
	}{
		Values: &struct {
			Result1 fs.File
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMapFS_genType_Open_fnRecorder) AndDo(fn MoqMapFS_genType_Open_doFn) *MoqMapFS_genType_Open_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMapFS_genType_Open_fnRecorder) DoReturnResults(fn MoqMapFS_genType_Open_doReturnFn) *MoqMapFS_genType_Open_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 fs.File
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqMapFS_genType_Open_doFn
		DoReturnFn MoqMapFS_genType_Open_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMapFS_genType_Open_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMapFS_genType_Open_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Open {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMapFS_genType_Open_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMapFS_genType_Open_paramsKey]*MoqMapFS_genType_Open_results{},
		}
		r.Moq.ResultsByParams_Open = append(r.Moq.ResultsByParams_Open, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Open) {
			copy(r.Moq.ResultsByParams_Open[insertAt+1:], r.Moq.ResultsByParams_Open[insertAt:0])
			r.Moq.ResultsByParams_Open[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Open(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMapFS_genType_Open_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMapFS_genType_Open_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMapFS_genType_Open_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 fs.File
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqMapFS_genType_Open_doFn
				DoReturnFn MoqMapFS_genType_Open_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMapFS_genType) PrettyParams_Open(params MoqMapFS_genType_Open_params) string {
	return fmt.Sprintf("Open(%#v)", params.Name)
}

func (m *MoqMapFS_genType) ParamsKey_Open(params MoqMapFS_genType_Open_params, anyParams uint64) MoqMapFS_genType_Open_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Open.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	return MoqMapFS_genType_Open_paramsKey{
		Params: struct{ Name string }{
			Name: nameUsed,
		},
		Hashes: struct{ Name hash.Hash }{
			Name: nameUsedHash,
		},
	}
}

func (m *MoqMapFS_genType_recorder) ReadFile(name string) *MoqMapFS_genType_ReadFile_fnRecorder {
	return &MoqMapFS_genType_ReadFile_fnRecorder{
		Params: MoqMapFS_genType_ReadFile_params{
			Name: name,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMapFS_genType_ReadFile_fnRecorder) Any() *MoqMapFS_genType_ReadFile_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFile(r.Params))
		return nil
	}
	return &MoqMapFS_genType_ReadFile_anyParams{Recorder: r}
}

func (a *MoqMapFS_genType_ReadFile_anyParams) Name() *MoqMapFS_genType_ReadFile_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqMapFS_genType_ReadFile_fnRecorder) Seq() *MoqMapFS_genType_ReadFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFile(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMapFS_genType_ReadFile_fnRecorder) NoSeq() *MoqMapFS_genType_ReadFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFile(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMapFS_genType_ReadFile_fnRecorder) ReturnResults(result1 []byte, result2 error) *MoqMapFS_genType_ReadFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqMapFS_genType_ReadFile_doFn
		DoReturnFn MoqMapFS_genType_ReadFile_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMapFS_genType_ReadFile_fnRecorder) AndDo(fn MoqMapFS_genType_ReadFile_doFn) *MoqMapFS_genType_ReadFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMapFS_genType_ReadFile_fnRecorder) DoReturnResults(fn MoqMapFS_genType_ReadFile_doReturnFn) *MoqMapFS_genType_ReadFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqMapFS_genType_ReadFile_doFn
		DoReturnFn MoqMapFS_genType_ReadFile_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMapFS_genType_ReadFile_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMapFS_genType_ReadFile_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadFile {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMapFS_genType_ReadFile_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMapFS_genType_ReadFile_paramsKey]*MoqMapFS_genType_ReadFile_results{},
		}
		r.Moq.ResultsByParams_ReadFile = append(r.Moq.ResultsByParams_ReadFile, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadFile) {
			copy(r.Moq.ResultsByParams_ReadFile[insertAt+1:], r.Moq.ResultsByParams_ReadFile[insertAt:0])
			r.Moq.ResultsByParams_ReadFile[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadFile(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMapFS_genType_ReadFile_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMapFS_genType_ReadFile_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMapFS_genType_ReadFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqMapFS_genType_ReadFile_doFn
				DoReturnFn MoqMapFS_genType_ReadFile_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMapFS_genType) PrettyParams_ReadFile(params MoqMapFS_genType_ReadFile_params) string {
	return fmt.Sprintf("ReadFile(%#v)", params.Name)
}

func (m *MoqMapFS_genType) ParamsKey_ReadFile(params MoqMapFS_genType_ReadFile_params, anyParams uint64) MoqMapFS_genType_ReadFile_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadFile.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	return MoqMapFS_genType_ReadFile_paramsKey{
		Params: struct{ Name string }{
			Name: nameUsed,
		},
		Hashes: struct{ Name hash.Hash }{
			Name: nameUsedHash,
		},
	}
}

func (m *MoqMapFS_genType_recorder) Stat(name string) *MoqMapFS_genType_Stat_fnRecorder {
	return &MoqMapFS_genType_Stat_fnRecorder{
		Params: MoqMapFS_genType_Stat_params{
			Name: name,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMapFS_genType_Stat_fnRecorder) Any() *MoqMapFS_genType_Stat_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Stat(r.Params))
		return nil
	}
	return &MoqMapFS_genType_Stat_anyParams{Recorder: r}
}

func (a *MoqMapFS_genType_Stat_anyParams) Name() *MoqMapFS_genType_Stat_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqMapFS_genType_Stat_fnRecorder) Seq() *MoqMapFS_genType_Stat_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Stat(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMapFS_genType_Stat_fnRecorder) NoSeq() *MoqMapFS_genType_Stat_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Stat(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMapFS_genType_Stat_fnRecorder) ReturnResults(result1 fs.FileInfo, result2 error) *MoqMapFS_genType_Stat_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 fs.FileInfo
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqMapFS_genType_Stat_doFn
		DoReturnFn MoqMapFS_genType_Stat_doReturnFn
	}{
		Values: &struct {
			Result1 fs.FileInfo
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMapFS_genType_Stat_fnRecorder) AndDo(fn MoqMapFS_genType_Stat_doFn) *MoqMapFS_genType_Stat_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMapFS_genType_Stat_fnRecorder) DoReturnResults(fn MoqMapFS_genType_Stat_doReturnFn) *MoqMapFS_genType_Stat_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 fs.FileInfo
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqMapFS_genType_Stat_doFn
		DoReturnFn MoqMapFS_genType_Stat_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMapFS_genType_Stat_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMapFS_genType_Stat_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Stat {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMapFS_genType_Stat_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMapFS_genType_Stat_paramsKey]*MoqMapFS_genType_Stat_results{},
		}
		r.Moq.ResultsByParams_Stat = append(r.Moq.ResultsByParams_Stat, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Stat) {
			copy(r.Moq.ResultsByParams_Stat[insertAt+1:], r.Moq.ResultsByParams_Stat[insertAt:0])
			r.Moq.ResultsByParams_Stat[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Stat(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMapFS_genType_Stat_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMapFS_genType_Stat_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMapFS_genType_Stat_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 fs.FileInfo
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqMapFS_genType_Stat_doFn
				DoReturnFn MoqMapFS_genType_Stat_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMapFS_genType) PrettyParams_Stat(params MoqMapFS_genType_Stat_params) string {
	return fmt.Sprintf("Stat(%#v)", params.Name)
}

func (m *MoqMapFS_genType) ParamsKey_Stat(params MoqMapFS_genType_Stat_params, anyParams uint64) MoqMapFS_genType_Stat_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Stat.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	return MoqMapFS_genType_Stat_paramsKey{
		Params: struct{ Name string }{
			Name: nameUsed,
		},
		Hashes: struct{ Name hash.Hash }{
			Name: nameUsedHash,
		},
	}
}

func (m *MoqMapFS_genType_recorder) ReadDir(name string) *MoqMapFS_genType_ReadDir_fnRecorder {
	return &MoqMapFS_genType_ReadDir_fnRecorder{
		Params: MoqMapFS_genType_ReadDir_params{
			Name: name,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMapFS_genType_ReadDir_fnRecorder) Any() *MoqMapFS_genType_ReadDir_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadDir(r.Params))
		return nil
	}
	return &MoqMapFS_genType_ReadDir_anyParams{Recorder: r}
}

func (a *MoqMapFS_genType_ReadDir_anyParams) Name() *MoqMapFS_genType_ReadDir_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqMapFS_genType_ReadDir_fnRecorder) Seq() *MoqMapFS_genType_ReadDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadDir(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMapFS_genType_ReadDir_fnRecorder) NoSeq() *MoqMapFS_genType_ReadDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadDir(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMapFS_genType_ReadDir_fnRecorder) ReturnResults(result1 []fs.DirEntry, result2 error) *MoqMapFS_genType_ReadDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []fs.DirEntry
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqMapFS_genType_ReadDir_doFn
		DoReturnFn MoqMapFS_genType_ReadDir_doReturnFn
	}{
		Values: &struct {
			Result1 []fs.DirEntry
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMapFS_genType_ReadDir_fnRecorder) AndDo(fn MoqMapFS_genType_ReadDir_doFn) *MoqMapFS_genType_ReadDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMapFS_genType_ReadDir_fnRecorder) DoReturnResults(fn MoqMapFS_genType_ReadDir_doReturnFn) *MoqMapFS_genType_ReadDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []fs.DirEntry
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqMapFS_genType_ReadDir_doFn
		DoReturnFn MoqMapFS_genType_ReadDir_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMapFS_genType_ReadDir_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMapFS_genType_ReadDir_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadDir {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMapFS_genType_ReadDir_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMapFS_genType_ReadDir_paramsKey]*MoqMapFS_genType_ReadDir_results{},
		}
		r.Moq.ResultsByParams_ReadDir = append(r.Moq.ResultsByParams_ReadDir, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadDir) {
			copy(r.Moq.ResultsByParams_ReadDir[insertAt+1:], r.Moq.ResultsByParams_ReadDir[insertAt:0])
			r.Moq.ResultsByParams_ReadDir[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadDir(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMapFS_genType_ReadDir_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMapFS_genType_ReadDir_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMapFS_genType_ReadDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []fs.DirEntry
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqMapFS_genType_ReadDir_doFn
				DoReturnFn MoqMapFS_genType_ReadDir_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMapFS_genType) PrettyParams_ReadDir(params MoqMapFS_genType_ReadDir_params) string {
	return fmt.Sprintf("ReadDir(%#v)", params.Name)
}

func (m *MoqMapFS_genType) ParamsKey_ReadDir(params MoqMapFS_genType_ReadDir_params, anyParams uint64) MoqMapFS_genType_ReadDir_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadDir.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	return MoqMapFS_genType_ReadDir_paramsKey{
		Params: struct{ Name string }{
			Name: nameUsed,
		},
		Hashes: struct{ Name hash.Hash }{
			Name: nameUsedHash,
		},
	}
}

func (m *MoqMapFS_genType_recorder) Glob(pattern string) *MoqMapFS_genType_Glob_fnRecorder {
	return &MoqMapFS_genType_Glob_fnRecorder{
		Params: MoqMapFS_genType_Glob_params{
			Pattern: pattern,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMapFS_genType_Glob_fnRecorder) Any() *MoqMapFS_genType_Glob_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Glob(r.Params))
		return nil
	}
	return &MoqMapFS_genType_Glob_anyParams{Recorder: r}
}

func (a *MoqMapFS_genType_Glob_anyParams) Pattern() *MoqMapFS_genType_Glob_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqMapFS_genType_Glob_fnRecorder) Seq() *MoqMapFS_genType_Glob_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Glob(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMapFS_genType_Glob_fnRecorder) NoSeq() *MoqMapFS_genType_Glob_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Glob(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMapFS_genType_Glob_fnRecorder) ReturnResults(result1 []string, result2 error) *MoqMapFS_genType_Glob_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqMapFS_genType_Glob_doFn
		DoReturnFn MoqMapFS_genType_Glob_doReturnFn
	}{
		Values: &struct {
			Result1 []string
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMapFS_genType_Glob_fnRecorder) AndDo(fn MoqMapFS_genType_Glob_doFn) *MoqMapFS_genType_Glob_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMapFS_genType_Glob_fnRecorder) DoReturnResults(fn MoqMapFS_genType_Glob_doReturnFn) *MoqMapFS_genType_Glob_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqMapFS_genType_Glob_doFn
		DoReturnFn MoqMapFS_genType_Glob_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMapFS_genType_Glob_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMapFS_genType_Glob_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Glob {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMapFS_genType_Glob_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMapFS_genType_Glob_paramsKey]*MoqMapFS_genType_Glob_results{},
		}
		r.Moq.ResultsByParams_Glob = append(r.Moq.ResultsByParams_Glob, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Glob) {
			copy(r.Moq.ResultsByParams_Glob[insertAt+1:], r.Moq.ResultsByParams_Glob[insertAt:0])
			r.Moq.ResultsByParams_Glob[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Glob(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMapFS_genType_Glob_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMapFS_genType_Glob_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMapFS_genType_Glob_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []string
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqMapFS_genType_Glob_doFn
				DoReturnFn MoqMapFS_genType_Glob_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMapFS_genType) PrettyParams_Glob(params MoqMapFS_genType_Glob_params) string {
	return fmt.Sprintf("Glob(%#v)", params.Pattern)
}

func (m *MoqMapFS_genType) ParamsKey_Glob(params MoqMapFS_genType_Glob_params, anyParams uint64) MoqMapFS_genType_Glob_paramsKey {
	m.Scene.T.Helper()
	var patternUsed string
	var patternUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Glob.Pattern == moq.ParamIndexByValue {
			patternUsed = params.Pattern
		} else {
			patternUsedHash = hash.DeepHash(params.Pattern)
		}
	}
	return MoqMapFS_genType_Glob_paramsKey{
		Params: struct{ Pattern string }{
			Pattern: patternUsed,
		},
		Hashes: struct{ Pattern hash.Hash }{
			Pattern: patternUsedHash,
		},
	}
}

func (m *MoqMapFS_genType_recorder) Sub(dir string) *MoqMapFS_genType_Sub_fnRecorder {
	return &MoqMapFS_genType_Sub_fnRecorder{
		Params: MoqMapFS_genType_Sub_params{
			Dir: dir,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMapFS_genType_Sub_fnRecorder) Any() *MoqMapFS_genType_Sub_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sub(r.Params))
		return nil
	}
	return &MoqMapFS_genType_Sub_anyParams{Recorder: r}
}

func (a *MoqMapFS_genType_Sub_anyParams) Dir() *MoqMapFS_genType_Sub_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqMapFS_genType_Sub_fnRecorder) Seq() *MoqMapFS_genType_Sub_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sub(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMapFS_genType_Sub_fnRecorder) NoSeq() *MoqMapFS_genType_Sub_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sub(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMapFS_genType_Sub_fnRecorder) ReturnResults(result1 fs.FS, result2 error) *MoqMapFS_genType_Sub_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 fs.FS
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqMapFS_genType_Sub_doFn
		DoReturnFn MoqMapFS_genType_Sub_doReturnFn
	}{
		Values: &struct {
			Result1 fs.FS
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMapFS_genType_Sub_fnRecorder) AndDo(fn MoqMapFS_genType_Sub_doFn) *MoqMapFS_genType_Sub_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMapFS_genType_Sub_fnRecorder) DoReturnResults(fn MoqMapFS_genType_Sub_doReturnFn) *MoqMapFS_genType_Sub_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 fs.FS
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqMapFS_genType_Sub_doFn
		DoReturnFn MoqMapFS_genType_Sub_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMapFS_genType_Sub_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMapFS_genType_Sub_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Sub {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMapFS_genType_Sub_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMapFS_genType_Sub_paramsKey]*MoqMapFS_genType_Sub_results{},
		}
		r.Moq.ResultsByParams_Sub = append(r.Moq.ResultsByParams_Sub, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Sub) {
			copy(r.Moq.ResultsByParams_Sub[insertAt+1:], r.Moq.ResultsByParams_Sub[insertAt:0])
			r.Moq.ResultsByParams_Sub[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Sub(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMapFS_genType_Sub_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMapFS_genType_Sub_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMapFS_genType_Sub_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 fs.FS
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqMapFS_genType_Sub_doFn
				DoReturnFn MoqMapFS_genType_Sub_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMapFS_genType) PrettyParams_Sub(params MoqMapFS_genType_Sub_params) string {
	return fmt.Sprintf("Sub(%#v)", params.Dir)
}

func (m *MoqMapFS_genType) ParamsKey_Sub(params MoqMapFS_genType_Sub_params, anyParams uint64) MoqMapFS_genType_Sub_paramsKey {
	m.Scene.T.Helper()
	var dirUsed string
	var dirUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Sub.Dir == moq.ParamIndexByValue {
			dirUsed = params.Dir
		} else {
			dirUsedHash = hash.DeepHash(params.Dir)
		}
	}
	return MoqMapFS_genType_Sub_paramsKey{
		Params: struct{ Dir string }{
			Dir: dirUsed,
		},
		Hashes: struct{ Dir hash.Hash }{
			Dir: dirUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqMapFS_genType) Reset() {
	m.ResultsByParams_Open = nil
	m.ResultsByParams_ReadFile = nil
	m.ResultsByParams_Stat = nil
	m.ResultsByParams_ReadDir = nil
	m.ResultsByParams_Glob = nil
	m.ResultsByParams_Sub = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqMapFS_genType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Open {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Open(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadFile {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadFile(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Stat {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Stat(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadDir {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadDir(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Glob {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Glob(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Sub {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Sub(results.Params))
			}
		}
	}
}
