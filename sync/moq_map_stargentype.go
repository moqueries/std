// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package sync

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that sync.Map_starGenType is mocked
// completely
var _ Map_starGenType = (*MoqMap_starGenType_mock)(nil)

// Map_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Map_starGenType interface {
	Load(key interface{}) (value interface{}, ok bool)
	Store(key, value interface{})
	LoadOrStore(key, value interface{}) (actual interface{}, loaded bool)
	LoadAndDelete(key interface{}) (value interface{}, loaded bool)
	Delete(key interface{})
	Range(f func(key, value interface{}) bool)
}

// MoqMap_starGenType holds the state of a moq of the Map_starGenType type
type MoqMap_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqMap_starGenType_mock

	ResultsByParams_Load          []MoqMap_starGenType_Load_resultsByParams
	ResultsByParams_Store         []MoqMap_starGenType_Store_resultsByParams
	ResultsByParams_LoadOrStore   []MoqMap_starGenType_LoadOrStore_resultsByParams
	ResultsByParams_LoadAndDelete []MoqMap_starGenType_LoadAndDelete_resultsByParams
	ResultsByParams_Delete        []MoqMap_starGenType_Delete_resultsByParams
	ResultsByParams_Range         []MoqMap_starGenType_Range_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Load struct {
				Key moq.ParamIndexing
			}
			Store struct {
				Key   moq.ParamIndexing
				Value moq.ParamIndexing
			}
			LoadOrStore struct {
				Key   moq.ParamIndexing
				Value moq.ParamIndexing
			}
			LoadAndDelete struct {
				Key moq.ParamIndexing
			}
			Delete struct {
				Key moq.ParamIndexing
			}
			Range struct {
				F moq.ParamIndexing
			}
		}
	}
	// MoqMap_starGenType_mock isolates the mock interface of the Map_starGenType
}

// type
type MoqMap_starGenType_mock struct {
	Moq *MoqMap_starGenType
}

// MoqMap_starGenType_recorder isolates the recorder interface of the
// Map_starGenType type
type MoqMap_starGenType_recorder struct {
	Moq *MoqMap_starGenType
}

// MoqMap_starGenType_Load_params holds the params of the Map_starGenType type
type MoqMap_starGenType_Load_params struct{ Key interface{} }

// MoqMap_starGenType_Load_paramsKey holds the map key params of the
// Map_starGenType type
type MoqMap_starGenType_Load_paramsKey struct {
	Params struct{ Key interface{} }
	Hashes struct{ Key hash.Hash }
}

// MoqMap_starGenType_Load_resultsByParams contains the results for a given set
// of parameters for the Map_starGenType type
type MoqMap_starGenType_Load_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMap_starGenType_Load_paramsKey]*MoqMap_starGenType_Load_results
}

// MoqMap_starGenType_Load_doFn defines the type of function needed when
// calling AndDo for the Map_starGenType type
type MoqMap_starGenType_Load_doFn func(key interface{})

// MoqMap_starGenType_Load_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Map_starGenType type
type MoqMap_starGenType_Load_doReturnFn func(key interface{}) (value interface{}, ok bool)

// MoqMap_starGenType_Load_results holds the results of the Map_starGenType
// type
type MoqMap_starGenType_Load_results struct {
	Params  MoqMap_starGenType_Load_params
	Results []struct {
		Values *struct {
			Value interface{}
			Ok    bool
		}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Load_doFn
		DoReturnFn MoqMap_starGenType_Load_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMap_starGenType_Load_fnRecorder routes recorded function calls to the
// MoqMap_starGenType moq
type MoqMap_starGenType_Load_fnRecorder struct {
	Params    MoqMap_starGenType_Load_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMap_starGenType_Load_results
	Moq       *MoqMap_starGenType
}

// MoqMap_starGenType_Load_anyParams isolates the any params functions of the
// Map_starGenType type
type MoqMap_starGenType_Load_anyParams struct {
	Recorder *MoqMap_starGenType_Load_fnRecorder
}

// MoqMap_starGenType_Store_params holds the params of the Map_starGenType type
type MoqMap_starGenType_Store_params struct{ Key, Value interface{} }

// MoqMap_starGenType_Store_paramsKey holds the map key params of the
// Map_starGenType type
type MoqMap_starGenType_Store_paramsKey struct {
	Params struct{ Key, Value interface{} }
	Hashes struct{ Key, Value hash.Hash }
}

// MoqMap_starGenType_Store_resultsByParams contains the results for a given
// set of parameters for the Map_starGenType type
type MoqMap_starGenType_Store_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMap_starGenType_Store_paramsKey]*MoqMap_starGenType_Store_results
}

// MoqMap_starGenType_Store_doFn defines the type of function needed when
// calling AndDo for the Map_starGenType type
type MoqMap_starGenType_Store_doFn func(key, value interface{})

// MoqMap_starGenType_Store_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Map_starGenType type
type MoqMap_starGenType_Store_doReturnFn func(key, value interface{})

// MoqMap_starGenType_Store_results holds the results of the Map_starGenType
// type
type MoqMap_starGenType_Store_results struct {
	Params  MoqMap_starGenType_Store_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Store_doFn
		DoReturnFn MoqMap_starGenType_Store_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMap_starGenType_Store_fnRecorder routes recorded function calls to the
// MoqMap_starGenType moq
type MoqMap_starGenType_Store_fnRecorder struct {
	Params    MoqMap_starGenType_Store_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMap_starGenType_Store_results
	Moq       *MoqMap_starGenType
}

// MoqMap_starGenType_Store_anyParams isolates the any params functions of the
// Map_starGenType type
type MoqMap_starGenType_Store_anyParams struct {
	Recorder *MoqMap_starGenType_Store_fnRecorder
}

// MoqMap_starGenType_LoadOrStore_params holds the params of the
// Map_starGenType type
type MoqMap_starGenType_LoadOrStore_params struct{ Key, Value interface{} }

// MoqMap_starGenType_LoadOrStore_paramsKey holds the map key params of the
// Map_starGenType type
type MoqMap_starGenType_LoadOrStore_paramsKey struct {
	Params struct{ Key, Value interface{} }
	Hashes struct{ Key, Value hash.Hash }
}

// MoqMap_starGenType_LoadOrStore_resultsByParams contains the results for a
// given set of parameters for the Map_starGenType type
type MoqMap_starGenType_LoadOrStore_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMap_starGenType_LoadOrStore_paramsKey]*MoqMap_starGenType_LoadOrStore_results
}

// MoqMap_starGenType_LoadOrStore_doFn defines the type of function needed when
// calling AndDo for the Map_starGenType type
type MoqMap_starGenType_LoadOrStore_doFn func(key, value interface{})

// MoqMap_starGenType_LoadOrStore_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Map_starGenType type
type MoqMap_starGenType_LoadOrStore_doReturnFn func(key, value interface{}) (actual interface{}, loaded bool)

// MoqMap_starGenType_LoadOrStore_results holds the results of the
// Map_starGenType type
type MoqMap_starGenType_LoadOrStore_results struct {
	Params  MoqMap_starGenType_LoadOrStore_params
	Results []struct {
		Values *struct {
			Actual interface{}
			Loaded bool
		}
		Sequence   uint32
		DoFn       MoqMap_starGenType_LoadOrStore_doFn
		DoReturnFn MoqMap_starGenType_LoadOrStore_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMap_starGenType_LoadOrStore_fnRecorder routes recorded function calls to
// the MoqMap_starGenType moq
type MoqMap_starGenType_LoadOrStore_fnRecorder struct {
	Params    MoqMap_starGenType_LoadOrStore_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMap_starGenType_LoadOrStore_results
	Moq       *MoqMap_starGenType
}

// MoqMap_starGenType_LoadOrStore_anyParams isolates the any params functions
// of the Map_starGenType type
type MoqMap_starGenType_LoadOrStore_anyParams struct {
	Recorder *MoqMap_starGenType_LoadOrStore_fnRecorder
}

// MoqMap_starGenType_LoadAndDelete_params holds the params of the
// Map_starGenType type
type MoqMap_starGenType_LoadAndDelete_params struct{ Key interface{} }

// MoqMap_starGenType_LoadAndDelete_paramsKey holds the map key params of the
// Map_starGenType type
type MoqMap_starGenType_LoadAndDelete_paramsKey struct {
	Params struct{ Key interface{} }
	Hashes struct{ Key hash.Hash }
}

// MoqMap_starGenType_LoadAndDelete_resultsByParams contains the results for a
// given set of parameters for the Map_starGenType type
type MoqMap_starGenType_LoadAndDelete_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMap_starGenType_LoadAndDelete_paramsKey]*MoqMap_starGenType_LoadAndDelete_results
}

// MoqMap_starGenType_LoadAndDelete_doFn defines the type of function needed
// when calling AndDo for the Map_starGenType type
type MoqMap_starGenType_LoadAndDelete_doFn func(key interface{})

// MoqMap_starGenType_LoadAndDelete_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Map_starGenType type
type MoqMap_starGenType_LoadAndDelete_doReturnFn func(key interface{}) (value interface{}, loaded bool)

// MoqMap_starGenType_LoadAndDelete_results holds the results of the
// Map_starGenType type
type MoqMap_starGenType_LoadAndDelete_results struct {
	Params  MoqMap_starGenType_LoadAndDelete_params
	Results []struct {
		Values *struct {
			Value  interface{}
			Loaded bool
		}
		Sequence   uint32
		DoFn       MoqMap_starGenType_LoadAndDelete_doFn
		DoReturnFn MoqMap_starGenType_LoadAndDelete_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMap_starGenType_LoadAndDelete_fnRecorder routes recorded function calls
// to the MoqMap_starGenType moq
type MoqMap_starGenType_LoadAndDelete_fnRecorder struct {
	Params    MoqMap_starGenType_LoadAndDelete_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMap_starGenType_LoadAndDelete_results
	Moq       *MoqMap_starGenType
}

// MoqMap_starGenType_LoadAndDelete_anyParams isolates the any params functions
// of the Map_starGenType type
type MoqMap_starGenType_LoadAndDelete_anyParams struct {
	Recorder *MoqMap_starGenType_LoadAndDelete_fnRecorder
}

// MoqMap_starGenType_Delete_params holds the params of the Map_starGenType
// type
type MoqMap_starGenType_Delete_params struct{ Key interface{} }

// MoqMap_starGenType_Delete_paramsKey holds the map key params of the
// Map_starGenType type
type MoqMap_starGenType_Delete_paramsKey struct {
	Params struct{ Key interface{} }
	Hashes struct{ Key hash.Hash }
}

// MoqMap_starGenType_Delete_resultsByParams contains the results for a given
// set of parameters for the Map_starGenType type
type MoqMap_starGenType_Delete_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMap_starGenType_Delete_paramsKey]*MoqMap_starGenType_Delete_results
}

// MoqMap_starGenType_Delete_doFn defines the type of function needed when
// calling AndDo for the Map_starGenType type
type MoqMap_starGenType_Delete_doFn func(key interface{})

// MoqMap_starGenType_Delete_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Map_starGenType type
type MoqMap_starGenType_Delete_doReturnFn func(key interface{})

// MoqMap_starGenType_Delete_results holds the results of the Map_starGenType
// type
type MoqMap_starGenType_Delete_results struct {
	Params  MoqMap_starGenType_Delete_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Delete_doFn
		DoReturnFn MoqMap_starGenType_Delete_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMap_starGenType_Delete_fnRecorder routes recorded function calls to the
// MoqMap_starGenType moq
type MoqMap_starGenType_Delete_fnRecorder struct {
	Params    MoqMap_starGenType_Delete_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMap_starGenType_Delete_results
	Moq       *MoqMap_starGenType
}

// MoqMap_starGenType_Delete_anyParams isolates the any params functions of the
// Map_starGenType type
type MoqMap_starGenType_Delete_anyParams struct {
	Recorder *MoqMap_starGenType_Delete_fnRecorder
}

// MoqMap_starGenType_Range_params holds the params of the Map_starGenType type
type MoqMap_starGenType_Range_params struct {
	F func(key, value interface{}) bool
}

// MoqMap_starGenType_Range_paramsKey holds the map key params of the
// Map_starGenType type
type MoqMap_starGenType_Range_paramsKey struct {
	Params struct{}
	Hashes struct{ F hash.Hash }
}

// MoqMap_starGenType_Range_resultsByParams contains the results for a given
// set of parameters for the Map_starGenType type
type MoqMap_starGenType_Range_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMap_starGenType_Range_paramsKey]*MoqMap_starGenType_Range_results
}

// MoqMap_starGenType_Range_doFn defines the type of function needed when
// calling AndDo for the Map_starGenType type
type MoqMap_starGenType_Range_doFn func(f func(key, value interface{}) bool)

// MoqMap_starGenType_Range_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Map_starGenType type
type MoqMap_starGenType_Range_doReturnFn func(f func(key, value interface{}) bool)

// MoqMap_starGenType_Range_results holds the results of the Map_starGenType
// type
type MoqMap_starGenType_Range_results struct {
	Params  MoqMap_starGenType_Range_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Range_doFn
		DoReturnFn MoqMap_starGenType_Range_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMap_starGenType_Range_fnRecorder routes recorded function calls to the
// MoqMap_starGenType moq
type MoqMap_starGenType_Range_fnRecorder struct {
	Params    MoqMap_starGenType_Range_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMap_starGenType_Range_results
	Moq       *MoqMap_starGenType
}

// MoqMap_starGenType_Range_anyParams isolates the any params functions of the
// Map_starGenType type
type MoqMap_starGenType_Range_anyParams struct {
	Recorder *MoqMap_starGenType_Range_fnRecorder
}

// NewMoqMap_starGenType creates a new moq of the Map_starGenType type
func NewMoqMap_starGenType(scene *moq.Scene, config *moq.Config) *MoqMap_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqMap_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqMap_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Load struct {
					Key moq.ParamIndexing
				}
				Store struct {
					Key   moq.ParamIndexing
					Value moq.ParamIndexing
				}
				LoadOrStore struct {
					Key   moq.ParamIndexing
					Value moq.ParamIndexing
				}
				LoadAndDelete struct {
					Key moq.ParamIndexing
				}
				Delete struct {
					Key moq.ParamIndexing
				}
				Range struct {
					F moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Load struct {
				Key moq.ParamIndexing
			}
			Store struct {
				Key   moq.ParamIndexing
				Value moq.ParamIndexing
			}
			LoadOrStore struct {
				Key   moq.ParamIndexing
				Value moq.ParamIndexing
			}
			LoadAndDelete struct {
				Key moq.ParamIndexing
			}
			Delete struct {
				Key moq.ParamIndexing
			}
			Range struct {
				F moq.ParamIndexing
			}
		}{
			Load: struct {
				Key moq.ParamIndexing
			}{
				Key: moq.ParamIndexByHash,
			},
			Store: struct {
				Key   moq.ParamIndexing
				Value moq.ParamIndexing
			}{
				Key:   moq.ParamIndexByHash,
				Value: moq.ParamIndexByHash,
			},
			LoadOrStore: struct {
				Key   moq.ParamIndexing
				Value moq.ParamIndexing
			}{
				Key:   moq.ParamIndexByHash,
				Value: moq.ParamIndexByHash,
			},
			LoadAndDelete: struct {
				Key moq.ParamIndexing
			}{
				Key: moq.ParamIndexByHash,
			},
			Delete: struct {
				Key moq.ParamIndexing
			}{
				Key: moq.ParamIndexByHash,
			},
			Range: struct {
				F moq.ParamIndexing
			}{
				F: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Map_starGenType type
func (m *MoqMap_starGenType) Mock() *MoqMap_starGenType_mock { return m.Moq }

func (m *MoqMap_starGenType_mock) Load(key interface{}) (value interface{}, ok bool) {
	m.Moq.Scene.T.Helper()
	params := MoqMap_starGenType_Load_params{
		Key: key,
	}
	var results *MoqMap_starGenType_Load_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Load {
		paramsKey := m.Moq.ParamsKey_Load(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Load(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Load(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Load(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key)
	}

	if result.Values != nil {
		value = result.Values.Value
		ok = result.Values.Ok
	}
	if result.DoReturnFn != nil {
		value, ok = result.DoReturnFn(key)
	}
	return
}

func (m *MoqMap_starGenType_mock) Store(key, value interface{}) {
	m.Moq.Scene.T.Helper()
	params := MoqMap_starGenType_Store_params{
		Key:   key,
		Value: value,
	}
	var results *MoqMap_starGenType_Store_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Store {
		paramsKey := m.Moq.ParamsKey_Store(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Store(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Store(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Store(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key, value)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(key, value)
	}
	return
}

func (m *MoqMap_starGenType_mock) LoadOrStore(key, value interface{}) (actual interface{}, loaded bool) {
	m.Moq.Scene.T.Helper()
	params := MoqMap_starGenType_LoadOrStore_params{
		Key:   key,
		Value: value,
	}
	var results *MoqMap_starGenType_LoadOrStore_results
	for _, resultsByParams := range m.Moq.ResultsByParams_LoadOrStore {
		paramsKey := m.Moq.ParamsKey_LoadOrStore(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_LoadOrStore(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_LoadOrStore(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_LoadOrStore(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key, value)
	}

	if result.Values != nil {
		actual = result.Values.Actual
		loaded = result.Values.Loaded
	}
	if result.DoReturnFn != nil {
		actual, loaded = result.DoReturnFn(key, value)
	}
	return
}

func (m *MoqMap_starGenType_mock) LoadAndDelete(key interface{}) (value interface{}, loaded bool) {
	m.Moq.Scene.T.Helper()
	params := MoqMap_starGenType_LoadAndDelete_params{
		Key: key,
	}
	var results *MoqMap_starGenType_LoadAndDelete_results
	for _, resultsByParams := range m.Moq.ResultsByParams_LoadAndDelete {
		paramsKey := m.Moq.ParamsKey_LoadAndDelete(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_LoadAndDelete(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_LoadAndDelete(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_LoadAndDelete(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key)
	}

	if result.Values != nil {
		value = result.Values.Value
		loaded = result.Values.Loaded
	}
	if result.DoReturnFn != nil {
		value, loaded = result.DoReturnFn(key)
	}
	return
}

func (m *MoqMap_starGenType_mock) Delete(key interface{}) {
	m.Moq.Scene.T.Helper()
	params := MoqMap_starGenType_Delete_params{
		Key: key,
	}
	var results *MoqMap_starGenType_Delete_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Delete {
		paramsKey := m.Moq.ParamsKey_Delete(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Delete(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Delete(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Delete(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(key)
	}
	return
}

func (m *MoqMap_starGenType_mock) Range(f func(key, value interface{}) bool) {
	m.Moq.Scene.T.Helper()
	params := MoqMap_starGenType_Range_params{
		F: f,
	}
	var results *MoqMap_starGenType_Range_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Range {
		paramsKey := m.Moq.ParamsKey_Range(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Range(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Range(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Range(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(f)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(f)
	}
	return
}

// OnCall returns the recorder implementation of the Map_starGenType type
func (m *MoqMap_starGenType) OnCall() *MoqMap_starGenType_recorder {
	return &MoqMap_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqMap_starGenType_recorder) Load(key interface{}) *MoqMap_starGenType_Load_fnRecorder {
	return &MoqMap_starGenType_Load_fnRecorder{
		Params: MoqMap_starGenType_Load_params{
			Key: key,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMap_starGenType_Load_fnRecorder) Any() *MoqMap_starGenType_Load_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Load(r.Params))
		return nil
	}
	return &MoqMap_starGenType_Load_anyParams{Recorder: r}
}

func (a *MoqMap_starGenType_Load_anyParams) Key() *MoqMap_starGenType_Load_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqMap_starGenType_Load_fnRecorder) Seq() *MoqMap_starGenType_Load_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Load(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMap_starGenType_Load_fnRecorder) NoSeq() *MoqMap_starGenType_Load_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Load(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMap_starGenType_Load_fnRecorder) ReturnResults(value interface{}, ok bool) *MoqMap_starGenType_Load_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Value interface{}
			Ok    bool
		}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Load_doFn
		DoReturnFn MoqMap_starGenType_Load_doReturnFn
	}{
		Values: &struct {
			Value interface{}
			Ok    bool
		}{
			Value: value,
			Ok:    ok,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMap_starGenType_Load_fnRecorder) AndDo(fn MoqMap_starGenType_Load_doFn) *MoqMap_starGenType_Load_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMap_starGenType_Load_fnRecorder) DoReturnResults(fn MoqMap_starGenType_Load_doReturnFn) *MoqMap_starGenType_Load_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Value interface{}
			Ok    bool
		}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Load_doFn
		DoReturnFn MoqMap_starGenType_Load_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMap_starGenType_Load_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMap_starGenType_Load_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Load {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMap_starGenType_Load_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMap_starGenType_Load_paramsKey]*MoqMap_starGenType_Load_results{},
		}
		r.Moq.ResultsByParams_Load = append(r.Moq.ResultsByParams_Load, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Load) {
			copy(r.Moq.ResultsByParams_Load[insertAt+1:], r.Moq.ResultsByParams_Load[insertAt:0])
			r.Moq.ResultsByParams_Load[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Load(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMap_starGenType_Load_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMap_starGenType_Load_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMap_starGenType_Load_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Value interface{}
					Ok    bool
				}
				Sequence   uint32
				DoFn       MoqMap_starGenType_Load_doFn
				DoReturnFn MoqMap_starGenType_Load_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMap_starGenType) PrettyParams_Load(params MoqMap_starGenType_Load_params) string {
	return fmt.Sprintf("Load(%#v)", params.Key)
}

func (m *MoqMap_starGenType) ParamsKey_Load(params MoqMap_starGenType_Load_params, anyParams uint64) MoqMap_starGenType_Load_paramsKey {
	m.Scene.T.Helper()
	var keyUsed interface{}
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Load.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	return MoqMap_starGenType_Load_paramsKey{
		Params: struct{ Key interface{} }{
			Key: keyUsed,
		},
		Hashes: struct{ Key hash.Hash }{
			Key: keyUsedHash,
		},
	}
}

func (m *MoqMap_starGenType_recorder) Store(key, value interface{}) *MoqMap_starGenType_Store_fnRecorder {
	return &MoqMap_starGenType_Store_fnRecorder{
		Params: MoqMap_starGenType_Store_params{
			Key:   key,
			Value: value,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMap_starGenType_Store_fnRecorder) Any() *MoqMap_starGenType_Store_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Store(r.Params))
		return nil
	}
	return &MoqMap_starGenType_Store_anyParams{Recorder: r}
}

func (a *MoqMap_starGenType_Store_anyParams) Key() *MoqMap_starGenType_Store_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqMap_starGenType_Store_anyParams) Value() *MoqMap_starGenType_Store_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqMap_starGenType_Store_fnRecorder) Seq() *MoqMap_starGenType_Store_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Store(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMap_starGenType_Store_fnRecorder) NoSeq() *MoqMap_starGenType_Store_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Store(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMap_starGenType_Store_fnRecorder) ReturnResults() *MoqMap_starGenType_Store_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Store_doFn
		DoReturnFn MoqMap_starGenType_Store_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMap_starGenType_Store_fnRecorder) AndDo(fn MoqMap_starGenType_Store_doFn) *MoqMap_starGenType_Store_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMap_starGenType_Store_fnRecorder) DoReturnResults(fn MoqMap_starGenType_Store_doReturnFn) *MoqMap_starGenType_Store_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Store_doFn
		DoReturnFn MoqMap_starGenType_Store_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMap_starGenType_Store_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMap_starGenType_Store_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Store {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMap_starGenType_Store_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMap_starGenType_Store_paramsKey]*MoqMap_starGenType_Store_results{},
		}
		r.Moq.ResultsByParams_Store = append(r.Moq.ResultsByParams_Store, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Store) {
			copy(r.Moq.ResultsByParams_Store[insertAt+1:], r.Moq.ResultsByParams_Store[insertAt:0])
			r.Moq.ResultsByParams_Store[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Store(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMap_starGenType_Store_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMap_starGenType_Store_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMap_starGenType_Store_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqMap_starGenType_Store_doFn
				DoReturnFn MoqMap_starGenType_Store_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMap_starGenType) PrettyParams_Store(params MoqMap_starGenType_Store_params) string {
	return fmt.Sprintf("Store(%#v, %#v)", params.Key, params.Value)
}

func (m *MoqMap_starGenType) ParamsKey_Store(params MoqMap_starGenType_Store_params, anyParams uint64) MoqMap_starGenType_Store_paramsKey {
	m.Scene.T.Helper()
	var keyUsed interface{}
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Store.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	var valueUsed interface{}
	var valueUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Store.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	return MoqMap_starGenType_Store_paramsKey{
		Params: struct{ Key, Value interface{} }{
			Key:   keyUsed,
			Value: valueUsed,
		},
		Hashes: struct{ Key, Value hash.Hash }{
			Key:   keyUsedHash,
			Value: valueUsedHash,
		},
	}
}

func (m *MoqMap_starGenType_recorder) LoadOrStore(key, value interface{}) *MoqMap_starGenType_LoadOrStore_fnRecorder {
	return &MoqMap_starGenType_LoadOrStore_fnRecorder{
		Params: MoqMap_starGenType_LoadOrStore_params{
			Key:   key,
			Value: value,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMap_starGenType_LoadOrStore_fnRecorder) Any() *MoqMap_starGenType_LoadOrStore_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LoadOrStore(r.Params))
		return nil
	}
	return &MoqMap_starGenType_LoadOrStore_anyParams{Recorder: r}
}

func (a *MoqMap_starGenType_LoadOrStore_anyParams) Key() *MoqMap_starGenType_LoadOrStore_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqMap_starGenType_LoadOrStore_anyParams) Value() *MoqMap_starGenType_LoadOrStore_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqMap_starGenType_LoadOrStore_fnRecorder) Seq() *MoqMap_starGenType_LoadOrStore_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LoadOrStore(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMap_starGenType_LoadOrStore_fnRecorder) NoSeq() *MoqMap_starGenType_LoadOrStore_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LoadOrStore(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMap_starGenType_LoadOrStore_fnRecorder) ReturnResults(actual interface{}, loaded bool) *MoqMap_starGenType_LoadOrStore_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Actual interface{}
			Loaded bool
		}
		Sequence   uint32
		DoFn       MoqMap_starGenType_LoadOrStore_doFn
		DoReturnFn MoqMap_starGenType_LoadOrStore_doReturnFn
	}{
		Values: &struct {
			Actual interface{}
			Loaded bool
		}{
			Actual: actual,
			Loaded: loaded,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMap_starGenType_LoadOrStore_fnRecorder) AndDo(fn MoqMap_starGenType_LoadOrStore_doFn) *MoqMap_starGenType_LoadOrStore_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMap_starGenType_LoadOrStore_fnRecorder) DoReturnResults(fn MoqMap_starGenType_LoadOrStore_doReturnFn) *MoqMap_starGenType_LoadOrStore_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Actual interface{}
			Loaded bool
		}
		Sequence   uint32
		DoFn       MoqMap_starGenType_LoadOrStore_doFn
		DoReturnFn MoqMap_starGenType_LoadOrStore_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMap_starGenType_LoadOrStore_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMap_starGenType_LoadOrStore_resultsByParams
	for n, res := range r.Moq.ResultsByParams_LoadOrStore {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMap_starGenType_LoadOrStore_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMap_starGenType_LoadOrStore_paramsKey]*MoqMap_starGenType_LoadOrStore_results{},
		}
		r.Moq.ResultsByParams_LoadOrStore = append(r.Moq.ResultsByParams_LoadOrStore, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_LoadOrStore) {
			copy(r.Moq.ResultsByParams_LoadOrStore[insertAt+1:], r.Moq.ResultsByParams_LoadOrStore[insertAt:0])
			r.Moq.ResultsByParams_LoadOrStore[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_LoadOrStore(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMap_starGenType_LoadOrStore_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMap_starGenType_LoadOrStore_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMap_starGenType_LoadOrStore_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Actual interface{}
					Loaded bool
				}
				Sequence   uint32
				DoFn       MoqMap_starGenType_LoadOrStore_doFn
				DoReturnFn MoqMap_starGenType_LoadOrStore_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMap_starGenType) PrettyParams_LoadOrStore(params MoqMap_starGenType_LoadOrStore_params) string {
	return fmt.Sprintf("LoadOrStore(%#v, %#v)", params.Key, params.Value)
}

func (m *MoqMap_starGenType) ParamsKey_LoadOrStore(params MoqMap_starGenType_LoadOrStore_params, anyParams uint64) MoqMap_starGenType_LoadOrStore_paramsKey {
	m.Scene.T.Helper()
	var keyUsed interface{}
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.LoadOrStore.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	var valueUsed interface{}
	var valueUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.LoadOrStore.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	return MoqMap_starGenType_LoadOrStore_paramsKey{
		Params: struct{ Key, Value interface{} }{
			Key:   keyUsed,
			Value: valueUsed,
		},
		Hashes: struct{ Key, Value hash.Hash }{
			Key:   keyUsedHash,
			Value: valueUsedHash,
		},
	}
}

func (m *MoqMap_starGenType_recorder) LoadAndDelete(key interface{}) *MoqMap_starGenType_LoadAndDelete_fnRecorder {
	return &MoqMap_starGenType_LoadAndDelete_fnRecorder{
		Params: MoqMap_starGenType_LoadAndDelete_params{
			Key: key,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMap_starGenType_LoadAndDelete_fnRecorder) Any() *MoqMap_starGenType_LoadAndDelete_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LoadAndDelete(r.Params))
		return nil
	}
	return &MoqMap_starGenType_LoadAndDelete_anyParams{Recorder: r}
}

func (a *MoqMap_starGenType_LoadAndDelete_anyParams) Key() *MoqMap_starGenType_LoadAndDelete_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqMap_starGenType_LoadAndDelete_fnRecorder) Seq() *MoqMap_starGenType_LoadAndDelete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LoadAndDelete(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMap_starGenType_LoadAndDelete_fnRecorder) NoSeq() *MoqMap_starGenType_LoadAndDelete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LoadAndDelete(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMap_starGenType_LoadAndDelete_fnRecorder) ReturnResults(value interface{}, loaded bool) *MoqMap_starGenType_LoadAndDelete_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Value  interface{}
			Loaded bool
		}
		Sequence   uint32
		DoFn       MoqMap_starGenType_LoadAndDelete_doFn
		DoReturnFn MoqMap_starGenType_LoadAndDelete_doReturnFn
	}{
		Values: &struct {
			Value  interface{}
			Loaded bool
		}{
			Value:  value,
			Loaded: loaded,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMap_starGenType_LoadAndDelete_fnRecorder) AndDo(fn MoqMap_starGenType_LoadAndDelete_doFn) *MoqMap_starGenType_LoadAndDelete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMap_starGenType_LoadAndDelete_fnRecorder) DoReturnResults(fn MoqMap_starGenType_LoadAndDelete_doReturnFn) *MoqMap_starGenType_LoadAndDelete_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Value  interface{}
			Loaded bool
		}
		Sequence   uint32
		DoFn       MoqMap_starGenType_LoadAndDelete_doFn
		DoReturnFn MoqMap_starGenType_LoadAndDelete_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMap_starGenType_LoadAndDelete_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMap_starGenType_LoadAndDelete_resultsByParams
	for n, res := range r.Moq.ResultsByParams_LoadAndDelete {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMap_starGenType_LoadAndDelete_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMap_starGenType_LoadAndDelete_paramsKey]*MoqMap_starGenType_LoadAndDelete_results{},
		}
		r.Moq.ResultsByParams_LoadAndDelete = append(r.Moq.ResultsByParams_LoadAndDelete, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_LoadAndDelete) {
			copy(r.Moq.ResultsByParams_LoadAndDelete[insertAt+1:], r.Moq.ResultsByParams_LoadAndDelete[insertAt:0])
			r.Moq.ResultsByParams_LoadAndDelete[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_LoadAndDelete(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMap_starGenType_LoadAndDelete_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMap_starGenType_LoadAndDelete_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMap_starGenType_LoadAndDelete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Value  interface{}
					Loaded bool
				}
				Sequence   uint32
				DoFn       MoqMap_starGenType_LoadAndDelete_doFn
				DoReturnFn MoqMap_starGenType_LoadAndDelete_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMap_starGenType) PrettyParams_LoadAndDelete(params MoqMap_starGenType_LoadAndDelete_params) string {
	return fmt.Sprintf("LoadAndDelete(%#v)", params.Key)
}

func (m *MoqMap_starGenType) ParamsKey_LoadAndDelete(params MoqMap_starGenType_LoadAndDelete_params, anyParams uint64) MoqMap_starGenType_LoadAndDelete_paramsKey {
	m.Scene.T.Helper()
	var keyUsed interface{}
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.LoadAndDelete.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	return MoqMap_starGenType_LoadAndDelete_paramsKey{
		Params: struct{ Key interface{} }{
			Key: keyUsed,
		},
		Hashes: struct{ Key hash.Hash }{
			Key: keyUsedHash,
		},
	}
}

func (m *MoqMap_starGenType_recorder) Delete(key interface{}) *MoqMap_starGenType_Delete_fnRecorder {
	return &MoqMap_starGenType_Delete_fnRecorder{
		Params: MoqMap_starGenType_Delete_params{
			Key: key,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMap_starGenType_Delete_fnRecorder) Any() *MoqMap_starGenType_Delete_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Delete(r.Params))
		return nil
	}
	return &MoqMap_starGenType_Delete_anyParams{Recorder: r}
}

func (a *MoqMap_starGenType_Delete_anyParams) Key() *MoqMap_starGenType_Delete_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqMap_starGenType_Delete_fnRecorder) Seq() *MoqMap_starGenType_Delete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Delete(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMap_starGenType_Delete_fnRecorder) NoSeq() *MoqMap_starGenType_Delete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Delete(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMap_starGenType_Delete_fnRecorder) ReturnResults() *MoqMap_starGenType_Delete_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Delete_doFn
		DoReturnFn MoqMap_starGenType_Delete_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMap_starGenType_Delete_fnRecorder) AndDo(fn MoqMap_starGenType_Delete_doFn) *MoqMap_starGenType_Delete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMap_starGenType_Delete_fnRecorder) DoReturnResults(fn MoqMap_starGenType_Delete_doReturnFn) *MoqMap_starGenType_Delete_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Delete_doFn
		DoReturnFn MoqMap_starGenType_Delete_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMap_starGenType_Delete_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMap_starGenType_Delete_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Delete {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMap_starGenType_Delete_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMap_starGenType_Delete_paramsKey]*MoqMap_starGenType_Delete_results{},
		}
		r.Moq.ResultsByParams_Delete = append(r.Moq.ResultsByParams_Delete, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Delete) {
			copy(r.Moq.ResultsByParams_Delete[insertAt+1:], r.Moq.ResultsByParams_Delete[insertAt:0])
			r.Moq.ResultsByParams_Delete[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Delete(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMap_starGenType_Delete_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMap_starGenType_Delete_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMap_starGenType_Delete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqMap_starGenType_Delete_doFn
				DoReturnFn MoqMap_starGenType_Delete_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMap_starGenType) PrettyParams_Delete(params MoqMap_starGenType_Delete_params) string {
	return fmt.Sprintf("Delete(%#v)", params.Key)
}

func (m *MoqMap_starGenType) ParamsKey_Delete(params MoqMap_starGenType_Delete_params, anyParams uint64) MoqMap_starGenType_Delete_paramsKey {
	m.Scene.T.Helper()
	var keyUsed interface{}
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Delete.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	return MoqMap_starGenType_Delete_paramsKey{
		Params: struct{ Key interface{} }{
			Key: keyUsed,
		},
		Hashes: struct{ Key hash.Hash }{
			Key: keyUsedHash,
		},
	}
}

func (m *MoqMap_starGenType_recorder) Range(f func(key, value interface{}) bool) *MoqMap_starGenType_Range_fnRecorder {
	return &MoqMap_starGenType_Range_fnRecorder{
		Params: MoqMap_starGenType_Range_params{
			F: f,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMap_starGenType_Range_fnRecorder) Any() *MoqMap_starGenType_Range_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Range(r.Params))
		return nil
	}
	return &MoqMap_starGenType_Range_anyParams{Recorder: r}
}

func (a *MoqMap_starGenType_Range_anyParams) F() *MoqMap_starGenType_Range_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqMap_starGenType_Range_fnRecorder) Seq() *MoqMap_starGenType_Range_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Range(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMap_starGenType_Range_fnRecorder) NoSeq() *MoqMap_starGenType_Range_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Range(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMap_starGenType_Range_fnRecorder) ReturnResults() *MoqMap_starGenType_Range_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Range_doFn
		DoReturnFn MoqMap_starGenType_Range_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMap_starGenType_Range_fnRecorder) AndDo(fn MoqMap_starGenType_Range_doFn) *MoqMap_starGenType_Range_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMap_starGenType_Range_fnRecorder) DoReturnResults(fn MoqMap_starGenType_Range_doReturnFn) *MoqMap_starGenType_Range_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Range_doFn
		DoReturnFn MoqMap_starGenType_Range_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMap_starGenType_Range_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMap_starGenType_Range_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Range {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMap_starGenType_Range_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMap_starGenType_Range_paramsKey]*MoqMap_starGenType_Range_results{},
		}
		r.Moq.ResultsByParams_Range = append(r.Moq.ResultsByParams_Range, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Range) {
			copy(r.Moq.ResultsByParams_Range[insertAt+1:], r.Moq.ResultsByParams_Range[insertAt:0])
			r.Moq.ResultsByParams_Range[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Range(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMap_starGenType_Range_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMap_starGenType_Range_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMap_starGenType_Range_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqMap_starGenType_Range_doFn
				DoReturnFn MoqMap_starGenType_Range_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMap_starGenType) PrettyParams_Range(params MoqMap_starGenType_Range_params) string {
	return fmt.Sprintf("Range(%#v)", moq.FnString(params.F))
}

func (m *MoqMap_starGenType) ParamsKey_Range(params MoqMap_starGenType_Range_params, anyParams uint64) MoqMap_starGenType_Range_paramsKey {
	m.Scene.T.Helper()
	var fUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Range.F == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The f parameter of the Range function can't be indexed by value")
		}
		fUsedHash = hash.DeepHash(params.F)
	}
	return MoqMap_starGenType_Range_paramsKey{
		Params: struct{}{},
		Hashes: struct{ F hash.Hash }{
			F: fUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqMap_starGenType) Reset() {
	m.ResultsByParams_Load = nil
	m.ResultsByParams_Store = nil
	m.ResultsByParams_LoadOrStore = nil
	m.ResultsByParams_LoadAndDelete = nil
	m.ResultsByParams_Delete = nil
	m.ResultsByParams_Range = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqMap_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Load {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Load(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Store {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Store(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_LoadOrStore {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_LoadOrStore(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_LoadAndDelete {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_LoadAndDelete(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Delete {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Delete(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Range {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Range(results.Params))
			}
		}
	}
}
