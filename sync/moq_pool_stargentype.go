// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package sync

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that sync.Pool_starGenType is mocked
// completely
var _ Pool_starGenType = (*MoqPool_starGenType_mock)(nil)

// Pool_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Pool_starGenType interface {
	Put(x any)
	Get() any
}

// MoqPool_starGenType holds the state of a moq of the Pool_starGenType type
type MoqPool_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqPool_starGenType_mock

	ResultsByParams_Put []MoqPool_starGenType_Put_resultsByParams
	ResultsByParams_Get []MoqPool_starGenType_Get_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Put struct {
				X moq.ParamIndexing
			}
			Get struct{}
		}
	}
}

// MoqPool_starGenType_mock isolates the mock interface of the Pool_starGenType
// type
type MoqPool_starGenType_mock struct {
	Moq *MoqPool_starGenType
}

// MoqPool_starGenType_recorder isolates the recorder interface of the
// Pool_starGenType type
type MoqPool_starGenType_recorder struct {
	Moq *MoqPool_starGenType
}

// MoqPool_starGenType_Put_params holds the params of the Pool_starGenType type
type MoqPool_starGenType_Put_params struct{ X any }

// MoqPool_starGenType_Put_paramsKey holds the map key params of the
// Pool_starGenType type
type MoqPool_starGenType_Put_paramsKey struct {
	Params struct{ X any }
	Hashes struct{ X hash.Hash }
}

// MoqPool_starGenType_Put_resultsByParams contains the results for a given set
// of parameters for the Pool_starGenType type
type MoqPool_starGenType_Put_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPool_starGenType_Put_paramsKey]*MoqPool_starGenType_Put_results
}

// MoqPool_starGenType_Put_doFn defines the type of function needed when
// calling AndDo for the Pool_starGenType type
type MoqPool_starGenType_Put_doFn func(x any)

// MoqPool_starGenType_Put_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Pool_starGenType type
type MoqPool_starGenType_Put_doReturnFn func(x any)

// MoqPool_starGenType_Put_results holds the results of the Pool_starGenType
// type
type MoqPool_starGenType_Put_results struct {
	Params  MoqPool_starGenType_Put_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPool_starGenType_Put_doFn
		DoReturnFn MoqPool_starGenType_Put_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPool_starGenType_Put_fnRecorder routes recorded function calls to the
// MoqPool_starGenType moq
type MoqPool_starGenType_Put_fnRecorder struct {
	Params    MoqPool_starGenType_Put_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPool_starGenType_Put_results
	Moq       *MoqPool_starGenType
}

// MoqPool_starGenType_Put_anyParams isolates the any params functions of the
// Pool_starGenType type
type MoqPool_starGenType_Put_anyParams struct {
	Recorder *MoqPool_starGenType_Put_fnRecorder
}

// MoqPool_starGenType_Get_params holds the params of the Pool_starGenType type
type MoqPool_starGenType_Get_params struct{}

// MoqPool_starGenType_Get_paramsKey holds the map key params of the
// Pool_starGenType type
type MoqPool_starGenType_Get_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPool_starGenType_Get_resultsByParams contains the results for a given set
// of parameters for the Pool_starGenType type
type MoqPool_starGenType_Get_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPool_starGenType_Get_paramsKey]*MoqPool_starGenType_Get_results
}

// MoqPool_starGenType_Get_doFn defines the type of function needed when
// calling AndDo for the Pool_starGenType type
type MoqPool_starGenType_Get_doFn func()

// MoqPool_starGenType_Get_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Pool_starGenType type
type MoqPool_starGenType_Get_doReturnFn func() any

// MoqPool_starGenType_Get_results holds the results of the Pool_starGenType
// type
type MoqPool_starGenType_Get_results struct {
	Params  MoqPool_starGenType_Get_params
	Results []struct {
		Values *struct {
			Result1 any
		}
		Sequence   uint32
		DoFn       MoqPool_starGenType_Get_doFn
		DoReturnFn MoqPool_starGenType_Get_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPool_starGenType_Get_fnRecorder routes recorded function calls to the
// MoqPool_starGenType moq
type MoqPool_starGenType_Get_fnRecorder struct {
	Params    MoqPool_starGenType_Get_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPool_starGenType_Get_results
	Moq       *MoqPool_starGenType
}

// MoqPool_starGenType_Get_anyParams isolates the any params functions of the
// Pool_starGenType type
type MoqPool_starGenType_Get_anyParams struct {
	Recorder *MoqPool_starGenType_Get_fnRecorder
}

// NewMoqPool_starGenType creates a new moq of the Pool_starGenType type
func NewMoqPool_starGenType(scene *moq.Scene, config *moq.Config) *MoqPool_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqPool_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqPool_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Put struct {
					X moq.ParamIndexing
				}
				Get struct{}
			}
		}{ParameterIndexing: struct {
			Put struct {
				X moq.ParamIndexing
			}
			Get struct{}
		}{
			Put: struct {
				X moq.ParamIndexing
			}{
				X: moq.ParamIndexByValue,
			},
			Get: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Pool_starGenType type
func (m *MoqPool_starGenType) Mock() *MoqPool_starGenType_mock { return m.Moq }

func (m *MoqPool_starGenType_mock) Put(x any) {
	m.Moq.Scene.T.Helper()
	params := MoqPool_starGenType_Put_params{
		X: x,
	}
	var results *MoqPool_starGenType_Put_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Put {
		paramsKey := m.Moq.ParamsKey_Put(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Put(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Put(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Put(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(x)
	}
	return
}

func (m *MoqPool_starGenType_mock) Get() (result1 any) {
	m.Moq.Scene.T.Helper()
	params := MoqPool_starGenType_Get_params{}
	var results *MoqPool_starGenType_Get_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Get {
		paramsKey := m.Moq.ParamsKey_Get(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Get(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Get(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Get(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Pool_starGenType type
func (m *MoqPool_starGenType) OnCall() *MoqPool_starGenType_recorder {
	return &MoqPool_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqPool_starGenType_recorder) Put(x any) *MoqPool_starGenType_Put_fnRecorder {
	return &MoqPool_starGenType_Put_fnRecorder{
		Params: MoqPool_starGenType_Put_params{
			X: x,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPool_starGenType_Put_fnRecorder) Any() *MoqPool_starGenType_Put_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Put(r.Params))
		return nil
	}
	return &MoqPool_starGenType_Put_anyParams{Recorder: r}
}

func (a *MoqPool_starGenType_Put_anyParams) X() *MoqPool_starGenType_Put_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPool_starGenType_Put_fnRecorder) Seq() *MoqPool_starGenType_Put_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Put(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPool_starGenType_Put_fnRecorder) NoSeq() *MoqPool_starGenType_Put_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Put(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPool_starGenType_Put_fnRecorder) ReturnResults() *MoqPool_starGenType_Put_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPool_starGenType_Put_doFn
		DoReturnFn MoqPool_starGenType_Put_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPool_starGenType_Put_fnRecorder) AndDo(fn MoqPool_starGenType_Put_doFn) *MoqPool_starGenType_Put_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPool_starGenType_Put_fnRecorder) DoReturnResults(fn MoqPool_starGenType_Put_doReturnFn) *MoqPool_starGenType_Put_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPool_starGenType_Put_doFn
		DoReturnFn MoqPool_starGenType_Put_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPool_starGenType_Put_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPool_starGenType_Put_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Put {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPool_starGenType_Put_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPool_starGenType_Put_paramsKey]*MoqPool_starGenType_Put_results{},
		}
		r.Moq.ResultsByParams_Put = append(r.Moq.ResultsByParams_Put, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Put) {
			copy(r.Moq.ResultsByParams_Put[insertAt+1:], r.Moq.ResultsByParams_Put[insertAt:0])
			r.Moq.ResultsByParams_Put[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Put(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPool_starGenType_Put_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPool_starGenType_Put_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPool_starGenType_Put_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqPool_starGenType_Put_doFn
				DoReturnFn MoqPool_starGenType_Put_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPool_starGenType) PrettyParams_Put(params MoqPool_starGenType_Put_params) string {
	return fmt.Sprintf("Put(%#v)", params.X)
}

func (m *MoqPool_starGenType) ParamsKey_Put(params MoqPool_starGenType_Put_params, anyParams uint64) MoqPool_starGenType_Put_paramsKey {
	m.Scene.T.Helper()
	var xUsed any
	var xUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Put.X == moq.ParamIndexByValue {
			xUsed = params.X
		} else {
			xUsedHash = hash.DeepHash(params.X)
		}
	}
	return MoqPool_starGenType_Put_paramsKey{
		Params: struct{ X any }{
			X: xUsed,
		},
		Hashes: struct{ X hash.Hash }{
			X: xUsedHash,
		},
	}
}

func (m *MoqPool_starGenType_recorder) Get() *MoqPool_starGenType_Get_fnRecorder {
	return &MoqPool_starGenType_Get_fnRecorder{
		Params:   MoqPool_starGenType_Get_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPool_starGenType_Get_fnRecorder) Any() *MoqPool_starGenType_Get_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Get(r.Params))
		return nil
	}
	return &MoqPool_starGenType_Get_anyParams{Recorder: r}
}

func (r *MoqPool_starGenType_Get_fnRecorder) Seq() *MoqPool_starGenType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Get(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPool_starGenType_Get_fnRecorder) NoSeq() *MoqPool_starGenType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Get(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPool_starGenType_Get_fnRecorder) ReturnResults(result1 any) *MoqPool_starGenType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 any
		}
		Sequence   uint32
		DoFn       MoqPool_starGenType_Get_doFn
		DoReturnFn MoqPool_starGenType_Get_doReturnFn
	}{
		Values: &struct {
			Result1 any
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPool_starGenType_Get_fnRecorder) AndDo(fn MoqPool_starGenType_Get_doFn) *MoqPool_starGenType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPool_starGenType_Get_fnRecorder) DoReturnResults(fn MoqPool_starGenType_Get_doReturnFn) *MoqPool_starGenType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 any
		}
		Sequence   uint32
		DoFn       MoqPool_starGenType_Get_doFn
		DoReturnFn MoqPool_starGenType_Get_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPool_starGenType_Get_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPool_starGenType_Get_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Get {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPool_starGenType_Get_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPool_starGenType_Get_paramsKey]*MoqPool_starGenType_Get_results{},
		}
		r.Moq.ResultsByParams_Get = append(r.Moq.ResultsByParams_Get, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Get) {
			copy(r.Moq.ResultsByParams_Get[insertAt+1:], r.Moq.ResultsByParams_Get[insertAt:0])
			r.Moq.ResultsByParams_Get[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Get(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPool_starGenType_Get_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPool_starGenType_Get_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPool_starGenType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 any
				}
				Sequence   uint32
				DoFn       MoqPool_starGenType_Get_doFn
				DoReturnFn MoqPool_starGenType_Get_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPool_starGenType) PrettyParams_Get(params MoqPool_starGenType_Get_params) string {
	return fmt.Sprintf("Get()")
}

func (m *MoqPool_starGenType) ParamsKey_Get(params MoqPool_starGenType_Get_params, anyParams uint64) MoqPool_starGenType_Get_paramsKey {
	m.Scene.T.Helper()
	return MoqPool_starGenType_Get_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqPool_starGenType) Reset() { m.ResultsByParams_Put = nil; m.ResultsByParams_Get = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqPool_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Put {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Put(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Get {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Get(results.Params))
			}
		}
	}
}
