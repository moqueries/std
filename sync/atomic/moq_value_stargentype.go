// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package atomic

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that atomic.Value_starGenType is mocked
// completely
var _ Value_starGenType = (*MoqValue_starGenType_mock)(nil)

// Value_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Value_starGenType interface {
	Load() (x interface{})
	Store(x interface{})
}

// MoqValue_starGenType holds the state of a moq of the Value_starGenType type
type MoqValue_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqValue_starGenType_mock

	ResultsByParams_Load  []MoqValue_starGenType_Load_resultsByParams
	ResultsByParams_Store []MoqValue_starGenType_Store_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Load  struct{}
			Store struct {
				X moq.ParamIndexing
			}
		}
	}
	// MoqValue_starGenType_mock isolates the mock interface of the
}

// Value_starGenType type
type MoqValue_starGenType_mock struct {
	Moq *MoqValue_starGenType
}

// MoqValue_starGenType_recorder isolates the recorder interface of the
// Value_starGenType type
type MoqValue_starGenType_recorder struct {
	Moq *MoqValue_starGenType
}

// MoqValue_starGenType_Load_params holds the params of the Value_starGenType
// type
type MoqValue_starGenType_Load_params struct{}

// MoqValue_starGenType_Load_paramsKey holds the map key params of the
// Value_starGenType type
type MoqValue_starGenType_Load_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqValue_starGenType_Load_resultsByParams contains the results for a given
// set of parameters for the Value_starGenType type
type MoqValue_starGenType_Load_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqValue_starGenType_Load_paramsKey]*MoqValue_starGenType_Load_results
}

// MoqValue_starGenType_Load_doFn defines the type of function needed when
// calling AndDo for the Value_starGenType type
type MoqValue_starGenType_Load_doFn func()

// MoqValue_starGenType_Load_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Value_starGenType type
type MoqValue_starGenType_Load_doReturnFn func() (x interface{})

// MoqValue_starGenType_Load_results holds the results of the Value_starGenType
// type
type MoqValue_starGenType_Load_results struct {
	Params  MoqValue_starGenType_Load_params
	Results []struct {
		Values     *struct{ X interface{} }
		Sequence   uint32
		DoFn       MoqValue_starGenType_Load_doFn
		DoReturnFn MoqValue_starGenType_Load_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqValue_starGenType_Load_fnRecorder routes recorded function calls to the
// MoqValue_starGenType moq
type MoqValue_starGenType_Load_fnRecorder struct {
	Params    MoqValue_starGenType_Load_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqValue_starGenType_Load_results
	Moq       *MoqValue_starGenType
}

// MoqValue_starGenType_Load_anyParams isolates the any params functions of the
// Value_starGenType type
type MoqValue_starGenType_Load_anyParams struct {
	Recorder *MoqValue_starGenType_Load_fnRecorder
}

// MoqValue_starGenType_Store_params holds the params of the Value_starGenType
// type
type MoqValue_starGenType_Store_params struct{ X interface{} }

// MoqValue_starGenType_Store_paramsKey holds the map key params of the
// Value_starGenType type
type MoqValue_starGenType_Store_paramsKey struct {
	Params struct{ X interface{} }
	Hashes struct{ X hash.Hash }
}

// MoqValue_starGenType_Store_resultsByParams contains the results for a given
// set of parameters for the Value_starGenType type
type MoqValue_starGenType_Store_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqValue_starGenType_Store_paramsKey]*MoqValue_starGenType_Store_results
}

// MoqValue_starGenType_Store_doFn defines the type of function needed when
// calling AndDo for the Value_starGenType type
type MoqValue_starGenType_Store_doFn func(x interface{})

// MoqValue_starGenType_Store_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Value_starGenType type
type MoqValue_starGenType_Store_doReturnFn func(x interface{})

// MoqValue_starGenType_Store_results holds the results of the
// Value_starGenType type
type MoqValue_starGenType_Store_results struct {
	Params  MoqValue_starGenType_Store_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqValue_starGenType_Store_doFn
		DoReturnFn MoqValue_starGenType_Store_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqValue_starGenType_Store_fnRecorder routes recorded function calls to the
// MoqValue_starGenType moq
type MoqValue_starGenType_Store_fnRecorder struct {
	Params    MoqValue_starGenType_Store_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqValue_starGenType_Store_results
	Moq       *MoqValue_starGenType
}

// MoqValue_starGenType_Store_anyParams isolates the any params functions of
// the Value_starGenType type
type MoqValue_starGenType_Store_anyParams struct {
	Recorder *MoqValue_starGenType_Store_fnRecorder
}

// NewMoqValue_starGenType creates a new moq of the Value_starGenType type
func NewMoqValue_starGenType(scene *moq.Scene, config *moq.Config) *MoqValue_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqValue_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqValue_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Load  struct{}
				Store struct {
					X moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Load  struct{}
			Store struct {
				X moq.ParamIndexing
			}
		}{
			Load: struct{}{},
			Store: struct {
				X moq.ParamIndexing
			}{
				X: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Value_starGenType type
func (m *MoqValue_starGenType) Mock() *MoqValue_starGenType_mock { return m.Moq }

func (m *MoqValue_starGenType_mock) Load() (x interface{}) {
	m.Moq.Scene.T.Helper()
	params := MoqValue_starGenType_Load_params{}
	var results *MoqValue_starGenType_Load_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Load {
		paramsKey := m.Moq.ParamsKey_Load(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Load(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Load(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Load(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		x = result.Values.X
	}
	if result.DoReturnFn != nil {
		x = result.DoReturnFn()
	}
	return
}

func (m *MoqValue_starGenType_mock) Store(x interface{}) {
	m.Moq.Scene.T.Helper()
	params := MoqValue_starGenType_Store_params{
		X: x,
	}
	var results *MoqValue_starGenType_Store_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Store {
		paramsKey := m.Moq.ParamsKey_Store(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Store(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Store(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Store(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(x)
	}
	return
}

// OnCall returns the recorder implementation of the Value_starGenType type
func (m *MoqValue_starGenType) OnCall() *MoqValue_starGenType_recorder {
	return &MoqValue_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqValue_starGenType_recorder) Load() *MoqValue_starGenType_Load_fnRecorder {
	return &MoqValue_starGenType_Load_fnRecorder{
		Params:   MoqValue_starGenType_Load_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqValue_starGenType_Load_fnRecorder) Any() *MoqValue_starGenType_Load_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Load(r.Params))
		return nil
	}
	return &MoqValue_starGenType_Load_anyParams{Recorder: r}
}

func (r *MoqValue_starGenType_Load_fnRecorder) Seq() *MoqValue_starGenType_Load_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Load(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqValue_starGenType_Load_fnRecorder) NoSeq() *MoqValue_starGenType_Load_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Load(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqValue_starGenType_Load_fnRecorder) ReturnResults(x interface{}) *MoqValue_starGenType_Load_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ X interface{} }
		Sequence   uint32
		DoFn       MoqValue_starGenType_Load_doFn
		DoReturnFn MoqValue_starGenType_Load_doReturnFn
	}{
		Values: &struct{ X interface{} }{
			X: x,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqValue_starGenType_Load_fnRecorder) AndDo(fn MoqValue_starGenType_Load_doFn) *MoqValue_starGenType_Load_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqValue_starGenType_Load_fnRecorder) DoReturnResults(fn MoqValue_starGenType_Load_doReturnFn) *MoqValue_starGenType_Load_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ X interface{} }
		Sequence   uint32
		DoFn       MoqValue_starGenType_Load_doFn
		DoReturnFn MoqValue_starGenType_Load_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqValue_starGenType_Load_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqValue_starGenType_Load_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Load {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqValue_starGenType_Load_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqValue_starGenType_Load_paramsKey]*MoqValue_starGenType_Load_results{},
		}
		r.Moq.ResultsByParams_Load = append(r.Moq.ResultsByParams_Load, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Load) {
			copy(r.Moq.ResultsByParams_Load[insertAt+1:], r.Moq.ResultsByParams_Load[insertAt:0])
			r.Moq.ResultsByParams_Load[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Load(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqValue_starGenType_Load_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqValue_starGenType_Load_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqValue_starGenType_Load_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ X interface{} }
				Sequence   uint32
				DoFn       MoqValue_starGenType_Load_doFn
				DoReturnFn MoqValue_starGenType_Load_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqValue_starGenType) PrettyParams_Load(params MoqValue_starGenType_Load_params) string {
	return fmt.Sprintf("Load()")
}

func (m *MoqValue_starGenType) ParamsKey_Load(params MoqValue_starGenType_Load_params, anyParams uint64) MoqValue_starGenType_Load_paramsKey {
	m.Scene.T.Helper()
	return MoqValue_starGenType_Load_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqValue_starGenType_recorder) Store(x interface{}) *MoqValue_starGenType_Store_fnRecorder {
	return &MoqValue_starGenType_Store_fnRecorder{
		Params: MoqValue_starGenType_Store_params{
			X: x,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqValue_starGenType_Store_fnRecorder) Any() *MoqValue_starGenType_Store_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Store(r.Params))
		return nil
	}
	return &MoqValue_starGenType_Store_anyParams{Recorder: r}
}

func (a *MoqValue_starGenType_Store_anyParams) X() *MoqValue_starGenType_Store_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqValue_starGenType_Store_fnRecorder) Seq() *MoqValue_starGenType_Store_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Store(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqValue_starGenType_Store_fnRecorder) NoSeq() *MoqValue_starGenType_Store_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Store(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqValue_starGenType_Store_fnRecorder) ReturnResults() *MoqValue_starGenType_Store_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqValue_starGenType_Store_doFn
		DoReturnFn MoqValue_starGenType_Store_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqValue_starGenType_Store_fnRecorder) AndDo(fn MoqValue_starGenType_Store_doFn) *MoqValue_starGenType_Store_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqValue_starGenType_Store_fnRecorder) DoReturnResults(fn MoqValue_starGenType_Store_doReturnFn) *MoqValue_starGenType_Store_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqValue_starGenType_Store_doFn
		DoReturnFn MoqValue_starGenType_Store_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqValue_starGenType_Store_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqValue_starGenType_Store_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Store {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqValue_starGenType_Store_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqValue_starGenType_Store_paramsKey]*MoqValue_starGenType_Store_results{},
		}
		r.Moq.ResultsByParams_Store = append(r.Moq.ResultsByParams_Store, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Store) {
			copy(r.Moq.ResultsByParams_Store[insertAt+1:], r.Moq.ResultsByParams_Store[insertAt:0])
			r.Moq.ResultsByParams_Store[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Store(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqValue_starGenType_Store_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqValue_starGenType_Store_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqValue_starGenType_Store_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqValue_starGenType_Store_doFn
				DoReturnFn MoqValue_starGenType_Store_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqValue_starGenType) PrettyParams_Store(params MoqValue_starGenType_Store_params) string {
	return fmt.Sprintf("Store(%#v)", params.X)
}

func (m *MoqValue_starGenType) ParamsKey_Store(params MoqValue_starGenType_Store_params, anyParams uint64) MoqValue_starGenType_Store_paramsKey {
	m.Scene.T.Helper()
	var xUsed interface{}
	var xUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Store.X == moq.ParamIndexByValue {
			xUsed = params.X
		} else {
			xUsedHash = hash.DeepHash(params.X)
		}
	}
	return MoqValue_starGenType_Store_paramsKey{
		Params: struct{ X interface{} }{
			X: xUsed,
		},
		Hashes: struct{ X hash.Hash }{
			X: xUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqValue_starGenType) Reset() { m.ResultsByParams_Load = nil; m.ResultsByParams_Store = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqValue_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Load {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Load(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Store {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Store(results.Params))
			}
		}
	}
}
