// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package sync

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that sync.WaitGroup_starGenType is
// mocked completely
var _ WaitGroup_starGenType = (*MoqWaitGroup_starGenType_mock)(nil)

// WaitGroup_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type WaitGroup_starGenType interface {
	Add(delta int)
	Done()
	Wait()
}

// MoqWaitGroup_starGenType holds the state of a moq of the
// WaitGroup_starGenType type
type MoqWaitGroup_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqWaitGroup_starGenType_mock

	ResultsByParams_Add  []MoqWaitGroup_starGenType_Add_resultsByParams
	ResultsByParams_Done []MoqWaitGroup_starGenType_Done_resultsByParams
	ResultsByParams_Wait []MoqWaitGroup_starGenType_Wait_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Add struct {
				Delta moq.ParamIndexing
			}
			Done struct{}
			Wait struct{}
		}
	}
}

// MoqWaitGroup_starGenType_mock isolates the mock interface of the
// WaitGroup_starGenType type
type MoqWaitGroup_starGenType_mock struct {
	Moq *MoqWaitGroup_starGenType
}

// MoqWaitGroup_starGenType_recorder isolates the recorder interface of the
// WaitGroup_starGenType type
type MoqWaitGroup_starGenType_recorder struct {
	Moq *MoqWaitGroup_starGenType
}

// MoqWaitGroup_starGenType_Add_params holds the params of the
// WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Add_params struct{ Delta int }

// MoqWaitGroup_starGenType_Add_paramsKey holds the map key params of the
// WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Add_paramsKey struct {
	Params struct{ Delta int }
	Hashes struct{ Delta hash.Hash }
}

// MoqWaitGroup_starGenType_Add_resultsByParams contains the results for a
// given set of parameters for the WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Add_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWaitGroup_starGenType_Add_paramsKey]*MoqWaitGroup_starGenType_Add_results
}

// MoqWaitGroup_starGenType_Add_doFn defines the type of function needed when
// calling AndDo for the WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Add_doFn func(delta int)

// MoqWaitGroup_starGenType_Add_doReturnFn defines the type of function needed
// when calling DoReturnResults for the WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Add_doReturnFn func(delta int)

// MoqWaitGroup_starGenType_Add_results holds the results of the
// WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Add_results struct {
	Params  MoqWaitGroup_starGenType_Add_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWaitGroup_starGenType_Add_doFn
		DoReturnFn MoqWaitGroup_starGenType_Add_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWaitGroup_starGenType_Add_fnRecorder routes recorded function calls to
// the MoqWaitGroup_starGenType moq
type MoqWaitGroup_starGenType_Add_fnRecorder struct {
	Params    MoqWaitGroup_starGenType_Add_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWaitGroup_starGenType_Add_results
	Moq       *MoqWaitGroup_starGenType
}

// MoqWaitGroup_starGenType_Add_anyParams isolates the any params functions of
// the WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Add_anyParams struct {
	Recorder *MoqWaitGroup_starGenType_Add_fnRecorder
}

// MoqWaitGroup_starGenType_Done_params holds the params of the
// WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Done_params struct{}

// MoqWaitGroup_starGenType_Done_paramsKey holds the map key params of the
// WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Done_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWaitGroup_starGenType_Done_resultsByParams contains the results for a
// given set of parameters for the WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Done_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWaitGroup_starGenType_Done_paramsKey]*MoqWaitGroup_starGenType_Done_results
}

// MoqWaitGroup_starGenType_Done_doFn defines the type of function needed when
// calling AndDo for the WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Done_doFn func()

// MoqWaitGroup_starGenType_Done_doReturnFn defines the type of function needed
// when calling DoReturnResults for the WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Done_doReturnFn func()

// MoqWaitGroup_starGenType_Done_results holds the results of the
// WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Done_results struct {
	Params  MoqWaitGroup_starGenType_Done_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWaitGroup_starGenType_Done_doFn
		DoReturnFn MoqWaitGroup_starGenType_Done_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWaitGroup_starGenType_Done_fnRecorder routes recorded function calls to
// the MoqWaitGroup_starGenType moq
type MoqWaitGroup_starGenType_Done_fnRecorder struct {
	Params    MoqWaitGroup_starGenType_Done_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWaitGroup_starGenType_Done_results
	Moq       *MoqWaitGroup_starGenType
}

// MoqWaitGroup_starGenType_Done_anyParams isolates the any params functions of
// the WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Done_anyParams struct {
	Recorder *MoqWaitGroup_starGenType_Done_fnRecorder
}

// MoqWaitGroup_starGenType_Wait_params holds the params of the
// WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Wait_params struct{}

// MoqWaitGroup_starGenType_Wait_paramsKey holds the map key params of the
// WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Wait_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWaitGroup_starGenType_Wait_resultsByParams contains the results for a
// given set of parameters for the WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Wait_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWaitGroup_starGenType_Wait_paramsKey]*MoqWaitGroup_starGenType_Wait_results
}

// MoqWaitGroup_starGenType_Wait_doFn defines the type of function needed when
// calling AndDo for the WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Wait_doFn func()

// MoqWaitGroup_starGenType_Wait_doReturnFn defines the type of function needed
// when calling DoReturnResults for the WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Wait_doReturnFn func()

// MoqWaitGroup_starGenType_Wait_results holds the results of the
// WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Wait_results struct {
	Params  MoqWaitGroup_starGenType_Wait_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWaitGroup_starGenType_Wait_doFn
		DoReturnFn MoqWaitGroup_starGenType_Wait_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWaitGroup_starGenType_Wait_fnRecorder routes recorded function calls to
// the MoqWaitGroup_starGenType moq
type MoqWaitGroup_starGenType_Wait_fnRecorder struct {
	Params    MoqWaitGroup_starGenType_Wait_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWaitGroup_starGenType_Wait_results
	Moq       *MoqWaitGroup_starGenType
}

// MoqWaitGroup_starGenType_Wait_anyParams isolates the any params functions of
// the WaitGroup_starGenType type
type MoqWaitGroup_starGenType_Wait_anyParams struct {
	Recorder *MoqWaitGroup_starGenType_Wait_fnRecorder
}

// NewMoqWaitGroup_starGenType creates a new moq of the WaitGroup_starGenType
// type
func NewMoqWaitGroup_starGenType(scene *moq.Scene, config *moq.Config) *MoqWaitGroup_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqWaitGroup_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqWaitGroup_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Add struct {
					Delta moq.ParamIndexing
				}
				Done struct{}
				Wait struct{}
			}
		}{ParameterIndexing: struct {
			Add struct {
				Delta moq.ParamIndexing
			}
			Done struct{}
			Wait struct{}
		}{
			Add: struct {
				Delta moq.ParamIndexing
			}{
				Delta: moq.ParamIndexByValue,
			},
			Done: struct{}{},
			Wait: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the WaitGroup_starGenType type
func (m *MoqWaitGroup_starGenType) Mock() *MoqWaitGroup_starGenType_mock { return m.Moq }

func (m *MoqWaitGroup_starGenType_mock) Add(delta int) {
	m.Moq.Scene.T.Helper()
	params := MoqWaitGroup_starGenType_Add_params{
		Delta: delta,
	}
	var results *MoqWaitGroup_starGenType_Add_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Add {
		paramsKey := m.Moq.ParamsKey_Add(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Add(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Add(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Add(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(delta)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(delta)
	}
	return
}

func (m *MoqWaitGroup_starGenType_mock) Done() {
	m.Moq.Scene.T.Helper()
	params := MoqWaitGroup_starGenType_Done_params{}
	var results *MoqWaitGroup_starGenType_Done_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Done {
		paramsKey := m.Moq.ParamsKey_Done(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Done(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Done(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Done(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqWaitGroup_starGenType_mock) Wait() {
	m.Moq.Scene.T.Helper()
	params := MoqWaitGroup_starGenType_Wait_params{}
	var results *MoqWaitGroup_starGenType_Wait_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Wait {
		paramsKey := m.Moq.ParamsKey_Wait(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Wait(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Wait(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Wait(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the WaitGroup_starGenType type
func (m *MoqWaitGroup_starGenType) OnCall() *MoqWaitGroup_starGenType_recorder {
	return &MoqWaitGroup_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqWaitGroup_starGenType_recorder) Add(delta int) *MoqWaitGroup_starGenType_Add_fnRecorder {
	return &MoqWaitGroup_starGenType_Add_fnRecorder{
		Params: MoqWaitGroup_starGenType_Add_params{
			Delta: delta,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWaitGroup_starGenType_Add_fnRecorder) Any() *MoqWaitGroup_starGenType_Add_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	return &MoqWaitGroup_starGenType_Add_anyParams{Recorder: r}
}

func (a *MoqWaitGroup_starGenType_Add_anyParams) Delta() *MoqWaitGroup_starGenType_Add_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWaitGroup_starGenType_Add_fnRecorder) Seq() *MoqWaitGroup_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWaitGroup_starGenType_Add_fnRecorder) NoSeq() *MoqWaitGroup_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWaitGroup_starGenType_Add_fnRecorder) ReturnResults() *MoqWaitGroup_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWaitGroup_starGenType_Add_doFn
		DoReturnFn MoqWaitGroup_starGenType_Add_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWaitGroup_starGenType_Add_fnRecorder) AndDo(fn MoqWaitGroup_starGenType_Add_doFn) *MoqWaitGroup_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWaitGroup_starGenType_Add_fnRecorder) DoReturnResults(fn MoqWaitGroup_starGenType_Add_doReturnFn) *MoqWaitGroup_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWaitGroup_starGenType_Add_doFn
		DoReturnFn MoqWaitGroup_starGenType_Add_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWaitGroup_starGenType_Add_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWaitGroup_starGenType_Add_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Add {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWaitGroup_starGenType_Add_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWaitGroup_starGenType_Add_paramsKey]*MoqWaitGroup_starGenType_Add_results{},
		}
		r.Moq.ResultsByParams_Add = append(r.Moq.ResultsByParams_Add, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Add) {
			copy(r.Moq.ResultsByParams_Add[insertAt+1:], r.Moq.ResultsByParams_Add[insertAt:0])
			r.Moq.ResultsByParams_Add[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Add(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWaitGroup_starGenType_Add_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWaitGroup_starGenType_Add_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWaitGroup_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqWaitGroup_starGenType_Add_doFn
				DoReturnFn MoqWaitGroup_starGenType_Add_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWaitGroup_starGenType) PrettyParams_Add(params MoqWaitGroup_starGenType_Add_params) string {
	return fmt.Sprintf("Add(%#v)", params.Delta)
}

func (m *MoqWaitGroup_starGenType) ParamsKey_Add(params MoqWaitGroup_starGenType_Add_params, anyParams uint64) MoqWaitGroup_starGenType_Add_paramsKey {
	m.Scene.T.Helper()
	var deltaUsed int
	var deltaUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Add.Delta == moq.ParamIndexByValue {
			deltaUsed = params.Delta
		} else {
			deltaUsedHash = hash.DeepHash(params.Delta)
		}
	}
	return MoqWaitGroup_starGenType_Add_paramsKey{
		Params: struct{ Delta int }{
			Delta: deltaUsed,
		},
		Hashes: struct{ Delta hash.Hash }{
			Delta: deltaUsedHash,
		},
	}
}

func (m *MoqWaitGroup_starGenType_recorder) Done() *MoqWaitGroup_starGenType_Done_fnRecorder {
	return &MoqWaitGroup_starGenType_Done_fnRecorder{
		Params:   MoqWaitGroup_starGenType_Done_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWaitGroup_starGenType_Done_fnRecorder) Any() *MoqWaitGroup_starGenType_Done_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Done(r.Params))
		return nil
	}
	return &MoqWaitGroup_starGenType_Done_anyParams{Recorder: r}
}

func (r *MoqWaitGroup_starGenType_Done_fnRecorder) Seq() *MoqWaitGroup_starGenType_Done_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Done(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWaitGroup_starGenType_Done_fnRecorder) NoSeq() *MoqWaitGroup_starGenType_Done_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Done(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWaitGroup_starGenType_Done_fnRecorder) ReturnResults() *MoqWaitGroup_starGenType_Done_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWaitGroup_starGenType_Done_doFn
		DoReturnFn MoqWaitGroup_starGenType_Done_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWaitGroup_starGenType_Done_fnRecorder) AndDo(fn MoqWaitGroup_starGenType_Done_doFn) *MoqWaitGroup_starGenType_Done_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWaitGroup_starGenType_Done_fnRecorder) DoReturnResults(fn MoqWaitGroup_starGenType_Done_doReturnFn) *MoqWaitGroup_starGenType_Done_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWaitGroup_starGenType_Done_doFn
		DoReturnFn MoqWaitGroup_starGenType_Done_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWaitGroup_starGenType_Done_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWaitGroup_starGenType_Done_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Done {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWaitGroup_starGenType_Done_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWaitGroup_starGenType_Done_paramsKey]*MoqWaitGroup_starGenType_Done_results{},
		}
		r.Moq.ResultsByParams_Done = append(r.Moq.ResultsByParams_Done, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Done) {
			copy(r.Moq.ResultsByParams_Done[insertAt+1:], r.Moq.ResultsByParams_Done[insertAt:0])
			r.Moq.ResultsByParams_Done[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Done(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWaitGroup_starGenType_Done_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWaitGroup_starGenType_Done_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWaitGroup_starGenType_Done_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqWaitGroup_starGenType_Done_doFn
				DoReturnFn MoqWaitGroup_starGenType_Done_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWaitGroup_starGenType) PrettyParams_Done(params MoqWaitGroup_starGenType_Done_params) string {
	return fmt.Sprintf("Done()")
}

func (m *MoqWaitGroup_starGenType) ParamsKey_Done(params MoqWaitGroup_starGenType_Done_params, anyParams uint64) MoqWaitGroup_starGenType_Done_paramsKey {
	m.Scene.T.Helper()
	return MoqWaitGroup_starGenType_Done_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWaitGroup_starGenType_recorder) Wait() *MoqWaitGroup_starGenType_Wait_fnRecorder {
	return &MoqWaitGroup_starGenType_Wait_fnRecorder{
		Params:   MoqWaitGroup_starGenType_Wait_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWaitGroup_starGenType_Wait_fnRecorder) Any() *MoqWaitGroup_starGenType_Wait_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Wait(r.Params))
		return nil
	}
	return &MoqWaitGroup_starGenType_Wait_anyParams{Recorder: r}
}

func (r *MoqWaitGroup_starGenType_Wait_fnRecorder) Seq() *MoqWaitGroup_starGenType_Wait_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Wait(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWaitGroup_starGenType_Wait_fnRecorder) NoSeq() *MoqWaitGroup_starGenType_Wait_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Wait(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWaitGroup_starGenType_Wait_fnRecorder) ReturnResults() *MoqWaitGroup_starGenType_Wait_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWaitGroup_starGenType_Wait_doFn
		DoReturnFn MoqWaitGroup_starGenType_Wait_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWaitGroup_starGenType_Wait_fnRecorder) AndDo(fn MoqWaitGroup_starGenType_Wait_doFn) *MoqWaitGroup_starGenType_Wait_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWaitGroup_starGenType_Wait_fnRecorder) DoReturnResults(fn MoqWaitGroup_starGenType_Wait_doReturnFn) *MoqWaitGroup_starGenType_Wait_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWaitGroup_starGenType_Wait_doFn
		DoReturnFn MoqWaitGroup_starGenType_Wait_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWaitGroup_starGenType_Wait_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWaitGroup_starGenType_Wait_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Wait {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWaitGroup_starGenType_Wait_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWaitGroup_starGenType_Wait_paramsKey]*MoqWaitGroup_starGenType_Wait_results{},
		}
		r.Moq.ResultsByParams_Wait = append(r.Moq.ResultsByParams_Wait, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Wait) {
			copy(r.Moq.ResultsByParams_Wait[insertAt+1:], r.Moq.ResultsByParams_Wait[insertAt:0])
			r.Moq.ResultsByParams_Wait[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Wait(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWaitGroup_starGenType_Wait_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWaitGroup_starGenType_Wait_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWaitGroup_starGenType_Wait_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqWaitGroup_starGenType_Wait_doFn
				DoReturnFn MoqWaitGroup_starGenType_Wait_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWaitGroup_starGenType) PrettyParams_Wait(params MoqWaitGroup_starGenType_Wait_params) string {
	return fmt.Sprintf("Wait()")
}

func (m *MoqWaitGroup_starGenType) ParamsKey_Wait(params MoqWaitGroup_starGenType_Wait_params, anyParams uint64) MoqWaitGroup_starGenType_Wait_paramsKey {
	m.Scene.T.Helper()
	return MoqWaitGroup_starGenType_Wait_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqWaitGroup_starGenType) Reset() {
	m.ResultsByParams_Add = nil
	m.ResultsByParams_Done = nil
	m.ResultsByParams_Wait = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqWaitGroup_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Add {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Add(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Done {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Done(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Wait {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Wait(results.Params))
			}
		}
	}
}
