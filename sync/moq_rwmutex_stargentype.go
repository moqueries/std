// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package sync

import (
	"fmt"
	"math/bits"
	"sync"
	"sync/atomic"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that sync.RWMutex_starGenType is mocked
// completely
var _ RWMutex_starGenType = (*MoqRWMutex_starGenType_mock)(nil)

// RWMutex_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type RWMutex_starGenType interface {
	RLock()
	TryRLock() bool
	RUnlock()
	Lock()
	TryLock() bool
	Unlock()
	RLocker() sync.Locker
}

// MoqRWMutex_starGenType holds the state of a moq of the RWMutex_starGenType
// type
type MoqRWMutex_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqRWMutex_starGenType_mock

	ResultsByParams_RLock    []MoqRWMutex_starGenType_RLock_resultsByParams
	ResultsByParams_TryRLock []MoqRWMutex_starGenType_TryRLock_resultsByParams
	ResultsByParams_RUnlock  []MoqRWMutex_starGenType_RUnlock_resultsByParams
	ResultsByParams_Lock     []MoqRWMutex_starGenType_Lock_resultsByParams
	ResultsByParams_TryLock  []MoqRWMutex_starGenType_TryLock_resultsByParams
	ResultsByParams_Unlock   []MoqRWMutex_starGenType_Unlock_resultsByParams
	ResultsByParams_RLocker  []MoqRWMutex_starGenType_RLocker_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			RLock    struct{}
			TryRLock struct{}
			RUnlock  struct{}
			Lock     struct{}
			TryLock  struct{}
			Unlock   struct{}
			RLocker  struct{}
		}
	}
}

// MoqRWMutex_starGenType_mock isolates the mock interface of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_mock struct {
	Moq *MoqRWMutex_starGenType
}

// MoqRWMutex_starGenType_recorder isolates the recorder interface of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_recorder struct {
	Moq *MoqRWMutex_starGenType
}

// MoqRWMutex_starGenType_RLock_params holds the params of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_RLock_params struct{}

// MoqRWMutex_starGenType_RLock_paramsKey holds the map key params of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_RLock_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRWMutex_starGenType_RLock_resultsByParams contains the results for a
// given set of parameters for the RWMutex_starGenType type
type MoqRWMutex_starGenType_RLock_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRWMutex_starGenType_RLock_paramsKey]*MoqRWMutex_starGenType_RLock_results
}

// MoqRWMutex_starGenType_RLock_doFn defines the type of function needed when
// calling AndDo for the RWMutex_starGenType type
type MoqRWMutex_starGenType_RLock_doFn func()

// MoqRWMutex_starGenType_RLock_doReturnFn defines the type of function needed
// when calling DoReturnResults for the RWMutex_starGenType type
type MoqRWMutex_starGenType_RLock_doReturnFn func()

// MoqRWMutex_starGenType_RLock_results holds the results of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_RLock_results struct {
	Params  MoqRWMutex_starGenType_RLock_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_RLock_doFn
		DoReturnFn MoqRWMutex_starGenType_RLock_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRWMutex_starGenType_RLock_fnRecorder routes recorded function calls to
// the MoqRWMutex_starGenType moq
type MoqRWMutex_starGenType_RLock_fnRecorder struct {
	Params    MoqRWMutex_starGenType_RLock_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRWMutex_starGenType_RLock_results
	Moq       *MoqRWMutex_starGenType
}

// MoqRWMutex_starGenType_RLock_anyParams isolates the any params functions of
// the RWMutex_starGenType type
type MoqRWMutex_starGenType_RLock_anyParams struct {
	Recorder *MoqRWMutex_starGenType_RLock_fnRecorder
}

// MoqRWMutex_starGenType_TryRLock_params holds the params of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_TryRLock_params struct{}

// MoqRWMutex_starGenType_TryRLock_paramsKey holds the map key params of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_TryRLock_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRWMutex_starGenType_TryRLock_resultsByParams contains the results for a
// given set of parameters for the RWMutex_starGenType type
type MoqRWMutex_starGenType_TryRLock_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRWMutex_starGenType_TryRLock_paramsKey]*MoqRWMutex_starGenType_TryRLock_results
}

// MoqRWMutex_starGenType_TryRLock_doFn defines the type of function needed
// when calling AndDo for the RWMutex_starGenType type
type MoqRWMutex_starGenType_TryRLock_doFn func()

// MoqRWMutex_starGenType_TryRLock_doReturnFn defines the type of function
// needed when calling DoReturnResults for the RWMutex_starGenType type
type MoqRWMutex_starGenType_TryRLock_doReturnFn func() bool

// MoqRWMutex_starGenType_TryRLock_results holds the results of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_TryRLock_results struct {
	Params  MoqRWMutex_starGenType_TryRLock_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_TryRLock_doFn
		DoReturnFn MoqRWMutex_starGenType_TryRLock_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRWMutex_starGenType_TryRLock_fnRecorder routes recorded function calls to
// the MoqRWMutex_starGenType moq
type MoqRWMutex_starGenType_TryRLock_fnRecorder struct {
	Params    MoqRWMutex_starGenType_TryRLock_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRWMutex_starGenType_TryRLock_results
	Moq       *MoqRWMutex_starGenType
}

// MoqRWMutex_starGenType_TryRLock_anyParams isolates the any params functions
// of the RWMutex_starGenType type
type MoqRWMutex_starGenType_TryRLock_anyParams struct {
	Recorder *MoqRWMutex_starGenType_TryRLock_fnRecorder
}

// MoqRWMutex_starGenType_RUnlock_params holds the params of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_RUnlock_params struct{}

// MoqRWMutex_starGenType_RUnlock_paramsKey holds the map key params of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_RUnlock_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRWMutex_starGenType_RUnlock_resultsByParams contains the results for a
// given set of parameters for the RWMutex_starGenType type
type MoqRWMutex_starGenType_RUnlock_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRWMutex_starGenType_RUnlock_paramsKey]*MoqRWMutex_starGenType_RUnlock_results
}

// MoqRWMutex_starGenType_RUnlock_doFn defines the type of function needed when
// calling AndDo for the RWMutex_starGenType type
type MoqRWMutex_starGenType_RUnlock_doFn func()

// MoqRWMutex_starGenType_RUnlock_doReturnFn defines the type of function
// needed when calling DoReturnResults for the RWMutex_starGenType type
type MoqRWMutex_starGenType_RUnlock_doReturnFn func()

// MoqRWMutex_starGenType_RUnlock_results holds the results of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_RUnlock_results struct {
	Params  MoqRWMutex_starGenType_RUnlock_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_RUnlock_doFn
		DoReturnFn MoqRWMutex_starGenType_RUnlock_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRWMutex_starGenType_RUnlock_fnRecorder routes recorded function calls to
// the MoqRWMutex_starGenType moq
type MoqRWMutex_starGenType_RUnlock_fnRecorder struct {
	Params    MoqRWMutex_starGenType_RUnlock_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRWMutex_starGenType_RUnlock_results
	Moq       *MoqRWMutex_starGenType
}

// MoqRWMutex_starGenType_RUnlock_anyParams isolates the any params functions
// of the RWMutex_starGenType type
type MoqRWMutex_starGenType_RUnlock_anyParams struct {
	Recorder *MoqRWMutex_starGenType_RUnlock_fnRecorder
}

// MoqRWMutex_starGenType_Lock_params holds the params of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_Lock_params struct{}

// MoqRWMutex_starGenType_Lock_paramsKey holds the map key params of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_Lock_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRWMutex_starGenType_Lock_resultsByParams contains the results for a given
// set of parameters for the RWMutex_starGenType type
type MoqRWMutex_starGenType_Lock_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRWMutex_starGenType_Lock_paramsKey]*MoqRWMutex_starGenType_Lock_results
}

// MoqRWMutex_starGenType_Lock_doFn defines the type of function needed when
// calling AndDo for the RWMutex_starGenType type
type MoqRWMutex_starGenType_Lock_doFn func()

// MoqRWMutex_starGenType_Lock_doReturnFn defines the type of function needed
// when calling DoReturnResults for the RWMutex_starGenType type
type MoqRWMutex_starGenType_Lock_doReturnFn func()

// MoqRWMutex_starGenType_Lock_results holds the results of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_Lock_results struct {
	Params  MoqRWMutex_starGenType_Lock_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_Lock_doFn
		DoReturnFn MoqRWMutex_starGenType_Lock_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRWMutex_starGenType_Lock_fnRecorder routes recorded function calls to the
// MoqRWMutex_starGenType moq
type MoqRWMutex_starGenType_Lock_fnRecorder struct {
	Params    MoqRWMutex_starGenType_Lock_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRWMutex_starGenType_Lock_results
	Moq       *MoqRWMutex_starGenType
}

// MoqRWMutex_starGenType_Lock_anyParams isolates the any params functions of
// the RWMutex_starGenType type
type MoqRWMutex_starGenType_Lock_anyParams struct {
	Recorder *MoqRWMutex_starGenType_Lock_fnRecorder
}

// MoqRWMutex_starGenType_TryLock_params holds the params of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_TryLock_params struct{}

// MoqRWMutex_starGenType_TryLock_paramsKey holds the map key params of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_TryLock_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRWMutex_starGenType_TryLock_resultsByParams contains the results for a
// given set of parameters for the RWMutex_starGenType type
type MoqRWMutex_starGenType_TryLock_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRWMutex_starGenType_TryLock_paramsKey]*MoqRWMutex_starGenType_TryLock_results
}

// MoqRWMutex_starGenType_TryLock_doFn defines the type of function needed when
// calling AndDo for the RWMutex_starGenType type
type MoqRWMutex_starGenType_TryLock_doFn func()

// MoqRWMutex_starGenType_TryLock_doReturnFn defines the type of function
// needed when calling DoReturnResults for the RWMutex_starGenType type
type MoqRWMutex_starGenType_TryLock_doReturnFn func() bool

// MoqRWMutex_starGenType_TryLock_results holds the results of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_TryLock_results struct {
	Params  MoqRWMutex_starGenType_TryLock_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_TryLock_doFn
		DoReturnFn MoqRWMutex_starGenType_TryLock_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRWMutex_starGenType_TryLock_fnRecorder routes recorded function calls to
// the MoqRWMutex_starGenType moq
type MoqRWMutex_starGenType_TryLock_fnRecorder struct {
	Params    MoqRWMutex_starGenType_TryLock_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRWMutex_starGenType_TryLock_results
	Moq       *MoqRWMutex_starGenType
}

// MoqRWMutex_starGenType_TryLock_anyParams isolates the any params functions
// of the RWMutex_starGenType type
type MoqRWMutex_starGenType_TryLock_anyParams struct {
	Recorder *MoqRWMutex_starGenType_TryLock_fnRecorder
}

// MoqRWMutex_starGenType_Unlock_params holds the params of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_Unlock_params struct{}

// MoqRWMutex_starGenType_Unlock_paramsKey holds the map key params of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_Unlock_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRWMutex_starGenType_Unlock_resultsByParams contains the results for a
// given set of parameters for the RWMutex_starGenType type
type MoqRWMutex_starGenType_Unlock_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRWMutex_starGenType_Unlock_paramsKey]*MoqRWMutex_starGenType_Unlock_results
}

// MoqRWMutex_starGenType_Unlock_doFn defines the type of function needed when
// calling AndDo for the RWMutex_starGenType type
type MoqRWMutex_starGenType_Unlock_doFn func()

// MoqRWMutex_starGenType_Unlock_doReturnFn defines the type of function needed
// when calling DoReturnResults for the RWMutex_starGenType type
type MoqRWMutex_starGenType_Unlock_doReturnFn func()

// MoqRWMutex_starGenType_Unlock_results holds the results of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_Unlock_results struct {
	Params  MoqRWMutex_starGenType_Unlock_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_Unlock_doFn
		DoReturnFn MoqRWMutex_starGenType_Unlock_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRWMutex_starGenType_Unlock_fnRecorder routes recorded function calls to
// the MoqRWMutex_starGenType moq
type MoqRWMutex_starGenType_Unlock_fnRecorder struct {
	Params    MoqRWMutex_starGenType_Unlock_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRWMutex_starGenType_Unlock_results
	Moq       *MoqRWMutex_starGenType
}

// MoqRWMutex_starGenType_Unlock_anyParams isolates the any params functions of
// the RWMutex_starGenType type
type MoqRWMutex_starGenType_Unlock_anyParams struct {
	Recorder *MoqRWMutex_starGenType_Unlock_fnRecorder
}

// MoqRWMutex_starGenType_RLocker_params holds the params of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_RLocker_params struct{}

// MoqRWMutex_starGenType_RLocker_paramsKey holds the map key params of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_RLocker_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRWMutex_starGenType_RLocker_resultsByParams contains the results for a
// given set of parameters for the RWMutex_starGenType type
type MoqRWMutex_starGenType_RLocker_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRWMutex_starGenType_RLocker_paramsKey]*MoqRWMutex_starGenType_RLocker_results
}

// MoqRWMutex_starGenType_RLocker_doFn defines the type of function needed when
// calling AndDo for the RWMutex_starGenType type
type MoqRWMutex_starGenType_RLocker_doFn func()

// MoqRWMutex_starGenType_RLocker_doReturnFn defines the type of function
// needed when calling DoReturnResults for the RWMutex_starGenType type
type MoqRWMutex_starGenType_RLocker_doReturnFn func() sync.Locker

// MoqRWMutex_starGenType_RLocker_results holds the results of the
// RWMutex_starGenType type
type MoqRWMutex_starGenType_RLocker_results struct {
	Params  MoqRWMutex_starGenType_RLocker_params
	Results []struct {
		Values *struct {
			Result1 sync.Locker
		}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_RLocker_doFn
		DoReturnFn MoqRWMutex_starGenType_RLocker_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRWMutex_starGenType_RLocker_fnRecorder routes recorded function calls to
// the MoqRWMutex_starGenType moq
type MoqRWMutex_starGenType_RLocker_fnRecorder struct {
	Params    MoqRWMutex_starGenType_RLocker_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRWMutex_starGenType_RLocker_results
	Moq       *MoqRWMutex_starGenType
}

// MoqRWMutex_starGenType_RLocker_anyParams isolates the any params functions
// of the RWMutex_starGenType type
type MoqRWMutex_starGenType_RLocker_anyParams struct {
	Recorder *MoqRWMutex_starGenType_RLocker_fnRecorder
}

// NewMoqRWMutex_starGenType creates a new moq of the RWMutex_starGenType type
func NewMoqRWMutex_starGenType(scene *moq.Scene, config *moq.Config) *MoqRWMutex_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqRWMutex_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqRWMutex_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				RLock    struct{}
				TryRLock struct{}
				RUnlock  struct{}
				Lock     struct{}
				TryLock  struct{}
				Unlock   struct{}
				RLocker  struct{}
			}
		}{ParameterIndexing: struct {
			RLock    struct{}
			TryRLock struct{}
			RUnlock  struct{}
			Lock     struct{}
			TryLock  struct{}
			Unlock   struct{}
			RLocker  struct{}
		}{
			RLock:    struct{}{},
			TryRLock: struct{}{},
			RUnlock:  struct{}{},
			Lock:     struct{}{},
			TryLock:  struct{}{},
			Unlock:   struct{}{},
			RLocker:  struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the RWMutex_starGenType type
func (m *MoqRWMutex_starGenType) Mock() *MoqRWMutex_starGenType_mock { return m.Moq }

func (m *MoqRWMutex_starGenType_mock) RLock() {
	m.Moq.Scene.T.Helper()
	params := MoqRWMutex_starGenType_RLock_params{}
	var results *MoqRWMutex_starGenType_RLock_results
	for _, resultsByParams := range m.Moq.ResultsByParams_RLock {
		paramsKey := m.Moq.ParamsKey_RLock(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_RLock(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_RLock(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_RLock(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqRWMutex_starGenType_mock) TryRLock() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqRWMutex_starGenType_TryRLock_params{}
	var results *MoqRWMutex_starGenType_TryRLock_results
	for _, resultsByParams := range m.Moq.ResultsByParams_TryRLock {
		paramsKey := m.Moq.ParamsKey_TryRLock(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_TryRLock(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_TryRLock(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_TryRLock(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRWMutex_starGenType_mock) RUnlock() {
	m.Moq.Scene.T.Helper()
	params := MoqRWMutex_starGenType_RUnlock_params{}
	var results *MoqRWMutex_starGenType_RUnlock_results
	for _, resultsByParams := range m.Moq.ResultsByParams_RUnlock {
		paramsKey := m.Moq.ParamsKey_RUnlock(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_RUnlock(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_RUnlock(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_RUnlock(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqRWMutex_starGenType_mock) Lock() {
	m.Moq.Scene.T.Helper()
	params := MoqRWMutex_starGenType_Lock_params{}
	var results *MoqRWMutex_starGenType_Lock_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Lock {
		paramsKey := m.Moq.ParamsKey_Lock(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Lock(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Lock(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Lock(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqRWMutex_starGenType_mock) TryLock() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqRWMutex_starGenType_TryLock_params{}
	var results *MoqRWMutex_starGenType_TryLock_results
	for _, resultsByParams := range m.Moq.ResultsByParams_TryLock {
		paramsKey := m.Moq.ParamsKey_TryLock(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_TryLock(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_TryLock(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_TryLock(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRWMutex_starGenType_mock) Unlock() {
	m.Moq.Scene.T.Helper()
	params := MoqRWMutex_starGenType_Unlock_params{}
	var results *MoqRWMutex_starGenType_Unlock_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Unlock {
		paramsKey := m.Moq.ParamsKey_Unlock(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Unlock(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Unlock(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Unlock(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqRWMutex_starGenType_mock) RLocker() (result1 sync.Locker) {
	m.Moq.Scene.T.Helper()
	params := MoqRWMutex_starGenType_RLocker_params{}
	var results *MoqRWMutex_starGenType_RLocker_results
	for _, resultsByParams := range m.Moq.ResultsByParams_RLocker {
		paramsKey := m.Moq.ParamsKey_RLocker(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_RLocker(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_RLocker(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_RLocker(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the RWMutex_starGenType type
func (m *MoqRWMutex_starGenType) OnCall() *MoqRWMutex_starGenType_recorder {
	return &MoqRWMutex_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqRWMutex_starGenType_recorder) RLock() *MoqRWMutex_starGenType_RLock_fnRecorder {
	return &MoqRWMutex_starGenType_RLock_fnRecorder{
		Params:   MoqRWMutex_starGenType_RLock_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRWMutex_starGenType_RLock_fnRecorder) Any() *MoqRWMutex_starGenType_RLock_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RLock(r.Params))
		return nil
	}
	return &MoqRWMutex_starGenType_RLock_anyParams{Recorder: r}
}

func (r *MoqRWMutex_starGenType_RLock_fnRecorder) Seq() *MoqRWMutex_starGenType_RLock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RLock(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRWMutex_starGenType_RLock_fnRecorder) NoSeq() *MoqRWMutex_starGenType_RLock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RLock(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRWMutex_starGenType_RLock_fnRecorder) ReturnResults() *MoqRWMutex_starGenType_RLock_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_RLock_doFn
		DoReturnFn MoqRWMutex_starGenType_RLock_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRWMutex_starGenType_RLock_fnRecorder) AndDo(fn MoqRWMutex_starGenType_RLock_doFn) *MoqRWMutex_starGenType_RLock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRWMutex_starGenType_RLock_fnRecorder) DoReturnResults(fn MoqRWMutex_starGenType_RLock_doReturnFn) *MoqRWMutex_starGenType_RLock_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_RLock_doFn
		DoReturnFn MoqRWMutex_starGenType_RLock_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRWMutex_starGenType_RLock_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRWMutex_starGenType_RLock_resultsByParams
	for n, res := range r.Moq.ResultsByParams_RLock {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRWMutex_starGenType_RLock_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRWMutex_starGenType_RLock_paramsKey]*MoqRWMutex_starGenType_RLock_results{},
		}
		r.Moq.ResultsByParams_RLock = append(r.Moq.ResultsByParams_RLock, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_RLock) {
			copy(r.Moq.ResultsByParams_RLock[insertAt+1:], r.Moq.ResultsByParams_RLock[insertAt:0])
			r.Moq.ResultsByParams_RLock[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_RLock(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRWMutex_starGenType_RLock_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRWMutex_starGenType_RLock_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRWMutex_starGenType_RLock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqRWMutex_starGenType_RLock_doFn
				DoReturnFn MoqRWMutex_starGenType_RLock_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRWMutex_starGenType) PrettyParams_RLock(params MoqRWMutex_starGenType_RLock_params) string {
	return fmt.Sprintf("RLock()")
}

func (m *MoqRWMutex_starGenType) ParamsKey_RLock(params MoqRWMutex_starGenType_RLock_params, anyParams uint64) MoqRWMutex_starGenType_RLock_paramsKey {
	m.Scene.T.Helper()
	return MoqRWMutex_starGenType_RLock_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRWMutex_starGenType_recorder) TryRLock() *MoqRWMutex_starGenType_TryRLock_fnRecorder {
	return &MoqRWMutex_starGenType_TryRLock_fnRecorder{
		Params:   MoqRWMutex_starGenType_TryRLock_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRWMutex_starGenType_TryRLock_fnRecorder) Any() *MoqRWMutex_starGenType_TryRLock_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_TryRLock(r.Params))
		return nil
	}
	return &MoqRWMutex_starGenType_TryRLock_anyParams{Recorder: r}
}

func (r *MoqRWMutex_starGenType_TryRLock_fnRecorder) Seq() *MoqRWMutex_starGenType_TryRLock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_TryRLock(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRWMutex_starGenType_TryRLock_fnRecorder) NoSeq() *MoqRWMutex_starGenType_TryRLock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_TryRLock(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRWMutex_starGenType_TryRLock_fnRecorder) ReturnResults(result1 bool) *MoqRWMutex_starGenType_TryRLock_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_TryRLock_doFn
		DoReturnFn MoqRWMutex_starGenType_TryRLock_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRWMutex_starGenType_TryRLock_fnRecorder) AndDo(fn MoqRWMutex_starGenType_TryRLock_doFn) *MoqRWMutex_starGenType_TryRLock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRWMutex_starGenType_TryRLock_fnRecorder) DoReturnResults(fn MoqRWMutex_starGenType_TryRLock_doReturnFn) *MoqRWMutex_starGenType_TryRLock_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_TryRLock_doFn
		DoReturnFn MoqRWMutex_starGenType_TryRLock_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRWMutex_starGenType_TryRLock_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRWMutex_starGenType_TryRLock_resultsByParams
	for n, res := range r.Moq.ResultsByParams_TryRLock {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRWMutex_starGenType_TryRLock_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRWMutex_starGenType_TryRLock_paramsKey]*MoqRWMutex_starGenType_TryRLock_results{},
		}
		r.Moq.ResultsByParams_TryRLock = append(r.Moq.ResultsByParams_TryRLock, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_TryRLock) {
			copy(r.Moq.ResultsByParams_TryRLock[insertAt+1:], r.Moq.ResultsByParams_TryRLock[insertAt:0])
			r.Moq.ResultsByParams_TryRLock[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_TryRLock(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRWMutex_starGenType_TryRLock_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRWMutex_starGenType_TryRLock_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRWMutex_starGenType_TryRLock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqRWMutex_starGenType_TryRLock_doFn
				DoReturnFn MoqRWMutex_starGenType_TryRLock_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRWMutex_starGenType) PrettyParams_TryRLock(params MoqRWMutex_starGenType_TryRLock_params) string {
	return fmt.Sprintf("TryRLock()")
}

func (m *MoqRWMutex_starGenType) ParamsKey_TryRLock(params MoqRWMutex_starGenType_TryRLock_params, anyParams uint64) MoqRWMutex_starGenType_TryRLock_paramsKey {
	m.Scene.T.Helper()
	return MoqRWMutex_starGenType_TryRLock_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRWMutex_starGenType_recorder) RUnlock() *MoqRWMutex_starGenType_RUnlock_fnRecorder {
	return &MoqRWMutex_starGenType_RUnlock_fnRecorder{
		Params:   MoqRWMutex_starGenType_RUnlock_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRWMutex_starGenType_RUnlock_fnRecorder) Any() *MoqRWMutex_starGenType_RUnlock_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RUnlock(r.Params))
		return nil
	}
	return &MoqRWMutex_starGenType_RUnlock_anyParams{Recorder: r}
}

func (r *MoqRWMutex_starGenType_RUnlock_fnRecorder) Seq() *MoqRWMutex_starGenType_RUnlock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RUnlock(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRWMutex_starGenType_RUnlock_fnRecorder) NoSeq() *MoqRWMutex_starGenType_RUnlock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RUnlock(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRWMutex_starGenType_RUnlock_fnRecorder) ReturnResults() *MoqRWMutex_starGenType_RUnlock_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_RUnlock_doFn
		DoReturnFn MoqRWMutex_starGenType_RUnlock_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRWMutex_starGenType_RUnlock_fnRecorder) AndDo(fn MoqRWMutex_starGenType_RUnlock_doFn) *MoqRWMutex_starGenType_RUnlock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRWMutex_starGenType_RUnlock_fnRecorder) DoReturnResults(fn MoqRWMutex_starGenType_RUnlock_doReturnFn) *MoqRWMutex_starGenType_RUnlock_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_RUnlock_doFn
		DoReturnFn MoqRWMutex_starGenType_RUnlock_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRWMutex_starGenType_RUnlock_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRWMutex_starGenType_RUnlock_resultsByParams
	for n, res := range r.Moq.ResultsByParams_RUnlock {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRWMutex_starGenType_RUnlock_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRWMutex_starGenType_RUnlock_paramsKey]*MoqRWMutex_starGenType_RUnlock_results{},
		}
		r.Moq.ResultsByParams_RUnlock = append(r.Moq.ResultsByParams_RUnlock, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_RUnlock) {
			copy(r.Moq.ResultsByParams_RUnlock[insertAt+1:], r.Moq.ResultsByParams_RUnlock[insertAt:0])
			r.Moq.ResultsByParams_RUnlock[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_RUnlock(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRWMutex_starGenType_RUnlock_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRWMutex_starGenType_RUnlock_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRWMutex_starGenType_RUnlock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqRWMutex_starGenType_RUnlock_doFn
				DoReturnFn MoqRWMutex_starGenType_RUnlock_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRWMutex_starGenType) PrettyParams_RUnlock(params MoqRWMutex_starGenType_RUnlock_params) string {
	return fmt.Sprintf("RUnlock()")
}

func (m *MoqRWMutex_starGenType) ParamsKey_RUnlock(params MoqRWMutex_starGenType_RUnlock_params, anyParams uint64) MoqRWMutex_starGenType_RUnlock_paramsKey {
	m.Scene.T.Helper()
	return MoqRWMutex_starGenType_RUnlock_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRWMutex_starGenType_recorder) Lock() *MoqRWMutex_starGenType_Lock_fnRecorder {
	return &MoqRWMutex_starGenType_Lock_fnRecorder{
		Params:   MoqRWMutex_starGenType_Lock_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRWMutex_starGenType_Lock_fnRecorder) Any() *MoqRWMutex_starGenType_Lock_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Lock(r.Params))
		return nil
	}
	return &MoqRWMutex_starGenType_Lock_anyParams{Recorder: r}
}

func (r *MoqRWMutex_starGenType_Lock_fnRecorder) Seq() *MoqRWMutex_starGenType_Lock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Lock(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRWMutex_starGenType_Lock_fnRecorder) NoSeq() *MoqRWMutex_starGenType_Lock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Lock(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRWMutex_starGenType_Lock_fnRecorder) ReturnResults() *MoqRWMutex_starGenType_Lock_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_Lock_doFn
		DoReturnFn MoqRWMutex_starGenType_Lock_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRWMutex_starGenType_Lock_fnRecorder) AndDo(fn MoqRWMutex_starGenType_Lock_doFn) *MoqRWMutex_starGenType_Lock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRWMutex_starGenType_Lock_fnRecorder) DoReturnResults(fn MoqRWMutex_starGenType_Lock_doReturnFn) *MoqRWMutex_starGenType_Lock_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_Lock_doFn
		DoReturnFn MoqRWMutex_starGenType_Lock_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRWMutex_starGenType_Lock_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRWMutex_starGenType_Lock_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Lock {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRWMutex_starGenType_Lock_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRWMutex_starGenType_Lock_paramsKey]*MoqRWMutex_starGenType_Lock_results{},
		}
		r.Moq.ResultsByParams_Lock = append(r.Moq.ResultsByParams_Lock, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Lock) {
			copy(r.Moq.ResultsByParams_Lock[insertAt+1:], r.Moq.ResultsByParams_Lock[insertAt:0])
			r.Moq.ResultsByParams_Lock[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Lock(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRWMutex_starGenType_Lock_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRWMutex_starGenType_Lock_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRWMutex_starGenType_Lock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqRWMutex_starGenType_Lock_doFn
				DoReturnFn MoqRWMutex_starGenType_Lock_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRWMutex_starGenType) PrettyParams_Lock(params MoqRWMutex_starGenType_Lock_params) string {
	return fmt.Sprintf("Lock()")
}

func (m *MoqRWMutex_starGenType) ParamsKey_Lock(params MoqRWMutex_starGenType_Lock_params, anyParams uint64) MoqRWMutex_starGenType_Lock_paramsKey {
	m.Scene.T.Helper()
	return MoqRWMutex_starGenType_Lock_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRWMutex_starGenType_recorder) TryLock() *MoqRWMutex_starGenType_TryLock_fnRecorder {
	return &MoqRWMutex_starGenType_TryLock_fnRecorder{
		Params:   MoqRWMutex_starGenType_TryLock_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRWMutex_starGenType_TryLock_fnRecorder) Any() *MoqRWMutex_starGenType_TryLock_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_TryLock(r.Params))
		return nil
	}
	return &MoqRWMutex_starGenType_TryLock_anyParams{Recorder: r}
}

func (r *MoqRWMutex_starGenType_TryLock_fnRecorder) Seq() *MoqRWMutex_starGenType_TryLock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_TryLock(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRWMutex_starGenType_TryLock_fnRecorder) NoSeq() *MoqRWMutex_starGenType_TryLock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_TryLock(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRWMutex_starGenType_TryLock_fnRecorder) ReturnResults(result1 bool) *MoqRWMutex_starGenType_TryLock_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_TryLock_doFn
		DoReturnFn MoqRWMutex_starGenType_TryLock_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRWMutex_starGenType_TryLock_fnRecorder) AndDo(fn MoqRWMutex_starGenType_TryLock_doFn) *MoqRWMutex_starGenType_TryLock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRWMutex_starGenType_TryLock_fnRecorder) DoReturnResults(fn MoqRWMutex_starGenType_TryLock_doReturnFn) *MoqRWMutex_starGenType_TryLock_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_TryLock_doFn
		DoReturnFn MoqRWMutex_starGenType_TryLock_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRWMutex_starGenType_TryLock_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRWMutex_starGenType_TryLock_resultsByParams
	for n, res := range r.Moq.ResultsByParams_TryLock {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRWMutex_starGenType_TryLock_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRWMutex_starGenType_TryLock_paramsKey]*MoqRWMutex_starGenType_TryLock_results{},
		}
		r.Moq.ResultsByParams_TryLock = append(r.Moq.ResultsByParams_TryLock, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_TryLock) {
			copy(r.Moq.ResultsByParams_TryLock[insertAt+1:], r.Moq.ResultsByParams_TryLock[insertAt:0])
			r.Moq.ResultsByParams_TryLock[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_TryLock(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRWMutex_starGenType_TryLock_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRWMutex_starGenType_TryLock_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRWMutex_starGenType_TryLock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqRWMutex_starGenType_TryLock_doFn
				DoReturnFn MoqRWMutex_starGenType_TryLock_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRWMutex_starGenType) PrettyParams_TryLock(params MoqRWMutex_starGenType_TryLock_params) string {
	return fmt.Sprintf("TryLock()")
}

func (m *MoqRWMutex_starGenType) ParamsKey_TryLock(params MoqRWMutex_starGenType_TryLock_params, anyParams uint64) MoqRWMutex_starGenType_TryLock_paramsKey {
	m.Scene.T.Helper()
	return MoqRWMutex_starGenType_TryLock_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRWMutex_starGenType_recorder) Unlock() *MoqRWMutex_starGenType_Unlock_fnRecorder {
	return &MoqRWMutex_starGenType_Unlock_fnRecorder{
		Params:   MoqRWMutex_starGenType_Unlock_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRWMutex_starGenType_Unlock_fnRecorder) Any() *MoqRWMutex_starGenType_Unlock_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Unlock(r.Params))
		return nil
	}
	return &MoqRWMutex_starGenType_Unlock_anyParams{Recorder: r}
}

func (r *MoqRWMutex_starGenType_Unlock_fnRecorder) Seq() *MoqRWMutex_starGenType_Unlock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Unlock(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRWMutex_starGenType_Unlock_fnRecorder) NoSeq() *MoqRWMutex_starGenType_Unlock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Unlock(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRWMutex_starGenType_Unlock_fnRecorder) ReturnResults() *MoqRWMutex_starGenType_Unlock_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_Unlock_doFn
		DoReturnFn MoqRWMutex_starGenType_Unlock_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRWMutex_starGenType_Unlock_fnRecorder) AndDo(fn MoqRWMutex_starGenType_Unlock_doFn) *MoqRWMutex_starGenType_Unlock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRWMutex_starGenType_Unlock_fnRecorder) DoReturnResults(fn MoqRWMutex_starGenType_Unlock_doReturnFn) *MoqRWMutex_starGenType_Unlock_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_Unlock_doFn
		DoReturnFn MoqRWMutex_starGenType_Unlock_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRWMutex_starGenType_Unlock_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRWMutex_starGenType_Unlock_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Unlock {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRWMutex_starGenType_Unlock_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRWMutex_starGenType_Unlock_paramsKey]*MoqRWMutex_starGenType_Unlock_results{},
		}
		r.Moq.ResultsByParams_Unlock = append(r.Moq.ResultsByParams_Unlock, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Unlock) {
			copy(r.Moq.ResultsByParams_Unlock[insertAt+1:], r.Moq.ResultsByParams_Unlock[insertAt:0])
			r.Moq.ResultsByParams_Unlock[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Unlock(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRWMutex_starGenType_Unlock_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRWMutex_starGenType_Unlock_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRWMutex_starGenType_Unlock_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqRWMutex_starGenType_Unlock_doFn
				DoReturnFn MoqRWMutex_starGenType_Unlock_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRWMutex_starGenType) PrettyParams_Unlock(params MoqRWMutex_starGenType_Unlock_params) string {
	return fmt.Sprintf("Unlock()")
}

func (m *MoqRWMutex_starGenType) ParamsKey_Unlock(params MoqRWMutex_starGenType_Unlock_params, anyParams uint64) MoqRWMutex_starGenType_Unlock_paramsKey {
	m.Scene.T.Helper()
	return MoqRWMutex_starGenType_Unlock_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRWMutex_starGenType_recorder) RLocker() *MoqRWMutex_starGenType_RLocker_fnRecorder {
	return &MoqRWMutex_starGenType_RLocker_fnRecorder{
		Params:   MoqRWMutex_starGenType_RLocker_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRWMutex_starGenType_RLocker_fnRecorder) Any() *MoqRWMutex_starGenType_RLocker_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RLocker(r.Params))
		return nil
	}
	return &MoqRWMutex_starGenType_RLocker_anyParams{Recorder: r}
}

func (r *MoqRWMutex_starGenType_RLocker_fnRecorder) Seq() *MoqRWMutex_starGenType_RLocker_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RLocker(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRWMutex_starGenType_RLocker_fnRecorder) NoSeq() *MoqRWMutex_starGenType_RLocker_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RLocker(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRWMutex_starGenType_RLocker_fnRecorder) ReturnResults(result1 sync.Locker) *MoqRWMutex_starGenType_RLocker_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 sync.Locker
		}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_RLocker_doFn
		DoReturnFn MoqRWMutex_starGenType_RLocker_doReturnFn
	}{
		Values: &struct {
			Result1 sync.Locker
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRWMutex_starGenType_RLocker_fnRecorder) AndDo(fn MoqRWMutex_starGenType_RLocker_doFn) *MoqRWMutex_starGenType_RLocker_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRWMutex_starGenType_RLocker_fnRecorder) DoReturnResults(fn MoqRWMutex_starGenType_RLocker_doReturnFn) *MoqRWMutex_starGenType_RLocker_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 sync.Locker
		}
		Sequence   uint32
		DoFn       MoqRWMutex_starGenType_RLocker_doFn
		DoReturnFn MoqRWMutex_starGenType_RLocker_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRWMutex_starGenType_RLocker_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRWMutex_starGenType_RLocker_resultsByParams
	for n, res := range r.Moq.ResultsByParams_RLocker {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRWMutex_starGenType_RLocker_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRWMutex_starGenType_RLocker_paramsKey]*MoqRWMutex_starGenType_RLocker_results{},
		}
		r.Moq.ResultsByParams_RLocker = append(r.Moq.ResultsByParams_RLocker, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_RLocker) {
			copy(r.Moq.ResultsByParams_RLocker[insertAt+1:], r.Moq.ResultsByParams_RLocker[insertAt:0])
			r.Moq.ResultsByParams_RLocker[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_RLocker(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRWMutex_starGenType_RLocker_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRWMutex_starGenType_RLocker_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRWMutex_starGenType_RLocker_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 sync.Locker
				}
				Sequence   uint32
				DoFn       MoqRWMutex_starGenType_RLocker_doFn
				DoReturnFn MoqRWMutex_starGenType_RLocker_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRWMutex_starGenType) PrettyParams_RLocker(params MoqRWMutex_starGenType_RLocker_params) string {
	return fmt.Sprintf("RLocker()")
}

func (m *MoqRWMutex_starGenType) ParamsKey_RLocker(params MoqRWMutex_starGenType_RLocker_params, anyParams uint64) MoqRWMutex_starGenType_RLocker_paramsKey {
	m.Scene.T.Helper()
	return MoqRWMutex_starGenType_RLocker_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqRWMutex_starGenType) Reset() {
	m.ResultsByParams_RLock = nil
	m.ResultsByParams_TryRLock = nil
	m.ResultsByParams_RUnlock = nil
	m.ResultsByParams_Lock = nil
	m.ResultsByParams_TryLock = nil
	m.ResultsByParams_Unlock = nil
	m.ResultsByParams_RLocker = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqRWMutex_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_RLock {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_RLock(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_TryRLock {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_TryRLock(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_RUnlock {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_RUnlock(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Lock {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Lock(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_TryLock {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_TryLock(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Unlock {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Unlock(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_RLocker {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_RLocker(results.Params))
			}
		}
	}
}
