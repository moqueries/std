// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package parser

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"io/fs"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// ParseDir_genType is the fabricated implementation type of this mock (emitted
// when mocking functions directly and not from a function type)
type ParseDir_genType func(fset *token.FileSet, path string, filter func(fs.FileInfo) bool, mode parser.Mode) (pkgs map[string]*ast.Package, first error)

// MoqParseDir_genType holds the state of a moq of the ParseDir_genType type
type MoqParseDir_genType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqParseDir_genType_mock

	ResultsByParams []MoqParseDir_genType_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Fset   moq.ParamIndexing
			Path   moq.ParamIndexing
			Filter moq.ParamIndexing
			Mode   moq.ParamIndexing
		}
	}
}

// MoqParseDir_genType_mock isolates the mock interface of the ParseDir_genType
// type
type MoqParseDir_genType_mock struct {
	Moq *MoqParseDir_genType
}

// MoqParseDir_genType_params holds the params of the ParseDir_genType type
type MoqParseDir_genType_params struct {
	Fset   *token.FileSet
	Path   string
	Filter func(fs.FileInfo) bool
	Mode   parser.Mode
}

// MoqParseDir_genType_paramsKey holds the map key params of the
// ParseDir_genType type
type MoqParseDir_genType_paramsKey struct {
	Params struct {
		Fset *token.FileSet
		Path string
		Mode parser.Mode
	}
	Hashes struct {
		Fset   hash.Hash
		Path   hash.Hash
		Filter hash.Hash
		Mode   hash.Hash
	}
}

// MoqParseDir_genType_resultsByParams contains the results for a given set of
// parameters for the ParseDir_genType type
type MoqParseDir_genType_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqParseDir_genType_paramsKey]*MoqParseDir_genType_results
}

// MoqParseDir_genType_doFn defines the type of function needed when calling
// AndDo for the ParseDir_genType type
type MoqParseDir_genType_doFn func(fset *token.FileSet, path string, filter func(fs.FileInfo) bool, mode parser.Mode)

// MoqParseDir_genType_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ParseDir_genType type
type MoqParseDir_genType_doReturnFn func(fset *token.FileSet, path string, filter func(fs.FileInfo) bool, mode parser.Mode) (pkgs map[string]*ast.Package, first error)

// MoqParseDir_genType_results holds the results of the ParseDir_genType type
type MoqParseDir_genType_results struct {
	Params  MoqParseDir_genType_params
	Results []struct {
		Values *struct {
			Pkgs  map[string]*ast.Package
			First error
		}
		Sequence   uint32
		DoFn       MoqParseDir_genType_doFn
		DoReturnFn MoqParseDir_genType_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqParseDir_genType_fnRecorder routes recorded function calls to the
// MoqParseDir_genType moq
type MoqParseDir_genType_fnRecorder struct {
	Params    MoqParseDir_genType_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqParseDir_genType_results
	Moq       *MoqParseDir_genType
}

// MoqParseDir_genType_anyParams isolates the any params functions of the
// ParseDir_genType type
type MoqParseDir_genType_anyParams struct {
	Recorder *MoqParseDir_genType_fnRecorder
}

// NewMoqParseDir_genType creates a new moq of the ParseDir_genType type
func NewMoqParseDir_genType(scene *moq.Scene, config *moq.Config) *MoqParseDir_genType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqParseDir_genType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqParseDir_genType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Fset   moq.ParamIndexing
				Path   moq.ParamIndexing
				Filter moq.ParamIndexing
				Mode   moq.ParamIndexing
			}
		}{ParameterIndexing: struct {
			Fset   moq.ParamIndexing
			Path   moq.ParamIndexing
			Filter moq.ParamIndexing
			Mode   moq.ParamIndexing
		}{
			Fset:   moq.ParamIndexByHash,
			Path:   moq.ParamIndexByValue,
			Filter: moq.ParamIndexByHash,
			Mode:   moq.ParamIndexByValue,
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the ParseDir_genType type
func (m *MoqParseDir_genType) Mock() ParseDir_genType {
	return func(fset *token.FileSet, path string, filter func(fs.FileInfo) bool, mode parser.Mode) (_ map[string]*ast.Package, _ error) {
		m.Scene.T.Helper()
		moq := &MoqParseDir_genType_mock{Moq: m}
		return moq.Fn(fset, path, filter, mode)
	}
}

func (m *MoqParseDir_genType_mock) Fn(fset *token.FileSet, path string, filter func(fs.FileInfo) bool, mode parser.Mode) (pkgs map[string]*ast.Package, first error) {
	m.Moq.Scene.T.Helper()
	params := MoqParseDir_genType_params{
		Fset:   fset,
		Path:   path,
		Filter: filter,
		Mode:   mode,
	}
	var results *MoqParseDir_genType_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		paramsKey := m.Moq.ParamsKey(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(fset, path, filter, mode)
	}

	if result.Values != nil {
		pkgs = result.Values.Pkgs
		first = result.Values.First
	}
	if result.DoReturnFn != nil {
		pkgs, first = result.DoReturnFn(fset, path, filter, mode)
	}
	return
}

func (m *MoqParseDir_genType) OnCall(fset *token.FileSet, path string, filter func(fs.FileInfo) bool, mode parser.Mode) *MoqParseDir_genType_fnRecorder {
	return &MoqParseDir_genType_fnRecorder{
		Params: MoqParseDir_genType_params{
			Fset:   fset,
			Path:   path,
			Filter: filter,
			Mode:   mode,
		},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqParseDir_genType_fnRecorder) Any() *MoqParseDir_genType_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	return &MoqParseDir_genType_anyParams{Recorder: r}
}

func (a *MoqParseDir_genType_anyParams) Fset() *MoqParseDir_genType_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqParseDir_genType_anyParams) Path() *MoqParseDir_genType_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqParseDir_genType_anyParams) Filter() *MoqParseDir_genType_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (a *MoqParseDir_genType_anyParams) Mode() *MoqParseDir_genType_fnRecorder {
	a.Recorder.AnyParams |= 1 << 3
	return a.Recorder
}

func (r *MoqParseDir_genType_fnRecorder) Seq() *MoqParseDir_genType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqParseDir_genType_fnRecorder) NoSeq() *MoqParseDir_genType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqParseDir_genType_fnRecorder) ReturnResults(pkgs map[string]*ast.Package, first error) *MoqParseDir_genType_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Pkgs  map[string]*ast.Package
			First error
		}
		Sequence   uint32
		DoFn       MoqParseDir_genType_doFn
		DoReturnFn MoqParseDir_genType_doReturnFn
	}{
		Values: &struct {
			Pkgs  map[string]*ast.Package
			First error
		}{
			Pkgs:  pkgs,
			First: first,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqParseDir_genType_fnRecorder) AndDo(fn MoqParseDir_genType_doFn) *MoqParseDir_genType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqParseDir_genType_fnRecorder) DoReturnResults(fn MoqParseDir_genType_doReturnFn) *MoqParseDir_genType_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Pkgs  map[string]*ast.Package
			First error
		}
		Sequence   uint32
		DoFn       MoqParseDir_genType_doFn
		DoReturnFn MoqParseDir_genType_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqParseDir_genType_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqParseDir_genType_resultsByParams
	for n, res := range r.Moq.ResultsByParams {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqParseDir_genType_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqParseDir_genType_paramsKey]*MoqParseDir_genType_results{},
		}
		r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
			copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
			r.Moq.ResultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqParseDir_genType_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqParseDir_genType_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqParseDir_genType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Pkgs  map[string]*ast.Package
					First error
				}
				Sequence   uint32
				DoFn       MoqParseDir_genType_doFn
				DoReturnFn MoqParseDir_genType_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqParseDir_genType) PrettyParams(params MoqParseDir_genType_params) string {
	return fmt.Sprintf("ParseDir_genType(%#v, %#v, %#v, %#v)", params.Fset, params.Path, moq.FnString(params.Filter), params.Mode)
}

func (m *MoqParseDir_genType) ParamsKey(params MoqParseDir_genType_params, anyParams uint64) MoqParseDir_genType_paramsKey {
	m.Scene.T.Helper()
	var fsetUsed *token.FileSet
	var fsetUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Fset == moq.ParamIndexByValue {
			fsetUsed = params.Fset
		} else {
			fsetUsedHash = hash.DeepHash(params.Fset)
		}
	}
	var pathUsed string
	var pathUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Path == moq.ParamIndexByValue {
			pathUsed = params.Path
		} else {
			pathUsedHash = hash.DeepHash(params.Path)
		}
	}
	var filterUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Filter == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The filter parameter can't be indexed by value")
		}
		filterUsedHash = hash.DeepHash(params.Filter)
	}
	var modeUsed parser.Mode
	var modeUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.Runtime.ParameterIndexing.Mode == moq.ParamIndexByValue {
			modeUsed = params.Mode
		} else {
			modeUsedHash = hash.DeepHash(params.Mode)
		}
	}
	return MoqParseDir_genType_paramsKey{
		Params: struct {
			Fset *token.FileSet
			Path string
			Mode parser.Mode
		}{
			Fset: fsetUsed,
			Path: pathUsed,
			Mode: modeUsed,
		},
		Hashes: struct {
			Fset   hash.Hash
			Path   hash.Hash
			Filter hash.Hash
			Mode   hash.Hash
		}{
			Fset:   fsetUsedHash,
			Path:   pathUsedHash,
			Filter: filterUsedHash,
			Mode:   modeUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqParseDir_genType) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqParseDir_genType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams(results.Params))
			}
		}
	}
}
