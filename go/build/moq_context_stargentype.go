// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package build

import (
	"fmt"
	"go/build"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that build.Context_starGenType is
// mocked completely
var _ Context_starGenType = (*MoqContext_starGenType_mock)(nil)

// Context_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Context_starGenType interface {
	SrcDirs() []string
	ImportDir(dir string, mode build.ImportMode) (*build.Package, error)
	Import(path string, srcDir string, mode build.ImportMode) (*build.Package, error)
	MatchFile(dir, name string) (match bool, err error)
}

// MoqContext_starGenType holds the state of a moq of the Context_starGenType
// type
type MoqContext_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqContext_starGenType_mock

	ResultsByParams_SrcDirs   []MoqContext_starGenType_SrcDirs_resultsByParams
	ResultsByParams_ImportDir []MoqContext_starGenType_ImportDir_resultsByParams
	ResultsByParams_Import    []MoqContext_starGenType_Import_resultsByParams
	ResultsByParams_MatchFile []MoqContext_starGenType_MatchFile_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			SrcDirs   struct{}
			ImportDir struct {
				Dir  moq.ParamIndexing
				Mode moq.ParamIndexing
			}
			Import struct {
				Path   moq.ParamIndexing
				SrcDir moq.ParamIndexing
				Mode   moq.ParamIndexing
			}
			MatchFile struct {
				Dir  moq.ParamIndexing
				Name moq.ParamIndexing
			}
		}
	}
	// MoqContext_starGenType_mock isolates the mock interface of the
}

// Context_starGenType type
type MoqContext_starGenType_mock struct {
	Moq *MoqContext_starGenType
}

// MoqContext_starGenType_recorder isolates the recorder interface of the
// Context_starGenType type
type MoqContext_starGenType_recorder struct {
	Moq *MoqContext_starGenType
}

// MoqContext_starGenType_SrcDirs_params holds the params of the
// Context_starGenType type
type MoqContext_starGenType_SrcDirs_params struct{}

// MoqContext_starGenType_SrcDirs_paramsKey holds the map key params of the
// Context_starGenType type
type MoqContext_starGenType_SrcDirs_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqContext_starGenType_SrcDirs_resultsByParams contains the results for a
// given set of parameters for the Context_starGenType type
type MoqContext_starGenType_SrcDirs_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqContext_starGenType_SrcDirs_paramsKey]*MoqContext_starGenType_SrcDirs_results
}

// MoqContext_starGenType_SrcDirs_doFn defines the type of function needed when
// calling AndDo for the Context_starGenType type
type MoqContext_starGenType_SrcDirs_doFn func()

// MoqContext_starGenType_SrcDirs_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Context_starGenType type
type MoqContext_starGenType_SrcDirs_doReturnFn func() []string

// MoqContext_starGenType_SrcDirs_results holds the results of the
// Context_starGenType type
type MoqContext_starGenType_SrcDirs_results struct {
	Params  MoqContext_starGenType_SrcDirs_params
	Results []struct {
		Values *struct {
			Result1 []string
		}
		Sequence   uint32
		DoFn       MoqContext_starGenType_SrcDirs_doFn
		DoReturnFn MoqContext_starGenType_SrcDirs_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqContext_starGenType_SrcDirs_fnRecorder routes recorded function calls to
// the MoqContext_starGenType moq
type MoqContext_starGenType_SrcDirs_fnRecorder struct {
	Params    MoqContext_starGenType_SrcDirs_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqContext_starGenType_SrcDirs_results
	Moq       *MoqContext_starGenType
}

// MoqContext_starGenType_SrcDirs_anyParams isolates the any params functions
// of the Context_starGenType type
type MoqContext_starGenType_SrcDirs_anyParams struct {
	Recorder *MoqContext_starGenType_SrcDirs_fnRecorder
}

// MoqContext_starGenType_ImportDir_params holds the params of the
// Context_starGenType type
type MoqContext_starGenType_ImportDir_params struct {
	Dir  string
	Mode build.ImportMode
}

// MoqContext_starGenType_ImportDir_paramsKey holds the map key params of the
// Context_starGenType type
type MoqContext_starGenType_ImportDir_paramsKey struct {
	Params struct {
		Dir  string
		Mode build.ImportMode
	}
	Hashes struct {
		Dir  hash.Hash
		Mode hash.Hash
	}
}

// MoqContext_starGenType_ImportDir_resultsByParams contains the results for a
// given set of parameters for the Context_starGenType type
type MoqContext_starGenType_ImportDir_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqContext_starGenType_ImportDir_paramsKey]*MoqContext_starGenType_ImportDir_results
}

// MoqContext_starGenType_ImportDir_doFn defines the type of function needed
// when calling AndDo for the Context_starGenType type
type MoqContext_starGenType_ImportDir_doFn func(dir string, mode build.ImportMode)

// MoqContext_starGenType_ImportDir_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Context_starGenType type
type MoqContext_starGenType_ImportDir_doReturnFn func(dir string, mode build.ImportMode) (*build.Package, error)

// MoqContext_starGenType_ImportDir_results holds the results of the
// Context_starGenType type
type MoqContext_starGenType_ImportDir_results struct {
	Params  MoqContext_starGenType_ImportDir_params
	Results []struct {
		Values *struct {
			Result1 *build.Package
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqContext_starGenType_ImportDir_doFn
		DoReturnFn MoqContext_starGenType_ImportDir_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqContext_starGenType_ImportDir_fnRecorder routes recorded function calls
// to the MoqContext_starGenType moq
type MoqContext_starGenType_ImportDir_fnRecorder struct {
	Params    MoqContext_starGenType_ImportDir_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqContext_starGenType_ImportDir_results
	Moq       *MoqContext_starGenType
}

// MoqContext_starGenType_ImportDir_anyParams isolates the any params functions
// of the Context_starGenType type
type MoqContext_starGenType_ImportDir_anyParams struct {
	Recorder *MoqContext_starGenType_ImportDir_fnRecorder
}

// MoqContext_starGenType_Import_params holds the params of the
// Context_starGenType type
type MoqContext_starGenType_Import_params struct {
	Path   string
	SrcDir string
	Mode   build.ImportMode
}

// MoqContext_starGenType_Import_paramsKey holds the map key params of the
// Context_starGenType type
type MoqContext_starGenType_Import_paramsKey struct {
	Params struct {
		Path   string
		SrcDir string
		Mode   build.ImportMode
	}
	Hashes struct {
		Path   hash.Hash
		SrcDir hash.Hash
		Mode   hash.Hash
	}
}

// MoqContext_starGenType_Import_resultsByParams contains the results for a
// given set of parameters for the Context_starGenType type
type MoqContext_starGenType_Import_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqContext_starGenType_Import_paramsKey]*MoqContext_starGenType_Import_results
}

// MoqContext_starGenType_Import_doFn defines the type of function needed when
// calling AndDo for the Context_starGenType type
type MoqContext_starGenType_Import_doFn func(path string, srcDir string, mode build.ImportMode)

// MoqContext_starGenType_Import_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Context_starGenType type
type MoqContext_starGenType_Import_doReturnFn func(path string, srcDir string, mode build.ImportMode) (*build.Package, error)

// MoqContext_starGenType_Import_results holds the results of the
// Context_starGenType type
type MoqContext_starGenType_Import_results struct {
	Params  MoqContext_starGenType_Import_params
	Results []struct {
		Values *struct {
			Result1 *build.Package
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqContext_starGenType_Import_doFn
		DoReturnFn MoqContext_starGenType_Import_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqContext_starGenType_Import_fnRecorder routes recorded function calls to
// the MoqContext_starGenType moq
type MoqContext_starGenType_Import_fnRecorder struct {
	Params    MoqContext_starGenType_Import_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqContext_starGenType_Import_results
	Moq       *MoqContext_starGenType
}

// MoqContext_starGenType_Import_anyParams isolates the any params functions of
// the Context_starGenType type
type MoqContext_starGenType_Import_anyParams struct {
	Recorder *MoqContext_starGenType_Import_fnRecorder
}

// MoqContext_starGenType_MatchFile_params holds the params of the
// Context_starGenType type
type MoqContext_starGenType_MatchFile_params struct{ Dir, Name string }

// MoqContext_starGenType_MatchFile_paramsKey holds the map key params of the
// Context_starGenType type
type MoqContext_starGenType_MatchFile_paramsKey struct {
	Params struct{ Dir, Name string }
	Hashes struct{ Dir, Name hash.Hash }
}

// MoqContext_starGenType_MatchFile_resultsByParams contains the results for a
// given set of parameters for the Context_starGenType type
type MoqContext_starGenType_MatchFile_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqContext_starGenType_MatchFile_paramsKey]*MoqContext_starGenType_MatchFile_results
}

// MoqContext_starGenType_MatchFile_doFn defines the type of function needed
// when calling AndDo for the Context_starGenType type
type MoqContext_starGenType_MatchFile_doFn func(dir, name string)

// MoqContext_starGenType_MatchFile_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Context_starGenType type
type MoqContext_starGenType_MatchFile_doReturnFn func(dir, name string) (match bool, err error)

// MoqContext_starGenType_MatchFile_results holds the results of the
// Context_starGenType type
type MoqContext_starGenType_MatchFile_results struct {
	Params  MoqContext_starGenType_MatchFile_params
	Results []struct {
		Values *struct {
			Match bool
			Err   error
		}
		Sequence   uint32
		DoFn       MoqContext_starGenType_MatchFile_doFn
		DoReturnFn MoqContext_starGenType_MatchFile_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqContext_starGenType_MatchFile_fnRecorder routes recorded function calls
// to the MoqContext_starGenType moq
type MoqContext_starGenType_MatchFile_fnRecorder struct {
	Params    MoqContext_starGenType_MatchFile_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqContext_starGenType_MatchFile_results
	Moq       *MoqContext_starGenType
}

// MoqContext_starGenType_MatchFile_anyParams isolates the any params functions
// of the Context_starGenType type
type MoqContext_starGenType_MatchFile_anyParams struct {
	Recorder *MoqContext_starGenType_MatchFile_fnRecorder
}

// NewMoqContext_starGenType creates a new moq of the Context_starGenType type
func NewMoqContext_starGenType(scene *moq.Scene, config *moq.Config) *MoqContext_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqContext_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqContext_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				SrcDirs   struct{}
				ImportDir struct {
					Dir  moq.ParamIndexing
					Mode moq.ParamIndexing
				}
				Import struct {
					Path   moq.ParamIndexing
					SrcDir moq.ParamIndexing
					Mode   moq.ParamIndexing
				}
				MatchFile struct {
					Dir  moq.ParamIndexing
					Name moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			SrcDirs   struct{}
			ImportDir struct {
				Dir  moq.ParamIndexing
				Mode moq.ParamIndexing
			}
			Import struct {
				Path   moq.ParamIndexing
				SrcDir moq.ParamIndexing
				Mode   moq.ParamIndexing
			}
			MatchFile struct {
				Dir  moq.ParamIndexing
				Name moq.ParamIndexing
			}
		}{
			SrcDirs: struct{}{},
			ImportDir: struct {
				Dir  moq.ParamIndexing
				Mode moq.ParamIndexing
			}{
				Dir:  moq.ParamIndexByValue,
				Mode: moq.ParamIndexByValue,
			},
			Import: struct {
				Path   moq.ParamIndexing
				SrcDir moq.ParamIndexing
				Mode   moq.ParamIndexing
			}{
				Path:   moq.ParamIndexByValue,
				SrcDir: moq.ParamIndexByValue,
				Mode:   moq.ParamIndexByValue,
			},
			MatchFile: struct {
				Dir  moq.ParamIndexing
				Name moq.ParamIndexing
			}{
				Dir:  moq.ParamIndexByValue,
				Name: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Context_starGenType type
func (m *MoqContext_starGenType) Mock() *MoqContext_starGenType_mock { return m.Moq }

func (m *MoqContext_starGenType_mock) SrcDirs() (result1 []string) {
	m.Moq.Scene.T.Helper()
	params := MoqContext_starGenType_SrcDirs_params{}
	var results *MoqContext_starGenType_SrcDirs_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SrcDirs {
		paramsKey := m.Moq.ParamsKey_SrcDirs(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SrcDirs(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SrcDirs(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SrcDirs(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqContext_starGenType_mock) ImportDir(dir string, mode build.ImportMode) (result1 *build.Package, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqContext_starGenType_ImportDir_params{
		Dir:  dir,
		Mode: mode,
	}
	var results *MoqContext_starGenType_ImportDir_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ImportDir {
		paramsKey := m.Moq.ParamsKey_ImportDir(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ImportDir(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ImportDir(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ImportDir(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(dir, mode)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(dir, mode)
	}
	return
}

func (m *MoqContext_starGenType_mock) Import(path string, srcDir string, mode build.ImportMode) (result1 *build.Package, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqContext_starGenType_Import_params{
		Path:   path,
		SrcDir: srcDir,
		Mode:   mode,
	}
	var results *MoqContext_starGenType_Import_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Import {
		paramsKey := m.Moq.ParamsKey_Import(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Import(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Import(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Import(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(path, srcDir, mode)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(path, srcDir, mode)
	}
	return
}

func (m *MoqContext_starGenType_mock) MatchFile(dir, name string) (match bool, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqContext_starGenType_MatchFile_params{
		Dir:  dir,
		Name: name,
	}
	var results *MoqContext_starGenType_MatchFile_results
	for _, resultsByParams := range m.Moq.ResultsByParams_MatchFile {
		paramsKey := m.Moq.ParamsKey_MatchFile(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_MatchFile(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_MatchFile(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_MatchFile(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(dir, name)
	}

	if result.Values != nil {
		match = result.Values.Match
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		match, err = result.DoReturnFn(dir, name)
	}
	return
}

// OnCall returns the recorder implementation of the Context_starGenType type
func (m *MoqContext_starGenType) OnCall() *MoqContext_starGenType_recorder {
	return &MoqContext_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqContext_starGenType_recorder) SrcDirs() *MoqContext_starGenType_SrcDirs_fnRecorder {
	return &MoqContext_starGenType_SrcDirs_fnRecorder{
		Params:   MoqContext_starGenType_SrcDirs_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqContext_starGenType_SrcDirs_fnRecorder) Any() *MoqContext_starGenType_SrcDirs_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SrcDirs(r.Params))
		return nil
	}
	return &MoqContext_starGenType_SrcDirs_anyParams{Recorder: r}
}

func (r *MoqContext_starGenType_SrcDirs_fnRecorder) Seq() *MoqContext_starGenType_SrcDirs_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SrcDirs(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqContext_starGenType_SrcDirs_fnRecorder) NoSeq() *MoqContext_starGenType_SrcDirs_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SrcDirs(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqContext_starGenType_SrcDirs_fnRecorder) ReturnResults(result1 []string) *MoqContext_starGenType_SrcDirs_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []string
		}
		Sequence   uint32
		DoFn       MoqContext_starGenType_SrcDirs_doFn
		DoReturnFn MoqContext_starGenType_SrcDirs_doReturnFn
	}{
		Values: &struct {
			Result1 []string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqContext_starGenType_SrcDirs_fnRecorder) AndDo(fn MoqContext_starGenType_SrcDirs_doFn) *MoqContext_starGenType_SrcDirs_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqContext_starGenType_SrcDirs_fnRecorder) DoReturnResults(fn MoqContext_starGenType_SrcDirs_doReturnFn) *MoqContext_starGenType_SrcDirs_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []string
		}
		Sequence   uint32
		DoFn       MoqContext_starGenType_SrcDirs_doFn
		DoReturnFn MoqContext_starGenType_SrcDirs_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqContext_starGenType_SrcDirs_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqContext_starGenType_SrcDirs_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SrcDirs {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqContext_starGenType_SrcDirs_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqContext_starGenType_SrcDirs_paramsKey]*MoqContext_starGenType_SrcDirs_results{},
		}
		r.Moq.ResultsByParams_SrcDirs = append(r.Moq.ResultsByParams_SrcDirs, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SrcDirs) {
			copy(r.Moq.ResultsByParams_SrcDirs[insertAt+1:], r.Moq.ResultsByParams_SrcDirs[insertAt:0])
			r.Moq.ResultsByParams_SrcDirs[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SrcDirs(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqContext_starGenType_SrcDirs_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqContext_starGenType_SrcDirs_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqContext_starGenType_SrcDirs_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []string
				}
				Sequence   uint32
				DoFn       MoqContext_starGenType_SrcDirs_doFn
				DoReturnFn MoqContext_starGenType_SrcDirs_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqContext_starGenType) PrettyParams_SrcDirs(params MoqContext_starGenType_SrcDirs_params) string {
	return fmt.Sprintf("SrcDirs()")
}

func (m *MoqContext_starGenType) ParamsKey_SrcDirs(params MoqContext_starGenType_SrcDirs_params, anyParams uint64) MoqContext_starGenType_SrcDirs_paramsKey {
	m.Scene.T.Helper()
	return MoqContext_starGenType_SrcDirs_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqContext_starGenType_recorder) ImportDir(dir string, mode build.ImportMode) *MoqContext_starGenType_ImportDir_fnRecorder {
	return &MoqContext_starGenType_ImportDir_fnRecorder{
		Params: MoqContext_starGenType_ImportDir_params{
			Dir:  dir,
			Mode: mode,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqContext_starGenType_ImportDir_fnRecorder) Any() *MoqContext_starGenType_ImportDir_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ImportDir(r.Params))
		return nil
	}
	return &MoqContext_starGenType_ImportDir_anyParams{Recorder: r}
}

func (a *MoqContext_starGenType_ImportDir_anyParams) Dir() *MoqContext_starGenType_ImportDir_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqContext_starGenType_ImportDir_anyParams) Mode() *MoqContext_starGenType_ImportDir_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqContext_starGenType_ImportDir_fnRecorder) Seq() *MoqContext_starGenType_ImportDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ImportDir(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqContext_starGenType_ImportDir_fnRecorder) NoSeq() *MoqContext_starGenType_ImportDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ImportDir(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqContext_starGenType_ImportDir_fnRecorder) ReturnResults(result1 *build.Package, result2 error) *MoqContext_starGenType_ImportDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *build.Package
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqContext_starGenType_ImportDir_doFn
		DoReturnFn MoqContext_starGenType_ImportDir_doReturnFn
	}{
		Values: &struct {
			Result1 *build.Package
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqContext_starGenType_ImportDir_fnRecorder) AndDo(fn MoqContext_starGenType_ImportDir_doFn) *MoqContext_starGenType_ImportDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqContext_starGenType_ImportDir_fnRecorder) DoReturnResults(fn MoqContext_starGenType_ImportDir_doReturnFn) *MoqContext_starGenType_ImportDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *build.Package
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqContext_starGenType_ImportDir_doFn
		DoReturnFn MoqContext_starGenType_ImportDir_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqContext_starGenType_ImportDir_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqContext_starGenType_ImportDir_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ImportDir {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqContext_starGenType_ImportDir_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqContext_starGenType_ImportDir_paramsKey]*MoqContext_starGenType_ImportDir_results{},
		}
		r.Moq.ResultsByParams_ImportDir = append(r.Moq.ResultsByParams_ImportDir, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ImportDir) {
			copy(r.Moq.ResultsByParams_ImportDir[insertAt+1:], r.Moq.ResultsByParams_ImportDir[insertAt:0])
			r.Moq.ResultsByParams_ImportDir[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ImportDir(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqContext_starGenType_ImportDir_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqContext_starGenType_ImportDir_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqContext_starGenType_ImportDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *build.Package
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqContext_starGenType_ImportDir_doFn
				DoReturnFn MoqContext_starGenType_ImportDir_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqContext_starGenType) PrettyParams_ImportDir(params MoqContext_starGenType_ImportDir_params) string {
	return fmt.Sprintf("ImportDir(%#v, %#v)", params.Dir, params.Mode)
}

func (m *MoqContext_starGenType) ParamsKey_ImportDir(params MoqContext_starGenType_ImportDir_params, anyParams uint64) MoqContext_starGenType_ImportDir_paramsKey {
	m.Scene.T.Helper()
	var dirUsed string
	var dirUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ImportDir.Dir == moq.ParamIndexByValue {
			dirUsed = params.Dir
		} else {
			dirUsedHash = hash.DeepHash(params.Dir)
		}
	}
	var modeUsed build.ImportMode
	var modeUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.ImportDir.Mode == moq.ParamIndexByValue {
			modeUsed = params.Mode
		} else {
			modeUsedHash = hash.DeepHash(params.Mode)
		}
	}
	return MoqContext_starGenType_ImportDir_paramsKey{
		Params: struct {
			Dir  string
			Mode build.ImportMode
		}{
			Dir:  dirUsed,
			Mode: modeUsed,
		},
		Hashes: struct {
			Dir  hash.Hash
			Mode hash.Hash
		}{
			Dir:  dirUsedHash,
			Mode: modeUsedHash,
		},
	}
}

func (m *MoqContext_starGenType_recorder) Import(path string, srcDir string, mode build.ImportMode) *MoqContext_starGenType_Import_fnRecorder {
	return &MoqContext_starGenType_Import_fnRecorder{
		Params: MoqContext_starGenType_Import_params{
			Path:   path,
			SrcDir: srcDir,
			Mode:   mode,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqContext_starGenType_Import_fnRecorder) Any() *MoqContext_starGenType_Import_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Import(r.Params))
		return nil
	}
	return &MoqContext_starGenType_Import_anyParams{Recorder: r}
}

func (a *MoqContext_starGenType_Import_anyParams) Path() *MoqContext_starGenType_Import_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqContext_starGenType_Import_anyParams) SrcDir() *MoqContext_starGenType_Import_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqContext_starGenType_Import_anyParams) Mode() *MoqContext_starGenType_Import_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqContext_starGenType_Import_fnRecorder) Seq() *MoqContext_starGenType_Import_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Import(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqContext_starGenType_Import_fnRecorder) NoSeq() *MoqContext_starGenType_Import_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Import(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqContext_starGenType_Import_fnRecorder) ReturnResults(result1 *build.Package, result2 error) *MoqContext_starGenType_Import_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *build.Package
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqContext_starGenType_Import_doFn
		DoReturnFn MoqContext_starGenType_Import_doReturnFn
	}{
		Values: &struct {
			Result1 *build.Package
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqContext_starGenType_Import_fnRecorder) AndDo(fn MoqContext_starGenType_Import_doFn) *MoqContext_starGenType_Import_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqContext_starGenType_Import_fnRecorder) DoReturnResults(fn MoqContext_starGenType_Import_doReturnFn) *MoqContext_starGenType_Import_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *build.Package
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqContext_starGenType_Import_doFn
		DoReturnFn MoqContext_starGenType_Import_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqContext_starGenType_Import_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqContext_starGenType_Import_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Import {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqContext_starGenType_Import_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqContext_starGenType_Import_paramsKey]*MoqContext_starGenType_Import_results{},
		}
		r.Moq.ResultsByParams_Import = append(r.Moq.ResultsByParams_Import, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Import) {
			copy(r.Moq.ResultsByParams_Import[insertAt+1:], r.Moq.ResultsByParams_Import[insertAt:0])
			r.Moq.ResultsByParams_Import[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Import(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqContext_starGenType_Import_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqContext_starGenType_Import_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqContext_starGenType_Import_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *build.Package
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqContext_starGenType_Import_doFn
				DoReturnFn MoqContext_starGenType_Import_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqContext_starGenType) PrettyParams_Import(params MoqContext_starGenType_Import_params) string {
	return fmt.Sprintf("Import(%#v, %#v, %#v)", params.Path, params.SrcDir, params.Mode)
}

func (m *MoqContext_starGenType) ParamsKey_Import(params MoqContext_starGenType_Import_params, anyParams uint64) MoqContext_starGenType_Import_paramsKey {
	m.Scene.T.Helper()
	var pathUsed string
	var pathUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Import.Path == moq.ParamIndexByValue {
			pathUsed = params.Path
		} else {
			pathUsedHash = hash.DeepHash(params.Path)
		}
	}
	var srcDirUsed string
	var srcDirUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Import.SrcDir == moq.ParamIndexByValue {
			srcDirUsed = params.SrcDir
		} else {
			srcDirUsedHash = hash.DeepHash(params.SrcDir)
		}
	}
	var modeUsed build.ImportMode
	var modeUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Import.Mode == moq.ParamIndexByValue {
			modeUsed = params.Mode
		} else {
			modeUsedHash = hash.DeepHash(params.Mode)
		}
	}
	return MoqContext_starGenType_Import_paramsKey{
		Params: struct {
			Path   string
			SrcDir string
			Mode   build.ImportMode
		}{
			Path:   pathUsed,
			SrcDir: srcDirUsed,
			Mode:   modeUsed,
		},
		Hashes: struct {
			Path   hash.Hash
			SrcDir hash.Hash
			Mode   hash.Hash
		}{
			Path:   pathUsedHash,
			SrcDir: srcDirUsedHash,
			Mode:   modeUsedHash,
		},
	}
}

func (m *MoqContext_starGenType_recorder) MatchFile(dir, name string) *MoqContext_starGenType_MatchFile_fnRecorder {
	return &MoqContext_starGenType_MatchFile_fnRecorder{
		Params: MoqContext_starGenType_MatchFile_params{
			Dir:  dir,
			Name: name,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqContext_starGenType_MatchFile_fnRecorder) Any() *MoqContext_starGenType_MatchFile_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MatchFile(r.Params))
		return nil
	}
	return &MoqContext_starGenType_MatchFile_anyParams{Recorder: r}
}

func (a *MoqContext_starGenType_MatchFile_anyParams) Dir() *MoqContext_starGenType_MatchFile_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqContext_starGenType_MatchFile_anyParams) Name() *MoqContext_starGenType_MatchFile_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqContext_starGenType_MatchFile_fnRecorder) Seq() *MoqContext_starGenType_MatchFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MatchFile(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqContext_starGenType_MatchFile_fnRecorder) NoSeq() *MoqContext_starGenType_MatchFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MatchFile(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqContext_starGenType_MatchFile_fnRecorder) ReturnResults(match bool, err error) *MoqContext_starGenType_MatchFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Match bool
			Err   error
		}
		Sequence   uint32
		DoFn       MoqContext_starGenType_MatchFile_doFn
		DoReturnFn MoqContext_starGenType_MatchFile_doReturnFn
	}{
		Values: &struct {
			Match bool
			Err   error
		}{
			Match: match,
			Err:   err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqContext_starGenType_MatchFile_fnRecorder) AndDo(fn MoqContext_starGenType_MatchFile_doFn) *MoqContext_starGenType_MatchFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqContext_starGenType_MatchFile_fnRecorder) DoReturnResults(fn MoqContext_starGenType_MatchFile_doReturnFn) *MoqContext_starGenType_MatchFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Match bool
			Err   error
		}
		Sequence   uint32
		DoFn       MoqContext_starGenType_MatchFile_doFn
		DoReturnFn MoqContext_starGenType_MatchFile_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqContext_starGenType_MatchFile_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqContext_starGenType_MatchFile_resultsByParams
	for n, res := range r.Moq.ResultsByParams_MatchFile {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqContext_starGenType_MatchFile_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqContext_starGenType_MatchFile_paramsKey]*MoqContext_starGenType_MatchFile_results{},
		}
		r.Moq.ResultsByParams_MatchFile = append(r.Moq.ResultsByParams_MatchFile, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_MatchFile) {
			copy(r.Moq.ResultsByParams_MatchFile[insertAt+1:], r.Moq.ResultsByParams_MatchFile[insertAt:0])
			r.Moq.ResultsByParams_MatchFile[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_MatchFile(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqContext_starGenType_MatchFile_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqContext_starGenType_MatchFile_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqContext_starGenType_MatchFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Match bool
					Err   error
				}
				Sequence   uint32
				DoFn       MoqContext_starGenType_MatchFile_doFn
				DoReturnFn MoqContext_starGenType_MatchFile_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqContext_starGenType) PrettyParams_MatchFile(params MoqContext_starGenType_MatchFile_params) string {
	return fmt.Sprintf("MatchFile(%#v, %#v)", params.Dir, params.Name)
}

func (m *MoqContext_starGenType) ParamsKey_MatchFile(params MoqContext_starGenType_MatchFile_params, anyParams uint64) MoqContext_starGenType_MatchFile_paramsKey {
	m.Scene.T.Helper()
	var dirUsed string
	var dirUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.MatchFile.Dir == moq.ParamIndexByValue {
			dirUsed = params.Dir
		} else {
			dirUsedHash = hash.DeepHash(params.Dir)
		}
	}
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.MatchFile.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	return MoqContext_starGenType_MatchFile_paramsKey{
		Params: struct{ Dir, Name string }{
			Dir:  dirUsed,
			Name: nameUsed,
		},
		Hashes: struct{ Dir, Name hash.Hash }{
			Dir:  dirUsedHash,
			Name: nameUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqContext_starGenType) Reset() {
	m.ResultsByParams_SrcDirs = nil
	m.ResultsByParams_ImportDir = nil
	m.ResultsByParams_Import = nil
	m.ResultsByParams_MatchFile = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqContext_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_SrcDirs {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SrcDirs(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ImportDir {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ImportDir(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Import {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Import(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_MatchFile {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_MatchFile(results.Params))
			}
		}
	}
}
