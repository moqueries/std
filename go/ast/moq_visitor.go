// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package ast

import (
	"fmt"
	"go/ast"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that ast.Visitor is mocked completely
var _ ast.Visitor = (*MoqVisitor_mock)(nil)

// MoqVisitor holds the state of a moq of the Visitor type
type MoqVisitor struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqVisitor_mock

	ResultsByParams_Visit []MoqVisitor_Visit_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Visit struct {
				Node moq.ParamIndexing
			}
		}
	}
	// MoqVisitor_mock isolates the mock interface of the Visitor type
}

type MoqVisitor_mock struct {
	Moq *MoqVisitor
}

// MoqVisitor_recorder isolates the recorder interface of the Visitor type
type MoqVisitor_recorder struct {
	Moq *MoqVisitor
}

// MoqVisitor_Visit_params holds the params of the Visitor type
type MoqVisitor_Visit_params struct{ Node ast.Node }

// MoqVisitor_Visit_paramsKey holds the map key params of the Visitor type
type MoqVisitor_Visit_paramsKey struct {
	Params struct{ Node ast.Node }
	Hashes struct{ Node hash.Hash }
}

// MoqVisitor_Visit_resultsByParams contains the results for a given set of
// parameters for the Visitor type
type MoqVisitor_Visit_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqVisitor_Visit_paramsKey]*MoqVisitor_Visit_results
}

// MoqVisitor_Visit_doFn defines the type of function needed when calling AndDo
// for the Visitor type
type MoqVisitor_Visit_doFn func(node ast.Node)

// MoqVisitor_Visit_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Visitor type
type MoqVisitor_Visit_doReturnFn func(node ast.Node) (w ast.Visitor)

// MoqVisitor_Visit_results holds the results of the Visitor type
type MoqVisitor_Visit_results struct {
	Params  MoqVisitor_Visit_params
	Results []struct {
		Values     *struct{ W ast.Visitor }
		Sequence   uint32
		DoFn       MoqVisitor_Visit_doFn
		DoReturnFn MoqVisitor_Visit_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqVisitor_Visit_fnRecorder routes recorded function calls to the MoqVisitor
// moq
type MoqVisitor_Visit_fnRecorder struct {
	Params    MoqVisitor_Visit_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqVisitor_Visit_results
	Moq       *MoqVisitor
}

// MoqVisitor_Visit_anyParams isolates the any params functions of the Visitor
// type
type MoqVisitor_Visit_anyParams struct {
	Recorder *MoqVisitor_Visit_fnRecorder
}

// NewMoqVisitor creates a new moq of the Visitor type
func NewMoqVisitor(scene *moq.Scene, config *moq.Config) *MoqVisitor {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqVisitor{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqVisitor_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Visit struct {
					Node moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Visit struct {
				Node moq.ParamIndexing
			}
		}{
			Visit: struct {
				Node moq.ParamIndexing
			}{
				Node: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Visitor type
func (m *MoqVisitor) Mock() *MoqVisitor_mock { return m.Moq }

func (m *MoqVisitor_mock) Visit(node ast.Node) (w ast.Visitor) {
	m.Moq.Scene.T.Helper()
	params := MoqVisitor_Visit_params{
		Node: node,
	}
	var results *MoqVisitor_Visit_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Visit {
		paramsKey := m.Moq.ParamsKey_Visit(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Visit(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Visit(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Visit(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(node)
	}

	if result.Values != nil {
		w = result.Values.W
	}
	if result.DoReturnFn != nil {
		w = result.DoReturnFn(node)
	}
	return
}

// OnCall returns the recorder implementation of the Visitor type
func (m *MoqVisitor) OnCall() *MoqVisitor_recorder {
	return &MoqVisitor_recorder{
		Moq: m,
	}
}

func (m *MoqVisitor_recorder) Visit(node ast.Node) *MoqVisitor_Visit_fnRecorder {
	return &MoqVisitor_Visit_fnRecorder{
		Params: MoqVisitor_Visit_params{
			Node: node,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqVisitor_Visit_fnRecorder) Any() *MoqVisitor_Visit_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Visit(r.Params))
		return nil
	}
	return &MoqVisitor_Visit_anyParams{Recorder: r}
}

func (a *MoqVisitor_Visit_anyParams) Node() *MoqVisitor_Visit_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqVisitor_Visit_fnRecorder) Seq() *MoqVisitor_Visit_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Visit(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqVisitor_Visit_fnRecorder) NoSeq() *MoqVisitor_Visit_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Visit(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqVisitor_Visit_fnRecorder) ReturnResults(w ast.Visitor) *MoqVisitor_Visit_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ W ast.Visitor }
		Sequence   uint32
		DoFn       MoqVisitor_Visit_doFn
		DoReturnFn MoqVisitor_Visit_doReturnFn
	}{
		Values: &struct{ W ast.Visitor }{
			W: w,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqVisitor_Visit_fnRecorder) AndDo(fn MoqVisitor_Visit_doFn) *MoqVisitor_Visit_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqVisitor_Visit_fnRecorder) DoReturnResults(fn MoqVisitor_Visit_doReturnFn) *MoqVisitor_Visit_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ W ast.Visitor }
		Sequence   uint32
		DoFn       MoqVisitor_Visit_doFn
		DoReturnFn MoqVisitor_Visit_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqVisitor_Visit_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqVisitor_Visit_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Visit {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqVisitor_Visit_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqVisitor_Visit_paramsKey]*MoqVisitor_Visit_results{},
		}
		r.Moq.ResultsByParams_Visit = append(r.Moq.ResultsByParams_Visit, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Visit) {
			copy(r.Moq.ResultsByParams_Visit[insertAt+1:], r.Moq.ResultsByParams_Visit[insertAt:0])
			r.Moq.ResultsByParams_Visit[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Visit(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqVisitor_Visit_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqVisitor_Visit_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqVisitor_Visit_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ W ast.Visitor }
				Sequence   uint32
				DoFn       MoqVisitor_Visit_doFn
				DoReturnFn MoqVisitor_Visit_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqVisitor) PrettyParams_Visit(params MoqVisitor_Visit_params) string {
	return fmt.Sprintf("Visit(%#v)", params.Node)
}

func (m *MoqVisitor) ParamsKey_Visit(params MoqVisitor_Visit_params, anyParams uint64) MoqVisitor_Visit_paramsKey {
	m.Scene.T.Helper()
	var nodeUsed ast.Node
	var nodeUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Visit.Node == moq.ParamIndexByValue {
			nodeUsed = params.Node
		} else {
			nodeUsedHash = hash.DeepHash(params.Node)
		}
	}
	return MoqVisitor_Visit_paramsKey{
		Params: struct{ Node ast.Node }{
			Node: nodeUsed,
		},
		Hashes: struct{ Node hash.Hash }{
			Node: nodeUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqVisitor) Reset() { m.ResultsByParams_Visit = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqVisitor) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Visit {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Visit(results.Params))
			}
		}
	}
}
