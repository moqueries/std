// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package ast

import (
	"fmt"
	"go/ast"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that ast.Scope_starGenType is mocked
// completely
var _ Scope_starGenType = (*MoqScope_starGenType_mock)(nil)

// Scope_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Scope_starGenType interface {
	Lookup(name string) *ast.Object
	Insert(obj *ast.Object) (alt *ast.Object)
	String() string
}

// MoqScope_starGenType holds the state of a moq of the Scope_starGenType type
type MoqScope_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqScope_starGenType_mock

	ResultsByParams_Lookup []MoqScope_starGenType_Lookup_resultsByParams
	ResultsByParams_Insert []MoqScope_starGenType_Insert_resultsByParams
	ResultsByParams_String []MoqScope_starGenType_String_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Lookup struct {
				Name moq.ParamIndexing
			}
			Insert struct {
				Obj moq.ParamIndexing
			}
			String struct{}
		}
	}
}

// MoqScope_starGenType_mock isolates the mock interface of the
// Scope_starGenType type
type MoqScope_starGenType_mock struct {
	Moq *MoqScope_starGenType
}

// MoqScope_starGenType_recorder isolates the recorder interface of the
// Scope_starGenType type
type MoqScope_starGenType_recorder struct {
	Moq *MoqScope_starGenType
}

// MoqScope_starGenType_Lookup_params holds the params of the Scope_starGenType
// type
type MoqScope_starGenType_Lookup_params struct{ Name string }

// MoqScope_starGenType_Lookup_paramsKey holds the map key params of the
// Scope_starGenType type
type MoqScope_starGenType_Lookup_paramsKey struct {
	Params struct{ Name string }
	Hashes struct{ Name hash.Hash }
}

// MoqScope_starGenType_Lookup_resultsByParams contains the results for a given
// set of parameters for the Scope_starGenType type
type MoqScope_starGenType_Lookup_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScope_starGenType_Lookup_paramsKey]*MoqScope_starGenType_Lookup_results
}

// MoqScope_starGenType_Lookup_doFn defines the type of function needed when
// calling AndDo for the Scope_starGenType type
type MoqScope_starGenType_Lookup_doFn func(name string)

// MoqScope_starGenType_Lookup_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Scope_starGenType type
type MoqScope_starGenType_Lookup_doReturnFn func(name string) *ast.Object

// MoqScope_starGenType_Lookup_results holds the results of the
// Scope_starGenType type
type MoqScope_starGenType_Lookup_results struct {
	Params  MoqScope_starGenType_Lookup_params
	Results []struct {
		Values *struct {
			Result1 *ast.Object
		}
		Sequence   uint32
		DoFn       MoqScope_starGenType_Lookup_doFn
		DoReturnFn MoqScope_starGenType_Lookup_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScope_starGenType_Lookup_fnRecorder routes recorded function calls to the
// MoqScope_starGenType moq
type MoqScope_starGenType_Lookup_fnRecorder struct {
	Params    MoqScope_starGenType_Lookup_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScope_starGenType_Lookup_results
	Moq       *MoqScope_starGenType
}

// MoqScope_starGenType_Lookup_anyParams isolates the any params functions of
// the Scope_starGenType type
type MoqScope_starGenType_Lookup_anyParams struct {
	Recorder *MoqScope_starGenType_Lookup_fnRecorder
}

// MoqScope_starGenType_Insert_params holds the params of the Scope_starGenType
// type
type MoqScope_starGenType_Insert_params struct{ Obj *ast.Object }

// MoqScope_starGenType_Insert_paramsKey holds the map key params of the
// Scope_starGenType type
type MoqScope_starGenType_Insert_paramsKey struct {
	Params struct{ Obj *ast.Object }
	Hashes struct{ Obj hash.Hash }
}

// MoqScope_starGenType_Insert_resultsByParams contains the results for a given
// set of parameters for the Scope_starGenType type
type MoqScope_starGenType_Insert_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScope_starGenType_Insert_paramsKey]*MoqScope_starGenType_Insert_results
}

// MoqScope_starGenType_Insert_doFn defines the type of function needed when
// calling AndDo for the Scope_starGenType type
type MoqScope_starGenType_Insert_doFn func(obj *ast.Object)

// MoqScope_starGenType_Insert_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Scope_starGenType type
type MoqScope_starGenType_Insert_doReturnFn func(obj *ast.Object) (alt *ast.Object)

// MoqScope_starGenType_Insert_results holds the results of the
// Scope_starGenType type
type MoqScope_starGenType_Insert_results struct {
	Params  MoqScope_starGenType_Insert_params
	Results []struct {
		Values     *struct{ Alt *ast.Object }
		Sequence   uint32
		DoFn       MoqScope_starGenType_Insert_doFn
		DoReturnFn MoqScope_starGenType_Insert_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScope_starGenType_Insert_fnRecorder routes recorded function calls to the
// MoqScope_starGenType moq
type MoqScope_starGenType_Insert_fnRecorder struct {
	Params    MoqScope_starGenType_Insert_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScope_starGenType_Insert_results
	Moq       *MoqScope_starGenType
}

// MoqScope_starGenType_Insert_anyParams isolates the any params functions of
// the Scope_starGenType type
type MoqScope_starGenType_Insert_anyParams struct {
	Recorder *MoqScope_starGenType_Insert_fnRecorder
}

// MoqScope_starGenType_String_params holds the params of the Scope_starGenType
// type
type MoqScope_starGenType_String_params struct{}

// MoqScope_starGenType_String_paramsKey holds the map key params of the
// Scope_starGenType type
type MoqScope_starGenType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqScope_starGenType_String_resultsByParams contains the results for a given
// set of parameters for the Scope_starGenType type
type MoqScope_starGenType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScope_starGenType_String_paramsKey]*MoqScope_starGenType_String_results
}

// MoqScope_starGenType_String_doFn defines the type of function needed when
// calling AndDo for the Scope_starGenType type
type MoqScope_starGenType_String_doFn func()

// MoqScope_starGenType_String_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Scope_starGenType type
type MoqScope_starGenType_String_doReturnFn func() string

// MoqScope_starGenType_String_results holds the results of the
// Scope_starGenType type
type MoqScope_starGenType_String_results struct {
	Params  MoqScope_starGenType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqScope_starGenType_String_doFn
		DoReturnFn MoqScope_starGenType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScope_starGenType_String_fnRecorder routes recorded function calls to the
// MoqScope_starGenType moq
type MoqScope_starGenType_String_fnRecorder struct {
	Params    MoqScope_starGenType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScope_starGenType_String_results
	Moq       *MoqScope_starGenType
}

// MoqScope_starGenType_String_anyParams isolates the any params functions of
// the Scope_starGenType type
type MoqScope_starGenType_String_anyParams struct {
	Recorder *MoqScope_starGenType_String_fnRecorder
}

// NewMoqScope_starGenType creates a new moq of the Scope_starGenType type
func NewMoqScope_starGenType(scene *moq.Scene, config *moq.Config) *MoqScope_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqScope_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqScope_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Lookup struct {
					Name moq.ParamIndexing
				}
				Insert struct {
					Obj moq.ParamIndexing
				}
				String struct{}
			}
		}{ParameterIndexing: struct {
			Lookup struct {
				Name moq.ParamIndexing
			}
			Insert struct {
				Obj moq.ParamIndexing
			}
			String struct{}
		}{
			Lookup: struct {
				Name moq.ParamIndexing
			}{
				Name: moq.ParamIndexByValue,
			},
			Insert: struct {
				Obj moq.ParamIndexing
			}{
				Obj: moq.ParamIndexByHash,
			},
			String: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Scope_starGenType type
func (m *MoqScope_starGenType) Mock() *MoqScope_starGenType_mock { return m.Moq }

func (m *MoqScope_starGenType_mock) Lookup(name string) (result1 *ast.Object) {
	m.Moq.Scene.T.Helper()
	params := MoqScope_starGenType_Lookup_params{
		Name: name,
	}
	var results *MoqScope_starGenType_Lookup_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Lookup {
		paramsKey := m.Moq.ParamsKey_Lookup(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Lookup(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Lookup(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Lookup(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(name)
	}
	return
}

func (m *MoqScope_starGenType_mock) Insert(obj *ast.Object) (alt *ast.Object) {
	m.Moq.Scene.T.Helper()
	params := MoqScope_starGenType_Insert_params{
		Obj: obj,
	}
	var results *MoqScope_starGenType_Insert_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Insert {
		paramsKey := m.Moq.ParamsKey_Insert(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Insert(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Insert(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Insert(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(obj)
	}

	if result.Values != nil {
		alt = result.Values.Alt
	}
	if result.DoReturnFn != nil {
		alt = result.DoReturnFn(obj)
	}
	return
}

func (m *MoqScope_starGenType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqScope_starGenType_String_params{}
	var results *MoqScope_starGenType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Scope_starGenType type
func (m *MoqScope_starGenType) OnCall() *MoqScope_starGenType_recorder {
	return &MoqScope_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqScope_starGenType_recorder) Lookup(name string) *MoqScope_starGenType_Lookup_fnRecorder {
	return &MoqScope_starGenType_Lookup_fnRecorder{
		Params: MoqScope_starGenType_Lookup_params{
			Name: name,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScope_starGenType_Lookup_fnRecorder) Any() *MoqScope_starGenType_Lookup_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Lookup(r.Params))
		return nil
	}
	return &MoqScope_starGenType_Lookup_anyParams{Recorder: r}
}

func (a *MoqScope_starGenType_Lookup_anyParams) Name() *MoqScope_starGenType_Lookup_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqScope_starGenType_Lookup_fnRecorder) Seq() *MoqScope_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Lookup(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScope_starGenType_Lookup_fnRecorder) NoSeq() *MoqScope_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Lookup(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScope_starGenType_Lookup_fnRecorder) ReturnResults(result1 *ast.Object) *MoqScope_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *ast.Object
		}
		Sequence   uint32
		DoFn       MoqScope_starGenType_Lookup_doFn
		DoReturnFn MoqScope_starGenType_Lookup_doReturnFn
	}{
		Values: &struct {
			Result1 *ast.Object
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScope_starGenType_Lookup_fnRecorder) AndDo(fn MoqScope_starGenType_Lookup_doFn) *MoqScope_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScope_starGenType_Lookup_fnRecorder) DoReturnResults(fn MoqScope_starGenType_Lookup_doReturnFn) *MoqScope_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *ast.Object
		}
		Sequence   uint32
		DoFn       MoqScope_starGenType_Lookup_doFn
		DoReturnFn MoqScope_starGenType_Lookup_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScope_starGenType_Lookup_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScope_starGenType_Lookup_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Lookup {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScope_starGenType_Lookup_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScope_starGenType_Lookup_paramsKey]*MoqScope_starGenType_Lookup_results{},
		}
		r.Moq.ResultsByParams_Lookup = append(r.Moq.ResultsByParams_Lookup, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Lookup) {
			copy(r.Moq.ResultsByParams_Lookup[insertAt+1:], r.Moq.ResultsByParams_Lookup[insertAt:0])
			r.Moq.ResultsByParams_Lookup[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Lookup(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScope_starGenType_Lookup_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScope_starGenType_Lookup_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScope_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *ast.Object
				}
				Sequence   uint32
				DoFn       MoqScope_starGenType_Lookup_doFn
				DoReturnFn MoqScope_starGenType_Lookup_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScope_starGenType) PrettyParams_Lookup(params MoqScope_starGenType_Lookup_params) string {
	return fmt.Sprintf("Lookup(%#v)", params.Name)
}

func (m *MoqScope_starGenType) ParamsKey_Lookup(params MoqScope_starGenType_Lookup_params, anyParams uint64) MoqScope_starGenType_Lookup_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Lookup.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	return MoqScope_starGenType_Lookup_paramsKey{
		Params: struct{ Name string }{
			Name: nameUsed,
		},
		Hashes: struct{ Name hash.Hash }{
			Name: nameUsedHash,
		},
	}
}

func (m *MoqScope_starGenType_recorder) Insert(obj *ast.Object) *MoqScope_starGenType_Insert_fnRecorder {
	return &MoqScope_starGenType_Insert_fnRecorder{
		Params: MoqScope_starGenType_Insert_params{
			Obj: obj,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScope_starGenType_Insert_fnRecorder) Any() *MoqScope_starGenType_Insert_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Insert(r.Params))
		return nil
	}
	return &MoqScope_starGenType_Insert_anyParams{Recorder: r}
}

func (a *MoqScope_starGenType_Insert_anyParams) Obj() *MoqScope_starGenType_Insert_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqScope_starGenType_Insert_fnRecorder) Seq() *MoqScope_starGenType_Insert_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Insert(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScope_starGenType_Insert_fnRecorder) NoSeq() *MoqScope_starGenType_Insert_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Insert(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScope_starGenType_Insert_fnRecorder) ReturnResults(alt *ast.Object) *MoqScope_starGenType_Insert_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Alt *ast.Object }
		Sequence   uint32
		DoFn       MoqScope_starGenType_Insert_doFn
		DoReturnFn MoqScope_starGenType_Insert_doReturnFn
	}{
		Values: &struct{ Alt *ast.Object }{
			Alt: alt,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScope_starGenType_Insert_fnRecorder) AndDo(fn MoqScope_starGenType_Insert_doFn) *MoqScope_starGenType_Insert_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScope_starGenType_Insert_fnRecorder) DoReturnResults(fn MoqScope_starGenType_Insert_doReturnFn) *MoqScope_starGenType_Insert_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Alt *ast.Object }
		Sequence   uint32
		DoFn       MoqScope_starGenType_Insert_doFn
		DoReturnFn MoqScope_starGenType_Insert_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScope_starGenType_Insert_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScope_starGenType_Insert_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Insert {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScope_starGenType_Insert_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScope_starGenType_Insert_paramsKey]*MoqScope_starGenType_Insert_results{},
		}
		r.Moq.ResultsByParams_Insert = append(r.Moq.ResultsByParams_Insert, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Insert) {
			copy(r.Moq.ResultsByParams_Insert[insertAt+1:], r.Moq.ResultsByParams_Insert[insertAt:0])
			r.Moq.ResultsByParams_Insert[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Insert(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScope_starGenType_Insert_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScope_starGenType_Insert_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScope_starGenType_Insert_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ Alt *ast.Object }
				Sequence   uint32
				DoFn       MoqScope_starGenType_Insert_doFn
				DoReturnFn MoqScope_starGenType_Insert_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScope_starGenType) PrettyParams_Insert(params MoqScope_starGenType_Insert_params) string {
	return fmt.Sprintf("Insert(%#v)", params.Obj)
}

func (m *MoqScope_starGenType) ParamsKey_Insert(params MoqScope_starGenType_Insert_params, anyParams uint64) MoqScope_starGenType_Insert_paramsKey {
	m.Scene.T.Helper()
	var objUsed *ast.Object
	var objUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Insert.Obj == moq.ParamIndexByValue {
			objUsed = params.Obj
		} else {
			objUsedHash = hash.DeepHash(params.Obj)
		}
	}
	return MoqScope_starGenType_Insert_paramsKey{
		Params: struct{ Obj *ast.Object }{
			Obj: objUsed,
		},
		Hashes: struct{ Obj hash.Hash }{
			Obj: objUsedHash,
		},
	}
}

func (m *MoqScope_starGenType_recorder) String() *MoqScope_starGenType_String_fnRecorder {
	return &MoqScope_starGenType_String_fnRecorder{
		Params:   MoqScope_starGenType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScope_starGenType_String_fnRecorder) Any() *MoqScope_starGenType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqScope_starGenType_String_anyParams{Recorder: r}
}

func (r *MoqScope_starGenType_String_fnRecorder) Seq() *MoqScope_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScope_starGenType_String_fnRecorder) NoSeq() *MoqScope_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScope_starGenType_String_fnRecorder) ReturnResults(result1 string) *MoqScope_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqScope_starGenType_String_doFn
		DoReturnFn MoqScope_starGenType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScope_starGenType_String_fnRecorder) AndDo(fn MoqScope_starGenType_String_doFn) *MoqScope_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScope_starGenType_String_fnRecorder) DoReturnResults(fn MoqScope_starGenType_String_doReturnFn) *MoqScope_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqScope_starGenType_String_doFn
		DoReturnFn MoqScope_starGenType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScope_starGenType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScope_starGenType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScope_starGenType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScope_starGenType_String_paramsKey]*MoqScope_starGenType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScope_starGenType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScope_starGenType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScope_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqScope_starGenType_String_doFn
				DoReturnFn MoqScope_starGenType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScope_starGenType) PrettyParams_String(params MoqScope_starGenType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqScope_starGenType) ParamsKey_String(params MoqScope_starGenType_String_params, anyParams uint64) MoqScope_starGenType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqScope_starGenType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqScope_starGenType) Reset() {
	m.ResultsByParams_Lookup = nil
	m.ResultsByParams_Insert = nil
	m.ResultsByParams_String = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqScope_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Lookup {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Lookup(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Insert {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Insert(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
}
