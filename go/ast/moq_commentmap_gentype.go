// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package ast

import (
	"fmt"
	"go/ast"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that ast.CommentMap_genType is mocked
// completely
var _ CommentMap_genType = (*MoqCommentMap_genType_mock)(nil)

// CommentMap_genType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type CommentMap_genType interface {
	Update(old, new ast.Node) ast.Node
	Filter(node ast.Node) ast.CommentMap
	Comments() []*ast.CommentGroup
	String() string
}

// MoqCommentMap_genType holds the state of a moq of the CommentMap_genType
// type
type MoqCommentMap_genType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqCommentMap_genType_mock

	ResultsByParams_Update   []MoqCommentMap_genType_Update_resultsByParams
	ResultsByParams_Filter   []MoqCommentMap_genType_Filter_resultsByParams
	ResultsByParams_Comments []MoqCommentMap_genType_Comments_resultsByParams
	ResultsByParams_String   []MoqCommentMap_genType_String_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Update struct {
				Old moq.ParamIndexing
				New moq.ParamIndexing
			}
			Filter struct {
				Node moq.ParamIndexing
			}
			Comments struct{}
			String   struct{}
		}
	}
}

// MoqCommentMap_genType_mock isolates the mock interface of the
// CommentMap_genType type
type MoqCommentMap_genType_mock struct {
	Moq *MoqCommentMap_genType
}

// MoqCommentMap_genType_recorder isolates the recorder interface of the
// CommentMap_genType type
type MoqCommentMap_genType_recorder struct {
	Moq *MoqCommentMap_genType
}

// MoqCommentMap_genType_Update_params holds the params of the
// CommentMap_genType type
type MoqCommentMap_genType_Update_params struct{ Old, New ast.Node }

// MoqCommentMap_genType_Update_paramsKey holds the map key params of the
// CommentMap_genType type
type MoqCommentMap_genType_Update_paramsKey struct {
	Params struct{ Old, New ast.Node }
	Hashes struct{ Old, New hash.Hash }
}

// MoqCommentMap_genType_Update_resultsByParams contains the results for a
// given set of parameters for the CommentMap_genType type
type MoqCommentMap_genType_Update_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCommentMap_genType_Update_paramsKey]*MoqCommentMap_genType_Update_results
}

// MoqCommentMap_genType_Update_doFn defines the type of function needed when
// calling AndDo for the CommentMap_genType type
type MoqCommentMap_genType_Update_doFn func(old, new ast.Node)

// MoqCommentMap_genType_Update_doReturnFn defines the type of function needed
// when calling DoReturnResults for the CommentMap_genType type
type MoqCommentMap_genType_Update_doReturnFn func(old, new ast.Node) ast.Node

// MoqCommentMap_genType_Update_results holds the results of the
// CommentMap_genType type
type MoqCommentMap_genType_Update_results struct {
	Params  MoqCommentMap_genType_Update_params
	Results []struct {
		Values *struct {
			Result1 ast.Node
		}
		Sequence   uint32
		DoFn       MoqCommentMap_genType_Update_doFn
		DoReturnFn MoqCommentMap_genType_Update_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCommentMap_genType_Update_fnRecorder routes recorded function calls to
// the MoqCommentMap_genType moq
type MoqCommentMap_genType_Update_fnRecorder struct {
	Params    MoqCommentMap_genType_Update_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCommentMap_genType_Update_results
	Moq       *MoqCommentMap_genType
}

// MoqCommentMap_genType_Update_anyParams isolates the any params functions of
// the CommentMap_genType type
type MoqCommentMap_genType_Update_anyParams struct {
	Recorder *MoqCommentMap_genType_Update_fnRecorder
}

// MoqCommentMap_genType_Filter_params holds the params of the
// CommentMap_genType type
type MoqCommentMap_genType_Filter_params struct{ Node ast.Node }

// MoqCommentMap_genType_Filter_paramsKey holds the map key params of the
// CommentMap_genType type
type MoqCommentMap_genType_Filter_paramsKey struct {
	Params struct{ Node ast.Node }
	Hashes struct{ Node hash.Hash }
}

// MoqCommentMap_genType_Filter_resultsByParams contains the results for a
// given set of parameters for the CommentMap_genType type
type MoqCommentMap_genType_Filter_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCommentMap_genType_Filter_paramsKey]*MoqCommentMap_genType_Filter_results
}

// MoqCommentMap_genType_Filter_doFn defines the type of function needed when
// calling AndDo for the CommentMap_genType type
type MoqCommentMap_genType_Filter_doFn func(node ast.Node)

// MoqCommentMap_genType_Filter_doReturnFn defines the type of function needed
// when calling DoReturnResults for the CommentMap_genType type
type MoqCommentMap_genType_Filter_doReturnFn func(node ast.Node) ast.CommentMap

// MoqCommentMap_genType_Filter_results holds the results of the
// CommentMap_genType type
type MoqCommentMap_genType_Filter_results struct {
	Params  MoqCommentMap_genType_Filter_params
	Results []struct {
		Values *struct {
			Result1 ast.CommentMap
		}
		Sequence   uint32
		DoFn       MoqCommentMap_genType_Filter_doFn
		DoReturnFn MoqCommentMap_genType_Filter_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCommentMap_genType_Filter_fnRecorder routes recorded function calls to
// the MoqCommentMap_genType moq
type MoqCommentMap_genType_Filter_fnRecorder struct {
	Params    MoqCommentMap_genType_Filter_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCommentMap_genType_Filter_results
	Moq       *MoqCommentMap_genType
}

// MoqCommentMap_genType_Filter_anyParams isolates the any params functions of
// the CommentMap_genType type
type MoqCommentMap_genType_Filter_anyParams struct {
	Recorder *MoqCommentMap_genType_Filter_fnRecorder
}

// MoqCommentMap_genType_Comments_params holds the params of the
// CommentMap_genType type
type MoqCommentMap_genType_Comments_params struct{}

// MoqCommentMap_genType_Comments_paramsKey holds the map key params of the
// CommentMap_genType type
type MoqCommentMap_genType_Comments_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqCommentMap_genType_Comments_resultsByParams contains the results for a
// given set of parameters for the CommentMap_genType type
type MoqCommentMap_genType_Comments_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCommentMap_genType_Comments_paramsKey]*MoqCommentMap_genType_Comments_results
}

// MoqCommentMap_genType_Comments_doFn defines the type of function needed when
// calling AndDo for the CommentMap_genType type
type MoqCommentMap_genType_Comments_doFn func()

// MoqCommentMap_genType_Comments_doReturnFn defines the type of function
// needed when calling DoReturnResults for the CommentMap_genType type
type MoqCommentMap_genType_Comments_doReturnFn func() []*ast.CommentGroup

// MoqCommentMap_genType_Comments_results holds the results of the
// CommentMap_genType type
type MoqCommentMap_genType_Comments_results struct {
	Params  MoqCommentMap_genType_Comments_params
	Results []struct {
		Values *struct {
			Result1 []*ast.CommentGroup
		}
		Sequence   uint32
		DoFn       MoqCommentMap_genType_Comments_doFn
		DoReturnFn MoqCommentMap_genType_Comments_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCommentMap_genType_Comments_fnRecorder routes recorded function calls to
// the MoqCommentMap_genType moq
type MoqCommentMap_genType_Comments_fnRecorder struct {
	Params    MoqCommentMap_genType_Comments_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCommentMap_genType_Comments_results
	Moq       *MoqCommentMap_genType
}

// MoqCommentMap_genType_Comments_anyParams isolates the any params functions
// of the CommentMap_genType type
type MoqCommentMap_genType_Comments_anyParams struct {
	Recorder *MoqCommentMap_genType_Comments_fnRecorder
}

// MoqCommentMap_genType_String_params holds the params of the
// CommentMap_genType type
type MoqCommentMap_genType_String_params struct{}

// MoqCommentMap_genType_String_paramsKey holds the map key params of the
// CommentMap_genType type
type MoqCommentMap_genType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqCommentMap_genType_String_resultsByParams contains the results for a
// given set of parameters for the CommentMap_genType type
type MoqCommentMap_genType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCommentMap_genType_String_paramsKey]*MoqCommentMap_genType_String_results
}

// MoqCommentMap_genType_String_doFn defines the type of function needed when
// calling AndDo for the CommentMap_genType type
type MoqCommentMap_genType_String_doFn func()

// MoqCommentMap_genType_String_doReturnFn defines the type of function needed
// when calling DoReturnResults for the CommentMap_genType type
type MoqCommentMap_genType_String_doReturnFn func() string

// MoqCommentMap_genType_String_results holds the results of the
// CommentMap_genType type
type MoqCommentMap_genType_String_results struct {
	Params  MoqCommentMap_genType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqCommentMap_genType_String_doFn
		DoReturnFn MoqCommentMap_genType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCommentMap_genType_String_fnRecorder routes recorded function calls to
// the MoqCommentMap_genType moq
type MoqCommentMap_genType_String_fnRecorder struct {
	Params    MoqCommentMap_genType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCommentMap_genType_String_results
	Moq       *MoqCommentMap_genType
}

// MoqCommentMap_genType_String_anyParams isolates the any params functions of
// the CommentMap_genType type
type MoqCommentMap_genType_String_anyParams struct {
	Recorder *MoqCommentMap_genType_String_fnRecorder
}

// NewMoqCommentMap_genType creates a new moq of the CommentMap_genType type
func NewMoqCommentMap_genType(scene *moq.Scene, config *moq.Config) *MoqCommentMap_genType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqCommentMap_genType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqCommentMap_genType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Update struct {
					Old moq.ParamIndexing
					New moq.ParamIndexing
				}
				Filter struct {
					Node moq.ParamIndexing
				}
				Comments struct{}
				String   struct{}
			}
		}{ParameterIndexing: struct {
			Update struct {
				Old moq.ParamIndexing
				New moq.ParamIndexing
			}
			Filter struct {
				Node moq.ParamIndexing
			}
			Comments struct{}
			String   struct{}
		}{
			Update: struct {
				Old moq.ParamIndexing
				New moq.ParamIndexing
			}{
				Old: moq.ParamIndexByHash,
				New: moq.ParamIndexByHash,
			},
			Filter: struct {
				Node moq.ParamIndexing
			}{
				Node: moq.ParamIndexByHash,
			},
			Comments: struct{}{},
			String:   struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the CommentMap_genType type
func (m *MoqCommentMap_genType) Mock() *MoqCommentMap_genType_mock { return m.Moq }

func (m *MoqCommentMap_genType_mock) Update(old, new ast.Node) (result1 ast.Node) {
	m.Moq.Scene.T.Helper()
	params := MoqCommentMap_genType_Update_params{
		Old: old,
		New: new,
	}
	var results *MoqCommentMap_genType_Update_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Update {
		paramsKey := m.Moq.ParamsKey_Update(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Update(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Update(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Update(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(old, new)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(old, new)
	}
	return
}

func (m *MoqCommentMap_genType_mock) Filter(node ast.Node) (result1 ast.CommentMap) {
	m.Moq.Scene.T.Helper()
	params := MoqCommentMap_genType_Filter_params{
		Node: node,
	}
	var results *MoqCommentMap_genType_Filter_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Filter {
		paramsKey := m.Moq.ParamsKey_Filter(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Filter(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Filter(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Filter(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(node)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(node)
	}
	return
}

func (m *MoqCommentMap_genType_mock) Comments() (result1 []*ast.CommentGroup) {
	m.Moq.Scene.T.Helper()
	params := MoqCommentMap_genType_Comments_params{}
	var results *MoqCommentMap_genType_Comments_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Comments {
		paramsKey := m.Moq.ParamsKey_Comments(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Comments(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Comments(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Comments(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqCommentMap_genType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqCommentMap_genType_String_params{}
	var results *MoqCommentMap_genType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the CommentMap_genType type
func (m *MoqCommentMap_genType) OnCall() *MoqCommentMap_genType_recorder {
	return &MoqCommentMap_genType_recorder{
		Moq: m,
	}
}

func (m *MoqCommentMap_genType_recorder) Update(old, new ast.Node) *MoqCommentMap_genType_Update_fnRecorder {
	return &MoqCommentMap_genType_Update_fnRecorder{
		Params: MoqCommentMap_genType_Update_params{
			Old: old,
			New: new,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCommentMap_genType_Update_fnRecorder) Any() *MoqCommentMap_genType_Update_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Update(r.Params))
		return nil
	}
	return &MoqCommentMap_genType_Update_anyParams{Recorder: r}
}

func (a *MoqCommentMap_genType_Update_anyParams) Old() *MoqCommentMap_genType_Update_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqCommentMap_genType_Update_anyParams) New() *MoqCommentMap_genType_Update_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqCommentMap_genType_Update_fnRecorder) Seq() *MoqCommentMap_genType_Update_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Update(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCommentMap_genType_Update_fnRecorder) NoSeq() *MoqCommentMap_genType_Update_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Update(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCommentMap_genType_Update_fnRecorder) ReturnResults(result1 ast.Node) *MoqCommentMap_genType_Update_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 ast.Node
		}
		Sequence   uint32
		DoFn       MoqCommentMap_genType_Update_doFn
		DoReturnFn MoqCommentMap_genType_Update_doReturnFn
	}{
		Values: &struct {
			Result1 ast.Node
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCommentMap_genType_Update_fnRecorder) AndDo(fn MoqCommentMap_genType_Update_doFn) *MoqCommentMap_genType_Update_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCommentMap_genType_Update_fnRecorder) DoReturnResults(fn MoqCommentMap_genType_Update_doReturnFn) *MoqCommentMap_genType_Update_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 ast.Node
		}
		Sequence   uint32
		DoFn       MoqCommentMap_genType_Update_doFn
		DoReturnFn MoqCommentMap_genType_Update_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCommentMap_genType_Update_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCommentMap_genType_Update_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Update {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCommentMap_genType_Update_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCommentMap_genType_Update_paramsKey]*MoqCommentMap_genType_Update_results{},
		}
		r.Moq.ResultsByParams_Update = append(r.Moq.ResultsByParams_Update, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Update) {
			copy(r.Moq.ResultsByParams_Update[insertAt+1:], r.Moq.ResultsByParams_Update[insertAt:0])
			r.Moq.ResultsByParams_Update[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Update(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCommentMap_genType_Update_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCommentMap_genType_Update_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCommentMap_genType_Update_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 ast.Node
				}
				Sequence   uint32
				DoFn       MoqCommentMap_genType_Update_doFn
				DoReturnFn MoqCommentMap_genType_Update_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCommentMap_genType) PrettyParams_Update(params MoqCommentMap_genType_Update_params) string {
	return fmt.Sprintf("Update(%#v, %#v)", params.Old, params.New)
}

func (m *MoqCommentMap_genType) ParamsKey_Update(params MoqCommentMap_genType_Update_params, anyParams uint64) MoqCommentMap_genType_Update_paramsKey {
	m.Scene.T.Helper()
	var oldUsed ast.Node
	var oldUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Update.Old == moq.ParamIndexByValue {
			oldUsed = params.Old
		} else {
			oldUsedHash = hash.DeepHash(params.Old)
		}
	}
	var newUsed ast.Node
	var newUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Update.New == moq.ParamIndexByValue {
			newUsed = params.New
		} else {
			newUsedHash = hash.DeepHash(params.New)
		}
	}
	return MoqCommentMap_genType_Update_paramsKey{
		Params: struct{ Old, New ast.Node }{
			Old: oldUsed,
			New: newUsed,
		},
		Hashes: struct{ Old, New hash.Hash }{
			Old: oldUsedHash,
			New: newUsedHash,
		},
	}
}

func (m *MoqCommentMap_genType_recorder) Filter(node ast.Node) *MoqCommentMap_genType_Filter_fnRecorder {
	return &MoqCommentMap_genType_Filter_fnRecorder{
		Params: MoqCommentMap_genType_Filter_params{
			Node: node,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCommentMap_genType_Filter_fnRecorder) Any() *MoqCommentMap_genType_Filter_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Filter(r.Params))
		return nil
	}
	return &MoqCommentMap_genType_Filter_anyParams{Recorder: r}
}

func (a *MoqCommentMap_genType_Filter_anyParams) Node() *MoqCommentMap_genType_Filter_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqCommentMap_genType_Filter_fnRecorder) Seq() *MoqCommentMap_genType_Filter_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Filter(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCommentMap_genType_Filter_fnRecorder) NoSeq() *MoqCommentMap_genType_Filter_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Filter(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCommentMap_genType_Filter_fnRecorder) ReturnResults(result1 ast.CommentMap) *MoqCommentMap_genType_Filter_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 ast.CommentMap
		}
		Sequence   uint32
		DoFn       MoqCommentMap_genType_Filter_doFn
		DoReturnFn MoqCommentMap_genType_Filter_doReturnFn
	}{
		Values: &struct {
			Result1 ast.CommentMap
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCommentMap_genType_Filter_fnRecorder) AndDo(fn MoqCommentMap_genType_Filter_doFn) *MoqCommentMap_genType_Filter_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCommentMap_genType_Filter_fnRecorder) DoReturnResults(fn MoqCommentMap_genType_Filter_doReturnFn) *MoqCommentMap_genType_Filter_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 ast.CommentMap
		}
		Sequence   uint32
		DoFn       MoqCommentMap_genType_Filter_doFn
		DoReturnFn MoqCommentMap_genType_Filter_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCommentMap_genType_Filter_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCommentMap_genType_Filter_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Filter {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCommentMap_genType_Filter_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCommentMap_genType_Filter_paramsKey]*MoqCommentMap_genType_Filter_results{},
		}
		r.Moq.ResultsByParams_Filter = append(r.Moq.ResultsByParams_Filter, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Filter) {
			copy(r.Moq.ResultsByParams_Filter[insertAt+1:], r.Moq.ResultsByParams_Filter[insertAt:0])
			r.Moq.ResultsByParams_Filter[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Filter(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCommentMap_genType_Filter_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCommentMap_genType_Filter_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCommentMap_genType_Filter_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 ast.CommentMap
				}
				Sequence   uint32
				DoFn       MoqCommentMap_genType_Filter_doFn
				DoReturnFn MoqCommentMap_genType_Filter_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCommentMap_genType) PrettyParams_Filter(params MoqCommentMap_genType_Filter_params) string {
	return fmt.Sprintf("Filter(%#v)", params.Node)
}

func (m *MoqCommentMap_genType) ParamsKey_Filter(params MoqCommentMap_genType_Filter_params, anyParams uint64) MoqCommentMap_genType_Filter_paramsKey {
	m.Scene.T.Helper()
	var nodeUsed ast.Node
	var nodeUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Filter.Node == moq.ParamIndexByValue {
			nodeUsed = params.Node
		} else {
			nodeUsedHash = hash.DeepHash(params.Node)
		}
	}
	return MoqCommentMap_genType_Filter_paramsKey{
		Params: struct{ Node ast.Node }{
			Node: nodeUsed,
		},
		Hashes: struct{ Node hash.Hash }{
			Node: nodeUsedHash,
		},
	}
}

func (m *MoqCommentMap_genType_recorder) Comments() *MoqCommentMap_genType_Comments_fnRecorder {
	return &MoqCommentMap_genType_Comments_fnRecorder{
		Params:   MoqCommentMap_genType_Comments_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCommentMap_genType_Comments_fnRecorder) Any() *MoqCommentMap_genType_Comments_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Comments(r.Params))
		return nil
	}
	return &MoqCommentMap_genType_Comments_anyParams{Recorder: r}
}

func (r *MoqCommentMap_genType_Comments_fnRecorder) Seq() *MoqCommentMap_genType_Comments_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Comments(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCommentMap_genType_Comments_fnRecorder) NoSeq() *MoqCommentMap_genType_Comments_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Comments(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCommentMap_genType_Comments_fnRecorder) ReturnResults(result1 []*ast.CommentGroup) *MoqCommentMap_genType_Comments_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []*ast.CommentGroup
		}
		Sequence   uint32
		DoFn       MoqCommentMap_genType_Comments_doFn
		DoReturnFn MoqCommentMap_genType_Comments_doReturnFn
	}{
		Values: &struct {
			Result1 []*ast.CommentGroup
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCommentMap_genType_Comments_fnRecorder) AndDo(fn MoqCommentMap_genType_Comments_doFn) *MoqCommentMap_genType_Comments_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCommentMap_genType_Comments_fnRecorder) DoReturnResults(fn MoqCommentMap_genType_Comments_doReturnFn) *MoqCommentMap_genType_Comments_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []*ast.CommentGroup
		}
		Sequence   uint32
		DoFn       MoqCommentMap_genType_Comments_doFn
		DoReturnFn MoqCommentMap_genType_Comments_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCommentMap_genType_Comments_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCommentMap_genType_Comments_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Comments {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCommentMap_genType_Comments_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCommentMap_genType_Comments_paramsKey]*MoqCommentMap_genType_Comments_results{},
		}
		r.Moq.ResultsByParams_Comments = append(r.Moq.ResultsByParams_Comments, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Comments) {
			copy(r.Moq.ResultsByParams_Comments[insertAt+1:], r.Moq.ResultsByParams_Comments[insertAt:0])
			r.Moq.ResultsByParams_Comments[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Comments(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCommentMap_genType_Comments_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCommentMap_genType_Comments_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCommentMap_genType_Comments_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []*ast.CommentGroup
				}
				Sequence   uint32
				DoFn       MoqCommentMap_genType_Comments_doFn
				DoReturnFn MoqCommentMap_genType_Comments_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCommentMap_genType) PrettyParams_Comments(params MoqCommentMap_genType_Comments_params) string {
	return fmt.Sprintf("Comments()")
}

func (m *MoqCommentMap_genType) ParamsKey_Comments(params MoqCommentMap_genType_Comments_params, anyParams uint64) MoqCommentMap_genType_Comments_paramsKey {
	m.Scene.T.Helper()
	return MoqCommentMap_genType_Comments_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqCommentMap_genType_recorder) String() *MoqCommentMap_genType_String_fnRecorder {
	return &MoqCommentMap_genType_String_fnRecorder{
		Params:   MoqCommentMap_genType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCommentMap_genType_String_fnRecorder) Any() *MoqCommentMap_genType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqCommentMap_genType_String_anyParams{Recorder: r}
}

func (r *MoqCommentMap_genType_String_fnRecorder) Seq() *MoqCommentMap_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCommentMap_genType_String_fnRecorder) NoSeq() *MoqCommentMap_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCommentMap_genType_String_fnRecorder) ReturnResults(result1 string) *MoqCommentMap_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqCommentMap_genType_String_doFn
		DoReturnFn MoqCommentMap_genType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCommentMap_genType_String_fnRecorder) AndDo(fn MoqCommentMap_genType_String_doFn) *MoqCommentMap_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCommentMap_genType_String_fnRecorder) DoReturnResults(fn MoqCommentMap_genType_String_doReturnFn) *MoqCommentMap_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqCommentMap_genType_String_doFn
		DoReturnFn MoqCommentMap_genType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCommentMap_genType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCommentMap_genType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCommentMap_genType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCommentMap_genType_String_paramsKey]*MoqCommentMap_genType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCommentMap_genType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCommentMap_genType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCommentMap_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqCommentMap_genType_String_doFn
				DoReturnFn MoqCommentMap_genType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCommentMap_genType) PrettyParams_String(params MoqCommentMap_genType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqCommentMap_genType) ParamsKey_String(params MoqCommentMap_genType_String_params, anyParams uint64) MoqCommentMap_genType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqCommentMap_genType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqCommentMap_genType) Reset() {
	m.ResultsByParams_Update = nil
	m.ResultsByParams_Filter = nil
	m.ResultsByParams_Comments = nil
	m.ResultsByParams_String = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqCommentMap_genType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Update {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Update(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Filter {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Filter(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Comments {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Comments(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
}
