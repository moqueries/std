// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package types

import (
	"fmt"
	"go/types"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that types.MethodSet_starGenType is
// mocked completely
var _ MethodSet_starGenType = (*MoqMethodSet_starGenType_mock)(nil)

// MethodSet_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type MethodSet_starGenType interface {
	String() string
	Len() int
	At(i int) *types.Selection
	Lookup(pkg *types.Package, name string) *types.Selection
}

// MoqMethodSet_starGenType holds the state of a moq of the
// MethodSet_starGenType type
type MoqMethodSet_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqMethodSet_starGenType_mock

	ResultsByParams_String []MoqMethodSet_starGenType_String_resultsByParams
	ResultsByParams_Len    []MoqMethodSet_starGenType_Len_resultsByParams
	ResultsByParams_At     []MoqMethodSet_starGenType_At_resultsByParams
	ResultsByParams_Lookup []MoqMethodSet_starGenType_Lookup_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			String struct{}
			Len    struct{}
			At     struct {
				Param1 moq.ParamIndexing
			}
			Lookup struct {
				Pkg  moq.ParamIndexing
				Name moq.ParamIndexing
			}
		}
	}
	// MoqMethodSet_starGenType_mock isolates the mock interface of the
}

// MethodSet_starGenType type
type MoqMethodSet_starGenType_mock struct {
	Moq *MoqMethodSet_starGenType
}

// MoqMethodSet_starGenType_recorder isolates the recorder interface of the
// MethodSet_starGenType type
type MoqMethodSet_starGenType_recorder struct {
	Moq *MoqMethodSet_starGenType
}

// MoqMethodSet_starGenType_String_params holds the params of the
// MethodSet_starGenType type
type MoqMethodSet_starGenType_String_params struct{}

// MoqMethodSet_starGenType_String_paramsKey holds the map key params of the
// MethodSet_starGenType type
type MoqMethodSet_starGenType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqMethodSet_starGenType_String_resultsByParams contains the results for a
// given set of parameters for the MethodSet_starGenType type
type MoqMethodSet_starGenType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMethodSet_starGenType_String_paramsKey]*MoqMethodSet_starGenType_String_results
}

// MoqMethodSet_starGenType_String_doFn defines the type of function needed
// when calling AndDo for the MethodSet_starGenType type
type MoqMethodSet_starGenType_String_doFn func()

// MoqMethodSet_starGenType_String_doReturnFn defines the type of function
// needed when calling DoReturnResults for the MethodSet_starGenType type
type MoqMethodSet_starGenType_String_doReturnFn func() string

// MoqMethodSet_starGenType_String_results holds the results of the
// MethodSet_starGenType type
type MoqMethodSet_starGenType_String_results struct {
	Params  MoqMethodSet_starGenType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqMethodSet_starGenType_String_doFn
		DoReturnFn MoqMethodSet_starGenType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMethodSet_starGenType_String_fnRecorder routes recorded function calls to
// the MoqMethodSet_starGenType moq
type MoqMethodSet_starGenType_String_fnRecorder struct {
	Params    MoqMethodSet_starGenType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMethodSet_starGenType_String_results
	Moq       *MoqMethodSet_starGenType
}

// MoqMethodSet_starGenType_String_anyParams isolates the any params functions
// of the MethodSet_starGenType type
type MoqMethodSet_starGenType_String_anyParams struct {
	Recorder *MoqMethodSet_starGenType_String_fnRecorder
}

// MoqMethodSet_starGenType_Len_params holds the params of the
// MethodSet_starGenType type
type MoqMethodSet_starGenType_Len_params struct{}

// MoqMethodSet_starGenType_Len_paramsKey holds the map key params of the
// MethodSet_starGenType type
type MoqMethodSet_starGenType_Len_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqMethodSet_starGenType_Len_resultsByParams contains the results for a
// given set of parameters for the MethodSet_starGenType type
type MoqMethodSet_starGenType_Len_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMethodSet_starGenType_Len_paramsKey]*MoqMethodSet_starGenType_Len_results
}

// MoqMethodSet_starGenType_Len_doFn defines the type of function needed when
// calling AndDo for the MethodSet_starGenType type
type MoqMethodSet_starGenType_Len_doFn func()

// MoqMethodSet_starGenType_Len_doReturnFn defines the type of function needed
// when calling DoReturnResults for the MethodSet_starGenType type
type MoqMethodSet_starGenType_Len_doReturnFn func() int

// MoqMethodSet_starGenType_Len_results holds the results of the
// MethodSet_starGenType type
type MoqMethodSet_starGenType_Len_results struct {
	Params  MoqMethodSet_starGenType_Len_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqMethodSet_starGenType_Len_doFn
		DoReturnFn MoqMethodSet_starGenType_Len_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMethodSet_starGenType_Len_fnRecorder routes recorded function calls to
// the MoqMethodSet_starGenType moq
type MoqMethodSet_starGenType_Len_fnRecorder struct {
	Params    MoqMethodSet_starGenType_Len_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMethodSet_starGenType_Len_results
	Moq       *MoqMethodSet_starGenType
}

// MoqMethodSet_starGenType_Len_anyParams isolates the any params functions of
// the MethodSet_starGenType type
type MoqMethodSet_starGenType_Len_anyParams struct {
	Recorder *MoqMethodSet_starGenType_Len_fnRecorder
}

// MoqMethodSet_starGenType_At_params holds the params of the
// MethodSet_starGenType type
type MoqMethodSet_starGenType_At_params struct{ Param1 int }

// MoqMethodSet_starGenType_At_paramsKey holds the map key params of the
// MethodSet_starGenType type
type MoqMethodSet_starGenType_At_paramsKey struct {
	Params struct{ Param1 int }
	Hashes struct{ Param1 hash.Hash }
}

// MoqMethodSet_starGenType_At_resultsByParams contains the results for a given
// set of parameters for the MethodSet_starGenType type
type MoqMethodSet_starGenType_At_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMethodSet_starGenType_At_paramsKey]*MoqMethodSet_starGenType_At_results
}

// MoqMethodSet_starGenType_At_doFn defines the type of function needed when
// calling AndDo for the MethodSet_starGenType type
type MoqMethodSet_starGenType_At_doFn func(i int)

// MoqMethodSet_starGenType_At_doReturnFn defines the type of function needed
// when calling DoReturnResults for the MethodSet_starGenType type
type MoqMethodSet_starGenType_At_doReturnFn func(i int) *types.Selection

// MoqMethodSet_starGenType_At_results holds the results of the
// MethodSet_starGenType type
type MoqMethodSet_starGenType_At_results struct {
	Params  MoqMethodSet_starGenType_At_params
	Results []struct {
		Values *struct {
			Result1 *types.Selection
		}
		Sequence   uint32
		DoFn       MoqMethodSet_starGenType_At_doFn
		DoReturnFn MoqMethodSet_starGenType_At_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMethodSet_starGenType_At_fnRecorder routes recorded function calls to the
// MoqMethodSet_starGenType moq
type MoqMethodSet_starGenType_At_fnRecorder struct {
	Params    MoqMethodSet_starGenType_At_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMethodSet_starGenType_At_results
	Moq       *MoqMethodSet_starGenType
}

// MoqMethodSet_starGenType_At_anyParams isolates the any params functions of
// the MethodSet_starGenType type
type MoqMethodSet_starGenType_At_anyParams struct {
	Recorder *MoqMethodSet_starGenType_At_fnRecorder
}

// MoqMethodSet_starGenType_Lookup_params holds the params of the
// MethodSet_starGenType type
type MoqMethodSet_starGenType_Lookup_params struct {
	Pkg  *types.Package
	Name string
}

// MoqMethodSet_starGenType_Lookup_paramsKey holds the map key params of the
// MethodSet_starGenType type
type MoqMethodSet_starGenType_Lookup_paramsKey struct {
	Params struct {
		Pkg  *types.Package
		Name string
	}
	Hashes struct {
		Pkg  hash.Hash
		Name hash.Hash
	}
}

// MoqMethodSet_starGenType_Lookup_resultsByParams contains the results for a
// given set of parameters for the MethodSet_starGenType type
type MoqMethodSet_starGenType_Lookup_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMethodSet_starGenType_Lookup_paramsKey]*MoqMethodSet_starGenType_Lookup_results
}

// MoqMethodSet_starGenType_Lookup_doFn defines the type of function needed
// when calling AndDo for the MethodSet_starGenType type
type MoqMethodSet_starGenType_Lookup_doFn func(pkg *types.Package, name string)

// MoqMethodSet_starGenType_Lookup_doReturnFn defines the type of function
// needed when calling DoReturnResults for the MethodSet_starGenType type
type MoqMethodSet_starGenType_Lookup_doReturnFn func(pkg *types.Package, name string) *types.Selection

// MoqMethodSet_starGenType_Lookup_results holds the results of the
// MethodSet_starGenType type
type MoqMethodSet_starGenType_Lookup_results struct {
	Params  MoqMethodSet_starGenType_Lookup_params
	Results []struct {
		Values *struct {
			Result1 *types.Selection
		}
		Sequence   uint32
		DoFn       MoqMethodSet_starGenType_Lookup_doFn
		DoReturnFn MoqMethodSet_starGenType_Lookup_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMethodSet_starGenType_Lookup_fnRecorder routes recorded function calls to
// the MoqMethodSet_starGenType moq
type MoqMethodSet_starGenType_Lookup_fnRecorder struct {
	Params    MoqMethodSet_starGenType_Lookup_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMethodSet_starGenType_Lookup_results
	Moq       *MoqMethodSet_starGenType
}

// MoqMethodSet_starGenType_Lookup_anyParams isolates the any params functions
// of the MethodSet_starGenType type
type MoqMethodSet_starGenType_Lookup_anyParams struct {
	Recorder *MoqMethodSet_starGenType_Lookup_fnRecorder
}

// NewMoqMethodSet_starGenType creates a new moq of the MethodSet_starGenType
// type
func NewMoqMethodSet_starGenType(scene *moq.Scene, config *moq.Config) *MoqMethodSet_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqMethodSet_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqMethodSet_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				String struct{}
				Len    struct{}
				At     struct {
					Param1 moq.ParamIndexing
				}
				Lookup struct {
					Pkg  moq.ParamIndexing
					Name moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			String struct{}
			Len    struct{}
			At     struct {
				Param1 moq.ParamIndexing
			}
			Lookup struct {
				Pkg  moq.ParamIndexing
				Name moq.ParamIndexing
			}
		}{
			String: struct{}{},
			Len:    struct{}{},
			At: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			Lookup: struct {
				Pkg  moq.ParamIndexing
				Name moq.ParamIndexing
			}{
				Pkg:  moq.ParamIndexByHash,
				Name: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the MethodSet_starGenType type
func (m *MoqMethodSet_starGenType) Mock() *MoqMethodSet_starGenType_mock { return m.Moq }

func (m *MoqMethodSet_starGenType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqMethodSet_starGenType_String_params{}
	var results *MoqMethodSet_starGenType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqMethodSet_starGenType_mock) Len() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqMethodSet_starGenType_Len_params{}
	var results *MoqMethodSet_starGenType_Len_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Len {
		paramsKey := m.Moq.ParamsKey_Len(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Len(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Len(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Len(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqMethodSet_starGenType_mock) At(param1 int) (result1 *types.Selection) {
	m.Moq.Scene.T.Helper()
	params := MoqMethodSet_starGenType_At_params{
		Param1: param1,
	}
	var results *MoqMethodSet_starGenType_At_results
	for _, resultsByParams := range m.Moq.ResultsByParams_At {
		paramsKey := m.Moq.ParamsKey_At(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_At(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_At(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_At(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqMethodSet_starGenType_mock) Lookup(pkg *types.Package, name string) (result1 *types.Selection) {
	m.Moq.Scene.T.Helper()
	params := MoqMethodSet_starGenType_Lookup_params{
		Pkg:  pkg,
		Name: name,
	}
	var results *MoqMethodSet_starGenType_Lookup_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Lookup {
		paramsKey := m.Moq.ParamsKey_Lookup(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Lookup(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Lookup(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Lookup(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(pkg, name)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(pkg, name)
	}
	return
}

// OnCall returns the recorder implementation of the MethodSet_starGenType type
func (m *MoqMethodSet_starGenType) OnCall() *MoqMethodSet_starGenType_recorder {
	return &MoqMethodSet_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqMethodSet_starGenType_recorder) String() *MoqMethodSet_starGenType_String_fnRecorder {
	return &MoqMethodSet_starGenType_String_fnRecorder{
		Params:   MoqMethodSet_starGenType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMethodSet_starGenType_String_fnRecorder) Any() *MoqMethodSet_starGenType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqMethodSet_starGenType_String_anyParams{Recorder: r}
}

func (r *MoqMethodSet_starGenType_String_fnRecorder) Seq() *MoqMethodSet_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMethodSet_starGenType_String_fnRecorder) NoSeq() *MoqMethodSet_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMethodSet_starGenType_String_fnRecorder) ReturnResults(result1 string) *MoqMethodSet_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqMethodSet_starGenType_String_doFn
		DoReturnFn MoqMethodSet_starGenType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMethodSet_starGenType_String_fnRecorder) AndDo(fn MoqMethodSet_starGenType_String_doFn) *MoqMethodSet_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMethodSet_starGenType_String_fnRecorder) DoReturnResults(fn MoqMethodSet_starGenType_String_doReturnFn) *MoqMethodSet_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqMethodSet_starGenType_String_doFn
		DoReturnFn MoqMethodSet_starGenType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMethodSet_starGenType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMethodSet_starGenType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMethodSet_starGenType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMethodSet_starGenType_String_paramsKey]*MoqMethodSet_starGenType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMethodSet_starGenType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMethodSet_starGenType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMethodSet_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqMethodSet_starGenType_String_doFn
				DoReturnFn MoqMethodSet_starGenType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMethodSet_starGenType) PrettyParams_String(params MoqMethodSet_starGenType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqMethodSet_starGenType) ParamsKey_String(params MoqMethodSet_starGenType_String_params, anyParams uint64) MoqMethodSet_starGenType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqMethodSet_starGenType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqMethodSet_starGenType_recorder) Len() *MoqMethodSet_starGenType_Len_fnRecorder {
	return &MoqMethodSet_starGenType_Len_fnRecorder{
		Params:   MoqMethodSet_starGenType_Len_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMethodSet_starGenType_Len_fnRecorder) Any() *MoqMethodSet_starGenType_Len_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Len(r.Params))
		return nil
	}
	return &MoqMethodSet_starGenType_Len_anyParams{Recorder: r}
}

func (r *MoqMethodSet_starGenType_Len_fnRecorder) Seq() *MoqMethodSet_starGenType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Len(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMethodSet_starGenType_Len_fnRecorder) NoSeq() *MoqMethodSet_starGenType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Len(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMethodSet_starGenType_Len_fnRecorder) ReturnResults(result1 int) *MoqMethodSet_starGenType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqMethodSet_starGenType_Len_doFn
		DoReturnFn MoqMethodSet_starGenType_Len_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMethodSet_starGenType_Len_fnRecorder) AndDo(fn MoqMethodSet_starGenType_Len_doFn) *MoqMethodSet_starGenType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMethodSet_starGenType_Len_fnRecorder) DoReturnResults(fn MoqMethodSet_starGenType_Len_doReturnFn) *MoqMethodSet_starGenType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqMethodSet_starGenType_Len_doFn
		DoReturnFn MoqMethodSet_starGenType_Len_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMethodSet_starGenType_Len_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMethodSet_starGenType_Len_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Len {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMethodSet_starGenType_Len_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMethodSet_starGenType_Len_paramsKey]*MoqMethodSet_starGenType_Len_results{},
		}
		r.Moq.ResultsByParams_Len = append(r.Moq.ResultsByParams_Len, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Len) {
			copy(r.Moq.ResultsByParams_Len[insertAt+1:], r.Moq.ResultsByParams_Len[insertAt:0])
			r.Moq.ResultsByParams_Len[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Len(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMethodSet_starGenType_Len_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMethodSet_starGenType_Len_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMethodSet_starGenType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqMethodSet_starGenType_Len_doFn
				DoReturnFn MoqMethodSet_starGenType_Len_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMethodSet_starGenType) PrettyParams_Len(params MoqMethodSet_starGenType_Len_params) string {
	return fmt.Sprintf("Len()")
}

func (m *MoqMethodSet_starGenType) ParamsKey_Len(params MoqMethodSet_starGenType_Len_params, anyParams uint64) MoqMethodSet_starGenType_Len_paramsKey {
	m.Scene.T.Helper()
	return MoqMethodSet_starGenType_Len_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqMethodSet_starGenType_recorder) At(param1 int) *MoqMethodSet_starGenType_At_fnRecorder {
	return &MoqMethodSet_starGenType_At_fnRecorder{
		Params: MoqMethodSet_starGenType_At_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMethodSet_starGenType_At_fnRecorder) Any() *MoqMethodSet_starGenType_At_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_At(r.Params))
		return nil
	}
	return &MoqMethodSet_starGenType_At_anyParams{Recorder: r}
}

func (a *MoqMethodSet_starGenType_At_anyParams) Param1() *MoqMethodSet_starGenType_At_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqMethodSet_starGenType_At_fnRecorder) Seq() *MoqMethodSet_starGenType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_At(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMethodSet_starGenType_At_fnRecorder) NoSeq() *MoqMethodSet_starGenType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_At(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMethodSet_starGenType_At_fnRecorder) ReturnResults(result1 *types.Selection) *MoqMethodSet_starGenType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Selection
		}
		Sequence   uint32
		DoFn       MoqMethodSet_starGenType_At_doFn
		DoReturnFn MoqMethodSet_starGenType_At_doReturnFn
	}{
		Values: &struct {
			Result1 *types.Selection
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMethodSet_starGenType_At_fnRecorder) AndDo(fn MoqMethodSet_starGenType_At_doFn) *MoqMethodSet_starGenType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMethodSet_starGenType_At_fnRecorder) DoReturnResults(fn MoqMethodSet_starGenType_At_doReturnFn) *MoqMethodSet_starGenType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Selection
		}
		Sequence   uint32
		DoFn       MoqMethodSet_starGenType_At_doFn
		DoReturnFn MoqMethodSet_starGenType_At_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMethodSet_starGenType_At_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMethodSet_starGenType_At_resultsByParams
	for n, res := range r.Moq.ResultsByParams_At {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMethodSet_starGenType_At_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMethodSet_starGenType_At_paramsKey]*MoqMethodSet_starGenType_At_results{},
		}
		r.Moq.ResultsByParams_At = append(r.Moq.ResultsByParams_At, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_At) {
			copy(r.Moq.ResultsByParams_At[insertAt+1:], r.Moq.ResultsByParams_At[insertAt:0])
			r.Moq.ResultsByParams_At[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_At(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMethodSet_starGenType_At_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMethodSet_starGenType_At_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMethodSet_starGenType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *types.Selection
				}
				Sequence   uint32
				DoFn       MoqMethodSet_starGenType_At_doFn
				DoReturnFn MoqMethodSet_starGenType_At_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMethodSet_starGenType) PrettyParams_At(params MoqMethodSet_starGenType_At_params) string {
	return fmt.Sprintf("At(%#v)", params.Param1)
}

func (m *MoqMethodSet_starGenType) ParamsKey_At(params MoqMethodSet_starGenType_At_params, anyParams uint64) MoqMethodSet_starGenType_At_paramsKey {
	m.Scene.T.Helper()
	var param1Used int
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.At.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqMethodSet_starGenType_At_paramsKey{
		Params: struct{ Param1 int }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqMethodSet_starGenType_recorder) Lookup(pkg *types.Package, name string) *MoqMethodSet_starGenType_Lookup_fnRecorder {
	return &MoqMethodSet_starGenType_Lookup_fnRecorder{
		Params: MoqMethodSet_starGenType_Lookup_params{
			Pkg:  pkg,
			Name: name,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMethodSet_starGenType_Lookup_fnRecorder) Any() *MoqMethodSet_starGenType_Lookup_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Lookup(r.Params))
		return nil
	}
	return &MoqMethodSet_starGenType_Lookup_anyParams{Recorder: r}
}

func (a *MoqMethodSet_starGenType_Lookup_anyParams) Pkg() *MoqMethodSet_starGenType_Lookup_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqMethodSet_starGenType_Lookup_anyParams) Name() *MoqMethodSet_starGenType_Lookup_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqMethodSet_starGenType_Lookup_fnRecorder) Seq() *MoqMethodSet_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Lookup(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMethodSet_starGenType_Lookup_fnRecorder) NoSeq() *MoqMethodSet_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Lookup(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMethodSet_starGenType_Lookup_fnRecorder) ReturnResults(result1 *types.Selection) *MoqMethodSet_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Selection
		}
		Sequence   uint32
		DoFn       MoqMethodSet_starGenType_Lookup_doFn
		DoReturnFn MoqMethodSet_starGenType_Lookup_doReturnFn
	}{
		Values: &struct {
			Result1 *types.Selection
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMethodSet_starGenType_Lookup_fnRecorder) AndDo(fn MoqMethodSet_starGenType_Lookup_doFn) *MoqMethodSet_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMethodSet_starGenType_Lookup_fnRecorder) DoReturnResults(fn MoqMethodSet_starGenType_Lookup_doReturnFn) *MoqMethodSet_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Selection
		}
		Sequence   uint32
		DoFn       MoqMethodSet_starGenType_Lookup_doFn
		DoReturnFn MoqMethodSet_starGenType_Lookup_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMethodSet_starGenType_Lookup_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMethodSet_starGenType_Lookup_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Lookup {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMethodSet_starGenType_Lookup_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMethodSet_starGenType_Lookup_paramsKey]*MoqMethodSet_starGenType_Lookup_results{},
		}
		r.Moq.ResultsByParams_Lookup = append(r.Moq.ResultsByParams_Lookup, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Lookup) {
			copy(r.Moq.ResultsByParams_Lookup[insertAt+1:], r.Moq.ResultsByParams_Lookup[insertAt:0])
			r.Moq.ResultsByParams_Lookup[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Lookup(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMethodSet_starGenType_Lookup_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMethodSet_starGenType_Lookup_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMethodSet_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *types.Selection
				}
				Sequence   uint32
				DoFn       MoqMethodSet_starGenType_Lookup_doFn
				DoReturnFn MoqMethodSet_starGenType_Lookup_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMethodSet_starGenType) PrettyParams_Lookup(params MoqMethodSet_starGenType_Lookup_params) string {
	return fmt.Sprintf("Lookup(%#v, %#v)", params.Pkg, params.Name)
}

func (m *MoqMethodSet_starGenType) ParamsKey_Lookup(params MoqMethodSet_starGenType_Lookup_params, anyParams uint64) MoqMethodSet_starGenType_Lookup_paramsKey {
	m.Scene.T.Helper()
	var pkgUsed *types.Package
	var pkgUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Lookup.Pkg == moq.ParamIndexByValue {
			pkgUsed = params.Pkg
		} else {
			pkgUsedHash = hash.DeepHash(params.Pkg)
		}
	}
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Lookup.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	return MoqMethodSet_starGenType_Lookup_paramsKey{
		Params: struct {
			Pkg  *types.Package
			Name string
		}{
			Pkg:  pkgUsed,
			Name: nameUsed,
		},
		Hashes: struct {
			Pkg  hash.Hash
			Name hash.Hash
		}{
			Pkg:  pkgUsedHash,
			Name: nameUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqMethodSet_starGenType) Reset() {
	m.ResultsByParams_String = nil
	m.ResultsByParams_Len = nil
	m.ResultsByParams_At = nil
	m.ResultsByParams_Lookup = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqMethodSet_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Len {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Len(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_At {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_At(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Lookup {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Lookup(results.Params))
			}
		}
	}
}
