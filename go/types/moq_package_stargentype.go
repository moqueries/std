// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package types

import (
	"fmt"
	"go/types"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that types.Package_starGenType is
// mocked completely
var _ Package_starGenType = (*MoqPackage_starGenType_mock)(nil)

// Package_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Package_starGenType interface {
	Path() string
	Name() string
	SetName(name string)
	Scope() *types.Scope
	Complete() bool
	MarkComplete()
	Imports() []*types.Package
	SetImports(list []*types.Package)
	String() string
}

// MoqPackage_starGenType holds the state of a moq of the Package_starGenType
// type
type MoqPackage_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqPackage_starGenType_mock

	ResultsByParams_Path         []MoqPackage_starGenType_Path_resultsByParams
	ResultsByParams_Name         []MoqPackage_starGenType_Name_resultsByParams
	ResultsByParams_SetName      []MoqPackage_starGenType_SetName_resultsByParams
	ResultsByParams_Scope        []MoqPackage_starGenType_Scope_resultsByParams
	ResultsByParams_Complete     []MoqPackage_starGenType_Complete_resultsByParams
	ResultsByParams_MarkComplete []MoqPackage_starGenType_MarkComplete_resultsByParams
	ResultsByParams_Imports      []MoqPackage_starGenType_Imports_resultsByParams
	ResultsByParams_SetImports   []MoqPackage_starGenType_SetImports_resultsByParams
	ResultsByParams_String       []MoqPackage_starGenType_String_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Path    struct{}
			Name    struct{}
			SetName struct {
				Name moq.ParamIndexing
			}
			Scope        struct{}
			Complete     struct{}
			MarkComplete struct{}
			Imports      struct{}
			SetImports   struct {
				List moq.ParamIndexing
			}
			String struct{}
		}
	}
}

// MoqPackage_starGenType_mock isolates the mock interface of the
// Package_starGenType type
type MoqPackage_starGenType_mock struct {
	Moq *MoqPackage_starGenType
}

// MoqPackage_starGenType_recorder isolates the recorder interface of the
// Package_starGenType type
type MoqPackage_starGenType_recorder struct {
	Moq *MoqPackage_starGenType
}

// MoqPackage_starGenType_Path_params holds the params of the
// Package_starGenType type
type MoqPackage_starGenType_Path_params struct{}

// MoqPackage_starGenType_Path_paramsKey holds the map key params of the
// Package_starGenType type
type MoqPackage_starGenType_Path_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPackage_starGenType_Path_resultsByParams contains the results for a given
// set of parameters for the Package_starGenType type
type MoqPackage_starGenType_Path_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPackage_starGenType_Path_paramsKey]*MoqPackage_starGenType_Path_results
}

// MoqPackage_starGenType_Path_doFn defines the type of function needed when
// calling AndDo for the Package_starGenType type
type MoqPackage_starGenType_Path_doFn func()

// MoqPackage_starGenType_Path_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Package_starGenType type
type MoqPackage_starGenType_Path_doReturnFn func() string

// MoqPackage_starGenType_Path_results holds the results of the
// Package_starGenType type
type MoqPackage_starGenType_Path_results struct {
	Params  MoqPackage_starGenType_Path_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_Path_doFn
		DoReturnFn MoqPackage_starGenType_Path_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPackage_starGenType_Path_fnRecorder routes recorded function calls to the
// MoqPackage_starGenType moq
type MoqPackage_starGenType_Path_fnRecorder struct {
	Params    MoqPackage_starGenType_Path_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPackage_starGenType_Path_results
	Moq       *MoqPackage_starGenType
}

// MoqPackage_starGenType_Path_anyParams isolates the any params functions of
// the Package_starGenType type
type MoqPackage_starGenType_Path_anyParams struct {
	Recorder *MoqPackage_starGenType_Path_fnRecorder
}

// MoqPackage_starGenType_Name_params holds the params of the
// Package_starGenType type
type MoqPackage_starGenType_Name_params struct{}

// MoqPackage_starGenType_Name_paramsKey holds the map key params of the
// Package_starGenType type
type MoqPackage_starGenType_Name_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPackage_starGenType_Name_resultsByParams contains the results for a given
// set of parameters for the Package_starGenType type
type MoqPackage_starGenType_Name_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPackage_starGenType_Name_paramsKey]*MoqPackage_starGenType_Name_results
}

// MoqPackage_starGenType_Name_doFn defines the type of function needed when
// calling AndDo for the Package_starGenType type
type MoqPackage_starGenType_Name_doFn func()

// MoqPackage_starGenType_Name_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Package_starGenType type
type MoqPackage_starGenType_Name_doReturnFn func() string

// MoqPackage_starGenType_Name_results holds the results of the
// Package_starGenType type
type MoqPackage_starGenType_Name_results struct {
	Params  MoqPackage_starGenType_Name_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_Name_doFn
		DoReturnFn MoqPackage_starGenType_Name_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPackage_starGenType_Name_fnRecorder routes recorded function calls to the
// MoqPackage_starGenType moq
type MoqPackage_starGenType_Name_fnRecorder struct {
	Params    MoqPackage_starGenType_Name_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPackage_starGenType_Name_results
	Moq       *MoqPackage_starGenType
}

// MoqPackage_starGenType_Name_anyParams isolates the any params functions of
// the Package_starGenType type
type MoqPackage_starGenType_Name_anyParams struct {
	Recorder *MoqPackage_starGenType_Name_fnRecorder
}

// MoqPackage_starGenType_SetName_params holds the params of the
// Package_starGenType type
type MoqPackage_starGenType_SetName_params struct{ Name string }

// MoqPackage_starGenType_SetName_paramsKey holds the map key params of the
// Package_starGenType type
type MoqPackage_starGenType_SetName_paramsKey struct {
	Params struct{ Name string }
	Hashes struct{ Name hash.Hash }
}

// MoqPackage_starGenType_SetName_resultsByParams contains the results for a
// given set of parameters for the Package_starGenType type
type MoqPackage_starGenType_SetName_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPackage_starGenType_SetName_paramsKey]*MoqPackage_starGenType_SetName_results
}

// MoqPackage_starGenType_SetName_doFn defines the type of function needed when
// calling AndDo for the Package_starGenType type
type MoqPackage_starGenType_SetName_doFn func(name string)

// MoqPackage_starGenType_SetName_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Package_starGenType type
type MoqPackage_starGenType_SetName_doReturnFn func(name string)

// MoqPackage_starGenType_SetName_results holds the results of the
// Package_starGenType type
type MoqPackage_starGenType_SetName_results struct {
	Params  MoqPackage_starGenType_SetName_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_SetName_doFn
		DoReturnFn MoqPackage_starGenType_SetName_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPackage_starGenType_SetName_fnRecorder routes recorded function calls to
// the MoqPackage_starGenType moq
type MoqPackage_starGenType_SetName_fnRecorder struct {
	Params    MoqPackage_starGenType_SetName_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPackage_starGenType_SetName_results
	Moq       *MoqPackage_starGenType
}

// MoqPackage_starGenType_SetName_anyParams isolates the any params functions
// of the Package_starGenType type
type MoqPackage_starGenType_SetName_anyParams struct {
	Recorder *MoqPackage_starGenType_SetName_fnRecorder
}

// MoqPackage_starGenType_Scope_params holds the params of the
// Package_starGenType type
type MoqPackage_starGenType_Scope_params struct{}

// MoqPackage_starGenType_Scope_paramsKey holds the map key params of the
// Package_starGenType type
type MoqPackage_starGenType_Scope_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPackage_starGenType_Scope_resultsByParams contains the results for a
// given set of parameters for the Package_starGenType type
type MoqPackage_starGenType_Scope_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPackage_starGenType_Scope_paramsKey]*MoqPackage_starGenType_Scope_results
}

// MoqPackage_starGenType_Scope_doFn defines the type of function needed when
// calling AndDo for the Package_starGenType type
type MoqPackage_starGenType_Scope_doFn func()

// MoqPackage_starGenType_Scope_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Package_starGenType type
type MoqPackage_starGenType_Scope_doReturnFn func() *types.Scope

// MoqPackage_starGenType_Scope_results holds the results of the
// Package_starGenType type
type MoqPackage_starGenType_Scope_results struct {
	Params  MoqPackage_starGenType_Scope_params
	Results []struct {
		Values *struct {
			Result1 *types.Scope
		}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_Scope_doFn
		DoReturnFn MoqPackage_starGenType_Scope_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPackage_starGenType_Scope_fnRecorder routes recorded function calls to
// the MoqPackage_starGenType moq
type MoqPackage_starGenType_Scope_fnRecorder struct {
	Params    MoqPackage_starGenType_Scope_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPackage_starGenType_Scope_results
	Moq       *MoqPackage_starGenType
}

// MoqPackage_starGenType_Scope_anyParams isolates the any params functions of
// the Package_starGenType type
type MoqPackage_starGenType_Scope_anyParams struct {
	Recorder *MoqPackage_starGenType_Scope_fnRecorder
}

// MoqPackage_starGenType_Complete_params holds the params of the
// Package_starGenType type
type MoqPackage_starGenType_Complete_params struct{}

// MoqPackage_starGenType_Complete_paramsKey holds the map key params of the
// Package_starGenType type
type MoqPackage_starGenType_Complete_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPackage_starGenType_Complete_resultsByParams contains the results for a
// given set of parameters for the Package_starGenType type
type MoqPackage_starGenType_Complete_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPackage_starGenType_Complete_paramsKey]*MoqPackage_starGenType_Complete_results
}

// MoqPackage_starGenType_Complete_doFn defines the type of function needed
// when calling AndDo for the Package_starGenType type
type MoqPackage_starGenType_Complete_doFn func()

// MoqPackage_starGenType_Complete_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Package_starGenType type
type MoqPackage_starGenType_Complete_doReturnFn func() bool

// MoqPackage_starGenType_Complete_results holds the results of the
// Package_starGenType type
type MoqPackage_starGenType_Complete_results struct {
	Params  MoqPackage_starGenType_Complete_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_Complete_doFn
		DoReturnFn MoqPackage_starGenType_Complete_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPackage_starGenType_Complete_fnRecorder routes recorded function calls to
// the MoqPackage_starGenType moq
type MoqPackage_starGenType_Complete_fnRecorder struct {
	Params    MoqPackage_starGenType_Complete_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPackage_starGenType_Complete_results
	Moq       *MoqPackage_starGenType
}

// MoqPackage_starGenType_Complete_anyParams isolates the any params functions
// of the Package_starGenType type
type MoqPackage_starGenType_Complete_anyParams struct {
	Recorder *MoqPackage_starGenType_Complete_fnRecorder
}

// MoqPackage_starGenType_MarkComplete_params holds the params of the
// Package_starGenType type
type MoqPackage_starGenType_MarkComplete_params struct{}

// MoqPackage_starGenType_MarkComplete_paramsKey holds the map key params of
// the Package_starGenType type
type MoqPackage_starGenType_MarkComplete_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPackage_starGenType_MarkComplete_resultsByParams contains the results for
// a given set of parameters for the Package_starGenType type
type MoqPackage_starGenType_MarkComplete_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPackage_starGenType_MarkComplete_paramsKey]*MoqPackage_starGenType_MarkComplete_results
}

// MoqPackage_starGenType_MarkComplete_doFn defines the type of function needed
// when calling AndDo for the Package_starGenType type
type MoqPackage_starGenType_MarkComplete_doFn func()

// MoqPackage_starGenType_MarkComplete_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Package_starGenType type
type MoqPackage_starGenType_MarkComplete_doReturnFn func()

// MoqPackage_starGenType_MarkComplete_results holds the results of the
// Package_starGenType type
type MoqPackage_starGenType_MarkComplete_results struct {
	Params  MoqPackage_starGenType_MarkComplete_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_MarkComplete_doFn
		DoReturnFn MoqPackage_starGenType_MarkComplete_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPackage_starGenType_MarkComplete_fnRecorder routes recorded function
// calls to the MoqPackage_starGenType moq
type MoqPackage_starGenType_MarkComplete_fnRecorder struct {
	Params    MoqPackage_starGenType_MarkComplete_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPackage_starGenType_MarkComplete_results
	Moq       *MoqPackage_starGenType
}

// MoqPackage_starGenType_MarkComplete_anyParams isolates the any params
// functions of the Package_starGenType type
type MoqPackage_starGenType_MarkComplete_anyParams struct {
	Recorder *MoqPackage_starGenType_MarkComplete_fnRecorder
}

// MoqPackage_starGenType_Imports_params holds the params of the
// Package_starGenType type
type MoqPackage_starGenType_Imports_params struct{}

// MoqPackage_starGenType_Imports_paramsKey holds the map key params of the
// Package_starGenType type
type MoqPackage_starGenType_Imports_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPackage_starGenType_Imports_resultsByParams contains the results for a
// given set of parameters for the Package_starGenType type
type MoqPackage_starGenType_Imports_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPackage_starGenType_Imports_paramsKey]*MoqPackage_starGenType_Imports_results
}

// MoqPackage_starGenType_Imports_doFn defines the type of function needed when
// calling AndDo for the Package_starGenType type
type MoqPackage_starGenType_Imports_doFn func()

// MoqPackage_starGenType_Imports_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Package_starGenType type
type MoqPackage_starGenType_Imports_doReturnFn func() []*types.Package

// MoqPackage_starGenType_Imports_results holds the results of the
// Package_starGenType type
type MoqPackage_starGenType_Imports_results struct {
	Params  MoqPackage_starGenType_Imports_params
	Results []struct {
		Values *struct {
			Result1 []*types.Package
		}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_Imports_doFn
		DoReturnFn MoqPackage_starGenType_Imports_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPackage_starGenType_Imports_fnRecorder routes recorded function calls to
// the MoqPackage_starGenType moq
type MoqPackage_starGenType_Imports_fnRecorder struct {
	Params    MoqPackage_starGenType_Imports_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPackage_starGenType_Imports_results
	Moq       *MoqPackage_starGenType
}

// MoqPackage_starGenType_Imports_anyParams isolates the any params functions
// of the Package_starGenType type
type MoqPackage_starGenType_Imports_anyParams struct {
	Recorder *MoqPackage_starGenType_Imports_fnRecorder
}

// MoqPackage_starGenType_SetImports_params holds the params of the
// Package_starGenType type
type MoqPackage_starGenType_SetImports_params struct{ List []*types.Package }

// MoqPackage_starGenType_SetImports_paramsKey holds the map key params of the
// Package_starGenType type
type MoqPackage_starGenType_SetImports_paramsKey struct {
	Params struct{}
	Hashes struct{ List hash.Hash }
}

// MoqPackage_starGenType_SetImports_resultsByParams contains the results for a
// given set of parameters for the Package_starGenType type
type MoqPackage_starGenType_SetImports_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPackage_starGenType_SetImports_paramsKey]*MoqPackage_starGenType_SetImports_results
}

// MoqPackage_starGenType_SetImports_doFn defines the type of function needed
// when calling AndDo for the Package_starGenType type
type MoqPackage_starGenType_SetImports_doFn func(list []*types.Package)

// MoqPackage_starGenType_SetImports_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Package_starGenType type
type MoqPackage_starGenType_SetImports_doReturnFn func(list []*types.Package)

// MoqPackage_starGenType_SetImports_results holds the results of the
// Package_starGenType type
type MoqPackage_starGenType_SetImports_results struct {
	Params  MoqPackage_starGenType_SetImports_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_SetImports_doFn
		DoReturnFn MoqPackage_starGenType_SetImports_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPackage_starGenType_SetImports_fnRecorder routes recorded function calls
// to the MoqPackage_starGenType moq
type MoqPackage_starGenType_SetImports_fnRecorder struct {
	Params    MoqPackage_starGenType_SetImports_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPackage_starGenType_SetImports_results
	Moq       *MoqPackage_starGenType
}

// MoqPackage_starGenType_SetImports_anyParams isolates the any params
// functions of the Package_starGenType type
type MoqPackage_starGenType_SetImports_anyParams struct {
	Recorder *MoqPackage_starGenType_SetImports_fnRecorder
}

// MoqPackage_starGenType_String_params holds the params of the
// Package_starGenType type
type MoqPackage_starGenType_String_params struct{}

// MoqPackage_starGenType_String_paramsKey holds the map key params of the
// Package_starGenType type
type MoqPackage_starGenType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPackage_starGenType_String_resultsByParams contains the results for a
// given set of parameters for the Package_starGenType type
type MoqPackage_starGenType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPackage_starGenType_String_paramsKey]*MoqPackage_starGenType_String_results
}

// MoqPackage_starGenType_String_doFn defines the type of function needed when
// calling AndDo for the Package_starGenType type
type MoqPackage_starGenType_String_doFn func()

// MoqPackage_starGenType_String_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Package_starGenType type
type MoqPackage_starGenType_String_doReturnFn func() string

// MoqPackage_starGenType_String_results holds the results of the
// Package_starGenType type
type MoqPackage_starGenType_String_results struct {
	Params  MoqPackage_starGenType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_String_doFn
		DoReturnFn MoqPackage_starGenType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPackage_starGenType_String_fnRecorder routes recorded function calls to
// the MoqPackage_starGenType moq
type MoqPackage_starGenType_String_fnRecorder struct {
	Params    MoqPackage_starGenType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPackage_starGenType_String_results
	Moq       *MoqPackage_starGenType
}

// MoqPackage_starGenType_String_anyParams isolates the any params functions of
// the Package_starGenType type
type MoqPackage_starGenType_String_anyParams struct {
	Recorder *MoqPackage_starGenType_String_fnRecorder
}

// NewMoqPackage_starGenType creates a new moq of the Package_starGenType type
func NewMoqPackage_starGenType(scene *moq.Scene, config *moq.Config) *MoqPackage_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqPackage_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqPackage_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Path    struct{}
				Name    struct{}
				SetName struct {
					Name moq.ParamIndexing
				}
				Scope        struct{}
				Complete     struct{}
				MarkComplete struct{}
				Imports      struct{}
				SetImports   struct {
					List moq.ParamIndexing
				}
				String struct{}
			}
		}{ParameterIndexing: struct {
			Path    struct{}
			Name    struct{}
			SetName struct {
				Name moq.ParamIndexing
			}
			Scope        struct{}
			Complete     struct{}
			MarkComplete struct{}
			Imports      struct{}
			SetImports   struct {
				List moq.ParamIndexing
			}
			String struct{}
		}{
			Path: struct{}{},
			Name: struct{}{},
			SetName: struct {
				Name moq.ParamIndexing
			}{
				Name: moq.ParamIndexByValue,
			},
			Scope:        struct{}{},
			Complete:     struct{}{},
			MarkComplete: struct{}{},
			Imports:      struct{}{},
			SetImports: struct {
				List moq.ParamIndexing
			}{
				List: moq.ParamIndexByHash,
			},
			String: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Package_starGenType type
func (m *MoqPackage_starGenType) Mock() *MoqPackage_starGenType_mock { return m.Moq }

func (m *MoqPackage_starGenType_mock) Path() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqPackage_starGenType_Path_params{}
	var results *MoqPackage_starGenType_Path_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Path {
		paramsKey := m.Moq.ParamsKey_Path(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Path(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Path(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Path(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqPackage_starGenType_mock) Name() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqPackage_starGenType_Name_params{}
	var results *MoqPackage_starGenType_Name_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Name {
		paramsKey := m.Moq.ParamsKey_Name(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Name(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Name(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Name(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqPackage_starGenType_mock) SetName(name string) {
	m.Moq.Scene.T.Helper()
	params := MoqPackage_starGenType_SetName_params{
		Name: name,
	}
	var results *MoqPackage_starGenType_SetName_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetName {
		paramsKey := m.Moq.ParamsKey_SetName(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetName(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetName(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetName(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(name)
	}
	return
}

func (m *MoqPackage_starGenType_mock) Scope() (result1 *types.Scope) {
	m.Moq.Scene.T.Helper()
	params := MoqPackage_starGenType_Scope_params{}
	var results *MoqPackage_starGenType_Scope_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Scope {
		paramsKey := m.Moq.ParamsKey_Scope(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Scope(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Scope(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Scope(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqPackage_starGenType_mock) Complete() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqPackage_starGenType_Complete_params{}
	var results *MoqPackage_starGenType_Complete_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Complete {
		paramsKey := m.Moq.ParamsKey_Complete(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Complete(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Complete(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Complete(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqPackage_starGenType_mock) MarkComplete() {
	m.Moq.Scene.T.Helper()
	params := MoqPackage_starGenType_MarkComplete_params{}
	var results *MoqPackage_starGenType_MarkComplete_results
	for _, resultsByParams := range m.Moq.ResultsByParams_MarkComplete {
		paramsKey := m.Moq.ParamsKey_MarkComplete(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_MarkComplete(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_MarkComplete(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_MarkComplete(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqPackage_starGenType_mock) Imports() (result1 []*types.Package) {
	m.Moq.Scene.T.Helper()
	params := MoqPackage_starGenType_Imports_params{}
	var results *MoqPackage_starGenType_Imports_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Imports {
		paramsKey := m.Moq.ParamsKey_Imports(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Imports(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Imports(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Imports(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqPackage_starGenType_mock) SetImports(list []*types.Package) {
	m.Moq.Scene.T.Helper()
	params := MoqPackage_starGenType_SetImports_params{
		List: list,
	}
	var results *MoqPackage_starGenType_SetImports_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetImports {
		paramsKey := m.Moq.ParamsKey_SetImports(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetImports(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetImports(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetImports(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(list)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(list)
	}
	return
}

func (m *MoqPackage_starGenType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqPackage_starGenType_String_params{}
	var results *MoqPackage_starGenType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Package_starGenType type
func (m *MoqPackage_starGenType) OnCall() *MoqPackage_starGenType_recorder {
	return &MoqPackage_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqPackage_starGenType_recorder) Path() *MoqPackage_starGenType_Path_fnRecorder {
	return &MoqPackage_starGenType_Path_fnRecorder{
		Params:   MoqPackage_starGenType_Path_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPackage_starGenType_Path_fnRecorder) Any() *MoqPackage_starGenType_Path_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Path(r.Params))
		return nil
	}
	return &MoqPackage_starGenType_Path_anyParams{Recorder: r}
}

func (r *MoqPackage_starGenType_Path_fnRecorder) Seq() *MoqPackage_starGenType_Path_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Path(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPackage_starGenType_Path_fnRecorder) NoSeq() *MoqPackage_starGenType_Path_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Path(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPackage_starGenType_Path_fnRecorder) ReturnResults(result1 string) *MoqPackage_starGenType_Path_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_Path_doFn
		DoReturnFn MoqPackage_starGenType_Path_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPackage_starGenType_Path_fnRecorder) AndDo(fn MoqPackage_starGenType_Path_doFn) *MoqPackage_starGenType_Path_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPackage_starGenType_Path_fnRecorder) DoReturnResults(fn MoqPackage_starGenType_Path_doReturnFn) *MoqPackage_starGenType_Path_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_Path_doFn
		DoReturnFn MoqPackage_starGenType_Path_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPackage_starGenType_Path_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPackage_starGenType_Path_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Path {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPackage_starGenType_Path_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPackage_starGenType_Path_paramsKey]*MoqPackage_starGenType_Path_results{},
		}
		r.Moq.ResultsByParams_Path = append(r.Moq.ResultsByParams_Path, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Path) {
			copy(r.Moq.ResultsByParams_Path[insertAt+1:], r.Moq.ResultsByParams_Path[insertAt:0])
			r.Moq.ResultsByParams_Path[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Path(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPackage_starGenType_Path_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPackage_starGenType_Path_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPackage_starGenType_Path_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqPackage_starGenType_Path_doFn
				DoReturnFn MoqPackage_starGenType_Path_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPackage_starGenType) PrettyParams_Path(params MoqPackage_starGenType_Path_params) string {
	return fmt.Sprintf("Path()")
}

func (m *MoqPackage_starGenType) ParamsKey_Path(params MoqPackage_starGenType_Path_params, anyParams uint64) MoqPackage_starGenType_Path_paramsKey {
	m.Scene.T.Helper()
	return MoqPackage_starGenType_Path_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPackage_starGenType_recorder) Name() *MoqPackage_starGenType_Name_fnRecorder {
	return &MoqPackage_starGenType_Name_fnRecorder{
		Params:   MoqPackage_starGenType_Name_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPackage_starGenType_Name_fnRecorder) Any() *MoqPackage_starGenType_Name_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	return &MoqPackage_starGenType_Name_anyParams{Recorder: r}
}

func (r *MoqPackage_starGenType_Name_fnRecorder) Seq() *MoqPackage_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPackage_starGenType_Name_fnRecorder) NoSeq() *MoqPackage_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPackage_starGenType_Name_fnRecorder) ReturnResults(result1 string) *MoqPackage_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_Name_doFn
		DoReturnFn MoqPackage_starGenType_Name_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPackage_starGenType_Name_fnRecorder) AndDo(fn MoqPackage_starGenType_Name_doFn) *MoqPackage_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPackage_starGenType_Name_fnRecorder) DoReturnResults(fn MoqPackage_starGenType_Name_doReturnFn) *MoqPackage_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_Name_doFn
		DoReturnFn MoqPackage_starGenType_Name_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPackage_starGenType_Name_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPackage_starGenType_Name_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Name {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPackage_starGenType_Name_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPackage_starGenType_Name_paramsKey]*MoqPackage_starGenType_Name_results{},
		}
		r.Moq.ResultsByParams_Name = append(r.Moq.ResultsByParams_Name, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Name) {
			copy(r.Moq.ResultsByParams_Name[insertAt+1:], r.Moq.ResultsByParams_Name[insertAt:0])
			r.Moq.ResultsByParams_Name[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Name(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPackage_starGenType_Name_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPackage_starGenType_Name_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPackage_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqPackage_starGenType_Name_doFn
				DoReturnFn MoqPackage_starGenType_Name_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPackage_starGenType) PrettyParams_Name(params MoqPackage_starGenType_Name_params) string {
	return fmt.Sprintf("Name()")
}

func (m *MoqPackage_starGenType) ParamsKey_Name(params MoqPackage_starGenType_Name_params, anyParams uint64) MoqPackage_starGenType_Name_paramsKey {
	m.Scene.T.Helper()
	return MoqPackage_starGenType_Name_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPackage_starGenType_recorder) SetName(name string) *MoqPackage_starGenType_SetName_fnRecorder {
	return &MoqPackage_starGenType_SetName_fnRecorder{
		Params: MoqPackage_starGenType_SetName_params{
			Name: name,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPackage_starGenType_SetName_fnRecorder) Any() *MoqPackage_starGenType_SetName_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetName(r.Params))
		return nil
	}
	return &MoqPackage_starGenType_SetName_anyParams{Recorder: r}
}

func (a *MoqPackage_starGenType_SetName_anyParams) Name() *MoqPackage_starGenType_SetName_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPackage_starGenType_SetName_fnRecorder) Seq() *MoqPackage_starGenType_SetName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetName(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPackage_starGenType_SetName_fnRecorder) NoSeq() *MoqPackage_starGenType_SetName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetName(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPackage_starGenType_SetName_fnRecorder) ReturnResults() *MoqPackage_starGenType_SetName_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_SetName_doFn
		DoReturnFn MoqPackage_starGenType_SetName_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPackage_starGenType_SetName_fnRecorder) AndDo(fn MoqPackage_starGenType_SetName_doFn) *MoqPackage_starGenType_SetName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPackage_starGenType_SetName_fnRecorder) DoReturnResults(fn MoqPackage_starGenType_SetName_doReturnFn) *MoqPackage_starGenType_SetName_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_SetName_doFn
		DoReturnFn MoqPackage_starGenType_SetName_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPackage_starGenType_SetName_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPackage_starGenType_SetName_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetName {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPackage_starGenType_SetName_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPackage_starGenType_SetName_paramsKey]*MoqPackage_starGenType_SetName_results{},
		}
		r.Moq.ResultsByParams_SetName = append(r.Moq.ResultsByParams_SetName, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetName) {
			copy(r.Moq.ResultsByParams_SetName[insertAt+1:], r.Moq.ResultsByParams_SetName[insertAt:0])
			r.Moq.ResultsByParams_SetName[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetName(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPackage_starGenType_SetName_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPackage_starGenType_SetName_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPackage_starGenType_SetName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqPackage_starGenType_SetName_doFn
				DoReturnFn MoqPackage_starGenType_SetName_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPackage_starGenType) PrettyParams_SetName(params MoqPackage_starGenType_SetName_params) string {
	return fmt.Sprintf("SetName(%#v)", params.Name)
}

func (m *MoqPackage_starGenType) ParamsKey_SetName(params MoqPackage_starGenType_SetName_params, anyParams uint64) MoqPackage_starGenType_SetName_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetName.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	return MoqPackage_starGenType_SetName_paramsKey{
		Params: struct{ Name string }{
			Name: nameUsed,
		},
		Hashes: struct{ Name hash.Hash }{
			Name: nameUsedHash,
		},
	}
}

func (m *MoqPackage_starGenType_recorder) Scope() *MoqPackage_starGenType_Scope_fnRecorder {
	return &MoqPackage_starGenType_Scope_fnRecorder{
		Params:   MoqPackage_starGenType_Scope_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPackage_starGenType_Scope_fnRecorder) Any() *MoqPackage_starGenType_Scope_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Scope(r.Params))
		return nil
	}
	return &MoqPackage_starGenType_Scope_anyParams{Recorder: r}
}

func (r *MoqPackage_starGenType_Scope_fnRecorder) Seq() *MoqPackage_starGenType_Scope_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Scope(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPackage_starGenType_Scope_fnRecorder) NoSeq() *MoqPackage_starGenType_Scope_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Scope(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPackage_starGenType_Scope_fnRecorder) ReturnResults(result1 *types.Scope) *MoqPackage_starGenType_Scope_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Scope
		}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_Scope_doFn
		DoReturnFn MoqPackage_starGenType_Scope_doReturnFn
	}{
		Values: &struct {
			Result1 *types.Scope
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPackage_starGenType_Scope_fnRecorder) AndDo(fn MoqPackage_starGenType_Scope_doFn) *MoqPackage_starGenType_Scope_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPackage_starGenType_Scope_fnRecorder) DoReturnResults(fn MoqPackage_starGenType_Scope_doReturnFn) *MoqPackage_starGenType_Scope_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Scope
		}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_Scope_doFn
		DoReturnFn MoqPackage_starGenType_Scope_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPackage_starGenType_Scope_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPackage_starGenType_Scope_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Scope {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPackage_starGenType_Scope_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPackage_starGenType_Scope_paramsKey]*MoqPackage_starGenType_Scope_results{},
		}
		r.Moq.ResultsByParams_Scope = append(r.Moq.ResultsByParams_Scope, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Scope) {
			copy(r.Moq.ResultsByParams_Scope[insertAt+1:], r.Moq.ResultsByParams_Scope[insertAt:0])
			r.Moq.ResultsByParams_Scope[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Scope(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPackage_starGenType_Scope_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPackage_starGenType_Scope_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPackage_starGenType_Scope_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *types.Scope
				}
				Sequence   uint32
				DoFn       MoqPackage_starGenType_Scope_doFn
				DoReturnFn MoqPackage_starGenType_Scope_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPackage_starGenType) PrettyParams_Scope(params MoqPackage_starGenType_Scope_params) string {
	return fmt.Sprintf("Scope()")
}

func (m *MoqPackage_starGenType) ParamsKey_Scope(params MoqPackage_starGenType_Scope_params, anyParams uint64) MoqPackage_starGenType_Scope_paramsKey {
	m.Scene.T.Helper()
	return MoqPackage_starGenType_Scope_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPackage_starGenType_recorder) Complete() *MoqPackage_starGenType_Complete_fnRecorder {
	return &MoqPackage_starGenType_Complete_fnRecorder{
		Params:   MoqPackage_starGenType_Complete_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPackage_starGenType_Complete_fnRecorder) Any() *MoqPackage_starGenType_Complete_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Complete(r.Params))
		return nil
	}
	return &MoqPackage_starGenType_Complete_anyParams{Recorder: r}
}

func (r *MoqPackage_starGenType_Complete_fnRecorder) Seq() *MoqPackage_starGenType_Complete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Complete(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPackage_starGenType_Complete_fnRecorder) NoSeq() *MoqPackage_starGenType_Complete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Complete(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPackage_starGenType_Complete_fnRecorder) ReturnResults(result1 bool) *MoqPackage_starGenType_Complete_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_Complete_doFn
		DoReturnFn MoqPackage_starGenType_Complete_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPackage_starGenType_Complete_fnRecorder) AndDo(fn MoqPackage_starGenType_Complete_doFn) *MoqPackage_starGenType_Complete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPackage_starGenType_Complete_fnRecorder) DoReturnResults(fn MoqPackage_starGenType_Complete_doReturnFn) *MoqPackage_starGenType_Complete_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_Complete_doFn
		DoReturnFn MoqPackage_starGenType_Complete_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPackage_starGenType_Complete_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPackage_starGenType_Complete_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Complete {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPackage_starGenType_Complete_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPackage_starGenType_Complete_paramsKey]*MoqPackage_starGenType_Complete_results{},
		}
		r.Moq.ResultsByParams_Complete = append(r.Moq.ResultsByParams_Complete, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Complete) {
			copy(r.Moq.ResultsByParams_Complete[insertAt+1:], r.Moq.ResultsByParams_Complete[insertAt:0])
			r.Moq.ResultsByParams_Complete[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Complete(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPackage_starGenType_Complete_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPackage_starGenType_Complete_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPackage_starGenType_Complete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqPackage_starGenType_Complete_doFn
				DoReturnFn MoqPackage_starGenType_Complete_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPackage_starGenType) PrettyParams_Complete(params MoqPackage_starGenType_Complete_params) string {
	return fmt.Sprintf("Complete()")
}

func (m *MoqPackage_starGenType) ParamsKey_Complete(params MoqPackage_starGenType_Complete_params, anyParams uint64) MoqPackage_starGenType_Complete_paramsKey {
	m.Scene.T.Helper()
	return MoqPackage_starGenType_Complete_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPackage_starGenType_recorder) MarkComplete() *MoqPackage_starGenType_MarkComplete_fnRecorder {
	return &MoqPackage_starGenType_MarkComplete_fnRecorder{
		Params:   MoqPackage_starGenType_MarkComplete_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPackage_starGenType_MarkComplete_fnRecorder) Any() *MoqPackage_starGenType_MarkComplete_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MarkComplete(r.Params))
		return nil
	}
	return &MoqPackage_starGenType_MarkComplete_anyParams{Recorder: r}
}

func (r *MoqPackage_starGenType_MarkComplete_fnRecorder) Seq() *MoqPackage_starGenType_MarkComplete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MarkComplete(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPackage_starGenType_MarkComplete_fnRecorder) NoSeq() *MoqPackage_starGenType_MarkComplete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MarkComplete(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPackage_starGenType_MarkComplete_fnRecorder) ReturnResults() *MoqPackage_starGenType_MarkComplete_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_MarkComplete_doFn
		DoReturnFn MoqPackage_starGenType_MarkComplete_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPackage_starGenType_MarkComplete_fnRecorder) AndDo(fn MoqPackage_starGenType_MarkComplete_doFn) *MoqPackage_starGenType_MarkComplete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPackage_starGenType_MarkComplete_fnRecorder) DoReturnResults(fn MoqPackage_starGenType_MarkComplete_doReturnFn) *MoqPackage_starGenType_MarkComplete_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_MarkComplete_doFn
		DoReturnFn MoqPackage_starGenType_MarkComplete_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPackage_starGenType_MarkComplete_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPackage_starGenType_MarkComplete_resultsByParams
	for n, res := range r.Moq.ResultsByParams_MarkComplete {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPackage_starGenType_MarkComplete_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPackage_starGenType_MarkComplete_paramsKey]*MoqPackage_starGenType_MarkComplete_results{},
		}
		r.Moq.ResultsByParams_MarkComplete = append(r.Moq.ResultsByParams_MarkComplete, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_MarkComplete) {
			copy(r.Moq.ResultsByParams_MarkComplete[insertAt+1:], r.Moq.ResultsByParams_MarkComplete[insertAt:0])
			r.Moq.ResultsByParams_MarkComplete[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_MarkComplete(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPackage_starGenType_MarkComplete_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPackage_starGenType_MarkComplete_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPackage_starGenType_MarkComplete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqPackage_starGenType_MarkComplete_doFn
				DoReturnFn MoqPackage_starGenType_MarkComplete_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPackage_starGenType) PrettyParams_MarkComplete(params MoqPackage_starGenType_MarkComplete_params) string {
	return fmt.Sprintf("MarkComplete()")
}

func (m *MoqPackage_starGenType) ParamsKey_MarkComplete(params MoqPackage_starGenType_MarkComplete_params, anyParams uint64) MoqPackage_starGenType_MarkComplete_paramsKey {
	m.Scene.T.Helper()
	return MoqPackage_starGenType_MarkComplete_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPackage_starGenType_recorder) Imports() *MoqPackage_starGenType_Imports_fnRecorder {
	return &MoqPackage_starGenType_Imports_fnRecorder{
		Params:   MoqPackage_starGenType_Imports_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPackage_starGenType_Imports_fnRecorder) Any() *MoqPackage_starGenType_Imports_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Imports(r.Params))
		return nil
	}
	return &MoqPackage_starGenType_Imports_anyParams{Recorder: r}
}

func (r *MoqPackage_starGenType_Imports_fnRecorder) Seq() *MoqPackage_starGenType_Imports_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Imports(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPackage_starGenType_Imports_fnRecorder) NoSeq() *MoqPackage_starGenType_Imports_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Imports(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPackage_starGenType_Imports_fnRecorder) ReturnResults(result1 []*types.Package) *MoqPackage_starGenType_Imports_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []*types.Package
		}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_Imports_doFn
		DoReturnFn MoqPackage_starGenType_Imports_doReturnFn
	}{
		Values: &struct {
			Result1 []*types.Package
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPackage_starGenType_Imports_fnRecorder) AndDo(fn MoqPackage_starGenType_Imports_doFn) *MoqPackage_starGenType_Imports_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPackage_starGenType_Imports_fnRecorder) DoReturnResults(fn MoqPackage_starGenType_Imports_doReturnFn) *MoqPackage_starGenType_Imports_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []*types.Package
		}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_Imports_doFn
		DoReturnFn MoqPackage_starGenType_Imports_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPackage_starGenType_Imports_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPackage_starGenType_Imports_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Imports {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPackage_starGenType_Imports_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPackage_starGenType_Imports_paramsKey]*MoqPackage_starGenType_Imports_results{},
		}
		r.Moq.ResultsByParams_Imports = append(r.Moq.ResultsByParams_Imports, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Imports) {
			copy(r.Moq.ResultsByParams_Imports[insertAt+1:], r.Moq.ResultsByParams_Imports[insertAt:0])
			r.Moq.ResultsByParams_Imports[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Imports(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPackage_starGenType_Imports_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPackage_starGenType_Imports_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPackage_starGenType_Imports_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []*types.Package
				}
				Sequence   uint32
				DoFn       MoqPackage_starGenType_Imports_doFn
				DoReturnFn MoqPackage_starGenType_Imports_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPackage_starGenType) PrettyParams_Imports(params MoqPackage_starGenType_Imports_params) string {
	return fmt.Sprintf("Imports()")
}

func (m *MoqPackage_starGenType) ParamsKey_Imports(params MoqPackage_starGenType_Imports_params, anyParams uint64) MoqPackage_starGenType_Imports_paramsKey {
	m.Scene.T.Helper()
	return MoqPackage_starGenType_Imports_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPackage_starGenType_recorder) SetImports(list []*types.Package) *MoqPackage_starGenType_SetImports_fnRecorder {
	return &MoqPackage_starGenType_SetImports_fnRecorder{
		Params: MoqPackage_starGenType_SetImports_params{
			List: list,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPackage_starGenType_SetImports_fnRecorder) Any() *MoqPackage_starGenType_SetImports_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetImports(r.Params))
		return nil
	}
	return &MoqPackage_starGenType_SetImports_anyParams{Recorder: r}
}

func (a *MoqPackage_starGenType_SetImports_anyParams) List() *MoqPackage_starGenType_SetImports_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPackage_starGenType_SetImports_fnRecorder) Seq() *MoqPackage_starGenType_SetImports_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetImports(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPackage_starGenType_SetImports_fnRecorder) NoSeq() *MoqPackage_starGenType_SetImports_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetImports(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPackage_starGenType_SetImports_fnRecorder) ReturnResults() *MoqPackage_starGenType_SetImports_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_SetImports_doFn
		DoReturnFn MoqPackage_starGenType_SetImports_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPackage_starGenType_SetImports_fnRecorder) AndDo(fn MoqPackage_starGenType_SetImports_doFn) *MoqPackage_starGenType_SetImports_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPackage_starGenType_SetImports_fnRecorder) DoReturnResults(fn MoqPackage_starGenType_SetImports_doReturnFn) *MoqPackage_starGenType_SetImports_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_SetImports_doFn
		DoReturnFn MoqPackage_starGenType_SetImports_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPackage_starGenType_SetImports_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPackage_starGenType_SetImports_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetImports {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPackage_starGenType_SetImports_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPackage_starGenType_SetImports_paramsKey]*MoqPackage_starGenType_SetImports_results{},
		}
		r.Moq.ResultsByParams_SetImports = append(r.Moq.ResultsByParams_SetImports, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetImports) {
			copy(r.Moq.ResultsByParams_SetImports[insertAt+1:], r.Moq.ResultsByParams_SetImports[insertAt:0])
			r.Moq.ResultsByParams_SetImports[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetImports(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPackage_starGenType_SetImports_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPackage_starGenType_SetImports_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPackage_starGenType_SetImports_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqPackage_starGenType_SetImports_doFn
				DoReturnFn MoqPackage_starGenType_SetImports_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPackage_starGenType) PrettyParams_SetImports(params MoqPackage_starGenType_SetImports_params) string {
	return fmt.Sprintf("SetImports(%#v)", params.List)
}

func (m *MoqPackage_starGenType) ParamsKey_SetImports(params MoqPackage_starGenType_SetImports_params, anyParams uint64) MoqPackage_starGenType_SetImports_paramsKey {
	m.Scene.T.Helper()
	var listUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetImports.List == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The list parameter of the SetImports function can't be indexed by value")
		}
		listUsedHash = hash.DeepHash(params.List)
	}
	return MoqPackage_starGenType_SetImports_paramsKey{
		Params: struct{}{},
		Hashes: struct{ List hash.Hash }{
			List: listUsedHash,
		},
	}
}

func (m *MoqPackage_starGenType_recorder) String() *MoqPackage_starGenType_String_fnRecorder {
	return &MoqPackage_starGenType_String_fnRecorder{
		Params:   MoqPackage_starGenType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPackage_starGenType_String_fnRecorder) Any() *MoqPackage_starGenType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqPackage_starGenType_String_anyParams{Recorder: r}
}

func (r *MoqPackage_starGenType_String_fnRecorder) Seq() *MoqPackage_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPackage_starGenType_String_fnRecorder) NoSeq() *MoqPackage_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPackage_starGenType_String_fnRecorder) ReturnResults(result1 string) *MoqPackage_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_String_doFn
		DoReturnFn MoqPackage_starGenType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPackage_starGenType_String_fnRecorder) AndDo(fn MoqPackage_starGenType_String_doFn) *MoqPackage_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPackage_starGenType_String_fnRecorder) DoReturnResults(fn MoqPackage_starGenType_String_doReturnFn) *MoqPackage_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPackage_starGenType_String_doFn
		DoReturnFn MoqPackage_starGenType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPackage_starGenType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPackage_starGenType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPackage_starGenType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPackage_starGenType_String_paramsKey]*MoqPackage_starGenType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPackage_starGenType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPackage_starGenType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPackage_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqPackage_starGenType_String_doFn
				DoReturnFn MoqPackage_starGenType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPackage_starGenType) PrettyParams_String(params MoqPackage_starGenType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqPackage_starGenType) ParamsKey_String(params MoqPackage_starGenType_String_params, anyParams uint64) MoqPackage_starGenType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqPackage_starGenType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqPackage_starGenType) Reset() {
	m.ResultsByParams_Path = nil
	m.ResultsByParams_Name = nil
	m.ResultsByParams_SetName = nil
	m.ResultsByParams_Scope = nil
	m.ResultsByParams_Complete = nil
	m.ResultsByParams_MarkComplete = nil
	m.ResultsByParams_Imports = nil
	m.ResultsByParams_SetImports = nil
	m.ResultsByParams_String = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqPackage_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Path {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Path(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Name {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Name(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetName {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetName(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Scope {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Scope(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Complete {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Complete(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_MarkComplete {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_MarkComplete(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Imports {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Imports(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetImports {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetImports(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
}
