// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package types

import (
	"fmt"
	"go/types"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that types.Signature_starGenType is
// mocked completely
var _ Signature_starGenType = (*MoqSignature_starGenType_mock)(nil)

// Signature_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Signature_starGenType interface {
	Recv() *types.Var
	TypeParams() *types.TypeParamList
	RecvTypeParams() *types.TypeParamList
	Params() *types.Tuple
	Results() *types.Tuple
	Variadic() bool
	Underlying() types.Type
	String() string
}

// MoqSignature_starGenType holds the state of a moq of the
// Signature_starGenType type
type MoqSignature_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqSignature_starGenType_mock

	ResultsByParams_Recv           []MoqSignature_starGenType_Recv_resultsByParams
	ResultsByParams_TypeParams     []MoqSignature_starGenType_TypeParams_resultsByParams
	ResultsByParams_RecvTypeParams []MoqSignature_starGenType_RecvTypeParams_resultsByParams
	ResultsByParams_Params         []MoqSignature_starGenType_Params_resultsByParams
	ResultsByParams_Results        []MoqSignature_starGenType_Results_resultsByParams
	ResultsByParams_Variadic       []MoqSignature_starGenType_Variadic_resultsByParams
	ResultsByParams_Underlying     []MoqSignature_starGenType_Underlying_resultsByParams
	ResultsByParams_String         []MoqSignature_starGenType_String_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Recv           struct{}
			TypeParams     struct{}
			RecvTypeParams struct{}
			Params         struct{}
			Results        struct{}
			Variadic       struct{}
			Underlying     struct{}
			String         struct{}
		}
	}
}

// MoqSignature_starGenType_mock isolates the mock interface of the
// Signature_starGenType type
type MoqSignature_starGenType_mock struct {
	Moq *MoqSignature_starGenType
}

// MoqSignature_starGenType_recorder isolates the recorder interface of the
// Signature_starGenType type
type MoqSignature_starGenType_recorder struct {
	Moq *MoqSignature_starGenType
}

// MoqSignature_starGenType_Recv_params holds the params of the
// Signature_starGenType type
type MoqSignature_starGenType_Recv_params struct{}

// MoqSignature_starGenType_Recv_paramsKey holds the map key params of the
// Signature_starGenType type
type MoqSignature_starGenType_Recv_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSignature_starGenType_Recv_resultsByParams contains the results for a
// given set of parameters for the Signature_starGenType type
type MoqSignature_starGenType_Recv_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSignature_starGenType_Recv_paramsKey]*MoqSignature_starGenType_Recv_results
}

// MoqSignature_starGenType_Recv_doFn defines the type of function needed when
// calling AndDo for the Signature_starGenType type
type MoqSignature_starGenType_Recv_doFn func()

// MoqSignature_starGenType_Recv_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Signature_starGenType type
type MoqSignature_starGenType_Recv_doReturnFn func() *types.Var

// MoqSignature_starGenType_Recv_results holds the results of the
// Signature_starGenType type
type MoqSignature_starGenType_Recv_results struct {
	Params  MoqSignature_starGenType_Recv_params
	Results []struct {
		Values *struct {
			Result1 *types.Var
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_Recv_doFn
		DoReturnFn MoqSignature_starGenType_Recv_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSignature_starGenType_Recv_fnRecorder routes recorded function calls to
// the MoqSignature_starGenType moq
type MoqSignature_starGenType_Recv_fnRecorder struct {
	Params    MoqSignature_starGenType_Recv_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSignature_starGenType_Recv_results
	Moq       *MoqSignature_starGenType
}

// MoqSignature_starGenType_Recv_anyParams isolates the any params functions of
// the Signature_starGenType type
type MoqSignature_starGenType_Recv_anyParams struct {
	Recorder *MoqSignature_starGenType_Recv_fnRecorder
}

// MoqSignature_starGenType_TypeParams_params holds the params of the
// Signature_starGenType type
type MoqSignature_starGenType_TypeParams_params struct{}

// MoqSignature_starGenType_TypeParams_paramsKey holds the map key params of
// the Signature_starGenType type
type MoqSignature_starGenType_TypeParams_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSignature_starGenType_TypeParams_resultsByParams contains the results for
// a given set of parameters for the Signature_starGenType type
type MoqSignature_starGenType_TypeParams_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSignature_starGenType_TypeParams_paramsKey]*MoqSignature_starGenType_TypeParams_results
}

// MoqSignature_starGenType_TypeParams_doFn defines the type of function needed
// when calling AndDo for the Signature_starGenType type
type MoqSignature_starGenType_TypeParams_doFn func()

// MoqSignature_starGenType_TypeParams_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Signature_starGenType type
type MoqSignature_starGenType_TypeParams_doReturnFn func() *types.TypeParamList

// MoqSignature_starGenType_TypeParams_results holds the results of the
// Signature_starGenType type
type MoqSignature_starGenType_TypeParams_results struct {
	Params  MoqSignature_starGenType_TypeParams_params
	Results []struct {
		Values *struct {
			Result1 *types.TypeParamList
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_TypeParams_doFn
		DoReturnFn MoqSignature_starGenType_TypeParams_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSignature_starGenType_TypeParams_fnRecorder routes recorded function
// calls to the MoqSignature_starGenType moq
type MoqSignature_starGenType_TypeParams_fnRecorder struct {
	Params    MoqSignature_starGenType_TypeParams_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSignature_starGenType_TypeParams_results
	Moq       *MoqSignature_starGenType
}

// MoqSignature_starGenType_TypeParams_anyParams isolates the any params
// functions of the Signature_starGenType type
type MoqSignature_starGenType_TypeParams_anyParams struct {
	Recorder *MoqSignature_starGenType_TypeParams_fnRecorder
}

// MoqSignature_starGenType_RecvTypeParams_params holds the params of the
// Signature_starGenType type
type MoqSignature_starGenType_RecvTypeParams_params struct{}

// MoqSignature_starGenType_RecvTypeParams_paramsKey holds the map key params
// of the Signature_starGenType type
type MoqSignature_starGenType_RecvTypeParams_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSignature_starGenType_RecvTypeParams_resultsByParams contains the results
// for a given set of parameters for the Signature_starGenType type
type MoqSignature_starGenType_RecvTypeParams_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSignature_starGenType_RecvTypeParams_paramsKey]*MoqSignature_starGenType_RecvTypeParams_results
}

// MoqSignature_starGenType_RecvTypeParams_doFn defines the type of function
// needed when calling AndDo for the Signature_starGenType type
type MoqSignature_starGenType_RecvTypeParams_doFn func()

// MoqSignature_starGenType_RecvTypeParams_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Signature_starGenType
// type
type MoqSignature_starGenType_RecvTypeParams_doReturnFn func() *types.TypeParamList

// MoqSignature_starGenType_RecvTypeParams_results holds the results of the
// Signature_starGenType type
type MoqSignature_starGenType_RecvTypeParams_results struct {
	Params  MoqSignature_starGenType_RecvTypeParams_params
	Results []struct {
		Values *struct {
			Result1 *types.TypeParamList
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_RecvTypeParams_doFn
		DoReturnFn MoqSignature_starGenType_RecvTypeParams_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSignature_starGenType_RecvTypeParams_fnRecorder routes recorded function
// calls to the MoqSignature_starGenType moq
type MoqSignature_starGenType_RecvTypeParams_fnRecorder struct {
	Params    MoqSignature_starGenType_RecvTypeParams_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSignature_starGenType_RecvTypeParams_results
	Moq       *MoqSignature_starGenType
}

// MoqSignature_starGenType_RecvTypeParams_anyParams isolates the any params
// functions of the Signature_starGenType type
type MoqSignature_starGenType_RecvTypeParams_anyParams struct {
	Recorder *MoqSignature_starGenType_RecvTypeParams_fnRecorder
}

// MoqSignature_starGenType_Params_params holds the params of the
// Signature_starGenType type
type MoqSignature_starGenType_Params_params struct{}

// MoqSignature_starGenType_Params_paramsKey holds the map key params of the
// Signature_starGenType type
type MoqSignature_starGenType_Params_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSignature_starGenType_Params_resultsByParams contains the results for a
// given set of parameters for the Signature_starGenType type
type MoqSignature_starGenType_Params_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSignature_starGenType_Params_paramsKey]*MoqSignature_starGenType_Params_results
}

// MoqSignature_starGenType_Params_doFn defines the type of function needed
// when calling AndDo for the Signature_starGenType type
type MoqSignature_starGenType_Params_doFn func()

// MoqSignature_starGenType_Params_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Signature_starGenType type
type MoqSignature_starGenType_Params_doReturnFn func() *types.Tuple

// MoqSignature_starGenType_Params_results holds the results of the
// Signature_starGenType type
type MoqSignature_starGenType_Params_results struct {
	Params  MoqSignature_starGenType_Params_params
	Results []struct {
		Values *struct {
			Result1 *types.Tuple
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_Params_doFn
		DoReturnFn MoqSignature_starGenType_Params_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSignature_starGenType_Params_fnRecorder routes recorded function calls to
// the MoqSignature_starGenType moq
type MoqSignature_starGenType_Params_fnRecorder struct {
	Params    MoqSignature_starGenType_Params_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSignature_starGenType_Params_results
	Moq       *MoqSignature_starGenType
}

// MoqSignature_starGenType_Params_anyParams isolates the any params functions
// of the Signature_starGenType type
type MoqSignature_starGenType_Params_anyParams struct {
	Recorder *MoqSignature_starGenType_Params_fnRecorder
}

// MoqSignature_starGenType_Results_params holds the params of the
// Signature_starGenType type
type MoqSignature_starGenType_Results_params struct{}

// MoqSignature_starGenType_Results_paramsKey holds the map key params of the
// Signature_starGenType type
type MoqSignature_starGenType_Results_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSignature_starGenType_Results_resultsByParams contains the results for a
// given set of parameters for the Signature_starGenType type
type MoqSignature_starGenType_Results_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSignature_starGenType_Results_paramsKey]*MoqSignature_starGenType_Results_results
}

// MoqSignature_starGenType_Results_doFn defines the type of function needed
// when calling AndDo for the Signature_starGenType type
type MoqSignature_starGenType_Results_doFn func()

// MoqSignature_starGenType_Results_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Signature_starGenType type
type MoqSignature_starGenType_Results_doReturnFn func() *types.Tuple

// MoqSignature_starGenType_Results_results holds the results of the
// Signature_starGenType type
type MoqSignature_starGenType_Results_results struct {
	Params  MoqSignature_starGenType_Results_params
	Results []struct {
		Values *struct {
			Result1 *types.Tuple
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_Results_doFn
		DoReturnFn MoqSignature_starGenType_Results_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSignature_starGenType_Results_fnRecorder routes recorded function calls
// to the MoqSignature_starGenType moq
type MoqSignature_starGenType_Results_fnRecorder struct {
	Params    MoqSignature_starGenType_Results_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSignature_starGenType_Results_results
	Moq       *MoqSignature_starGenType
}

// MoqSignature_starGenType_Results_anyParams isolates the any params functions
// of the Signature_starGenType type
type MoqSignature_starGenType_Results_anyParams struct {
	Recorder *MoqSignature_starGenType_Results_fnRecorder
}

// MoqSignature_starGenType_Variadic_params holds the params of the
// Signature_starGenType type
type MoqSignature_starGenType_Variadic_params struct{}

// MoqSignature_starGenType_Variadic_paramsKey holds the map key params of the
// Signature_starGenType type
type MoqSignature_starGenType_Variadic_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSignature_starGenType_Variadic_resultsByParams contains the results for a
// given set of parameters for the Signature_starGenType type
type MoqSignature_starGenType_Variadic_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSignature_starGenType_Variadic_paramsKey]*MoqSignature_starGenType_Variadic_results
}

// MoqSignature_starGenType_Variadic_doFn defines the type of function needed
// when calling AndDo for the Signature_starGenType type
type MoqSignature_starGenType_Variadic_doFn func()

// MoqSignature_starGenType_Variadic_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Signature_starGenType type
type MoqSignature_starGenType_Variadic_doReturnFn func() bool

// MoqSignature_starGenType_Variadic_results holds the results of the
// Signature_starGenType type
type MoqSignature_starGenType_Variadic_results struct {
	Params  MoqSignature_starGenType_Variadic_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_Variadic_doFn
		DoReturnFn MoqSignature_starGenType_Variadic_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSignature_starGenType_Variadic_fnRecorder routes recorded function calls
// to the MoqSignature_starGenType moq
type MoqSignature_starGenType_Variadic_fnRecorder struct {
	Params    MoqSignature_starGenType_Variadic_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSignature_starGenType_Variadic_results
	Moq       *MoqSignature_starGenType
}

// MoqSignature_starGenType_Variadic_anyParams isolates the any params
// functions of the Signature_starGenType type
type MoqSignature_starGenType_Variadic_anyParams struct {
	Recorder *MoqSignature_starGenType_Variadic_fnRecorder
}

// MoqSignature_starGenType_Underlying_params holds the params of the
// Signature_starGenType type
type MoqSignature_starGenType_Underlying_params struct{}

// MoqSignature_starGenType_Underlying_paramsKey holds the map key params of
// the Signature_starGenType type
type MoqSignature_starGenType_Underlying_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSignature_starGenType_Underlying_resultsByParams contains the results for
// a given set of parameters for the Signature_starGenType type
type MoqSignature_starGenType_Underlying_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSignature_starGenType_Underlying_paramsKey]*MoqSignature_starGenType_Underlying_results
}

// MoqSignature_starGenType_Underlying_doFn defines the type of function needed
// when calling AndDo for the Signature_starGenType type
type MoqSignature_starGenType_Underlying_doFn func()

// MoqSignature_starGenType_Underlying_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Signature_starGenType type
type MoqSignature_starGenType_Underlying_doReturnFn func() types.Type

// MoqSignature_starGenType_Underlying_results holds the results of the
// Signature_starGenType type
type MoqSignature_starGenType_Underlying_results struct {
	Params  MoqSignature_starGenType_Underlying_params
	Results []struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_Underlying_doFn
		DoReturnFn MoqSignature_starGenType_Underlying_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSignature_starGenType_Underlying_fnRecorder routes recorded function
// calls to the MoqSignature_starGenType moq
type MoqSignature_starGenType_Underlying_fnRecorder struct {
	Params    MoqSignature_starGenType_Underlying_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSignature_starGenType_Underlying_results
	Moq       *MoqSignature_starGenType
}

// MoqSignature_starGenType_Underlying_anyParams isolates the any params
// functions of the Signature_starGenType type
type MoqSignature_starGenType_Underlying_anyParams struct {
	Recorder *MoqSignature_starGenType_Underlying_fnRecorder
}

// MoqSignature_starGenType_String_params holds the params of the
// Signature_starGenType type
type MoqSignature_starGenType_String_params struct{}

// MoqSignature_starGenType_String_paramsKey holds the map key params of the
// Signature_starGenType type
type MoqSignature_starGenType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSignature_starGenType_String_resultsByParams contains the results for a
// given set of parameters for the Signature_starGenType type
type MoqSignature_starGenType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSignature_starGenType_String_paramsKey]*MoqSignature_starGenType_String_results
}

// MoqSignature_starGenType_String_doFn defines the type of function needed
// when calling AndDo for the Signature_starGenType type
type MoqSignature_starGenType_String_doFn func()

// MoqSignature_starGenType_String_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Signature_starGenType type
type MoqSignature_starGenType_String_doReturnFn func() string

// MoqSignature_starGenType_String_results holds the results of the
// Signature_starGenType type
type MoqSignature_starGenType_String_results struct {
	Params  MoqSignature_starGenType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_String_doFn
		DoReturnFn MoqSignature_starGenType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSignature_starGenType_String_fnRecorder routes recorded function calls to
// the MoqSignature_starGenType moq
type MoqSignature_starGenType_String_fnRecorder struct {
	Params    MoqSignature_starGenType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSignature_starGenType_String_results
	Moq       *MoqSignature_starGenType
}

// MoqSignature_starGenType_String_anyParams isolates the any params functions
// of the Signature_starGenType type
type MoqSignature_starGenType_String_anyParams struct {
	Recorder *MoqSignature_starGenType_String_fnRecorder
}

// NewMoqSignature_starGenType creates a new moq of the Signature_starGenType
// type
func NewMoqSignature_starGenType(scene *moq.Scene, config *moq.Config) *MoqSignature_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqSignature_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqSignature_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Recv           struct{}
				TypeParams     struct{}
				RecvTypeParams struct{}
				Params         struct{}
				Results        struct{}
				Variadic       struct{}
				Underlying     struct{}
				String         struct{}
			}
		}{ParameterIndexing: struct {
			Recv           struct{}
			TypeParams     struct{}
			RecvTypeParams struct{}
			Params         struct{}
			Results        struct{}
			Variadic       struct{}
			Underlying     struct{}
			String         struct{}
		}{
			Recv:           struct{}{},
			TypeParams:     struct{}{},
			RecvTypeParams: struct{}{},
			Params:         struct{}{},
			Results:        struct{}{},
			Variadic:       struct{}{},
			Underlying:     struct{}{},
			String:         struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Signature_starGenType type
func (m *MoqSignature_starGenType) Mock() *MoqSignature_starGenType_mock { return m.Moq }

func (m *MoqSignature_starGenType_mock) Recv() (result1 *types.Var) {
	m.Moq.Scene.T.Helper()
	params := MoqSignature_starGenType_Recv_params{}
	var results *MoqSignature_starGenType_Recv_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Recv {
		paramsKey := m.Moq.ParamsKey_Recv(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Recv(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Recv(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Recv(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqSignature_starGenType_mock) TypeParams() (result1 *types.TypeParamList) {
	m.Moq.Scene.T.Helper()
	params := MoqSignature_starGenType_TypeParams_params{}
	var results *MoqSignature_starGenType_TypeParams_results
	for _, resultsByParams := range m.Moq.ResultsByParams_TypeParams {
		paramsKey := m.Moq.ParamsKey_TypeParams(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_TypeParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_TypeParams(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_TypeParams(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqSignature_starGenType_mock) RecvTypeParams() (result1 *types.TypeParamList) {
	m.Moq.Scene.T.Helper()
	params := MoqSignature_starGenType_RecvTypeParams_params{}
	var results *MoqSignature_starGenType_RecvTypeParams_results
	for _, resultsByParams := range m.Moq.ResultsByParams_RecvTypeParams {
		paramsKey := m.Moq.ParamsKey_RecvTypeParams(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_RecvTypeParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_RecvTypeParams(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_RecvTypeParams(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqSignature_starGenType_mock) Params() (result1 *types.Tuple) {
	m.Moq.Scene.T.Helper()
	params := MoqSignature_starGenType_Params_params{}
	var results *MoqSignature_starGenType_Params_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Params {
		paramsKey := m.Moq.ParamsKey_Params(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Params(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Params(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Params(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqSignature_starGenType_mock) Results() (result1 *types.Tuple) {
	m.Moq.Scene.T.Helper()
	params := MoqSignature_starGenType_Results_params{}
	var results *MoqSignature_starGenType_Results_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Results {
		paramsKey := m.Moq.ParamsKey_Results(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Results(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Results(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Results(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqSignature_starGenType_mock) Variadic() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqSignature_starGenType_Variadic_params{}
	var results *MoqSignature_starGenType_Variadic_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Variadic {
		paramsKey := m.Moq.ParamsKey_Variadic(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Variadic(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Variadic(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Variadic(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqSignature_starGenType_mock) Underlying() (result1 types.Type) {
	m.Moq.Scene.T.Helper()
	params := MoqSignature_starGenType_Underlying_params{}
	var results *MoqSignature_starGenType_Underlying_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Underlying {
		paramsKey := m.Moq.ParamsKey_Underlying(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Underlying(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Underlying(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Underlying(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqSignature_starGenType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqSignature_starGenType_String_params{}
	var results *MoqSignature_starGenType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Signature_starGenType type
func (m *MoqSignature_starGenType) OnCall() *MoqSignature_starGenType_recorder {
	return &MoqSignature_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqSignature_starGenType_recorder) Recv() *MoqSignature_starGenType_Recv_fnRecorder {
	return &MoqSignature_starGenType_Recv_fnRecorder{
		Params:   MoqSignature_starGenType_Recv_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSignature_starGenType_Recv_fnRecorder) Any() *MoqSignature_starGenType_Recv_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Recv(r.Params))
		return nil
	}
	return &MoqSignature_starGenType_Recv_anyParams{Recorder: r}
}

func (r *MoqSignature_starGenType_Recv_fnRecorder) Seq() *MoqSignature_starGenType_Recv_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Recv(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSignature_starGenType_Recv_fnRecorder) NoSeq() *MoqSignature_starGenType_Recv_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Recv(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSignature_starGenType_Recv_fnRecorder) ReturnResults(result1 *types.Var) *MoqSignature_starGenType_Recv_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Var
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_Recv_doFn
		DoReturnFn MoqSignature_starGenType_Recv_doReturnFn
	}{
		Values: &struct {
			Result1 *types.Var
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSignature_starGenType_Recv_fnRecorder) AndDo(fn MoqSignature_starGenType_Recv_doFn) *MoqSignature_starGenType_Recv_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSignature_starGenType_Recv_fnRecorder) DoReturnResults(fn MoqSignature_starGenType_Recv_doReturnFn) *MoqSignature_starGenType_Recv_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Var
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_Recv_doFn
		DoReturnFn MoqSignature_starGenType_Recv_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSignature_starGenType_Recv_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSignature_starGenType_Recv_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Recv {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSignature_starGenType_Recv_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSignature_starGenType_Recv_paramsKey]*MoqSignature_starGenType_Recv_results{},
		}
		r.Moq.ResultsByParams_Recv = append(r.Moq.ResultsByParams_Recv, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Recv) {
			copy(r.Moq.ResultsByParams_Recv[insertAt+1:], r.Moq.ResultsByParams_Recv[insertAt:0])
			r.Moq.ResultsByParams_Recv[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Recv(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSignature_starGenType_Recv_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSignature_starGenType_Recv_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSignature_starGenType_Recv_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *types.Var
				}
				Sequence   uint32
				DoFn       MoqSignature_starGenType_Recv_doFn
				DoReturnFn MoqSignature_starGenType_Recv_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSignature_starGenType) PrettyParams_Recv(params MoqSignature_starGenType_Recv_params) string {
	return fmt.Sprintf("Recv()")
}

func (m *MoqSignature_starGenType) ParamsKey_Recv(params MoqSignature_starGenType_Recv_params, anyParams uint64) MoqSignature_starGenType_Recv_paramsKey {
	m.Scene.T.Helper()
	return MoqSignature_starGenType_Recv_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqSignature_starGenType_recorder) TypeParams() *MoqSignature_starGenType_TypeParams_fnRecorder {
	return &MoqSignature_starGenType_TypeParams_fnRecorder{
		Params:   MoqSignature_starGenType_TypeParams_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSignature_starGenType_TypeParams_fnRecorder) Any() *MoqSignature_starGenType_TypeParams_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_TypeParams(r.Params))
		return nil
	}
	return &MoqSignature_starGenType_TypeParams_anyParams{Recorder: r}
}

func (r *MoqSignature_starGenType_TypeParams_fnRecorder) Seq() *MoqSignature_starGenType_TypeParams_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_TypeParams(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSignature_starGenType_TypeParams_fnRecorder) NoSeq() *MoqSignature_starGenType_TypeParams_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_TypeParams(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSignature_starGenType_TypeParams_fnRecorder) ReturnResults(result1 *types.TypeParamList) *MoqSignature_starGenType_TypeParams_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.TypeParamList
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_TypeParams_doFn
		DoReturnFn MoqSignature_starGenType_TypeParams_doReturnFn
	}{
		Values: &struct {
			Result1 *types.TypeParamList
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSignature_starGenType_TypeParams_fnRecorder) AndDo(fn MoqSignature_starGenType_TypeParams_doFn) *MoqSignature_starGenType_TypeParams_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSignature_starGenType_TypeParams_fnRecorder) DoReturnResults(fn MoqSignature_starGenType_TypeParams_doReturnFn) *MoqSignature_starGenType_TypeParams_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.TypeParamList
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_TypeParams_doFn
		DoReturnFn MoqSignature_starGenType_TypeParams_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSignature_starGenType_TypeParams_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSignature_starGenType_TypeParams_resultsByParams
	for n, res := range r.Moq.ResultsByParams_TypeParams {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSignature_starGenType_TypeParams_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSignature_starGenType_TypeParams_paramsKey]*MoqSignature_starGenType_TypeParams_results{},
		}
		r.Moq.ResultsByParams_TypeParams = append(r.Moq.ResultsByParams_TypeParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_TypeParams) {
			copy(r.Moq.ResultsByParams_TypeParams[insertAt+1:], r.Moq.ResultsByParams_TypeParams[insertAt:0])
			r.Moq.ResultsByParams_TypeParams[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_TypeParams(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSignature_starGenType_TypeParams_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSignature_starGenType_TypeParams_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSignature_starGenType_TypeParams_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *types.TypeParamList
				}
				Sequence   uint32
				DoFn       MoqSignature_starGenType_TypeParams_doFn
				DoReturnFn MoqSignature_starGenType_TypeParams_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSignature_starGenType) PrettyParams_TypeParams(params MoqSignature_starGenType_TypeParams_params) string {
	return fmt.Sprintf("TypeParams()")
}

func (m *MoqSignature_starGenType) ParamsKey_TypeParams(params MoqSignature_starGenType_TypeParams_params, anyParams uint64) MoqSignature_starGenType_TypeParams_paramsKey {
	m.Scene.T.Helper()
	return MoqSignature_starGenType_TypeParams_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqSignature_starGenType_recorder) RecvTypeParams() *MoqSignature_starGenType_RecvTypeParams_fnRecorder {
	return &MoqSignature_starGenType_RecvTypeParams_fnRecorder{
		Params:   MoqSignature_starGenType_RecvTypeParams_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSignature_starGenType_RecvTypeParams_fnRecorder) Any() *MoqSignature_starGenType_RecvTypeParams_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RecvTypeParams(r.Params))
		return nil
	}
	return &MoqSignature_starGenType_RecvTypeParams_anyParams{Recorder: r}
}

func (r *MoqSignature_starGenType_RecvTypeParams_fnRecorder) Seq() *MoqSignature_starGenType_RecvTypeParams_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RecvTypeParams(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSignature_starGenType_RecvTypeParams_fnRecorder) NoSeq() *MoqSignature_starGenType_RecvTypeParams_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RecvTypeParams(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSignature_starGenType_RecvTypeParams_fnRecorder) ReturnResults(result1 *types.TypeParamList) *MoqSignature_starGenType_RecvTypeParams_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.TypeParamList
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_RecvTypeParams_doFn
		DoReturnFn MoqSignature_starGenType_RecvTypeParams_doReturnFn
	}{
		Values: &struct {
			Result1 *types.TypeParamList
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSignature_starGenType_RecvTypeParams_fnRecorder) AndDo(fn MoqSignature_starGenType_RecvTypeParams_doFn) *MoqSignature_starGenType_RecvTypeParams_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSignature_starGenType_RecvTypeParams_fnRecorder) DoReturnResults(fn MoqSignature_starGenType_RecvTypeParams_doReturnFn) *MoqSignature_starGenType_RecvTypeParams_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.TypeParamList
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_RecvTypeParams_doFn
		DoReturnFn MoqSignature_starGenType_RecvTypeParams_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSignature_starGenType_RecvTypeParams_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSignature_starGenType_RecvTypeParams_resultsByParams
	for n, res := range r.Moq.ResultsByParams_RecvTypeParams {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSignature_starGenType_RecvTypeParams_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSignature_starGenType_RecvTypeParams_paramsKey]*MoqSignature_starGenType_RecvTypeParams_results{},
		}
		r.Moq.ResultsByParams_RecvTypeParams = append(r.Moq.ResultsByParams_RecvTypeParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_RecvTypeParams) {
			copy(r.Moq.ResultsByParams_RecvTypeParams[insertAt+1:], r.Moq.ResultsByParams_RecvTypeParams[insertAt:0])
			r.Moq.ResultsByParams_RecvTypeParams[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_RecvTypeParams(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSignature_starGenType_RecvTypeParams_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSignature_starGenType_RecvTypeParams_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSignature_starGenType_RecvTypeParams_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *types.TypeParamList
				}
				Sequence   uint32
				DoFn       MoqSignature_starGenType_RecvTypeParams_doFn
				DoReturnFn MoqSignature_starGenType_RecvTypeParams_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSignature_starGenType) PrettyParams_RecvTypeParams(params MoqSignature_starGenType_RecvTypeParams_params) string {
	return fmt.Sprintf("RecvTypeParams()")
}

func (m *MoqSignature_starGenType) ParamsKey_RecvTypeParams(params MoqSignature_starGenType_RecvTypeParams_params, anyParams uint64) MoqSignature_starGenType_RecvTypeParams_paramsKey {
	m.Scene.T.Helper()
	return MoqSignature_starGenType_RecvTypeParams_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqSignature_starGenType_recorder) Params() *MoqSignature_starGenType_Params_fnRecorder {
	return &MoqSignature_starGenType_Params_fnRecorder{
		Params:   MoqSignature_starGenType_Params_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSignature_starGenType_Params_fnRecorder) Any() *MoqSignature_starGenType_Params_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Params(r.Params))
		return nil
	}
	return &MoqSignature_starGenType_Params_anyParams{Recorder: r}
}

func (r *MoqSignature_starGenType_Params_fnRecorder) Seq() *MoqSignature_starGenType_Params_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Params(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSignature_starGenType_Params_fnRecorder) NoSeq() *MoqSignature_starGenType_Params_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Params(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSignature_starGenType_Params_fnRecorder) ReturnResults(result1 *types.Tuple) *MoqSignature_starGenType_Params_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Tuple
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_Params_doFn
		DoReturnFn MoqSignature_starGenType_Params_doReturnFn
	}{
		Values: &struct {
			Result1 *types.Tuple
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSignature_starGenType_Params_fnRecorder) AndDo(fn MoqSignature_starGenType_Params_doFn) *MoqSignature_starGenType_Params_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSignature_starGenType_Params_fnRecorder) DoReturnResults(fn MoqSignature_starGenType_Params_doReturnFn) *MoqSignature_starGenType_Params_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Tuple
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_Params_doFn
		DoReturnFn MoqSignature_starGenType_Params_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSignature_starGenType_Params_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSignature_starGenType_Params_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Params {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSignature_starGenType_Params_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSignature_starGenType_Params_paramsKey]*MoqSignature_starGenType_Params_results{},
		}
		r.Moq.ResultsByParams_Params = append(r.Moq.ResultsByParams_Params, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Params) {
			copy(r.Moq.ResultsByParams_Params[insertAt+1:], r.Moq.ResultsByParams_Params[insertAt:0])
			r.Moq.ResultsByParams_Params[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Params(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSignature_starGenType_Params_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSignature_starGenType_Params_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSignature_starGenType_Params_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *types.Tuple
				}
				Sequence   uint32
				DoFn       MoqSignature_starGenType_Params_doFn
				DoReturnFn MoqSignature_starGenType_Params_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSignature_starGenType) PrettyParams_Params(params MoqSignature_starGenType_Params_params) string {
	return fmt.Sprintf("Params()")
}

func (m *MoqSignature_starGenType) ParamsKey_Params(params MoqSignature_starGenType_Params_params, anyParams uint64) MoqSignature_starGenType_Params_paramsKey {
	m.Scene.T.Helper()
	return MoqSignature_starGenType_Params_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqSignature_starGenType_recorder) Results() *MoqSignature_starGenType_Results_fnRecorder {
	return &MoqSignature_starGenType_Results_fnRecorder{
		Params:   MoqSignature_starGenType_Results_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSignature_starGenType_Results_fnRecorder) Any() *MoqSignature_starGenType_Results_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Results(r.Params))
		return nil
	}
	return &MoqSignature_starGenType_Results_anyParams{Recorder: r}
}

func (r *MoqSignature_starGenType_Results_fnRecorder) Seq() *MoqSignature_starGenType_Results_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Results(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSignature_starGenType_Results_fnRecorder) NoSeq() *MoqSignature_starGenType_Results_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Results(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSignature_starGenType_Results_fnRecorder) ReturnResults(result1 *types.Tuple) *MoqSignature_starGenType_Results_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Tuple
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_Results_doFn
		DoReturnFn MoqSignature_starGenType_Results_doReturnFn
	}{
		Values: &struct {
			Result1 *types.Tuple
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSignature_starGenType_Results_fnRecorder) AndDo(fn MoqSignature_starGenType_Results_doFn) *MoqSignature_starGenType_Results_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSignature_starGenType_Results_fnRecorder) DoReturnResults(fn MoqSignature_starGenType_Results_doReturnFn) *MoqSignature_starGenType_Results_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Tuple
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_Results_doFn
		DoReturnFn MoqSignature_starGenType_Results_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSignature_starGenType_Results_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSignature_starGenType_Results_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Results {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSignature_starGenType_Results_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSignature_starGenType_Results_paramsKey]*MoqSignature_starGenType_Results_results{},
		}
		r.Moq.ResultsByParams_Results = append(r.Moq.ResultsByParams_Results, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Results) {
			copy(r.Moq.ResultsByParams_Results[insertAt+1:], r.Moq.ResultsByParams_Results[insertAt:0])
			r.Moq.ResultsByParams_Results[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Results(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSignature_starGenType_Results_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSignature_starGenType_Results_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSignature_starGenType_Results_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *types.Tuple
				}
				Sequence   uint32
				DoFn       MoqSignature_starGenType_Results_doFn
				DoReturnFn MoqSignature_starGenType_Results_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSignature_starGenType) PrettyParams_Results(params MoqSignature_starGenType_Results_params) string {
	return fmt.Sprintf("Results()")
}

func (m *MoqSignature_starGenType) ParamsKey_Results(params MoqSignature_starGenType_Results_params, anyParams uint64) MoqSignature_starGenType_Results_paramsKey {
	m.Scene.T.Helper()
	return MoqSignature_starGenType_Results_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqSignature_starGenType_recorder) Variadic() *MoqSignature_starGenType_Variadic_fnRecorder {
	return &MoqSignature_starGenType_Variadic_fnRecorder{
		Params:   MoqSignature_starGenType_Variadic_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSignature_starGenType_Variadic_fnRecorder) Any() *MoqSignature_starGenType_Variadic_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Variadic(r.Params))
		return nil
	}
	return &MoqSignature_starGenType_Variadic_anyParams{Recorder: r}
}

func (r *MoqSignature_starGenType_Variadic_fnRecorder) Seq() *MoqSignature_starGenType_Variadic_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Variadic(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSignature_starGenType_Variadic_fnRecorder) NoSeq() *MoqSignature_starGenType_Variadic_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Variadic(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSignature_starGenType_Variadic_fnRecorder) ReturnResults(result1 bool) *MoqSignature_starGenType_Variadic_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_Variadic_doFn
		DoReturnFn MoqSignature_starGenType_Variadic_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSignature_starGenType_Variadic_fnRecorder) AndDo(fn MoqSignature_starGenType_Variadic_doFn) *MoqSignature_starGenType_Variadic_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSignature_starGenType_Variadic_fnRecorder) DoReturnResults(fn MoqSignature_starGenType_Variadic_doReturnFn) *MoqSignature_starGenType_Variadic_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_Variadic_doFn
		DoReturnFn MoqSignature_starGenType_Variadic_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSignature_starGenType_Variadic_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSignature_starGenType_Variadic_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Variadic {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSignature_starGenType_Variadic_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSignature_starGenType_Variadic_paramsKey]*MoqSignature_starGenType_Variadic_results{},
		}
		r.Moq.ResultsByParams_Variadic = append(r.Moq.ResultsByParams_Variadic, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Variadic) {
			copy(r.Moq.ResultsByParams_Variadic[insertAt+1:], r.Moq.ResultsByParams_Variadic[insertAt:0])
			r.Moq.ResultsByParams_Variadic[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Variadic(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSignature_starGenType_Variadic_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSignature_starGenType_Variadic_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSignature_starGenType_Variadic_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqSignature_starGenType_Variadic_doFn
				DoReturnFn MoqSignature_starGenType_Variadic_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSignature_starGenType) PrettyParams_Variadic(params MoqSignature_starGenType_Variadic_params) string {
	return fmt.Sprintf("Variadic()")
}

func (m *MoqSignature_starGenType) ParamsKey_Variadic(params MoqSignature_starGenType_Variadic_params, anyParams uint64) MoqSignature_starGenType_Variadic_paramsKey {
	m.Scene.T.Helper()
	return MoqSignature_starGenType_Variadic_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqSignature_starGenType_recorder) Underlying() *MoqSignature_starGenType_Underlying_fnRecorder {
	return &MoqSignature_starGenType_Underlying_fnRecorder{
		Params:   MoqSignature_starGenType_Underlying_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSignature_starGenType_Underlying_fnRecorder) Any() *MoqSignature_starGenType_Underlying_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Underlying(r.Params))
		return nil
	}
	return &MoqSignature_starGenType_Underlying_anyParams{Recorder: r}
}

func (r *MoqSignature_starGenType_Underlying_fnRecorder) Seq() *MoqSignature_starGenType_Underlying_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Underlying(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSignature_starGenType_Underlying_fnRecorder) NoSeq() *MoqSignature_starGenType_Underlying_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Underlying(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSignature_starGenType_Underlying_fnRecorder) ReturnResults(result1 types.Type) *MoqSignature_starGenType_Underlying_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_Underlying_doFn
		DoReturnFn MoqSignature_starGenType_Underlying_doReturnFn
	}{
		Values: &struct {
			Result1 types.Type
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSignature_starGenType_Underlying_fnRecorder) AndDo(fn MoqSignature_starGenType_Underlying_doFn) *MoqSignature_starGenType_Underlying_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSignature_starGenType_Underlying_fnRecorder) DoReturnResults(fn MoqSignature_starGenType_Underlying_doReturnFn) *MoqSignature_starGenType_Underlying_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_Underlying_doFn
		DoReturnFn MoqSignature_starGenType_Underlying_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSignature_starGenType_Underlying_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSignature_starGenType_Underlying_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Underlying {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSignature_starGenType_Underlying_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSignature_starGenType_Underlying_paramsKey]*MoqSignature_starGenType_Underlying_results{},
		}
		r.Moq.ResultsByParams_Underlying = append(r.Moq.ResultsByParams_Underlying, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Underlying) {
			copy(r.Moq.ResultsByParams_Underlying[insertAt+1:], r.Moq.ResultsByParams_Underlying[insertAt:0])
			r.Moq.ResultsByParams_Underlying[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Underlying(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSignature_starGenType_Underlying_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSignature_starGenType_Underlying_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSignature_starGenType_Underlying_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 types.Type
				}
				Sequence   uint32
				DoFn       MoqSignature_starGenType_Underlying_doFn
				DoReturnFn MoqSignature_starGenType_Underlying_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSignature_starGenType) PrettyParams_Underlying(params MoqSignature_starGenType_Underlying_params) string {
	return fmt.Sprintf("Underlying()")
}

func (m *MoqSignature_starGenType) ParamsKey_Underlying(params MoqSignature_starGenType_Underlying_params, anyParams uint64) MoqSignature_starGenType_Underlying_paramsKey {
	m.Scene.T.Helper()
	return MoqSignature_starGenType_Underlying_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqSignature_starGenType_recorder) String() *MoqSignature_starGenType_String_fnRecorder {
	return &MoqSignature_starGenType_String_fnRecorder{
		Params:   MoqSignature_starGenType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSignature_starGenType_String_fnRecorder) Any() *MoqSignature_starGenType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqSignature_starGenType_String_anyParams{Recorder: r}
}

func (r *MoqSignature_starGenType_String_fnRecorder) Seq() *MoqSignature_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSignature_starGenType_String_fnRecorder) NoSeq() *MoqSignature_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSignature_starGenType_String_fnRecorder) ReturnResults(result1 string) *MoqSignature_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_String_doFn
		DoReturnFn MoqSignature_starGenType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSignature_starGenType_String_fnRecorder) AndDo(fn MoqSignature_starGenType_String_doFn) *MoqSignature_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSignature_starGenType_String_fnRecorder) DoReturnResults(fn MoqSignature_starGenType_String_doReturnFn) *MoqSignature_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqSignature_starGenType_String_doFn
		DoReturnFn MoqSignature_starGenType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSignature_starGenType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSignature_starGenType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSignature_starGenType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSignature_starGenType_String_paramsKey]*MoqSignature_starGenType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSignature_starGenType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSignature_starGenType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSignature_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqSignature_starGenType_String_doFn
				DoReturnFn MoqSignature_starGenType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSignature_starGenType) PrettyParams_String(params MoqSignature_starGenType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqSignature_starGenType) ParamsKey_String(params MoqSignature_starGenType_String_params, anyParams uint64) MoqSignature_starGenType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqSignature_starGenType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqSignature_starGenType) Reset() {
	m.ResultsByParams_Recv = nil
	m.ResultsByParams_TypeParams = nil
	m.ResultsByParams_RecvTypeParams = nil
	m.ResultsByParams_Params = nil
	m.ResultsByParams_Results = nil
	m.ResultsByParams_Variadic = nil
	m.ResultsByParams_Underlying = nil
	m.ResultsByParams_String = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqSignature_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Recv {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Recv(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_TypeParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_TypeParams(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_RecvTypeParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_RecvTypeParams(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Params {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Params(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Results {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Results(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Variadic {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Variadic(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Underlying {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Underlying(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
}
