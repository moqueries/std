// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package types

import (
	"fmt"
	"go/types"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that types.ImporterFrom is mocked
// completely
var _ types.ImporterFrom = (*MoqImporterFrom_mock)(nil)

// MoqImporterFrom holds the state of a moq of the ImporterFrom type
type MoqImporterFrom struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqImporterFrom_mock

	ResultsByParams_Import     []MoqImporterFrom_Import_resultsByParams
	ResultsByParams_ImportFrom []MoqImporterFrom_ImportFrom_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Import struct {
				Path moq.ParamIndexing
			}
			ImportFrom struct {
				Path moq.ParamIndexing
				Dir  moq.ParamIndexing
				Mode moq.ParamIndexing
			}
		}
	}
	// MoqImporterFrom_mock isolates the mock interface of the ImporterFrom type
}

type MoqImporterFrom_mock struct {
	Moq *MoqImporterFrom
}

// MoqImporterFrom_recorder isolates the recorder interface of the ImporterFrom
// type
type MoqImporterFrom_recorder struct {
	Moq *MoqImporterFrom
}

// MoqImporterFrom_Import_params holds the params of the ImporterFrom type
type MoqImporterFrom_Import_params struct{ Path string }

// MoqImporterFrom_Import_paramsKey holds the map key params of the
// ImporterFrom type
type MoqImporterFrom_Import_paramsKey struct {
	Params struct{ Path string }
	Hashes struct{ Path hash.Hash }
}

// MoqImporterFrom_Import_resultsByParams contains the results for a given set
// of parameters for the ImporterFrom type
type MoqImporterFrom_Import_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqImporterFrom_Import_paramsKey]*MoqImporterFrom_Import_results
}

// MoqImporterFrom_Import_doFn defines the type of function needed when calling
// AndDo for the ImporterFrom type
type MoqImporterFrom_Import_doFn func(path string)

// MoqImporterFrom_Import_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ImporterFrom type
type MoqImporterFrom_Import_doReturnFn func(path string) (*types.Package, error)

// MoqImporterFrom_Import_results holds the results of the ImporterFrom type
type MoqImporterFrom_Import_results struct {
	Params  MoqImporterFrom_Import_params
	Results []struct {
		Values *struct {
			Result1 *types.Package
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqImporterFrom_Import_doFn
		DoReturnFn MoqImporterFrom_Import_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqImporterFrom_Import_fnRecorder routes recorded function calls to the
// MoqImporterFrom moq
type MoqImporterFrom_Import_fnRecorder struct {
	Params    MoqImporterFrom_Import_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqImporterFrom_Import_results
	Moq       *MoqImporterFrom
}

// MoqImporterFrom_Import_anyParams isolates the any params functions of the
// ImporterFrom type
type MoqImporterFrom_Import_anyParams struct {
	Recorder *MoqImporterFrom_Import_fnRecorder
}

// MoqImporterFrom_ImportFrom_params holds the params of the ImporterFrom type
type MoqImporterFrom_ImportFrom_params struct {
	Path, Dir string
	Mode      types.ImportMode
}

// MoqImporterFrom_ImportFrom_paramsKey holds the map key params of the
// ImporterFrom type
type MoqImporterFrom_ImportFrom_paramsKey struct {
	Params struct {
		Path, Dir string
		Mode      types.ImportMode
	}
	Hashes struct {
		Path, Dir hash.Hash
		Mode      hash.Hash
	}
}

// MoqImporterFrom_ImportFrom_resultsByParams contains the results for a given
// set of parameters for the ImporterFrom type
type MoqImporterFrom_ImportFrom_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqImporterFrom_ImportFrom_paramsKey]*MoqImporterFrom_ImportFrom_results
}

// MoqImporterFrom_ImportFrom_doFn defines the type of function needed when
// calling AndDo for the ImporterFrom type
type MoqImporterFrom_ImportFrom_doFn func(path, dir string, mode types.ImportMode)

// MoqImporterFrom_ImportFrom_doReturnFn defines the type of function needed
// when calling DoReturnResults for the ImporterFrom type
type MoqImporterFrom_ImportFrom_doReturnFn func(path, dir string, mode types.ImportMode) (*types.Package, error)

// MoqImporterFrom_ImportFrom_results holds the results of the ImporterFrom
// type
type MoqImporterFrom_ImportFrom_results struct {
	Params  MoqImporterFrom_ImportFrom_params
	Results []struct {
		Values *struct {
			Result1 *types.Package
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqImporterFrom_ImportFrom_doFn
		DoReturnFn MoqImporterFrom_ImportFrom_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqImporterFrom_ImportFrom_fnRecorder routes recorded function calls to the
// MoqImporterFrom moq
type MoqImporterFrom_ImportFrom_fnRecorder struct {
	Params    MoqImporterFrom_ImportFrom_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqImporterFrom_ImportFrom_results
	Moq       *MoqImporterFrom
}

// MoqImporterFrom_ImportFrom_anyParams isolates the any params functions of
// the ImporterFrom type
type MoqImporterFrom_ImportFrom_anyParams struct {
	Recorder *MoqImporterFrom_ImportFrom_fnRecorder
}

// NewMoqImporterFrom creates a new moq of the ImporterFrom type
func NewMoqImporterFrom(scene *moq.Scene, config *moq.Config) *MoqImporterFrom {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqImporterFrom{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqImporterFrom_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Import struct {
					Path moq.ParamIndexing
				}
				ImportFrom struct {
					Path moq.ParamIndexing
					Dir  moq.ParamIndexing
					Mode moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Import struct {
				Path moq.ParamIndexing
			}
			ImportFrom struct {
				Path moq.ParamIndexing
				Dir  moq.ParamIndexing
				Mode moq.ParamIndexing
			}
		}{
			Import: struct {
				Path moq.ParamIndexing
			}{
				Path: moq.ParamIndexByValue,
			},
			ImportFrom: struct {
				Path moq.ParamIndexing
				Dir  moq.ParamIndexing
				Mode moq.ParamIndexing
			}{
				Path: moq.ParamIndexByValue,
				Dir:  moq.ParamIndexByValue,
				Mode: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the ImporterFrom type
func (m *MoqImporterFrom) Mock() *MoqImporterFrom_mock { return m.Moq }

func (m *MoqImporterFrom_mock) Import(path string) (result1 *types.Package, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqImporterFrom_Import_params{
		Path: path,
	}
	var results *MoqImporterFrom_Import_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Import {
		paramsKey := m.Moq.ParamsKey_Import(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Import(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Import(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Import(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(path)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(path)
	}
	return
}

func (m *MoqImporterFrom_mock) ImportFrom(path, dir string, mode types.ImportMode) (result1 *types.Package, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqImporterFrom_ImportFrom_params{
		Path: path,
		Dir:  dir,
		Mode: mode,
	}
	var results *MoqImporterFrom_ImportFrom_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ImportFrom {
		paramsKey := m.Moq.ParamsKey_ImportFrom(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ImportFrom(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ImportFrom(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ImportFrom(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(path, dir, mode)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(path, dir, mode)
	}
	return
}

// OnCall returns the recorder implementation of the ImporterFrom type
func (m *MoqImporterFrom) OnCall() *MoqImporterFrom_recorder {
	return &MoqImporterFrom_recorder{
		Moq: m,
	}
}

func (m *MoqImporterFrom_recorder) Import(path string) *MoqImporterFrom_Import_fnRecorder {
	return &MoqImporterFrom_Import_fnRecorder{
		Params: MoqImporterFrom_Import_params{
			Path: path,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqImporterFrom_Import_fnRecorder) Any() *MoqImporterFrom_Import_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Import(r.Params))
		return nil
	}
	return &MoqImporterFrom_Import_anyParams{Recorder: r}
}

func (a *MoqImporterFrom_Import_anyParams) Path() *MoqImporterFrom_Import_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqImporterFrom_Import_fnRecorder) Seq() *MoqImporterFrom_Import_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Import(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqImporterFrom_Import_fnRecorder) NoSeq() *MoqImporterFrom_Import_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Import(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqImporterFrom_Import_fnRecorder) ReturnResults(result1 *types.Package, result2 error) *MoqImporterFrom_Import_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Package
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqImporterFrom_Import_doFn
		DoReturnFn MoqImporterFrom_Import_doReturnFn
	}{
		Values: &struct {
			Result1 *types.Package
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqImporterFrom_Import_fnRecorder) AndDo(fn MoqImporterFrom_Import_doFn) *MoqImporterFrom_Import_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqImporterFrom_Import_fnRecorder) DoReturnResults(fn MoqImporterFrom_Import_doReturnFn) *MoqImporterFrom_Import_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Package
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqImporterFrom_Import_doFn
		DoReturnFn MoqImporterFrom_Import_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqImporterFrom_Import_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqImporterFrom_Import_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Import {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqImporterFrom_Import_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqImporterFrom_Import_paramsKey]*MoqImporterFrom_Import_results{},
		}
		r.Moq.ResultsByParams_Import = append(r.Moq.ResultsByParams_Import, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Import) {
			copy(r.Moq.ResultsByParams_Import[insertAt+1:], r.Moq.ResultsByParams_Import[insertAt:0])
			r.Moq.ResultsByParams_Import[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Import(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqImporterFrom_Import_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqImporterFrom_Import_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqImporterFrom_Import_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *types.Package
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqImporterFrom_Import_doFn
				DoReturnFn MoqImporterFrom_Import_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqImporterFrom) PrettyParams_Import(params MoqImporterFrom_Import_params) string {
	return fmt.Sprintf("Import(%#v)", params.Path)
}

func (m *MoqImporterFrom) ParamsKey_Import(params MoqImporterFrom_Import_params, anyParams uint64) MoqImporterFrom_Import_paramsKey {
	m.Scene.T.Helper()
	var pathUsed string
	var pathUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Import.Path == moq.ParamIndexByValue {
			pathUsed = params.Path
		} else {
			pathUsedHash = hash.DeepHash(params.Path)
		}
	}
	return MoqImporterFrom_Import_paramsKey{
		Params: struct{ Path string }{
			Path: pathUsed,
		},
		Hashes: struct{ Path hash.Hash }{
			Path: pathUsedHash,
		},
	}
}

func (m *MoqImporterFrom_recorder) ImportFrom(path, dir string, mode types.ImportMode) *MoqImporterFrom_ImportFrom_fnRecorder {
	return &MoqImporterFrom_ImportFrom_fnRecorder{
		Params: MoqImporterFrom_ImportFrom_params{
			Path: path,
			Dir:  dir,
			Mode: mode,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqImporterFrom_ImportFrom_fnRecorder) Any() *MoqImporterFrom_ImportFrom_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ImportFrom(r.Params))
		return nil
	}
	return &MoqImporterFrom_ImportFrom_anyParams{Recorder: r}
}

func (a *MoqImporterFrom_ImportFrom_anyParams) Path() *MoqImporterFrom_ImportFrom_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqImporterFrom_ImportFrom_anyParams) Dir() *MoqImporterFrom_ImportFrom_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqImporterFrom_ImportFrom_anyParams) Mode() *MoqImporterFrom_ImportFrom_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqImporterFrom_ImportFrom_fnRecorder) Seq() *MoqImporterFrom_ImportFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ImportFrom(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqImporterFrom_ImportFrom_fnRecorder) NoSeq() *MoqImporterFrom_ImportFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ImportFrom(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqImporterFrom_ImportFrom_fnRecorder) ReturnResults(result1 *types.Package, result2 error) *MoqImporterFrom_ImportFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Package
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqImporterFrom_ImportFrom_doFn
		DoReturnFn MoqImporterFrom_ImportFrom_doReturnFn
	}{
		Values: &struct {
			Result1 *types.Package
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqImporterFrom_ImportFrom_fnRecorder) AndDo(fn MoqImporterFrom_ImportFrom_doFn) *MoqImporterFrom_ImportFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqImporterFrom_ImportFrom_fnRecorder) DoReturnResults(fn MoqImporterFrom_ImportFrom_doReturnFn) *MoqImporterFrom_ImportFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Package
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqImporterFrom_ImportFrom_doFn
		DoReturnFn MoqImporterFrom_ImportFrom_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqImporterFrom_ImportFrom_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqImporterFrom_ImportFrom_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ImportFrom {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqImporterFrom_ImportFrom_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqImporterFrom_ImportFrom_paramsKey]*MoqImporterFrom_ImportFrom_results{},
		}
		r.Moq.ResultsByParams_ImportFrom = append(r.Moq.ResultsByParams_ImportFrom, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ImportFrom) {
			copy(r.Moq.ResultsByParams_ImportFrom[insertAt+1:], r.Moq.ResultsByParams_ImportFrom[insertAt:0])
			r.Moq.ResultsByParams_ImportFrom[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ImportFrom(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqImporterFrom_ImportFrom_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqImporterFrom_ImportFrom_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqImporterFrom_ImportFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *types.Package
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqImporterFrom_ImportFrom_doFn
				DoReturnFn MoqImporterFrom_ImportFrom_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqImporterFrom) PrettyParams_ImportFrom(params MoqImporterFrom_ImportFrom_params) string {
	return fmt.Sprintf("ImportFrom(%#v, %#v, %#v)", params.Path, params.Dir, params.Mode)
}

func (m *MoqImporterFrom) ParamsKey_ImportFrom(params MoqImporterFrom_ImportFrom_params, anyParams uint64) MoqImporterFrom_ImportFrom_paramsKey {
	m.Scene.T.Helper()
	var pathUsed string
	var pathUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ImportFrom.Path == moq.ParamIndexByValue {
			pathUsed = params.Path
		} else {
			pathUsedHash = hash.DeepHash(params.Path)
		}
	}
	var dirUsed string
	var dirUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.ImportFrom.Dir == moq.ParamIndexByValue {
			dirUsed = params.Dir
		} else {
			dirUsedHash = hash.DeepHash(params.Dir)
		}
	}
	var modeUsed types.ImportMode
	var modeUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.ImportFrom.Mode == moq.ParamIndexByValue {
			modeUsed = params.Mode
		} else {
			modeUsedHash = hash.DeepHash(params.Mode)
		}
	}
	return MoqImporterFrom_ImportFrom_paramsKey{
		Params: struct {
			Path, Dir string
			Mode      types.ImportMode
		}{
			Path: pathUsed,
			Dir:  dirUsed,
			Mode: modeUsed,
		},
		Hashes: struct {
			Path, Dir hash.Hash
			Mode      hash.Hash
		}{
			Path: pathUsedHash,
			Dir:  dirUsedHash,
			Mode: modeUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqImporterFrom) Reset() { m.ResultsByParams_Import = nil; m.ResultsByParams_ImportFrom = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqImporterFrom) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Import {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Import(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ImportFrom {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ImportFrom(results.Params))
			}
		}
	}
}
