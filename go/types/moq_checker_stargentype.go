// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package types

import (
	"fmt"
	"go/ast"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that types.Checker_starGenType is
// mocked completely
var _ Checker_starGenType = (*MoqChecker_starGenType_mock)(nil)

// Checker_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Checker_starGenType interface {
	Files(files []*ast.File) error
}

// MoqChecker_starGenType holds the state of a moq of the Checker_starGenType
// type
type MoqChecker_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqChecker_starGenType_mock

	ResultsByParams_Files []MoqChecker_starGenType_Files_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Files struct {
				Files moq.ParamIndexing
			}
		}
	}
	// MoqChecker_starGenType_mock isolates the mock interface of the
}

// Checker_starGenType type
type MoqChecker_starGenType_mock struct {
	Moq *MoqChecker_starGenType
}

// MoqChecker_starGenType_recorder isolates the recorder interface of the
// Checker_starGenType type
type MoqChecker_starGenType_recorder struct {
	Moq *MoqChecker_starGenType
}

// MoqChecker_starGenType_Files_params holds the params of the
// Checker_starGenType type
type MoqChecker_starGenType_Files_params struct{ Files []*ast.File }

// MoqChecker_starGenType_Files_paramsKey holds the map key params of the
// Checker_starGenType type
type MoqChecker_starGenType_Files_paramsKey struct {
	Params struct{}
	Hashes struct{ Files hash.Hash }
}

// MoqChecker_starGenType_Files_resultsByParams contains the results for a
// given set of parameters for the Checker_starGenType type
type MoqChecker_starGenType_Files_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqChecker_starGenType_Files_paramsKey]*MoqChecker_starGenType_Files_results
}

// MoqChecker_starGenType_Files_doFn defines the type of function needed when
// calling AndDo for the Checker_starGenType type
type MoqChecker_starGenType_Files_doFn func(files []*ast.File)

// MoqChecker_starGenType_Files_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Checker_starGenType type
type MoqChecker_starGenType_Files_doReturnFn func(files []*ast.File) error

// MoqChecker_starGenType_Files_results holds the results of the
// Checker_starGenType type
type MoqChecker_starGenType_Files_results struct {
	Params  MoqChecker_starGenType_Files_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqChecker_starGenType_Files_doFn
		DoReturnFn MoqChecker_starGenType_Files_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqChecker_starGenType_Files_fnRecorder routes recorded function calls to
// the MoqChecker_starGenType moq
type MoqChecker_starGenType_Files_fnRecorder struct {
	Params    MoqChecker_starGenType_Files_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqChecker_starGenType_Files_results
	Moq       *MoqChecker_starGenType
}

// MoqChecker_starGenType_Files_anyParams isolates the any params functions of
// the Checker_starGenType type
type MoqChecker_starGenType_Files_anyParams struct {
	Recorder *MoqChecker_starGenType_Files_fnRecorder
}

// NewMoqChecker_starGenType creates a new moq of the Checker_starGenType type
func NewMoqChecker_starGenType(scene *moq.Scene, config *moq.Config) *MoqChecker_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqChecker_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqChecker_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Files struct {
					Files moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Files struct {
				Files moq.ParamIndexing
			}
		}{
			Files: struct {
				Files moq.ParamIndexing
			}{
				Files: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Checker_starGenType type
func (m *MoqChecker_starGenType) Mock() *MoqChecker_starGenType_mock { return m.Moq }

func (m *MoqChecker_starGenType_mock) Files(files []*ast.File) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqChecker_starGenType_Files_params{
		Files: files,
	}
	var results *MoqChecker_starGenType_Files_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Files {
		paramsKey := m.Moq.ParamsKey_Files(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Files(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Files(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Files(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(files)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(files)
	}
	return
}

// OnCall returns the recorder implementation of the Checker_starGenType type
func (m *MoqChecker_starGenType) OnCall() *MoqChecker_starGenType_recorder {
	return &MoqChecker_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqChecker_starGenType_recorder) Files(files []*ast.File) *MoqChecker_starGenType_Files_fnRecorder {
	return &MoqChecker_starGenType_Files_fnRecorder{
		Params: MoqChecker_starGenType_Files_params{
			Files: files,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqChecker_starGenType_Files_fnRecorder) Any() *MoqChecker_starGenType_Files_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Files(r.Params))
		return nil
	}
	return &MoqChecker_starGenType_Files_anyParams{Recorder: r}
}

func (a *MoqChecker_starGenType_Files_anyParams) Files() *MoqChecker_starGenType_Files_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqChecker_starGenType_Files_fnRecorder) Seq() *MoqChecker_starGenType_Files_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Files(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqChecker_starGenType_Files_fnRecorder) NoSeq() *MoqChecker_starGenType_Files_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Files(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqChecker_starGenType_Files_fnRecorder) ReturnResults(result1 error) *MoqChecker_starGenType_Files_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqChecker_starGenType_Files_doFn
		DoReturnFn MoqChecker_starGenType_Files_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqChecker_starGenType_Files_fnRecorder) AndDo(fn MoqChecker_starGenType_Files_doFn) *MoqChecker_starGenType_Files_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqChecker_starGenType_Files_fnRecorder) DoReturnResults(fn MoqChecker_starGenType_Files_doReturnFn) *MoqChecker_starGenType_Files_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqChecker_starGenType_Files_doFn
		DoReturnFn MoqChecker_starGenType_Files_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqChecker_starGenType_Files_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqChecker_starGenType_Files_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Files {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqChecker_starGenType_Files_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqChecker_starGenType_Files_paramsKey]*MoqChecker_starGenType_Files_results{},
		}
		r.Moq.ResultsByParams_Files = append(r.Moq.ResultsByParams_Files, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Files) {
			copy(r.Moq.ResultsByParams_Files[insertAt+1:], r.Moq.ResultsByParams_Files[insertAt:0])
			r.Moq.ResultsByParams_Files[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Files(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqChecker_starGenType_Files_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqChecker_starGenType_Files_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqChecker_starGenType_Files_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqChecker_starGenType_Files_doFn
				DoReturnFn MoqChecker_starGenType_Files_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqChecker_starGenType) PrettyParams_Files(params MoqChecker_starGenType_Files_params) string {
	return fmt.Sprintf("Files(%#v)", params.Files)
}

func (m *MoqChecker_starGenType) ParamsKey_Files(params MoqChecker_starGenType_Files_params, anyParams uint64) MoqChecker_starGenType_Files_paramsKey {
	m.Scene.T.Helper()
	var filesUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Files.Files == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The files parameter of the Files function can't be indexed by value")
		}
		filesUsedHash = hash.DeepHash(params.Files)
	}
	return MoqChecker_starGenType_Files_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Files hash.Hash }{
			Files: filesUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqChecker_starGenType) Reset() { m.ResultsByParams_Files = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqChecker_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Files {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Files(results.Params))
			}
		}
	}
}
