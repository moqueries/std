// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package types

import (
	"fmt"
	"go/types"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that types.Selection_starGenType is
// mocked completely
var _ Selection_starGenType = (*MoqSelection_starGenType_mock)(nil)

// Selection_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Selection_starGenType interface {
	Kind() types.SelectionKind
	Recv() types.Type
	Obj() types.Object
	Type() types.Type
	Index() []int
	Indirect() bool
	String() string
}

// MoqSelection_starGenType holds the state of a moq of the
// Selection_starGenType type
type MoqSelection_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqSelection_starGenType_mock

	ResultsByParams_Kind     []MoqSelection_starGenType_Kind_resultsByParams
	ResultsByParams_Recv     []MoqSelection_starGenType_Recv_resultsByParams
	ResultsByParams_Obj      []MoqSelection_starGenType_Obj_resultsByParams
	ResultsByParams_Type     []MoqSelection_starGenType_Type_resultsByParams
	ResultsByParams_Index    []MoqSelection_starGenType_Index_resultsByParams
	ResultsByParams_Indirect []MoqSelection_starGenType_Indirect_resultsByParams
	ResultsByParams_String   []MoqSelection_starGenType_String_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Kind     struct{}
			Recv     struct{}
			Obj      struct{}
			Type     struct{}
			Index    struct{}
			Indirect struct{}
			String   struct{}
		}
	}
}

// MoqSelection_starGenType_mock isolates the mock interface of the
// Selection_starGenType type
type MoqSelection_starGenType_mock struct {
	Moq *MoqSelection_starGenType
}

// MoqSelection_starGenType_recorder isolates the recorder interface of the
// Selection_starGenType type
type MoqSelection_starGenType_recorder struct {
	Moq *MoqSelection_starGenType
}

// MoqSelection_starGenType_Kind_params holds the params of the
// Selection_starGenType type
type MoqSelection_starGenType_Kind_params struct{}

// MoqSelection_starGenType_Kind_paramsKey holds the map key params of the
// Selection_starGenType type
type MoqSelection_starGenType_Kind_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSelection_starGenType_Kind_resultsByParams contains the results for a
// given set of parameters for the Selection_starGenType type
type MoqSelection_starGenType_Kind_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSelection_starGenType_Kind_paramsKey]*MoqSelection_starGenType_Kind_results
}

// MoqSelection_starGenType_Kind_doFn defines the type of function needed when
// calling AndDo for the Selection_starGenType type
type MoqSelection_starGenType_Kind_doFn func()

// MoqSelection_starGenType_Kind_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Selection_starGenType type
type MoqSelection_starGenType_Kind_doReturnFn func() types.SelectionKind

// MoqSelection_starGenType_Kind_results holds the results of the
// Selection_starGenType type
type MoqSelection_starGenType_Kind_results struct {
	Params  MoqSelection_starGenType_Kind_params
	Results []struct {
		Values *struct {
			Result1 types.SelectionKind
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_Kind_doFn
		DoReturnFn MoqSelection_starGenType_Kind_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSelection_starGenType_Kind_fnRecorder routes recorded function calls to
// the MoqSelection_starGenType moq
type MoqSelection_starGenType_Kind_fnRecorder struct {
	Params    MoqSelection_starGenType_Kind_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSelection_starGenType_Kind_results
	Moq       *MoqSelection_starGenType
}

// MoqSelection_starGenType_Kind_anyParams isolates the any params functions of
// the Selection_starGenType type
type MoqSelection_starGenType_Kind_anyParams struct {
	Recorder *MoqSelection_starGenType_Kind_fnRecorder
}

// MoqSelection_starGenType_Recv_params holds the params of the
// Selection_starGenType type
type MoqSelection_starGenType_Recv_params struct{}

// MoqSelection_starGenType_Recv_paramsKey holds the map key params of the
// Selection_starGenType type
type MoqSelection_starGenType_Recv_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSelection_starGenType_Recv_resultsByParams contains the results for a
// given set of parameters for the Selection_starGenType type
type MoqSelection_starGenType_Recv_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSelection_starGenType_Recv_paramsKey]*MoqSelection_starGenType_Recv_results
}

// MoqSelection_starGenType_Recv_doFn defines the type of function needed when
// calling AndDo for the Selection_starGenType type
type MoqSelection_starGenType_Recv_doFn func()

// MoqSelection_starGenType_Recv_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Selection_starGenType type
type MoqSelection_starGenType_Recv_doReturnFn func() types.Type

// MoqSelection_starGenType_Recv_results holds the results of the
// Selection_starGenType type
type MoqSelection_starGenType_Recv_results struct {
	Params  MoqSelection_starGenType_Recv_params
	Results []struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_Recv_doFn
		DoReturnFn MoqSelection_starGenType_Recv_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSelection_starGenType_Recv_fnRecorder routes recorded function calls to
// the MoqSelection_starGenType moq
type MoqSelection_starGenType_Recv_fnRecorder struct {
	Params    MoqSelection_starGenType_Recv_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSelection_starGenType_Recv_results
	Moq       *MoqSelection_starGenType
}

// MoqSelection_starGenType_Recv_anyParams isolates the any params functions of
// the Selection_starGenType type
type MoqSelection_starGenType_Recv_anyParams struct {
	Recorder *MoqSelection_starGenType_Recv_fnRecorder
}

// MoqSelection_starGenType_Obj_params holds the params of the
// Selection_starGenType type
type MoqSelection_starGenType_Obj_params struct{}

// MoqSelection_starGenType_Obj_paramsKey holds the map key params of the
// Selection_starGenType type
type MoqSelection_starGenType_Obj_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSelection_starGenType_Obj_resultsByParams contains the results for a
// given set of parameters for the Selection_starGenType type
type MoqSelection_starGenType_Obj_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSelection_starGenType_Obj_paramsKey]*MoqSelection_starGenType_Obj_results
}

// MoqSelection_starGenType_Obj_doFn defines the type of function needed when
// calling AndDo for the Selection_starGenType type
type MoqSelection_starGenType_Obj_doFn func()

// MoqSelection_starGenType_Obj_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Selection_starGenType type
type MoqSelection_starGenType_Obj_doReturnFn func() types.Object

// MoqSelection_starGenType_Obj_results holds the results of the
// Selection_starGenType type
type MoqSelection_starGenType_Obj_results struct {
	Params  MoqSelection_starGenType_Obj_params
	Results []struct {
		Values *struct {
			Result1 types.Object
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_Obj_doFn
		DoReturnFn MoqSelection_starGenType_Obj_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSelection_starGenType_Obj_fnRecorder routes recorded function calls to
// the MoqSelection_starGenType moq
type MoqSelection_starGenType_Obj_fnRecorder struct {
	Params    MoqSelection_starGenType_Obj_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSelection_starGenType_Obj_results
	Moq       *MoqSelection_starGenType
}

// MoqSelection_starGenType_Obj_anyParams isolates the any params functions of
// the Selection_starGenType type
type MoqSelection_starGenType_Obj_anyParams struct {
	Recorder *MoqSelection_starGenType_Obj_fnRecorder
}

// MoqSelection_starGenType_Type_params holds the params of the
// Selection_starGenType type
type MoqSelection_starGenType_Type_params struct{}

// MoqSelection_starGenType_Type_paramsKey holds the map key params of the
// Selection_starGenType type
type MoqSelection_starGenType_Type_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSelection_starGenType_Type_resultsByParams contains the results for a
// given set of parameters for the Selection_starGenType type
type MoqSelection_starGenType_Type_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSelection_starGenType_Type_paramsKey]*MoqSelection_starGenType_Type_results
}

// MoqSelection_starGenType_Type_doFn defines the type of function needed when
// calling AndDo for the Selection_starGenType type
type MoqSelection_starGenType_Type_doFn func()

// MoqSelection_starGenType_Type_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Selection_starGenType type
type MoqSelection_starGenType_Type_doReturnFn func() types.Type

// MoqSelection_starGenType_Type_results holds the results of the
// Selection_starGenType type
type MoqSelection_starGenType_Type_results struct {
	Params  MoqSelection_starGenType_Type_params
	Results []struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_Type_doFn
		DoReturnFn MoqSelection_starGenType_Type_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSelection_starGenType_Type_fnRecorder routes recorded function calls to
// the MoqSelection_starGenType moq
type MoqSelection_starGenType_Type_fnRecorder struct {
	Params    MoqSelection_starGenType_Type_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSelection_starGenType_Type_results
	Moq       *MoqSelection_starGenType
}

// MoqSelection_starGenType_Type_anyParams isolates the any params functions of
// the Selection_starGenType type
type MoqSelection_starGenType_Type_anyParams struct {
	Recorder *MoqSelection_starGenType_Type_fnRecorder
}

// MoqSelection_starGenType_Index_params holds the params of the
// Selection_starGenType type
type MoqSelection_starGenType_Index_params struct{}

// MoqSelection_starGenType_Index_paramsKey holds the map key params of the
// Selection_starGenType type
type MoqSelection_starGenType_Index_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSelection_starGenType_Index_resultsByParams contains the results for a
// given set of parameters for the Selection_starGenType type
type MoqSelection_starGenType_Index_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSelection_starGenType_Index_paramsKey]*MoqSelection_starGenType_Index_results
}

// MoqSelection_starGenType_Index_doFn defines the type of function needed when
// calling AndDo for the Selection_starGenType type
type MoqSelection_starGenType_Index_doFn func()

// MoqSelection_starGenType_Index_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Selection_starGenType type
type MoqSelection_starGenType_Index_doReturnFn func() []int

// MoqSelection_starGenType_Index_results holds the results of the
// Selection_starGenType type
type MoqSelection_starGenType_Index_results struct {
	Params  MoqSelection_starGenType_Index_params
	Results []struct {
		Values *struct {
			Result1 []int
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_Index_doFn
		DoReturnFn MoqSelection_starGenType_Index_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSelection_starGenType_Index_fnRecorder routes recorded function calls to
// the MoqSelection_starGenType moq
type MoqSelection_starGenType_Index_fnRecorder struct {
	Params    MoqSelection_starGenType_Index_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSelection_starGenType_Index_results
	Moq       *MoqSelection_starGenType
}

// MoqSelection_starGenType_Index_anyParams isolates the any params functions
// of the Selection_starGenType type
type MoqSelection_starGenType_Index_anyParams struct {
	Recorder *MoqSelection_starGenType_Index_fnRecorder
}

// MoqSelection_starGenType_Indirect_params holds the params of the
// Selection_starGenType type
type MoqSelection_starGenType_Indirect_params struct{}

// MoqSelection_starGenType_Indirect_paramsKey holds the map key params of the
// Selection_starGenType type
type MoqSelection_starGenType_Indirect_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSelection_starGenType_Indirect_resultsByParams contains the results for a
// given set of parameters for the Selection_starGenType type
type MoqSelection_starGenType_Indirect_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSelection_starGenType_Indirect_paramsKey]*MoqSelection_starGenType_Indirect_results
}

// MoqSelection_starGenType_Indirect_doFn defines the type of function needed
// when calling AndDo for the Selection_starGenType type
type MoqSelection_starGenType_Indirect_doFn func()

// MoqSelection_starGenType_Indirect_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Selection_starGenType type
type MoqSelection_starGenType_Indirect_doReturnFn func() bool

// MoqSelection_starGenType_Indirect_results holds the results of the
// Selection_starGenType type
type MoqSelection_starGenType_Indirect_results struct {
	Params  MoqSelection_starGenType_Indirect_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_Indirect_doFn
		DoReturnFn MoqSelection_starGenType_Indirect_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSelection_starGenType_Indirect_fnRecorder routes recorded function calls
// to the MoqSelection_starGenType moq
type MoqSelection_starGenType_Indirect_fnRecorder struct {
	Params    MoqSelection_starGenType_Indirect_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSelection_starGenType_Indirect_results
	Moq       *MoqSelection_starGenType
}

// MoqSelection_starGenType_Indirect_anyParams isolates the any params
// functions of the Selection_starGenType type
type MoqSelection_starGenType_Indirect_anyParams struct {
	Recorder *MoqSelection_starGenType_Indirect_fnRecorder
}

// MoqSelection_starGenType_String_params holds the params of the
// Selection_starGenType type
type MoqSelection_starGenType_String_params struct{}

// MoqSelection_starGenType_String_paramsKey holds the map key params of the
// Selection_starGenType type
type MoqSelection_starGenType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSelection_starGenType_String_resultsByParams contains the results for a
// given set of parameters for the Selection_starGenType type
type MoqSelection_starGenType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSelection_starGenType_String_paramsKey]*MoqSelection_starGenType_String_results
}

// MoqSelection_starGenType_String_doFn defines the type of function needed
// when calling AndDo for the Selection_starGenType type
type MoqSelection_starGenType_String_doFn func()

// MoqSelection_starGenType_String_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Selection_starGenType type
type MoqSelection_starGenType_String_doReturnFn func() string

// MoqSelection_starGenType_String_results holds the results of the
// Selection_starGenType type
type MoqSelection_starGenType_String_results struct {
	Params  MoqSelection_starGenType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_String_doFn
		DoReturnFn MoqSelection_starGenType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSelection_starGenType_String_fnRecorder routes recorded function calls to
// the MoqSelection_starGenType moq
type MoqSelection_starGenType_String_fnRecorder struct {
	Params    MoqSelection_starGenType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSelection_starGenType_String_results
	Moq       *MoqSelection_starGenType
}

// MoqSelection_starGenType_String_anyParams isolates the any params functions
// of the Selection_starGenType type
type MoqSelection_starGenType_String_anyParams struct {
	Recorder *MoqSelection_starGenType_String_fnRecorder
}

// NewMoqSelection_starGenType creates a new moq of the Selection_starGenType
// type
func NewMoqSelection_starGenType(scene *moq.Scene, config *moq.Config) *MoqSelection_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqSelection_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqSelection_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Kind     struct{}
				Recv     struct{}
				Obj      struct{}
				Type     struct{}
				Index    struct{}
				Indirect struct{}
				String   struct{}
			}
		}{ParameterIndexing: struct {
			Kind     struct{}
			Recv     struct{}
			Obj      struct{}
			Type     struct{}
			Index    struct{}
			Indirect struct{}
			String   struct{}
		}{
			Kind:     struct{}{},
			Recv:     struct{}{},
			Obj:      struct{}{},
			Type:     struct{}{},
			Index:    struct{}{},
			Indirect: struct{}{},
			String:   struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Selection_starGenType type
func (m *MoqSelection_starGenType) Mock() *MoqSelection_starGenType_mock { return m.Moq }

func (m *MoqSelection_starGenType_mock) Kind() (result1 types.SelectionKind) {
	m.Moq.Scene.T.Helper()
	params := MoqSelection_starGenType_Kind_params{}
	var results *MoqSelection_starGenType_Kind_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Kind {
		paramsKey := m.Moq.ParamsKey_Kind(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Kind(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Kind(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Kind(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqSelection_starGenType_mock) Recv() (result1 types.Type) {
	m.Moq.Scene.T.Helper()
	params := MoqSelection_starGenType_Recv_params{}
	var results *MoqSelection_starGenType_Recv_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Recv {
		paramsKey := m.Moq.ParamsKey_Recv(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Recv(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Recv(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Recv(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqSelection_starGenType_mock) Obj() (result1 types.Object) {
	m.Moq.Scene.T.Helper()
	params := MoqSelection_starGenType_Obj_params{}
	var results *MoqSelection_starGenType_Obj_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Obj {
		paramsKey := m.Moq.ParamsKey_Obj(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Obj(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Obj(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Obj(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqSelection_starGenType_mock) Type() (result1 types.Type) {
	m.Moq.Scene.T.Helper()
	params := MoqSelection_starGenType_Type_params{}
	var results *MoqSelection_starGenType_Type_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Type {
		paramsKey := m.Moq.ParamsKey_Type(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Type(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Type(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Type(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqSelection_starGenType_mock) Index() (result1 []int) {
	m.Moq.Scene.T.Helper()
	params := MoqSelection_starGenType_Index_params{}
	var results *MoqSelection_starGenType_Index_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Index {
		paramsKey := m.Moq.ParamsKey_Index(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Index(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Index(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Index(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqSelection_starGenType_mock) Indirect() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqSelection_starGenType_Indirect_params{}
	var results *MoqSelection_starGenType_Indirect_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Indirect {
		paramsKey := m.Moq.ParamsKey_Indirect(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Indirect(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Indirect(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Indirect(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqSelection_starGenType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqSelection_starGenType_String_params{}
	var results *MoqSelection_starGenType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Selection_starGenType type
func (m *MoqSelection_starGenType) OnCall() *MoqSelection_starGenType_recorder {
	return &MoqSelection_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqSelection_starGenType_recorder) Kind() *MoqSelection_starGenType_Kind_fnRecorder {
	return &MoqSelection_starGenType_Kind_fnRecorder{
		Params:   MoqSelection_starGenType_Kind_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSelection_starGenType_Kind_fnRecorder) Any() *MoqSelection_starGenType_Kind_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Kind(r.Params))
		return nil
	}
	return &MoqSelection_starGenType_Kind_anyParams{Recorder: r}
}

func (r *MoqSelection_starGenType_Kind_fnRecorder) Seq() *MoqSelection_starGenType_Kind_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Kind(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSelection_starGenType_Kind_fnRecorder) NoSeq() *MoqSelection_starGenType_Kind_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Kind(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSelection_starGenType_Kind_fnRecorder) ReturnResults(result1 types.SelectionKind) *MoqSelection_starGenType_Kind_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.SelectionKind
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_Kind_doFn
		DoReturnFn MoqSelection_starGenType_Kind_doReturnFn
	}{
		Values: &struct {
			Result1 types.SelectionKind
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSelection_starGenType_Kind_fnRecorder) AndDo(fn MoqSelection_starGenType_Kind_doFn) *MoqSelection_starGenType_Kind_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSelection_starGenType_Kind_fnRecorder) DoReturnResults(fn MoqSelection_starGenType_Kind_doReturnFn) *MoqSelection_starGenType_Kind_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.SelectionKind
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_Kind_doFn
		DoReturnFn MoqSelection_starGenType_Kind_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSelection_starGenType_Kind_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSelection_starGenType_Kind_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Kind {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSelection_starGenType_Kind_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSelection_starGenType_Kind_paramsKey]*MoqSelection_starGenType_Kind_results{},
		}
		r.Moq.ResultsByParams_Kind = append(r.Moq.ResultsByParams_Kind, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Kind) {
			copy(r.Moq.ResultsByParams_Kind[insertAt+1:], r.Moq.ResultsByParams_Kind[insertAt:0])
			r.Moq.ResultsByParams_Kind[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Kind(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSelection_starGenType_Kind_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSelection_starGenType_Kind_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSelection_starGenType_Kind_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 types.SelectionKind
				}
				Sequence   uint32
				DoFn       MoqSelection_starGenType_Kind_doFn
				DoReturnFn MoqSelection_starGenType_Kind_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSelection_starGenType) PrettyParams_Kind(params MoqSelection_starGenType_Kind_params) string {
	return fmt.Sprintf("Kind()")
}

func (m *MoqSelection_starGenType) ParamsKey_Kind(params MoqSelection_starGenType_Kind_params, anyParams uint64) MoqSelection_starGenType_Kind_paramsKey {
	m.Scene.T.Helper()
	return MoqSelection_starGenType_Kind_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqSelection_starGenType_recorder) Recv() *MoqSelection_starGenType_Recv_fnRecorder {
	return &MoqSelection_starGenType_Recv_fnRecorder{
		Params:   MoqSelection_starGenType_Recv_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSelection_starGenType_Recv_fnRecorder) Any() *MoqSelection_starGenType_Recv_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Recv(r.Params))
		return nil
	}
	return &MoqSelection_starGenType_Recv_anyParams{Recorder: r}
}

func (r *MoqSelection_starGenType_Recv_fnRecorder) Seq() *MoqSelection_starGenType_Recv_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Recv(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSelection_starGenType_Recv_fnRecorder) NoSeq() *MoqSelection_starGenType_Recv_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Recv(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSelection_starGenType_Recv_fnRecorder) ReturnResults(result1 types.Type) *MoqSelection_starGenType_Recv_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_Recv_doFn
		DoReturnFn MoqSelection_starGenType_Recv_doReturnFn
	}{
		Values: &struct {
			Result1 types.Type
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSelection_starGenType_Recv_fnRecorder) AndDo(fn MoqSelection_starGenType_Recv_doFn) *MoqSelection_starGenType_Recv_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSelection_starGenType_Recv_fnRecorder) DoReturnResults(fn MoqSelection_starGenType_Recv_doReturnFn) *MoqSelection_starGenType_Recv_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_Recv_doFn
		DoReturnFn MoqSelection_starGenType_Recv_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSelection_starGenType_Recv_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSelection_starGenType_Recv_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Recv {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSelection_starGenType_Recv_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSelection_starGenType_Recv_paramsKey]*MoqSelection_starGenType_Recv_results{},
		}
		r.Moq.ResultsByParams_Recv = append(r.Moq.ResultsByParams_Recv, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Recv) {
			copy(r.Moq.ResultsByParams_Recv[insertAt+1:], r.Moq.ResultsByParams_Recv[insertAt:0])
			r.Moq.ResultsByParams_Recv[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Recv(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSelection_starGenType_Recv_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSelection_starGenType_Recv_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSelection_starGenType_Recv_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 types.Type
				}
				Sequence   uint32
				DoFn       MoqSelection_starGenType_Recv_doFn
				DoReturnFn MoqSelection_starGenType_Recv_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSelection_starGenType) PrettyParams_Recv(params MoqSelection_starGenType_Recv_params) string {
	return fmt.Sprintf("Recv()")
}

func (m *MoqSelection_starGenType) ParamsKey_Recv(params MoqSelection_starGenType_Recv_params, anyParams uint64) MoqSelection_starGenType_Recv_paramsKey {
	m.Scene.T.Helper()
	return MoqSelection_starGenType_Recv_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqSelection_starGenType_recorder) Obj() *MoqSelection_starGenType_Obj_fnRecorder {
	return &MoqSelection_starGenType_Obj_fnRecorder{
		Params:   MoqSelection_starGenType_Obj_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSelection_starGenType_Obj_fnRecorder) Any() *MoqSelection_starGenType_Obj_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Obj(r.Params))
		return nil
	}
	return &MoqSelection_starGenType_Obj_anyParams{Recorder: r}
}

func (r *MoqSelection_starGenType_Obj_fnRecorder) Seq() *MoqSelection_starGenType_Obj_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Obj(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSelection_starGenType_Obj_fnRecorder) NoSeq() *MoqSelection_starGenType_Obj_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Obj(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSelection_starGenType_Obj_fnRecorder) ReturnResults(result1 types.Object) *MoqSelection_starGenType_Obj_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Object
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_Obj_doFn
		DoReturnFn MoqSelection_starGenType_Obj_doReturnFn
	}{
		Values: &struct {
			Result1 types.Object
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSelection_starGenType_Obj_fnRecorder) AndDo(fn MoqSelection_starGenType_Obj_doFn) *MoqSelection_starGenType_Obj_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSelection_starGenType_Obj_fnRecorder) DoReturnResults(fn MoqSelection_starGenType_Obj_doReturnFn) *MoqSelection_starGenType_Obj_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Object
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_Obj_doFn
		DoReturnFn MoqSelection_starGenType_Obj_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSelection_starGenType_Obj_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSelection_starGenType_Obj_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Obj {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSelection_starGenType_Obj_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSelection_starGenType_Obj_paramsKey]*MoqSelection_starGenType_Obj_results{},
		}
		r.Moq.ResultsByParams_Obj = append(r.Moq.ResultsByParams_Obj, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Obj) {
			copy(r.Moq.ResultsByParams_Obj[insertAt+1:], r.Moq.ResultsByParams_Obj[insertAt:0])
			r.Moq.ResultsByParams_Obj[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Obj(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSelection_starGenType_Obj_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSelection_starGenType_Obj_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSelection_starGenType_Obj_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 types.Object
				}
				Sequence   uint32
				DoFn       MoqSelection_starGenType_Obj_doFn
				DoReturnFn MoqSelection_starGenType_Obj_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSelection_starGenType) PrettyParams_Obj(params MoqSelection_starGenType_Obj_params) string {
	return fmt.Sprintf("Obj()")
}

func (m *MoqSelection_starGenType) ParamsKey_Obj(params MoqSelection_starGenType_Obj_params, anyParams uint64) MoqSelection_starGenType_Obj_paramsKey {
	m.Scene.T.Helper()
	return MoqSelection_starGenType_Obj_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqSelection_starGenType_recorder) Type() *MoqSelection_starGenType_Type_fnRecorder {
	return &MoqSelection_starGenType_Type_fnRecorder{
		Params:   MoqSelection_starGenType_Type_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSelection_starGenType_Type_fnRecorder) Any() *MoqSelection_starGenType_Type_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Type(r.Params))
		return nil
	}
	return &MoqSelection_starGenType_Type_anyParams{Recorder: r}
}

func (r *MoqSelection_starGenType_Type_fnRecorder) Seq() *MoqSelection_starGenType_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Type(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSelection_starGenType_Type_fnRecorder) NoSeq() *MoqSelection_starGenType_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Type(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSelection_starGenType_Type_fnRecorder) ReturnResults(result1 types.Type) *MoqSelection_starGenType_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_Type_doFn
		DoReturnFn MoqSelection_starGenType_Type_doReturnFn
	}{
		Values: &struct {
			Result1 types.Type
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSelection_starGenType_Type_fnRecorder) AndDo(fn MoqSelection_starGenType_Type_doFn) *MoqSelection_starGenType_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSelection_starGenType_Type_fnRecorder) DoReturnResults(fn MoqSelection_starGenType_Type_doReturnFn) *MoqSelection_starGenType_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_Type_doFn
		DoReturnFn MoqSelection_starGenType_Type_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSelection_starGenType_Type_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSelection_starGenType_Type_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Type {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSelection_starGenType_Type_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSelection_starGenType_Type_paramsKey]*MoqSelection_starGenType_Type_results{},
		}
		r.Moq.ResultsByParams_Type = append(r.Moq.ResultsByParams_Type, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Type) {
			copy(r.Moq.ResultsByParams_Type[insertAt+1:], r.Moq.ResultsByParams_Type[insertAt:0])
			r.Moq.ResultsByParams_Type[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Type(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSelection_starGenType_Type_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSelection_starGenType_Type_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSelection_starGenType_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 types.Type
				}
				Sequence   uint32
				DoFn       MoqSelection_starGenType_Type_doFn
				DoReturnFn MoqSelection_starGenType_Type_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSelection_starGenType) PrettyParams_Type(params MoqSelection_starGenType_Type_params) string {
	return fmt.Sprintf("Type()")
}

func (m *MoqSelection_starGenType) ParamsKey_Type(params MoqSelection_starGenType_Type_params, anyParams uint64) MoqSelection_starGenType_Type_paramsKey {
	m.Scene.T.Helper()
	return MoqSelection_starGenType_Type_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqSelection_starGenType_recorder) Index() *MoqSelection_starGenType_Index_fnRecorder {
	return &MoqSelection_starGenType_Index_fnRecorder{
		Params:   MoqSelection_starGenType_Index_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSelection_starGenType_Index_fnRecorder) Any() *MoqSelection_starGenType_Index_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Index(r.Params))
		return nil
	}
	return &MoqSelection_starGenType_Index_anyParams{Recorder: r}
}

func (r *MoqSelection_starGenType_Index_fnRecorder) Seq() *MoqSelection_starGenType_Index_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Index(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSelection_starGenType_Index_fnRecorder) NoSeq() *MoqSelection_starGenType_Index_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Index(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSelection_starGenType_Index_fnRecorder) ReturnResults(result1 []int) *MoqSelection_starGenType_Index_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []int
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_Index_doFn
		DoReturnFn MoqSelection_starGenType_Index_doReturnFn
	}{
		Values: &struct {
			Result1 []int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSelection_starGenType_Index_fnRecorder) AndDo(fn MoqSelection_starGenType_Index_doFn) *MoqSelection_starGenType_Index_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSelection_starGenType_Index_fnRecorder) DoReturnResults(fn MoqSelection_starGenType_Index_doReturnFn) *MoqSelection_starGenType_Index_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []int
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_Index_doFn
		DoReturnFn MoqSelection_starGenType_Index_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSelection_starGenType_Index_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSelection_starGenType_Index_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Index {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSelection_starGenType_Index_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSelection_starGenType_Index_paramsKey]*MoqSelection_starGenType_Index_results{},
		}
		r.Moq.ResultsByParams_Index = append(r.Moq.ResultsByParams_Index, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Index) {
			copy(r.Moq.ResultsByParams_Index[insertAt+1:], r.Moq.ResultsByParams_Index[insertAt:0])
			r.Moq.ResultsByParams_Index[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Index(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSelection_starGenType_Index_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSelection_starGenType_Index_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSelection_starGenType_Index_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []int
				}
				Sequence   uint32
				DoFn       MoqSelection_starGenType_Index_doFn
				DoReturnFn MoqSelection_starGenType_Index_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSelection_starGenType) PrettyParams_Index(params MoqSelection_starGenType_Index_params) string {
	return fmt.Sprintf("Index()")
}

func (m *MoqSelection_starGenType) ParamsKey_Index(params MoqSelection_starGenType_Index_params, anyParams uint64) MoqSelection_starGenType_Index_paramsKey {
	m.Scene.T.Helper()
	return MoqSelection_starGenType_Index_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqSelection_starGenType_recorder) Indirect() *MoqSelection_starGenType_Indirect_fnRecorder {
	return &MoqSelection_starGenType_Indirect_fnRecorder{
		Params:   MoqSelection_starGenType_Indirect_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSelection_starGenType_Indirect_fnRecorder) Any() *MoqSelection_starGenType_Indirect_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Indirect(r.Params))
		return nil
	}
	return &MoqSelection_starGenType_Indirect_anyParams{Recorder: r}
}

func (r *MoqSelection_starGenType_Indirect_fnRecorder) Seq() *MoqSelection_starGenType_Indirect_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Indirect(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSelection_starGenType_Indirect_fnRecorder) NoSeq() *MoqSelection_starGenType_Indirect_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Indirect(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSelection_starGenType_Indirect_fnRecorder) ReturnResults(result1 bool) *MoqSelection_starGenType_Indirect_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_Indirect_doFn
		DoReturnFn MoqSelection_starGenType_Indirect_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSelection_starGenType_Indirect_fnRecorder) AndDo(fn MoqSelection_starGenType_Indirect_doFn) *MoqSelection_starGenType_Indirect_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSelection_starGenType_Indirect_fnRecorder) DoReturnResults(fn MoqSelection_starGenType_Indirect_doReturnFn) *MoqSelection_starGenType_Indirect_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_Indirect_doFn
		DoReturnFn MoqSelection_starGenType_Indirect_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSelection_starGenType_Indirect_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSelection_starGenType_Indirect_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Indirect {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSelection_starGenType_Indirect_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSelection_starGenType_Indirect_paramsKey]*MoqSelection_starGenType_Indirect_results{},
		}
		r.Moq.ResultsByParams_Indirect = append(r.Moq.ResultsByParams_Indirect, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Indirect) {
			copy(r.Moq.ResultsByParams_Indirect[insertAt+1:], r.Moq.ResultsByParams_Indirect[insertAt:0])
			r.Moq.ResultsByParams_Indirect[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Indirect(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSelection_starGenType_Indirect_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSelection_starGenType_Indirect_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSelection_starGenType_Indirect_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqSelection_starGenType_Indirect_doFn
				DoReturnFn MoqSelection_starGenType_Indirect_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSelection_starGenType) PrettyParams_Indirect(params MoqSelection_starGenType_Indirect_params) string {
	return fmt.Sprintf("Indirect()")
}

func (m *MoqSelection_starGenType) ParamsKey_Indirect(params MoqSelection_starGenType_Indirect_params, anyParams uint64) MoqSelection_starGenType_Indirect_paramsKey {
	m.Scene.T.Helper()
	return MoqSelection_starGenType_Indirect_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqSelection_starGenType_recorder) String() *MoqSelection_starGenType_String_fnRecorder {
	return &MoqSelection_starGenType_String_fnRecorder{
		Params:   MoqSelection_starGenType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSelection_starGenType_String_fnRecorder) Any() *MoqSelection_starGenType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqSelection_starGenType_String_anyParams{Recorder: r}
}

func (r *MoqSelection_starGenType_String_fnRecorder) Seq() *MoqSelection_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSelection_starGenType_String_fnRecorder) NoSeq() *MoqSelection_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSelection_starGenType_String_fnRecorder) ReturnResults(result1 string) *MoqSelection_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_String_doFn
		DoReturnFn MoqSelection_starGenType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSelection_starGenType_String_fnRecorder) AndDo(fn MoqSelection_starGenType_String_doFn) *MoqSelection_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSelection_starGenType_String_fnRecorder) DoReturnResults(fn MoqSelection_starGenType_String_doReturnFn) *MoqSelection_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqSelection_starGenType_String_doFn
		DoReturnFn MoqSelection_starGenType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSelection_starGenType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSelection_starGenType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSelection_starGenType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSelection_starGenType_String_paramsKey]*MoqSelection_starGenType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSelection_starGenType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSelection_starGenType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSelection_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqSelection_starGenType_String_doFn
				DoReturnFn MoqSelection_starGenType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSelection_starGenType) PrettyParams_String(params MoqSelection_starGenType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqSelection_starGenType) ParamsKey_String(params MoqSelection_starGenType_String_params, anyParams uint64) MoqSelection_starGenType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqSelection_starGenType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqSelection_starGenType) Reset() {
	m.ResultsByParams_Kind = nil
	m.ResultsByParams_Recv = nil
	m.ResultsByParams_Obj = nil
	m.ResultsByParams_Type = nil
	m.ResultsByParams_Index = nil
	m.ResultsByParams_Indirect = nil
	m.ResultsByParams_String = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqSelection_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Kind {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Kind(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Recv {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Recv(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Obj {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Obj(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Type {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Type(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Index {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Index(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Indirect {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Indirect(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
}
