// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package types

import (
	"fmt"
	"go/types"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that types.Basic_starGenType is mocked
// completely
var _ Basic_starGenType = (*MoqBasic_starGenType_mock)(nil)

// Basic_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Basic_starGenType interface {
	Kind() types.BasicKind
	Info() types.BasicInfo
	Name() string
	Underlying() types.Type
	String() string
}

// MoqBasic_starGenType holds the state of a moq of the Basic_starGenType type
type MoqBasic_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqBasic_starGenType_mock

	ResultsByParams_Kind       []MoqBasic_starGenType_Kind_resultsByParams
	ResultsByParams_Info       []MoqBasic_starGenType_Info_resultsByParams
	ResultsByParams_Name       []MoqBasic_starGenType_Name_resultsByParams
	ResultsByParams_Underlying []MoqBasic_starGenType_Underlying_resultsByParams
	ResultsByParams_String     []MoqBasic_starGenType_String_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Kind       struct{}
			Info       struct{}
			Name       struct{}
			Underlying struct{}
			String     struct{}
		}
	}
}

// MoqBasic_starGenType_mock isolates the mock interface of the
// Basic_starGenType type
type MoqBasic_starGenType_mock struct {
	Moq *MoqBasic_starGenType
}

// MoqBasic_starGenType_recorder isolates the recorder interface of the
// Basic_starGenType type
type MoqBasic_starGenType_recorder struct {
	Moq *MoqBasic_starGenType
}

// MoqBasic_starGenType_Kind_params holds the params of the Basic_starGenType
// type
type MoqBasic_starGenType_Kind_params struct{}

// MoqBasic_starGenType_Kind_paramsKey holds the map key params of the
// Basic_starGenType type
type MoqBasic_starGenType_Kind_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqBasic_starGenType_Kind_resultsByParams contains the results for a given
// set of parameters for the Basic_starGenType type
type MoqBasic_starGenType_Kind_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBasic_starGenType_Kind_paramsKey]*MoqBasic_starGenType_Kind_results
}

// MoqBasic_starGenType_Kind_doFn defines the type of function needed when
// calling AndDo for the Basic_starGenType type
type MoqBasic_starGenType_Kind_doFn func()

// MoqBasic_starGenType_Kind_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Basic_starGenType type
type MoqBasic_starGenType_Kind_doReturnFn func() types.BasicKind

// MoqBasic_starGenType_Kind_results holds the results of the Basic_starGenType
// type
type MoqBasic_starGenType_Kind_results struct {
	Params  MoqBasic_starGenType_Kind_params
	Results []struct {
		Values *struct {
			Result1 types.BasicKind
		}
		Sequence   uint32
		DoFn       MoqBasic_starGenType_Kind_doFn
		DoReturnFn MoqBasic_starGenType_Kind_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBasic_starGenType_Kind_fnRecorder routes recorded function calls to the
// MoqBasic_starGenType moq
type MoqBasic_starGenType_Kind_fnRecorder struct {
	Params    MoqBasic_starGenType_Kind_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBasic_starGenType_Kind_results
	Moq       *MoqBasic_starGenType
}

// MoqBasic_starGenType_Kind_anyParams isolates the any params functions of the
// Basic_starGenType type
type MoqBasic_starGenType_Kind_anyParams struct {
	Recorder *MoqBasic_starGenType_Kind_fnRecorder
}

// MoqBasic_starGenType_Info_params holds the params of the Basic_starGenType
// type
type MoqBasic_starGenType_Info_params struct{}

// MoqBasic_starGenType_Info_paramsKey holds the map key params of the
// Basic_starGenType type
type MoqBasic_starGenType_Info_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqBasic_starGenType_Info_resultsByParams contains the results for a given
// set of parameters for the Basic_starGenType type
type MoqBasic_starGenType_Info_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBasic_starGenType_Info_paramsKey]*MoqBasic_starGenType_Info_results
}

// MoqBasic_starGenType_Info_doFn defines the type of function needed when
// calling AndDo for the Basic_starGenType type
type MoqBasic_starGenType_Info_doFn func()

// MoqBasic_starGenType_Info_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Basic_starGenType type
type MoqBasic_starGenType_Info_doReturnFn func() types.BasicInfo

// MoqBasic_starGenType_Info_results holds the results of the Basic_starGenType
// type
type MoqBasic_starGenType_Info_results struct {
	Params  MoqBasic_starGenType_Info_params
	Results []struct {
		Values *struct {
			Result1 types.BasicInfo
		}
		Sequence   uint32
		DoFn       MoqBasic_starGenType_Info_doFn
		DoReturnFn MoqBasic_starGenType_Info_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBasic_starGenType_Info_fnRecorder routes recorded function calls to the
// MoqBasic_starGenType moq
type MoqBasic_starGenType_Info_fnRecorder struct {
	Params    MoqBasic_starGenType_Info_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBasic_starGenType_Info_results
	Moq       *MoqBasic_starGenType
}

// MoqBasic_starGenType_Info_anyParams isolates the any params functions of the
// Basic_starGenType type
type MoqBasic_starGenType_Info_anyParams struct {
	Recorder *MoqBasic_starGenType_Info_fnRecorder
}

// MoqBasic_starGenType_Name_params holds the params of the Basic_starGenType
// type
type MoqBasic_starGenType_Name_params struct{}

// MoqBasic_starGenType_Name_paramsKey holds the map key params of the
// Basic_starGenType type
type MoqBasic_starGenType_Name_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqBasic_starGenType_Name_resultsByParams contains the results for a given
// set of parameters for the Basic_starGenType type
type MoqBasic_starGenType_Name_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBasic_starGenType_Name_paramsKey]*MoqBasic_starGenType_Name_results
}

// MoqBasic_starGenType_Name_doFn defines the type of function needed when
// calling AndDo for the Basic_starGenType type
type MoqBasic_starGenType_Name_doFn func()

// MoqBasic_starGenType_Name_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Basic_starGenType type
type MoqBasic_starGenType_Name_doReturnFn func() string

// MoqBasic_starGenType_Name_results holds the results of the Basic_starGenType
// type
type MoqBasic_starGenType_Name_results struct {
	Params  MoqBasic_starGenType_Name_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqBasic_starGenType_Name_doFn
		DoReturnFn MoqBasic_starGenType_Name_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBasic_starGenType_Name_fnRecorder routes recorded function calls to the
// MoqBasic_starGenType moq
type MoqBasic_starGenType_Name_fnRecorder struct {
	Params    MoqBasic_starGenType_Name_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBasic_starGenType_Name_results
	Moq       *MoqBasic_starGenType
}

// MoqBasic_starGenType_Name_anyParams isolates the any params functions of the
// Basic_starGenType type
type MoqBasic_starGenType_Name_anyParams struct {
	Recorder *MoqBasic_starGenType_Name_fnRecorder
}

// MoqBasic_starGenType_Underlying_params holds the params of the
// Basic_starGenType type
type MoqBasic_starGenType_Underlying_params struct{}

// MoqBasic_starGenType_Underlying_paramsKey holds the map key params of the
// Basic_starGenType type
type MoqBasic_starGenType_Underlying_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqBasic_starGenType_Underlying_resultsByParams contains the results for a
// given set of parameters for the Basic_starGenType type
type MoqBasic_starGenType_Underlying_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBasic_starGenType_Underlying_paramsKey]*MoqBasic_starGenType_Underlying_results
}

// MoqBasic_starGenType_Underlying_doFn defines the type of function needed
// when calling AndDo for the Basic_starGenType type
type MoqBasic_starGenType_Underlying_doFn func()

// MoqBasic_starGenType_Underlying_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Basic_starGenType type
type MoqBasic_starGenType_Underlying_doReturnFn func() types.Type

// MoqBasic_starGenType_Underlying_results holds the results of the
// Basic_starGenType type
type MoqBasic_starGenType_Underlying_results struct {
	Params  MoqBasic_starGenType_Underlying_params
	Results []struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqBasic_starGenType_Underlying_doFn
		DoReturnFn MoqBasic_starGenType_Underlying_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBasic_starGenType_Underlying_fnRecorder routes recorded function calls to
// the MoqBasic_starGenType moq
type MoqBasic_starGenType_Underlying_fnRecorder struct {
	Params    MoqBasic_starGenType_Underlying_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBasic_starGenType_Underlying_results
	Moq       *MoqBasic_starGenType
}

// MoqBasic_starGenType_Underlying_anyParams isolates the any params functions
// of the Basic_starGenType type
type MoqBasic_starGenType_Underlying_anyParams struct {
	Recorder *MoqBasic_starGenType_Underlying_fnRecorder
}

// MoqBasic_starGenType_String_params holds the params of the Basic_starGenType
// type
type MoqBasic_starGenType_String_params struct{}

// MoqBasic_starGenType_String_paramsKey holds the map key params of the
// Basic_starGenType type
type MoqBasic_starGenType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqBasic_starGenType_String_resultsByParams contains the results for a given
// set of parameters for the Basic_starGenType type
type MoqBasic_starGenType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBasic_starGenType_String_paramsKey]*MoqBasic_starGenType_String_results
}

// MoqBasic_starGenType_String_doFn defines the type of function needed when
// calling AndDo for the Basic_starGenType type
type MoqBasic_starGenType_String_doFn func()

// MoqBasic_starGenType_String_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Basic_starGenType type
type MoqBasic_starGenType_String_doReturnFn func() string

// MoqBasic_starGenType_String_results holds the results of the
// Basic_starGenType type
type MoqBasic_starGenType_String_results struct {
	Params  MoqBasic_starGenType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqBasic_starGenType_String_doFn
		DoReturnFn MoqBasic_starGenType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBasic_starGenType_String_fnRecorder routes recorded function calls to the
// MoqBasic_starGenType moq
type MoqBasic_starGenType_String_fnRecorder struct {
	Params    MoqBasic_starGenType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBasic_starGenType_String_results
	Moq       *MoqBasic_starGenType
}

// MoqBasic_starGenType_String_anyParams isolates the any params functions of
// the Basic_starGenType type
type MoqBasic_starGenType_String_anyParams struct {
	Recorder *MoqBasic_starGenType_String_fnRecorder
}

// NewMoqBasic_starGenType creates a new moq of the Basic_starGenType type
func NewMoqBasic_starGenType(scene *moq.Scene, config *moq.Config) *MoqBasic_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqBasic_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqBasic_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Kind       struct{}
				Info       struct{}
				Name       struct{}
				Underlying struct{}
				String     struct{}
			}
		}{ParameterIndexing: struct {
			Kind       struct{}
			Info       struct{}
			Name       struct{}
			Underlying struct{}
			String     struct{}
		}{
			Kind:       struct{}{},
			Info:       struct{}{},
			Name:       struct{}{},
			Underlying: struct{}{},
			String:     struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Basic_starGenType type
func (m *MoqBasic_starGenType) Mock() *MoqBasic_starGenType_mock { return m.Moq }

func (m *MoqBasic_starGenType_mock) Kind() (result1 types.BasicKind) {
	m.Moq.Scene.T.Helper()
	params := MoqBasic_starGenType_Kind_params{}
	var results *MoqBasic_starGenType_Kind_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Kind {
		paramsKey := m.Moq.ParamsKey_Kind(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Kind(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Kind(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Kind(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqBasic_starGenType_mock) Info() (result1 types.BasicInfo) {
	m.Moq.Scene.T.Helper()
	params := MoqBasic_starGenType_Info_params{}
	var results *MoqBasic_starGenType_Info_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Info {
		paramsKey := m.Moq.ParamsKey_Info(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Info(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Info(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Info(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqBasic_starGenType_mock) Name() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqBasic_starGenType_Name_params{}
	var results *MoqBasic_starGenType_Name_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Name {
		paramsKey := m.Moq.ParamsKey_Name(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Name(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Name(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Name(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqBasic_starGenType_mock) Underlying() (result1 types.Type) {
	m.Moq.Scene.T.Helper()
	params := MoqBasic_starGenType_Underlying_params{}
	var results *MoqBasic_starGenType_Underlying_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Underlying {
		paramsKey := m.Moq.ParamsKey_Underlying(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Underlying(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Underlying(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Underlying(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqBasic_starGenType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqBasic_starGenType_String_params{}
	var results *MoqBasic_starGenType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Basic_starGenType type
func (m *MoqBasic_starGenType) OnCall() *MoqBasic_starGenType_recorder {
	return &MoqBasic_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqBasic_starGenType_recorder) Kind() *MoqBasic_starGenType_Kind_fnRecorder {
	return &MoqBasic_starGenType_Kind_fnRecorder{
		Params:   MoqBasic_starGenType_Kind_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBasic_starGenType_Kind_fnRecorder) Any() *MoqBasic_starGenType_Kind_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Kind(r.Params))
		return nil
	}
	return &MoqBasic_starGenType_Kind_anyParams{Recorder: r}
}

func (r *MoqBasic_starGenType_Kind_fnRecorder) Seq() *MoqBasic_starGenType_Kind_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Kind(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBasic_starGenType_Kind_fnRecorder) NoSeq() *MoqBasic_starGenType_Kind_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Kind(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBasic_starGenType_Kind_fnRecorder) ReturnResults(result1 types.BasicKind) *MoqBasic_starGenType_Kind_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.BasicKind
		}
		Sequence   uint32
		DoFn       MoqBasic_starGenType_Kind_doFn
		DoReturnFn MoqBasic_starGenType_Kind_doReturnFn
	}{
		Values: &struct {
			Result1 types.BasicKind
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBasic_starGenType_Kind_fnRecorder) AndDo(fn MoqBasic_starGenType_Kind_doFn) *MoqBasic_starGenType_Kind_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBasic_starGenType_Kind_fnRecorder) DoReturnResults(fn MoqBasic_starGenType_Kind_doReturnFn) *MoqBasic_starGenType_Kind_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.BasicKind
		}
		Sequence   uint32
		DoFn       MoqBasic_starGenType_Kind_doFn
		DoReturnFn MoqBasic_starGenType_Kind_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBasic_starGenType_Kind_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBasic_starGenType_Kind_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Kind {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBasic_starGenType_Kind_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBasic_starGenType_Kind_paramsKey]*MoqBasic_starGenType_Kind_results{},
		}
		r.Moq.ResultsByParams_Kind = append(r.Moq.ResultsByParams_Kind, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Kind) {
			copy(r.Moq.ResultsByParams_Kind[insertAt+1:], r.Moq.ResultsByParams_Kind[insertAt:0])
			r.Moq.ResultsByParams_Kind[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Kind(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBasic_starGenType_Kind_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBasic_starGenType_Kind_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBasic_starGenType_Kind_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 types.BasicKind
				}
				Sequence   uint32
				DoFn       MoqBasic_starGenType_Kind_doFn
				DoReturnFn MoqBasic_starGenType_Kind_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBasic_starGenType) PrettyParams_Kind(params MoqBasic_starGenType_Kind_params) string {
	return fmt.Sprintf("Kind()")
}

func (m *MoqBasic_starGenType) ParamsKey_Kind(params MoqBasic_starGenType_Kind_params, anyParams uint64) MoqBasic_starGenType_Kind_paramsKey {
	m.Scene.T.Helper()
	return MoqBasic_starGenType_Kind_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqBasic_starGenType_recorder) Info() *MoqBasic_starGenType_Info_fnRecorder {
	return &MoqBasic_starGenType_Info_fnRecorder{
		Params:   MoqBasic_starGenType_Info_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBasic_starGenType_Info_fnRecorder) Any() *MoqBasic_starGenType_Info_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Info(r.Params))
		return nil
	}
	return &MoqBasic_starGenType_Info_anyParams{Recorder: r}
}

func (r *MoqBasic_starGenType_Info_fnRecorder) Seq() *MoqBasic_starGenType_Info_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Info(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBasic_starGenType_Info_fnRecorder) NoSeq() *MoqBasic_starGenType_Info_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Info(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBasic_starGenType_Info_fnRecorder) ReturnResults(result1 types.BasicInfo) *MoqBasic_starGenType_Info_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.BasicInfo
		}
		Sequence   uint32
		DoFn       MoqBasic_starGenType_Info_doFn
		DoReturnFn MoqBasic_starGenType_Info_doReturnFn
	}{
		Values: &struct {
			Result1 types.BasicInfo
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBasic_starGenType_Info_fnRecorder) AndDo(fn MoqBasic_starGenType_Info_doFn) *MoqBasic_starGenType_Info_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBasic_starGenType_Info_fnRecorder) DoReturnResults(fn MoqBasic_starGenType_Info_doReturnFn) *MoqBasic_starGenType_Info_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.BasicInfo
		}
		Sequence   uint32
		DoFn       MoqBasic_starGenType_Info_doFn
		DoReturnFn MoqBasic_starGenType_Info_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBasic_starGenType_Info_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBasic_starGenType_Info_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Info {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBasic_starGenType_Info_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBasic_starGenType_Info_paramsKey]*MoqBasic_starGenType_Info_results{},
		}
		r.Moq.ResultsByParams_Info = append(r.Moq.ResultsByParams_Info, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Info) {
			copy(r.Moq.ResultsByParams_Info[insertAt+1:], r.Moq.ResultsByParams_Info[insertAt:0])
			r.Moq.ResultsByParams_Info[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Info(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBasic_starGenType_Info_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBasic_starGenType_Info_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBasic_starGenType_Info_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 types.BasicInfo
				}
				Sequence   uint32
				DoFn       MoqBasic_starGenType_Info_doFn
				DoReturnFn MoqBasic_starGenType_Info_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBasic_starGenType) PrettyParams_Info(params MoqBasic_starGenType_Info_params) string {
	return fmt.Sprintf("Info()")
}

func (m *MoqBasic_starGenType) ParamsKey_Info(params MoqBasic_starGenType_Info_params, anyParams uint64) MoqBasic_starGenType_Info_paramsKey {
	m.Scene.T.Helper()
	return MoqBasic_starGenType_Info_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqBasic_starGenType_recorder) Name() *MoqBasic_starGenType_Name_fnRecorder {
	return &MoqBasic_starGenType_Name_fnRecorder{
		Params:   MoqBasic_starGenType_Name_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBasic_starGenType_Name_fnRecorder) Any() *MoqBasic_starGenType_Name_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	return &MoqBasic_starGenType_Name_anyParams{Recorder: r}
}

func (r *MoqBasic_starGenType_Name_fnRecorder) Seq() *MoqBasic_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBasic_starGenType_Name_fnRecorder) NoSeq() *MoqBasic_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBasic_starGenType_Name_fnRecorder) ReturnResults(result1 string) *MoqBasic_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqBasic_starGenType_Name_doFn
		DoReturnFn MoqBasic_starGenType_Name_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBasic_starGenType_Name_fnRecorder) AndDo(fn MoqBasic_starGenType_Name_doFn) *MoqBasic_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBasic_starGenType_Name_fnRecorder) DoReturnResults(fn MoqBasic_starGenType_Name_doReturnFn) *MoqBasic_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqBasic_starGenType_Name_doFn
		DoReturnFn MoqBasic_starGenType_Name_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBasic_starGenType_Name_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBasic_starGenType_Name_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Name {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBasic_starGenType_Name_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBasic_starGenType_Name_paramsKey]*MoqBasic_starGenType_Name_results{},
		}
		r.Moq.ResultsByParams_Name = append(r.Moq.ResultsByParams_Name, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Name) {
			copy(r.Moq.ResultsByParams_Name[insertAt+1:], r.Moq.ResultsByParams_Name[insertAt:0])
			r.Moq.ResultsByParams_Name[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Name(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBasic_starGenType_Name_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBasic_starGenType_Name_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBasic_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqBasic_starGenType_Name_doFn
				DoReturnFn MoqBasic_starGenType_Name_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBasic_starGenType) PrettyParams_Name(params MoqBasic_starGenType_Name_params) string {
	return fmt.Sprintf("Name()")
}

func (m *MoqBasic_starGenType) ParamsKey_Name(params MoqBasic_starGenType_Name_params, anyParams uint64) MoqBasic_starGenType_Name_paramsKey {
	m.Scene.T.Helper()
	return MoqBasic_starGenType_Name_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqBasic_starGenType_recorder) Underlying() *MoqBasic_starGenType_Underlying_fnRecorder {
	return &MoqBasic_starGenType_Underlying_fnRecorder{
		Params:   MoqBasic_starGenType_Underlying_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBasic_starGenType_Underlying_fnRecorder) Any() *MoqBasic_starGenType_Underlying_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Underlying(r.Params))
		return nil
	}
	return &MoqBasic_starGenType_Underlying_anyParams{Recorder: r}
}

func (r *MoqBasic_starGenType_Underlying_fnRecorder) Seq() *MoqBasic_starGenType_Underlying_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Underlying(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBasic_starGenType_Underlying_fnRecorder) NoSeq() *MoqBasic_starGenType_Underlying_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Underlying(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBasic_starGenType_Underlying_fnRecorder) ReturnResults(result1 types.Type) *MoqBasic_starGenType_Underlying_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqBasic_starGenType_Underlying_doFn
		DoReturnFn MoqBasic_starGenType_Underlying_doReturnFn
	}{
		Values: &struct {
			Result1 types.Type
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBasic_starGenType_Underlying_fnRecorder) AndDo(fn MoqBasic_starGenType_Underlying_doFn) *MoqBasic_starGenType_Underlying_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBasic_starGenType_Underlying_fnRecorder) DoReturnResults(fn MoqBasic_starGenType_Underlying_doReturnFn) *MoqBasic_starGenType_Underlying_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqBasic_starGenType_Underlying_doFn
		DoReturnFn MoqBasic_starGenType_Underlying_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBasic_starGenType_Underlying_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBasic_starGenType_Underlying_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Underlying {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBasic_starGenType_Underlying_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBasic_starGenType_Underlying_paramsKey]*MoqBasic_starGenType_Underlying_results{},
		}
		r.Moq.ResultsByParams_Underlying = append(r.Moq.ResultsByParams_Underlying, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Underlying) {
			copy(r.Moq.ResultsByParams_Underlying[insertAt+1:], r.Moq.ResultsByParams_Underlying[insertAt:0])
			r.Moq.ResultsByParams_Underlying[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Underlying(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBasic_starGenType_Underlying_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBasic_starGenType_Underlying_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBasic_starGenType_Underlying_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 types.Type
				}
				Sequence   uint32
				DoFn       MoqBasic_starGenType_Underlying_doFn
				DoReturnFn MoqBasic_starGenType_Underlying_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBasic_starGenType) PrettyParams_Underlying(params MoqBasic_starGenType_Underlying_params) string {
	return fmt.Sprintf("Underlying()")
}

func (m *MoqBasic_starGenType) ParamsKey_Underlying(params MoqBasic_starGenType_Underlying_params, anyParams uint64) MoqBasic_starGenType_Underlying_paramsKey {
	m.Scene.T.Helper()
	return MoqBasic_starGenType_Underlying_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqBasic_starGenType_recorder) String() *MoqBasic_starGenType_String_fnRecorder {
	return &MoqBasic_starGenType_String_fnRecorder{
		Params:   MoqBasic_starGenType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBasic_starGenType_String_fnRecorder) Any() *MoqBasic_starGenType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqBasic_starGenType_String_anyParams{Recorder: r}
}

func (r *MoqBasic_starGenType_String_fnRecorder) Seq() *MoqBasic_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBasic_starGenType_String_fnRecorder) NoSeq() *MoqBasic_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBasic_starGenType_String_fnRecorder) ReturnResults(result1 string) *MoqBasic_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqBasic_starGenType_String_doFn
		DoReturnFn MoqBasic_starGenType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBasic_starGenType_String_fnRecorder) AndDo(fn MoqBasic_starGenType_String_doFn) *MoqBasic_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBasic_starGenType_String_fnRecorder) DoReturnResults(fn MoqBasic_starGenType_String_doReturnFn) *MoqBasic_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqBasic_starGenType_String_doFn
		DoReturnFn MoqBasic_starGenType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBasic_starGenType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBasic_starGenType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBasic_starGenType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBasic_starGenType_String_paramsKey]*MoqBasic_starGenType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBasic_starGenType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBasic_starGenType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBasic_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqBasic_starGenType_String_doFn
				DoReturnFn MoqBasic_starGenType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBasic_starGenType) PrettyParams_String(params MoqBasic_starGenType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqBasic_starGenType) ParamsKey_String(params MoqBasic_starGenType_String_params, anyParams uint64) MoqBasic_starGenType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqBasic_starGenType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqBasic_starGenType) Reset() {
	m.ResultsByParams_Kind = nil
	m.ResultsByParams_Info = nil
	m.ResultsByParams_Name = nil
	m.ResultsByParams_Underlying = nil
	m.ResultsByParams_String = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqBasic_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Kind {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Kind(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Info {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Info(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Name {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Name(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Underlying {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Underlying(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
}
