// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package types

import (
	"fmt"
	"go/token"
	"go/types"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that Object_reduced is mocked
// completely
var _ Object_reduced = (*MoqObject_mock)(nil)

// Object_reduced is the fabricated implementation type of this mock (emitted
// when the original interface contains non-exported methods)
type Object_reduced interface {
	Parent() *types.Scope // scope in which this object is declared; nil for methods and struct fields
	Pos() token.Pos       // position of object identifier in declaration
	Pkg() *types.Package  // package to which this object belongs; nil for labels and objects in the Universe scope
	Name() string         // package local object name
	Type() types.Type     // object type
	Exported() bool       // reports whether the name starts with a capital letter
	Id() string           // object name if exported, qualified name if not exported (see func Id)

	// String returns a human-readable string of the object.
	String() string
}

// MoqObject holds the state of a moq of the Object_reduced type
type MoqObject struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqObject_mock

	ResultsByParams_Parent   []MoqObject_Parent_resultsByParams
	ResultsByParams_Pos      []MoqObject_Pos_resultsByParams
	ResultsByParams_Pkg      []MoqObject_Pkg_resultsByParams
	ResultsByParams_Name     []MoqObject_Name_resultsByParams
	ResultsByParams_Type     []MoqObject_Type_resultsByParams
	ResultsByParams_Exported []MoqObject_Exported_resultsByParams
	ResultsByParams_Id       []MoqObject_Id_resultsByParams
	ResultsByParams_String   []MoqObject_String_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Parent   struct{}
			Pos      struct{}
			Pkg      struct{}
			Name     struct{}
			Type     struct{}
			Exported struct{}
			Id       struct{}
			String   struct{}
		}
	}
}

// MoqObject_mock isolates the mock interface of the Object type
type MoqObject_mock struct {
	Moq *MoqObject
}

// MoqObject_recorder isolates the recorder interface of the Object type
type MoqObject_recorder struct {
	Moq *MoqObject
}

// MoqObject_Parent_params holds the params of the Object type
type MoqObject_Parent_params struct{}

// MoqObject_Parent_paramsKey holds the map key params of the Object type
type MoqObject_Parent_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqObject_Parent_resultsByParams contains the results for a given set of
// parameters for the Object type
type MoqObject_Parent_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqObject_Parent_paramsKey]*MoqObject_Parent_results
}

// MoqObject_Parent_doFn defines the type of function needed when calling AndDo
// for the Object type
type MoqObject_Parent_doFn func()

// MoqObject_Parent_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Object type
type MoqObject_Parent_doReturnFn func() *types.Scope

// MoqObject_Parent_results holds the results of the Object type
type MoqObject_Parent_results struct {
	Params  MoqObject_Parent_params
	Results []struct {
		Values *struct {
			Result1 *types.Scope
		}
		Sequence   uint32
		DoFn       MoqObject_Parent_doFn
		DoReturnFn MoqObject_Parent_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqObject_Parent_fnRecorder routes recorded function calls to the MoqObject
// moq
type MoqObject_Parent_fnRecorder struct {
	Params    MoqObject_Parent_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqObject_Parent_results
	Moq       *MoqObject
}

// MoqObject_Parent_anyParams isolates the any params functions of the Object
// type
type MoqObject_Parent_anyParams struct {
	Recorder *MoqObject_Parent_fnRecorder
}

// MoqObject_Pos_params holds the params of the Object type
type MoqObject_Pos_params struct{}

// MoqObject_Pos_paramsKey holds the map key params of the Object type
type MoqObject_Pos_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqObject_Pos_resultsByParams contains the results for a given set of
// parameters for the Object type
type MoqObject_Pos_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqObject_Pos_paramsKey]*MoqObject_Pos_results
}

// MoqObject_Pos_doFn defines the type of function needed when calling AndDo
// for the Object type
type MoqObject_Pos_doFn func()

// MoqObject_Pos_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Object type
type MoqObject_Pos_doReturnFn func() token.Pos

// MoqObject_Pos_results holds the results of the Object type
type MoqObject_Pos_results struct {
	Params  MoqObject_Pos_params
	Results []struct {
		Values *struct {
			Result1 token.Pos
		}
		Sequence   uint32
		DoFn       MoqObject_Pos_doFn
		DoReturnFn MoqObject_Pos_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqObject_Pos_fnRecorder routes recorded function calls to the MoqObject moq
type MoqObject_Pos_fnRecorder struct {
	Params    MoqObject_Pos_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqObject_Pos_results
	Moq       *MoqObject
}

// MoqObject_Pos_anyParams isolates the any params functions of the Object type
type MoqObject_Pos_anyParams struct {
	Recorder *MoqObject_Pos_fnRecorder
}

// MoqObject_Pkg_params holds the params of the Object type
type MoqObject_Pkg_params struct{}

// MoqObject_Pkg_paramsKey holds the map key params of the Object type
type MoqObject_Pkg_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqObject_Pkg_resultsByParams contains the results for a given set of
// parameters for the Object type
type MoqObject_Pkg_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqObject_Pkg_paramsKey]*MoqObject_Pkg_results
}

// MoqObject_Pkg_doFn defines the type of function needed when calling AndDo
// for the Object type
type MoqObject_Pkg_doFn func()

// MoqObject_Pkg_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Object type
type MoqObject_Pkg_doReturnFn func() *types.Package

// MoqObject_Pkg_results holds the results of the Object type
type MoqObject_Pkg_results struct {
	Params  MoqObject_Pkg_params
	Results []struct {
		Values *struct {
			Result1 *types.Package
		}
		Sequence   uint32
		DoFn       MoqObject_Pkg_doFn
		DoReturnFn MoqObject_Pkg_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqObject_Pkg_fnRecorder routes recorded function calls to the MoqObject moq
type MoqObject_Pkg_fnRecorder struct {
	Params    MoqObject_Pkg_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqObject_Pkg_results
	Moq       *MoqObject
}

// MoqObject_Pkg_anyParams isolates the any params functions of the Object type
type MoqObject_Pkg_anyParams struct {
	Recorder *MoqObject_Pkg_fnRecorder
}

// MoqObject_Name_params holds the params of the Object type
type MoqObject_Name_params struct{}

// MoqObject_Name_paramsKey holds the map key params of the Object type
type MoqObject_Name_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqObject_Name_resultsByParams contains the results for a given set of
// parameters for the Object type
type MoqObject_Name_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqObject_Name_paramsKey]*MoqObject_Name_results
}

// MoqObject_Name_doFn defines the type of function needed when calling AndDo
// for the Object type
type MoqObject_Name_doFn func()

// MoqObject_Name_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Object type
type MoqObject_Name_doReturnFn func() string

// MoqObject_Name_results holds the results of the Object type
type MoqObject_Name_results struct {
	Params  MoqObject_Name_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqObject_Name_doFn
		DoReturnFn MoqObject_Name_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqObject_Name_fnRecorder routes recorded function calls to the MoqObject
// moq
type MoqObject_Name_fnRecorder struct {
	Params    MoqObject_Name_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqObject_Name_results
	Moq       *MoqObject
}

// MoqObject_Name_anyParams isolates the any params functions of the Object
// type
type MoqObject_Name_anyParams struct {
	Recorder *MoqObject_Name_fnRecorder
}

// MoqObject_Type_params holds the params of the Object type
type MoqObject_Type_params struct{}

// MoqObject_Type_paramsKey holds the map key params of the Object type
type MoqObject_Type_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqObject_Type_resultsByParams contains the results for a given set of
// parameters for the Object type
type MoqObject_Type_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqObject_Type_paramsKey]*MoqObject_Type_results
}

// MoqObject_Type_doFn defines the type of function needed when calling AndDo
// for the Object type
type MoqObject_Type_doFn func()

// MoqObject_Type_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Object type
type MoqObject_Type_doReturnFn func() types.Type

// MoqObject_Type_results holds the results of the Object type
type MoqObject_Type_results struct {
	Params  MoqObject_Type_params
	Results []struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqObject_Type_doFn
		DoReturnFn MoqObject_Type_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqObject_Type_fnRecorder routes recorded function calls to the MoqObject
// moq
type MoqObject_Type_fnRecorder struct {
	Params    MoqObject_Type_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqObject_Type_results
	Moq       *MoqObject
}

// MoqObject_Type_anyParams isolates the any params functions of the Object
// type
type MoqObject_Type_anyParams struct {
	Recorder *MoqObject_Type_fnRecorder
}

// MoqObject_Exported_params holds the params of the Object type
type MoqObject_Exported_params struct{}

// MoqObject_Exported_paramsKey holds the map key params of the Object type
type MoqObject_Exported_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqObject_Exported_resultsByParams contains the results for a given set of
// parameters for the Object type
type MoqObject_Exported_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqObject_Exported_paramsKey]*MoqObject_Exported_results
}

// MoqObject_Exported_doFn defines the type of function needed when calling
// AndDo for the Object type
type MoqObject_Exported_doFn func()

// MoqObject_Exported_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Object type
type MoqObject_Exported_doReturnFn func() bool

// MoqObject_Exported_results holds the results of the Object type
type MoqObject_Exported_results struct {
	Params  MoqObject_Exported_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqObject_Exported_doFn
		DoReturnFn MoqObject_Exported_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqObject_Exported_fnRecorder routes recorded function calls to the
// MoqObject moq
type MoqObject_Exported_fnRecorder struct {
	Params    MoqObject_Exported_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqObject_Exported_results
	Moq       *MoqObject
}

// MoqObject_Exported_anyParams isolates the any params functions of the Object
// type
type MoqObject_Exported_anyParams struct {
	Recorder *MoqObject_Exported_fnRecorder
}

// MoqObject_Id_params holds the params of the Object type
type MoqObject_Id_params struct{}

// MoqObject_Id_paramsKey holds the map key params of the Object type
type MoqObject_Id_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqObject_Id_resultsByParams contains the results for a given set of
// parameters for the Object type
type MoqObject_Id_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqObject_Id_paramsKey]*MoqObject_Id_results
}

// MoqObject_Id_doFn defines the type of function needed when calling AndDo for
// the Object type
type MoqObject_Id_doFn func()

// MoqObject_Id_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Object type
type MoqObject_Id_doReturnFn func() string

// MoqObject_Id_results holds the results of the Object type
type MoqObject_Id_results struct {
	Params  MoqObject_Id_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqObject_Id_doFn
		DoReturnFn MoqObject_Id_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqObject_Id_fnRecorder routes recorded function calls to the MoqObject moq
type MoqObject_Id_fnRecorder struct {
	Params    MoqObject_Id_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqObject_Id_results
	Moq       *MoqObject
}

// MoqObject_Id_anyParams isolates the any params functions of the Object type
type MoqObject_Id_anyParams struct {
	Recorder *MoqObject_Id_fnRecorder
}

// MoqObject_String_params holds the params of the Object type
type MoqObject_String_params struct{}

// MoqObject_String_paramsKey holds the map key params of the Object type
type MoqObject_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqObject_String_resultsByParams contains the results for a given set of
// parameters for the Object type
type MoqObject_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqObject_String_paramsKey]*MoqObject_String_results
}

// MoqObject_String_doFn defines the type of function needed when calling AndDo
// for the Object type
type MoqObject_String_doFn func()

// MoqObject_String_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Object type
type MoqObject_String_doReturnFn func() string

// MoqObject_String_results holds the results of the Object type
type MoqObject_String_results struct {
	Params  MoqObject_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqObject_String_doFn
		DoReturnFn MoqObject_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqObject_String_fnRecorder routes recorded function calls to the MoqObject
// moq
type MoqObject_String_fnRecorder struct {
	Params    MoqObject_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqObject_String_results
	Moq       *MoqObject
}

// MoqObject_String_anyParams isolates the any params functions of the Object
// type
type MoqObject_String_anyParams struct {
	Recorder *MoqObject_String_fnRecorder
}

// NewMoqObject creates a new moq of the Object type
func NewMoqObject(scene *moq.Scene, config *moq.Config) *MoqObject {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqObject{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqObject_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Parent   struct{}
				Pos      struct{}
				Pkg      struct{}
				Name     struct{}
				Type     struct{}
				Exported struct{}
				Id       struct{}
				String   struct{}
			}
		}{ParameterIndexing: struct {
			Parent   struct{}
			Pos      struct{}
			Pkg      struct{}
			Name     struct{}
			Type     struct{}
			Exported struct{}
			Id       struct{}
			String   struct{}
		}{
			Parent:   struct{}{},
			Pos:      struct{}{},
			Pkg:      struct{}{},
			Name:     struct{}{},
			Type:     struct{}{},
			Exported: struct{}{},
			Id:       struct{}{},
			String:   struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Object type
func (m *MoqObject) Mock() *MoqObject_mock { return m.Moq }

func (m *MoqObject_mock) Parent() (result1 *types.Scope) {
	m.Moq.Scene.T.Helper()
	params := MoqObject_Parent_params{}
	var results *MoqObject_Parent_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Parent {
		paramsKey := m.Moq.ParamsKey_Parent(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Parent(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Parent(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Parent(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqObject_mock) Pos() (result1 token.Pos) {
	m.Moq.Scene.T.Helper()
	params := MoqObject_Pos_params{}
	var results *MoqObject_Pos_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Pos {
		paramsKey := m.Moq.ParamsKey_Pos(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Pos(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Pos(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Pos(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqObject_mock) Pkg() (result1 *types.Package) {
	m.Moq.Scene.T.Helper()
	params := MoqObject_Pkg_params{}
	var results *MoqObject_Pkg_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Pkg {
		paramsKey := m.Moq.ParamsKey_Pkg(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Pkg(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Pkg(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Pkg(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqObject_mock) Name() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqObject_Name_params{}
	var results *MoqObject_Name_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Name {
		paramsKey := m.Moq.ParamsKey_Name(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Name(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Name(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Name(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqObject_mock) Type() (result1 types.Type) {
	m.Moq.Scene.T.Helper()
	params := MoqObject_Type_params{}
	var results *MoqObject_Type_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Type {
		paramsKey := m.Moq.ParamsKey_Type(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Type(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Type(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Type(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqObject_mock) Exported() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqObject_Exported_params{}
	var results *MoqObject_Exported_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Exported {
		paramsKey := m.Moq.ParamsKey_Exported(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Exported(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Exported(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Exported(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqObject_mock) Id() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqObject_Id_params{}
	var results *MoqObject_Id_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Id {
		paramsKey := m.Moq.ParamsKey_Id(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Id(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Id(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Id(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqObject_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqObject_String_params{}
	var results *MoqObject_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Object type
func (m *MoqObject) OnCall() *MoqObject_recorder {
	return &MoqObject_recorder{
		Moq: m,
	}
}

func (m *MoqObject_recorder) Parent() *MoqObject_Parent_fnRecorder {
	return &MoqObject_Parent_fnRecorder{
		Params:   MoqObject_Parent_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqObject_Parent_fnRecorder) Any() *MoqObject_Parent_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Parent(r.Params))
		return nil
	}
	return &MoqObject_Parent_anyParams{Recorder: r}
}

func (r *MoqObject_Parent_fnRecorder) Seq() *MoqObject_Parent_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Parent(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqObject_Parent_fnRecorder) NoSeq() *MoqObject_Parent_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Parent(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqObject_Parent_fnRecorder) ReturnResults(result1 *types.Scope) *MoqObject_Parent_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Scope
		}
		Sequence   uint32
		DoFn       MoqObject_Parent_doFn
		DoReturnFn MoqObject_Parent_doReturnFn
	}{
		Values: &struct {
			Result1 *types.Scope
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqObject_Parent_fnRecorder) AndDo(fn MoqObject_Parent_doFn) *MoqObject_Parent_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqObject_Parent_fnRecorder) DoReturnResults(fn MoqObject_Parent_doReturnFn) *MoqObject_Parent_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Scope
		}
		Sequence   uint32
		DoFn       MoqObject_Parent_doFn
		DoReturnFn MoqObject_Parent_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqObject_Parent_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqObject_Parent_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Parent {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqObject_Parent_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqObject_Parent_paramsKey]*MoqObject_Parent_results{},
		}
		r.Moq.ResultsByParams_Parent = append(r.Moq.ResultsByParams_Parent, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Parent) {
			copy(r.Moq.ResultsByParams_Parent[insertAt+1:], r.Moq.ResultsByParams_Parent[insertAt:0])
			r.Moq.ResultsByParams_Parent[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Parent(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqObject_Parent_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqObject_Parent_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqObject_Parent_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *types.Scope
				}
				Sequence   uint32
				DoFn       MoqObject_Parent_doFn
				DoReturnFn MoqObject_Parent_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqObject) PrettyParams_Parent(params MoqObject_Parent_params) string {
	return fmt.Sprintf("Parent()")
}

func (m *MoqObject) ParamsKey_Parent(params MoqObject_Parent_params, anyParams uint64) MoqObject_Parent_paramsKey {
	m.Scene.T.Helper()
	return MoqObject_Parent_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqObject_recorder) Pos() *MoqObject_Pos_fnRecorder {
	return &MoqObject_Pos_fnRecorder{
		Params:   MoqObject_Pos_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqObject_Pos_fnRecorder) Any() *MoqObject_Pos_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Pos(r.Params))
		return nil
	}
	return &MoqObject_Pos_anyParams{Recorder: r}
}

func (r *MoqObject_Pos_fnRecorder) Seq() *MoqObject_Pos_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Pos(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqObject_Pos_fnRecorder) NoSeq() *MoqObject_Pos_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Pos(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqObject_Pos_fnRecorder) ReturnResults(result1 token.Pos) *MoqObject_Pos_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 token.Pos
		}
		Sequence   uint32
		DoFn       MoqObject_Pos_doFn
		DoReturnFn MoqObject_Pos_doReturnFn
	}{
		Values: &struct {
			Result1 token.Pos
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqObject_Pos_fnRecorder) AndDo(fn MoqObject_Pos_doFn) *MoqObject_Pos_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqObject_Pos_fnRecorder) DoReturnResults(fn MoqObject_Pos_doReturnFn) *MoqObject_Pos_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 token.Pos
		}
		Sequence   uint32
		DoFn       MoqObject_Pos_doFn
		DoReturnFn MoqObject_Pos_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqObject_Pos_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqObject_Pos_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Pos {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqObject_Pos_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqObject_Pos_paramsKey]*MoqObject_Pos_results{},
		}
		r.Moq.ResultsByParams_Pos = append(r.Moq.ResultsByParams_Pos, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Pos) {
			copy(r.Moq.ResultsByParams_Pos[insertAt+1:], r.Moq.ResultsByParams_Pos[insertAt:0])
			r.Moq.ResultsByParams_Pos[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Pos(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqObject_Pos_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqObject_Pos_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqObject_Pos_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 token.Pos
				}
				Sequence   uint32
				DoFn       MoqObject_Pos_doFn
				DoReturnFn MoqObject_Pos_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqObject) PrettyParams_Pos(params MoqObject_Pos_params) string { return fmt.Sprintf("Pos()") }

func (m *MoqObject) ParamsKey_Pos(params MoqObject_Pos_params, anyParams uint64) MoqObject_Pos_paramsKey {
	m.Scene.T.Helper()
	return MoqObject_Pos_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqObject_recorder) Pkg() *MoqObject_Pkg_fnRecorder {
	return &MoqObject_Pkg_fnRecorder{
		Params:   MoqObject_Pkg_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqObject_Pkg_fnRecorder) Any() *MoqObject_Pkg_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Pkg(r.Params))
		return nil
	}
	return &MoqObject_Pkg_anyParams{Recorder: r}
}

func (r *MoqObject_Pkg_fnRecorder) Seq() *MoqObject_Pkg_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Pkg(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqObject_Pkg_fnRecorder) NoSeq() *MoqObject_Pkg_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Pkg(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqObject_Pkg_fnRecorder) ReturnResults(result1 *types.Package) *MoqObject_Pkg_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Package
		}
		Sequence   uint32
		DoFn       MoqObject_Pkg_doFn
		DoReturnFn MoqObject_Pkg_doReturnFn
	}{
		Values: &struct {
			Result1 *types.Package
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqObject_Pkg_fnRecorder) AndDo(fn MoqObject_Pkg_doFn) *MoqObject_Pkg_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqObject_Pkg_fnRecorder) DoReturnResults(fn MoqObject_Pkg_doReturnFn) *MoqObject_Pkg_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.Package
		}
		Sequence   uint32
		DoFn       MoqObject_Pkg_doFn
		DoReturnFn MoqObject_Pkg_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqObject_Pkg_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqObject_Pkg_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Pkg {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqObject_Pkg_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqObject_Pkg_paramsKey]*MoqObject_Pkg_results{},
		}
		r.Moq.ResultsByParams_Pkg = append(r.Moq.ResultsByParams_Pkg, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Pkg) {
			copy(r.Moq.ResultsByParams_Pkg[insertAt+1:], r.Moq.ResultsByParams_Pkg[insertAt:0])
			r.Moq.ResultsByParams_Pkg[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Pkg(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqObject_Pkg_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqObject_Pkg_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqObject_Pkg_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *types.Package
				}
				Sequence   uint32
				DoFn       MoqObject_Pkg_doFn
				DoReturnFn MoqObject_Pkg_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqObject) PrettyParams_Pkg(params MoqObject_Pkg_params) string { return fmt.Sprintf("Pkg()") }

func (m *MoqObject) ParamsKey_Pkg(params MoqObject_Pkg_params, anyParams uint64) MoqObject_Pkg_paramsKey {
	m.Scene.T.Helper()
	return MoqObject_Pkg_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqObject_recorder) Name() *MoqObject_Name_fnRecorder {
	return &MoqObject_Name_fnRecorder{
		Params:   MoqObject_Name_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqObject_Name_fnRecorder) Any() *MoqObject_Name_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	return &MoqObject_Name_anyParams{Recorder: r}
}

func (r *MoqObject_Name_fnRecorder) Seq() *MoqObject_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqObject_Name_fnRecorder) NoSeq() *MoqObject_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqObject_Name_fnRecorder) ReturnResults(result1 string) *MoqObject_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqObject_Name_doFn
		DoReturnFn MoqObject_Name_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqObject_Name_fnRecorder) AndDo(fn MoqObject_Name_doFn) *MoqObject_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqObject_Name_fnRecorder) DoReturnResults(fn MoqObject_Name_doReturnFn) *MoqObject_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqObject_Name_doFn
		DoReturnFn MoqObject_Name_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqObject_Name_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqObject_Name_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Name {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqObject_Name_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqObject_Name_paramsKey]*MoqObject_Name_results{},
		}
		r.Moq.ResultsByParams_Name = append(r.Moq.ResultsByParams_Name, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Name) {
			copy(r.Moq.ResultsByParams_Name[insertAt+1:], r.Moq.ResultsByParams_Name[insertAt:0])
			r.Moq.ResultsByParams_Name[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Name(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqObject_Name_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqObject_Name_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqObject_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqObject_Name_doFn
				DoReturnFn MoqObject_Name_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqObject) PrettyParams_Name(params MoqObject_Name_params) string {
	return fmt.Sprintf("Name()")
}

func (m *MoqObject) ParamsKey_Name(params MoqObject_Name_params, anyParams uint64) MoqObject_Name_paramsKey {
	m.Scene.T.Helper()
	return MoqObject_Name_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqObject_recorder) Type() *MoqObject_Type_fnRecorder {
	return &MoqObject_Type_fnRecorder{
		Params:   MoqObject_Type_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqObject_Type_fnRecorder) Any() *MoqObject_Type_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Type(r.Params))
		return nil
	}
	return &MoqObject_Type_anyParams{Recorder: r}
}

func (r *MoqObject_Type_fnRecorder) Seq() *MoqObject_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Type(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqObject_Type_fnRecorder) NoSeq() *MoqObject_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Type(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqObject_Type_fnRecorder) ReturnResults(result1 types.Type) *MoqObject_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqObject_Type_doFn
		DoReturnFn MoqObject_Type_doReturnFn
	}{
		Values: &struct {
			Result1 types.Type
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqObject_Type_fnRecorder) AndDo(fn MoqObject_Type_doFn) *MoqObject_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqObject_Type_fnRecorder) DoReturnResults(fn MoqObject_Type_doReturnFn) *MoqObject_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqObject_Type_doFn
		DoReturnFn MoqObject_Type_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqObject_Type_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqObject_Type_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Type {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqObject_Type_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqObject_Type_paramsKey]*MoqObject_Type_results{},
		}
		r.Moq.ResultsByParams_Type = append(r.Moq.ResultsByParams_Type, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Type) {
			copy(r.Moq.ResultsByParams_Type[insertAt+1:], r.Moq.ResultsByParams_Type[insertAt:0])
			r.Moq.ResultsByParams_Type[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Type(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqObject_Type_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqObject_Type_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqObject_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 types.Type
				}
				Sequence   uint32
				DoFn       MoqObject_Type_doFn
				DoReturnFn MoqObject_Type_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqObject) PrettyParams_Type(params MoqObject_Type_params) string {
	return fmt.Sprintf("Type()")
}

func (m *MoqObject) ParamsKey_Type(params MoqObject_Type_params, anyParams uint64) MoqObject_Type_paramsKey {
	m.Scene.T.Helper()
	return MoqObject_Type_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqObject_recorder) Exported() *MoqObject_Exported_fnRecorder {
	return &MoqObject_Exported_fnRecorder{
		Params:   MoqObject_Exported_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqObject_Exported_fnRecorder) Any() *MoqObject_Exported_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Exported(r.Params))
		return nil
	}
	return &MoqObject_Exported_anyParams{Recorder: r}
}

func (r *MoqObject_Exported_fnRecorder) Seq() *MoqObject_Exported_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Exported(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqObject_Exported_fnRecorder) NoSeq() *MoqObject_Exported_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Exported(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqObject_Exported_fnRecorder) ReturnResults(result1 bool) *MoqObject_Exported_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqObject_Exported_doFn
		DoReturnFn MoqObject_Exported_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqObject_Exported_fnRecorder) AndDo(fn MoqObject_Exported_doFn) *MoqObject_Exported_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqObject_Exported_fnRecorder) DoReturnResults(fn MoqObject_Exported_doReturnFn) *MoqObject_Exported_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqObject_Exported_doFn
		DoReturnFn MoqObject_Exported_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqObject_Exported_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqObject_Exported_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Exported {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqObject_Exported_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqObject_Exported_paramsKey]*MoqObject_Exported_results{},
		}
		r.Moq.ResultsByParams_Exported = append(r.Moq.ResultsByParams_Exported, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Exported) {
			copy(r.Moq.ResultsByParams_Exported[insertAt+1:], r.Moq.ResultsByParams_Exported[insertAt:0])
			r.Moq.ResultsByParams_Exported[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Exported(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqObject_Exported_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqObject_Exported_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqObject_Exported_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqObject_Exported_doFn
				DoReturnFn MoqObject_Exported_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqObject) PrettyParams_Exported(params MoqObject_Exported_params) string {
	return fmt.Sprintf("Exported()")
}

func (m *MoqObject) ParamsKey_Exported(params MoqObject_Exported_params, anyParams uint64) MoqObject_Exported_paramsKey {
	m.Scene.T.Helper()
	return MoqObject_Exported_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqObject_recorder) Id() *MoqObject_Id_fnRecorder {
	return &MoqObject_Id_fnRecorder{
		Params:   MoqObject_Id_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqObject_Id_fnRecorder) Any() *MoqObject_Id_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Id(r.Params))
		return nil
	}
	return &MoqObject_Id_anyParams{Recorder: r}
}

func (r *MoqObject_Id_fnRecorder) Seq() *MoqObject_Id_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Id(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqObject_Id_fnRecorder) NoSeq() *MoqObject_Id_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Id(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqObject_Id_fnRecorder) ReturnResults(result1 string) *MoqObject_Id_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqObject_Id_doFn
		DoReturnFn MoqObject_Id_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqObject_Id_fnRecorder) AndDo(fn MoqObject_Id_doFn) *MoqObject_Id_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqObject_Id_fnRecorder) DoReturnResults(fn MoqObject_Id_doReturnFn) *MoqObject_Id_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqObject_Id_doFn
		DoReturnFn MoqObject_Id_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqObject_Id_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqObject_Id_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Id {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqObject_Id_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqObject_Id_paramsKey]*MoqObject_Id_results{},
		}
		r.Moq.ResultsByParams_Id = append(r.Moq.ResultsByParams_Id, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Id) {
			copy(r.Moq.ResultsByParams_Id[insertAt+1:], r.Moq.ResultsByParams_Id[insertAt:0])
			r.Moq.ResultsByParams_Id[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Id(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqObject_Id_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqObject_Id_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqObject_Id_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqObject_Id_doFn
				DoReturnFn MoqObject_Id_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqObject) PrettyParams_Id(params MoqObject_Id_params) string { return fmt.Sprintf("Id()") }

func (m *MoqObject) ParamsKey_Id(params MoqObject_Id_params, anyParams uint64) MoqObject_Id_paramsKey {
	m.Scene.T.Helper()
	return MoqObject_Id_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqObject_recorder) String() *MoqObject_String_fnRecorder {
	return &MoqObject_String_fnRecorder{
		Params:   MoqObject_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqObject_String_fnRecorder) Any() *MoqObject_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqObject_String_anyParams{Recorder: r}
}

func (r *MoqObject_String_fnRecorder) Seq() *MoqObject_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqObject_String_fnRecorder) NoSeq() *MoqObject_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqObject_String_fnRecorder) ReturnResults(result1 string) *MoqObject_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqObject_String_doFn
		DoReturnFn MoqObject_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqObject_String_fnRecorder) AndDo(fn MoqObject_String_doFn) *MoqObject_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqObject_String_fnRecorder) DoReturnResults(fn MoqObject_String_doReturnFn) *MoqObject_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqObject_String_doFn
		DoReturnFn MoqObject_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqObject_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqObject_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqObject_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqObject_String_paramsKey]*MoqObject_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqObject_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqObject_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqObject_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqObject_String_doFn
				DoReturnFn MoqObject_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqObject) PrettyParams_String(params MoqObject_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqObject) ParamsKey_String(params MoqObject_String_params, anyParams uint64) MoqObject_String_paramsKey {
	m.Scene.T.Helper()
	return MoqObject_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqObject) Reset() {
	m.ResultsByParams_Parent = nil
	m.ResultsByParams_Pos = nil
	m.ResultsByParams_Pkg = nil
	m.ResultsByParams_Name = nil
	m.ResultsByParams_Type = nil
	m.ResultsByParams_Exported = nil
	m.ResultsByParams_Id = nil
	m.ResultsByParams_String = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqObject) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Parent {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Parent(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Pos {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Pos(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Pkg {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Pkg(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Name {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Name(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Type {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Type(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Exported {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Exported(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Id {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Id(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
}
