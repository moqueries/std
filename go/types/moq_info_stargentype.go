// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package types

import (
	"fmt"
	"go/ast"
	"go/types"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that types.Info_starGenType is mocked
// completely
var _ Info_starGenType = (*MoqInfo_starGenType_mock)(nil)

// Info_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Info_starGenType interface {
	TypeOf(e ast.Expr) types.Type
	ObjectOf(id *ast.Ident) types.Object
}

// MoqInfo_starGenType holds the state of a moq of the Info_starGenType type
type MoqInfo_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqInfo_starGenType_mock

	ResultsByParams_TypeOf   []MoqInfo_starGenType_TypeOf_resultsByParams
	ResultsByParams_ObjectOf []MoqInfo_starGenType_ObjectOf_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			TypeOf struct {
				E moq.ParamIndexing
			}
			ObjectOf struct {
				Id moq.ParamIndexing
			}
		}
	}
	// MoqInfo_starGenType_mock isolates the mock interface of the Info_starGenType
}

// type
type MoqInfo_starGenType_mock struct {
	Moq *MoqInfo_starGenType
}

// MoqInfo_starGenType_recorder isolates the recorder interface of the
// Info_starGenType type
type MoqInfo_starGenType_recorder struct {
	Moq *MoqInfo_starGenType
}

// MoqInfo_starGenType_TypeOf_params holds the params of the Info_starGenType
// type
type MoqInfo_starGenType_TypeOf_params struct{ E ast.Expr }

// MoqInfo_starGenType_TypeOf_paramsKey holds the map key params of the
// Info_starGenType type
type MoqInfo_starGenType_TypeOf_paramsKey struct {
	Params struct{ E ast.Expr }
	Hashes struct{ E hash.Hash }
}

// MoqInfo_starGenType_TypeOf_resultsByParams contains the results for a given
// set of parameters for the Info_starGenType type
type MoqInfo_starGenType_TypeOf_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqInfo_starGenType_TypeOf_paramsKey]*MoqInfo_starGenType_TypeOf_results
}

// MoqInfo_starGenType_TypeOf_doFn defines the type of function needed when
// calling AndDo for the Info_starGenType type
type MoqInfo_starGenType_TypeOf_doFn func(e ast.Expr)

// MoqInfo_starGenType_TypeOf_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Info_starGenType type
type MoqInfo_starGenType_TypeOf_doReturnFn func(e ast.Expr) types.Type

// MoqInfo_starGenType_TypeOf_results holds the results of the Info_starGenType
// type
type MoqInfo_starGenType_TypeOf_results struct {
	Params  MoqInfo_starGenType_TypeOf_params
	Results []struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqInfo_starGenType_TypeOf_doFn
		DoReturnFn MoqInfo_starGenType_TypeOf_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqInfo_starGenType_TypeOf_fnRecorder routes recorded function calls to the
// MoqInfo_starGenType moq
type MoqInfo_starGenType_TypeOf_fnRecorder struct {
	Params    MoqInfo_starGenType_TypeOf_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqInfo_starGenType_TypeOf_results
	Moq       *MoqInfo_starGenType
}

// MoqInfo_starGenType_TypeOf_anyParams isolates the any params functions of
// the Info_starGenType type
type MoqInfo_starGenType_TypeOf_anyParams struct {
	Recorder *MoqInfo_starGenType_TypeOf_fnRecorder
}

// MoqInfo_starGenType_ObjectOf_params holds the params of the Info_starGenType
// type
type MoqInfo_starGenType_ObjectOf_params struct{ Id *ast.Ident }

// MoqInfo_starGenType_ObjectOf_paramsKey holds the map key params of the
// Info_starGenType type
type MoqInfo_starGenType_ObjectOf_paramsKey struct {
	Params struct{ Id *ast.Ident }
	Hashes struct{ Id hash.Hash }
}

// MoqInfo_starGenType_ObjectOf_resultsByParams contains the results for a
// given set of parameters for the Info_starGenType type
type MoqInfo_starGenType_ObjectOf_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqInfo_starGenType_ObjectOf_paramsKey]*MoqInfo_starGenType_ObjectOf_results
}

// MoqInfo_starGenType_ObjectOf_doFn defines the type of function needed when
// calling AndDo for the Info_starGenType type
type MoqInfo_starGenType_ObjectOf_doFn func(id *ast.Ident)

// MoqInfo_starGenType_ObjectOf_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Info_starGenType type
type MoqInfo_starGenType_ObjectOf_doReturnFn func(id *ast.Ident) types.Object

// MoqInfo_starGenType_ObjectOf_results holds the results of the
// Info_starGenType type
type MoqInfo_starGenType_ObjectOf_results struct {
	Params  MoqInfo_starGenType_ObjectOf_params
	Results []struct {
		Values *struct {
			Result1 types.Object
		}
		Sequence   uint32
		DoFn       MoqInfo_starGenType_ObjectOf_doFn
		DoReturnFn MoqInfo_starGenType_ObjectOf_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqInfo_starGenType_ObjectOf_fnRecorder routes recorded function calls to
// the MoqInfo_starGenType moq
type MoqInfo_starGenType_ObjectOf_fnRecorder struct {
	Params    MoqInfo_starGenType_ObjectOf_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqInfo_starGenType_ObjectOf_results
	Moq       *MoqInfo_starGenType
}

// MoqInfo_starGenType_ObjectOf_anyParams isolates the any params functions of
// the Info_starGenType type
type MoqInfo_starGenType_ObjectOf_anyParams struct {
	Recorder *MoqInfo_starGenType_ObjectOf_fnRecorder
}

// NewMoqInfo_starGenType creates a new moq of the Info_starGenType type
func NewMoqInfo_starGenType(scene *moq.Scene, config *moq.Config) *MoqInfo_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqInfo_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqInfo_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				TypeOf struct {
					E moq.ParamIndexing
				}
				ObjectOf struct {
					Id moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			TypeOf struct {
				E moq.ParamIndexing
			}
			ObjectOf struct {
				Id moq.ParamIndexing
			}
		}{
			TypeOf: struct {
				E moq.ParamIndexing
			}{
				E: moq.ParamIndexByHash,
			},
			ObjectOf: struct {
				Id moq.ParamIndexing
			}{
				Id: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Info_starGenType type
func (m *MoqInfo_starGenType) Mock() *MoqInfo_starGenType_mock { return m.Moq }

func (m *MoqInfo_starGenType_mock) TypeOf(e ast.Expr) (result1 types.Type) {
	m.Moq.Scene.T.Helper()
	params := MoqInfo_starGenType_TypeOf_params{
		E: e,
	}
	var results *MoqInfo_starGenType_TypeOf_results
	for _, resultsByParams := range m.Moq.ResultsByParams_TypeOf {
		paramsKey := m.Moq.ParamsKey_TypeOf(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_TypeOf(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_TypeOf(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_TypeOf(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(e)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(e)
	}
	return
}

func (m *MoqInfo_starGenType_mock) ObjectOf(id *ast.Ident) (result1 types.Object) {
	m.Moq.Scene.T.Helper()
	params := MoqInfo_starGenType_ObjectOf_params{
		Id: id,
	}
	var results *MoqInfo_starGenType_ObjectOf_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ObjectOf {
		paramsKey := m.Moq.ParamsKey_ObjectOf(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ObjectOf(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ObjectOf(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ObjectOf(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(id)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(id)
	}
	return
}

// OnCall returns the recorder implementation of the Info_starGenType type
func (m *MoqInfo_starGenType) OnCall() *MoqInfo_starGenType_recorder {
	return &MoqInfo_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqInfo_starGenType_recorder) TypeOf(e ast.Expr) *MoqInfo_starGenType_TypeOf_fnRecorder {
	return &MoqInfo_starGenType_TypeOf_fnRecorder{
		Params: MoqInfo_starGenType_TypeOf_params{
			E: e,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqInfo_starGenType_TypeOf_fnRecorder) Any() *MoqInfo_starGenType_TypeOf_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_TypeOf(r.Params))
		return nil
	}
	return &MoqInfo_starGenType_TypeOf_anyParams{Recorder: r}
}

func (a *MoqInfo_starGenType_TypeOf_anyParams) E() *MoqInfo_starGenType_TypeOf_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqInfo_starGenType_TypeOf_fnRecorder) Seq() *MoqInfo_starGenType_TypeOf_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_TypeOf(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqInfo_starGenType_TypeOf_fnRecorder) NoSeq() *MoqInfo_starGenType_TypeOf_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_TypeOf(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqInfo_starGenType_TypeOf_fnRecorder) ReturnResults(result1 types.Type) *MoqInfo_starGenType_TypeOf_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqInfo_starGenType_TypeOf_doFn
		DoReturnFn MoqInfo_starGenType_TypeOf_doReturnFn
	}{
		Values: &struct {
			Result1 types.Type
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqInfo_starGenType_TypeOf_fnRecorder) AndDo(fn MoqInfo_starGenType_TypeOf_doFn) *MoqInfo_starGenType_TypeOf_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqInfo_starGenType_TypeOf_fnRecorder) DoReturnResults(fn MoqInfo_starGenType_TypeOf_doReturnFn) *MoqInfo_starGenType_TypeOf_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqInfo_starGenType_TypeOf_doFn
		DoReturnFn MoqInfo_starGenType_TypeOf_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqInfo_starGenType_TypeOf_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqInfo_starGenType_TypeOf_resultsByParams
	for n, res := range r.Moq.ResultsByParams_TypeOf {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqInfo_starGenType_TypeOf_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqInfo_starGenType_TypeOf_paramsKey]*MoqInfo_starGenType_TypeOf_results{},
		}
		r.Moq.ResultsByParams_TypeOf = append(r.Moq.ResultsByParams_TypeOf, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_TypeOf) {
			copy(r.Moq.ResultsByParams_TypeOf[insertAt+1:], r.Moq.ResultsByParams_TypeOf[insertAt:0])
			r.Moq.ResultsByParams_TypeOf[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_TypeOf(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqInfo_starGenType_TypeOf_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqInfo_starGenType_TypeOf_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqInfo_starGenType_TypeOf_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 types.Type
				}
				Sequence   uint32
				DoFn       MoqInfo_starGenType_TypeOf_doFn
				DoReturnFn MoqInfo_starGenType_TypeOf_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqInfo_starGenType) PrettyParams_TypeOf(params MoqInfo_starGenType_TypeOf_params) string {
	return fmt.Sprintf("TypeOf(%#v)", params.E)
}

func (m *MoqInfo_starGenType) ParamsKey_TypeOf(params MoqInfo_starGenType_TypeOf_params, anyParams uint64) MoqInfo_starGenType_TypeOf_paramsKey {
	m.Scene.T.Helper()
	var eUsed ast.Expr
	var eUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.TypeOf.E == moq.ParamIndexByValue {
			eUsed = params.E
		} else {
			eUsedHash = hash.DeepHash(params.E)
		}
	}
	return MoqInfo_starGenType_TypeOf_paramsKey{
		Params: struct{ E ast.Expr }{
			E: eUsed,
		},
		Hashes: struct{ E hash.Hash }{
			E: eUsedHash,
		},
	}
}

func (m *MoqInfo_starGenType_recorder) ObjectOf(id *ast.Ident) *MoqInfo_starGenType_ObjectOf_fnRecorder {
	return &MoqInfo_starGenType_ObjectOf_fnRecorder{
		Params: MoqInfo_starGenType_ObjectOf_params{
			Id: id,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqInfo_starGenType_ObjectOf_fnRecorder) Any() *MoqInfo_starGenType_ObjectOf_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ObjectOf(r.Params))
		return nil
	}
	return &MoqInfo_starGenType_ObjectOf_anyParams{Recorder: r}
}

func (a *MoqInfo_starGenType_ObjectOf_anyParams) Id() *MoqInfo_starGenType_ObjectOf_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqInfo_starGenType_ObjectOf_fnRecorder) Seq() *MoqInfo_starGenType_ObjectOf_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ObjectOf(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqInfo_starGenType_ObjectOf_fnRecorder) NoSeq() *MoqInfo_starGenType_ObjectOf_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ObjectOf(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqInfo_starGenType_ObjectOf_fnRecorder) ReturnResults(result1 types.Object) *MoqInfo_starGenType_ObjectOf_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Object
		}
		Sequence   uint32
		DoFn       MoqInfo_starGenType_ObjectOf_doFn
		DoReturnFn MoqInfo_starGenType_ObjectOf_doReturnFn
	}{
		Values: &struct {
			Result1 types.Object
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqInfo_starGenType_ObjectOf_fnRecorder) AndDo(fn MoqInfo_starGenType_ObjectOf_doFn) *MoqInfo_starGenType_ObjectOf_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqInfo_starGenType_ObjectOf_fnRecorder) DoReturnResults(fn MoqInfo_starGenType_ObjectOf_doReturnFn) *MoqInfo_starGenType_ObjectOf_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Object
		}
		Sequence   uint32
		DoFn       MoqInfo_starGenType_ObjectOf_doFn
		DoReturnFn MoqInfo_starGenType_ObjectOf_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqInfo_starGenType_ObjectOf_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqInfo_starGenType_ObjectOf_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ObjectOf {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqInfo_starGenType_ObjectOf_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqInfo_starGenType_ObjectOf_paramsKey]*MoqInfo_starGenType_ObjectOf_results{},
		}
		r.Moq.ResultsByParams_ObjectOf = append(r.Moq.ResultsByParams_ObjectOf, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ObjectOf) {
			copy(r.Moq.ResultsByParams_ObjectOf[insertAt+1:], r.Moq.ResultsByParams_ObjectOf[insertAt:0])
			r.Moq.ResultsByParams_ObjectOf[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ObjectOf(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqInfo_starGenType_ObjectOf_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqInfo_starGenType_ObjectOf_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqInfo_starGenType_ObjectOf_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 types.Object
				}
				Sequence   uint32
				DoFn       MoqInfo_starGenType_ObjectOf_doFn
				DoReturnFn MoqInfo_starGenType_ObjectOf_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqInfo_starGenType) PrettyParams_ObjectOf(params MoqInfo_starGenType_ObjectOf_params) string {
	return fmt.Sprintf("ObjectOf(%#v)", params.Id)
}

func (m *MoqInfo_starGenType) ParamsKey_ObjectOf(params MoqInfo_starGenType_ObjectOf_params, anyParams uint64) MoqInfo_starGenType_ObjectOf_paramsKey {
	m.Scene.T.Helper()
	var idUsed *ast.Ident
	var idUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ObjectOf.Id == moq.ParamIndexByValue {
			idUsed = params.Id
		} else {
			idUsedHash = hash.DeepHash(params.Id)
		}
	}
	return MoqInfo_starGenType_ObjectOf_paramsKey{
		Params: struct{ Id *ast.Ident }{
			Id: idUsed,
		},
		Hashes: struct{ Id hash.Hash }{
			Id: idUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqInfo_starGenType) Reset() {
	m.ResultsByParams_TypeOf = nil
	m.ResultsByParams_ObjectOf = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqInfo_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_TypeOf {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_TypeOf(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ObjectOf {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ObjectOf(results.Params))
			}
		}
	}
}
