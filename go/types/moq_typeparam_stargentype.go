// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package types

import (
	"fmt"
	"go/types"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that types.TypeParam_starGenType is
// mocked completely
var _ TypeParam_starGenType = (*MoqTypeParam_starGenType_mock)(nil)

// TypeParam_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type TypeParam_starGenType interface {
	Index() int
	Obj() *types.TypeName
	Constraint() types.Type
	SetConstraint(bound types.Type)
	Underlying() types.Type
	String() string
}

// MoqTypeParam_starGenType holds the state of a moq of the
// TypeParam_starGenType type
type MoqTypeParam_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqTypeParam_starGenType_mock

	ResultsByParams_Index         []MoqTypeParam_starGenType_Index_resultsByParams
	ResultsByParams_Obj           []MoqTypeParam_starGenType_Obj_resultsByParams
	ResultsByParams_Constraint    []MoqTypeParam_starGenType_Constraint_resultsByParams
	ResultsByParams_SetConstraint []MoqTypeParam_starGenType_SetConstraint_resultsByParams
	ResultsByParams_Underlying    []MoqTypeParam_starGenType_Underlying_resultsByParams
	ResultsByParams_String        []MoqTypeParam_starGenType_String_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Index         struct{}
			Obj           struct{}
			Constraint    struct{}
			SetConstraint struct {
				Bound moq.ParamIndexing
			}
			Underlying struct{}
			String     struct{}
		}
	}
}

// MoqTypeParam_starGenType_mock isolates the mock interface of the
// TypeParam_starGenType type
type MoqTypeParam_starGenType_mock struct {
	Moq *MoqTypeParam_starGenType
}

// MoqTypeParam_starGenType_recorder isolates the recorder interface of the
// TypeParam_starGenType type
type MoqTypeParam_starGenType_recorder struct {
	Moq *MoqTypeParam_starGenType
}

// MoqTypeParam_starGenType_Index_params holds the params of the
// TypeParam_starGenType type
type MoqTypeParam_starGenType_Index_params struct{}

// MoqTypeParam_starGenType_Index_paramsKey holds the map key params of the
// TypeParam_starGenType type
type MoqTypeParam_starGenType_Index_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTypeParam_starGenType_Index_resultsByParams contains the results for a
// given set of parameters for the TypeParam_starGenType type
type MoqTypeParam_starGenType_Index_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTypeParam_starGenType_Index_paramsKey]*MoqTypeParam_starGenType_Index_results
}

// MoqTypeParam_starGenType_Index_doFn defines the type of function needed when
// calling AndDo for the TypeParam_starGenType type
type MoqTypeParam_starGenType_Index_doFn func()

// MoqTypeParam_starGenType_Index_doReturnFn defines the type of function
// needed when calling DoReturnResults for the TypeParam_starGenType type
type MoqTypeParam_starGenType_Index_doReturnFn func() int

// MoqTypeParam_starGenType_Index_results holds the results of the
// TypeParam_starGenType type
type MoqTypeParam_starGenType_Index_results struct {
	Params  MoqTypeParam_starGenType_Index_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqTypeParam_starGenType_Index_doFn
		DoReturnFn MoqTypeParam_starGenType_Index_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTypeParam_starGenType_Index_fnRecorder routes recorded function calls to
// the MoqTypeParam_starGenType moq
type MoqTypeParam_starGenType_Index_fnRecorder struct {
	Params    MoqTypeParam_starGenType_Index_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTypeParam_starGenType_Index_results
	Moq       *MoqTypeParam_starGenType
}

// MoqTypeParam_starGenType_Index_anyParams isolates the any params functions
// of the TypeParam_starGenType type
type MoqTypeParam_starGenType_Index_anyParams struct {
	Recorder *MoqTypeParam_starGenType_Index_fnRecorder
}

// MoqTypeParam_starGenType_Obj_params holds the params of the
// TypeParam_starGenType type
type MoqTypeParam_starGenType_Obj_params struct{}

// MoqTypeParam_starGenType_Obj_paramsKey holds the map key params of the
// TypeParam_starGenType type
type MoqTypeParam_starGenType_Obj_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTypeParam_starGenType_Obj_resultsByParams contains the results for a
// given set of parameters for the TypeParam_starGenType type
type MoqTypeParam_starGenType_Obj_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTypeParam_starGenType_Obj_paramsKey]*MoqTypeParam_starGenType_Obj_results
}

// MoqTypeParam_starGenType_Obj_doFn defines the type of function needed when
// calling AndDo for the TypeParam_starGenType type
type MoqTypeParam_starGenType_Obj_doFn func()

// MoqTypeParam_starGenType_Obj_doReturnFn defines the type of function needed
// when calling DoReturnResults for the TypeParam_starGenType type
type MoqTypeParam_starGenType_Obj_doReturnFn func() *types.TypeName

// MoqTypeParam_starGenType_Obj_results holds the results of the
// TypeParam_starGenType type
type MoqTypeParam_starGenType_Obj_results struct {
	Params  MoqTypeParam_starGenType_Obj_params
	Results []struct {
		Values *struct {
			Result1 *types.TypeName
		}
		Sequence   uint32
		DoFn       MoqTypeParam_starGenType_Obj_doFn
		DoReturnFn MoqTypeParam_starGenType_Obj_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTypeParam_starGenType_Obj_fnRecorder routes recorded function calls to
// the MoqTypeParam_starGenType moq
type MoqTypeParam_starGenType_Obj_fnRecorder struct {
	Params    MoqTypeParam_starGenType_Obj_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTypeParam_starGenType_Obj_results
	Moq       *MoqTypeParam_starGenType
}

// MoqTypeParam_starGenType_Obj_anyParams isolates the any params functions of
// the TypeParam_starGenType type
type MoqTypeParam_starGenType_Obj_anyParams struct {
	Recorder *MoqTypeParam_starGenType_Obj_fnRecorder
}

// MoqTypeParam_starGenType_Constraint_params holds the params of the
// TypeParam_starGenType type
type MoqTypeParam_starGenType_Constraint_params struct{}

// MoqTypeParam_starGenType_Constraint_paramsKey holds the map key params of
// the TypeParam_starGenType type
type MoqTypeParam_starGenType_Constraint_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTypeParam_starGenType_Constraint_resultsByParams contains the results for
// a given set of parameters for the TypeParam_starGenType type
type MoqTypeParam_starGenType_Constraint_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTypeParam_starGenType_Constraint_paramsKey]*MoqTypeParam_starGenType_Constraint_results
}

// MoqTypeParam_starGenType_Constraint_doFn defines the type of function needed
// when calling AndDo for the TypeParam_starGenType type
type MoqTypeParam_starGenType_Constraint_doFn func()

// MoqTypeParam_starGenType_Constraint_doReturnFn defines the type of function
// needed when calling DoReturnResults for the TypeParam_starGenType type
type MoqTypeParam_starGenType_Constraint_doReturnFn func() types.Type

// MoqTypeParam_starGenType_Constraint_results holds the results of the
// TypeParam_starGenType type
type MoqTypeParam_starGenType_Constraint_results struct {
	Params  MoqTypeParam_starGenType_Constraint_params
	Results []struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqTypeParam_starGenType_Constraint_doFn
		DoReturnFn MoqTypeParam_starGenType_Constraint_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTypeParam_starGenType_Constraint_fnRecorder routes recorded function
// calls to the MoqTypeParam_starGenType moq
type MoqTypeParam_starGenType_Constraint_fnRecorder struct {
	Params    MoqTypeParam_starGenType_Constraint_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTypeParam_starGenType_Constraint_results
	Moq       *MoqTypeParam_starGenType
}

// MoqTypeParam_starGenType_Constraint_anyParams isolates the any params
// functions of the TypeParam_starGenType type
type MoqTypeParam_starGenType_Constraint_anyParams struct {
	Recorder *MoqTypeParam_starGenType_Constraint_fnRecorder
}

// MoqTypeParam_starGenType_SetConstraint_params holds the params of the
// TypeParam_starGenType type
type MoqTypeParam_starGenType_SetConstraint_params struct{ Bound types.Type }

// MoqTypeParam_starGenType_SetConstraint_paramsKey holds the map key params of
// the TypeParam_starGenType type
type MoqTypeParam_starGenType_SetConstraint_paramsKey struct {
	Params struct{ Bound types.Type }
	Hashes struct{ Bound hash.Hash }
}

// MoqTypeParam_starGenType_SetConstraint_resultsByParams contains the results
// for a given set of parameters for the TypeParam_starGenType type
type MoqTypeParam_starGenType_SetConstraint_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTypeParam_starGenType_SetConstraint_paramsKey]*MoqTypeParam_starGenType_SetConstraint_results
}

// MoqTypeParam_starGenType_SetConstraint_doFn defines the type of function
// needed when calling AndDo for the TypeParam_starGenType type
type MoqTypeParam_starGenType_SetConstraint_doFn func(bound types.Type)

// MoqTypeParam_starGenType_SetConstraint_doReturnFn defines the type of
// function needed when calling DoReturnResults for the TypeParam_starGenType
// type
type MoqTypeParam_starGenType_SetConstraint_doReturnFn func(bound types.Type)

// MoqTypeParam_starGenType_SetConstraint_results holds the results of the
// TypeParam_starGenType type
type MoqTypeParam_starGenType_SetConstraint_results struct {
	Params  MoqTypeParam_starGenType_SetConstraint_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqTypeParam_starGenType_SetConstraint_doFn
		DoReturnFn MoqTypeParam_starGenType_SetConstraint_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTypeParam_starGenType_SetConstraint_fnRecorder routes recorded function
// calls to the MoqTypeParam_starGenType moq
type MoqTypeParam_starGenType_SetConstraint_fnRecorder struct {
	Params    MoqTypeParam_starGenType_SetConstraint_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTypeParam_starGenType_SetConstraint_results
	Moq       *MoqTypeParam_starGenType
}

// MoqTypeParam_starGenType_SetConstraint_anyParams isolates the any params
// functions of the TypeParam_starGenType type
type MoqTypeParam_starGenType_SetConstraint_anyParams struct {
	Recorder *MoqTypeParam_starGenType_SetConstraint_fnRecorder
}

// MoqTypeParam_starGenType_Underlying_params holds the params of the
// TypeParam_starGenType type
type MoqTypeParam_starGenType_Underlying_params struct{}

// MoqTypeParam_starGenType_Underlying_paramsKey holds the map key params of
// the TypeParam_starGenType type
type MoqTypeParam_starGenType_Underlying_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTypeParam_starGenType_Underlying_resultsByParams contains the results for
// a given set of parameters for the TypeParam_starGenType type
type MoqTypeParam_starGenType_Underlying_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTypeParam_starGenType_Underlying_paramsKey]*MoqTypeParam_starGenType_Underlying_results
}

// MoqTypeParam_starGenType_Underlying_doFn defines the type of function needed
// when calling AndDo for the TypeParam_starGenType type
type MoqTypeParam_starGenType_Underlying_doFn func()

// MoqTypeParam_starGenType_Underlying_doReturnFn defines the type of function
// needed when calling DoReturnResults for the TypeParam_starGenType type
type MoqTypeParam_starGenType_Underlying_doReturnFn func() types.Type

// MoqTypeParam_starGenType_Underlying_results holds the results of the
// TypeParam_starGenType type
type MoqTypeParam_starGenType_Underlying_results struct {
	Params  MoqTypeParam_starGenType_Underlying_params
	Results []struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqTypeParam_starGenType_Underlying_doFn
		DoReturnFn MoqTypeParam_starGenType_Underlying_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTypeParam_starGenType_Underlying_fnRecorder routes recorded function
// calls to the MoqTypeParam_starGenType moq
type MoqTypeParam_starGenType_Underlying_fnRecorder struct {
	Params    MoqTypeParam_starGenType_Underlying_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTypeParam_starGenType_Underlying_results
	Moq       *MoqTypeParam_starGenType
}

// MoqTypeParam_starGenType_Underlying_anyParams isolates the any params
// functions of the TypeParam_starGenType type
type MoqTypeParam_starGenType_Underlying_anyParams struct {
	Recorder *MoqTypeParam_starGenType_Underlying_fnRecorder
}

// MoqTypeParam_starGenType_String_params holds the params of the
// TypeParam_starGenType type
type MoqTypeParam_starGenType_String_params struct{}

// MoqTypeParam_starGenType_String_paramsKey holds the map key params of the
// TypeParam_starGenType type
type MoqTypeParam_starGenType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTypeParam_starGenType_String_resultsByParams contains the results for a
// given set of parameters for the TypeParam_starGenType type
type MoqTypeParam_starGenType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTypeParam_starGenType_String_paramsKey]*MoqTypeParam_starGenType_String_results
}

// MoqTypeParam_starGenType_String_doFn defines the type of function needed
// when calling AndDo for the TypeParam_starGenType type
type MoqTypeParam_starGenType_String_doFn func()

// MoqTypeParam_starGenType_String_doReturnFn defines the type of function
// needed when calling DoReturnResults for the TypeParam_starGenType type
type MoqTypeParam_starGenType_String_doReturnFn func() string

// MoqTypeParam_starGenType_String_results holds the results of the
// TypeParam_starGenType type
type MoqTypeParam_starGenType_String_results struct {
	Params  MoqTypeParam_starGenType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqTypeParam_starGenType_String_doFn
		DoReturnFn MoqTypeParam_starGenType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTypeParam_starGenType_String_fnRecorder routes recorded function calls to
// the MoqTypeParam_starGenType moq
type MoqTypeParam_starGenType_String_fnRecorder struct {
	Params    MoqTypeParam_starGenType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTypeParam_starGenType_String_results
	Moq       *MoqTypeParam_starGenType
}

// MoqTypeParam_starGenType_String_anyParams isolates the any params functions
// of the TypeParam_starGenType type
type MoqTypeParam_starGenType_String_anyParams struct {
	Recorder *MoqTypeParam_starGenType_String_fnRecorder
}

// NewMoqTypeParam_starGenType creates a new moq of the TypeParam_starGenType
// type
func NewMoqTypeParam_starGenType(scene *moq.Scene, config *moq.Config) *MoqTypeParam_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqTypeParam_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqTypeParam_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Index         struct{}
				Obj           struct{}
				Constraint    struct{}
				SetConstraint struct {
					Bound moq.ParamIndexing
				}
				Underlying struct{}
				String     struct{}
			}
		}{ParameterIndexing: struct {
			Index         struct{}
			Obj           struct{}
			Constraint    struct{}
			SetConstraint struct {
				Bound moq.ParamIndexing
			}
			Underlying struct{}
			String     struct{}
		}{
			Index:      struct{}{},
			Obj:        struct{}{},
			Constraint: struct{}{},
			SetConstraint: struct {
				Bound moq.ParamIndexing
			}{
				Bound: moq.ParamIndexByHash,
			},
			Underlying: struct{}{},
			String:     struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the TypeParam_starGenType type
func (m *MoqTypeParam_starGenType) Mock() *MoqTypeParam_starGenType_mock { return m.Moq }

func (m *MoqTypeParam_starGenType_mock) Index() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqTypeParam_starGenType_Index_params{}
	var results *MoqTypeParam_starGenType_Index_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Index {
		paramsKey := m.Moq.ParamsKey_Index(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Index(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Index(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Index(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqTypeParam_starGenType_mock) Obj() (result1 *types.TypeName) {
	m.Moq.Scene.T.Helper()
	params := MoqTypeParam_starGenType_Obj_params{}
	var results *MoqTypeParam_starGenType_Obj_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Obj {
		paramsKey := m.Moq.ParamsKey_Obj(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Obj(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Obj(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Obj(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqTypeParam_starGenType_mock) Constraint() (result1 types.Type) {
	m.Moq.Scene.T.Helper()
	params := MoqTypeParam_starGenType_Constraint_params{}
	var results *MoqTypeParam_starGenType_Constraint_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Constraint {
		paramsKey := m.Moq.ParamsKey_Constraint(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Constraint(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Constraint(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Constraint(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqTypeParam_starGenType_mock) SetConstraint(bound types.Type) {
	m.Moq.Scene.T.Helper()
	params := MoqTypeParam_starGenType_SetConstraint_params{
		Bound: bound,
	}
	var results *MoqTypeParam_starGenType_SetConstraint_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetConstraint {
		paramsKey := m.Moq.ParamsKey_SetConstraint(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetConstraint(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetConstraint(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetConstraint(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(bound)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(bound)
	}
	return
}

func (m *MoqTypeParam_starGenType_mock) Underlying() (result1 types.Type) {
	m.Moq.Scene.T.Helper()
	params := MoqTypeParam_starGenType_Underlying_params{}
	var results *MoqTypeParam_starGenType_Underlying_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Underlying {
		paramsKey := m.Moq.ParamsKey_Underlying(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Underlying(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Underlying(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Underlying(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqTypeParam_starGenType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqTypeParam_starGenType_String_params{}
	var results *MoqTypeParam_starGenType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the TypeParam_starGenType type
func (m *MoqTypeParam_starGenType) OnCall() *MoqTypeParam_starGenType_recorder {
	return &MoqTypeParam_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqTypeParam_starGenType_recorder) Index() *MoqTypeParam_starGenType_Index_fnRecorder {
	return &MoqTypeParam_starGenType_Index_fnRecorder{
		Params:   MoqTypeParam_starGenType_Index_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTypeParam_starGenType_Index_fnRecorder) Any() *MoqTypeParam_starGenType_Index_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Index(r.Params))
		return nil
	}
	return &MoqTypeParam_starGenType_Index_anyParams{Recorder: r}
}

func (r *MoqTypeParam_starGenType_Index_fnRecorder) Seq() *MoqTypeParam_starGenType_Index_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Index(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTypeParam_starGenType_Index_fnRecorder) NoSeq() *MoqTypeParam_starGenType_Index_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Index(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTypeParam_starGenType_Index_fnRecorder) ReturnResults(result1 int) *MoqTypeParam_starGenType_Index_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqTypeParam_starGenType_Index_doFn
		DoReturnFn MoqTypeParam_starGenType_Index_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTypeParam_starGenType_Index_fnRecorder) AndDo(fn MoqTypeParam_starGenType_Index_doFn) *MoqTypeParam_starGenType_Index_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTypeParam_starGenType_Index_fnRecorder) DoReturnResults(fn MoqTypeParam_starGenType_Index_doReturnFn) *MoqTypeParam_starGenType_Index_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqTypeParam_starGenType_Index_doFn
		DoReturnFn MoqTypeParam_starGenType_Index_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTypeParam_starGenType_Index_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTypeParam_starGenType_Index_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Index {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTypeParam_starGenType_Index_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTypeParam_starGenType_Index_paramsKey]*MoqTypeParam_starGenType_Index_results{},
		}
		r.Moq.ResultsByParams_Index = append(r.Moq.ResultsByParams_Index, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Index) {
			copy(r.Moq.ResultsByParams_Index[insertAt+1:], r.Moq.ResultsByParams_Index[insertAt:0])
			r.Moq.ResultsByParams_Index[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Index(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTypeParam_starGenType_Index_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTypeParam_starGenType_Index_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTypeParam_starGenType_Index_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqTypeParam_starGenType_Index_doFn
				DoReturnFn MoqTypeParam_starGenType_Index_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTypeParam_starGenType) PrettyParams_Index(params MoqTypeParam_starGenType_Index_params) string {
	return fmt.Sprintf("Index()")
}

func (m *MoqTypeParam_starGenType) ParamsKey_Index(params MoqTypeParam_starGenType_Index_params, anyParams uint64) MoqTypeParam_starGenType_Index_paramsKey {
	m.Scene.T.Helper()
	return MoqTypeParam_starGenType_Index_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTypeParam_starGenType_recorder) Obj() *MoqTypeParam_starGenType_Obj_fnRecorder {
	return &MoqTypeParam_starGenType_Obj_fnRecorder{
		Params:   MoqTypeParam_starGenType_Obj_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTypeParam_starGenType_Obj_fnRecorder) Any() *MoqTypeParam_starGenType_Obj_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Obj(r.Params))
		return nil
	}
	return &MoqTypeParam_starGenType_Obj_anyParams{Recorder: r}
}

func (r *MoqTypeParam_starGenType_Obj_fnRecorder) Seq() *MoqTypeParam_starGenType_Obj_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Obj(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTypeParam_starGenType_Obj_fnRecorder) NoSeq() *MoqTypeParam_starGenType_Obj_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Obj(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTypeParam_starGenType_Obj_fnRecorder) ReturnResults(result1 *types.TypeName) *MoqTypeParam_starGenType_Obj_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.TypeName
		}
		Sequence   uint32
		DoFn       MoqTypeParam_starGenType_Obj_doFn
		DoReturnFn MoqTypeParam_starGenType_Obj_doReturnFn
	}{
		Values: &struct {
			Result1 *types.TypeName
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTypeParam_starGenType_Obj_fnRecorder) AndDo(fn MoqTypeParam_starGenType_Obj_doFn) *MoqTypeParam_starGenType_Obj_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTypeParam_starGenType_Obj_fnRecorder) DoReturnResults(fn MoqTypeParam_starGenType_Obj_doReturnFn) *MoqTypeParam_starGenType_Obj_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *types.TypeName
		}
		Sequence   uint32
		DoFn       MoqTypeParam_starGenType_Obj_doFn
		DoReturnFn MoqTypeParam_starGenType_Obj_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTypeParam_starGenType_Obj_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTypeParam_starGenType_Obj_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Obj {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTypeParam_starGenType_Obj_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTypeParam_starGenType_Obj_paramsKey]*MoqTypeParam_starGenType_Obj_results{},
		}
		r.Moq.ResultsByParams_Obj = append(r.Moq.ResultsByParams_Obj, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Obj) {
			copy(r.Moq.ResultsByParams_Obj[insertAt+1:], r.Moq.ResultsByParams_Obj[insertAt:0])
			r.Moq.ResultsByParams_Obj[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Obj(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTypeParam_starGenType_Obj_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTypeParam_starGenType_Obj_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTypeParam_starGenType_Obj_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *types.TypeName
				}
				Sequence   uint32
				DoFn       MoqTypeParam_starGenType_Obj_doFn
				DoReturnFn MoqTypeParam_starGenType_Obj_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTypeParam_starGenType) PrettyParams_Obj(params MoqTypeParam_starGenType_Obj_params) string {
	return fmt.Sprintf("Obj()")
}

func (m *MoqTypeParam_starGenType) ParamsKey_Obj(params MoqTypeParam_starGenType_Obj_params, anyParams uint64) MoqTypeParam_starGenType_Obj_paramsKey {
	m.Scene.T.Helper()
	return MoqTypeParam_starGenType_Obj_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTypeParam_starGenType_recorder) Constraint() *MoqTypeParam_starGenType_Constraint_fnRecorder {
	return &MoqTypeParam_starGenType_Constraint_fnRecorder{
		Params:   MoqTypeParam_starGenType_Constraint_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTypeParam_starGenType_Constraint_fnRecorder) Any() *MoqTypeParam_starGenType_Constraint_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Constraint(r.Params))
		return nil
	}
	return &MoqTypeParam_starGenType_Constraint_anyParams{Recorder: r}
}

func (r *MoqTypeParam_starGenType_Constraint_fnRecorder) Seq() *MoqTypeParam_starGenType_Constraint_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Constraint(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTypeParam_starGenType_Constraint_fnRecorder) NoSeq() *MoqTypeParam_starGenType_Constraint_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Constraint(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTypeParam_starGenType_Constraint_fnRecorder) ReturnResults(result1 types.Type) *MoqTypeParam_starGenType_Constraint_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqTypeParam_starGenType_Constraint_doFn
		DoReturnFn MoqTypeParam_starGenType_Constraint_doReturnFn
	}{
		Values: &struct {
			Result1 types.Type
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTypeParam_starGenType_Constraint_fnRecorder) AndDo(fn MoqTypeParam_starGenType_Constraint_doFn) *MoqTypeParam_starGenType_Constraint_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTypeParam_starGenType_Constraint_fnRecorder) DoReturnResults(fn MoqTypeParam_starGenType_Constraint_doReturnFn) *MoqTypeParam_starGenType_Constraint_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqTypeParam_starGenType_Constraint_doFn
		DoReturnFn MoqTypeParam_starGenType_Constraint_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTypeParam_starGenType_Constraint_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTypeParam_starGenType_Constraint_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Constraint {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTypeParam_starGenType_Constraint_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTypeParam_starGenType_Constraint_paramsKey]*MoqTypeParam_starGenType_Constraint_results{},
		}
		r.Moq.ResultsByParams_Constraint = append(r.Moq.ResultsByParams_Constraint, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Constraint) {
			copy(r.Moq.ResultsByParams_Constraint[insertAt+1:], r.Moq.ResultsByParams_Constraint[insertAt:0])
			r.Moq.ResultsByParams_Constraint[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Constraint(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTypeParam_starGenType_Constraint_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTypeParam_starGenType_Constraint_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTypeParam_starGenType_Constraint_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 types.Type
				}
				Sequence   uint32
				DoFn       MoqTypeParam_starGenType_Constraint_doFn
				DoReturnFn MoqTypeParam_starGenType_Constraint_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTypeParam_starGenType) PrettyParams_Constraint(params MoqTypeParam_starGenType_Constraint_params) string {
	return fmt.Sprintf("Constraint()")
}

func (m *MoqTypeParam_starGenType) ParamsKey_Constraint(params MoqTypeParam_starGenType_Constraint_params, anyParams uint64) MoqTypeParam_starGenType_Constraint_paramsKey {
	m.Scene.T.Helper()
	return MoqTypeParam_starGenType_Constraint_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTypeParam_starGenType_recorder) SetConstraint(bound types.Type) *MoqTypeParam_starGenType_SetConstraint_fnRecorder {
	return &MoqTypeParam_starGenType_SetConstraint_fnRecorder{
		Params: MoqTypeParam_starGenType_SetConstraint_params{
			Bound: bound,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTypeParam_starGenType_SetConstraint_fnRecorder) Any() *MoqTypeParam_starGenType_SetConstraint_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetConstraint(r.Params))
		return nil
	}
	return &MoqTypeParam_starGenType_SetConstraint_anyParams{Recorder: r}
}

func (a *MoqTypeParam_starGenType_SetConstraint_anyParams) Bound() *MoqTypeParam_starGenType_SetConstraint_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqTypeParam_starGenType_SetConstraint_fnRecorder) Seq() *MoqTypeParam_starGenType_SetConstraint_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetConstraint(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTypeParam_starGenType_SetConstraint_fnRecorder) NoSeq() *MoqTypeParam_starGenType_SetConstraint_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetConstraint(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTypeParam_starGenType_SetConstraint_fnRecorder) ReturnResults() *MoqTypeParam_starGenType_SetConstraint_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqTypeParam_starGenType_SetConstraint_doFn
		DoReturnFn MoqTypeParam_starGenType_SetConstraint_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTypeParam_starGenType_SetConstraint_fnRecorder) AndDo(fn MoqTypeParam_starGenType_SetConstraint_doFn) *MoqTypeParam_starGenType_SetConstraint_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTypeParam_starGenType_SetConstraint_fnRecorder) DoReturnResults(fn MoqTypeParam_starGenType_SetConstraint_doReturnFn) *MoqTypeParam_starGenType_SetConstraint_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqTypeParam_starGenType_SetConstraint_doFn
		DoReturnFn MoqTypeParam_starGenType_SetConstraint_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTypeParam_starGenType_SetConstraint_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTypeParam_starGenType_SetConstraint_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetConstraint {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTypeParam_starGenType_SetConstraint_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTypeParam_starGenType_SetConstraint_paramsKey]*MoqTypeParam_starGenType_SetConstraint_results{},
		}
		r.Moq.ResultsByParams_SetConstraint = append(r.Moq.ResultsByParams_SetConstraint, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetConstraint) {
			copy(r.Moq.ResultsByParams_SetConstraint[insertAt+1:], r.Moq.ResultsByParams_SetConstraint[insertAt:0])
			r.Moq.ResultsByParams_SetConstraint[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetConstraint(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTypeParam_starGenType_SetConstraint_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTypeParam_starGenType_SetConstraint_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTypeParam_starGenType_SetConstraint_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqTypeParam_starGenType_SetConstraint_doFn
				DoReturnFn MoqTypeParam_starGenType_SetConstraint_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTypeParam_starGenType) PrettyParams_SetConstraint(params MoqTypeParam_starGenType_SetConstraint_params) string {
	return fmt.Sprintf("SetConstraint(%#v)", params.Bound)
}

func (m *MoqTypeParam_starGenType) ParamsKey_SetConstraint(params MoqTypeParam_starGenType_SetConstraint_params, anyParams uint64) MoqTypeParam_starGenType_SetConstraint_paramsKey {
	m.Scene.T.Helper()
	var boundUsed types.Type
	var boundUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetConstraint.Bound == moq.ParamIndexByValue {
			boundUsed = params.Bound
		} else {
			boundUsedHash = hash.DeepHash(params.Bound)
		}
	}
	return MoqTypeParam_starGenType_SetConstraint_paramsKey{
		Params: struct{ Bound types.Type }{
			Bound: boundUsed,
		},
		Hashes: struct{ Bound hash.Hash }{
			Bound: boundUsedHash,
		},
	}
}

func (m *MoqTypeParam_starGenType_recorder) Underlying() *MoqTypeParam_starGenType_Underlying_fnRecorder {
	return &MoqTypeParam_starGenType_Underlying_fnRecorder{
		Params:   MoqTypeParam_starGenType_Underlying_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTypeParam_starGenType_Underlying_fnRecorder) Any() *MoqTypeParam_starGenType_Underlying_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Underlying(r.Params))
		return nil
	}
	return &MoqTypeParam_starGenType_Underlying_anyParams{Recorder: r}
}

func (r *MoqTypeParam_starGenType_Underlying_fnRecorder) Seq() *MoqTypeParam_starGenType_Underlying_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Underlying(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTypeParam_starGenType_Underlying_fnRecorder) NoSeq() *MoqTypeParam_starGenType_Underlying_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Underlying(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTypeParam_starGenType_Underlying_fnRecorder) ReturnResults(result1 types.Type) *MoqTypeParam_starGenType_Underlying_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqTypeParam_starGenType_Underlying_doFn
		DoReturnFn MoqTypeParam_starGenType_Underlying_doReturnFn
	}{
		Values: &struct {
			Result1 types.Type
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTypeParam_starGenType_Underlying_fnRecorder) AndDo(fn MoqTypeParam_starGenType_Underlying_doFn) *MoqTypeParam_starGenType_Underlying_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTypeParam_starGenType_Underlying_fnRecorder) DoReturnResults(fn MoqTypeParam_starGenType_Underlying_doReturnFn) *MoqTypeParam_starGenType_Underlying_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 types.Type
		}
		Sequence   uint32
		DoFn       MoqTypeParam_starGenType_Underlying_doFn
		DoReturnFn MoqTypeParam_starGenType_Underlying_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTypeParam_starGenType_Underlying_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTypeParam_starGenType_Underlying_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Underlying {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTypeParam_starGenType_Underlying_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTypeParam_starGenType_Underlying_paramsKey]*MoqTypeParam_starGenType_Underlying_results{},
		}
		r.Moq.ResultsByParams_Underlying = append(r.Moq.ResultsByParams_Underlying, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Underlying) {
			copy(r.Moq.ResultsByParams_Underlying[insertAt+1:], r.Moq.ResultsByParams_Underlying[insertAt:0])
			r.Moq.ResultsByParams_Underlying[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Underlying(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTypeParam_starGenType_Underlying_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTypeParam_starGenType_Underlying_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTypeParam_starGenType_Underlying_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 types.Type
				}
				Sequence   uint32
				DoFn       MoqTypeParam_starGenType_Underlying_doFn
				DoReturnFn MoqTypeParam_starGenType_Underlying_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTypeParam_starGenType) PrettyParams_Underlying(params MoqTypeParam_starGenType_Underlying_params) string {
	return fmt.Sprintf("Underlying()")
}

func (m *MoqTypeParam_starGenType) ParamsKey_Underlying(params MoqTypeParam_starGenType_Underlying_params, anyParams uint64) MoqTypeParam_starGenType_Underlying_paramsKey {
	m.Scene.T.Helper()
	return MoqTypeParam_starGenType_Underlying_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTypeParam_starGenType_recorder) String() *MoqTypeParam_starGenType_String_fnRecorder {
	return &MoqTypeParam_starGenType_String_fnRecorder{
		Params:   MoqTypeParam_starGenType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTypeParam_starGenType_String_fnRecorder) Any() *MoqTypeParam_starGenType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqTypeParam_starGenType_String_anyParams{Recorder: r}
}

func (r *MoqTypeParam_starGenType_String_fnRecorder) Seq() *MoqTypeParam_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTypeParam_starGenType_String_fnRecorder) NoSeq() *MoqTypeParam_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTypeParam_starGenType_String_fnRecorder) ReturnResults(result1 string) *MoqTypeParam_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqTypeParam_starGenType_String_doFn
		DoReturnFn MoqTypeParam_starGenType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTypeParam_starGenType_String_fnRecorder) AndDo(fn MoqTypeParam_starGenType_String_doFn) *MoqTypeParam_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTypeParam_starGenType_String_fnRecorder) DoReturnResults(fn MoqTypeParam_starGenType_String_doReturnFn) *MoqTypeParam_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqTypeParam_starGenType_String_doFn
		DoReturnFn MoqTypeParam_starGenType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTypeParam_starGenType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTypeParam_starGenType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTypeParam_starGenType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTypeParam_starGenType_String_paramsKey]*MoqTypeParam_starGenType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTypeParam_starGenType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTypeParam_starGenType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTypeParam_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqTypeParam_starGenType_String_doFn
				DoReturnFn MoqTypeParam_starGenType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTypeParam_starGenType) PrettyParams_String(params MoqTypeParam_starGenType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqTypeParam_starGenType) ParamsKey_String(params MoqTypeParam_starGenType_String_params, anyParams uint64) MoqTypeParam_starGenType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqTypeParam_starGenType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqTypeParam_starGenType) Reset() {
	m.ResultsByParams_Index = nil
	m.ResultsByParams_Obj = nil
	m.ResultsByParams_Constraint = nil
	m.ResultsByParams_SetConstraint = nil
	m.ResultsByParams_Underlying = nil
	m.ResultsByParams_String = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqTypeParam_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Index {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Index(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Obj {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Obj(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Constraint {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Constraint(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetConstraint {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetConstraint(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Underlying {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Underlying(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
}
