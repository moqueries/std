// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package types

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that types.TypeAndValue_genType is
// mocked completely
var _ TypeAndValue_genType = (*MoqTypeAndValue_genType_mock)(nil)

// TypeAndValue_genType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type TypeAndValue_genType interface {
	IsVoid() bool
	IsType() bool
	IsBuiltin() bool
	IsValue() bool
	IsNil() bool
	Addressable() bool
	Assignable() bool
	HasOk() bool
}

// MoqTypeAndValue_genType holds the state of a moq of the TypeAndValue_genType
// type
type MoqTypeAndValue_genType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqTypeAndValue_genType_mock

	ResultsByParams_IsVoid      []MoqTypeAndValue_genType_IsVoid_resultsByParams
	ResultsByParams_IsType      []MoqTypeAndValue_genType_IsType_resultsByParams
	ResultsByParams_IsBuiltin   []MoqTypeAndValue_genType_IsBuiltin_resultsByParams
	ResultsByParams_IsValue     []MoqTypeAndValue_genType_IsValue_resultsByParams
	ResultsByParams_IsNil       []MoqTypeAndValue_genType_IsNil_resultsByParams
	ResultsByParams_Addressable []MoqTypeAndValue_genType_Addressable_resultsByParams
	ResultsByParams_Assignable  []MoqTypeAndValue_genType_Assignable_resultsByParams
	ResultsByParams_HasOk       []MoqTypeAndValue_genType_HasOk_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			IsVoid      struct{}
			IsType      struct{}
			IsBuiltin   struct{}
			IsValue     struct{}
			IsNil       struct{}
			Addressable struct{}
			Assignable  struct{}
			HasOk       struct{}
		}
	}
}

// MoqTypeAndValue_genType_mock isolates the mock interface of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_mock struct {
	Moq *MoqTypeAndValue_genType
}

// MoqTypeAndValue_genType_recorder isolates the recorder interface of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_recorder struct {
	Moq *MoqTypeAndValue_genType
}

// MoqTypeAndValue_genType_IsVoid_params holds the params of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_IsVoid_params struct{}

// MoqTypeAndValue_genType_IsVoid_paramsKey holds the map key params of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_IsVoid_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTypeAndValue_genType_IsVoid_resultsByParams contains the results for a
// given set of parameters for the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsVoid_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTypeAndValue_genType_IsVoid_paramsKey]*MoqTypeAndValue_genType_IsVoid_results
}

// MoqTypeAndValue_genType_IsVoid_doFn defines the type of function needed when
// calling AndDo for the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsVoid_doFn func()

// MoqTypeAndValue_genType_IsVoid_doReturnFn defines the type of function
// needed when calling DoReturnResults for the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsVoid_doReturnFn func() bool

// MoqTypeAndValue_genType_IsVoid_results holds the results of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_IsVoid_results struct {
	Params  MoqTypeAndValue_genType_IsVoid_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_IsVoid_doFn
		DoReturnFn MoqTypeAndValue_genType_IsVoid_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTypeAndValue_genType_IsVoid_fnRecorder routes recorded function calls to
// the MoqTypeAndValue_genType moq
type MoqTypeAndValue_genType_IsVoid_fnRecorder struct {
	Params    MoqTypeAndValue_genType_IsVoid_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTypeAndValue_genType_IsVoid_results
	Moq       *MoqTypeAndValue_genType
}

// MoqTypeAndValue_genType_IsVoid_anyParams isolates the any params functions
// of the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsVoid_anyParams struct {
	Recorder *MoqTypeAndValue_genType_IsVoid_fnRecorder
}

// MoqTypeAndValue_genType_IsType_params holds the params of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_IsType_params struct{}

// MoqTypeAndValue_genType_IsType_paramsKey holds the map key params of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_IsType_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTypeAndValue_genType_IsType_resultsByParams contains the results for a
// given set of parameters for the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsType_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTypeAndValue_genType_IsType_paramsKey]*MoqTypeAndValue_genType_IsType_results
}

// MoqTypeAndValue_genType_IsType_doFn defines the type of function needed when
// calling AndDo for the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsType_doFn func()

// MoqTypeAndValue_genType_IsType_doReturnFn defines the type of function
// needed when calling DoReturnResults for the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsType_doReturnFn func() bool

// MoqTypeAndValue_genType_IsType_results holds the results of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_IsType_results struct {
	Params  MoqTypeAndValue_genType_IsType_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_IsType_doFn
		DoReturnFn MoqTypeAndValue_genType_IsType_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTypeAndValue_genType_IsType_fnRecorder routes recorded function calls to
// the MoqTypeAndValue_genType moq
type MoqTypeAndValue_genType_IsType_fnRecorder struct {
	Params    MoqTypeAndValue_genType_IsType_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTypeAndValue_genType_IsType_results
	Moq       *MoqTypeAndValue_genType
}

// MoqTypeAndValue_genType_IsType_anyParams isolates the any params functions
// of the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsType_anyParams struct {
	Recorder *MoqTypeAndValue_genType_IsType_fnRecorder
}

// MoqTypeAndValue_genType_IsBuiltin_params holds the params of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_IsBuiltin_params struct{}

// MoqTypeAndValue_genType_IsBuiltin_paramsKey holds the map key params of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_IsBuiltin_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTypeAndValue_genType_IsBuiltin_resultsByParams contains the results for a
// given set of parameters for the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsBuiltin_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTypeAndValue_genType_IsBuiltin_paramsKey]*MoqTypeAndValue_genType_IsBuiltin_results
}

// MoqTypeAndValue_genType_IsBuiltin_doFn defines the type of function needed
// when calling AndDo for the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsBuiltin_doFn func()

// MoqTypeAndValue_genType_IsBuiltin_doReturnFn defines the type of function
// needed when calling DoReturnResults for the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsBuiltin_doReturnFn func() bool

// MoqTypeAndValue_genType_IsBuiltin_results holds the results of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_IsBuiltin_results struct {
	Params  MoqTypeAndValue_genType_IsBuiltin_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_IsBuiltin_doFn
		DoReturnFn MoqTypeAndValue_genType_IsBuiltin_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTypeAndValue_genType_IsBuiltin_fnRecorder routes recorded function calls
// to the MoqTypeAndValue_genType moq
type MoqTypeAndValue_genType_IsBuiltin_fnRecorder struct {
	Params    MoqTypeAndValue_genType_IsBuiltin_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTypeAndValue_genType_IsBuiltin_results
	Moq       *MoqTypeAndValue_genType
}

// MoqTypeAndValue_genType_IsBuiltin_anyParams isolates the any params
// functions of the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsBuiltin_anyParams struct {
	Recorder *MoqTypeAndValue_genType_IsBuiltin_fnRecorder
}

// MoqTypeAndValue_genType_IsValue_params holds the params of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_IsValue_params struct{}

// MoqTypeAndValue_genType_IsValue_paramsKey holds the map key params of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_IsValue_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTypeAndValue_genType_IsValue_resultsByParams contains the results for a
// given set of parameters for the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsValue_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTypeAndValue_genType_IsValue_paramsKey]*MoqTypeAndValue_genType_IsValue_results
}

// MoqTypeAndValue_genType_IsValue_doFn defines the type of function needed
// when calling AndDo for the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsValue_doFn func()

// MoqTypeAndValue_genType_IsValue_doReturnFn defines the type of function
// needed when calling DoReturnResults for the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsValue_doReturnFn func() bool

// MoqTypeAndValue_genType_IsValue_results holds the results of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_IsValue_results struct {
	Params  MoqTypeAndValue_genType_IsValue_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_IsValue_doFn
		DoReturnFn MoqTypeAndValue_genType_IsValue_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTypeAndValue_genType_IsValue_fnRecorder routes recorded function calls to
// the MoqTypeAndValue_genType moq
type MoqTypeAndValue_genType_IsValue_fnRecorder struct {
	Params    MoqTypeAndValue_genType_IsValue_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTypeAndValue_genType_IsValue_results
	Moq       *MoqTypeAndValue_genType
}

// MoqTypeAndValue_genType_IsValue_anyParams isolates the any params functions
// of the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsValue_anyParams struct {
	Recorder *MoqTypeAndValue_genType_IsValue_fnRecorder
}

// MoqTypeAndValue_genType_IsNil_params holds the params of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_IsNil_params struct{}

// MoqTypeAndValue_genType_IsNil_paramsKey holds the map key params of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_IsNil_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTypeAndValue_genType_IsNil_resultsByParams contains the results for a
// given set of parameters for the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsNil_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTypeAndValue_genType_IsNil_paramsKey]*MoqTypeAndValue_genType_IsNil_results
}

// MoqTypeAndValue_genType_IsNil_doFn defines the type of function needed when
// calling AndDo for the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsNil_doFn func()

// MoqTypeAndValue_genType_IsNil_doReturnFn defines the type of function needed
// when calling DoReturnResults for the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsNil_doReturnFn func() bool

// MoqTypeAndValue_genType_IsNil_results holds the results of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_IsNil_results struct {
	Params  MoqTypeAndValue_genType_IsNil_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_IsNil_doFn
		DoReturnFn MoqTypeAndValue_genType_IsNil_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTypeAndValue_genType_IsNil_fnRecorder routes recorded function calls to
// the MoqTypeAndValue_genType moq
type MoqTypeAndValue_genType_IsNil_fnRecorder struct {
	Params    MoqTypeAndValue_genType_IsNil_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTypeAndValue_genType_IsNil_results
	Moq       *MoqTypeAndValue_genType
}

// MoqTypeAndValue_genType_IsNil_anyParams isolates the any params functions of
// the TypeAndValue_genType type
type MoqTypeAndValue_genType_IsNil_anyParams struct {
	Recorder *MoqTypeAndValue_genType_IsNil_fnRecorder
}

// MoqTypeAndValue_genType_Addressable_params holds the params of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_Addressable_params struct{}

// MoqTypeAndValue_genType_Addressable_paramsKey holds the map key params of
// the TypeAndValue_genType type
type MoqTypeAndValue_genType_Addressable_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTypeAndValue_genType_Addressable_resultsByParams contains the results for
// a given set of parameters for the TypeAndValue_genType type
type MoqTypeAndValue_genType_Addressable_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTypeAndValue_genType_Addressable_paramsKey]*MoqTypeAndValue_genType_Addressable_results
}

// MoqTypeAndValue_genType_Addressable_doFn defines the type of function needed
// when calling AndDo for the TypeAndValue_genType type
type MoqTypeAndValue_genType_Addressable_doFn func()

// MoqTypeAndValue_genType_Addressable_doReturnFn defines the type of function
// needed when calling DoReturnResults for the TypeAndValue_genType type
type MoqTypeAndValue_genType_Addressable_doReturnFn func() bool

// MoqTypeAndValue_genType_Addressable_results holds the results of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_Addressable_results struct {
	Params  MoqTypeAndValue_genType_Addressable_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_Addressable_doFn
		DoReturnFn MoqTypeAndValue_genType_Addressable_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTypeAndValue_genType_Addressable_fnRecorder routes recorded function
// calls to the MoqTypeAndValue_genType moq
type MoqTypeAndValue_genType_Addressable_fnRecorder struct {
	Params    MoqTypeAndValue_genType_Addressable_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTypeAndValue_genType_Addressable_results
	Moq       *MoqTypeAndValue_genType
}

// MoqTypeAndValue_genType_Addressable_anyParams isolates the any params
// functions of the TypeAndValue_genType type
type MoqTypeAndValue_genType_Addressable_anyParams struct {
	Recorder *MoqTypeAndValue_genType_Addressable_fnRecorder
}

// MoqTypeAndValue_genType_Assignable_params holds the params of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_Assignable_params struct{}

// MoqTypeAndValue_genType_Assignable_paramsKey holds the map key params of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_Assignable_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTypeAndValue_genType_Assignable_resultsByParams contains the results for
// a given set of parameters for the TypeAndValue_genType type
type MoqTypeAndValue_genType_Assignable_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTypeAndValue_genType_Assignable_paramsKey]*MoqTypeAndValue_genType_Assignable_results
}

// MoqTypeAndValue_genType_Assignable_doFn defines the type of function needed
// when calling AndDo for the TypeAndValue_genType type
type MoqTypeAndValue_genType_Assignable_doFn func()

// MoqTypeAndValue_genType_Assignable_doReturnFn defines the type of function
// needed when calling DoReturnResults for the TypeAndValue_genType type
type MoqTypeAndValue_genType_Assignable_doReturnFn func() bool

// MoqTypeAndValue_genType_Assignable_results holds the results of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_Assignable_results struct {
	Params  MoqTypeAndValue_genType_Assignable_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_Assignable_doFn
		DoReturnFn MoqTypeAndValue_genType_Assignable_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTypeAndValue_genType_Assignable_fnRecorder routes recorded function calls
// to the MoqTypeAndValue_genType moq
type MoqTypeAndValue_genType_Assignable_fnRecorder struct {
	Params    MoqTypeAndValue_genType_Assignable_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTypeAndValue_genType_Assignable_results
	Moq       *MoqTypeAndValue_genType
}

// MoqTypeAndValue_genType_Assignable_anyParams isolates the any params
// functions of the TypeAndValue_genType type
type MoqTypeAndValue_genType_Assignable_anyParams struct {
	Recorder *MoqTypeAndValue_genType_Assignable_fnRecorder
}

// MoqTypeAndValue_genType_HasOk_params holds the params of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_HasOk_params struct{}

// MoqTypeAndValue_genType_HasOk_paramsKey holds the map key params of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_HasOk_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTypeAndValue_genType_HasOk_resultsByParams contains the results for a
// given set of parameters for the TypeAndValue_genType type
type MoqTypeAndValue_genType_HasOk_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTypeAndValue_genType_HasOk_paramsKey]*MoqTypeAndValue_genType_HasOk_results
}

// MoqTypeAndValue_genType_HasOk_doFn defines the type of function needed when
// calling AndDo for the TypeAndValue_genType type
type MoqTypeAndValue_genType_HasOk_doFn func()

// MoqTypeAndValue_genType_HasOk_doReturnFn defines the type of function needed
// when calling DoReturnResults for the TypeAndValue_genType type
type MoqTypeAndValue_genType_HasOk_doReturnFn func() bool

// MoqTypeAndValue_genType_HasOk_results holds the results of the
// TypeAndValue_genType type
type MoqTypeAndValue_genType_HasOk_results struct {
	Params  MoqTypeAndValue_genType_HasOk_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_HasOk_doFn
		DoReturnFn MoqTypeAndValue_genType_HasOk_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTypeAndValue_genType_HasOk_fnRecorder routes recorded function calls to
// the MoqTypeAndValue_genType moq
type MoqTypeAndValue_genType_HasOk_fnRecorder struct {
	Params    MoqTypeAndValue_genType_HasOk_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTypeAndValue_genType_HasOk_results
	Moq       *MoqTypeAndValue_genType
}

// MoqTypeAndValue_genType_HasOk_anyParams isolates the any params functions of
// the TypeAndValue_genType type
type MoqTypeAndValue_genType_HasOk_anyParams struct {
	Recorder *MoqTypeAndValue_genType_HasOk_fnRecorder
}

// NewMoqTypeAndValue_genType creates a new moq of the TypeAndValue_genType
// type
func NewMoqTypeAndValue_genType(scene *moq.Scene, config *moq.Config) *MoqTypeAndValue_genType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqTypeAndValue_genType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqTypeAndValue_genType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				IsVoid      struct{}
				IsType      struct{}
				IsBuiltin   struct{}
				IsValue     struct{}
				IsNil       struct{}
				Addressable struct{}
				Assignable  struct{}
				HasOk       struct{}
			}
		}{ParameterIndexing: struct {
			IsVoid      struct{}
			IsType      struct{}
			IsBuiltin   struct{}
			IsValue     struct{}
			IsNil       struct{}
			Addressable struct{}
			Assignable  struct{}
			HasOk       struct{}
		}{
			IsVoid:      struct{}{},
			IsType:      struct{}{},
			IsBuiltin:   struct{}{},
			IsValue:     struct{}{},
			IsNil:       struct{}{},
			Addressable: struct{}{},
			Assignable:  struct{}{},
			HasOk:       struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the TypeAndValue_genType type
func (m *MoqTypeAndValue_genType) Mock() *MoqTypeAndValue_genType_mock { return m.Moq }

func (m *MoqTypeAndValue_genType_mock) IsVoid() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqTypeAndValue_genType_IsVoid_params{}
	var results *MoqTypeAndValue_genType_IsVoid_results
	for _, resultsByParams := range m.Moq.ResultsByParams_IsVoid {
		paramsKey := m.Moq.ParamsKey_IsVoid(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_IsVoid(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_IsVoid(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_IsVoid(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqTypeAndValue_genType_mock) IsType() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqTypeAndValue_genType_IsType_params{}
	var results *MoqTypeAndValue_genType_IsType_results
	for _, resultsByParams := range m.Moq.ResultsByParams_IsType {
		paramsKey := m.Moq.ParamsKey_IsType(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_IsType(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_IsType(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_IsType(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqTypeAndValue_genType_mock) IsBuiltin() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqTypeAndValue_genType_IsBuiltin_params{}
	var results *MoqTypeAndValue_genType_IsBuiltin_results
	for _, resultsByParams := range m.Moq.ResultsByParams_IsBuiltin {
		paramsKey := m.Moq.ParamsKey_IsBuiltin(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_IsBuiltin(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_IsBuiltin(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_IsBuiltin(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqTypeAndValue_genType_mock) IsValue() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqTypeAndValue_genType_IsValue_params{}
	var results *MoqTypeAndValue_genType_IsValue_results
	for _, resultsByParams := range m.Moq.ResultsByParams_IsValue {
		paramsKey := m.Moq.ParamsKey_IsValue(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_IsValue(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_IsValue(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_IsValue(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqTypeAndValue_genType_mock) IsNil() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqTypeAndValue_genType_IsNil_params{}
	var results *MoqTypeAndValue_genType_IsNil_results
	for _, resultsByParams := range m.Moq.ResultsByParams_IsNil {
		paramsKey := m.Moq.ParamsKey_IsNil(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_IsNil(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_IsNil(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_IsNil(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqTypeAndValue_genType_mock) Addressable() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqTypeAndValue_genType_Addressable_params{}
	var results *MoqTypeAndValue_genType_Addressable_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Addressable {
		paramsKey := m.Moq.ParamsKey_Addressable(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Addressable(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Addressable(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Addressable(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqTypeAndValue_genType_mock) Assignable() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqTypeAndValue_genType_Assignable_params{}
	var results *MoqTypeAndValue_genType_Assignable_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Assignable {
		paramsKey := m.Moq.ParamsKey_Assignable(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Assignable(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Assignable(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Assignable(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqTypeAndValue_genType_mock) HasOk() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqTypeAndValue_genType_HasOk_params{}
	var results *MoqTypeAndValue_genType_HasOk_results
	for _, resultsByParams := range m.Moq.ResultsByParams_HasOk {
		paramsKey := m.Moq.ParamsKey_HasOk(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_HasOk(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_HasOk(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_HasOk(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the TypeAndValue_genType type
func (m *MoqTypeAndValue_genType) OnCall() *MoqTypeAndValue_genType_recorder {
	return &MoqTypeAndValue_genType_recorder{
		Moq: m,
	}
}

func (m *MoqTypeAndValue_genType_recorder) IsVoid() *MoqTypeAndValue_genType_IsVoid_fnRecorder {
	return &MoqTypeAndValue_genType_IsVoid_fnRecorder{
		Params:   MoqTypeAndValue_genType_IsVoid_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTypeAndValue_genType_IsVoid_fnRecorder) Any() *MoqTypeAndValue_genType_IsVoid_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsVoid(r.Params))
		return nil
	}
	return &MoqTypeAndValue_genType_IsVoid_anyParams{Recorder: r}
}

func (r *MoqTypeAndValue_genType_IsVoid_fnRecorder) Seq() *MoqTypeAndValue_genType_IsVoid_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsVoid(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTypeAndValue_genType_IsVoid_fnRecorder) NoSeq() *MoqTypeAndValue_genType_IsVoid_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsVoid(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTypeAndValue_genType_IsVoid_fnRecorder) ReturnResults(result1 bool) *MoqTypeAndValue_genType_IsVoid_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_IsVoid_doFn
		DoReturnFn MoqTypeAndValue_genType_IsVoid_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTypeAndValue_genType_IsVoid_fnRecorder) AndDo(fn MoqTypeAndValue_genType_IsVoid_doFn) *MoqTypeAndValue_genType_IsVoid_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTypeAndValue_genType_IsVoid_fnRecorder) DoReturnResults(fn MoqTypeAndValue_genType_IsVoid_doReturnFn) *MoqTypeAndValue_genType_IsVoid_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_IsVoid_doFn
		DoReturnFn MoqTypeAndValue_genType_IsVoid_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTypeAndValue_genType_IsVoid_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTypeAndValue_genType_IsVoid_resultsByParams
	for n, res := range r.Moq.ResultsByParams_IsVoid {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTypeAndValue_genType_IsVoid_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTypeAndValue_genType_IsVoid_paramsKey]*MoqTypeAndValue_genType_IsVoid_results{},
		}
		r.Moq.ResultsByParams_IsVoid = append(r.Moq.ResultsByParams_IsVoid, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_IsVoid) {
			copy(r.Moq.ResultsByParams_IsVoid[insertAt+1:], r.Moq.ResultsByParams_IsVoid[insertAt:0])
			r.Moq.ResultsByParams_IsVoid[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_IsVoid(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTypeAndValue_genType_IsVoid_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTypeAndValue_genType_IsVoid_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTypeAndValue_genType_IsVoid_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqTypeAndValue_genType_IsVoid_doFn
				DoReturnFn MoqTypeAndValue_genType_IsVoid_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTypeAndValue_genType) PrettyParams_IsVoid(params MoqTypeAndValue_genType_IsVoid_params) string {
	return fmt.Sprintf("IsVoid()")
}

func (m *MoqTypeAndValue_genType) ParamsKey_IsVoid(params MoqTypeAndValue_genType_IsVoid_params, anyParams uint64) MoqTypeAndValue_genType_IsVoid_paramsKey {
	m.Scene.T.Helper()
	return MoqTypeAndValue_genType_IsVoid_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTypeAndValue_genType_recorder) IsType() *MoqTypeAndValue_genType_IsType_fnRecorder {
	return &MoqTypeAndValue_genType_IsType_fnRecorder{
		Params:   MoqTypeAndValue_genType_IsType_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTypeAndValue_genType_IsType_fnRecorder) Any() *MoqTypeAndValue_genType_IsType_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsType(r.Params))
		return nil
	}
	return &MoqTypeAndValue_genType_IsType_anyParams{Recorder: r}
}

func (r *MoqTypeAndValue_genType_IsType_fnRecorder) Seq() *MoqTypeAndValue_genType_IsType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsType(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTypeAndValue_genType_IsType_fnRecorder) NoSeq() *MoqTypeAndValue_genType_IsType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsType(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTypeAndValue_genType_IsType_fnRecorder) ReturnResults(result1 bool) *MoqTypeAndValue_genType_IsType_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_IsType_doFn
		DoReturnFn MoqTypeAndValue_genType_IsType_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTypeAndValue_genType_IsType_fnRecorder) AndDo(fn MoqTypeAndValue_genType_IsType_doFn) *MoqTypeAndValue_genType_IsType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTypeAndValue_genType_IsType_fnRecorder) DoReturnResults(fn MoqTypeAndValue_genType_IsType_doReturnFn) *MoqTypeAndValue_genType_IsType_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_IsType_doFn
		DoReturnFn MoqTypeAndValue_genType_IsType_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTypeAndValue_genType_IsType_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTypeAndValue_genType_IsType_resultsByParams
	for n, res := range r.Moq.ResultsByParams_IsType {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTypeAndValue_genType_IsType_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTypeAndValue_genType_IsType_paramsKey]*MoqTypeAndValue_genType_IsType_results{},
		}
		r.Moq.ResultsByParams_IsType = append(r.Moq.ResultsByParams_IsType, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_IsType) {
			copy(r.Moq.ResultsByParams_IsType[insertAt+1:], r.Moq.ResultsByParams_IsType[insertAt:0])
			r.Moq.ResultsByParams_IsType[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_IsType(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTypeAndValue_genType_IsType_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTypeAndValue_genType_IsType_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTypeAndValue_genType_IsType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqTypeAndValue_genType_IsType_doFn
				DoReturnFn MoqTypeAndValue_genType_IsType_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTypeAndValue_genType) PrettyParams_IsType(params MoqTypeAndValue_genType_IsType_params) string {
	return fmt.Sprintf("IsType()")
}

func (m *MoqTypeAndValue_genType) ParamsKey_IsType(params MoqTypeAndValue_genType_IsType_params, anyParams uint64) MoqTypeAndValue_genType_IsType_paramsKey {
	m.Scene.T.Helper()
	return MoqTypeAndValue_genType_IsType_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTypeAndValue_genType_recorder) IsBuiltin() *MoqTypeAndValue_genType_IsBuiltin_fnRecorder {
	return &MoqTypeAndValue_genType_IsBuiltin_fnRecorder{
		Params:   MoqTypeAndValue_genType_IsBuiltin_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTypeAndValue_genType_IsBuiltin_fnRecorder) Any() *MoqTypeAndValue_genType_IsBuiltin_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsBuiltin(r.Params))
		return nil
	}
	return &MoqTypeAndValue_genType_IsBuiltin_anyParams{Recorder: r}
}

func (r *MoqTypeAndValue_genType_IsBuiltin_fnRecorder) Seq() *MoqTypeAndValue_genType_IsBuiltin_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsBuiltin(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTypeAndValue_genType_IsBuiltin_fnRecorder) NoSeq() *MoqTypeAndValue_genType_IsBuiltin_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsBuiltin(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTypeAndValue_genType_IsBuiltin_fnRecorder) ReturnResults(result1 bool) *MoqTypeAndValue_genType_IsBuiltin_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_IsBuiltin_doFn
		DoReturnFn MoqTypeAndValue_genType_IsBuiltin_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTypeAndValue_genType_IsBuiltin_fnRecorder) AndDo(fn MoqTypeAndValue_genType_IsBuiltin_doFn) *MoqTypeAndValue_genType_IsBuiltin_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTypeAndValue_genType_IsBuiltin_fnRecorder) DoReturnResults(fn MoqTypeAndValue_genType_IsBuiltin_doReturnFn) *MoqTypeAndValue_genType_IsBuiltin_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_IsBuiltin_doFn
		DoReturnFn MoqTypeAndValue_genType_IsBuiltin_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTypeAndValue_genType_IsBuiltin_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTypeAndValue_genType_IsBuiltin_resultsByParams
	for n, res := range r.Moq.ResultsByParams_IsBuiltin {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTypeAndValue_genType_IsBuiltin_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTypeAndValue_genType_IsBuiltin_paramsKey]*MoqTypeAndValue_genType_IsBuiltin_results{},
		}
		r.Moq.ResultsByParams_IsBuiltin = append(r.Moq.ResultsByParams_IsBuiltin, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_IsBuiltin) {
			copy(r.Moq.ResultsByParams_IsBuiltin[insertAt+1:], r.Moq.ResultsByParams_IsBuiltin[insertAt:0])
			r.Moq.ResultsByParams_IsBuiltin[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_IsBuiltin(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTypeAndValue_genType_IsBuiltin_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTypeAndValue_genType_IsBuiltin_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTypeAndValue_genType_IsBuiltin_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqTypeAndValue_genType_IsBuiltin_doFn
				DoReturnFn MoqTypeAndValue_genType_IsBuiltin_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTypeAndValue_genType) PrettyParams_IsBuiltin(params MoqTypeAndValue_genType_IsBuiltin_params) string {
	return fmt.Sprintf("IsBuiltin()")
}

func (m *MoqTypeAndValue_genType) ParamsKey_IsBuiltin(params MoqTypeAndValue_genType_IsBuiltin_params, anyParams uint64) MoqTypeAndValue_genType_IsBuiltin_paramsKey {
	m.Scene.T.Helper()
	return MoqTypeAndValue_genType_IsBuiltin_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTypeAndValue_genType_recorder) IsValue() *MoqTypeAndValue_genType_IsValue_fnRecorder {
	return &MoqTypeAndValue_genType_IsValue_fnRecorder{
		Params:   MoqTypeAndValue_genType_IsValue_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTypeAndValue_genType_IsValue_fnRecorder) Any() *MoqTypeAndValue_genType_IsValue_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsValue(r.Params))
		return nil
	}
	return &MoqTypeAndValue_genType_IsValue_anyParams{Recorder: r}
}

func (r *MoqTypeAndValue_genType_IsValue_fnRecorder) Seq() *MoqTypeAndValue_genType_IsValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsValue(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTypeAndValue_genType_IsValue_fnRecorder) NoSeq() *MoqTypeAndValue_genType_IsValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsValue(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTypeAndValue_genType_IsValue_fnRecorder) ReturnResults(result1 bool) *MoqTypeAndValue_genType_IsValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_IsValue_doFn
		DoReturnFn MoqTypeAndValue_genType_IsValue_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTypeAndValue_genType_IsValue_fnRecorder) AndDo(fn MoqTypeAndValue_genType_IsValue_doFn) *MoqTypeAndValue_genType_IsValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTypeAndValue_genType_IsValue_fnRecorder) DoReturnResults(fn MoqTypeAndValue_genType_IsValue_doReturnFn) *MoqTypeAndValue_genType_IsValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_IsValue_doFn
		DoReturnFn MoqTypeAndValue_genType_IsValue_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTypeAndValue_genType_IsValue_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTypeAndValue_genType_IsValue_resultsByParams
	for n, res := range r.Moq.ResultsByParams_IsValue {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTypeAndValue_genType_IsValue_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTypeAndValue_genType_IsValue_paramsKey]*MoqTypeAndValue_genType_IsValue_results{},
		}
		r.Moq.ResultsByParams_IsValue = append(r.Moq.ResultsByParams_IsValue, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_IsValue) {
			copy(r.Moq.ResultsByParams_IsValue[insertAt+1:], r.Moq.ResultsByParams_IsValue[insertAt:0])
			r.Moq.ResultsByParams_IsValue[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_IsValue(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTypeAndValue_genType_IsValue_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTypeAndValue_genType_IsValue_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTypeAndValue_genType_IsValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqTypeAndValue_genType_IsValue_doFn
				DoReturnFn MoqTypeAndValue_genType_IsValue_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTypeAndValue_genType) PrettyParams_IsValue(params MoqTypeAndValue_genType_IsValue_params) string {
	return fmt.Sprintf("IsValue()")
}

func (m *MoqTypeAndValue_genType) ParamsKey_IsValue(params MoqTypeAndValue_genType_IsValue_params, anyParams uint64) MoqTypeAndValue_genType_IsValue_paramsKey {
	m.Scene.T.Helper()
	return MoqTypeAndValue_genType_IsValue_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTypeAndValue_genType_recorder) IsNil() *MoqTypeAndValue_genType_IsNil_fnRecorder {
	return &MoqTypeAndValue_genType_IsNil_fnRecorder{
		Params:   MoqTypeAndValue_genType_IsNil_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTypeAndValue_genType_IsNil_fnRecorder) Any() *MoqTypeAndValue_genType_IsNil_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsNil(r.Params))
		return nil
	}
	return &MoqTypeAndValue_genType_IsNil_anyParams{Recorder: r}
}

func (r *MoqTypeAndValue_genType_IsNil_fnRecorder) Seq() *MoqTypeAndValue_genType_IsNil_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsNil(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTypeAndValue_genType_IsNil_fnRecorder) NoSeq() *MoqTypeAndValue_genType_IsNil_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsNil(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTypeAndValue_genType_IsNil_fnRecorder) ReturnResults(result1 bool) *MoqTypeAndValue_genType_IsNil_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_IsNil_doFn
		DoReturnFn MoqTypeAndValue_genType_IsNil_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTypeAndValue_genType_IsNil_fnRecorder) AndDo(fn MoqTypeAndValue_genType_IsNil_doFn) *MoqTypeAndValue_genType_IsNil_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTypeAndValue_genType_IsNil_fnRecorder) DoReturnResults(fn MoqTypeAndValue_genType_IsNil_doReturnFn) *MoqTypeAndValue_genType_IsNil_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_IsNil_doFn
		DoReturnFn MoqTypeAndValue_genType_IsNil_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTypeAndValue_genType_IsNil_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTypeAndValue_genType_IsNil_resultsByParams
	for n, res := range r.Moq.ResultsByParams_IsNil {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTypeAndValue_genType_IsNil_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTypeAndValue_genType_IsNil_paramsKey]*MoqTypeAndValue_genType_IsNil_results{},
		}
		r.Moq.ResultsByParams_IsNil = append(r.Moq.ResultsByParams_IsNil, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_IsNil) {
			copy(r.Moq.ResultsByParams_IsNil[insertAt+1:], r.Moq.ResultsByParams_IsNil[insertAt:0])
			r.Moq.ResultsByParams_IsNil[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_IsNil(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTypeAndValue_genType_IsNil_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTypeAndValue_genType_IsNil_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTypeAndValue_genType_IsNil_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqTypeAndValue_genType_IsNil_doFn
				DoReturnFn MoqTypeAndValue_genType_IsNil_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTypeAndValue_genType) PrettyParams_IsNil(params MoqTypeAndValue_genType_IsNil_params) string {
	return fmt.Sprintf("IsNil()")
}

func (m *MoqTypeAndValue_genType) ParamsKey_IsNil(params MoqTypeAndValue_genType_IsNil_params, anyParams uint64) MoqTypeAndValue_genType_IsNil_paramsKey {
	m.Scene.T.Helper()
	return MoqTypeAndValue_genType_IsNil_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTypeAndValue_genType_recorder) Addressable() *MoqTypeAndValue_genType_Addressable_fnRecorder {
	return &MoqTypeAndValue_genType_Addressable_fnRecorder{
		Params:   MoqTypeAndValue_genType_Addressable_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTypeAndValue_genType_Addressable_fnRecorder) Any() *MoqTypeAndValue_genType_Addressable_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Addressable(r.Params))
		return nil
	}
	return &MoqTypeAndValue_genType_Addressable_anyParams{Recorder: r}
}

func (r *MoqTypeAndValue_genType_Addressable_fnRecorder) Seq() *MoqTypeAndValue_genType_Addressable_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Addressable(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTypeAndValue_genType_Addressable_fnRecorder) NoSeq() *MoqTypeAndValue_genType_Addressable_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Addressable(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTypeAndValue_genType_Addressable_fnRecorder) ReturnResults(result1 bool) *MoqTypeAndValue_genType_Addressable_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_Addressable_doFn
		DoReturnFn MoqTypeAndValue_genType_Addressable_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTypeAndValue_genType_Addressable_fnRecorder) AndDo(fn MoqTypeAndValue_genType_Addressable_doFn) *MoqTypeAndValue_genType_Addressable_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTypeAndValue_genType_Addressable_fnRecorder) DoReturnResults(fn MoqTypeAndValue_genType_Addressable_doReturnFn) *MoqTypeAndValue_genType_Addressable_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_Addressable_doFn
		DoReturnFn MoqTypeAndValue_genType_Addressable_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTypeAndValue_genType_Addressable_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTypeAndValue_genType_Addressable_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Addressable {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTypeAndValue_genType_Addressable_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTypeAndValue_genType_Addressable_paramsKey]*MoqTypeAndValue_genType_Addressable_results{},
		}
		r.Moq.ResultsByParams_Addressable = append(r.Moq.ResultsByParams_Addressable, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Addressable) {
			copy(r.Moq.ResultsByParams_Addressable[insertAt+1:], r.Moq.ResultsByParams_Addressable[insertAt:0])
			r.Moq.ResultsByParams_Addressable[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Addressable(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTypeAndValue_genType_Addressable_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTypeAndValue_genType_Addressable_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTypeAndValue_genType_Addressable_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqTypeAndValue_genType_Addressable_doFn
				DoReturnFn MoqTypeAndValue_genType_Addressable_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTypeAndValue_genType) PrettyParams_Addressable(params MoqTypeAndValue_genType_Addressable_params) string {
	return fmt.Sprintf("Addressable()")
}

func (m *MoqTypeAndValue_genType) ParamsKey_Addressable(params MoqTypeAndValue_genType_Addressable_params, anyParams uint64) MoqTypeAndValue_genType_Addressable_paramsKey {
	m.Scene.T.Helper()
	return MoqTypeAndValue_genType_Addressable_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTypeAndValue_genType_recorder) Assignable() *MoqTypeAndValue_genType_Assignable_fnRecorder {
	return &MoqTypeAndValue_genType_Assignable_fnRecorder{
		Params:   MoqTypeAndValue_genType_Assignable_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTypeAndValue_genType_Assignable_fnRecorder) Any() *MoqTypeAndValue_genType_Assignable_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Assignable(r.Params))
		return nil
	}
	return &MoqTypeAndValue_genType_Assignable_anyParams{Recorder: r}
}

func (r *MoqTypeAndValue_genType_Assignable_fnRecorder) Seq() *MoqTypeAndValue_genType_Assignable_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Assignable(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTypeAndValue_genType_Assignable_fnRecorder) NoSeq() *MoqTypeAndValue_genType_Assignable_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Assignable(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTypeAndValue_genType_Assignable_fnRecorder) ReturnResults(result1 bool) *MoqTypeAndValue_genType_Assignable_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_Assignable_doFn
		DoReturnFn MoqTypeAndValue_genType_Assignable_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTypeAndValue_genType_Assignable_fnRecorder) AndDo(fn MoqTypeAndValue_genType_Assignable_doFn) *MoqTypeAndValue_genType_Assignable_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTypeAndValue_genType_Assignable_fnRecorder) DoReturnResults(fn MoqTypeAndValue_genType_Assignable_doReturnFn) *MoqTypeAndValue_genType_Assignable_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_Assignable_doFn
		DoReturnFn MoqTypeAndValue_genType_Assignable_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTypeAndValue_genType_Assignable_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTypeAndValue_genType_Assignable_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Assignable {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTypeAndValue_genType_Assignable_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTypeAndValue_genType_Assignable_paramsKey]*MoqTypeAndValue_genType_Assignable_results{},
		}
		r.Moq.ResultsByParams_Assignable = append(r.Moq.ResultsByParams_Assignable, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Assignable) {
			copy(r.Moq.ResultsByParams_Assignable[insertAt+1:], r.Moq.ResultsByParams_Assignable[insertAt:0])
			r.Moq.ResultsByParams_Assignable[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Assignable(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTypeAndValue_genType_Assignable_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTypeAndValue_genType_Assignable_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTypeAndValue_genType_Assignable_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqTypeAndValue_genType_Assignable_doFn
				DoReturnFn MoqTypeAndValue_genType_Assignable_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTypeAndValue_genType) PrettyParams_Assignable(params MoqTypeAndValue_genType_Assignable_params) string {
	return fmt.Sprintf("Assignable()")
}

func (m *MoqTypeAndValue_genType) ParamsKey_Assignable(params MoqTypeAndValue_genType_Assignable_params, anyParams uint64) MoqTypeAndValue_genType_Assignable_paramsKey {
	m.Scene.T.Helper()
	return MoqTypeAndValue_genType_Assignable_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTypeAndValue_genType_recorder) HasOk() *MoqTypeAndValue_genType_HasOk_fnRecorder {
	return &MoqTypeAndValue_genType_HasOk_fnRecorder{
		Params:   MoqTypeAndValue_genType_HasOk_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTypeAndValue_genType_HasOk_fnRecorder) Any() *MoqTypeAndValue_genType_HasOk_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_HasOk(r.Params))
		return nil
	}
	return &MoqTypeAndValue_genType_HasOk_anyParams{Recorder: r}
}

func (r *MoqTypeAndValue_genType_HasOk_fnRecorder) Seq() *MoqTypeAndValue_genType_HasOk_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_HasOk(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTypeAndValue_genType_HasOk_fnRecorder) NoSeq() *MoqTypeAndValue_genType_HasOk_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_HasOk(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTypeAndValue_genType_HasOk_fnRecorder) ReturnResults(result1 bool) *MoqTypeAndValue_genType_HasOk_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_HasOk_doFn
		DoReturnFn MoqTypeAndValue_genType_HasOk_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTypeAndValue_genType_HasOk_fnRecorder) AndDo(fn MoqTypeAndValue_genType_HasOk_doFn) *MoqTypeAndValue_genType_HasOk_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTypeAndValue_genType_HasOk_fnRecorder) DoReturnResults(fn MoqTypeAndValue_genType_HasOk_doReturnFn) *MoqTypeAndValue_genType_HasOk_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqTypeAndValue_genType_HasOk_doFn
		DoReturnFn MoqTypeAndValue_genType_HasOk_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTypeAndValue_genType_HasOk_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTypeAndValue_genType_HasOk_resultsByParams
	for n, res := range r.Moq.ResultsByParams_HasOk {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTypeAndValue_genType_HasOk_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTypeAndValue_genType_HasOk_paramsKey]*MoqTypeAndValue_genType_HasOk_results{},
		}
		r.Moq.ResultsByParams_HasOk = append(r.Moq.ResultsByParams_HasOk, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_HasOk) {
			copy(r.Moq.ResultsByParams_HasOk[insertAt+1:], r.Moq.ResultsByParams_HasOk[insertAt:0])
			r.Moq.ResultsByParams_HasOk[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_HasOk(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTypeAndValue_genType_HasOk_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTypeAndValue_genType_HasOk_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTypeAndValue_genType_HasOk_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqTypeAndValue_genType_HasOk_doFn
				DoReturnFn MoqTypeAndValue_genType_HasOk_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTypeAndValue_genType) PrettyParams_HasOk(params MoqTypeAndValue_genType_HasOk_params) string {
	return fmt.Sprintf("HasOk()")
}

func (m *MoqTypeAndValue_genType) ParamsKey_HasOk(params MoqTypeAndValue_genType_HasOk_params, anyParams uint64) MoqTypeAndValue_genType_HasOk_paramsKey {
	m.Scene.T.Helper()
	return MoqTypeAndValue_genType_HasOk_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqTypeAndValue_genType) Reset() {
	m.ResultsByParams_IsVoid = nil
	m.ResultsByParams_IsType = nil
	m.ResultsByParams_IsBuiltin = nil
	m.ResultsByParams_IsValue = nil
	m.ResultsByParams_IsNil = nil
	m.ResultsByParams_Addressable = nil
	m.ResultsByParams_Assignable = nil
	m.ResultsByParams_HasOk = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqTypeAndValue_genType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_IsVoid {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_IsVoid(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_IsType {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_IsType(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_IsBuiltin {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_IsBuiltin(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_IsValue {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_IsValue(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_IsNil {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_IsNil(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Addressable {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Addressable(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Assignable {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Assignable(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_HasOk {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_HasOk(results.Params))
			}
		}
	}
}
