// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package types

import (
	"fmt"
	"go/types"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that types.Sizes is mocked completely
var _ types.Sizes = (*MoqSizes_mock)(nil)

// MoqSizes holds the state of a moq of the Sizes type
type MoqSizes struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqSizes_mock

	ResultsByParams_Alignof   []MoqSizes_Alignof_resultsByParams
	ResultsByParams_Offsetsof []MoqSizes_Offsetsof_resultsByParams
	ResultsByParams_Sizeof    []MoqSizes_Sizeof_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Alignof struct {
				T moq.ParamIndexing
			}
			Offsetsof struct {
				Fields moq.ParamIndexing
			}
			Sizeof struct {
				T moq.ParamIndexing
			}
		}
	}
	// MoqSizes_mock isolates the mock interface of the Sizes type
}

type MoqSizes_mock struct {
	Moq *MoqSizes
}

// MoqSizes_recorder isolates the recorder interface of the Sizes type
type MoqSizes_recorder struct {
	Moq *MoqSizes
}

// MoqSizes_Alignof_params holds the params of the Sizes type
type MoqSizes_Alignof_params struct{ T types.Type }

// MoqSizes_Alignof_paramsKey holds the map key params of the Sizes type
type MoqSizes_Alignof_paramsKey struct {
	Params struct{ T types.Type }
	Hashes struct{ T hash.Hash }
}

// MoqSizes_Alignof_resultsByParams contains the results for a given set of
// parameters for the Sizes type
type MoqSizes_Alignof_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSizes_Alignof_paramsKey]*MoqSizes_Alignof_results
}

// MoqSizes_Alignof_doFn defines the type of function needed when calling AndDo
// for the Sizes type
type MoqSizes_Alignof_doFn func(T types.Type)

// MoqSizes_Alignof_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Sizes type
type MoqSizes_Alignof_doReturnFn func(T types.Type) int64

// MoqSizes_Alignof_results holds the results of the Sizes type
type MoqSizes_Alignof_results struct {
	Params  MoqSizes_Alignof_params
	Results []struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqSizes_Alignof_doFn
		DoReturnFn MoqSizes_Alignof_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSizes_Alignof_fnRecorder routes recorded function calls to the MoqSizes
// moq
type MoqSizes_Alignof_fnRecorder struct {
	Params    MoqSizes_Alignof_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSizes_Alignof_results
	Moq       *MoqSizes
}

// MoqSizes_Alignof_anyParams isolates the any params functions of the Sizes
// type
type MoqSizes_Alignof_anyParams struct {
	Recorder *MoqSizes_Alignof_fnRecorder
}

// MoqSizes_Offsetsof_params holds the params of the Sizes type
type MoqSizes_Offsetsof_params struct{ Fields []*types.Var }

// MoqSizes_Offsetsof_paramsKey holds the map key params of the Sizes type
type MoqSizes_Offsetsof_paramsKey struct {
	Params struct{}
	Hashes struct{ Fields hash.Hash }
}

// MoqSizes_Offsetsof_resultsByParams contains the results for a given set of
// parameters for the Sizes type
type MoqSizes_Offsetsof_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSizes_Offsetsof_paramsKey]*MoqSizes_Offsetsof_results
}

// MoqSizes_Offsetsof_doFn defines the type of function needed when calling
// AndDo for the Sizes type
type MoqSizes_Offsetsof_doFn func(fields []*types.Var)

// MoqSizes_Offsetsof_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Sizes type
type MoqSizes_Offsetsof_doReturnFn func(fields []*types.Var) []int64

// MoqSizes_Offsetsof_results holds the results of the Sizes type
type MoqSizes_Offsetsof_results struct {
	Params  MoqSizes_Offsetsof_params
	Results []struct {
		Values *struct {
			Result1 []int64
		}
		Sequence   uint32
		DoFn       MoqSizes_Offsetsof_doFn
		DoReturnFn MoqSizes_Offsetsof_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSizes_Offsetsof_fnRecorder routes recorded function calls to the MoqSizes
// moq
type MoqSizes_Offsetsof_fnRecorder struct {
	Params    MoqSizes_Offsetsof_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSizes_Offsetsof_results
	Moq       *MoqSizes
}

// MoqSizes_Offsetsof_anyParams isolates the any params functions of the Sizes
// type
type MoqSizes_Offsetsof_anyParams struct {
	Recorder *MoqSizes_Offsetsof_fnRecorder
}

// MoqSizes_Sizeof_params holds the params of the Sizes type
type MoqSizes_Sizeof_params struct{ T types.Type }

// MoqSizes_Sizeof_paramsKey holds the map key params of the Sizes type
type MoqSizes_Sizeof_paramsKey struct {
	Params struct{ T types.Type }
	Hashes struct{ T hash.Hash }
}

// MoqSizes_Sizeof_resultsByParams contains the results for a given set of
// parameters for the Sizes type
type MoqSizes_Sizeof_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSizes_Sizeof_paramsKey]*MoqSizes_Sizeof_results
}

// MoqSizes_Sizeof_doFn defines the type of function needed when calling AndDo
// for the Sizes type
type MoqSizes_Sizeof_doFn func(T types.Type)

// MoqSizes_Sizeof_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Sizes type
type MoqSizes_Sizeof_doReturnFn func(T types.Type) int64

// MoqSizes_Sizeof_results holds the results of the Sizes type
type MoqSizes_Sizeof_results struct {
	Params  MoqSizes_Sizeof_params
	Results []struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqSizes_Sizeof_doFn
		DoReturnFn MoqSizes_Sizeof_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSizes_Sizeof_fnRecorder routes recorded function calls to the MoqSizes
// moq
type MoqSizes_Sizeof_fnRecorder struct {
	Params    MoqSizes_Sizeof_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSizes_Sizeof_results
	Moq       *MoqSizes
}

// MoqSizes_Sizeof_anyParams isolates the any params functions of the Sizes
// type
type MoqSizes_Sizeof_anyParams struct {
	Recorder *MoqSizes_Sizeof_fnRecorder
}

// NewMoqSizes creates a new moq of the Sizes type
func NewMoqSizes(scene *moq.Scene, config *moq.Config) *MoqSizes {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqSizes{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqSizes_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Alignof struct {
					T moq.ParamIndexing
				}
				Offsetsof struct {
					Fields moq.ParamIndexing
				}
				Sizeof struct {
					T moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Alignof struct {
				T moq.ParamIndexing
			}
			Offsetsof struct {
				Fields moq.ParamIndexing
			}
			Sizeof struct {
				T moq.ParamIndexing
			}
		}{
			Alignof: struct {
				T moq.ParamIndexing
			}{
				T: moq.ParamIndexByHash,
			},
			Offsetsof: struct {
				Fields moq.ParamIndexing
			}{
				Fields: moq.ParamIndexByHash,
			},
			Sizeof: struct {
				T moq.ParamIndexing
			}{
				T: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Sizes type
func (m *MoqSizes) Mock() *MoqSizes_mock { return m.Moq }

func (m *MoqSizes_mock) Alignof(T types.Type) (result1 int64) {
	m.Moq.Scene.T.Helper()
	params := MoqSizes_Alignof_params{
		T: T,
	}
	var results *MoqSizes_Alignof_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Alignof {
		paramsKey := m.Moq.ParamsKey_Alignof(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Alignof(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Alignof(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Alignof(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(T)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(T)
	}
	return
}

func (m *MoqSizes_mock) Offsetsof(fields []*types.Var) (result1 []int64) {
	m.Moq.Scene.T.Helper()
	params := MoqSizes_Offsetsof_params{
		Fields: fields,
	}
	var results *MoqSizes_Offsetsof_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Offsetsof {
		paramsKey := m.Moq.ParamsKey_Offsetsof(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Offsetsof(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Offsetsof(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Offsetsof(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(fields)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(fields)
	}
	return
}

func (m *MoqSizes_mock) Sizeof(T types.Type) (result1 int64) {
	m.Moq.Scene.T.Helper()
	params := MoqSizes_Sizeof_params{
		T: T,
	}
	var results *MoqSizes_Sizeof_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Sizeof {
		paramsKey := m.Moq.ParamsKey_Sizeof(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Sizeof(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Sizeof(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Sizeof(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(T)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(T)
	}
	return
}

// OnCall returns the recorder implementation of the Sizes type
func (m *MoqSizes) OnCall() *MoqSizes_recorder {
	return &MoqSizes_recorder{
		Moq: m,
	}
}

func (m *MoqSizes_recorder) Alignof(T types.Type) *MoqSizes_Alignof_fnRecorder {
	return &MoqSizes_Alignof_fnRecorder{
		Params: MoqSizes_Alignof_params{
			T: T,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSizes_Alignof_fnRecorder) Any() *MoqSizes_Alignof_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Alignof(r.Params))
		return nil
	}
	return &MoqSizes_Alignof_anyParams{Recorder: r}
}

func (a *MoqSizes_Alignof_anyParams) T() *MoqSizes_Alignof_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqSizes_Alignof_fnRecorder) Seq() *MoqSizes_Alignof_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Alignof(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSizes_Alignof_fnRecorder) NoSeq() *MoqSizes_Alignof_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Alignof(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSizes_Alignof_fnRecorder) ReturnResults(result1 int64) *MoqSizes_Alignof_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqSizes_Alignof_doFn
		DoReturnFn MoqSizes_Alignof_doReturnFn
	}{
		Values: &struct {
			Result1 int64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSizes_Alignof_fnRecorder) AndDo(fn MoqSizes_Alignof_doFn) *MoqSizes_Alignof_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSizes_Alignof_fnRecorder) DoReturnResults(fn MoqSizes_Alignof_doReturnFn) *MoqSizes_Alignof_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqSizes_Alignof_doFn
		DoReturnFn MoqSizes_Alignof_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSizes_Alignof_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSizes_Alignof_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Alignof {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSizes_Alignof_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSizes_Alignof_paramsKey]*MoqSizes_Alignof_results{},
		}
		r.Moq.ResultsByParams_Alignof = append(r.Moq.ResultsByParams_Alignof, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Alignof) {
			copy(r.Moq.ResultsByParams_Alignof[insertAt+1:], r.Moq.ResultsByParams_Alignof[insertAt:0])
			r.Moq.ResultsByParams_Alignof[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Alignof(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSizes_Alignof_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSizes_Alignof_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSizes_Alignof_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int64
				}
				Sequence   uint32
				DoFn       MoqSizes_Alignof_doFn
				DoReturnFn MoqSizes_Alignof_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSizes) PrettyParams_Alignof(params MoqSizes_Alignof_params) string {
	return fmt.Sprintf("Alignof(%#v)", params.T)
}

func (m *MoqSizes) ParamsKey_Alignof(params MoqSizes_Alignof_params, anyParams uint64) MoqSizes_Alignof_paramsKey {
	m.Scene.T.Helper()
	var TUsed types.Type
	var TUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Alignof.T == moq.ParamIndexByValue {
			TUsed = params.T
		} else {
			TUsedHash = hash.DeepHash(params.T)
		}
	}
	return MoqSizes_Alignof_paramsKey{
		Params: struct{ T types.Type }{
			T: TUsed,
		},
		Hashes: struct{ T hash.Hash }{
			T: TUsedHash,
		},
	}
}

func (m *MoqSizes_recorder) Offsetsof(fields []*types.Var) *MoqSizes_Offsetsof_fnRecorder {
	return &MoqSizes_Offsetsof_fnRecorder{
		Params: MoqSizes_Offsetsof_params{
			Fields: fields,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSizes_Offsetsof_fnRecorder) Any() *MoqSizes_Offsetsof_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Offsetsof(r.Params))
		return nil
	}
	return &MoqSizes_Offsetsof_anyParams{Recorder: r}
}

func (a *MoqSizes_Offsetsof_anyParams) Fields() *MoqSizes_Offsetsof_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqSizes_Offsetsof_fnRecorder) Seq() *MoqSizes_Offsetsof_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Offsetsof(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSizes_Offsetsof_fnRecorder) NoSeq() *MoqSizes_Offsetsof_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Offsetsof(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSizes_Offsetsof_fnRecorder) ReturnResults(result1 []int64) *MoqSizes_Offsetsof_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []int64
		}
		Sequence   uint32
		DoFn       MoqSizes_Offsetsof_doFn
		DoReturnFn MoqSizes_Offsetsof_doReturnFn
	}{
		Values: &struct {
			Result1 []int64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSizes_Offsetsof_fnRecorder) AndDo(fn MoqSizes_Offsetsof_doFn) *MoqSizes_Offsetsof_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSizes_Offsetsof_fnRecorder) DoReturnResults(fn MoqSizes_Offsetsof_doReturnFn) *MoqSizes_Offsetsof_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []int64
		}
		Sequence   uint32
		DoFn       MoqSizes_Offsetsof_doFn
		DoReturnFn MoqSizes_Offsetsof_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSizes_Offsetsof_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSizes_Offsetsof_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Offsetsof {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSizes_Offsetsof_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSizes_Offsetsof_paramsKey]*MoqSizes_Offsetsof_results{},
		}
		r.Moq.ResultsByParams_Offsetsof = append(r.Moq.ResultsByParams_Offsetsof, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Offsetsof) {
			copy(r.Moq.ResultsByParams_Offsetsof[insertAt+1:], r.Moq.ResultsByParams_Offsetsof[insertAt:0])
			r.Moq.ResultsByParams_Offsetsof[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Offsetsof(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSizes_Offsetsof_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSizes_Offsetsof_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSizes_Offsetsof_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []int64
				}
				Sequence   uint32
				DoFn       MoqSizes_Offsetsof_doFn
				DoReturnFn MoqSizes_Offsetsof_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSizes) PrettyParams_Offsetsof(params MoqSizes_Offsetsof_params) string {
	return fmt.Sprintf("Offsetsof(%#v)", params.Fields)
}

func (m *MoqSizes) ParamsKey_Offsetsof(params MoqSizes_Offsetsof_params, anyParams uint64) MoqSizes_Offsetsof_paramsKey {
	m.Scene.T.Helper()
	var fieldsUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Offsetsof.Fields == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The fields parameter of the Offsetsof function can't be indexed by value")
		}
		fieldsUsedHash = hash.DeepHash(params.Fields)
	}
	return MoqSizes_Offsetsof_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Fields hash.Hash }{
			Fields: fieldsUsedHash,
		},
	}
}

func (m *MoqSizes_recorder) Sizeof(T types.Type) *MoqSizes_Sizeof_fnRecorder {
	return &MoqSizes_Sizeof_fnRecorder{
		Params: MoqSizes_Sizeof_params{
			T: T,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSizes_Sizeof_fnRecorder) Any() *MoqSizes_Sizeof_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sizeof(r.Params))
		return nil
	}
	return &MoqSizes_Sizeof_anyParams{Recorder: r}
}

func (a *MoqSizes_Sizeof_anyParams) T() *MoqSizes_Sizeof_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqSizes_Sizeof_fnRecorder) Seq() *MoqSizes_Sizeof_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sizeof(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSizes_Sizeof_fnRecorder) NoSeq() *MoqSizes_Sizeof_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sizeof(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSizes_Sizeof_fnRecorder) ReturnResults(result1 int64) *MoqSizes_Sizeof_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqSizes_Sizeof_doFn
		DoReturnFn MoqSizes_Sizeof_doReturnFn
	}{
		Values: &struct {
			Result1 int64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSizes_Sizeof_fnRecorder) AndDo(fn MoqSizes_Sizeof_doFn) *MoqSizes_Sizeof_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSizes_Sizeof_fnRecorder) DoReturnResults(fn MoqSizes_Sizeof_doReturnFn) *MoqSizes_Sizeof_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqSizes_Sizeof_doFn
		DoReturnFn MoqSizes_Sizeof_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSizes_Sizeof_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSizes_Sizeof_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Sizeof {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSizes_Sizeof_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSizes_Sizeof_paramsKey]*MoqSizes_Sizeof_results{},
		}
		r.Moq.ResultsByParams_Sizeof = append(r.Moq.ResultsByParams_Sizeof, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Sizeof) {
			copy(r.Moq.ResultsByParams_Sizeof[insertAt+1:], r.Moq.ResultsByParams_Sizeof[insertAt:0])
			r.Moq.ResultsByParams_Sizeof[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Sizeof(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSizes_Sizeof_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSizes_Sizeof_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSizes_Sizeof_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int64
				}
				Sequence   uint32
				DoFn       MoqSizes_Sizeof_doFn
				DoReturnFn MoqSizes_Sizeof_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSizes) PrettyParams_Sizeof(params MoqSizes_Sizeof_params) string {
	return fmt.Sprintf("Sizeof(%#v)", params.T)
}

func (m *MoqSizes) ParamsKey_Sizeof(params MoqSizes_Sizeof_params, anyParams uint64) MoqSizes_Sizeof_paramsKey {
	m.Scene.T.Helper()
	var TUsed types.Type
	var TUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Sizeof.T == moq.ParamIndexByValue {
			TUsed = params.T
		} else {
			TUsedHash = hash.DeepHash(params.T)
		}
	}
	return MoqSizes_Sizeof_paramsKey{
		Params: struct{ T types.Type }{
			T: TUsed,
		},
		Hashes: struct{ T hash.Hash }{
			T: TUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqSizes) Reset() {
	m.ResultsByParams_Alignof = nil
	m.ResultsByParams_Offsetsof = nil
	m.ResultsByParams_Sizeof = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqSizes) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Alignof {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Alignof(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Offsetsof {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Offsetsof(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Sizeof {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Sizeof(results.Params))
			}
		}
	}
}
