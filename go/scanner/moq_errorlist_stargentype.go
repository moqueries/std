// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package scanner

import (
	"fmt"
	"go/token"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that scanner.ErrorList_starGenType is
// mocked completely
var _ ErrorList_starGenType = (*MoqErrorList_starGenType_mock)(nil)

// ErrorList_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type ErrorList_starGenType interface {
	Add(pos token.Position, msg string)
	Reset()
	RemoveMultiples()
}

// MoqErrorList_starGenType holds the state of a moq of the
// ErrorList_starGenType type
type MoqErrorList_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqErrorList_starGenType_mock

	ResultsByParams_Add             []MoqErrorList_starGenType_Add_resultsByParams
	ResultsByParams_Reset           []MoqErrorList_starGenType_Reset_resultsByParams
	ResultsByParams_RemoveMultiples []MoqErrorList_starGenType_RemoveMultiples_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Add struct {
				Pos moq.ParamIndexing
				Msg moq.ParamIndexing
			}
			Reset           struct{}
			RemoveMultiples struct{}
		}
	}
}

// MoqErrorList_starGenType_mock isolates the mock interface of the
// ErrorList_starGenType type
type MoqErrorList_starGenType_mock struct {
	Moq *MoqErrorList_starGenType
}

// MoqErrorList_starGenType_recorder isolates the recorder interface of the
// ErrorList_starGenType type
type MoqErrorList_starGenType_recorder struct {
	Moq *MoqErrorList_starGenType
}

// MoqErrorList_starGenType_Add_params holds the params of the
// ErrorList_starGenType type
type MoqErrorList_starGenType_Add_params struct {
	Pos token.Position
	Msg string
}

// MoqErrorList_starGenType_Add_paramsKey holds the map key params of the
// ErrorList_starGenType type
type MoqErrorList_starGenType_Add_paramsKey struct {
	Params struct {
		Pos token.Position
		Msg string
	}
	Hashes struct {
		Pos hash.Hash
		Msg hash.Hash
	}
}

// MoqErrorList_starGenType_Add_resultsByParams contains the results for a
// given set of parameters for the ErrorList_starGenType type
type MoqErrorList_starGenType_Add_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqErrorList_starGenType_Add_paramsKey]*MoqErrorList_starGenType_Add_results
}

// MoqErrorList_starGenType_Add_doFn defines the type of function needed when
// calling AndDo for the ErrorList_starGenType type
type MoqErrorList_starGenType_Add_doFn func(pos token.Position, msg string)

// MoqErrorList_starGenType_Add_doReturnFn defines the type of function needed
// when calling DoReturnResults for the ErrorList_starGenType type
type MoqErrorList_starGenType_Add_doReturnFn func(pos token.Position, msg string)

// MoqErrorList_starGenType_Add_results holds the results of the
// ErrorList_starGenType type
type MoqErrorList_starGenType_Add_results struct {
	Params  MoqErrorList_starGenType_Add_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqErrorList_starGenType_Add_doFn
		DoReturnFn MoqErrorList_starGenType_Add_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqErrorList_starGenType_Add_fnRecorder routes recorded function calls to
// the MoqErrorList_starGenType moq
type MoqErrorList_starGenType_Add_fnRecorder struct {
	Params    MoqErrorList_starGenType_Add_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqErrorList_starGenType_Add_results
	Moq       *MoqErrorList_starGenType
}

// MoqErrorList_starGenType_Add_anyParams isolates the any params functions of
// the ErrorList_starGenType type
type MoqErrorList_starGenType_Add_anyParams struct {
	Recorder *MoqErrorList_starGenType_Add_fnRecorder
}

// MoqErrorList_starGenType_Reset_params holds the params of the
// ErrorList_starGenType type
type MoqErrorList_starGenType_Reset_params struct{}

// MoqErrorList_starGenType_Reset_paramsKey holds the map key params of the
// ErrorList_starGenType type
type MoqErrorList_starGenType_Reset_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqErrorList_starGenType_Reset_resultsByParams contains the results for a
// given set of parameters for the ErrorList_starGenType type
type MoqErrorList_starGenType_Reset_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqErrorList_starGenType_Reset_paramsKey]*MoqErrorList_starGenType_Reset_results
}

// MoqErrorList_starGenType_Reset_doFn defines the type of function needed when
// calling AndDo for the ErrorList_starGenType type
type MoqErrorList_starGenType_Reset_doFn func()

// MoqErrorList_starGenType_Reset_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ErrorList_starGenType type
type MoqErrorList_starGenType_Reset_doReturnFn func()

// MoqErrorList_starGenType_Reset_results holds the results of the
// ErrorList_starGenType type
type MoqErrorList_starGenType_Reset_results struct {
	Params  MoqErrorList_starGenType_Reset_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqErrorList_starGenType_Reset_doFn
		DoReturnFn MoqErrorList_starGenType_Reset_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqErrorList_starGenType_Reset_fnRecorder routes recorded function calls to
// the MoqErrorList_starGenType moq
type MoqErrorList_starGenType_Reset_fnRecorder struct {
	Params    MoqErrorList_starGenType_Reset_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqErrorList_starGenType_Reset_results
	Moq       *MoqErrorList_starGenType
}

// MoqErrorList_starGenType_Reset_anyParams isolates the any params functions
// of the ErrorList_starGenType type
type MoqErrorList_starGenType_Reset_anyParams struct {
	Recorder *MoqErrorList_starGenType_Reset_fnRecorder
}

// MoqErrorList_starGenType_RemoveMultiples_params holds the params of the
// ErrorList_starGenType type
type MoqErrorList_starGenType_RemoveMultiples_params struct{}

// MoqErrorList_starGenType_RemoveMultiples_paramsKey holds the map key params
// of the ErrorList_starGenType type
type MoqErrorList_starGenType_RemoveMultiples_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqErrorList_starGenType_RemoveMultiples_resultsByParams contains the
// results for a given set of parameters for the ErrorList_starGenType type
type MoqErrorList_starGenType_RemoveMultiples_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqErrorList_starGenType_RemoveMultiples_paramsKey]*MoqErrorList_starGenType_RemoveMultiples_results
}

// MoqErrorList_starGenType_RemoveMultiples_doFn defines the type of function
// needed when calling AndDo for the ErrorList_starGenType type
type MoqErrorList_starGenType_RemoveMultiples_doFn func()

// MoqErrorList_starGenType_RemoveMultiples_doReturnFn defines the type of
// function needed when calling DoReturnResults for the ErrorList_starGenType
// type
type MoqErrorList_starGenType_RemoveMultiples_doReturnFn func()

// MoqErrorList_starGenType_RemoveMultiples_results holds the results of the
// ErrorList_starGenType type
type MoqErrorList_starGenType_RemoveMultiples_results struct {
	Params  MoqErrorList_starGenType_RemoveMultiples_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqErrorList_starGenType_RemoveMultiples_doFn
		DoReturnFn MoqErrorList_starGenType_RemoveMultiples_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqErrorList_starGenType_RemoveMultiples_fnRecorder routes recorded function
// calls to the MoqErrorList_starGenType moq
type MoqErrorList_starGenType_RemoveMultiples_fnRecorder struct {
	Params    MoqErrorList_starGenType_RemoveMultiples_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqErrorList_starGenType_RemoveMultiples_results
	Moq       *MoqErrorList_starGenType
}

// MoqErrorList_starGenType_RemoveMultiples_anyParams isolates the any params
// functions of the ErrorList_starGenType type
type MoqErrorList_starGenType_RemoveMultiples_anyParams struct {
	Recorder *MoqErrorList_starGenType_RemoveMultiples_fnRecorder
}

// NewMoqErrorList_starGenType creates a new moq of the ErrorList_starGenType
// type
func NewMoqErrorList_starGenType(scene *moq.Scene, config *moq.Config) *MoqErrorList_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqErrorList_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqErrorList_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Add struct {
					Pos moq.ParamIndexing
					Msg moq.ParamIndexing
				}
				Reset           struct{}
				RemoveMultiples struct{}
			}
		}{ParameterIndexing: struct {
			Add struct {
				Pos moq.ParamIndexing
				Msg moq.ParamIndexing
			}
			Reset           struct{}
			RemoveMultiples struct{}
		}{
			Add: struct {
				Pos moq.ParamIndexing
				Msg moq.ParamIndexing
			}{
				Pos: moq.ParamIndexByValue,
				Msg: moq.ParamIndexByValue,
			},
			Reset:           struct{}{},
			RemoveMultiples: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the ErrorList_starGenType type
func (m *MoqErrorList_starGenType) Mock() *MoqErrorList_starGenType_mock { return m.Moq }

func (m *MoqErrorList_starGenType_mock) Add(pos token.Position, msg string) {
	m.Moq.Scene.T.Helper()
	params := MoqErrorList_starGenType_Add_params{
		Pos: pos,
		Msg: msg,
	}
	var results *MoqErrorList_starGenType_Add_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Add {
		paramsKey := m.Moq.ParamsKey_Add(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Add(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Add(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Add(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(pos, msg)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(pos, msg)
	}
	return
}

func (m *MoqErrorList_starGenType_mock) Reset() {
	m.Moq.Scene.T.Helper()
	params := MoqErrorList_starGenType_Reset_params{}
	var results *MoqErrorList_starGenType_Reset_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Reset {
		paramsKey := m.Moq.ParamsKey_Reset(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Reset(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Reset(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Reset(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqErrorList_starGenType_mock) RemoveMultiples() {
	m.Moq.Scene.T.Helper()
	params := MoqErrorList_starGenType_RemoveMultiples_params{}
	var results *MoqErrorList_starGenType_RemoveMultiples_results
	for _, resultsByParams := range m.Moq.ResultsByParams_RemoveMultiples {
		paramsKey := m.Moq.ParamsKey_RemoveMultiples(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_RemoveMultiples(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_RemoveMultiples(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_RemoveMultiples(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the ErrorList_starGenType type
func (m *MoqErrorList_starGenType) OnCall() *MoqErrorList_starGenType_recorder {
	return &MoqErrorList_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqErrorList_starGenType_recorder) Add(pos token.Position, msg string) *MoqErrorList_starGenType_Add_fnRecorder {
	return &MoqErrorList_starGenType_Add_fnRecorder{
		Params: MoqErrorList_starGenType_Add_params{
			Pos: pos,
			Msg: msg,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqErrorList_starGenType_Add_fnRecorder) Any() *MoqErrorList_starGenType_Add_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	return &MoqErrorList_starGenType_Add_anyParams{Recorder: r}
}

func (a *MoqErrorList_starGenType_Add_anyParams) Pos() *MoqErrorList_starGenType_Add_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqErrorList_starGenType_Add_anyParams) Msg() *MoqErrorList_starGenType_Add_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqErrorList_starGenType_Add_fnRecorder) Seq() *MoqErrorList_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqErrorList_starGenType_Add_fnRecorder) NoSeq() *MoqErrorList_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqErrorList_starGenType_Add_fnRecorder) ReturnResults() *MoqErrorList_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqErrorList_starGenType_Add_doFn
		DoReturnFn MoqErrorList_starGenType_Add_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqErrorList_starGenType_Add_fnRecorder) AndDo(fn MoqErrorList_starGenType_Add_doFn) *MoqErrorList_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqErrorList_starGenType_Add_fnRecorder) DoReturnResults(fn MoqErrorList_starGenType_Add_doReturnFn) *MoqErrorList_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqErrorList_starGenType_Add_doFn
		DoReturnFn MoqErrorList_starGenType_Add_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqErrorList_starGenType_Add_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqErrorList_starGenType_Add_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Add {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqErrorList_starGenType_Add_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqErrorList_starGenType_Add_paramsKey]*MoqErrorList_starGenType_Add_results{},
		}
		r.Moq.ResultsByParams_Add = append(r.Moq.ResultsByParams_Add, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Add) {
			copy(r.Moq.ResultsByParams_Add[insertAt+1:], r.Moq.ResultsByParams_Add[insertAt:0])
			r.Moq.ResultsByParams_Add[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Add(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqErrorList_starGenType_Add_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqErrorList_starGenType_Add_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqErrorList_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqErrorList_starGenType_Add_doFn
				DoReturnFn MoqErrorList_starGenType_Add_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqErrorList_starGenType) PrettyParams_Add(params MoqErrorList_starGenType_Add_params) string {
	return fmt.Sprintf("Add(%#v, %#v)", params.Pos, params.Msg)
}

func (m *MoqErrorList_starGenType) ParamsKey_Add(params MoqErrorList_starGenType_Add_params, anyParams uint64) MoqErrorList_starGenType_Add_paramsKey {
	m.Scene.T.Helper()
	var posUsed token.Position
	var posUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Add.Pos == moq.ParamIndexByValue {
			posUsed = params.Pos
		} else {
			posUsedHash = hash.DeepHash(params.Pos)
		}
	}
	var msgUsed string
	var msgUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Add.Msg == moq.ParamIndexByValue {
			msgUsed = params.Msg
		} else {
			msgUsedHash = hash.DeepHash(params.Msg)
		}
	}
	return MoqErrorList_starGenType_Add_paramsKey{
		Params: struct {
			Pos token.Position
			Msg string
		}{
			Pos: posUsed,
			Msg: msgUsed,
		},
		Hashes: struct {
			Pos hash.Hash
			Msg hash.Hash
		}{
			Pos: posUsedHash,
			Msg: msgUsedHash,
		},
	}
}

func (m *MoqErrorList_starGenType_recorder) Reset() *MoqErrorList_starGenType_Reset_fnRecorder {
	return &MoqErrorList_starGenType_Reset_fnRecorder{
		Params:   MoqErrorList_starGenType_Reset_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqErrorList_starGenType_Reset_fnRecorder) Any() *MoqErrorList_starGenType_Reset_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	return &MoqErrorList_starGenType_Reset_anyParams{Recorder: r}
}

func (r *MoqErrorList_starGenType_Reset_fnRecorder) Seq() *MoqErrorList_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqErrorList_starGenType_Reset_fnRecorder) NoSeq() *MoqErrorList_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqErrorList_starGenType_Reset_fnRecorder) ReturnResults() *MoqErrorList_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqErrorList_starGenType_Reset_doFn
		DoReturnFn MoqErrorList_starGenType_Reset_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqErrorList_starGenType_Reset_fnRecorder) AndDo(fn MoqErrorList_starGenType_Reset_doFn) *MoqErrorList_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqErrorList_starGenType_Reset_fnRecorder) DoReturnResults(fn MoqErrorList_starGenType_Reset_doReturnFn) *MoqErrorList_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqErrorList_starGenType_Reset_doFn
		DoReturnFn MoqErrorList_starGenType_Reset_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqErrorList_starGenType_Reset_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqErrorList_starGenType_Reset_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Reset {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqErrorList_starGenType_Reset_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqErrorList_starGenType_Reset_paramsKey]*MoqErrorList_starGenType_Reset_results{},
		}
		r.Moq.ResultsByParams_Reset = append(r.Moq.ResultsByParams_Reset, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Reset) {
			copy(r.Moq.ResultsByParams_Reset[insertAt+1:], r.Moq.ResultsByParams_Reset[insertAt:0])
			r.Moq.ResultsByParams_Reset[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Reset(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqErrorList_starGenType_Reset_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqErrorList_starGenType_Reset_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqErrorList_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqErrorList_starGenType_Reset_doFn
				DoReturnFn MoqErrorList_starGenType_Reset_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqErrorList_starGenType) PrettyParams_Reset(params MoqErrorList_starGenType_Reset_params) string {
	return fmt.Sprintf("Reset()")
}

func (m *MoqErrorList_starGenType) ParamsKey_Reset(params MoqErrorList_starGenType_Reset_params, anyParams uint64) MoqErrorList_starGenType_Reset_paramsKey {
	m.Scene.T.Helper()
	return MoqErrorList_starGenType_Reset_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqErrorList_starGenType_recorder) RemoveMultiples() *MoqErrorList_starGenType_RemoveMultiples_fnRecorder {
	return &MoqErrorList_starGenType_RemoveMultiples_fnRecorder{
		Params:   MoqErrorList_starGenType_RemoveMultiples_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqErrorList_starGenType_RemoveMultiples_fnRecorder) Any() *MoqErrorList_starGenType_RemoveMultiples_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RemoveMultiples(r.Params))
		return nil
	}
	return &MoqErrorList_starGenType_RemoveMultiples_anyParams{Recorder: r}
}

func (r *MoqErrorList_starGenType_RemoveMultiples_fnRecorder) Seq() *MoqErrorList_starGenType_RemoveMultiples_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RemoveMultiples(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqErrorList_starGenType_RemoveMultiples_fnRecorder) NoSeq() *MoqErrorList_starGenType_RemoveMultiples_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RemoveMultiples(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqErrorList_starGenType_RemoveMultiples_fnRecorder) ReturnResults() *MoqErrorList_starGenType_RemoveMultiples_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqErrorList_starGenType_RemoveMultiples_doFn
		DoReturnFn MoqErrorList_starGenType_RemoveMultiples_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqErrorList_starGenType_RemoveMultiples_fnRecorder) AndDo(fn MoqErrorList_starGenType_RemoveMultiples_doFn) *MoqErrorList_starGenType_RemoveMultiples_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqErrorList_starGenType_RemoveMultiples_fnRecorder) DoReturnResults(fn MoqErrorList_starGenType_RemoveMultiples_doReturnFn) *MoqErrorList_starGenType_RemoveMultiples_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqErrorList_starGenType_RemoveMultiples_doFn
		DoReturnFn MoqErrorList_starGenType_RemoveMultiples_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqErrorList_starGenType_RemoveMultiples_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqErrorList_starGenType_RemoveMultiples_resultsByParams
	for n, res := range r.Moq.ResultsByParams_RemoveMultiples {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqErrorList_starGenType_RemoveMultiples_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqErrorList_starGenType_RemoveMultiples_paramsKey]*MoqErrorList_starGenType_RemoveMultiples_results{},
		}
		r.Moq.ResultsByParams_RemoveMultiples = append(r.Moq.ResultsByParams_RemoveMultiples, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_RemoveMultiples) {
			copy(r.Moq.ResultsByParams_RemoveMultiples[insertAt+1:], r.Moq.ResultsByParams_RemoveMultiples[insertAt:0])
			r.Moq.ResultsByParams_RemoveMultiples[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_RemoveMultiples(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqErrorList_starGenType_RemoveMultiples_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqErrorList_starGenType_RemoveMultiples_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqErrorList_starGenType_RemoveMultiples_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqErrorList_starGenType_RemoveMultiples_doFn
				DoReturnFn MoqErrorList_starGenType_RemoveMultiples_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqErrorList_starGenType) PrettyParams_RemoveMultiples(params MoqErrorList_starGenType_RemoveMultiples_params) string {
	return fmt.Sprintf("RemoveMultiples()")
}

func (m *MoqErrorList_starGenType) ParamsKey_RemoveMultiples(params MoqErrorList_starGenType_RemoveMultiples_params, anyParams uint64) MoqErrorList_starGenType_RemoveMultiples_paramsKey {
	m.Scene.T.Helper()
	return MoqErrorList_starGenType_RemoveMultiples_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqErrorList_starGenType) Reset() {
	m.ResultsByParams_Add = nil
	m.ResultsByParams_Reset = nil
	m.ResultsByParams_RemoveMultiples = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqErrorList_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Add {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Add(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Reset {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Reset(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_RemoveMultiples {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_RemoveMultiples(results.Params))
			}
		}
	}
}
