// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package scanner

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that scanner.ErrorList_genType is
// mocked completely
var _ ErrorList_genType = (*MoqErrorList_genType_mock)(nil)

// ErrorList_genType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type ErrorList_genType interface {
	Len() int
	Swap(i, j int)
	Less(i, j int) bool
	Sort()
	Error() string
	Err() error
}

// MoqErrorList_genType holds the state of a moq of the ErrorList_genType type
type MoqErrorList_genType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqErrorList_genType_mock

	ResultsByParams_Len   []MoqErrorList_genType_Len_resultsByParams
	ResultsByParams_Swap  []MoqErrorList_genType_Swap_resultsByParams
	ResultsByParams_Less  []MoqErrorList_genType_Less_resultsByParams
	ResultsByParams_Sort  []MoqErrorList_genType_Sort_resultsByParams
	ResultsByParams_Error []MoqErrorList_genType_Error_resultsByParams
	ResultsByParams_Err   []MoqErrorList_genType_Err_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Len  struct{}
			Swap struct {
				Param1 moq.ParamIndexing
				J      moq.ParamIndexing
			}
			Less struct {
				Param1 moq.ParamIndexing
				J      moq.ParamIndexing
			}
			Sort  struct{}
			Error struct{}
			Err   struct{}
		}
	}
}

// MoqErrorList_genType_mock isolates the mock interface of the
// ErrorList_genType type
type MoqErrorList_genType_mock struct {
	Moq *MoqErrorList_genType
}

// MoqErrorList_genType_recorder isolates the recorder interface of the
// ErrorList_genType type
type MoqErrorList_genType_recorder struct {
	Moq *MoqErrorList_genType
}

// MoqErrorList_genType_Len_params holds the params of the ErrorList_genType
// type
type MoqErrorList_genType_Len_params struct{}

// MoqErrorList_genType_Len_paramsKey holds the map key params of the
// ErrorList_genType type
type MoqErrorList_genType_Len_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqErrorList_genType_Len_resultsByParams contains the results for a given
// set of parameters for the ErrorList_genType type
type MoqErrorList_genType_Len_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqErrorList_genType_Len_paramsKey]*MoqErrorList_genType_Len_results
}

// MoqErrorList_genType_Len_doFn defines the type of function needed when
// calling AndDo for the ErrorList_genType type
type MoqErrorList_genType_Len_doFn func()

// MoqErrorList_genType_Len_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ErrorList_genType type
type MoqErrorList_genType_Len_doReturnFn func() int

// MoqErrorList_genType_Len_results holds the results of the ErrorList_genType
// type
type MoqErrorList_genType_Len_results struct {
	Params  MoqErrorList_genType_Len_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqErrorList_genType_Len_doFn
		DoReturnFn MoqErrorList_genType_Len_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqErrorList_genType_Len_fnRecorder routes recorded function calls to the
// MoqErrorList_genType moq
type MoqErrorList_genType_Len_fnRecorder struct {
	Params    MoqErrorList_genType_Len_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqErrorList_genType_Len_results
	Moq       *MoqErrorList_genType
}

// MoqErrorList_genType_Len_anyParams isolates the any params functions of the
// ErrorList_genType type
type MoqErrorList_genType_Len_anyParams struct {
	Recorder *MoqErrorList_genType_Len_fnRecorder
}

// MoqErrorList_genType_Swap_params holds the params of the ErrorList_genType
// type
type MoqErrorList_genType_Swap_params struct{ Param1, J int }

// MoqErrorList_genType_Swap_paramsKey holds the map key params of the
// ErrorList_genType type
type MoqErrorList_genType_Swap_paramsKey struct {
	Params struct{ Param1, J int }
	Hashes struct{ Param1, J hash.Hash }
}

// MoqErrorList_genType_Swap_resultsByParams contains the results for a given
// set of parameters for the ErrorList_genType type
type MoqErrorList_genType_Swap_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqErrorList_genType_Swap_paramsKey]*MoqErrorList_genType_Swap_results
}

// MoqErrorList_genType_Swap_doFn defines the type of function needed when
// calling AndDo for the ErrorList_genType type
type MoqErrorList_genType_Swap_doFn func(i, j int)

// MoqErrorList_genType_Swap_doReturnFn defines the type of function needed
// when calling DoReturnResults for the ErrorList_genType type
type MoqErrorList_genType_Swap_doReturnFn func(i, j int)

// MoqErrorList_genType_Swap_results holds the results of the ErrorList_genType
// type
type MoqErrorList_genType_Swap_results struct {
	Params  MoqErrorList_genType_Swap_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqErrorList_genType_Swap_doFn
		DoReturnFn MoqErrorList_genType_Swap_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqErrorList_genType_Swap_fnRecorder routes recorded function calls to the
// MoqErrorList_genType moq
type MoqErrorList_genType_Swap_fnRecorder struct {
	Params    MoqErrorList_genType_Swap_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqErrorList_genType_Swap_results
	Moq       *MoqErrorList_genType
}

// MoqErrorList_genType_Swap_anyParams isolates the any params functions of the
// ErrorList_genType type
type MoqErrorList_genType_Swap_anyParams struct {
	Recorder *MoqErrorList_genType_Swap_fnRecorder
}

// MoqErrorList_genType_Less_params holds the params of the ErrorList_genType
// type
type MoqErrorList_genType_Less_params struct{ Param1, J int }

// MoqErrorList_genType_Less_paramsKey holds the map key params of the
// ErrorList_genType type
type MoqErrorList_genType_Less_paramsKey struct {
	Params struct{ Param1, J int }
	Hashes struct{ Param1, J hash.Hash }
}

// MoqErrorList_genType_Less_resultsByParams contains the results for a given
// set of parameters for the ErrorList_genType type
type MoqErrorList_genType_Less_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqErrorList_genType_Less_paramsKey]*MoqErrorList_genType_Less_results
}

// MoqErrorList_genType_Less_doFn defines the type of function needed when
// calling AndDo for the ErrorList_genType type
type MoqErrorList_genType_Less_doFn func(i, j int)

// MoqErrorList_genType_Less_doReturnFn defines the type of function needed
// when calling DoReturnResults for the ErrorList_genType type
type MoqErrorList_genType_Less_doReturnFn func(i, j int) bool

// MoqErrorList_genType_Less_results holds the results of the ErrorList_genType
// type
type MoqErrorList_genType_Less_results struct {
	Params  MoqErrorList_genType_Less_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqErrorList_genType_Less_doFn
		DoReturnFn MoqErrorList_genType_Less_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqErrorList_genType_Less_fnRecorder routes recorded function calls to the
// MoqErrorList_genType moq
type MoqErrorList_genType_Less_fnRecorder struct {
	Params    MoqErrorList_genType_Less_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqErrorList_genType_Less_results
	Moq       *MoqErrorList_genType
}

// MoqErrorList_genType_Less_anyParams isolates the any params functions of the
// ErrorList_genType type
type MoqErrorList_genType_Less_anyParams struct {
	Recorder *MoqErrorList_genType_Less_fnRecorder
}

// MoqErrorList_genType_Sort_params holds the params of the ErrorList_genType
// type
type MoqErrorList_genType_Sort_params struct{}

// MoqErrorList_genType_Sort_paramsKey holds the map key params of the
// ErrorList_genType type
type MoqErrorList_genType_Sort_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqErrorList_genType_Sort_resultsByParams contains the results for a given
// set of parameters for the ErrorList_genType type
type MoqErrorList_genType_Sort_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqErrorList_genType_Sort_paramsKey]*MoqErrorList_genType_Sort_results
}

// MoqErrorList_genType_Sort_doFn defines the type of function needed when
// calling AndDo for the ErrorList_genType type
type MoqErrorList_genType_Sort_doFn func()

// MoqErrorList_genType_Sort_doReturnFn defines the type of function needed
// when calling DoReturnResults for the ErrorList_genType type
type MoqErrorList_genType_Sort_doReturnFn func()

// MoqErrorList_genType_Sort_results holds the results of the ErrorList_genType
// type
type MoqErrorList_genType_Sort_results struct {
	Params  MoqErrorList_genType_Sort_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqErrorList_genType_Sort_doFn
		DoReturnFn MoqErrorList_genType_Sort_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqErrorList_genType_Sort_fnRecorder routes recorded function calls to the
// MoqErrorList_genType moq
type MoqErrorList_genType_Sort_fnRecorder struct {
	Params    MoqErrorList_genType_Sort_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqErrorList_genType_Sort_results
	Moq       *MoqErrorList_genType
}

// MoqErrorList_genType_Sort_anyParams isolates the any params functions of the
// ErrorList_genType type
type MoqErrorList_genType_Sort_anyParams struct {
	Recorder *MoqErrorList_genType_Sort_fnRecorder
}

// MoqErrorList_genType_Error_params holds the params of the ErrorList_genType
// type
type MoqErrorList_genType_Error_params struct{}

// MoqErrorList_genType_Error_paramsKey holds the map key params of the
// ErrorList_genType type
type MoqErrorList_genType_Error_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqErrorList_genType_Error_resultsByParams contains the results for a given
// set of parameters for the ErrorList_genType type
type MoqErrorList_genType_Error_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqErrorList_genType_Error_paramsKey]*MoqErrorList_genType_Error_results
}

// MoqErrorList_genType_Error_doFn defines the type of function needed when
// calling AndDo for the ErrorList_genType type
type MoqErrorList_genType_Error_doFn func()

// MoqErrorList_genType_Error_doReturnFn defines the type of function needed
// when calling DoReturnResults for the ErrorList_genType type
type MoqErrorList_genType_Error_doReturnFn func() string

// MoqErrorList_genType_Error_results holds the results of the
// ErrorList_genType type
type MoqErrorList_genType_Error_results struct {
	Params  MoqErrorList_genType_Error_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqErrorList_genType_Error_doFn
		DoReturnFn MoqErrorList_genType_Error_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqErrorList_genType_Error_fnRecorder routes recorded function calls to the
// MoqErrorList_genType moq
type MoqErrorList_genType_Error_fnRecorder struct {
	Params    MoqErrorList_genType_Error_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqErrorList_genType_Error_results
	Moq       *MoqErrorList_genType
}

// MoqErrorList_genType_Error_anyParams isolates the any params functions of
// the ErrorList_genType type
type MoqErrorList_genType_Error_anyParams struct {
	Recorder *MoqErrorList_genType_Error_fnRecorder
}

// MoqErrorList_genType_Err_params holds the params of the ErrorList_genType
// type
type MoqErrorList_genType_Err_params struct{}

// MoqErrorList_genType_Err_paramsKey holds the map key params of the
// ErrorList_genType type
type MoqErrorList_genType_Err_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqErrorList_genType_Err_resultsByParams contains the results for a given
// set of parameters for the ErrorList_genType type
type MoqErrorList_genType_Err_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqErrorList_genType_Err_paramsKey]*MoqErrorList_genType_Err_results
}

// MoqErrorList_genType_Err_doFn defines the type of function needed when
// calling AndDo for the ErrorList_genType type
type MoqErrorList_genType_Err_doFn func()

// MoqErrorList_genType_Err_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ErrorList_genType type
type MoqErrorList_genType_Err_doReturnFn func() error

// MoqErrorList_genType_Err_results holds the results of the ErrorList_genType
// type
type MoqErrorList_genType_Err_results struct {
	Params  MoqErrorList_genType_Err_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqErrorList_genType_Err_doFn
		DoReturnFn MoqErrorList_genType_Err_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqErrorList_genType_Err_fnRecorder routes recorded function calls to the
// MoqErrorList_genType moq
type MoqErrorList_genType_Err_fnRecorder struct {
	Params    MoqErrorList_genType_Err_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqErrorList_genType_Err_results
	Moq       *MoqErrorList_genType
}

// MoqErrorList_genType_Err_anyParams isolates the any params functions of the
// ErrorList_genType type
type MoqErrorList_genType_Err_anyParams struct {
	Recorder *MoqErrorList_genType_Err_fnRecorder
}

// NewMoqErrorList_genType creates a new moq of the ErrorList_genType type
func NewMoqErrorList_genType(scene *moq.Scene, config *moq.Config) *MoqErrorList_genType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqErrorList_genType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqErrorList_genType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Len  struct{}
				Swap struct {
					Param1 moq.ParamIndexing
					J      moq.ParamIndexing
				}
				Less struct {
					Param1 moq.ParamIndexing
					J      moq.ParamIndexing
				}
				Sort  struct{}
				Error struct{}
				Err   struct{}
			}
		}{ParameterIndexing: struct {
			Len  struct{}
			Swap struct {
				Param1 moq.ParamIndexing
				J      moq.ParamIndexing
			}
			Less struct {
				Param1 moq.ParamIndexing
				J      moq.ParamIndexing
			}
			Sort  struct{}
			Error struct{}
			Err   struct{}
		}{
			Len: struct{}{},
			Swap: struct {
				Param1 moq.ParamIndexing
				J      moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
				J:      moq.ParamIndexByValue,
			},
			Less: struct {
				Param1 moq.ParamIndexing
				J      moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
				J:      moq.ParamIndexByValue,
			},
			Sort:  struct{}{},
			Error: struct{}{},
			Err:   struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the ErrorList_genType type
func (m *MoqErrorList_genType) Mock() *MoqErrorList_genType_mock { return m.Moq }

func (m *MoqErrorList_genType_mock) Len() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqErrorList_genType_Len_params{}
	var results *MoqErrorList_genType_Len_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Len {
		paramsKey := m.Moq.ParamsKey_Len(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Len(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Len(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Len(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqErrorList_genType_mock) Swap(param1, j int) {
	m.Moq.Scene.T.Helper()
	params := MoqErrorList_genType_Swap_params{
		Param1: param1,
		J:      j,
	}
	var results *MoqErrorList_genType_Swap_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Swap {
		paramsKey := m.Moq.ParamsKey_Swap(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Swap(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Swap(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Swap(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1, j)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(param1, j)
	}
	return
}

func (m *MoqErrorList_genType_mock) Less(param1, j int) (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqErrorList_genType_Less_params{
		Param1: param1,
		J:      j,
	}
	var results *MoqErrorList_genType_Less_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Less {
		paramsKey := m.Moq.ParamsKey_Less(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Less(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Less(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Less(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1, j)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1, j)
	}
	return
}

func (m *MoqErrorList_genType_mock) Sort() {
	m.Moq.Scene.T.Helper()
	params := MoqErrorList_genType_Sort_params{}
	var results *MoqErrorList_genType_Sort_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Sort {
		paramsKey := m.Moq.ParamsKey_Sort(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Sort(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Sort(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Sort(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqErrorList_genType_mock) Error() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqErrorList_genType_Error_params{}
	var results *MoqErrorList_genType_Error_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Error {
		paramsKey := m.Moq.ParamsKey_Error(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Error(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Error(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Error(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqErrorList_genType_mock) Err() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqErrorList_genType_Err_params{}
	var results *MoqErrorList_genType_Err_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Err {
		paramsKey := m.Moq.ParamsKey_Err(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Err(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Err(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Err(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the ErrorList_genType type
func (m *MoqErrorList_genType) OnCall() *MoqErrorList_genType_recorder {
	return &MoqErrorList_genType_recorder{
		Moq: m,
	}
}

func (m *MoqErrorList_genType_recorder) Len() *MoqErrorList_genType_Len_fnRecorder {
	return &MoqErrorList_genType_Len_fnRecorder{
		Params:   MoqErrorList_genType_Len_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqErrorList_genType_Len_fnRecorder) Any() *MoqErrorList_genType_Len_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Len(r.Params))
		return nil
	}
	return &MoqErrorList_genType_Len_anyParams{Recorder: r}
}

func (r *MoqErrorList_genType_Len_fnRecorder) Seq() *MoqErrorList_genType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Len(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqErrorList_genType_Len_fnRecorder) NoSeq() *MoqErrorList_genType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Len(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqErrorList_genType_Len_fnRecorder) ReturnResults(result1 int) *MoqErrorList_genType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqErrorList_genType_Len_doFn
		DoReturnFn MoqErrorList_genType_Len_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqErrorList_genType_Len_fnRecorder) AndDo(fn MoqErrorList_genType_Len_doFn) *MoqErrorList_genType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqErrorList_genType_Len_fnRecorder) DoReturnResults(fn MoqErrorList_genType_Len_doReturnFn) *MoqErrorList_genType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqErrorList_genType_Len_doFn
		DoReturnFn MoqErrorList_genType_Len_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqErrorList_genType_Len_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqErrorList_genType_Len_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Len {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqErrorList_genType_Len_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqErrorList_genType_Len_paramsKey]*MoqErrorList_genType_Len_results{},
		}
		r.Moq.ResultsByParams_Len = append(r.Moq.ResultsByParams_Len, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Len) {
			copy(r.Moq.ResultsByParams_Len[insertAt+1:], r.Moq.ResultsByParams_Len[insertAt:0])
			r.Moq.ResultsByParams_Len[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Len(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqErrorList_genType_Len_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqErrorList_genType_Len_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqErrorList_genType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqErrorList_genType_Len_doFn
				DoReturnFn MoqErrorList_genType_Len_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqErrorList_genType) PrettyParams_Len(params MoqErrorList_genType_Len_params) string {
	return fmt.Sprintf("Len()")
}

func (m *MoqErrorList_genType) ParamsKey_Len(params MoqErrorList_genType_Len_params, anyParams uint64) MoqErrorList_genType_Len_paramsKey {
	m.Scene.T.Helper()
	return MoqErrorList_genType_Len_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqErrorList_genType_recorder) Swap(param1, j int) *MoqErrorList_genType_Swap_fnRecorder {
	return &MoqErrorList_genType_Swap_fnRecorder{
		Params: MoqErrorList_genType_Swap_params{
			Param1: param1,
			J:      j,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqErrorList_genType_Swap_fnRecorder) Any() *MoqErrorList_genType_Swap_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Swap(r.Params))
		return nil
	}
	return &MoqErrorList_genType_Swap_anyParams{Recorder: r}
}

func (a *MoqErrorList_genType_Swap_anyParams) Param1() *MoqErrorList_genType_Swap_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqErrorList_genType_Swap_anyParams) J() *MoqErrorList_genType_Swap_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqErrorList_genType_Swap_fnRecorder) Seq() *MoqErrorList_genType_Swap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Swap(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqErrorList_genType_Swap_fnRecorder) NoSeq() *MoqErrorList_genType_Swap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Swap(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqErrorList_genType_Swap_fnRecorder) ReturnResults() *MoqErrorList_genType_Swap_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqErrorList_genType_Swap_doFn
		DoReturnFn MoqErrorList_genType_Swap_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqErrorList_genType_Swap_fnRecorder) AndDo(fn MoqErrorList_genType_Swap_doFn) *MoqErrorList_genType_Swap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqErrorList_genType_Swap_fnRecorder) DoReturnResults(fn MoqErrorList_genType_Swap_doReturnFn) *MoqErrorList_genType_Swap_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqErrorList_genType_Swap_doFn
		DoReturnFn MoqErrorList_genType_Swap_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqErrorList_genType_Swap_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqErrorList_genType_Swap_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Swap {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqErrorList_genType_Swap_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqErrorList_genType_Swap_paramsKey]*MoqErrorList_genType_Swap_results{},
		}
		r.Moq.ResultsByParams_Swap = append(r.Moq.ResultsByParams_Swap, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Swap) {
			copy(r.Moq.ResultsByParams_Swap[insertAt+1:], r.Moq.ResultsByParams_Swap[insertAt:0])
			r.Moq.ResultsByParams_Swap[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Swap(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqErrorList_genType_Swap_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqErrorList_genType_Swap_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqErrorList_genType_Swap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqErrorList_genType_Swap_doFn
				DoReturnFn MoqErrorList_genType_Swap_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqErrorList_genType) PrettyParams_Swap(params MoqErrorList_genType_Swap_params) string {
	return fmt.Sprintf("Swap(%#v, %#v)", params.Param1, params.J)
}

func (m *MoqErrorList_genType) ParamsKey_Swap(params MoqErrorList_genType_Swap_params, anyParams uint64) MoqErrorList_genType_Swap_paramsKey {
	m.Scene.T.Helper()
	var param1Used int
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Swap.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	var jUsed int
	var jUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Swap.J == moq.ParamIndexByValue {
			jUsed = params.J
		} else {
			jUsedHash = hash.DeepHash(params.J)
		}
	}
	return MoqErrorList_genType_Swap_paramsKey{
		Params: struct{ Param1, J int }{
			Param1: param1Used,
			J:      jUsed,
		},
		Hashes: struct{ Param1, J hash.Hash }{
			Param1: param1UsedHash,
			J:      jUsedHash,
		},
	}
}

func (m *MoqErrorList_genType_recorder) Less(param1, j int) *MoqErrorList_genType_Less_fnRecorder {
	return &MoqErrorList_genType_Less_fnRecorder{
		Params: MoqErrorList_genType_Less_params{
			Param1: param1,
			J:      j,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqErrorList_genType_Less_fnRecorder) Any() *MoqErrorList_genType_Less_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Less(r.Params))
		return nil
	}
	return &MoqErrorList_genType_Less_anyParams{Recorder: r}
}

func (a *MoqErrorList_genType_Less_anyParams) Param1() *MoqErrorList_genType_Less_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqErrorList_genType_Less_anyParams) J() *MoqErrorList_genType_Less_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqErrorList_genType_Less_fnRecorder) Seq() *MoqErrorList_genType_Less_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Less(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqErrorList_genType_Less_fnRecorder) NoSeq() *MoqErrorList_genType_Less_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Less(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqErrorList_genType_Less_fnRecorder) ReturnResults(result1 bool) *MoqErrorList_genType_Less_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqErrorList_genType_Less_doFn
		DoReturnFn MoqErrorList_genType_Less_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqErrorList_genType_Less_fnRecorder) AndDo(fn MoqErrorList_genType_Less_doFn) *MoqErrorList_genType_Less_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqErrorList_genType_Less_fnRecorder) DoReturnResults(fn MoqErrorList_genType_Less_doReturnFn) *MoqErrorList_genType_Less_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqErrorList_genType_Less_doFn
		DoReturnFn MoqErrorList_genType_Less_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqErrorList_genType_Less_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqErrorList_genType_Less_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Less {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqErrorList_genType_Less_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqErrorList_genType_Less_paramsKey]*MoqErrorList_genType_Less_results{},
		}
		r.Moq.ResultsByParams_Less = append(r.Moq.ResultsByParams_Less, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Less) {
			copy(r.Moq.ResultsByParams_Less[insertAt+1:], r.Moq.ResultsByParams_Less[insertAt:0])
			r.Moq.ResultsByParams_Less[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Less(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqErrorList_genType_Less_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqErrorList_genType_Less_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqErrorList_genType_Less_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqErrorList_genType_Less_doFn
				DoReturnFn MoqErrorList_genType_Less_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqErrorList_genType) PrettyParams_Less(params MoqErrorList_genType_Less_params) string {
	return fmt.Sprintf("Less(%#v, %#v)", params.Param1, params.J)
}

func (m *MoqErrorList_genType) ParamsKey_Less(params MoqErrorList_genType_Less_params, anyParams uint64) MoqErrorList_genType_Less_paramsKey {
	m.Scene.T.Helper()
	var param1Used int
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Less.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	var jUsed int
	var jUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Less.J == moq.ParamIndexByValue {
			jUsed = params.J
		} else {
			jUsedHash = hash.DeepHash(params.J)
		}
	}
	return MoqErrorList_genType_Less_paramsKey{
		Params: struct{ Param1, J int }{
			Param1: param1Used,
			J:      jUsed,
		},
		Hashes: struct{ Param1, J hash.Hash }{
			Param1: param1UsedHash,
			J:      jUsedHash,
		},
	}
}

func (m *MoqErrorList_genType_recorder) Sort() *MoqErrorList_genType_Sort_fnRecorder {
	return &MoqErrorList_genType_Sort_fnRecorder{
		Params:   MoqErrorList_genType_Sort_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqErrorList_genType_Sort_fnRecorder) Any() *MoqErrorList_genType_Sort_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sort(r.Params))
		return nil
	}
	return &MoqErrorList_genType_Sort_anyParams{Recorder: r}
}

func (r *MoqErrorList_genType_Sort_fnRecorder) Seq() *MoqErrorList_genType_Sort_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sort(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqErrorList_genType_Sort_fnRecorder) NoSeq() *MoqErrorList_genType_Sort_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sort(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqErrorList_genType_Sort_fnRecorder) ReturnResults() *MoqErrorList_genType_Sort_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqErrorList_genType_Sort_doFn
		DoReturnFn MoqErrorList_genType_Sort_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqErrorList_genType_Sort_fnRecorder) AndDo(fn MoqErrorList_genType_Sort_doFn) *MoqErrorList_genType_Sort_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqErrorList_genType_Sort_fnRecorder) DoReturnResults(fn MoqErrorList_genType_Sort_doReturnFn) *MoqErrorList_genType_Sort_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqErrorList_genType_Sort_doFn
		DoReturnFn MoqErrorList_genType_Sort_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqErrorList_genType_Sort_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqErrorList_genType_Sort_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Sort {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqErrorList_genType_Sort_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqErrorList_genType_Sort_paramsKey]*MoqErrorList_genType_Sort_results{},
		}
		r.Moq.ResultsByParams_Sort = append(r.Moq.ResultsByParams_Sort, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Sort) {
			copy(r.Moq.ResultsByParams_Sort[insertAt+1:], r.Moq.ResultsByParams_Sort[insertAt:0])
			r.Moq.ResultsByParams_Sort[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Sort(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqErrorList_genType_Sort_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqErrorList_genType_Sort_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqErrorList_genType_Sort_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqErrorList_genType_Sort_doFn
				DoReturnFn MoqErrorList_genType_Sort_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqErrorList_genType) PrettyParams_Sort(params MoqErrorList_genType_Sort_params) string {
	return fmt.Sprintf("Sort()")
}

func (m *MoqErrorList_genType) ParamsKey_Sort(params MoqErrorList_genType_Sort_params, anyParams uint64) MoqErrorList_genType_Sort_paramsKey {
	m.Scene.T.Helper()
	return MoqErrorList_genType_Sort_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqErrorList_genType_recorder) Error() *MoqErrorList_genType_Error_fnRecorder {
	return &MoqErrorList_genType_Error_fnRecorder{
		Params:   MoqErrorList_genType_Error_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqErrorList_genType_Error_fnRecorder) Any() *MoqErrorList_genType_Error_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Error(r.Params))
		return nil
	}
	return &MoqErrorList_genType_Error_anyParams{Recorder: r}
}

func (r *MoqErrorList_genType_Error_fnRecorder) Seq() *MoqErrorList_genType_Error_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Error(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqErrorList_genType_Error_fnRecorder) NoSeq() *MoqErrorList_genType_Error_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Error(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqErrorList_genType_Error_fnRecorder) ReturnResults(result1 string) *MoqErrorList_genType_Error_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqErrorList_genType_Error_doFn
		DoReturnFn MoqErrorList_genType_Error_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqErrorList_genType_Error_fnRecorder) AndDo(fn MoqErrorList_genType_Error_doFn) *MoqErrorList_genType_Error_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqErrorList_genType_Error_fnRecorder) DoReturnResults(fn MoqErrorList_genType_Error_doReturnFn) *MoqErrorList_genType_Error_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqErrorList_genType_Error_doFn
		DoReturnFn MoqErrorList_genType_Error_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqErrorList_genType_Error_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqErrorList_genType_Error_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Error {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqErrorList_genType_Error_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqErrorList_genType_Error_paramsKey]*MoqErrorList_genType_Error_results{},
		}
		r.Moq.ResultsByParams_Error = append(r.Moq.ResultsByParams_Error, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Error) {
			copy(r.Moq.ResultsByParams_Error[insertAt+1:], r.Moq.ResultsByParams_Error[insertAt:0])
			r.Moq.ResultsByParams_Error[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Error(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqErrorList_genType_Error_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqErrorList_genType_Error_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqErrorList_genType_Error_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqErrorList_genType_Error_doFn
				DoReturnFn MoqErrorList_genType_Error_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqErrorList_genType) PrettyParams_Error(params MoqErrorList_genType_Error_params) string {
	return fmt.Sprintf("Error()")
}

func (m *MoqErrorList_genType) ParamsKey_Error(params MoqErrorList_genType_Error_params, anyParams uint64) MoqErrorList_genType_Error_paramsKey {
	m.Scene.T.Helper()
	return MoqErrorList_genType_Error_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqErrorList_genType_recorder) Err() *MoqErrorList_genType_Err_fnRecorder {
	return &MoqErrorList_genType_Err_fnRecorder{
		Params:   MoqErrorList_genType_Err_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqErrorList_genType_Err_fnRecorder) Any() *MoqErrorList_genType_Err_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Err(r.Params))
		return nil
	}
	return &MoqErrorList_genType_Err_anyParams{Recorder: r}
}

func (r *MoqErrorList_genType_Err_fnRecorder) Seq() *MoqErrorList_genType_Err_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Err(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqErrorList_genType_Err_fnRecorder) NoSeq() *MoqErrorList_genType_Err_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Err(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqErrorList_genType_Err_fnRecorder) ReturnResults(result1 error) *MoqErrorList_genType_Err_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqErrorList_genType_Err_doFn
		DoReturnFn MoqErrorList_genType_Err_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqErrorList_genType_Err_fnRecorder) AndDo(fn MoqErrorList_genType_Err_doFn) *MoqErrorList_genType_Err_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqErrorList_genType_Err_fnRecorder) DoReturnResults(fn MoqErrorList_genType_Err_doReturnFn) *MoqErrorList_genType_Err_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqErrorList_genType_Err_doFn
		DoReturnFn MoqErrorList_genType_Err_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqErrorList_genType_Err_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqErrorList_genType_Err_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Err {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqErrorList_genType_Err_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqErrorList_genType_Err_paramsKey]*MoqErrorList_genType_Err_results{},
		}
		r.Moq.ResultsByParams_Err = append(r.Moq.ResultsByParams_Err, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Err) {
			copy(r.Moq.ResultsByParams_Err[insertAt+1:], r.Moq.ResultsByParams_Err[insertAt:0])
			r.Moq.ResultsByParams_Err[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Err(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqErrorList_genType_Err_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqErrorList_genType_Err_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqErrorList_genType_Err_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqErrorList_genType_Err_doFn
				DoReturnFn MoqErrorList_genType_Err_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqErrorList_genType) PrettyParams_Err(params MoqErrorList_genType_Err_params) string {
	return fmt.Sprintf("Err()")
}

func (m *MoqErrorList_genType) ParamsKey_Err(params MoqErrorList_genType_Err_params, anyParams uint64) MoqErrorList_genType_Err_paramsKey {
	m.Scene.T.Helper()
	return MoqErrorList_genType_Err_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqErrorList_genType) Reset() {
	m.ResultsByParams_Len = nil
	m.ResultsByParams_Swap = nil
	m.ResultsByParams_Less = nil
	m.ResultsByParams_Sort = nil
	m.ResultsByParams_Error = nil
	m.ResultsByParams_Err = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqErrorList_genType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Len {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Len(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Swap {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Swap(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Less {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Less(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Sort {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Sort(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Error {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Error(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Err {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Err(results.Params))
			}
		}
	}
}
