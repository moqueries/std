// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package dwarf

import (
	"debug/dwarf"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that dwarf.LineReader_starGenType is
// mocked completely
var _ LineReader_starGenType = (*MoqLineReader_starGenType_mock)(nil)

// LineReader_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type LineReader_starGenType interface {
	Next(entry *dwarf.LineEntry) error
	Tell() dwarf.LineReaderPos
	Seek(pos dwarf.LineReaderPos)
	Reset()
	Files() []*dwarf.LineFile
	SeekPC(pc uint64, entry *dwarf.LineEntry) error
}

// MoqLineReader_starGenType holds the state of a moq of the
// LineReader_starGenType type
type MoqLineReader_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqLineReader_starGenType_mock

	ResultsByParams_Next   []MoqLineReader_starGenType_Next_resultsByParams
	ResultsByParams_Tell   []MoqLineReader_starGenType_Tell_resultsByParams
	ResultsByParams_Seek   []MoqLineReader_starGenType_Seek_resultsByParams
	ResultsByParams_Reset  []MoqLineReader_starGenType_Reset_resultsByParams
	ResultsByParams_Files  []MoqLineReader_starGenType_Files_resultsByParams
	ResultsByParams_SeekPC []MoqLineReader_starGenType_SeekPC_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Next struct {
				Entry moq.ParamIndexing
			}
			Tell struct{}
			Seek struct {
				Pos moq.ParamIndexing
			}
			Reset  struct{}
			Files  struct{}
			SeekPC struct {
				Pc    moq.ParamIndexing
				Entry moq.ParamIndexing
			}
		}
	}
	// MoqLineReader_starGenType_mock isolates the mock interface of the
}

// LineReader_starGenType type
type MoqLineReader_starGenType_mock struct {
	Moq *MoqLineReader_starGenType
}

// MoqLineReader_starGenType_recorder isolates the recorder interface of the
// LineReader_starGenType type
type MoqLineReader_starGenType_recorder struct {
	Moq *MoqLineReader_starGenType
}

// MoqLineReader_starGenType_Next_params holds the params of the
// LineReader_starGenType type
type MoqLineReader_starGenType_Next_params struct{ Entry *dwarf.LineEntry }

// MoqLineReader_starGenType_Next_paramsKey holds the map key params of the
// LineReader_starGenType type
type MoqLineReader_starGenType_Next_paramsKey struct {
	Params struct{ Entry *dwarf.LineEntry }
	Hashes struct{ Entry hash.Hash }
}

// MoqLineReader_starGenType_Next_resultsByParams contains the results for a
// given set of parameters for the LineReader_starGenType type
type MoqLineReader_starGenType_Next_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqLineReader_starGenType_Next_paramsKey]*MoqLineReader_starGenType_Next_results
}

// MoqLineReader_starGenType_Next_doFn defines the type of function needed when
// calling AndDo for the LineReader_starGenType type
type MoqLineReader_starGenType_Next_doFn func(entry *dwarf.LineEntry)

// MoqLineReader_starGenType_Next_doReturnFn defines the type of function
// needed when calling DoReturnResults for the LineReader_starGenType type
type MoqLineReader_starGenType_Next_doReturnFn func(entry *dwarf.LineEntry) error

// MoqLineReader_starGenType_Next_results holds the results of the
// LineReader_starGenType type
type MoqLineReader_starGenType_Next_results struct {
	Params  MoqLineReader_starGenType_Next_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqLineReader_starGenType_Next_doFn
		DoReturnFn MoqLineReader_starGenType_Next_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqLineReader_starGenType_Next_fnRecorder routes recorded function calls to
// the MoqLineReader_starGenType moq
type MoqLineReader_starGenType_Next_fnRecorder struct {
	Params    MoqLineReader_starGenType_Next_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqLineReader_starGenType_Next_results
	Moq       *MoqLineReader_starGenType
}

// MoqLineReader_starGenType_Next_anyParams isolates the any params functions
// of the LineReader_starGenType type
type MoqLineReader_starGenType_Next_anyParams struct {
	Recorder *MoqLineReader_starGenType_Next_fnRecorder
}

// MoqLineReader_starGenType_Tell_params holds the params of the
// LineReader_starGenType type
type MoqLineReader_starGenType_Tell_params struct{}

// MoqLineReader_starGenType_Tell_paramsKey holds the map key params of the
// LineReader_starGenType type
type MoqLineReader_starGenType_Tell_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqLineReader_starGenType_Tell_resultsByParams contains the results for a
// given set of parameters for the LineReader_starGenType type
type MoqLineReader_starGenType_Tell_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqLineReader_starGenType_Tell_paramsKey]*MoqLineReader_starGenType_Tell_results
}

// MoqLineReader_starGenType_Tell_doFn defines the type of function needed when
// calling AndDo for the LineReader_starGenType type
type MoqLineReader_starGenType_Tell_doFn func()

// MoqLineReader_starGenType_Tell_doReturnFn defines the type of function
// needed when calling DoReturnResults for the LineReader_starGenType type
type MoqLineReader_starGenType_Tell_doReturnFn func() dwarf.LineReaderPos

// MoqLineReader_starGenType_Tell_results holds the results of the
// LineReader_starGenType type
type MoqLineReader_starGenType_Tell_results struct {
	Params  MoqLineReader_starGenType_Tell_params
	Results []struct {
		Values *struct {
			Result1 dwarf.LineReaderPos
		}
		Sequence   uint32
		DoFn       MoqLineReader_starGenType_Tell_doFn
		DoReturnFn MoqLineReader_starGenType_Tell_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqLineReader_starGenType_Tell_fnRecorder routes recorded function calls to
// the MoqLineReader_starGenType moq
type MoqLineReader_starGenType_Tell_fnRecorder struct {
	Params    MoqLineReader_starGenType_Tell_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqLineReader_starGenType_Tell_results
	Moq       *MoqLineReader_starGenType
}

// MoqLineReader_starGenType_Tell_anyParams isolates the any params functions
// of the LineReader_starGenType type
type MoqLineReader_starGenType_Tell_anyParams struct {
	Recorder *MoqLineReader_starGenType_Tell_fnRecorder
}

// MoqLineReader_starGenType_Seek_params holds the params of the
// LineReader_starGenType type
type MoqLineReader_starGenType_Seek_params struct{ Pos dwarf.LineReaderPos }

// MoqLineReader_starGenType_Seek_paramsKey holds the map key params of the
// LineReader_starGenType type
type MoqLineReader_starGenType_Seek_paramsKey struct {
	Params struct{ Pos dwarf.LineReaderPos }
	Hashes struct{ Pos hash.Hash }
}

// MoqLineReader_starGenType_Seek_resultsByParams contains the results for a
// given set of parameters for the LineReader_starGenType type
type MoqLineReader_starGenType_Seek_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqLineReader_starGenType_Seek_paramsKey]*MoqLineReader_starGenType_Seek_results
}

// MoqLineReader_starGenType_Seek_doFn defines the type of function needed when
// calling AndDo for the LineReader_starGenType type
type MoqLineReader_starGenType_Seek_doFn func(pos dwarf.LineReaderPos)

// MoqLineReader_starGenType_Seek_doReturnFn defines the type of function
// needed when calling DoReturnResults for the LineReader_starGenType type
type MoqLineReader_starGenType_Seek_doReturnFn func(pos dwarf.LineReaderPos)

// MoqLineReader_starGenType_Seek_results holds the results of the
// LineReader_starGenType type
type MoqLineReader_starGenType_Seek_results struct {
	Params  MoqLineReader_starGenType_Seek_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqLineReader_starGenType_Seek_doFn
		DoReturnFn MoqLineReader_starGenType_Seek_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqLineReader_starGenType_Seek_fnRecorder routes recorded function calls to
// the MoqLineReader_starGenType moq
type MoqLineReader_starGenType_Seek_fnRecorder struct {
	Params    MoqLineReader_starGenType_Seek_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqLineReader_starGenType_Seek_results
	Moq       *MoqLineReader_starGenType
}

// MoqLineReader_starGenType_Seek_anyParams isolates the any params functions
// of the LineReader_starGenType type
type MoqLineReader_starGenType_Seek_anyParams struct {
	Recorder *MoqLineReader_starGenType_Seek_fnRecorder
}

// MoqLineReader_starGenType_Reset_params holds the params of the
// LineReader_starGenType type
type MoqLineReader_starGenType_Reset_params struct{}

// MoqLineReader_starGenType_Reset_paramsKey holds the map key params of the
// LineReader_starGenType type
type MoqLineReader_starGenType_Reset_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqLineReader_starGenType_Reset_resultsByParams contains the results for a
// given set of parameters for the LineReader_starGenType type
type MoqLineReader_starGenType_Reset_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqLineReader_starGenType_Reset_paramsKey]*MoqLineReader_starGenType_Reset_results
}

// MoqLineReader_starGenType_Reset_doFn defines the type of function needed
// when calling AndDo for the LineReader_starGenType type
type MoqLineReader_starGenType_Reset_doFn func()

// MoqLineReader_starGenType_Reset_doReturnFn defines the type of function
// needed when calling DoReturnResults for the LineReader_starGenType type
type MoqLineReader_starGenType_Reset_doReturnFn func()

// MoqLineReader_starGenType_Reset_results holds the results of the
// LineReader_starGenType type
type MoqLineReader_starGenType_Reset_results struct {
	Params  MoqLineReader_starGenType_Reset_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqLineReader_starGenType_Reset_doFn
		DoReturnFn MoqLineReader_starGenType_Reset_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqLineReader_starGenType_Reset_fnRecorder routes recorded function calls to
// the MoqLineReader_starGenType moq
type MoqLineReader_starGenType_Reset_fnRecorder struct {
	Params    MoqLineReader_starGenType_Reset_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqLineReader_starGenType_Reset_results
	Moq       *MoqLineReader_starGenType
}

// MoqLineReader_starGenType_Reset_anyParams isolates the any params functions
// of the LineReader_starGenType type
type MoqLineReader_starGenType_Reset_anyParams struct {
	Recorder *MoqLineReader_starGenType_Reset_fnRecorder
}

// MoqLineReader_starGenType_Files_params holds the params of the
// LineReader_starGenType type
type MoqLineReader_starGenType_Files_params struct{}

// MoqLineReader_starGenType_Files_paramsKey holds the map key params of the
// LineReader_starGenType type
type MoqLineReader_starGenType_Files_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqLineReader_starGenType_Files_resultsByParams contains the results for a
// given set of parameters for the LineReader_starGenType type
type MoqLineReader_starGenType_Files_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqLineReader_starGenType_Files_paramsKey]*MoqLineReader_starGenType_Files_results
}

// MoqLineReader_starGenType_Files_doFn defines the type of function needed
// when calling AndDo for the LineReader_starGenType type
type MoqLineReader_starGenType_Files_doFn func()

// MoqLineReader_starGenType_Files_doReturnFn defines the type of function
// needed when calling DoReturnResults for the LineReader_starGenType type
type MoqLineReader_starGenType_Files_doReturnFn func() []*dwarf.LineFile

// MoqLineReader_starGenType_Files_results holds the results of the
// LineReader_starGenType type
type MoqLineReader_starGenType_Files_results struct {
	Params  MoqLineReader_starGenType_Files_params
	Results []struct {
		Values *struct {
			Result1 []*dwarf.LineFile
		}
		Sequence   uint32
		DoFn       MoqLineReader_starGenType_Files_doFn
		DoReturnFn MoqLineReader_starGenType_Files_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqLineReader_starGenType_Files_fnRecorder routes recorded function calls to
// the MoqLineReader_starGenType moq
type MoqLineReader_starGenType_Files_fnRecorder struct {
	Params    MoqLineReader_starGenType_Files_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqLineReader_starGenType_Files_results
	Moq       *MoqLineReader_starGenType
}

// MoqLineReader_starGenType_Files_anyParams isolates the any params functions
// of the LineReader_starGenType type
type MoqLineReader_starGenType_Files_anyParams struct {
	Recorder *MoqLineReader_starGenType_Files_fnRecorder
}

// MoqLineReader_starGenType_SeekPC_params holds the params of the
// LineReader_starGenType type
type MoqLineReader_starGenType_SeekPC_params struct {
	Pc    uint64
	Entry *dwarf.LineEntry
}

// MoqLineReader_starGenType_SeekPC_paramsKey holds the map key params of the
// LineReader_starGenType type
type MoqLineReader_starGenType_SeekPC_paramsKey struct {
	Params struct {
		Pc    uint64
		Entry *dwarf.LineEntry
	}
	Hashes struct {
		Pc    hash.Hash
		Entry hash.Hash
	}
}

// MoqLineReader_starGenType_SeekPC_resultsByParams contains the results for a
// given set of parameters for the LineReader_starGenType type
type MoqLineReader_starGenType_SeekPC_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqLineReader_starGenType_SeekPC_paramsKey]*MoqLineReader_starGenType_SeekPC_results
}

// MoqLineReader_starGenType_SeekPC_doFn defines the type of function needed
// when calling AndDo for the LineReader_starGenType type
type MoqLineReader_starGenType_SeekPC_doFn func(pc uint64, entry *dwarf.LineEntry)

// MoqLineReader_starGenType_SeekPC_doReturnFn defines the type of function
// needed when calling DoReturnResults for the LineReader_starGenType type
type MoqLineReader_starGenType_SeekPC_doReturnFn func(pc uint64, entry *dwarf.LineEntry) error

// MoqLineReader_starGenType_SeekPC_results holds the results of the
// LineReader_starGenType type
type MoqLineReader_starGenType_SeekPC_results struct {
	Params  MoqLineReader_starGenType_SeekPC_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqLineReader_starGenType_SeekPC_doFn
		DoReturnFn MoqLineReader_starGenType_SeekPC_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqLineReader_starGenType_SeekPC_fnRecorder routes recorded function calls
// to the MoqLineReader_starGenType moq
type MoqLineReader_starGenType_SeekPC_fnRecorder struct {
	Params    MoqLineReader_starGenType_SeekPC_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqLineReader_starGenType_SeekPC_results
	Moq       *MoqLineReader_starGenType
}

// MoqLineReader_starGenType_SeekPC_anyParams isolates the any params functions
// of the LineReader_starGenType type
type MoqLineReader_starGenType_SeekPC_anyParams struct {
	Recorder *MoqLineReader_starGenType_SeekPC_fnRecorder
}

// NewMoqLineReader_starGenType creates a new moq of the LineReader_starGenType
// type
func NewMoqLineReader_starGenType(scene *moq.Scene, config *moq.Config) *MoqLineReader_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqLineReader_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqLineReader_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Next struct {
					Entry moq.ParamIndexing
				}
				Tell struct{}
				Seek struct {
					Pos moq.ParamIndexing
				}
				Reset  struct{}
				Files  struct{}
				SeekPC struct {
					Pc    moq.ParamIndexing
					Entry moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Next struct {
				Entry moq.ParamIndexing
			}
			Tell struct{}
			Seek struct {
				Pos moq.ParamIndexing
			}
			Reset  struct{}
			Files  struct{}
			SeekPC struct {
				Pc    moq.ParamIndexing
				Entry moq.ParamIndexing
			}
		}{
			Next: struct {
				Entry moq.ParamIndexing
			}{
				Entry: moq.ParamIndexByHash,
			},
			Tell: struct{}{},
			Seek: struct {
				Pos moq.ParamIndexing
			}{
				Pos: moq.ParamIndexByHash,
			},
			Reset: struct{}{},
			Files: struct{}{},
			SeekPC: struct {
				Pc    moq.ParamIndexing
				Entry moq.ParamIndexing
			}{
				Pc:    moq.ParamIndexByValue,
				Entry: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the LineReader_starGenType type
func (m *MoqLineReader_starGenType) Mock() *MoqLineReader_starGenType_mock { return m.Moq }

func (m *MoqLineReader_starGenType_mock) Next(entry *dwarf.LineEntry) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqLineReader_starGenType_Next_params{
		Entry: entry,
	}
	var results *MoqLineReader_starGenType_Next_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Next {
		paramsKey := m.Moq.ParamsKey_Next(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Next(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Next(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Next(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(entry)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(entry)
	}
	return
}

func (m *MoqLineReader_starGenType_mock) Tell() (result1 dwarf.LineReaderPos) {
	m.Moq.Scene.T.Helper()
	params := MoqLineReader_starGenType_Tell_params{}
	var results *MoqLineReader_starGenType_Tell_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Tell {
		paramsKey := m.Moq.ParamsKey_Tell(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Tell(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Tell(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Tell(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqLineReader_starGenType_mock) Seek(pos dwarf.LineReaderPos) {
	m.Moq.Scene.T.Helper()
	params := MoqLineReader_starGenType_Seek_params{
		Pos: pos,
	}
	var results *MoqLineReader_starGenType_Seek_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Seek {
		paramsKey := m.Moq.ParamsKey_Seek(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Seek(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Seek(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Seek(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(pos)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(pos)
	}
	return
}

func (m *MoqLineReader_starGenType_mock) Reset() {
	m.Moq.Scene.T.Helper()
	params := MoqLineReader_starGenType_Reset_params{}
	var results *MoqLineReader_starGenType_Reset_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Reset {
		paramsKey := m.Moq.ParamsKey_Reset(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Reset(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Reset(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Reset(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqLineReader_starGenType_mock) Files() (result1 []*dwarf.LineFile) {
	m.Moq.Scene.T.Helper()
	params := MoqLineReader_starGenType_Files_params{}
	var results *MoqLineReader_starGenType_Files_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Files {
		paramsKey := m.Moq.ParamsKey_Files(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Files(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Files(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Files(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqLineReader_starGenType_mock) SeekPC(pc uint64, entry *dwarf.LineEntry) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqLineReader_starGenType_SeekPC_params{
		Pc:    pc,
		Entry: entry,
	}
	var results *MoqLineReader_starGenType_SeekPC_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SeekPC {
		paramsKey := m.Moq.ParamsKey_SeekPC(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SeekPC(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SeekPC(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SeekPC(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(pc, entry)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(pc, entry)
	}
	return
}

// OnCall returns the recorder implementation of the LineReader_starGenType
// type
func (m *MoqLineReader_starGenType) OnCall() *MoqLineReader_starGenType_recorder {
	return &MoqLineReader_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqLineReader_starGenType_recorder) Next(entry *dwarf.LineEntry) *MoqLineReader_starGenType_Next_fnRecorder {
	return &MoqLineReader_starGenType_Next_fnRecorder{
		Params: MoqLineReader_starGenType_Next_params{
			Entry: entry,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqLineReader_starGenType_Next_fnRecorder) Any() *MoqLineReader_starGenType_Next_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	return &MoqLineReader_starGenType_Next_anyParams{Recorder: r}
}

func (a *MoqLineReader_starGenType_Next_anyParams) Entry() *MoqLineReader_starGenType_Next_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqLineReader_starGenType_Next_fnRecorder) Seq() *MoqLineReader_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqLineReader_starGenType_Next_fnRecorder) NoSeq() *MoqLineReader_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqLineReader_starGenType_Next_fnRecorder) ReturnResults(result1 error) *MoqLineReader_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqLineReader_starGenType_Next_doFn
		DoReturnFn MoqLineReader_starGenType_Next_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqLineReader_starGenType_Next_fnRecorder) AndDo(fn MoqLineReader_starGenType_Next_doFn) *MoqLineReader_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqLineReader_starGenType_Next_fnRecorder) DoReturnResults(fn MoqLineReader_starGenType_Next_doReturnFn) *MoqLineReader_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqLineReader_starGenType_Next_doFn
		DoReturnFn MoqLineReader_starGenType_Next_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqLineReader_starGenType_Next_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqLineReader_starGenType_Next_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Next {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqLineReader_starGenType_Next_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqLineReader_starGenType_Next_paramsKey]*MoqLineReader_starGenType_Next_results{},
		}
		r.Moq.ResultsByParams_Next = append(r.Moq.ResultsByParams_Next, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Next) {
			copy(r.Moq.ResultsByParams_Next[insertAt+1:], r.Moq.ResultsByParams_Next[insertAt:0])
			r.Moq.ResultsByParams_Next[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Next(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqLineReader_starGenType_Next_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqLineReader_starGenType_Next_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqLineReader_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqLineReader_starGenType_Next_doFn
				DoReturnFn MoqLineReader_starGenType_Next_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqLineReader_starGenType) PrettyParams_Next(params MoqLineReader_starGenType_Next_params) string {
	return fmt.Sprintf("Next(%#v)", params.Entry)
}

func (m *MoqLineReader_starGenType) ParamsKey_Next(params MoqLineReader_starGenType_Next_params, anyParams uint64) MoqLineReader_starGenType_Next_paramsKey {
	m.Scene.T.Helper()
	var entryUsed *dwarf.LineEntry
	var entryUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Next.Entry == moq.ParamIndexByValue {
			entryUsed = params.Entry
		} else {
			entryUsedHash = hash.DeepHash(params.Entry)
		}
	}
	return MoqLineReader_starGenType_Next_paramsKey{
		Params: struct{ Entry *dwarf.LineEntry }{
			Entry: entryUsed,
		},
		Hashes: struct{ Entry hash.Hash }{
			Entry: entryUsedHash,
		},
	}
}

func (m *MoqLineReader_starGenType_recorder) Tell() *MoqLineReader_starGenType_Tell_fnRecorder {
	return &MoqLineReader_starGenType_Tell_fnRecorder{
		Params:   MoqLineReader_starGenType_Tell_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqLineReader_starGenType_Tell_fnRecorder) Any() *MoqLineReader_starGenType_Tell_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Tell(r.Params))
		return nil
	}
	return &MoqLineReader_starGenType_Tell_anyParams{Recorder: r}
}

func (r *MoqLineReader_starGenType_Tell_fnRecorder) Seq() *MoqLineReader_starGenType_Tell_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Tell(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqLineReader_starGenType_Tell_fnRecorder) NoSeq() *MoqLineReader_starGenType_Tell_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Tell(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqLineReader_starGenType_Tell_fnRecorder) ReturnResults(result1 dwarf.LineReaderPos) *MoqLineReader_starGenType_Tell_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 dwarf.LineReaderPos
		}
		Sequence   uint32
		DoFn       MoqLineReader_starGenType_Tell_doFn
		DoReturnFn MoqLineReader_starGenType_Tell_doReturnFn
	}{
		Values: &struct {
			Result1 dwarf.LineReaderPos
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqLineReader_starGenType_Tell_fnRecorder) AndDo(fn MoqLineReader_starGenType_Tell_doFn) *MoqLineReader_starGenType_Tell_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqLineReader_starGenType_Tell_fnRecorder) DoReturnResults(fn MoqLineReader_starGenType_Tell_doReturnFn) *MoqLineReader_starGenType_Tell_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 dwarf.LineReaderPos
		}
		Sequence   uint32
		DoFn       MoqLineReader_starGenType_Tell_doFn
		DoReturnFn MoqLineReader_starGenType_Tell_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqLineReader_starGenType_Tell_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqLineReader_starGenType_Tell_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Tell {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqLineReader_starGenType_Tell_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqLineReader_starGenType_Tell_paramsKey]*MoqLineReader_starGenType_Tell_results{},
		}
		r.Moq.ResultsByParams_Tell = append(r.Moq.ResultsByParams_Tell, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Tell) {
			copy(r.Moq.ResultsByParams_Tell[insertAt+1:], r.Moq.ResultsByParams_Tell[insertAt:0])
			r.Moq.ResultsByParams_Tell[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Tell(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqLineReader_starGenType_Tell_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqLineReader_starGenType_Tell_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqLineReader_starGenType_Tell_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 dwarf.LineReaderPos
				}
				Sequence   uint32
				DoFn       MoqLineReader_starGenType_Tell_doFn
				DoReturnFn MoqLineReader_starGenType_Tell_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqLineReader_starGenType) PrettyParams_Tell(params MoqLineReader_starGenType_Tell_params) string {
	return fmt.Sprintf("Tell()")
}

func (m *MoqLineReader_starGenType) ParamsKey_Tell(params MoqLineReader_starGenType_Tell_params, anyParams uint64) MoqLineReader_starGenType_Tell_paramsKey {
	m.Scene.T.Helper()
	return MoqLineReader_starGenType_Tell_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqLineReader_starGenType_recorder) Seek(pos dwarf.LineReaderPos) *MoqLineReader_starGenType_Seek_fnRecorder {
	return &MoqLineReader_starGenType_Seek_fnRecorder{
		Params: MoqLineReader_starGenType_Seek_params{
			Pos: pos,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqLineReader_starGenType_Seek_fnRecorder) Any() *MoqLineReader_starGenType_Seek_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seek(r.Params))
		return nil
	}
	return &MoqLineReader_starGenType_Seek_anyParams{Recorder: r}
}

func (a *MoqLineReader_starGenType_Seek_anyParams) Pos() *MoqLineReader_starGenType_Seek_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqLineReader_starGenType_Seek_fnRecorder) Seq() *MoqLineReader_starGenType_Seek_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seek(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqLineReader_starGenType_Seek_fnRecorder) NoSeq() *MoqLineReader_starGenType_Seek_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seek(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqLineReader_starGenType_Seek_fnRecorder) ReturnResults() *MoqLineReader_starGenType_Seek_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqLineReader_starGenType_Seek_doFn
		DoReturnFn MoqLineReader_starGenType_Seek_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqLineReader_starGenType_Seek_fnRecorder) AndDo(fn MoqLineReader_starGenType_Seek_doFn) *MoqLineReader_starGenType_Seek_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqLineReader_starGenType_Seek_fnRecorder) DoReturnResults(fn MoqLineReader_starGenType_Seek_doReturnFn) *MoqLineReader_starGenType_Seek_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqLineReader_starGenType_Seek_doFn
		DoReturnFn MoqLineReader_starGenType_Seek_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqLineReader_starGenType_Seek_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqLineReader_starGenType_Seek_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Seek {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqLineReader_starGenType_Seek_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqLineReader_starGenType_Seek_paramsKey]*MoqLineReader_starGenType_Seek_results{},
		}
		r.Moq.ResultsByParams_Seek = append(r.Moq.ResultsByParams_Seek, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Seek) {
			copy(r.Moq.ResultsByParams_Seek[insertAt+1:], r.Moq.ResultsByParams_Seek[insertAt:0])
			r.Moq.ResultsByParams_Seek[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Seek(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqLineReader_starGenType_Seek_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqLineReader_starGenType_Seek_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqLineReader_starGenType_Seek_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqLineReader_starGenType_Seek_doFn
				DoReturnFn MoqLineReader_starGenType_Seek_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqLineReader_starGenType) PrettyParams_Seek(params MoqLineReader_starGenType_Seek_params) string {
	return fmt.Sprintf("Seek(%#v)", params.Pos)
}

func (m *MoqLineReader_starGenType) ParamsKey_Seek(params MoqLineReader_starGenType_Seek_params, anyParams uint64) MoqLineReader_starGenType_Seek_paramsKey {
	m.Scene.T.Helper()
	var posUsed dwarf.LineReaderPos
	var posUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Seek.Pos == moq.ParamIndexByValue {
			posUsed = params.Pos
		} else {
			posUsedHash = hash.DeepHash(params.Pos)
		}
	}
	return MoqLineReader_starGenType_Seek_paramsKey{
		Params: struct{ Pos dwarf.LineReaderPos }{
			Pos: posUsed,
		},
		Hashes: struct{ Pos hash.Hash }{
			Pos: posUsedHash,
		},
	}
}

func (m *MoqLineReader_starGenType_recorder) Reset() *MoqLineReader_starGenType_Reset_fnRecorder {
	return &MoqLineReader_starGenType_Reset_fnRecorder{
		Params:   MoqLineReader_starGenType_Reset_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqLineReader_starGenType_Reset_fnRecorder) Any() *MoqLineReader_starGenType_Reset_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	return &MoqLineReader_starGenType_Reset_anyParams{Recorder: r}
}

func (r *MoqLineReader_starGenType_Reset_fnRecorder) Seq() *MoqLineReader_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqLineReader_starGenType_Reset_fnRecorder) NoSeq() *MoqLineReader_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqLineReader_starGenType_Reset_fnRecorder) ReturnResults() *MoqLineReader_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqLineReader_starGenType_Reset_doFn
		DoReturnFn MoqLineReader_starGenType_Reset_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqLineReader_starGenType_Reset_fnRecorder) AndDo(fn MoqLineReader_starGenType_Reset_doFn) *MoqLineReader_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqLineReader_starGenType_Reset_fnRecorder) DoReturnResults(fn MoqLineReader_starGenType_Reset_doReturnFn) *MoqLineReader_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqLineReader_starGenType_Reset_doFn
		DoReturnFn MoqLineReader_starGenType_Reset_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqLineReader_starGenType_Reset_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqLineReader_starGenType_Reset_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Reset {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqLineReader_starGenType_Reset_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqLineReader_starGenType_Reset_paramsKey]*MoqLineReader_starGenType_Reset_results{},
		}
		r.Moq.ResultsByParams_Reset = append(r.Moq.ResultsByParams_Reset, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Reset) {
			copy(r.Moq.ResultsByParams_Reset[insertAt+1:], r.Moq.ResultsByParams_Reset[insertAt:0])
			r.Moq.ResultsByParams_Reset[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Reset(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqLineReader_starGenType_Reset_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqLineReader_starGenType_Reset_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqLineReader_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqLineReader_starGenType_Reset_doFn
				DoReturnFn MoqLineReader_starGenType_Reset_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqLineReader_starGenType) PrettyParams_Reset(params MoqLineReader_starGenType_Reset_params) string {
	return fmt.Sprintf("Reset()")
}

func (m *MoqLineReader_starGenType) ParamsKey_Reset(params MoqLineReader_starGenType_Reset_params, anyParams uint64) MoqLineReader_starGenType_Reset_paramsKey {
	m.Scene.T.Helper()
	return MoqLineReader_starGenType_Reset_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqLineReader_starGenType_recorder) Files() *MoqLineReader_starGenType_Files_fnRecorder {
	return &MoqLineReader_starGenType_Files_fnRecorder{
		Params:   MoqLineReader_starGenType_Files_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqLineReader_starGenType_Files_fnRecorder) Any() *MoqLineReader_starGenType_Files_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Files(r.Params))
		return nil
	}
	return &MoqLineReader_starGenType_Files_anyParams{Recorder: r}
}

func (r *MoqLineReader_starGenType_Files_fnRecorder) Seq() *MoqLineReader_starGenType_Files_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Files(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqLineReader_starGenType_Files_fnRecorder) NoSeq() *MoqLineReader_starGenType_Files_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Files(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqLineReader_starGenType_Files_fnRecorder) ReturnResults(result1 []*dwarf.LineFile) *MoqLineReader_starGenType_Files_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []*dwarf.LineFile
		}
		Sequence   uint32
		DoFn       MoqLineReader_starGenType_Files_doFn
		DoReturnFn MoqLineReader_starGenType_Files_doReturnFn
	}{
		Values: &struct {
			Result1 []*dwarf.LineFile
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqLineReader_starGenType_Files_fnRecorder) AndDo(fn MoqLineReader_starGenType_Files_doFn) *MoqLineReader_starGenType_Files_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqLineReader_starGenType_Files_fnRecorder) DoReturnResults(fn MoqLineReader_starGenType_Files_doReturnFn) *MoqLineReader_starGenType_Files_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []*dwarf.LineFile
		}
		Sequence   uint32
		DoFn       MoqLineReader_starGenType_Files_doFn
		DoReturnFn MoqLineReader_starGenType_Files_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqLineReader_starGenType_Files_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqLineReader_starGenType_Files_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Files {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqLineReader_starGenType_Files_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqLineReader_starGenType_Files_paramsKey]*MoqLineReader_starGenType_Files_results{},
		}
		r.Moq.ResultsByParams_Files = append(r.Moq.ResultsByParams_Files, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Files) {
			copy(r.Moq.ResultsByParams_Files[insertAt+1:], r.Moq.ResultsByParams_Files[insertAt:0])
			r.Moq.ResultsByParams_Files[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Files(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqLineReader_starGenType_Files_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqLineReader_starGenType_Files_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqLineReader_starGenType_Files_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []*dwarf.LineFile
				}
				Sequence   uint32
				DoFn       MoqLineReader_starGenType_Files_doFn
				DoReturnFn MoqLineReader_starGenType_Files_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqLineReader_starGenType) PrettyParams_Files(params MoqLineReader_starGenType_Files_params) string {
	return fmt.Sprintf("Files()")
}

func (m *MoqLineReader_starGenType) ParamsKey_Files(params MoqLineReader_starGenType_Files_params, anyParams uint64) MoqLineReader_starGenType_Files_paramsKey {
	m.Scene.T.Helper()
	return MoqLineReader_starGenType_Files_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqLineReader_starGenType_recorder) SeekPC(pc uint64, entry *dwarf.LineEntry) *MoqLineReader_starGenType_SeekPC_fnRecorder {
	return &MoqLineReader_starGenType_SeekPC_fnRecorder{
		Params: MoqLineReader_starGenType_SeekPC_params{
			Pc:    pc,
			Entry: entry,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqLineReader_starGenType_SeekPC_fnRecorder) Any() *MoqLineReader_starGenType_SeekPC_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SeekPC(r.Params))
		return nil
	}
	return &MoqLineReader_starGenType_SeekPC_anyParams{Recorder: r}
}

func (a *MoqLineReader_starGenType_SeekPC_anyParams) Pc() *MoqLineReader_starGenType_SeekPC_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqLineReader_starGenType_SeekPC_anyParams) Entry() *MoqLineReader_starGenType_SeekPC_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqLineReader_starGenType_SeekPC_fnRecorder) Seq() *MoqLineReader_starGenType_SeekPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SeekPC(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqLineReader_starGenType_SeekPC_fnRecorder) NoSeq() *MoqLineReader_starGenType_SeekPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SeekPC(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqLineReader_starGenType_SeekPC_fnRecorder) ReturnResults(result1 error) *MoqLineReader_starGenType_SeekPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqLineReader_starGenType_SeekPC_doFn
		DoReturnFn MoqLineReader_starGenType_SeekPC_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqLineReader_starGenType_SeekPC_fnRecorder) AndDo(fn MoqLineReader_starGenType_SeekPC_doFn) *MoqLineReader_starGenType_SeekPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqLineReader_starGenType_SeekPC_fnRecorder) DoReturnResults(fn MoqLineReader_starGenType_SeekPC_doReturnFn) *MoqLineReader_starGenType_SeekPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqLineReader_starGenType_SeekPC_doFn
		DoReturnFn MoqLineReader_starGenType_SeekPC_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqLineReader_starGenType_SeekPC_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqLineReader_starGenType_SeekPC_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SeekPC {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqLineReader_starGenType_SeekPC_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqLineReader_starGenType_SeekPC_paramsKey]*MoqLineReader_starGenType_SeekPC_results{},
		}
		r.Moq.ResultsByParams_SeekPC = append(r.Moq.ResultsByParams_SeekPC, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SeekPC) {
			copy(r.Moq.ResultsByParams_SeekPC[insertAt+1:], r.Moq.ResultsByParams_SeekPC[insertAt:0])
			r.Moq.ResultsByParams_SeekPC[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SeekPC(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqLineReader_starGenType_SeekPC_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqLineReader_starGenType_SeekPC_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqLineReader_starGenType_SeekPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqLineReader_starGenType_SeekPC_doFn
				DoReturnFn MoqLineReader_starGenType_SeekPC_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqLineReader_starGenType) PrettyParams_SeekPC(params MoqLineReader_starGenType_SeekPC_params) string {
	return fmt.Sprintf("SeekPC(%#v, %#v)", params.Pc, params.Entry)
}

func (m *MoqLineReader_starGenType) ParamsKey_SeekPC(params MoqLineReader_starGenType_SeekPC_params, anyParams uint64) MoqLineReader_starGenType_SeekPC_paramsKey {
	m.Scene.T.Helper()
	var pcUsed uint64
	var pcUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SeekPC.Pc == moq.ParamIndexByValue {
			pcUsed = params.Pc
		} else {
			pcUsedHash = hash.DeepHash(params.Pc)
		}
	}
	var entryUsed *dwarf.LineEntry
	var entryUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.SeekPC.Entry == moq.ParamIndexByValue {
			entryUsed = params.Entry
		} else {
			entryUsedHash = hash.DeepHash(params.Entry)
		}
	}
	return MoqLineReader_starGenType_SeekPC_paramsKey{
		Params: struct {
			Pc    uint64
			Entry *dwarf.LineEntry
		}{
			Pc:    pcUsed,
			Entry: entryUsed,
		},
		Hashes: struct {
			Pc    hash.Hash
			Entry hash.Hash
		}{
			Pc:    pcUsedHash,
			Entry: entryUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqLineReader_starGenType) Reset() {
	m.ResultsByParams_Next = nil
	m.ResultsByParams_Tell = nil
	m.ResultsByParams_Seek = nil
	m.ResultsByParams_Reset = nil
	m.ResultsByParams_Files = nil
	m.ResultsByParams_SeekPC = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqLineReader_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Next {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Next(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Tell {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Tell(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Seek {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Seek(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Reset {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Reset(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Files {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Files(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SeekPC {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SeekPC(results.Params))
			}
		}
	}
}
