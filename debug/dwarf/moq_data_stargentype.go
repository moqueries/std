// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package dwarf

import (
	"debug/dwarf"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that dwarf.Data_starGenType is mocked
// completely
var _ Data_starGenType = (*MoqData_starGenType_mock)(nil)

// Data_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Data_starGenType interface {
	Reader() *dwarf.Reader
	Ranges(e *dwarf.Entry) ([][2]uint64, error)
	LineReader(cu *dwarf.Entry) (*dwarf.LineReader, error)
	AddTypes(name string, types []byte) error
	AddSection(name string, contents []byte) error
	Type(off dwarf.Offset) (dwarf.Type, error)
}

// MoqData_starGenType holds the state of a moq of the Data_starGenType type
type MoqData_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqData_starGenType_mock

	ResultsByParams_Reader     []MoqData_starGenType_Reader_resultsByParams
	ResultsByParams_Ranges     []MoqData_starGenType_Ranges_resultsByParams
	ResultsByParams_LineReader []MoqData_starGenType_LineReader_resultsByParams
	ResultsByParams_AddTypes   []MoqData_starGenType_AddTypes_resultsByParams
	ResultsByParams_AddSection []MoqData_starGenType_AddSection_resultsByParams
	ResultsByParams_Type       []MoqData_starGenType_Type_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Reader struct{}
			Ranges struct {
				E moq.ParamIndexing
			}
			LineReader struct {
				Cu moq.ParamIndexing
			}
			AddTypes struct {
				Name  moq.ParamIndexing
				Types moq.ParamIndexing
			}
			AddSection struct {
				Name     moq.ParamIndexing
				Contents moq.ParamIndexing
			}
			Type struct {
				Off moq.ParamIndexing
			}
		}
	}
	// MoqData_starGenType_mock isolates the mock interface of the Data_starGenType
}

// type
type MoqData_starGenType_mock struct {
	Moq *MoqData_starGenType
}

// MoqData_starGenType_recorder isolates the recorder interface of the
// Data_starGenType type
type MoqData_starGenType_recorder struct {
	Moq *MoqData_starGenType
}

// MoqData_starGenType_Reader_params holds the params of the Data_starGenType
// type
type MoqData_starGenType_Reader_params struct{}

// MoqData_starGenType_Reader_paramsKey holds the map key params of the
// Data_starGenType type
type MoqData_starGenType_Reader_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqData_starGenType_Reader_resultsByParams contains the results for a given
// set of parameters for the Data_starGenType type
type MoqData_starGenType_Reader_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqData_starGenType_Reader_paramsKey]*MoqData_starGenType_Reader_results
}

// MoqData_starGenType_Reader_doFn defines the type of function needed when
// calling AndDo for the Data_starGenType type
type MoqData_starGenType_Reader_doFn func()

// MoqData_starGenType_Reader_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Data_starGenType type
type MoqData_starGenType_Reader_doReturnFn func() *dwarf.Reader

// MoqData_starGenType_Reader_results holds the results of the Data_starGenType
// type
type MoqData_starGenType_Reader_results struct {
	Params  MoqData_starGenType_Reader_params
	Results []struct {
		Values *struct {
			Result1 *dwarf.Reader
		}
		Sequence   uint32
		DoFn       MoqData_starGenType_Reader_doFn
		DoReturnFn MoqData_starGenType_Reader_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqData_starGenType_Reader_fnRecorder routes recorded function calls to the
// MoqData_starGenType moq
type MoqData_starGenType_Reader_fnRecorder struct {
	Params    MoqData_starGenType_Reader_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqData_starGenType_Reader_results
	Moq       *MoqData_starGenType
}

// MoqData_starGenType_Reader_anyParams isolates the any params functions of
// the Data_starGenType type
type MoqData_starGenType_Reader_anyParams struct {
	Recorder *MoqData_starGenType_Reader_fnRecorder
}

// MoqData_starGenType_Ranges_params holds the params of the Data_starGenType
// type
type MoqData_starGenType_Ranges_params struct{ E *dwarf.Entry }

// MoqData_starGenType_Ranges_paramsKey holds the map key params of the
// Data_starGenType type
type MoqData_starGenType_Ranges_paramsKey struct {
	Params struct{ E *dwarf.Entry }
	Hashes struct{ E hash.Hash }
}

// MoqData_starGenType_Ranges_resultsByParams contains the results for a given
// set of parameters for the Data_starGenType type
type MoqData_starGenType_Ranges_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqData_starGenType_Ranges_paramsKey]*MoqData_starGenType_Ranges_results
}

// MoqData_starGenType_Ranges_doFn defines the type of function needed when
// calling AndDo for the Data_starGenType type
type MoqData_starGenType_Ranges_doFn func(e *dwarf.Entry)

// MoqData_starGenType_Ranges_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Data_starGenType type
type MoqData_starGenType_Ranges_doReturnFn func(e *dwarf.Entry) ([][2]uint64, error)

// MoqData_starGenType_Ranges_results holds the results of the Data_starGenType
// type
type MoqData_starGenType_Ranges_results struct {
	Params  MoqData_starGenType_Ranges_params
	Results []struct {
		Values *struct {
			Result1 [][2]uint64
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqData_starGenType_Ranges_doFn
		DoReturnFn MoqData_starGenType_Ranges_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqData_starGenType_Ranges_fnRecorder routes recorded function calls to the
// MoqData_starGenType moq
type MoqData_starGenType_Ranges_fnRecorder struct {
	Params    MoqData_starGenType_Ranges_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqData_starGenType_Ranges_results
	Moq       *MoqData_starGenType
}

// MoqData_starGenType_Ranges_anyParams isolates the any params functions of
// the Data_starGenType type
type MoqData_starGenType_Ranges_anyParams struct {
	Recorder *MoqData_starGenType_Ranges_fnRecorder
}

// MoqData_starGenType_LineReader_params holds the params of the
// Data_starGenType type
type MoqData_starGenType_LineReader_params struct{ Cu *dwarf.Entry }

// MoqData_starGenType_LineReader_paramsKey holds the map key params of the
// Data_starGenType type
type MoqData_starGenType_LineReader_paramsKey struct {
	Params struct{ Cu *dwarf.Entry }
	Hashes struct{ Cu hash.Hash }
}

// MoqData_starGenType_LineReader_resultsByParams contains the results for a
// given set of parameters for the Data_starGenType type
type MoqData_starGenType_LineReader_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqData_starGenType_LineReader_paramsKey]*MoqData_starGenType_LineReader_results
}

// MoqData_starGenType_LineReader_doFn defines the type of function needed when
// calling AndDo for the Data_starGenType type
type MoqData_starGenType_LineReader_doFn func(cu *dwarf.Entry)

// MoqData_starGenType_LineReader_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Data_starGenType type
type MoqData_starGenType_LineReader_doReturnFn func(cu *dwarf.Entry) (*dwarf.LineReader, error)

// MoqData_starGenType_LineReader_results holds the results of the
// Data_starGenType type
type MoqData_starGenType_LineReader_results struct {
	Params  MoqData_starGenType_LineReader_params
	Results []struct {
		Values *struct {
			Result1 *dwarf.LineReader
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqData_starGenType_LineReader_doFn
		DoReturnFn MoqData_starGenType_LineReader_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqData_starGenType_LineReader_fnRecorder routes recorded function calls to
// the MoqData_starGenType moq
type MoqData_starGenType_LineReader_fnRecorder struct {
	Params    MoqData_starGenType_LineReader_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqData_starGenType_LineReader_results
	Moq       *MoqData_starGenType
}

// MoqData_starGenType_LineReader_anyParams isolates the any params functions
// of the Data_starGenType type
type MoqData_starGenType_LineReader_anyParams struct {
	Recorder *MoqData_starGenType_LineReader_fnRecorder
}

// MoqData_starGenType_AddTypes_params holds the params of the Data_starGenType
// type
type MoqData_starGenType_AddTypes_params struct {
	Name  string
	Types []byte
}

// MoqData_starGenType_AddTypes_paramsKey holds the map key params of the
// Data_starGenType type
type MoqData_starGenType_AddTypes_paramsKey struct {
	Params struct{ Name string }
	Hashes struct {
		Name  hash.Hash
		Types hash.Hash
	}
}

// MoqData_starGenType_AddTypes_resultsByParams contains the results for a
// given set of parameters for the Data_starGenType type
type MoqData_starGenType_AddTypes_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqData_starGenType_AddTypes_paramsKey]*MoqData_starGenType_AddTypes_results
}

// MoqData_starGenType_AddTypes_doFn defines the type of function needed when
// calling AndDo for the Data_starGenType type
type MoqData_starGenType_AddTypes_doFn func(name string, types []byte)

// MoqData_starGenType_AddTypes_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Data_starGenType type
type MoqData_starGenType_AddTypes_doReturnFn func(name string, types []byte) error

// MoqData_starGenType_AddTypes_results holds the results of the
// Data_starGenType type
type MoqData_starGenType_AddTypes_results struct {
	Params  MoqData_starGenType_AddTypes_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqData_starGenType_AddTypes_doFn
		DoReturnFn MoqData_starGenType_AddTypes_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqData_starGenType_AddTypes_fnRecorder routes recorded function calls to
// the MoqData_starGenType moq
type MoqData_starGenType_AddTypes_fnRecorder struct {
	Params    MoqData_starGenType_AddTypes_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqData_starGenType_AddTypes_results
	Moq       *MoqData_starGenType
}

// MoqData_starGenType_AddTypes_anyParams isolates the any params functions of
// the Data_starGenType type
type MoqData_starGenType_AddTypes_anyParams struct {
	Recorder *MoqData_starGenType_AddTypes_fnRecorder
}

// MoqData_starGenType_AddSection_params holds the params of the
// Data_starGenType type
type MoqData_starGenType_AddSection_params struct {
	Name     string
	Contents []byte
}

// MoqData_starGenType_AddSection_paramsKey holds the map key params of the
// Data_starGenType type
type MoqData_starGenType_AddSection_paramsKey struct {
	Params struct{ Name string }
	Hashes struct {
		Name     hash.Hash
		Contents hash.Hash
	}
}

// MoqData_starGenType_AddSection_resultsByParams contains the results for a
// given set of parameters for the Data_starGenType type
type MoqData_starGenType_AddSection_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqData_starGenType_AddSection_paramsKey]*MoqData_starGenType_AddSection_results
}

// MoqData_starGenType_AddSection_doFn defines the type of function needed when
// calling AndDo for the Data_starGenType type
type MoqData_starGenType_AddSection_doFn func(name string, contents []byte)

// MoqData_starGenType_AddSection_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Data_starGenType type
type MoqData_starGenType_AddSection_doReturnFn func(name string, contents []byte) error

// MoqData_starGenType_AddSection_results holds the results of the
// Data_starGenType type
type MoqData_starGenType_AddSection_results struct {
	Params  MoqData_starGenType_AddSection_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqData_starGenType_AddSection_doFn
		DoReturnFn MoqData_starGenType_AddSection_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqData_starGenType_AddSection_fnRecorder routes recorded function calls to
// the MoqData_starGenType moq
type MoqData_starGenType_AddSection_fnRecorder struct {
	Params    MoqData_starGenType_AddSection_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqData_starGenType_AddSection_results
	Moq       *MoqData_starGenType
}

// MoqData_starGenType_AddSection_anyParams isolates the any params functions
// of the Data_starGenType type
type MoqData_starGenType_AddSection_anyParams struct {
	Recorder *MoqData_starGenType_AddSection_fnRecorder
}

// MoqData_starGenType_Type_params holds the params of the Data_starGenType
// type
type MoqData_starGenType_Type_params struct{ Off dwarf.Offset }

// MoqData_starGenType_Type_paramsKey holds the map key params of the
// Data_starGenType type
type MoqData_starGenType_Type_paramsKey struct {
	Params struct{ Off dwarf.Offset }
	Hashes struct{ Off hash.Hash }
}

// MoqData_starGenType_Type_resultsByParams contains the results for a given
// set of parameters for the Data_starGenType type
type MoqData_starGenType_Type_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqData_starGenType_Type_paramsKey]*MoqData_starGenType_Type_results
}

// MoqData_starGenType_Type_doFn defines the type of function needed when
// calling AndDo for the Data_starGenType type
type MoqData_starGenType_Type_doFn func(off dwarf.Offset)

// MoqData_starGenType_Type_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Data_starGenType type
type MoqData_starGenType_Type_doReturnFn func(off dwarf.Offset) (dwarf.Type, error)

// MoqData_starGenType_Type_results holds the results of the Data_starGenType
// type
type MoqData_starGenType_Type_results struct {
	Params  MoqData_starGenType_Type_params
	Results []struct {
		Values *struct {
			Result1 dwarf.Type
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqData_starGenType_Type_doFn
		DoReturnFn MoqData_starGenType_Type_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqData_starGenType_Type_fnRecorder routes recorded function calls to the
// MoqData_starGenType moq
type MoqData_starGenType_Type_fnRecorder struct {
	Params    MoqData_starGenType_Type_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqData_starGenType_Type_results
	Moq       *MoqData_starGenType
}

// MoqData_starGenType_Type_anyParams isolates the any params functions of the
// Data_starGenType type
type MoqData_starGenType_Type_anyParams struct {
	Recorder *MoqData_starGenType_Type_fnRecorder
}

// NewMoqData_starGenType creates a new moq of the Data_starGenType type
func NewMoqData_starGenType(scene *moq.Scene, config *moq.Config) *MoqData_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqData_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqData_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Reader struct{}
				Ranges struct {
					E moq.ParamIndexing
				}
				LineReader struct {
					Cu moq.ParamIndexing
				}
				AddTypes struct {
					Name  moq.ParamIndexing
					Types moq.ParamIndexing
				}
				AddSection struct {
					Name     moq.ParamIndexing
					Contents moq.ParamIndexing
				}
				Type struct {
					Off moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Reader struct{}
			Ranges struct {
				E moq.ParamIndexing
			}
			LineReader struct {
				Cu moq.ParamIndexing
			}
			AddTypes struct {
				Name  moq.ParamIndexing
				Types moq.ParamIndexing
			}
			AddSection struct {
				Name     moq.ParamIndexing
				Contents moq.ParamIndexing
			}
			Type struct {
				Off moq.ParamIndexing
			}
		}{
			Reader: struct{}{},
			Ranges: struct {
				E moq.ParamIndexing
			}{
				E: moq.ParamIndexByHash,
			},
			LineReader: struct {
				Cu moq.ParamIndexing
			}{
				Cu: moq.ParamIndexByHash,
			},
			AddTypes: struct {
				Name  moq.ParamIndexing
				Types moq.ParamIndexing
			}{
				Name:  moq.ParamIndexByValue,
				Types: moq.ParamIndexByHash,
			},
			AddSection: struct {
				Name     moq.ParamIndexing
				Contents moq.ParamIndexing
			}{
				Name:     moq.ParamIndexByValue,
				Contents: moq.ParamIndexByHash,
			},
			Type: struct {
				Off moq.ParamIndexing
			}{
				Off: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Data_starGenType type
func (m *MoqData_starGenType) Mock() *MoqData_starGenType_mock { return m.Moq }

func (m *MoqData_starGenType_mock) Reader() (result1 *dwarf.Reader) {
	m.Moq.Scene.T.Helper()
	params := MoqData_starGenType_Reader_params{}
	var results *MoqData_starGenType_Reader_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Reader {
		paramsKey := m.Moq.ParamsKey_Reader(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Reader(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Reader(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Reader(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqData_starGenType_mock) Ranges(e *dwarf.Entry) (result1 [][2]uint64, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqData_starGenType_Ranges_params{
		E: e,
	}
	var results *MoqData_starGenType_Ranges_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Ranges {
		paramsKey := m.Moq.ParamsKey_Ranges(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Ranges(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Ranges(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Ranges(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(e)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(e)
	}
	return
}

func (m *MoqData_starGenType_mock) LineReader(cu *dwarf.Entry) (result1 *dwarf.LineReader, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqData_starGenType_LineReader_params{
		Cu: cu,
	}
	var results *MoqData_starGenType_LineReader_results
	for _, resultsByParams := range m.Moq.ResultsByParams_LineReader {
		paramsKey := m.Moq.ParamsKey_LineReader(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_LineReader(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_LineReader(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_LineReader(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(cu)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(cu)
	}
	return
}

func (m *MoqData_starGenType_mock) AddTypes(name string, types []byte) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqData_starGenType_AddTypes_params{
		Name:  name,
		Types: types,
	}
	var results *MoqData_starGenType_AddTypes_results
	for _, resultsByParams := range m.Moq.ResultsByParams_AddTypes {
		paramsKey := m.Moq.ParamsKey_AddTypes(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_AddTypes(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_AddTypes(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_AddTypes(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name, types)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(name, types)
	}
	return
}

func (m *MoqData_starGenType_mock) AddSection(name string, contents []byte) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqData_starGenType_AddSection_params{
		Name:     name,
		Contents: contents,
	}
	var results *MoqData_starGenType_AddSection_results
	for _, resultsByParams := range m.Moq.ResultsByParams_AddSection {
		paramsKey := m.Moq.ParamsKey_AddSection(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_AddSection(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_AddSection(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_AddSection(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name, contents)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(name, contents)
	}
	return
}

func (m *MoqData_starGenType_mock) Type(off dwarf.Offset) (result1 dwarf.Type, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqData_starGenType_Type_params{
		Off: off,
	}
	var results *MoqData_starGenType_Type_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Type {
		paramsKey := m.Moq.ParamsKey_Type(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Type(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Type(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Type(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(off)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(off)
	}
	return
}

// OnCall returns the recorder implementation of the Data_starGenType type
func (m *MoqData_starGenType) OnCall() *MoqData_starGenType_recorder {
	return &MoqData_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqData_starGenType_recorder) Reader() *MoqData_starGenType_Reader_fnRecorder {
	return &MoqData_starGenType_Reader_fnRecorder{
		Params:   MoqData_starGenType_Reader_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqData_starGenType_Reader_fnRecorder) Any() *MoqData_starGenType_Reader_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reader(r.Params))
		return nil
	}
	return &MoqData_starGenType_Reader_anyParams{Recorder: r}
}

func (r *MoqData_starGenType_Reader_fnRecorder) Seq() *MoqData_starGenType_Reader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reader(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqData_starGenType_Reader_fnRecorder) NoSeq() *MoqData_starGenType_Reader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reader(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqData_starGenType_Reader_fnRecorder) ReturnResults(result1 *dwarf.Reader) *MoqData_starGenType_Reader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *dwarf.Reader
		}
		Sequence   uint32
		DoFn       MoqData_starGenType_Reader_doFn
		DoReturnFn MoqData_starGenType_Reader_doReturnFn
	}{
		Values: &struct {
			Result1 *dwarf.Reader
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqData_starGenType_Reader_fnRecorder) AndDo(fn MoqData_starGenType_Reader_doFn) *MoqData_starGenType_Reader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqData_starGenType_Reader_fnRecorder) DoReturnResults(fn MoqData_starGenType_Reader_doReturnFn) *MoqData_starGenType_Reader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *dwarf.Reader
		}
		Sequence   uint32
		DoFn       MoqData_starGenType_Reader_doFn
		DoReturnFn MoqData_starGenType_Reader_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqData_starGenType_Reader_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqData_starGenType_Reader_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Reader {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqData_starGenType_Reader_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqData_starGenType_Reader_paramsKey]*MoqData_starGenType_Reader_results{},
		}
		r.Moq.ResultsByParams_Reader = append(r.Moq.ResultsByParams_Reader, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Reader) {
			copy(r.Moq.ResultsByParams_Reader[insertAt+1:], r.Moq.ResultsByParams_Reader[insertAt:0])
			r.Moq.ResultsByParams_Reader[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Reader(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqData_starGenType_Reader_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqData_starGenType_Reader_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqData_starGenType_Reader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *dwarf.Reader
				}
				Sequence   uint32
				DoFn       MoqData_starGenType_Reader_doFn
				DoReturnFn MoqData_starGenType_Reader_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqData_starGenType) PrettyParams_Reader(params MoqData_starGenType_Reader_params) string {
	return fmt.Sprintf("Reader()")
}

func (m *MoqData_starGenType) ParamsKey_Reader(params MoqData_starGenType_Reader_params, anyParams uint64) MoqData_starGenType_Reader_paramsKey {
	m.Scene.T.Helper()
	return MoqData_starGenType_Reader_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqData_starGenType_recorder) Ranges(e *dwarf.Entry) *MoqData_starGenType_Ranges_fnRecorder {
	return &MoqData_starGenType_Ranges_fnRecorder{
		Params: MoqData_starGenType_Ranges_params{
			E: e,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqData_starGenType_Ranges_fnRecorder) Any() *MoqData_starGenType_Ranges_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Ranges(r.Params))
		return nil
	}
	return &MoqData_starGenType_Ranges_anyParams{Recorder: r}
}

func (a *MoqData_starGenType_Ranges_anyParams) E() *MoqData_starGenType_Ranges_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqData_starGenType_Ranges_fnRecorder) Seq() *MoqData_starGenType_Ranges_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Ranges(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqData_starGenType_Ranges_fnRecorder) NoSeq() *MoqData_starGenType_Ranges_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Ranges(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqData_starGenType_Ranges_fnRecorder) ReturnResults(result1 [][2]uint64, result2 error) *MoqData_starGenType_Ranges_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 [][2]uint64
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqData_starGenType_Ranges_doFn
		DoReturnFn MoqData_starGenType_Ranges_doReturnFn
	}{
		Values: &struct {
			Result1 [][2]uint64
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqData_starGenType_Ranges_fnRecorder) AndDo(fn MoqData_starGenType_Ranges_doFn) *MoqData_starGenType_Ranges_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqData_starGenType_Ranges_fnRecorder) DoReturnResults(fn MoqData_starGenType_Ranges_doReturnFn) *MoqData_starGenType_Ranges_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 [][2]uint64
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqData_starGenType_Ranges_doFn
		DoReturnFn MoqData_starGenType_Ranges_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqData_starGenType_Ranges_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqData_starGenType_Ranges_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Ranges {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqData_starGenType_Ranges_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqData_starGenType_Ranges_paramsKey]*MoqData_starGenType_Ranges_results{},
		}
		r.Moq.ResultsByParams_Ranges = append(r.Moq.ResultsByParams_Ranges, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Ranges) {
			copy(r.Moq.ResultsByParams_Ranges[insertAt+1:], r.Moq.ResultsByParams_Ranges[insertAt:0])
			r.Moq.ResultsByParams_Ranges[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Ranges(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqData_starGenType_Ranges_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqData_starGenType_Ranges_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqData_starGenType_Ranges_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 [][2]uint64
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqData_starGenType_Ranges_doFn
				DoReturnFn MoqData_starGenType_Ranges_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqData_starGenType) PrettyParams_Ranges(params MoqData_starGenType_Ranges_params) string {
	return fmt.Sprintf("Ranges(%#v)", params.E)
}

func (m *MoqData_starGenType) ParamsKey_Ranges(params MoqData_starGenType_Ranges_params, anyParams uint64) MoqData_starGenType_Ranges_paramsKey {
	m.Scene.T.Helper()
	var eUsed *dwarf.Entry
	var eUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Ranges.E == moq.ParamIndexByValue {
			eUsed = params.E
		} else {
			eUsedHash = hash.DeepHash(params.E)
		}
	}
	return MoqData_starGenType_Ranges_paramsKey{
		Params: struct{ E *dwarf.Entry }{
			E: eUsed,
		},
		Hashes: struct{ E hash.Hash }{
			E: eUsedHash,
		},
	}
}

func (m *MoqData_starGenType_recorder) LineReader(cu *dwarf.Entry) *MoqData_starGenType_LineReader_fnRecorder {
	return &MoqData_starGenType_LineReader_fnRecorder{
		Params: MoqData_starGenType_LineReader_params{
			Cu: cu,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqData_starGenType_LineReader_fnRecorder) Any() *MoqData_starGenType_LineReader_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LineReader(r.Params))
		return nil
	}
	return &MoqData_starGenType_LineReader_anyParams{Recorder: r}
}

func (a *MoqData_starGenType_LineReader_anyParams) Cu() *MoqData_starGenType_LineReader_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqData_starGenType_LineReader_fnRecorder) Seq() *MoqData_starGenType_LineReader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LineReader(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqData_starGenType_LineReader_fnRecorder) NoSeq() *MoqData_starGenType_LineReader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LineReader(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqData_starGenType_LineReader_fnRecorder) ReturnResults(result1 *dwarf.LineReader, result2 error) *MoqData_starGenType_LineReader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *dwarf.LineReader
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqData_starGenType_LineReader_doFn
		DoReturnFn MoqData_starGenType_LineReader_doReturnFn
	}{
		Values: &struct {
			Result1 *dwarf.LineReader
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqData_starGenType_LineReader_fnRecorder) AndDo(fn MoqData_starGenType_LineReader_doFn) *MoqData_starGenType_LineReader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqData_starGenType_LineReader_fnRecorder) DoReturnResults(fn MoqData_starGenType_LineReader_doReturnFn) *MoqData_starGenType_LineReader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *dwarf.LineReader
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqData_starGenType_LineReader_doFn
		DoReturnFn MoqData_starGenType_LineReader_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqData_starGenType_LineReader_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqData_starGenType_LineReader_resultsByParams
	for n, res := range r.Moq.ResultsByParams_LineReader {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqData_starGenType_LineReader_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqData_starGenType_LineReader_paramsKey]*MoqData_starGenType_LineReader_results{},
		}
		r.Moq.ResultsByParams_LineReader = append(r.Moq.ResultsByParams_LineReader, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_LineReader) {
			copy(r.Moq.ResultsByParams_LineReader[insertAt+1:], r.Moq.ResultsByParams_LineReader[insertAt:0])
			r.Moq.ResultsByParams_LineReader[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_LineReader(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqData_starGenType_LineReader_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqData_starGenType_LineReader_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqData_starGenType_LineReader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *dwarf.LineReader
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqData_starGenType_LineReader_doFn
				DoReturnFn MoqData_starGenType_LineReader_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqData_starGenType) PrettyParams_LineReader(params MoqData_starGenType_LineReader_params) string {
	return fmt.Sprintf("LineReader(%#v)", params.Cu)
}

func (m *MoqData_starGenType) ParamsKey_LineReader(params MoqData_starGenType_LineReader_params, anyParams uint64) MoqData_starGenType_LineReader_paramsKey {
	m.Scene.T.Helper()
	var cuUsed *dwarf.Entry
	var cuUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.LineReader.Cu == moq.ParamIndexByValue {
			cuUsed = params.Cu
		} else {
			cuUsedHash = hash.DeepHash(params.Cu)
		}
	}
	return MoqData_starGenType_LineReader_paramsKey{
		Params: struct{ Cu *dwarf.Entry }{
			Cu: cuUsed,
		},
		Hashes: struct{ Cu hash.Hash }{
			Cu: cuUsedHash,
		},
	}
}

func (m *MoqData_starGenType_recorder) AddTypes(name string, types []byte) *MoqData_starGenType_AddTypes_fnRecorder {
	return &MoqData_starGenType_AddTypes_fnRecorder{
		Params: MoqData_starGenType_AddTypes_params{
			Name:  name,
			Types: types,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqData_starGenType_AddTypes_fnRecorder) Any() *MoqData_starGenType_AddTypes_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AddTypes(r.Params))
		return nil
	}
	return &MoqData_starGenType_AddTypes_anyParams{Recorder: r}
}

func (a *MoqData_starGenType_AddTypes_anyParams) Name() *MoqData_starGenType_AddTypes_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqData_starGenType_AddTypes_anyParams) Types() *MoqData_starGenType_AddTypes_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqData_starGenType_AddTypes_fnRecorder) Seq() *MoqData_starGenType_AddTypes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AddTypes(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqData_starGenType_AddTypes_fnRecorder) NoSeq() *MoqData_starGenType_AddTypes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AddTypes(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqData_starGenType_AddTypes_fnRecorder) ReturnResults(result1 error) *MoqData_starGenType_AddTypes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqData_starGenType_AddTypes_doFn
		DoReturnFn MoqData_starGenType_AddTypes_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqData_starGenType_AddTypes_fnRecorder) AndDo(fn MoqData_starGenType_AddTypes_doFn) *MoqData_starGenType_AddTypes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqData_starGenType_AddTypes_fnRecorder) DoReturnResults(fn MoqData_starGenType_AddTypes_doReturnFn) *MoqData_starGenType_AddTypes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqData_starGenType_AddTypes_doFn
		DoReturnFn MoqData_starGenType_AddTypes_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqData_starGenType_AddTypes_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqData_starGenType_AddTypes_resultsByParams
	for n, res := range r.Moq.ResultsByParams_AddTypes {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqData_starGenType_AddTypes_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqData_starGenType_AddTypes_paramsKey]*MoqData_starGenType_AddTypes_results{},
		}
		r.Moq.ResultsByParams_AddTypes = append(r.Moq.ResultsByParams_AddTypes, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_AddTypes) {
			copy(r.Moq.ResultsByParams_AddTypes[insertAt+1:], r.Moq.ResultsByParams_AddTypes[insertAt:0])
			r.Moq.ResultsByParams_AddTypes[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_AddTypes(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqData_starGenType_AddTypes_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqData_starGenType_AddTypes_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqData_starGenType_AddTypes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqData_starGenType_AddTypes_doFn
				DoReturnFn MoqData_starGenType_AddTypes_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqData_starGenType) PrettyParams_AddTypes(params MoqData_starGenType_AddTypes_params) string {
	return fmt.Sprintf("AddTypes(%#v, %#v)", params.Name, params.Types)
}

func (m *MoqData_starGenType) ParamsKey_AddTypes(params MoqData_starGenType_AddTypes_params, anyParams uint64) MoqData_starGenType_AddTypes_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.AddTypes.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var typesUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.AddTypes.Types == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The types parameter of the AddTypes function can't be indexed by value")
		}
		typesUsedHash = hash.DeepHash(params.Types)
	}
	return MoqData_starGenType_AddTypes_paramsKey{
		Params: struct{ Name string }{
			Name: nameUsed,
		},
		Hashes: struct {
			Name  hash.Hash
			Types hash.Hash
		}{
			Name:  nameUsedHash,
			Types: typesUsedHash,
		},
	}
}

func (m *MoqData_starGenType_recorder) AddSection(name string, contents []byte) *MoqData_starGenType_AddSection_fnRecorder {
	return &MoqData_starGenType_AddSection_fnRecorder{
		Params: MoqData_starGenType_AddSection_params{
			Name:     name,
			Contents: contents,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqData_starGenType_AddSection_fnRecorder) Any() *MoqData_starGenType_AddSection_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AddSection(r.Params))
		return nil
	}
	return &MoqData_starGenType_AddSection_anyParams{Recorder: r}
}

func (a *MoqData_starGenType_AddSection_anyParams) Name() *MoqData_starGenType_AddSection_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqData_starGenType_AddSection_anyParams) Contents() *MoqData_starGenType_AddSection_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqData_starGenType_AddSection_fnRecorder) Seq() *MoqData_starGenType_AddSection_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AddSection(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqData_starGenType_AddSection_fnRecorder) NoSeq() *MoqData_starGenType_AddSection_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AddSection(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqData_starGenType_AddSection_fnRecorder) ReturnResults(result1 error) *MoqData_starGenType_AddSection_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqData_starGenType_AddSection_doFn
		DoReturnFn MoqData_starGenType_AddSection_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqData_starGenType_AddSection_fnRecorder) AndDo(fn MoqData_starGenType_AddSection_doFn) *MoqData_starGenType_AddSection_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqData_starGenType_AddSection_fnRecorder) DoReturnResults(fn MoqData_starGenType_AddSection_doReturnFn) *MoqData_starGenType_AddSection_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqData_starGenType_AddSection_doFn
		DoReturnFn MoqData_starGenType_AddSection_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqData_starGenType_AddSection_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqData_starGenType_AddSection_resultsByParams
	for n, res := range r.Moq.ResultsByParams_AddSection {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqData_starGenType_AddSection_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqData_starGenType_AddSection_paramsKey]*MoqData_starGenType_AddSection_results{},
		}
		r.Moq.ResultsByParams_AddSection = append(r.Moq.ResultsByParams_AddSection, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_AddSection) {
			copy(r.Moq.ResultsByParams_AddSection[insertAt+1:], r.Moq.ResultsByParams_AddSection[insertAt:0])
			r.Moq.ResultsByParams_AddSection[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_AddSection(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqData_starGenType_AddSection_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqData_starGenType_AddSection_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqData_starGenType_AddSection_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqData_starGenType_AddSection_doFn
				DoReturnFn MoqData_starGenType_AddSection_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqData_starGenType) PrettyParams_AddSection(params MoqData_starGenType_AddSection_params) string {
	return fmt.Sprintf("AddSection(%#v, %#v)", params.Name, params.Contents)
}

func (m *MoqData_starGenType) ParamsKey_AddSection(params MoqData_starGenType_AddSection_params, anyParams uint64) MoqData_starGenType_AddSection_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.AddSection.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var contentsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.AddSection.Contents == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The contents parameter of the AddSection function can't be indexed by value")
		}
		contentsUsedHash = hash.DeepHash(params.Contents)
	}
	return MoqData_starGenType_AddSection_paramsKey{
		Params: struct{ Name string }{
			Name: nameUsed,
		},
		Hashes: struct {
			Name     hash.Hash
			Contents hash.Hash
		}{
			Name:     nameUsedHash,
			Contents: contentsUsedHash,
		},
	}
}

func (m *MoqData_starGenType_recorder) Type(off dwarf.Offset) *MoqData_starGenType_Type_fnRecorder {
	return &MoqData_starGenType_Type_fnRecorder{
		Params: MoqData_starGenType_Type_params{
			Off: off,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqData_starGenType_Type_fnRecorder) Any() *MoqData_starGenType_Type_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Type(r.Params))
		return nil
	}
	return &MoqData_starGenType_Type_anyParams{Recorder: r}
}

func (a *MoqData_starGenType_Type_anyParams) Off() *MoqData_starGenType_Type_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqData_starGenType_Type_fnRecorder) Seq() *MoqData_starGenType_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Type(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqData_starGenType_Type_fnRecorder) NoSeq() *MoqData_starGenType_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Type(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqData_starGenType_Type_fnRecorder) ReturnResults(result1 dwarf.Type, result2 error) *MoqData_starGenType_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 dwarf.Type
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqData_starGenType_Type_doFn
		DoReturnFn MoqData_starGenType_Type_doReturnFn
	}{
		Values: &struct {
			Result1 dwarf.Type
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqData_starGenType_Type_fnRecorder) AndDo(fn MoqData_starGenType_Type_doFn) *MoqData_starGenType_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqData_starGenType_Type_fnRecorder) DoReturnResults(fn MoqData_starGenType_Type_doReturnFn) *MoqData_starGenType_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 dwarf.Type
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqData_starGenType_Type_doFn
		DoReturnFn MoqData_starGenType_Type_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqData_starGenType_Type_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqData_starGenType_Type_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Type {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqData_starGenType_Type_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqData_starGenType_Type_paramsKey]*MoqData_starGenType_Type_results{},
		}
		r.Moq.ResultsByParams_Type = append(r.Moq.ResultsByParams_Type, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Type) {
			copy(r.Moq.ResultsByParams_Type[insertAt+1:], r.Moq.ResultsByParams_Type[insertAt:0])
			r.Moq.ResultsByParams_Type[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Type(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqData_starGenType_Type_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqData_starGenType_Type_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqData_starGenType_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 dwarf.Type
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqData_starGenType_Type_doFn
				DoReturnFn MoqData_starGenType_Type_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqData_starGenType) PrettyParams_Type(params MoqData_starGenType_Type_params) string {
	return fmt.Sprintf("Type(%#v)", params.Off)
}

func (m *MoqData_starGenType) ParamsKey_Type(params MoqData_starGenType_Type_params, anyParams uint64) MoqData_starGenType_Type_paramsKey {
	m.Scene.T.Helper()
	var offUsed dwarf.Offset
	var offUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Type.Off == moq.ParamIndexByValue {
			offUsed = params.Off
		} else {
			offUsedHash = hash.DeepHash(params.Off)
		}
	}
	return MoqData_starGenType_Type_paramsKey{
		Params: struct{ Off dwarf.Offset }{
			Off: offUsed,
		},
		Hashes: struct{ Off hash.Hash }{
			Off: offUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqData_starGenType) Reset() {
	m.ResultsByParams_Reader = nil
	m.ResultsByParams_Ranges = nil
	m.ResultsByParams_LineReader = nil
	m.ResultsByParams_AddTypes = nil
	m.ResultsByParams_AddSection = nil
	m.ResultsByParams_Type = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqData_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Reader {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Reader(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Ranges {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Ranges(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_LineReader {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_LineReader(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_AddTypes {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_AddTypes(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_AddSection {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_AddSection(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Type {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Type(results.Params))
			}
		}
	}
}
