// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package dwarf

import (
	"debug/dwarf"
	"encoding/binary"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that dwarf.Reader_starGenType is mocked
// completely
var _ Reader_starGenType = (*MoqReader_starGenType_mock)(nil)

// Reader_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Reader_starGenType interface {
	AddressSize() int
	ByteOrder() binary.ByteOrder
	Seek(off dwarf.Offset)
	Next() (*dwarf.Entry, error)
	SkipChildren()
	SeekPC(pc uint64) (*dwarf.Entry, error)
}

// MoqReader_starGenType holds the state of a moq of the Reader_starGenType
// type
type MoqReader_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqReader_starGenType_mock

	ResultsByParams_AddressSize  []MoqReader_starGenType_AddressSize_resultsByParams
	ResultsByParams_ByteOrder    []MoqReader_starGenType_ByteOrder_resultsByParams
	ResultsByParams_Seek         []MoqReader_starGenType_Seek_resultsByParams
	ResultsByParams_Next         []MoqReader_starGenType_Next_resultsByParams
	ResultsByParams_SkipChildren []MoqReader_starGenType_SkipChildren_resultsByParams
	ResultsByParams_SeekPC       []MoqReader_starGenType_SeekPC_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			AddressSize struct{}
			ByteOrder   struct{}
			Seek        struct {
				Off moq.ParamIndexing
			}
			Next         struct{}
			SkipChildren struct{}
			SeekPC       struct {
				Pc moq.ParamIndexing
			}
		}
	}
	// MoqReader_starGenType_mock isolates the mock interface of the
}

// Reader_starGenType type
type MoqReader_starGenType_mock struct {
	Moq *MoqReader_starGenType
}

// MoqReader_starGenType_recorder isolates the recorder interface of the
// Reader_starGenType type
type MoqReader_starGenType_recorder struct {
	Moq *MoqReader_starGenType
}

// MoqReader_starGenType_AddressSize_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_AddressSize_params struct{}

// MoqReader_starGenType_AddressSize_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_AddressSize_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_AddressSize_resultsByParams contains the results for a
// given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_AddressSize_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_AddressSize_paramsKey]*MoqReader_starGenType_AddressSize_results
}

// MoqReader_starGenType_AddressSize_doFn defines the type of function needed
// when calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_AddressSize_doFn func()

// MoqReader_starGenType_AddressSize_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_AddressSize_doReturnFn func() int

// MoqReader_starGenType_AddressSize_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_AddressSize_results struct {
	Params  MoqReader_starGenType_AddressSize_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_AddressSize_doFn
		DoReturnFn MoqReader_starGenType_AddressSize_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_AddressSize_fnRecorder routes recorded function calls
// to the MoqReader_starGenType moq
type MoqReader_starGenType_AddressSize_fnRecorder struct {
	Params    MoqReader_starGenType_AddressSize_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_AddressSize_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_AddressSize_anyParams isolates the any params
// functions of the Reader_starGenType type
type MoqReader_starGenType_AddressSize_anyParams struct {
	Recorder *MoqReader_starGenType_AddressSize_fnRecorder
}

// MoqReader_starGenType_ByteOrder_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_ByteOrder_params struct{}

// MoqReader_starGenType_ByteOrder_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_ByteOrder_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_ByteOrder_resultsByParams contains the results for a
// given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_ByteOrder_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_ByteOrder_paramsKey]*MoqReader_starGenType_ByteOrder_results
}

// MoqReader_starGenType_ByteOrder_doFn defines the type of function needed
// when calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_ByteOrder_doFn func()

// MoqReader_starGenType_ByteOrder_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_ByteOrder_doReturnFn func() binary.ByteOrder

// MoqReader_starGenType_ByteOrder_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_ByteOrder_results struct {
	Params  MoqReader_starGenType_ByteOrder_params
	Results []struct {
		Values *struct {
			Result1 binary.ByteOrder
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ByteOrder_doFn
		DoReturnFn MoqReader_starGenType_ByteOrder_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_ByteOrder_fnRecorder routes recorded function calls to
// the MoqReader_starGenType moq
type MoqReader_starGenType_ByteOrder_fnRecorder struct {
	Params    MoqReader_starGenType_ByteOrder_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_ByteOrder_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_ByteOrder_anyParams isolates the any params functions
// of the Reader_starGenType type
type MoqReader_starGenType_ByteOrder_anyParams struct {
	Recorder *MoqReader_starGenType_ByteOrder_fnRecorder
}

// MoqReader_starGenType_Seek_params holds the params of the Reader_starGenType
// type
type MoqReader_starGenType_Seek_params struct{ Off dwarf.Offset }

// MoqReader_starGenType_Seek_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_Seek_paramsKey struct {
	Params struct{ Off dwarf.Offset }
	Hashes struct{ Off hash.Hash }
}

// MoqReader_starGenType_Seek_resultsByParams contains the results for a given
// set of parameters for the Reader_starGenType type
type MoqReader_starGenType_Seek_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_Seek_paramsKey]*MoqReader_starGenType_Seek_results
}

// MoqReader_starGenType_Seek_doFn defines the type of function needed when
// calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_Seek_doFn func(off dwarf.Offset)

// MoqReader_starGenType_Seek_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_Seek_doReturnFn func(off dwarf.Offset)

// MoqReader_starGenType_Seek_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_Seek_results struct {
	Params  MoqReader_starGenType_Seek_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Seek_doFn
		DoReturnFn MoqReader_starGenType_Seek_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_Seek_fnRecorder routes recorded function calls to the
// MoqReader_starGenType moq
type MoqReader_starGenType_Seek_fnRecorder struct {
	Params    MoqReader_starGenType_Seek_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_Seek_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_Seek_anyParams isolates the any params functions of
// the Reader_starGenType type
type MoqReader_starGenType_Seek_anyParams struct {
	Recorder *MoqReader_starGenType_Seek_fnRecorder
}

// MoqReader_starGenType_Next_params holds the params of the Reader_starGenType
// type
type MoqReader_starGenType_Next_params struct{}

// MoqReader_starGenType_Next_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_Next_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_Next_resultsByParams contains the results for a given
// set of parameters for the Reader_starGenType type
type MoqReader_starGenType_Next_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_Next_paramsKey]*MoqReader_starGenType_Next_results
}

// MoqReader_starGenType_Next_doFn defines the type of function needed when
// calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_Next_doFn func()

// MoqReader_starGenType_Next_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_Next_doReturnFn func() (*dwarf.Entry, error)

// MoqReader_starGenType_Next_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_Next_results struct {
	Params  MoqReader_starGenType_Next_params
	Results []struct {
		Values *struct {
			Result1 *dwarf.Entry
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Next_doFn
		DoReturnFn MoqReader_starGenType_Next_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_Next_fnRecorder routes recorded function calls to the
// MoqReader_starGenType moq
type MoqReader_starGenType_Next_fnRecorder struct {
	Params    MoqReader_starGenType_Next_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_Next_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_Next_anyParams isolates the any params functions of
// the Reader_starGenType type
type MoqReader_starGenType_Next_anyParams struct {
	Recorder *MoqReader_starGenType_Next_fnRecorder
}

// MoqReader_starGenType_SkipChildren_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_SkipChildren_params struct{}

// MoqReader_starGenType_SkipChildren_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_SkipChildren_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_SkipChildren_resultsByParams contains the results for
// a given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_SkipChildren_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_SkipChildren_paramsKey]*MoqReader_starGenType_SkipChildren_results
}

// MoqReader_starGenType_SkipChildren_doFn defines the type of function needed
// when calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_SkipChildren_doFn func()

// MoqReader_starGenType_SkipChildren_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_SkipChildren_doReturnFn func()

// MoqReader_starGenType_SkipChildren_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_SkipChildren_results struct {
	Params  MoqReader_starGenType_SkipChildren_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqReader_starGenType_SkipChildren_doFn
		DoReturnFn MoqReader_starGenType_SkipChildren_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_SkipChildren_fnRecorder routes recorded function calls
// to the MoqReader_starGenType moq
type MoqReader_starGenType_SkipChildren_fnRecorder struct {
	Params    MoqReader_starGenType_SkipChildren_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_SkipChildren_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_SkipChildren_anyParams isolates the any params
// functions of the Reader_starGenType type
type MoqReader_starGenType_SkipChildren_anyParams struct {
	Recorder *MoqReader_starGenType_SkipChildren_fnRecorder
}

// MoqReader_starGenType_SeekPC_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_SeekPC_params struct{ Pc uint64 }

// MoqReader_starGenType_SeekPC_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_SeekPC_paramsKey struct {
	Params struct{ Pc uint64 }
	Hashes struct{ Pc hash.Hash }
}

// MoqReader_starGenType_SeekPC_resultsByParams contains the results for a
// given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_SeekPC_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_SeekPC_paramsKey]*MoqReader_starGenType_SeekPC_results
}

// MoqReader_starGenType_SeekPC_doFn defines the type of function needed when
// calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_SeekPC_doFn func(pc uint64)

// MoqReader_starGenType_SeekPC_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_SeekPC_doReturnFn func(pc uint64) (*dwarf.Entry, error)

// MoqReader_starGenType_SeekPC_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_SeekPC_results struct {
	Params  MoqReader_starGenType_SeekPC_params
	Results []struct {
		Values *struct {
			Result1 *dwarf.Entry
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_SeekPC_doFn
		DoReturnFn MoqReader_starGenType_SeekPC_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_SeekPC_fnRecorder routes recorded function calls to
// the MoqReader_starGenType moq
type MoqReader_starGenType_SeekPC_fnRecorder struct {
	Params    MoqReader_starGenType_SeekPC_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_SeekPC_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_SeekPC_anyParams isolates the any params functions of
// the Reader_starGenType type
type MoqReader_starGenType_SeekPC_anyParams struct {
	Recorder *MoqReader_starGenType_SeekPC_fnRecorder
}

// NewMoqReader_starGenType creates a new moq of the Reader_starGenType type
func NewMoqReader_starGenType(scene *moq.Scene, config *moq.Config) *MoqReader_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqReader_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqReader_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				AddressSize struct{}
				ByteOrder   struct{}
				Seek        struct {
					Off moq.ParamIndexing
				}
				Next         struct{}
				SkipChildren struct{}
				SeekPC       struct {
					Pc moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			AddressSize struct{}
			ByteOrder   struct{}
			Seek        struct {
				Off moq.ParamIndexing
			}
			Next         struct{}
			SkipChildren struct{}
			SeekPC       struct {
				Pc moq.ParamIndexing
			}
		}{
			AddressSize: struct{}{},
			ByteOrder:   struct{}{},
			Seek: struct {
				Off moq.ParamIndexing
			}{
				Off: moq.ParamIndexByValue,
			},
			Next:         struct{}{},
			SkipChildren: struct{}{},
			SeekPC: struct {
				Pc moq.ParamIndexing
			}{
				Pc: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Reader_starGenType type
func (m *MoqReader_starGenType) Mock() *MoqReader_starGenType_mock { return m.Moq }

func (m *MoqReader_starGenType_mock) AddressSize() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_AddressSize_params{}
	var results *MoqReader_starGenType_AddressSize_results
	for _, resultsByParams := range m.Moq.ResultsByParams_AddressSize {
		paramsKey := m.Moq.ParamsKey_AddressSize(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_AddressSize(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_AddressSize(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_AddressSize(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqReader_starGenType_mock) ByteOrder() (result1 binary.ByteOrder) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_ByteOrder_params{}
	var results *MoqReader_starGenType_ByteOrder_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ByteOrder {
		paramsKey := m.Moq.ParamsKey_ByteOrder(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ByteOrder(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ByteOrder(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ByteOrder(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqReader_starGenType_mock) Seek(off dwarf.Offset) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_Seek_params{
		Off: off,
	}
	var results *MoqReader_starGenType_Seek_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Seek {
		paramsKey := m.Moq.ParamsKey_Seek(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Seek(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Seek(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Seek(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(off)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(off)
	}
	return
}

func (m *MoqReader_starGenType_mock) Next() (result1 *dwarf.Entry, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_Next_params{}
	var results *MoqReader_starGenType_Next_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Next {
		paramsKey := m.Moq.ParamsKey_Next(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Next(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Next(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Next(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqReader_starGenType_mock) SkipChildren() {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_SkipChildren_params{}
	var results *MoqReader_starGenType_SkipChildren_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SkipChildren {
		paramsKey := m.Moq.ParamsKey_SkipChildren(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SkipChildren(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SkipChildren(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SkipChildren(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqReader_starGenType_mock) SeekPC(pc uint64) (result1 *dwarf.Entry, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_SeekPC_params{
		Pc: pc,
	}
	var results *MoqReader_starGenType_SeekPC_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SeekPC {
		paramsKey := m.Moq.ParamsKey_SeekPC(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SeekPC(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SeekPC(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SeekPC(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(pc)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(pc)
	}
	return
}

// OnCall returns the recorder implementation of the Reader_starGenType type
func (m *MoqReader_starGenType) OnCall() *MoqReader_starGenType_recorder {
	return &MoqReader_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqReader_starGenType_recorder) AddressSize() *MoqReader_starGenType_AddressSize_fnRecorder {
	return &MoqReader_starGenType_AddressSize_fnRecorder{
		Params:   MoqReader_starGenType_AddressSize_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_AddressSize_fnRecorder) Any() *MoqReader_starGenType_AddressSize_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AddressSize(r.Params))
		return nil
	}
	return &MoqReader_starGenType_AddressSize_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_AddressSize_fnRecorder) Seq() *MoqReader_starGenType_AddressSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AddressSize(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_AddressSize_fnRecorder) NoSeq() *MoqReader_starGenType_AddressSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AddressSize(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_AddressSize_fnRecorder) ReturnResults(result1 int) *MoqReader_starGenType_AddressSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_AddressSize_doFn
		DoReturnFn MoqReader_starGenType_AddressSize_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_AddressSize_fnRecorder) AndDo(fn MoqReader_starGenType_AddressSize_doFn) *MoqReader_starGenType_AddressSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_AddressSize_fnRecorder) DoReturnResults(fn MoqReader_starGenType_AddressSize_doReturnFn) *MoqReader_starGenType_AddressSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_AddressSize_doFn
		DoReturnFn MoqReader_starGenType_AddressSize_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_AddressSize_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_AddressSize_resultsByParams
	for n, res := range r.Moq.ResultsByParams_AddressSize {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_AddressSize_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_AddressSize_paramsKey]*MoqReader_starGenType_AddressSize_results{},
		}
		r.Moq.ResultsByParams_AddressSize = append(r.Moq.ResultsByParams_AddressSize, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_AddressSize) {
			copy(r.Moq.ResultsByParams_AddressSize[insertAt+1:], r.Moq.ResultsByParams_AddressSize[insertAt:0])
			r.Moq.ResultsByParams_AddressSize[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_AddressSize(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_AddressSize_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_AddressSize_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_AddressSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_AddressSize_doFn
				DoReturnFn MoqReader_starGenType_AddressSize_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_AddressSize(params MoqReader_starGenType_AddressSize_params) string {
	return fmt.Sprintf("AddressSize()")
}

func (m *MoqReader_starGenType) ParamsKey_AddressSize(params MoqReader_starGenType_AddressSize_params, anyParams uint64) MoqReader_starGenType_AddressSize_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_AddressSize_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_starGenType_recorder) ByteOrder() *MoqReader_starGenType_ByteOrder_fnRecorder {
	return &MoqReader_starGenType_ByteOrder_fnRecorder{
		Params:   MoqReader_starGenType_ByteOrder_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_ByteOrder_fnRecorder) Any() *MoqReader_starGenType_ByteOrder_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ByteOrder(r.Params))
		return nil
	}
	return &MoqReader_starGenType_ByteOrder_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_ByteOrder_fnRecorder) Seq() *MoqReader_starGenType_ByteOrder_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ByteOrder(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_ByteOrder_fnRecorder) NoSeq() *MoqReader_starGenType_ByteOrder_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ByteOrder(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_ByteOrder_fnRecorder) ReturnResults(result1 binary.ByteOrder) *MoqReader_starGenType_ByteOrder_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 binary.ByteOrder
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ByteOrder_doFn
		DoReturnFn MoqReader_starGenType_ByteOrder_doReturnFn
	}{
		Values: &struct {
			Result1 binary.ByteOrder
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_ByteOrder_fnRecorder) AndDo(fn MoqReader_starGenType_ByteOrder_doFn) *MoqReader_starGenType_ByteOrder_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_ByteOrder_fnRecorder) DoReturnResults(fn MoqReader_starGenType_ByteOrder_doReturnFn) *MoqReader_starGenType_ByteOrder_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 binary.ByteOrder
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ByteOrder_doFn
		DoReturnFn MoqReader_starGenType_ByteOrder_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_ByteOrder_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_ByteOrder_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ByteOrder {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_ByteOrder_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_ByteOrder_paramsKey]*MoqReader_starGenType_ByteOrder_results{},
		}
		r.Moq.ResultsByParams_ByteOrder = append(r.Moq.ResultsByParams_ByteOrder, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ByteOrder) {
			copy(r.Moq.ResultsByParams_ByteOrder[insertAt+1:], r.Moq.ResultsByParams_ByteOrder[insertAt:0])
			r.Moq.ResultsByParams_ByteOrder[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ByteOrder(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_ByteOrder_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_ByteOrder_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_ByteOrder_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 binary.ByteOrder
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_ByteOrder_doFn
				DoReturnFn MoqReader_starGenType_ByteOrder_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_ByteOrder(params MoqReader_starGenType_ByteOrder_params) string {
	return fmt.Sprintf("ByteOrder()")
}

func (m *MoqReader_starGenType) ParamsKey_ByteOrder(params MoqReader_starGenType_ByteOrder_params, anyParams uint64) MoqReader_starGenType_ByteOrder_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_ByteOrder_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_starGenType_recorder) Seek(off dwarf.Offset) *MoqReader_starGenType_Seek_fnRecorder {
	return &MoqReader_starGenType_Seek_fnRecorder{
		Params: MoqReader_starGenType_Seek_params{
			Off: off,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_Seek_fnRecorder) Any() *MoqReader_starGenType_Seek_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seek(r.Params))
		return nil
	}
	return &MoqReader_starGenType_Seek_anyParams{Recorder: r}
}

func (a *MoqReader_starGenType_Seek_anyParams) Off() *MoqReader_starGenType_Seek_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqReader_starGenType_Seek_fnRecorder) Seq() *MoqReader_starGenType_Seek_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seek(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_Seek_fnRecorder) NoSeq() *MoqReader_starGenType_Seek_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seek(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_Seek_fnRecorder) ReturnResults() *MoqReader_starGenType_Seek_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Seek_doFn
		DoReturnFn MoqReader_starGenType_Seek_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_Seek_fnRecorder) AndDo(fn MoqReader_starGenType_Seek_doFn) *MoqReader_starGenType_Seek_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_Seek_fnRecorder) DoReturnResults(fn MoqReader_starGenType_Seek_doReturnFn) *MoqReader_starGenType_Seek_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Seek_doFn
		DoReturnFn MoqReader_starGenType_Seek_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_Seek_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_Seek_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Seek {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_Seek_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_Seek_paramsKey]*MoqReader_starGenType_Seek_results{},
		}
		r.Moq.ResultsByParams_Seek = append(r.Moq.ResultsByParams_Seek, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Seek) {
			copy(r.Moq.ResultsByParams_Seek[insertAt+1:], r.Moq.ResultsByParams_Seek[insertAt:0])
			r.Moq.ResultsByParams_Seek[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Seek(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_Seek_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_Seek_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_Seek_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqReader_starGenType_Seek_doFn
				DoReturnFn MoqReader_starGenType_Seek_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_Seek(params MoqReader_starGenType_Seek_params) string {
	return fmt.Sprintf("Seek(%#v)", params.Off)
}

func (m *MoqReader_starGenType) ParamsKey_Seek(params MoqReader_starGenType_Seek_params, anyParams uint64) MoqReader_starGenType_Seek_paramsKey {
	m.Scene.T.Helper()
	var offUsed dwarf.Offset
	var offUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Seek.Off == moq.ParamIndexByValue {
			offUsed = params.Off
		} else {
			offUsedHash = hash.DeepHash(params.Off)
		}
	}
	return MoqReader_starGenType_Seek_paramsKey{
		Params: struct{ Off dwarf.Offset }{
			Off: offUsed,
		},
		Hashes: struct{ Off hash.Hash }{
			Off: offUsedHash,
		},
	}
}

func (m *MoqReader_starGenType_recorder) Next() *MoqReader_starGenType_Next_fnRecorder {
	return &MoqReader_starGenType_Next_fnRecorder{
		Params:   MoqReader_starGenType_Next_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_Next_fnRecorder) Any() *MoqReader_starGenType_Next_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	return &MoqReader_starGenType_Next_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_Next_fnRecorder) Seq() *MoqReader_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_Next_fnRecorder) NoSeq() *MoqReader_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_Next_fnRecorder) ReturnResults(result1 *dwarf.Entry, result2 error) *MoqReader_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *dwarf.Entry
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Next_doFn
		DoReturnFn MoqReader_starGenType_Next_doReturnFn
	}{
		Values: &struct {
			Result1 *dwarf.Entry
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_Next_fnRecorder) AndDo(fn MoqReader_starGenType_Next_doFn) *MoqReader_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_Next_fnRecorder) DoReturnResults(fn MoqReader_starGenType_Next_doReturnFn) *MoqReader_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *dwarf.Entry
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Next_doFn
		DoReturnFn MoqReader_starGenType_Next_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_Next_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_Next_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Next {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_Next_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_Next_paramsKey]*MoqReader_starGenType_Next_results{},
		}
		r.Moq.ResultsByParams_Next = append(r.Moq.ResultsByParams_Next, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Next) {
			copy(r.Moq.ResultsByParams_Next[insertAt+1:], r.Moq.ResultsByParams_Next[insertAt:0])
			r.Moq.ResultsByParams_Next[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Next(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_Next_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_Next_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *dwarf.Entry
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_Next_doFn
				DoReturnFn MoqReader_starGenType_Next_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_Next(params MoqReader_starGenType_Next_params) string {
	return fmt.Sprintf("Next()")
}

func (m *MoqReader_starGenType) ParamsKey_Next(params MoqReader_starGenType_Next_params, anyParams uint64) MoqReader_starGenType_Next_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_Next_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_starGenType_recorder) SkipChildren() *MoqReader_starGenType_SkipChildren_fnRecorder {
	return &MoqReader_starGenType_SkipChildren_fnRecorder{
		Params:   MoqReader_starGenType_SkipChildren_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_SkipChildren_fnRecorder) Any() *MoqReader_starGenType_SkipChildren_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SkipChildren(r.Params))
		return nil
	}
	return &MoqReader_starGenType_SkipChildren_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_SkipChildren_fnRecorder) Seq() *MoqReader_starGenType_SkipChildren_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SkipChildren(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_SkipChildren_fnRecorder) NoSeq() *MoqReader_starGenType_SkipChildren_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SkipChildren(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_SkipChildren_fnRecorder) ReturnResults() *MoqReader_starGenType_SkipChildren_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqReader_starGenType_SkipChildren_doFn
		DoReturnFn MoqReader_starGenType_SkipChildren_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_SkipChildren_fnRecorder) AndDo(fn MoqReader_starGenType_SkipChildren_doFn) *MoqReader_starGenType_SkipChildren_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_SkipChildren_fnRecorder) DoReturnResults(fn MoqReader_starGenType_SkipChildren_doReturnFn) *MoqReader_starGenType_SkipChildren_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqReader_starGenType_SkipChildren_doFn
		DoReturnFn MoqReader_starGenType_SkipChildren_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_SkipChildren_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_SkipChildren_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SkipChildren {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_SkipChildren_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_SkipChildren_paramsKey]*MoqReader_starGenType_SkipChildren_results{},
		}
		r.Moq.ResultsByParams_SkipChildren = append(r.Moq.ResultsByParams_SkipChildren, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SkipChildren) {
			copy(r.Moq.ResultsByParams_SkipChildren[insertAt+1:], r.Moq.ResultsByParams_SkipChildren[insertAt:0])
			r.Moq.ResultsByParams_SkipChildren[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SkipChildren(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_SkipChildren_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_SkipChildren_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_SkipChildren_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqReader_starGenType_SkipChildren_doFn
				DoReturnFn MoqReader_starGenType_SkipChildren_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_SkipChildren(params MoqReader_starGenType_SkipChildren_params) string {
	return fmt.Sprintf("SkipChildren()")
}

func (m *MoqReader_starGenType) ParamsKey_SkipChildren(params MoqReader_starGenType_SkipChildren_params, anyParams uint64) MoqReader_starGenType_SkipChildren_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_SkipChildren_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_starGenType_recorder) SeekPC(pc uint64) *MoqReader_starGenType_SeekPC_fnRecorder {
	return &MoqReader_starGenType_SeekPC_fnRecorder{
		Params: MoqReader_starGenType_SeekPC_params{
			Pc: pc,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_SeekPC_fnRecorder) Any() *MoqReader_starGenType_SeekPC_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SeekPC(r.Params))
		return nil
	}
	return &MoqReader_starGenType_SeekPC_anyParams{Recorder: r}
}

func (a *MoqReader_starGenType_SeekPC_anyParams) Pc() *MoqReader_starGenType_SeekPC_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqReader_starGenType_SeekPC_fnRecorder) Seq() *MoqReader_starGenType_SeekPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SeekPC(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_SeekPC_fnRecorder) NoSeq() *MoqReader_starGenType_SeekPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SeekPC(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_SeekPC_fnRecorder) ReturnResults(result1 *dwarf.Entry, result2 error) *MoqReader_starGenType_SeekPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *dwarf.Entry
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_SeekPC_doFn
		DoReturnFn MoqReader_starGenType_SeekPC_doReturnFn
	}{
		Values: &struct {
			Result1 *dwarf.Entry
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_SeekPC_fnRecorder) AndDo(fn MoqReader_starGenType_SeekPC_doFn) *MoqReader_starGenType_SeekPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_SeekPC_fnRecorder) DoReturnResults(fn MoqReader_starGenType_SeekPC_doReturnFn) *MoqReader_starGenType_SeekPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *dwarf.Entry
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_SeekPC_doFn
		DoReturnFn MoqReader_starGenType_SeekPC_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_SeekPC_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_SeekPC_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SeekPC {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_SeekPC_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_SeekPC_paramsKey]*MoqReader_starGenType_SeekPC_results{},
		}
		r.Moq.ResultsByParams_SeekPC = append(r.Moq.ResultsByParams_SeekPC, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SeekPC) {
			copy(r.Moq.ResultsByParams_SeekPC[insertAt+1:], r.Moq.ResultsByParams_SeekPC[insertAt:0])
			r.Moq.ResultsByParams_SeekPC[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SeekPC(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_SeekPC_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_SeekPC_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_SeekPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *dwarf.Entry
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_SeekPC_doFn
				DoReturnFn MoqReader_starGenType_SeekPC_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_SeekPC(params MoqReader_starGenType_SeekPC_params) string {
	return fmt.Sprintf("SeekPC(%#v)", params.Pc)
}

func (m *MoqReader_starGenType) ParamsKey_SeekPC(params MoqReader_starGenType_SeekPC_params, anyParams uint64) MoqReader_starGenType_SeekPC_paramsKey {
	m.Scene.T.Helper()
	var pcUsed uint64
	var pcUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SeekPC.Pc == moq.ParamIndexByValue {
			pcUsed = params.Pc
		} else {
			pcUsedHash = hash.DeepHash(params.Pc)
		}
	}
	return MoqReader_starGenType_SeekPC_paramsKey{
		Params: struct{ Pc uint64 }{
			Pc: pcUsed,
		},
		Hashes: struct{ Pc hash.Hash }{
			Pc: pcUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqReader_starGenType) Reset() {
	m.ResultsByParams_AddressSize = nil
	m.ResultsByParams_ByteOrder = nil
	m.ResultsByParams_Seek = nil
	m.ResultsByParams_Next = nil
	m.ResultsByParams_SkipChildren = nil
	m.ResultsByParams_SeekPC = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqReader_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_AddressSize {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_AddressSize(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ByteOrder {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ByteOrder(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Seek {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Seek(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Next {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Next(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SkipChildren {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SkipChildren(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SeekPC {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SeekPC(results.Params))
			}
		}
	}
}
