// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package gosym

import (
	"debug/gosym"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that gosym.Table_starGenType is mocked
// completely
var _ Table_starGenType = (*MoqTable_starGenType_mock)(nil)

// Table_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Table_starGenType interface {
	PCToFunc(pc uint64) *gosym.Func
	PCToLine(pc uint64) (file string, line int, fn *gosym.Func)
	LineToPC(file string, line int) (pc uint64, fn *gosym.Func, err error)
	LookupSym(name string) *gosym.Sym
	LookupFunc(name string) *gosym.Func
	SymByAddr(addr uint64) *gosym.Sym
}

// MoqTable_starGenType holds the state of a moq of the Table_starGenType type
type MoqTable_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqTable_starGenType_mock

	ResultsByParams_PCToFunc   []MoqTable_starGenType_PCToFunc_resultsByParams
	ResultsByParams_PCToLine   []MoqTable_starGenType_PCToLine_resultsByParams
	ResultsByParams_LineToPC   []MoqTable_starGenType_LineToPC_resultsByParams
	ResultsByParams_LookupSym  []MoqTable_starGenType_LookupSym_resultsByParams
	ResultsByParams_LookupFunc []MoqTable_starGenType_LookupFunc_resultsByParams
	ResultsByParams_SymByAddr  []MoqTable_starGenType_SymByAddr_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			PCToFunc struct {
				Pc moq.ParamIndexing
			}
			PCToLine struct {
				Pc moq.ParamIndexing
			}
			LineToPC struct {
				File moq.ParamIndexing
				Line moq.ParamIndexing
			}
			LookupSym struct {
				Name moq.ParamIndexing
			}
			LookupFunc struct {
				Name moq.ParamIndexing
			}
			SymByAddr struct {
				Addr moq.ParamIndexing
			}
		}
	}
	// MoqTable_starGenType_mock isolates the mock interface of the
}

// Table_starGenType type
type MoqTable_starGenType_mock struct {
	Moq *MoqTable_starGenType
}

// MoqTable_starGenType_recorder isolates the recorder interface of the
// Table_starGenType type
type MoqTable_starGenType_recorder struct {
	Moq *MoqTable_starGenType
}

// MoqTable_starGenType_PCToFunc_params holds the params of the
// Table_starGenType type
type MoqTable_starGenType_PCToFunc_params struct{ Pc uint64 }

// MoqTable_starGenType_PCToFunc_paramsKey holds the map key params of the
// Table_starGenType type
type MoqTable_starGenType_PCToFunc_paramsKey struct {
	Params struct{ Pc uint64 }
	Hashes struct{ Pc hash.Hash }
}

// MoqTable_starGenType_PCToFunc_resultsByParams contains the results for a
// given set of parameters for the Table_starGenType type
type MoqTable_starGenType_PCToFunc_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTable_starGenType_PCToFunc_paramsKey]*MoqTable_starGenType_PCToFunc_results
}

// MoqTable_starGenType_PCToFunc_doFn defines the type of function needed when
// calling AndDo for the Table_starGenType type
type MoqTable_starGenType_PCToFunc_doFn func(pc uint64)

// MoqTable_starGenType_PCToFunc_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Table_starGenType type
type MoqTable_starGenType_PCToFunc_doReturnFn func(pc uint64) *gosym.Func

// MoqTable_starGenType_PCToFunc_results holds the results of the
// Table_starGenType type
type MoqTable_starGenType_PCToFunc_results struct {
	Params  MoqTable_starGenType_PCToFunc_params
	Results []struct {
		Values *struct {
			Result1 *gosym.Func
		}
		Sequence   uint32
		DoFn       MoqTable_starGenType_PCToFunc_doFn
		DoReturnFn MoqTable_starGenType_PCToFunc_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTable_starGenType_PCToFunc_fnRecorder routes recorded function calls to
// the MoqTable_starGenType moq
type MoqTable_starGenType_PCToFunc_fnRecorder struct {
	Params    MoqTable_starGenType_PCToFunc_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTable_starGenType_PCToFunc_results
	Moq       *MoqTable_starGenType
}

// MoqTable_starGenType_PCToFunc_anyParams isolates the any params functions of
// the Table_starGenType type
type MoqTable_starGenType_PCToFunc_anyParams struct {
	Recorder *MoqTable_starGenType_PCToFunc_fnRecorder
}

// MoqTable_starGenType_PCToLine_params holds the params of the
// Table_starGenType type
type MoqTable_starGenType_PCToLine_params struct{ Pc uint64 }

// MoqTable_starGenType_PCToLine_paramsKey holds the map key params of the
// Table_starGenType type
type MoqTable_starGenType_PCToLine_paramsKey struct {
	Params struct{ Pc uint64 }
	Hashes struct{ Pc hash.Hash }
}

// MoqTable_starGenType_PCToLine_resultsByParams contains the results for a
// given set of parameters for the Table_starGenType type
type MoqTable_starGenType_PCToLine_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTable_starGenType_PCToLine_paramsKey]*MoqTable_starGenType_PCToLine_results
}

// MoqTable_starGenType_PCToLine_doFn defines the type of function needed when
// calling AndDo for the Table_starGenType type
type MoqTable_starGenType_PCToLine_doFn func(pc uint64)

// MoqTable_starGenType_PCToLine_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Table_starGenType type
type MoqTable_starGenType_PCToLine_doReturnFn func(pc uint64) (file string, line int, fn *gosym.Func)

// MoqTable_starGenType_PCToLine_results holds the results of the
// Table_starGenType type
type MoqTable_starGenType_PCToLine_results struct {
	Params  MoqTable_starGenType_PCToLine_params
	Results []struct {
		Values *struct {
			File string
			Line int
			Fn   *gosym.Func
		}
		Sequence   uint32
		DoFn       MoqTable_starGenType_PCToLine_doFn
		DoReturnFn MoqTable_starGenType_PCToLine_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTable_starGenType_PCToLine_fnRecorder routes recorded function calls to
// the MoqTable_starGenType moq
type MoqTable_starGenType_PCToLine_fnRecorder struct {
	Params    MoqTable_starGenType_PCToLine_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTable_starGenType_PCToLine_results
	Moq       *MoqTable_starGenType
}

// MoqTable_starGenType_PCToLine_anyParams isolates the any params functions of
// the Table_starGenType type
type MoqTable_starGenType_PCToLine_anyParams struct {
	Recorder *MoqTable_starGenType_PCToLine_fnRecorder
}

// MoqTable_starGenType_LineToPC_params holds the params of the
// Table_starGenType type
type MoqTable_starGenType_LineToPC_params struct {
	File string
	Line int
}

// MoqTable_starGenType_LineToPC_paramsKey holds the map key params of the
// Table_starGenType type
type MoqTable_starGenType_LineToPC_paramsKey struct {
	Params struct {
		File string
		Line int
	}
	Hashes struct {
		File hash.Hash
		Line hash.Hash
	}
}

// MoqTable_starGenType_LineToPC_resultsByParams contains the results for a
// given set of parameters for the Table_starGenType type
type MoqTable_starGenType_LineToPC_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTable_starGenType_LineToPC_paramsKey]*MoqTable_starGenType_LineToPC_results
}

// MoqTable_starGenType_LineToPC_doFn defines the type of function needed when
// calling AndDo for the Table_starGenType type
type MoqTable_starGenType_LineToPC_doFn func(file string, line int)

// MoqTable_starGenType_LineToPC_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Table_starGenType type
type MoqTable_starGenType_LineToPC_doReturnFn func(file string, line int) (pc uint64, fn *gosym.Func, err error)

// MoqTable_starGenType_LineToPC_results holds the results of the
// Table_starGenType type
type MoqTable_starGenType_LineToPC_results struct {
	Params  MoqTable_starGenType_LineToPC_params
	Results []struct {
		Values *struct {
			Pc  uint64
			Fn  *gosym.Func
			Err error
		}
		Sequence   uint32
		DoFn       MoqTable_starGenType_LineToPC_doFn
		DoReturnFn MoqTable_starGenType_LineToPC_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTable_starGenType_LineToPC_fnRecorder routes recorded function calls to
// the MoqTable_starGenType moq
type MoqTable_starGenType_LineToPC_fnRecorder struct {
	Params    MoqTable_starGenType_LineToPC_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTable_starGenType_LineToPC_results
	Moq       *MoqTable_starGenType
}

// MoqTable_starGenType_LineToPC_anyParams isolates the any params functions of
// the Table_starGenType type
type MoqTable_starGenType_LineToPC_anyParams struct {
	Recorder *MoqTable_starGenType_LineToPC_fnRecorder
}

// MoqTable_starGenType_LookupSym_params holds the params of the
// Table_starGenType type
type MoqTable_starGenType_LookupSym_params struct{ Name string }

// MoqTable_starGenType_LookupSym_paramsKey holds the map key params of the
// Table_starGenType type
type MoqTable_starGenType_LookupSym_paramsKey struct {
	Params struct{ Name string }
	Hashes struct{ Name hash.Hash }
}

// MoqTable_starGenType_LookupSym_resultsByParams contains the results for a
// given set of parameters for the Table_starGenType type
type MoqTable_starGenType_LookupSym_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTable_starGenType_LookupSym_paramsKey]*MoqTable_starGenType_LookupSym_results
}

// MoqTable_starGenType_LookupSym_doFn defines the type of function needed when
// calling AndDo for the Table_starGenType type
type MoqTable_starGenType_LookupSym_doFn func(name string)

// MoqTable_starGenType_LookupSym_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Table_starGenType type
type MoqTable_starGenType_LookupSym_doReturnFn func(name string) *gosym.Sym

// MoqTable_starGenType_LookupSym_results holds the results of the
// Table_starGenType type
type MoqTable_starGenType_LookupSym_results struct {
	Params  MoqTable_starGenType_LookupSym_params
	Results []struct {
		Values *struct {
			Result1 *gosym.Sym
		}
		Sequence   uint32
		DoFn       MoqTable_starGenType_LookupSym_doFn
		DoReturnFn MoqTable_starGenType_LookupSym_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTable_starGenType_LookupSym_fnRecorder routes recorded function calls to
// the MoqTable_starGenType moq
type MoqTable_starGenType_LookupSym_fnRecorder struct {
	Params    MoqTable_starGenType_LookupSym_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTable_starGenType_LookupSym_results
	Moq       *MoqTable_starGenType
}

// MoqTable_starGenType_LookupSym_anyParams isolates the any params functions
// of the Table_starGenType type
type MoqTable_starGenType_LookupSym_anyParams struct {
	Recorder *MoqTable_starGenType_LookupSym_fnRecorder
}

// MoqTable_starGenType_LookupFunc_params holds the params of the
// Table_starGenType type
type MoqTable_starGenType_LookupFunc_params struct{ Name string }

// MoqTable_starGenType_LookupFunc_paramsKey holds the map key params of the
// Table_starGenType type
type MoqTable_starGenType_LookupFunc_paramsKey struct {
	Params struct{ Name string }
	Hashes struct{ Name hash.Hash }
}

// MoqTable_starGenType_LookupFunc_resultsByParams contains the results for a
// given set of parameters for the Table_starGenType type
type MoqTable_starGenType_LookupFunc_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTable_starGenType_LookupFunc_paramsKey]*MoqTable_starGenType_LookupFunc_results
}

// MoqTable_starGenType_LookupFunc_doFn defines the type of function needed
// when calling AndDo for the Table_starGenType type
type MoqTable_starGenType_LookupFunc_doFn func(name string)

// MoqTable_starGenType_LookupFunc_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Table_starGenType type
type MoqTable_starGenType_LookupFunc_doReturnFn func(name string) *gosym.Func

// MoqTable_starGenType_LookupFunc_results holds the results of the
// Table_starGenType type
type MoqTable_starGenType_LookupFunc_results struct {
	Params  MoqTable_starGenType_LookupFunc_params
	Results []struct {
		Values *struct {
			Result1 *gosym.Func
		}
		Sequence   uint32
		DoFn       MoqTable_starGenType_LookupFunc_doFn
		DoReturnFn MoqTable_starGenType_LookupFunc_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTable_starGenType_LookupFunc_fnRecorder routes recorded function calls to
// the MoqTable_starGenType moq
type MoqTable_starGenType_LookupFunc_fnRecorder struct {
	Params    MoqTable_starGenType_LookupFunc_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTable_starGenType_LookupFunc_results
	Moq       *MoqTable_starGenType
}

// MoqTable_starGenType_LookupFunc_anyParams isolates the any params functions
// of the Table_starGenType type
type MoqTable_starGenType_LookupFunc_anyParams struct {
	Recorder *MoqTable_starGenType_LookupFunc_fnRecorder
}

// MoqTable_starGenType_SymByAddr_params holds the params of the
// Table_starGenType type
type MoqTable_starGenType_SymByAddr_params struct{ Addr uint64 }

// MoqTable_starGenType_SymByAddr_paramsKey holds the map key params of the
// Table_starGenType type
type MoqTable_starGenType_SymByAddr_paramsKey struct {
	Params struct{ Addr uint64 }
	Hashes struct{ Addr hash.Hash }
}

// MoqTable_starGenType_SymByAddr_resultsByParams contains the results for a
// given set of parameters for the Table_starGenType type
type MoqTable_starGenType_SymByAddr_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTable_starGenType_SymByAddr_paramsKey]*MoqTable_starGenType_SymByAddr_results
}

// MoqTable_starGenType_SymByAddr_doFn defines the type of function needed when
// calling AndDo for the Table_starGenType type
type MoqTable_starGenType_SymByAddr_doFn func(addr uint64)

// MoqTable_starGenType_SymByAddr_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Table_starGenType type
type MoqTable_starGenType_SymByAddr_doReturnFn func(addr uint64) *gosym.Sym

// MoqTable_starGenType_SymByAddr_results holds the results of the
// Table_starGenType type
type MoqTable_starGenType_SymByAddr_results struct {
	Params  MoqTable_starGenType_SymByAddr_params
	Results []struct {
		Values *struct {
			Result1 *gosym.Sym
		}
		Sequence   uint32
		DoFn       MoqTable_starGenType_SymByAddr_doFn
		DoReturnFn MoqTable_starGenType_SymByAddr_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTable_starGenType_SymByAddr_fnRecorder routes recorded function calls to
// the MoqTable_starGenType moq
type MoqTable_starGenType_SymByAddr_fnRecorder struct {
	Params    MoqTable_starGenType_SymByAddr_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTable_starGenType_SymByAddr_results
	Moq       *MoqTable_starGenType
}

// MoqTable_starGenType_SymByAddr_anyParams isolates the any params functions
// of the Table_starGenType type
type MoqTable_starGenType_SymByAddr_anyParams struct {
	Recorder *MoqTable_starGenType_SymByAddr_fnRecorder
}

// NewMoqTable_starGenType creates a new moq of the Table_starGenType type
func NewMoqTable_starGenType(scene *moq.Scene, config *moq.Config) *MoqTable_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqTable_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqTable_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				PCToFunc struct {
					Pc moq.ParamIndexing
				}
				PCToLine struct {
					Pc moq.ParamIndexing
				}
				LineToPC struct {
					File moq.ParamIndexing
					Line moq.ParamIndexing
				}
				LookupSym struct {
					Name moq.ParamIndexing
				}
				LookupFunc struct {
					Name moq.ParamIndexing
				}
				SymByAddr struct {
					Addr moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			PCToFunc struct {
				Pc moq.ParamIndexing
			}
			PCToLine struct {
				Pc moq.ParamIndexing
			}
			LineToPC struct {
				File moq.ParamIndexing
				Line moq.ParamIndexing
			}
			LookupSym struct {
				Name moq.ParamIndexing
			}
			LookupFunc struct {
				Name moq.ParamIndexing
			}
			SymByAddr struct {
				Addr moq.ParamIndexing
			}
		}{
			PCToFunc: struct {
				Pc moq.ParamIndexing
			}{
				Pc: moq.ParamIndexByValue,
			},
			PCToLine: struct {
				Pc moq.ParamIndexing
			}{
				Pc: moq.ParamIndexByValue,
			},
			LineToPC: struct {
				File moq.ParamIndexing
				Line moq.ParamIndexing
			}{
				File: moq.ParamIndexByValue,
				Line: moq.ParamIndexByValue,
			},
			LookupSym: struct {
				Name moq.ParamIndexing
			}{
				Name: moq.ParamIndexByValue,
			},
			LookupFunc: struct {
				Name moq.ParamIndexing
			}{
				Name: moq.ParamIndexByValue,
			},
			SymByAddr: struct {
				Addr moq.ParamIndexing
			}{
				Addr: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Table_starGenType type
func (m *MoqTable_starGenType) Mock() *MoqTable_starGenType_mock { return m.Moq }

func (m *MoqTable_starGenType_mock) PCToFunc(pc uint64) (result1 *gosym.Func) {
	m.Moq.Scene.T.Helper()
	params := MoqTable_starGenType_PCToFunc_params{
		Pc: pc,
	}
	var results *MoqTable_starGenType_PCToFunc_results
	for _, resultsByParams := range m.Moq.ResultsByParams_PCToFunc {
		paramsKey := m.Moq.ParamsKey_PCToFunc(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_PCToFunc(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_PCToFunc(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_PCToFunc(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(pc)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(pc)
	}
	return
}

func (m *MoqTable_starGenType_mock) PCToLine(pc uint64) (file string, line int, fn *gosym.Func) {
	m.Moq.Scene.T.Helper()
	params := MoqTable_starGenType_PCToLine_params{
		Pc: pc,
	}
	var results *MoqTable_starGenType_PCToLine_results
	for _, resultsByParams := range m.Moq.ResultsByParams_PCToLine {
		paramsKey := m.Moq.ParamsKey_PCToLine(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_PCToLine(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_PCToLine(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_PCToLine(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(pc)
	}

	if result.Values != nil {
		file = result.Values.File
		line = result.Values.Line
		fn = result.Values.Fn
	}
	if result.DoReturnFn != nil {
		file, line, fn = result.DoReturnFn(pc)
	}
	return
}

func (m *MoqTable_starGenType_mock) LineToPC(file string, line int) (pc uint64, fn *gosym.Func, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqTable_starGenType_LineToPC_params{
		File: file,
		Line: line,
	}
	var results *MoqTable_starGenType_LineToPC_results
	for _, resultsByParams := range m.Moq.ResultsByParams_LineToPC {
		paramsKey := m.Moq.ParamsKey_LineToPC(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_LineToPC(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_LineToPC(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_LineToPC(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(file, line)
	}

	if result.Values != nil {
		pc = result.Values.Pc
		fn = result.Values.Fn
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		pc, fn, err = result.DoReturnFn(file, line)
	}
	return
}

func (m *MoqTable_starGenType_mock) LookupSym(name string) (result1 *gosym.Sym) {
	m.Moq.Scene.T.Helper()
	params := MoqTable_starGenType_LookupSym_params{
		Name: name,
	}
	var results *MoqTable_starGenType_LookupSym_results
	for _, resultsByParams := range m.Moq.ResultsByParams_LookupSym {
		paramsKey := m.Moq.ParamsKey_LookupSym(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_LookupSym(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_LookupSym(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_LookupSym(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(name)
	}
	return
}

func (m *MoqTable_starGenType_mock) LookupFunc(name string) (result1 *gosym.Func) {
	m.Moq.Scene.T.Helper()
	params := MoqTable_starGenType_LookupFunc_params{
		Name: name,
	}
	var results *MoqTable_starGenType_LookupFunc_results
	for _, resultsByParams := range m.Moq.ResultsByParams_LookupFunc {
		paramsKey := m.Moq.ParamsKey_LookupFunc(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_LookupFunc(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_LookupFunc(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_LookupFunc(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(name)
	}
	return
}

func (m *MoqTable_starGenType_mock) SymByAddr(addr uint64) (result1 *gosym.Sym) {
	m.Moq.Scene.T.Helper()
	params := MoqTable_starGenType_SymByAddr_params{
		Addr: addr,
	}
	var results *MoqTable_starGenType_SymByAddr_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SymByAddr {
		paramsKey := m.Moq.ParamsKey_SymByAddr(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SymByAddr(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SymByAddr(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SymByAddr(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(addr)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(addr)
	}
	return
}

// OnCall returns the recorder implementation of the Table_starGenType type
func (m *MoqTable_starGenType) OnCall() *MoqTable_starGenType_recorder {
	return &MoqTable_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqTable_starGenType_recorder) PCToFunc(pc uint64) *MoqTable_starGenType_PCToFunc_fnRecorder {
	return &MoqTable_starGenType_PCToFunc_fnRecorder{
		Params: MoqTable_starGenType_PCToFunc_params{
			Pc: pc,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTable_starGenType_PCToFunc_fnRecorder) Any() *MoqTable_starGenType_PCToFunc_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PCToFunc(r.Params))
		return nil
	}
	return &MoqTable_starGenType_PCToFunc_anyParams{Recorder: r}
}

func (a *MoqTable_starGenType_PCToFunc_anyParams) Pc() *MoqTable_starGenType_PCToFunc_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqTable_starGenType_PCToFunc_fnRecorder) Seq() *MoqTable_starGenType_PCToFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PCToFunc(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTable_starGenType_PCToFunc_fnRecorder) NoSeq() *MoqTable_starGenType_PCToFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PCToFunc(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTable_starGenType_PCToFunc_fnRecorder) ReturnResults(result1 *gosym.Func) *MoqTable_starGenType_PCToFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *gosym.Func
		}
		Sequence   uint32
		DoFn       MoqTable_starGenType_PCToFunc_doFn
		DoReturnFn MoqTable_starGenType_PCToFunc_doReturnFn
	}{
		Values: &struct {
			Result1 *gosym.Func
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTable_starGenType_PCToFunc_fnRecorder) AndDo(fn MoqTable_starGenType_PCToFunc_doFn) *MoqTable_starGenType_PCToFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTable_starGenType_PCToFunc_fnRecorder) DoReturnResults(fn MoqTable_starGenType_PCToFunc_doReturnFn) *MoqTable_starGenType_PCToFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *gosym.Func
		}
		Sequence   uint32
		DoFn       MoqTable_starGenType_PCToFunc_doFn
		DoReturnFn MoqTable_starGenType_PCToFunc_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTable_starGenType_PCToFunc_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTable_starGenType_PCToFunc_resultsByParams
	for n, res := range r.Moq.ResultsByParams_PCToFunc {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTable_starGenType_PCToFunc_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTable_starGenType_PCToFunc_paramsKey]*MoqTable_starGenType_PCToFunc_results{},
		}
		r.Moq.ResultsByParams_PCToFunc = append(r.Moq.ResultsByParams_PCToFunc, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_PCToFunc) {
			copy(r.Moq.ResultsByParams_PCToFunc[insertAt+1:], r.Moq.ResultsByParams_PCToFunc[insertAt:0])
			r.Moq.ResultsByParams_PCToFunc[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_PCToFunc(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTable_starGenType_PCToFunc_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTable_starGenType_PCToFunc_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTable_starGenType_PCToFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *gosym.Func
				}
				Sequence   uint32
				DoFn       MoqTable_starGenType_PCToFunc_doFn
				DoReturnFn MoqTable_starGenType_PCToFunc_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTable_starGenType) PrettyParams_PCToFunc(params MoqTable_starGenType_PCToFunc_params) string {
	return fmt.Sprintf("PCToFunc(%#v)", params.Pc)
}

func (m *MoqTable_starGenType) ParamsKey_PCToFunc(params MoqTable_starGenType_PCToFunc_params, anyParams uint64) MoqTable_starGenType_PCToFunc_paramsKey {
	m.Scene.T.Helper()
	var pcUsed uint64
	var pcUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.PCToFunc.Pc == moq.ParamIndexByValue {
			pcUsed = params.Pc
		} else {
			pcUsedHash = hash.DeepHash(params.Pc)
		}
	}
	return MoqTable_starGenType_PCToFunc_paramsKey{
		Params: struct{ Pc uint64 }{
			Pc: pcUsed,
		},
		Hashes: struct{ Pc hash.Hash }{
			Pc: pcUsedHash,
		},
	}
}

func (m *MoqTable_starGenType_recorder) PCToLine(pc uint64) *MoqTable_starGenType_PCToLine_fnRecorder {
	return &MoqTable_starGenType_PCToLine_fnRecorder{
		Params: MoqTable_starGenType_PCToLine_params{
			Pc: pc,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTable_starGenType_PCToLine_fnRecorder) Any() *MoqTable_starGenType_PCToLine_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PCToLine(r.Params))
		return nil
	}
	return &MoqTable_starGenType_PCToLine_anyParams{Recorder: r}
}

func (a *MoqTable_starGenType_PCToLine_anyParams) Pc() *MoqTable_starGenType_PCToLine_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqTable_starGenType_PCToLine_fnRecorder) Seq() *MoqTable_starGenType_PCToLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PCToLine(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTable_starGenType_PCToLine_fnRecorder) NoSeq() *MoqTable_starGenType_PCToLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PCToLine(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTable_starGenType_PCToLine_fnRecorder) ReturnResults(file string, line int, fn *gosym.Func) *MoqTable_starGenType_PCToLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			File string
			Line int
			Fn   *gosym.Func
		}
		Sequence   uint32
		DoFn       MoqTable_starGenType_PCToLine_doFn
		DoReturnFn MoqTable_starGenType_PCToLine_doReturnFn
	}{
		Values: &struct {
			File string
			Line int
			Fn   *gosym.Func
		}{
			File: file,
			Line: line,
			Fn:   fn,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTable_starGenType_PCToLine_fnRecorder) AndDo(fn MoqTable_starGenType_PCToLine_doFn) *MoqTable_starGenType_PCToLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTable_starGenType_PCToLine_fnRecorder) DoReturnResults(fn MoqTable_starGenType_PCToLine_doReturnFn) *MoqTable_starGenType_PCToLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			File string
			Line int
			Fn   *gosym.Func
		}
		Sequence   uint32
		DoFn       MoqTable_starGenType_PCToLine_doFn
		DoReturnFn MoqTable_starGenType_PCToLine_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTable_starGenType_PCToLine_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTable_starGenType_PCToLine_resultsByParams
	for n, res := range r.Moq.ResultsByParams_PCToLine {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTable_starGenType_PCToLine_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTable_starGenType_PCToLine_paramsKey]*MoqTable_starGenType_PCToLine_results{},
		}
		r.Moq.ResultsByParams_PCToLine = append(r.Moq.ResultsByParams_PCToLine, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_PCToLine) {
			copy(r.Moq.ResultsByParams_PCToLine[insertAt+1:], r.Moq.ResultsByParams_PCToLine[insertAt:0])
			r.Moq.ResultsByParams_PCToLine[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_PCToLine(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTable_starGenType_PCToLine_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTable_starGenType_PCToLine_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTable_starGenType_PCToLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					File string
					Line int
					Fn   *gosym.Func
				}
				Sequence   uint32
				DoFn       MoqTable_starGenType_PCToLine_doFn
				DoReturnFn MoqTable_starGenType_PCToLine_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTable_starGenType) PrettyParams_PCToLine(params MoqTable_starGenType_PCToLine_params) string {
	return fmt.Sprintf("PCToLine(%#v)", params.Pc)
}

func (m *MoqTable_starGenType) ParamsKey_PCToLine(params MoqTable_starGenType_PCToLine_params, anyParams uint64) MoqTable_starGenType_PCToLine_paramsKey {
	m.Scene.T.Helper()
	var pcUsed uint64
	var pcUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.PCToLine.Pc == moq.ParamIndexByValue {
			pcUsed = params.Pc
		} else {
			pcUsedHash = hash.DeepHash(params.Pc)
		}
	}
	return MoqTable_starGenType_PCToLine_paramsKey{
		Params: struct{ Pc uint64 }{
			Pc: pcUsed,
		},
		Hashes: struct{ Pc hash.Hash }{
			Pc: pcUsedHash,
		},
	}
}

func (m *MoqTable_starGenType_recorder) LineToPC(file string, line int) *MoqTable_starGenType_LineToPC_fnRecorder {
	return &MoqTable_starGenType_LineToPC_fnRecorder{
		Params: MoqTable_starGenType_LineToPC_params{
			File: file,
			Line: line,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTable_starGenType_LineToPC_fnRecorder) Any() *MoqTable_starGenType_LineToPC_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LineToPC(r.Params))
		return nil
	}
	return &MoqTable_starGenType_LineToPC_anyParams{Recorder: r}
}

func (a *MoqTable_starGenType_LineToPC_anyParams) File() *MoqTable_starGenType_LineToPC_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqTable_starGenType_LineToPC_anyParams) Line() *MoqTable_starGenType_LineToPC_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqTable_starGenType_LineToPC_fnRecorder) Seq() *MoqTable_starGenType_LineToPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LineToPC(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTable_starGenType_LineToPC_fnRecorder) NoSeq() *MoqTable_starGenType_LineToPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LineToPC(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTable_starGenType_LineToPC_fnRecorder) ReturnResults(pc uint64, fn *gosym.Func, err error) *MoqTable_starGenType_LineToPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Pc  uint64
			Fn  *gosym.Func
			Err error
		}
		Sequence   uint32
		DoFn       MoqTable_starGenType_LineToPC_doFn
		DoReturnFn MoqTable_starGenType_LineToPC_doReturnFn
	}{
		Values: &struct {
			Pc  uint64
			Fn  *gosym.Func
			Err error
		}{
			Pc:  pc,
			Fn:  fn,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTable_starGenType_LineToPC_fnRecorder) AndDo(fn MoqTable_starGenType_LineToPC_doFn) *MoqTable_starGenType_LineToPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTable_starGenType_LineToPC_fnRecorder) DoReturnResults(fn MoqTable_starGenType_LineToPC_doReturnFn) *MoqTable_starGenType_LineToPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Pc  uint64
			Fn  *gosym.Func
			Err error
		}
		Sequence   uint32
		DoFn       MoqTable_starGenType_LineToPC_doFn
		DoReturnFn MoqTable_starGenType_LineToPC_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTable_starGenType_LineToPC_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTable_starGenType_LineToPC_resultsByParams
	for n, res := range r.Moq.ResultsByParams_LineToPC {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTable_starGenType_LineToPC_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTable_starGenType_LineToPC_paramsKey]*MoqTable_starGenType_LineToPC_results{},
		}
		r.Moq.ResultsByParams_LineToPC = append(r.Moq.ResultsByParams_LineToPC, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_LineToPC) {
			copy(r.Moq.ResultsByParams_LineToPC[insertAt+1:], r.Moq.ResultsByParams_LineToPC[insertAt:0])
			r.Moq.ResultsByParams_LineToPC[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_LineToPC(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTable_starGenType_LineToPC_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTable_starGenType_LineToPC_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTable_starGenType_LineToPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Pc  uint64
					Fn  *gosym.Func
					Err error
				}
				Sequence   uint32
				DoFn       MoqTable_starGenType_LineToPC_doFn
				DoReturnFn MoqTable_starGenType_LineToPC_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTable_starGenType) PrettyParams_LineToPC(params MoqTable_starGenType_LineToPC_params) string {
	return fmt.Sprintf("LineToPC(%#v, %#v)", params.File, params.Line)
}

func (m *MoqTable_starGenType) ParamsKey_LineToPC(params MoqTable_starGenType_LineToPC_params, anyParams uint64) MoqTable_starGenType_LineToPC_paramsKey {
	m.Scene.T.Helper()
	var fileUsed string
	var fileUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.LineToPC.File == moq.ParamIndexByValue {
			fileUsed = params.File
		} else {
			fileUsedHash = hash.DeepHash(params.File)
		}
	}
	var lineUsed int
	var lineUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.LineToPC.Line == moq.ParamIndexByValue {
			lineUsed = params.Line
		} else {
			lineUsedHash = hash.DeepHash(params.Line)
		}
	}
	return MoqTable_starGenType_LineToPC_paramsKey{
		Params: struct {
			File string
			Line int
		}{
			File: fileUsed,
			Line: lineUsed,
		},
		Hashes: struct {
			File hash.Hash
			Line hash.Hash
		}{
			File: fileUsedHash,
			Line: lineUsedHash,
		},
	}
}

func (m *MoqTable_starGenType_recorder) LookupSym(name string) *MoqTable_starGenType_LookupSym_fnRecorder {
	return &MoqTable_starGenType_LookupSym_fnRecorder{
		Params: MoqTable_starGenType_LookupSym_params{
			Name: name,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTable_starGenType_LookupSym_fnRecorder) Any() *MoqTable_starGenType_LookupSym_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LookupSym(r.Params))
		return nil
	}
	return &MoqTable_starGenType_LookupSym_anyParams{Recorder: r}
}

func (a *MoqTable_starGenType_LookupSym_anyParams) Name() *MoqTable_starGenType_LookupSym_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqTable_starGenType_LookupSym_fnRecorder) Seq() *MoqTable_starGenType_LookupSym_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LookupSym(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTable_starGenType_LookupSym_fnRecorder) NoSeq() *MoqTable_starGenType_LookupSym_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LookupSym(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTable_starGenType_LookupSym_fnRecorder) ReturnResults(result1 *gosym.Sym) *MoqTable_starGenType_LookupSym_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *gosym.Sym
		}
		Sequence   uint32
		DoFn       MoqTable_starGenType_LookupSym_doFn
		DoReturnFn MoqTable_starGenType_LookupSym_doReturnFn
	}{
		Values: &struct {
			Result1 *gosym.Sym
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTable_starGenType_LookupSym_fnRecorder) AndDo(fn MoqTable_starGenType_LookupSym_doFn) *MoqTable_starGenType_LookupSym_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTable_starGenType_LookupSym_fnRecorder) DoReturnResults(fn MoqTable_starGenType_LookupSym_doReturnFn) *MoqTable_starGenType_LookupSym_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *gosym.Sym
		}
		Sequence   uint32
		DoFn       MoqTable_starGenType_LookupSym_doFn
		DoReturnFn MoqTable_starGenType_LookupSym_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTable_starGenType_LookupSym_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTable_starGenType_LookupSym_resultsByParams
	for n, res := range r.Moq.ResultsByParams_LookupSym {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTable_starGenType_LookupSym_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTable_starGenType_LookupSym_paramsKey]*MoqTable_starGenType_LookupSym_results{},
		}
		r.Moq.ResultsByParams_LookupSym = append(r.Moq.ResultsByParams_LookupSym, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_LookupSym) {
			copy(r.Moq.ResultsByParams_LookupSym[insertAt+1:], r.Moq.ResultsByParams_LookupSym[insertAt:0])
			r.Moq.ResultsByParams_LookupSym[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_LookupSym(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTable_starGenType_LookupSym_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTable_starGenType_LookupSym_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTable_starGenType_LookupSym_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *gosym.Sym
				}
				Sequence   uint32
				DoFn       MoqTable_starGenType_LookupSym_doFn
				DoReturnFn MoqTable_starGenType_LookupSym_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTable_starGenType) PrettyParams_LookupSym(params MoqTable_starGenType_LookupSym_params) string {
	return fmt.Sprintf("LookupSym(%#v)", params.Name)
}

func (m *MoqTable_starGenType) ParamsKey_LookupSym(params MoqTable_starGenType_LookupSym_params, anyParams uint64) MoqTable_starGenType_LookupSym_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.LookupSym.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	return MoqTable_starGenType_LookupSym_paramsKey{
		Params: struct{ Name string }{
			Name: nameUsed,
		},
		Hashes: struct{ Name hash.Hash }{
			Name: nameUsedHash,
		},
	}
}

func (m *MoqTable_starGenType_recorder) LookupFunc(name string) *MoqTable_starGenType_LookupFunc_fnRecorder {
	return &MoqTable_starGenType_LookupFunc_fnRecorder{
		Params: MoqTable_starGenType_LookupFunc_params{
			Name: name,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTable_starGenType_LookupFunc_fnRecorder) Any() *MoqTable_starGenType_LookupFunc_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LookupFunc(r.Params))
		return nil
	}
	return &MoqTable_starGenType_LookupFunc_anyParams{Recorder: r}
}

func (a *MoqTable_starGenType_LookupFunc_anyParams) Name() *MoqTable_starGenType_LookupFunc_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqTable_starGenType_LookupFunc_fnRecorder) Seq() *MoqTable_starGenType_LookupFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LookupFunc(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTable_starGenType_LookupFunc_fnRecorder) NoSeq() *MoqTable_starGenType_LookupFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LookupFunc(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTable_starGenType_LookupFunc_fnRecorder) ReturnResults(result1 *gosym.Func) *MoqTable_starGenType_LookupFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *gosym.Func
		}
		Sequence   uint32
		DoFn       MoqTable_starGenType_LookupFunc_doFn
		DoReturnFn MoqTable_starGenType_LookupFunc_doReturnFn
	}{
		Values: &struct {
			Result1 *gosym.Func
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTable_starGenType_LookupFunc_fnRecorder) AndDo(fn MoqTable_starGenType_LookupFunc_doFn) *MoqTable_starGenType_LookupFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTable_starGenType_LookupFunc_fnRecorder) DoReturnResults(fn MoqTable_starGenType_LookupFunc_doReturnFn) *MoqTable_starGenType_LookupFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *gosym.Func
		}
		Sequence   uint32
		DoFn       MoqTable_starGenType_LookupFunc_doFn
		DoReturnFn MoqTable_starGenType_LookupFunc_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTable_starGenType_LookupFunc_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTable_starGenType_LookupFunc_resultsByParams
	for n, res := range r.Moq.ResultsByParams_LookupFunc {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTable_starGenType_LookupFunc_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTable_starGenType_LookupFunc_paramsKey]*MoqTable_starGenType_LookupFunc_results{},
		}
		r.Moq.ResultsByParams_LookupFunc = append(r.Moq.ResultsByParams_LookupFunc, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_LookupFunc) {
			copy(r.Moq.ResultsByParams_LookupFunc[insertAt+1:], r.Moq.ResultsByParams_LookupFunc[insertAt:0])
			r.Moq.ResultsByParams_LookupFunc[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_LookupFunc(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTable_starGenType_LookupFunc_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTable_starGenType_LookupFunc_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTable_starGenType_LookupFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *gosym.Func
				}
				Sequence   uint32
				DoFn       MoqTable_starGenType_LookupFunc_doFn
				DoReturnFn MoqTable_starGenType_LookupFunc_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTable_starGenType) PrettyParams_LookupFunc(params MoqTable_starGenType_LookupFunc_params) string {
	return fmt.Sprintf("LookupFunc(%#v)", params.Name)
}

func (m *MoqTable_starGenType) ParamsKey_LookupFunc(params MoqTable_starGenType_LookupFunc_params, anyParams uint64) MoqTable_starGenType_LookupFunc_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.LookupFunc.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	return MoqTable_starGenType_LookupFunc_paramsKey{
		Params: struct{ Name string }{
			Name: nameUsed,
		},
		Hashes: struct{ Name hash.Hash }{
			Name: nameUsedHash,
		},
	}
}

func (m *MoqTable_starGenType_recorder) SymByAddr(addr uint64) *MoqTable_starGenType_SymByAddr_fnRecorder {
	return &MoqTable_starGenType_SymByAddr_fnRecorder{
		Params: MoqTable_starGenType_SymByAddr_params{
			Addr: addr,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTable_starGenType_SymByAddr_fnRecorder) Any() *MoqTable_starGenType_SymByAddr_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SymByAddr(r.Params))
		return nil
	}
	return &MoqTable_starGenType_SymByAddr_anyParams{Recorder: r}
}

func (a *MoqTable_starGenType_SymByAddr_anyParams) Addr() *MoqTable_starGenType_SymByAddr_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqTable_starGenType_SymByAddr_fnRecorder) Seq() *MoqTable_starGenType_SymByAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SymByAddr(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTable_starGenType_SymByAddr_fnRecorder) NoSeq() *MoqTable_starGenType_SymByAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SymByAddr(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTable_starGenType_SymByAddr_fnRecorder) ReturnResults(result1 *gosym.Sym) *MoqTable_starGenType_SymByAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *gosym.Sym
		}
		Sequence   uint32
		DoFn       MoqTable_starGenType_SymByAddr_doFn
		DoReturnFn MoqTable_starGenType_SymByAddr_doReturnFn
	}{
		Values: &struct {
			Result1 *gosym.Sym
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTable_starGenType_SymByAddr_fnRecorder) AndDo(fn MoqTable_starGenType_SymByAddr_doFn) *MoqTable_starGenType_SymByAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTable_starGenType_SymByAddr_fnRecorder) DoReturnResults(fn MoqTable_starGenType_SymByAddr_doReturnFn) *MoqTable_starGenType_SymByAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *gosym.Sym
		}
		Sequence   uint32
		DoFn       MoqTable_starGenType_SymByAddr_doFn
		DoReturnFn MoqTable_starGenType_SymByAddr_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTable_starGenType_SymByAddr_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTable_starGenType_SymByAddr_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SymByAddr {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTable_starGenType_SymByAddr_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTable_starGenType_SymByAddr_paramsKey]*MoqTable_starGenType_SymByAddr_results{},
		}
		r.Moq.ResultsByParams_SymByAddr = append(r.Moq.ResultsByParams_SymByAddr, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SymByAddr) {
			copy(r.Moq.ResultsByParams_SymByAddr[insertAt+1:], r.Moq.ResultsByParams_SymByAddr[insertAt:0])
			r.Moq.ResultsByParams_SymByAddr[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SymByAddr(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTable_starGenType_SymByAddr_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTable_starGenType_SymByAddr_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTable_starGenType_SymByAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *gosym.Sym
				}
				Sequence   uint32
				DoFn       MoqTable_starGenType_SymByAddr_doFn
				DoReturnFn MoqTable_starGenType_SymByAddr_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTable_starGenType) PrettyParams_SymByAddr(params MoqTable_starGenType_SymByAddr_params) string {
	return fmt.Sprintf("SymByAddr(%#v)", params.Addr)
}

func (m *MoqTable_starGenType) ParamsKey_SymByAddr(params MoqTable_starGenType_SymByAddr_params, anyParams uint64) MoqTable_starGenType_SymByAddr_paramsKey {
	m.Scene.T.Helper()
	var addrUsed uint64
	var addrUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SymByAddr.Addr == moq.ParamIndexByValue {
			addrUsed = params.Addr
		} else {
			addrUsedHash = hash.DeepHash(params.Addr)
		}
	}
	return MoqTable_starGenType_SymByAddr_paramsKey{
		Params: struct{ Addr uint64 }{
			Addr: addrUsed,
		},
		Hashes: struct{ Addr hash.Hash }{
			Addr: addrUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqTable_starGenType) Reset() {
	m.ResultsByParams_PCToFunc = nil
	m.ResultsByParams_PCToLine = nil
	m.ResultsByParams_LineToPC = nil
	m.ResultsByParams_LookupSym = nil
	m.ResultsByParams_LookupFunc = nil
	m.ResultsByParams_SymByAddr = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqTable_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_PCToFunc {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_PCToFunc(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_PCToLine {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_PCToLine(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_LineToPC {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_LineToPC(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_LookupSym {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_LookupSym(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_LookupFunc {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_LookupFunc(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SymByAddr {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SymByAddr(results.Params))
			}
		}
	}
}
