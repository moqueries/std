// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package gosym

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that gosym.Sym_starGenType is mocked
// completely
var _ Sym_starGenType = (*MoqSym_starGenType_mock)(nil)

// Sym_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Sym_starGenType interface {
	Static() bool
	PackageName() string
	ReceiverName() string
	BaseName() string
}

// MoqSym_starGenType holds the state of a moq of the Sym_starGenType type
type MoqSym_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqSym_starGenType_mock

	ResultsByParams_Static       []MoqSym_starGenType_Static_resultsByParams
	ResultsByParams_PackageName  []MoqSym_starGenType_PackageName_resultsByParams
	ResultsByParams_ReceiverName []MoqSym_starGenType_ReceiverName_resultsByParams
	ResultsByParams_BaseName     []MoqSym_starGenType_BaseName_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Static       struct{}
			PackageName  struct{}
			ReceiverName struct{}
			BaseName     struct{}
		}
	}
}

// MoqSym_starGenType_mock isolates the mock interface of the Sym_starGenType
// type
type MoqSym_starGenType_mock struct {
	Moq *MoqSym_starGenType
}

// MoqSym_starGenType_recorder isolates the recorder interface of the
// Sym_starGenType type
type MoqSym_starGenType_recorder struct {
	Moq *MoqSym_starGenType
}

// MoqSym_starGenType_Static_params holds the params of the Sym_starGenType
// type
type MoqSym_starGenType_Static_params struct{}

// MoqSym_starGenType_Static_paramsKey holds the map key params of the
// Sym_starGenType type
type MoqSym_starGenType_Static_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSym_starGenType_Static_resultsByParams contains the results for a given
// set of parameters for the Sym_starGenType type
type MoqSym_starGenType_Static_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSym_starGenType_Static_paramsKey]*MoqSym_starGenType_Static_results
}

// MoqSym_starGenType_Static_doFn defines the type of function needed when
// calling AndDo for the Sym_starGenType type
type MoqSym_starGenType_Static_doFn func()

// MoqSym_starGenType_Static_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Sym_starGenType type
type MoqSym_starGenType_Static_doReturnFn func() bool

// MoqSym_starGenType_Static_results holds the results of the Sym_starGenType
// type
type MoqSym_starGenType_Static_results struct {
	Params  MoqSym_starGenType_Static_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqSym_starGenType_Static_doFn
		DoReturnFn MoqSym_starGenType_Static_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSym_starGenType_Static_fnRecorder routes recorded function calls to the
// MoqSym_starGenType moq
type MoqSym_starGenType_Static_fnRecorder struct {
	Params    MoqSym_starGenType_Static_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSym_starGenType_Static_results
	Moq       *MoqSym_starGenType
}

// MoqSym_starGenType_Static_anyParams isolates the any params functions of the
// Sym_starGenType type
type MoqSym_starGenType_Static_anyParams struct {
	Recorder *MoqSym_starGenType_Static_fnRecorder
}

// MoqSym_starGenType_PackageName_params holds the params of the
// Sym_starGenType type
type MoqSym_starGenType_PackageName_params struct{}

// MoqSym_starGenType_PackageName_paramsKey holds the map key params of the
// Sym_starGenType type
type MoqSym_starGenType_PackageName_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSym_starGenType_PackageName_resultsByParams contains the results for a
// given set of parameters for the Sym_starGenType type
type MoqSym_starGenType_PackageName_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSym_starGenType_PackageName_paramsKey]*MoqSym_starGenType_PackageName_results
}

// MoqSym_starGenType_PackageName_doFn defines the type of function needed when
// calling AndDo for the Sym_starGenType type
type MoqSym_starGenType_PackageName_doFn func()

// MoqSym_starGenType_PackageName_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Sym_starGenType type
type MoqSym_starGenType_PackageName_doReturnFn func() string

// MoqSym_starGenType_PackageName_results holds the results of the
// Sym_starGenType type
type MoqSym_starGenType_PackageName_results struct {
	Params  MoqSym_starGenType_PackageName_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqSym_starGenType_PackageName_doFn
		DoReturnFn MoqSym_starGenType_PackageName_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSym_starGenType_PackageName_fnRecorder routes recorded function calls to
// the MoqSym_starGenType moq
type MoqSym_starGenType_PackageName_fnRecorder struct {
	Params    MoqSym_starGenType_PackageName_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSym_starGenType_PackageName_results
	Moq       *MoqSym_starGenType
}

// MoqSym_starGenType_PackageName_anyParams isolates the any params functions
// of the Sym_starGenType type
type MoqSym_starGenType_PackageName_anyParams struct {
	Recorder *MoqSym_starGenType_PackageName_fnRecorder
}

// MoqSym_starGenType_ReceiverName_params holds the params of the
// Sym_starGenType type
type MoqSym_starGenType_ReceiverName_params struct{}

// MoqSym_starGenType_ReceiverName_paramsKey holds the map key params of the
// Sym_starGenType type
type MoqSym_starGenType_ReceiverName_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSym_starGenType_ReceiverName_resultsByParams contains the results for a
// given set of parameters for the Sym_starGenType type
type MoqSym_starGenType_ReceiverName_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSym_starGenType_ReceiverName_paramsKey]*MoqSym_starGenType_ReceiverName_results
}

// MoqSym_starGenType_ReceiverName_doFn defines the type of function needed
// when calling AndDo for the Sym_starGenType type
type MoqSym_starGenType_ReceiverName_doFn func()

// MoqSym_starGenType_ReceiverName_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Sym_starGenType type
type MoqSym_starGenType_ReceiverName_doReturnFn func() string

// MoqSym_starGenType_ReceiverName_results holds the results of the
// Sym_starGenType type
type MoqSym_starGenType_ReceiverName_results struct {
	Params  MoqSym_starGenType_ReceiverName_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqSym_starGenType_ReceiverName_doFn
		DoReturnFn MoqSym_starGenType_ReceiverName_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSym_starGenType_ReceiverName_fnRecorder routes recorded function calls to
// the MoqSym_starGenType moq
type MoqSym_starGenType_ReceiverName_fnRecorder struct {
	Params    MoqSym_starGenType_ReceiverName_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSym_starGenType_ReceiverName_results
	Moq       *MoqSym_starGenType
}

// MoqSym_starGenType_ReceiverName_anyParams isolates the any params functions
// of the Sym_starGenType type
type MoqSym_starGenType_ReceiverName_anyParams struct {
	Recorder *MoqSym_starGenType_ReceiverName_fnRecorder
}

// MoqSym_starGenType_BaseName_params holds the params of the Sym_starGenType
// type
type MoqSym_starGenType_BaseName_params struct{}

// MoqSym_starGenType_BaseName_paramsKey holds the map key params of the
// Sym_starGenType type
type MoqSym_starGenType_BaseName_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSym_starGenType_BaseName_resultsByParams contains the results for a given
// set of parameters for the Sym_starGenType type
type MoqSym_starGenType_BaseName_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSym_starGenType_BaseName_paramsKey]*MoqSym_starGenType_BaseName_results
}

// MoqSym_starGenType_BaseName_doFn defines the type of function needed when
// calling AndDo for the Sym_starGenType type
type MoqSym_starGenType_BaseName_doFn func()

// MoqSym_starGenType_BaseName_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Sym_starGenType type
type MoqSym_starGenType_BaseName_doReturnFn func() string

// MoqSym_starGenType_BaseName_results holds the results of the Sym_starGenType
// type
type MoqSym_starGenType_BaseName_results struct {
	Params  MoqSym_starGenType_BaseName_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqSym_starGenType_BaseName_doFn
		DoReturnFn MoqSym_starGenType_BaseName_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSym_starGenType_BaseName_fnRecorder routes recorded function calls to the
// MoqSym_starGenType moq
type MoqSym_starGenType_BaseName_fnRecorder struct {
	Params    MoqSym_starGenType_BaseName_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSym_starGenType_BaseName_results
	Moq       *MoqSym_starGenType
}

// MoqSym_starGenType_BaseName_anyParams isolates the any params functions of
// the Sym_starGenType type
type MoqSym_starGenType_BaseName_anyParams struct {
	Recorder *MoqSym_starGenType_BaseName_fnRecorder
}

// NewMoqSym_starGenType creates a new moq of the Sym_starGenType type
func NewMoqSym_starGenType(scene *moq.Scene, config *moq.Config) *MoqSym_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqSym_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqSym_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Static       struct{}
				PackageName  struct{}
				ReceiverName struct{}
				BaseName     struct{}
			}
		}{ParameterIndexing: struct {
			Static       struct{}
			PackageName  struct{}
			ReceiverName struct{}
			BaseName     struct{}
		}{
			Static:       struct{}{},
			PackageName:  struct{}{},
			ReceiverName: struct{}{},
			BaseName:     struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Sym_starGenType type
func (m *MoqSym_starGenType) Mock() *MoqSym_starGenType_mock { return m.Moq }

func (m *MoqSym_starGenType_mock) Static() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqSym_starGenType_Static_params{}
	var results *MoqSym_starGenType_Static_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Static {
		paramsKey := m.Moq.ParamsKey_Static(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Static(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Static(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Static(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqSym_starGenType_mock) PackageName() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqSym_starGenType_PackageName_params{}
	var results *MoqSym_starGenType_PackageName_results
	for _, resultsByParams := range m.Moq.ResultsByParams_PackageName {
		paramsKey := m.Moq.ParamsKey_PackageName(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_PackageName(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_PackageName(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_PackageName(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqSym_starGenType_mock) ReceiverName() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqSym_starGenType_ReceiverName_params{}
	var results *MoqSym_starGenType_ReceiverName_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReceiverName {
		paramsKey := m.Moq.ParamsKey_ReceiverName(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReceiverName(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReceiverName(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReceiverName(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqSym_starGenType_mock) BaseName() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqSym_starGenType_BaseName_params{}
	var results *MoqSym_starGenType_BaseName_results
	for _, resultsByParams := range m.Moq.ResultsByParams_BaseName {
		paramsKey := m.Moq.ParamsKey_BaseName(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_BaseName(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_BaseName(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_BaseName(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Sym_starGenType type
func (m *MoqSym_starGenType) OnCall() *MoqSym_starGenType_recorder {
	return &MoqSym_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqSym_starGenType_recorder) Static() *MoqSym_starGenType_Static_fnRecorder {
	return &MoqSym_starGenType_Static_fnRecorder{
		Params:   MoqSym_starGenType_Static_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSym_starGenType_Static_fnRecorder) Any() *MoqSym_starGenType_Static_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Static(r.Params))
		return nil
	}
	return &MoqSym_starGenType_Static_anyParams{Recorder: r}
}

func (r *MoqSym_starGenType_Static_fnRecorder) Seq() *MoqSym_starGenType_Static_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Static(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSym_starGenType_Static_fnRecorder) NoSeq() *MoqSym_starGenType_Static_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Static(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSym_starGenType_Static_fnRecorder) ReturnResults(result1 bool) *MoqSym_starGenType_Static_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqSym_starGenType_Static_doFn
		DoReturnFn MoqSym_starGenType_Static_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSym_starGenType_Static_fnRecorder) AndDo(fn MoqSym_starGenType_Static_doFn) *MoqSym_starGenType_Static_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSym_starGenType_Static_fnRecorder) DoReturnResults(fn MoqSym_starGenType_Static_doReturnFn) *MoqSym_starGenType_Static_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqSym_starGenType_Static_doFn
		DoReturnFn MoqSym_starGenType_Static_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSym_starGenType_Static_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSym_starGenType_Static_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Static {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSym_starGenType_Static_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSym_starGenType_Static_paramsKey]*MoqSym_starGenType_Static_results{},
		}
		r.Moq.ResultsByParams_Static = append(r.Moq.ResultsByParams_Static, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Static) {
			copy(r.Moq.ResultsByParams_Static[insertAt+1:], r.Moq.ResultsByParams_Static[insertAt:0])
			r.Moq.ResultsByParams_Static[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Static(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSym_starGenType_Static_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSym_starGenType_Static_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSym_starGenType_Static_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqSym_starGenType_Static_doFn
				DoReturnFn MoqSym_starGenType_Static_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSym_starGenType) PrettyParams_Static(params MoqSym_starGenType_Static_params) string {
	return fmt.Sprintf("Static()")
}

func (m *MoqSym_starGenType) ParamsKey_Static(params MoqSym_starGenType_Static_params, anyParams uint64) MoqSym_starGenType_Static_paramsKey {
	m.Scene.T.Helper()
	return MoqSym_starGenType_Static_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqSym_starGenType_recorder) PackageName() *MoqSym_starGenType_PackageName_fnRecorder {
	return &MoqSym_starGenType_PackageName_fnRecorder{
		Params:   MoqSym_starGenType_PackageName_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSym_starGenType_PackageName_fnRecorder) Any() *MoqSym_starGenType_PackageName_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PackageName(r.Params))
		return nil
	}
	return &MoqSym_starGenType_PackageName_anyParams{Recorder: r}
}

func (r *MoqSym_starGenType_PackageName_fnRecorder) Seq() *MoqSym_starGenType_PackageName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PackageName(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSym_starGenType_PackageName_fnRecorder) NoSeq() *MoqSym_starGenType_PackageName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PackageName(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSym_starGenType_PackageName_fnRecorder) ReturnResults(result1 string) *MoqSym_starGenType_PackageName_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqSym_starGenType_PackageName_doFn
		DoReturnFn MoqSym_starGenType_PackageName_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSym_starGenType_PackageName_fnRecorder) AndDo(fn MoqSym_starGenType_PackageName_doFn) *MoqSym_starGenType_PackageName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSym_starGenType_PackageName_fnRecorder) DoReturnResults(fn MoqSym_starGenType_PackageName_doReturnFn) *MoqSym_starGenType_PackageName_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqSym_starGenType_PackageName_doFn
		DoReturnFn MoqSym_starGenType_PackageName_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSym_starGenType_PackageName_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSym_starGenType_PackageName_resultsByParams
	for n, res := range r.Moq.ResultsByParams_PackageName {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSym_starGenType_PackageName_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSym_starGenType_PackageName_paramsKey]*MoqSym_starGenType_PackageName_results{},
		}
		r.Moq.ResultsByParams_PackageName = append(r.Moq.ResultsByParams_PackageName, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_PackageName) {
			copy(r.Moq.ResultsByParams_PackageName[insertAt+1:], r.Moq.ResultsByParams_PackageName[insertAt:0])
			r.Moq.ResultsByParams_PackageName[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_PackageName(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSym_starGenType_PackageName_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSym_starGenType_PackageName_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSym_starGenType_PackageName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqSym_starGenType_PackageName_doFn
				DoReturnFn MoqSym_starGenType_PackageName_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSym_starGenType) PrettyParams_PackageName(params MoqSym_starGenType_PackageName_params) string {
	return fmt.Sprintf("PackageName()")
}

func (m *MoqSym_starGenType) ParamsKey_PackageName(params MoqSym_starGenType_PackageName_params, anyParams uint64) MoqSym_starGenType_PackageName_paramsKey {
	m.Scene.T.Helper()
	return MoqSym_starGenType_PackageName_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqSym_starGenType_recorder) ReceiverName() *MoqSym_starGenType_ReceiverName_fnRecorder {
	return &MoqSym_starGenType_ReceiverName_fnRecorder{
		Params:   MoqSym_starGenType_ReceiverName_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSym_starGenType_ReceiverName_fnRecorder) Any() *MoqSym_starGenType_ReceiverName_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReceiverName(r.Params))
		return nil
	}
	return &MoqSym_starGenType_ReceiverName_anyParams{Recorder: r}
}

func (r *MoqSym_starGenType_ReceiverName_fnRecorder) Seq() *MoqSym_starGenType_ReceiverName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReceiverName(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSym_starGenType_ReceiverName_fnRecorder) NoSeq() *MoqSym_starGenType_ReceiverName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReceiverName(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSym_starGenType_ReceiverName_fnRecorder) ReturnResults(result1 string) *MoqSym_starGenType_ReceiverName_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqSym_starGenType_ReceiverName_doFn
		DoReturnFn MoqSym_starGenType_ReceiverName_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSym_starGenType_ReceiverName_fnRecorder) AndDo(fn MoqSym_starGenType_ReceiverName_doFn) *MoqSym_starGenType_ReceiverName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSym_starGenType_ReceiverName_fnRecorder) DoReturnResults(fn MoqSym_starGenType_ReceiverName_doReturnFn) *MoqSym_starGenType_ReceiverName_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqSym_starGenType_ReceiverName_doFn
		DoReturnFn MoqSym_starGenType_ReceiverName_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSym_starGenType_ReceiverName_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSym_starGenType_ReceiverName_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReceiverName {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSym_starGenType_ReceiverName_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSym_starGenType_ReceiverName_paramsKey]*MoqSym_starGenType_ReceiverName_results{},
		}
		r.Moq.ResultsByParams_ReceiverName = append(r.Moq.ResultsByParams_ReceiverName, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReceiverName) {
			copy(r.Moq.ResultsByParams_ReceiverName[insertAt+1:], r.Moq.ResultsByParams_ReceiverName[insertAt:0])
			r.Moq.ResultsByParams_ReceiverName[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReceiverName(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSym_starGenType_ReceiverName_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSym_starGenType_ReceiverName_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSym_starGenType_ReceiverName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqSym_starGenType_ReceiverName_doFn
				DoReturnFn MoqSym_starGenType_ReceiverName_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSym_starGenType) PrettyParams_ReceiverName(params MoqSym_starGenType_ReceiverName_params) string {
	return fmt.Sprintf("ReceiverName()")
}

func (m *MoqSym_starGenType) ParamsKey_ReceiverName(params MoqSym_starGenType_ReceiverName_params, anyParams uint64) MoqSym_starGenType_ReceiverName_paramsKey {
	m.Scene.T.Helper()
	return MoqSym_starGenType_ReceiverName_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqSym_starGenType_recorder) BaseName() *MoqSym_starGenType_BaseName_fnRecorder {
	return &MoqSym_starGenType_BaseName_fnRecorder{
		Params:   MoqSym_starGenType_BaseName_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSym_starGenType_BaseName_fnRecorder) Any() *MoqSym_starGenType_BaseName_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BaseName(r.Params))
		return nil
	}
	return &MoqSym_starGenType_BaseName_anyParams{Recorder: r}
}

func (r *MoqSym_starGenType_BaseName_fnRecorder) Seq() *MoqSym_starGenType_BaseName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BaseName(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSym_starGenType_BaseName_fnRecorder) NoSeq() *MoqSym_starGenType_BaseName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BaseName(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSym_starGenType_BaseName_fnRecorder) ReturnResults(result1 string) *MoqSym_starGenType_BaseName_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqSym_starGenType_BaseName_doFn
		DoReturnFn MoqSym_starGenType_BaseName_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSym_starGenType_BaseName_fnRecorder) AndDo(fn MoqSym_starGenType_BaseName_doFn) *MoqSym_starGenType_BaseName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSym_starGenType_BaseName_fnRecorder) DoReturnResults(fn MoqSym_starGenType_BaseName_doReturnFn) *MoqSym_starGenType_BaseName_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqSym_starGenType_BaseName_doFn
		DoReturnFn MoqSym_starGenType_BaseName_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSym_starGenType_BaseName_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSym_starGenType_BaseName_resultsByParams
	for n, res := range r.Moq.ResultsByParams_BaseName {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSym_starGenType_BaseName_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSym_starGenType_BaseName_paramsKey]*MoqSym_starGenType_BaseName_results{},
		}
		r.Moq.ResultsByParams_BaseName = append(r.Moq.ResultsByParams_BaseName, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_BaseName) {
			copy(r.Moq.ResultsByParams_BaseName[insertAt+1:], r.Moq.ResultsByParams_BaseName[insertAt:0])
			r.Moq.ResultsByParams_BaseName[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_BaseName(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSym_starGenType_BaseName_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSym_starGenType_BaseName_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSym_starGenType_BaseName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqSym_starGenType_BaseName_doFn
				DoReturnFn MoqSym_starGenType_BaseName_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSym_starGenType) PrettyParams_BaseName(params MoqSym_starGenType_BaseName_params) string {
	return fmt.Sprintf("BaseName()")
}

func (m *MoqSym_starGenType) ParamsKey_BaseName(params MoqSym_starGenType_BaseName_params, anyParams uint64) MoqSym_starGenType_BaseName_paramsKey {
	m.Scene.T.Helper()
	return MoqSym_starGenType_BaseName_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqSym_starGenType) Reset() {
	m.ResultsByParams_Static = nil
	m.ResultsByParams_PackageName = nil
	m.ResultsByParams_ReceiverName = nil
	m.ResultsByParams_BaseName = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqSym_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Static {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Static(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_PackageName {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_PackageName(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReceiverName {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReceiverName(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_BaseName {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_BaseName(results.Params))
			}
		}
	}
}
