// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package gosym

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that gosym.LineTable_starGenType is
// mocked completely
var _ LineTable_starGenType = (*MoqLineTable_starGenType_mock)(nil)

// LineTable_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type LineTable_starGenType interface {
	PCToLine(pc uint64) int
	LineToPC(line int, maxpc uint64) uint64
}

// MoqLineTable_starGenType holds the state of a moq of the
// LineTable_starGenType type
type MoqLineTable_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqLineTable_starGenType_mock

	ResultsByParams_PCToLine []MoqLineTable_starGenType_PCToLine_resultsByParams
	ResultsByParams_LineToPC []MoqLineTable_starGenType_LineToPC_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			PCToLine struct {
				Pc moq.ParamIndexing
			}
			LineToPC struct {
				Line  moq.ParamIndexing
				Maxpc moq.ParamIndexing
			}
		}
	}
	// MoqLineTable_starGenType_mock isolates the mock interface of the
}

// LineTable_starGenType type
type MoqLineTable_starGenType_mock struct {
	Moq *MoqLineTable_starGenType
}

// MoqLineTable_starGenType_recorder isolates the recorder interface of the
// LineTable_starGenType type
type MoqLineTable_starGenType_recorder struct {
	Moq *MoqLineTable_starGenType
}

// MoqLineTable_starGenType_PCToLine_params holds the params of the
// LineTable_starGenType type
type MoqLineTable_starGenType_PCToLine_params struct{ Pc uint64 }

// MoqLineTable_starGenType_PCToLine_paramsKey holds the map key params of the
// LineTable_starGenType type
type MoqLineTable_starGenType_PCToLine_paramsKey struct {
	Params struct{ Pc uint64 }
	Hashes struct{ Pc hash.Hash }
}

// MoqLineTable_starGenType_PCToLine_resultsByParams contains the results for a
// given set of parameters for the LineTable_starGenType type
type MoqLineTable_starGenType_PCToLine_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqLineTable_starGenType_PCToLine_paramsKey]*MoqLineTable_starGenType_PCToLine_results
}

// MoqLineTable_starGenType_PCToLine_doFn defines the type of function needed
// when calling AndDo for the LineTable_starGenType type
type MoqLineTable_starGenType_PCToLine_doFn func(pc uint64)

// MoqLineTable_starGenType_PCToLine_doReturnFn defines the type of function
// needed when calling DoReturnResults for the LineTable_starGenType type
type MoqLineTable_starGenType_PCToLine_doReturnFn func(pc uint64) int

// MoqLineTable_starGenType_PCToLine_results holds the results of the
// LineTable_starGenType type
type MoqLineTable_starGenType_PCToLine_results struct {
	Params  MoqLineTable_starGenType_PCToLine_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqLineTable_starGenType_PCToLine_doFn
		DoReturnFn MoqLineTable_starGenType_PCToLine_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqLineTable_starGenType_PCToLine_fnRecorder routes recorded function calls
// to the MoqLineTable_starGenType moq
type MoqLineTable_starGenType_PCToLine_fnRecorder struct {
	Params    MoqLineTable_starGenType_PCToLine_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqLineTable_starGenType_PCToLine_results
	Moq       *MoqLineTable_starGenType
}

// MoqLineTable_starGenType_PCToLine_anyParams isolates the any params
// functions of the LineTable_starGenType type
type MoqLineTable_starGenType_PCToLine_anyParams struct {
	Recorder *MoqLineTable_starGenType_PCToLine_fnRecorder
}

// MoqLineTable_starGenType_LineToPC_params holds the params of the
// LineTable_starGenType type
type MoqLineTable_starGenType_LineToPC_params struct {
	Line  int
	Maxpc uint64
}

// MoqLineTable_starGenType_LineToPC_paramsKey holds the map key params of the
// LineTable_starGenType type
type MoqLineTable_starGenType_LineToPC_paramsKey struct {
	Params struct {
		Line  int
		Maxpc uint64
	}
	Hashes struct {
		Line  hash.Hash
		Maxpc hash.Hash
	}
}

// MoqLineTable_starGenType_LineToPC_resultsByParams contains the results for a
// given set of parameters for the LineTable_starGenType type
type MoqLineTable_starGenType_LineToPC_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqLineTable_starGenType_LineToPC_paramsKey]*MoqLineTable_starGenType_LineToPC_results
}

// MoqLineTable_starGenType_LineToPC_doFn defines the type of function needed
// when calling AndDo for the LineTable_starGenType type
type MoqLineTable_starGenType_LineToPC_doFn func(line int, maxpc uint64)

// MoqLineTable_starGenType_LineToPC_doReturnFn defines the type of function
// needed when calling DoReturnResults for the LineTable_starGenType type
type MoqLineTable_starGenType_LineToPC_doReturnFn func(line int, maxpc uint64) uint64

// MoqLineTable_starGenType_LineToPC_results holds the results of the
// LineTable_starGenType type
type MoqLineTable_starGenType_LineToPC_results struct {
	Params  MoqLineTable_starGenType_LineToPC_params
	Results []struct {
		Values *struct {
			Result1 uint64
		}
		Sequence   uint32
		DoFn       MoqLineTable_starGenType_LineToPC_doFn
		DoReturnFn MoqLineTable_starGenType_LineToPC_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqLineTable_starGenType_LineToPC_fnRecorder routes recorded function calls
// to the MoqLineTable_starGenType moq
type MoqLineTable_starGenType_LineToPC_fnRecorder struct {
	Params    MoqLineTable_starGenType_LineToPC_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqLineTable_starGenType_LineToPC_results
	Moq       *MoqLineTable_starGenType
}

// MoqLineTable_starGenType_LineToPC_anyParams isolates the any params
// functions of the LineTable_starGenType type
type MoqLineTable_starGenType_LineToPC_anyParams struct {
	Recorder *MoqLineTable_starGenType_LineToPC_fnRecorder
}

// NewMoqLineTable_starGenType creates a new moq of the LineTable_starGenType
// type
func NewMoqLineTable_starGenType(scene *moq.Scene, config *moq.Config) *MoqLineTable_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqLineTable_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqLineTable_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				PCToLine struct {
					Pc moq.ParamIndexing
				}
				LineToPC struct {
					Line  moq.ParamIndexing
					Maxpc moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			PCToLine struct {
				Pc moq.ParamIndexing
			}
			LineToPC struct {
				Line  moq.ParamIndexing
				Maxpc moq.ParamIndexing
			}
		}{
			PCToLine: struct {
				Pc moq.ParamIndexing
			}{
				Pc: moq.ParamIndexByValue,
			},
			LineToPC: struct {
				Line  moq.ParamIndexing
				Maxpc moq.ParamIndexing
			}{
				Line:  moq.ParamIndexByValue,
				Maxpc: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the LineTable_starGenType type
func (m *MoqLineTable_starGenType) Mock() *MoqLineTable_starGenType_mock { return m.Moq }

func (m *MoqLineTable_starGenType_mock) PCToLine(pc uint64) (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqLineTable_starGenType_PCToLine_params{
		Pc: pc,
	}
	var results *MoqLineTable_starGenType_PCToLine_results
	for _, resultsByParams := range m.Moq.ResultsByParams_PCToLine {
		paramsKey := m.Moq.ParamsKey_PCToLine(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_PCToLine(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_PCToLine(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_PCToLine(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(pc)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(pc)
	}
	return
}

func (m *MoqLineTable_starGenType_mock) LineToPC(line int, maxpc uint64) (result1 uint64) {
	m.Moq.Scene.T.Helper()
	params := MoqLineTable_starGenType_LineToPC_params{
		Line:  line,
		Maxpc: maxpc,
	}
	var results *MoqLineTable_starGenType_LineToPC_results
	for _, resultsByParams := range m.Moq.ResultsByParams_LineToPC {
		paramsKey := m.Moq.ParamsKey_LineToPC(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_LineToPC(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_LineToPC(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_LineToPC(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(line, maxpc)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(line, maxpc)
	}
	return
}

// OnCall returns the recorder implementation of the LineTable_starGenType type
func (m *MoqLineTable_starGenType) OnCall() *MoqLineTable_starGenType_recorder {
	return &MoqLineTable_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqLineTable_starGenType_recorder) PCToLine(pc uint64) *MoqLineTable_starGenType_PCToLine_fnRecorder {
	return &MoqLineTable_starGenType_PCToLine_fnRecorder{
		Params: MoqLineTable_starGenType_PCToLine_params{
			Pc: pc,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqLineTable_starGenType_PCToLine_fnRecorder) Any() *MoqLineTable_starGenType_PCToLine_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PCToLine(r.Params))
		return nil
	}
	return &MoqLineTable_starGenType_PCToLine_anyParams{Recorder: r}
}

func (a *MoqLineTable_starGenType_PCToLine_anyParams) Pc() *MoqLineTable_starGenType_PCToLine_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqLineTable_starGenType_PCToLine_fnRecorder) Seq() *MoqLineTable_starGenType_PCToLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PCToLine(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqLineTable_starGenType_PCToLine_fnRecorder) NoSeq() *MoqLineTable_starGenType_PCToLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PCToLine(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqLineTable_starGenType_PCToLine_fnRecorder) ReturnResults(result1 int) *MoqLineTable_starGenType_PCToLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqLineTable_starGenType_PCToLine_doFn
		DoReturnFn MoqLineTable_starGenType_PCToLine_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqLineTable_starGenType_PCToLine_fnRecorder) AndDo(fn MoqLineTable_starGenType_PCToLine_doFn) *MoqLineTable_starGenType_PCToLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqLineTable_starGenType_PCToLine_fnRecorder) DoReturnResults(fn MoqLineTable_starGenType_PCToLine_doReturnFn) *MoqLineTable_starGenType_PCToLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqLineTable_starGenType_PCToLine_doFn
		DoReturnFn MoqLineTable_starGenType_PCToLine_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqLineTable_starGenType_PCToLine_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqLineTable_starGenType_PCToLine_resultsByParams
	for n, res := range r.Moq.ResultsByParams_PCToLine {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqLineTable_starGenType_PCToLine_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqLineTable_starGenType_PCToLine_paramsKey]*MoqLineTable_starGenType_PCToLine_results{},
		}
		r.Moq.ResultsByParams_PCToLine = append(r.Moq.ResultsByParams_PCToLine, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_PCToLine) {
			copy(r.Moq.ResultsByParams_PCToLine[insertAt+1:], r.Moq.ResultsByParams_PCToLine[insertAt:0])
			r.Moq.ResultsByParams_PCToLine[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_PCToLine(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqLineTable_starGenType_PCToLine_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqLineTable_starGenType_PCToLine_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqLineTable_starGenType_PCToLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqLineTable_starGenType_PCToLine_doFn
				DoReturnFn MoqLineTable_starGenType_PCToLine_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqLineTable_starGenType) PrettyParams_PCToLine(params MoqLineTable_starGenType_PCToLine_params) string {
	return fmt.Sprintf("PCToLine(%#v)", params.Pc)
}

func (m *MoqLineTable_starGenType) ParamsKey_PCToLine(params MoqLineTable_starGenType_PCToLine_params, anyParams uint64) MoqLineTable_starGenType_PCToLine_paramsKey {
	m.Scene.T.Helper()
	var pcUsed uint64
	var pcUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.PCToLine.Pc == moq.ParamIndexByValue {
			pcUsed = params.Pc
		} else {
			pcUsedHash = hash.DeepHash(params.Pc)
		}
	}
	return MoqLineTable_starGenType_PCToLine_paramsKey{
		Params: struct{ Pc uint64 }{
			Pc: pcUsed,
		},
		Hashes: struct{ Pc hash.Hash }{
			Pc: pcUsedHash,
		},
	}
}

func (m *MoqLineTable_starGenType_recorder) LineToPC(line int, maxpc uint64) *MoqLineTable_starGenType_LineToPC_fnRecorder {
	return &MoqLineTable_starGenType_LineToPC_fnRecorder{
		Params: MoqLineTable_starGenType_LineToPC_params{
			Line:  line,
			Maxpc: maxpc,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqLineTable_starGenType_LineToPC_fnRecorder) Any() *MoqLineTable_starGenType_LineToPC_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LineToPC(r.Params))
		return nil
	}
	return &MoqLineTable_starGenType_LineToPC_anyParams{Recorder: r}
}

func (a *MoqLineTable_starGenType_LineToPC_anyParams) Line() *MoqLineTable_starGenType_LineToPC_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqLineTable_starGenType_LineToPC_anyParams) Maxpc() *MoqLineTable_starGenType_LineToPC_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqLineTable_starGenType_LineToPC_fnRecorder) Seq() *MoqLineTable_starGenType_LineToPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LineToPC(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqLineTable_starGenType_LineToPC_fnRecorder) NoSeq() *MoqLineTable_starGenType_LineToPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LineToPC(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqLineTable_starGenType_LineToPC_fnRecorder) ReturnResults(result1 uint64) *MoqLineTable_starGenType_LineToPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint64
		}
		Sequence   uint32
		DoFn       MoqLineTable_starGenType_LineToPC_doFn
		DoReturnFn MoqLineTable_starGenType_LineToPC_doReturnFn
	}{
		Values: &struct {
			Result1 uint64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqLineTable_starGenType_LineToPC_fnRecorder) AndDo(fn MoqLineTable_starGenType_LineToPC_doFn) *MoqLineTable_starGenType_LineToPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqLineTable_starGenType_LineToPC_fnRecorder) DoReturnResults(fn MoqLineTable_starGenType_LineToPC_doReturnFn) *MoqLineTable_starGenType_LineToPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint64
		}
		Sequence   uint32
		DoFn       MoqLineTable_starGenType_LineToPC_doFn
		DoReturnFn MoqLineTable_starGenType_LineToPC_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqLineTable_starGenType_LineToPC_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqLineTable_starGenType_LineToPC_resultsByParams
	for n, res := range r.Moq.ResultsByParams_LineToPC {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqLineTable_starGenType_LineToPC_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqLineTable_starGenType_LineToPC_paramsKey]*MoqLineTable_starGenType_LineToPC_results{},
		}
		r.Moq.ResultsByParams_LineToPC = append(r.Moq.ResultsByParams_LineToPC, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_LineToPC) {
			copy(r.Moq.ResultsByParams_LineToPC[insertAt+1:], r.Moq.ResultsByParams_LineToPC[insertAt:0])
			r.Moq.ResultsByParams_LineToPC[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_LineToPC(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqLineTable_starGenType_LineToPC_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqLineTable_starGenType_LineToPC_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqLineTable_starGenType_LineToPC_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 uint64
				}
				Sequence   uint32
				DoFn       MoqLineTable_starGenType_LineToPC_doFn
				DoReturnFn MoqLineTable_starGenType_LineToPC_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqLineTable_starGenType) PrettyParams_LineToPC(params MoqLineTable_starGenType_LineToPC_params) string {
	return fmt.Sprintf("LineToPC(%#v, %#v)", params.Line, params.Maxpc)
}

func (m *MoqLineTable_starGenType) ParamsKey_LineToPC(params MoqLineTable_starGenType_LineToPC_params, anyParams uint64) MoqLineTable_starGenType_LineToPC_paramsKey {
	m.Scene.T.Helper()
	var lineUsed int
	var lineUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.LineToPC.Line == moq.ParamIndexByValue {
			lineUsed = params.Line
		} else {
			lineUsedHash = hash.DeepHash(params.Line)
		}
	}
	var maxpcUsed uint64
	var maxpcUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.LineToPC.Maxpc == moq.ParamIndexByValue {
			maxpcUsed = params.Maxpc
		} else {
			maxpcUsedHash = hash.DeepHash(params.Maxpc)
		}
	}
	return MoqLineTable_starGenType_LineToPC_paramsKey{
		Params: struct {
			Line  int
			Maxpc uint64
		}{
			Line:  lineUsed,
			Maxpc: maxpcUsed,
		},
		Hashes: struct {
			Line  hash.Hash
			Maxpc hash.Hash
		}{
			Line:  lineUsedHash,
			Maxpc: maxpcUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqLineTable_starGenType) Reset() {
	m.ResultsByParams_PCToLine = nil
	m.ResultsByParams_LineToPC = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqLineTable_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_PCToLine {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_PCToLine(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_LineToPC {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_LineToPC(results.Params))
			}
		}
	}
}
