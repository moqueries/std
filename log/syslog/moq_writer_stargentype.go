// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package syslog

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that syslog.Writer_starGenType is
// mocked completely
var _ Writer_starGenType = (*MoqWriter_starGenType_mock)(nil)

// Writer_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Writer_starGenType interface {
	Write(b []byte) (int, error)
	Close() error
	Emerg(m string) error
	Alert(m string) error
	Crit(m string) error
	Err(m string) error
	Warning(m string) error
	Notice(m string) error
	Info(m string) error
	Debug(m string) error
}

// MoqWriter_starGenType holds the state of a moq of the Writer_starGenType
// type
type MoqWriter_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqWriter_starGenType_mock

	ResultsByParams_Write   []MoqWriter_starGenType_Write_resultsByParams
	ResultsByParams_Close   []MoqWriter_starGenType_Close_resultsByParams
	ResultsByParams_Emerg   []MoqWriter_starGenType_Emerg_resultsByParams
	ResultsByParams_Alert   []MoqWriter_starGenType_Alert_resultsByParams
	ResultsByParams_Crit    []MoqWriter_starGenType_Crit_resultsByParams
	ResultsByParams_Err     []MoqWriter_starGenType_Err_resultsByParams
	ResultsByParams_Warning []MoqWriter_starGenType_Warning_resultsByParams
	ResultsByParams_Notice  []MoqWriter_starGenType_Notice_resultsByParams
	ResultsByParams_Info    []MoqWriter_starGenType_Info_resultsByParams
	ResultsByParams_Debug   []MoqWriter_starGenType_Debug_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Write struct {
				B moq.ParamIndexing
			}
			Close struct{}
			Emerg struct {
				Param1 moq.ParamIndexing
			}
			Alert struct {
				Param1 moq.ParamIndexing
			}
			Crit struct {
				Param1 moq.ParamIndexing
			}
			Err struct {
				Param1 moq.ParamIndexing
			}
			Warning struct {
				Param1 moq.ParamIndexing
			}
			Notice struct {
				Param1 moq.ParamIndexing
			}
			Info struct {
				Param1 moq.ParamIndexing
			}
			Debug struct {
				Param1 moq.ParamIndexing
			}
		}
	}
	// MoqWriter_starGenType_mock isolates the mock interface of the
}

// Writer_starGenType type
type MoqWriter_starGenType_mock struct {
	Moq *MoqWriter_starGenType
}

// MoqWriter_starGenType_recorder isolates the recorder interface of the
// Writer_starGenType type
type MoqWriter_starGenType_recorder struct {
	Moq *MoqWriter_starGenType
}

// MoqWriter_starGenType_Write_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Write_params struct{ B []byte }

// MoqWriter_starGenType_Write_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Write_paramsKey struct {
	Params struct{}
	Hashes struct{ B hash.Hash }
}

// MoqWriter_starGenType_Write_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Write_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Write_paramsKey]*MoqWriter_starGenType_Write_results
}

// MoqWriter_starGenType_Write_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Write_doFn func(b []byte)

// MoqWriter_starGenType_Write_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Write_doReturnFn func(b []byte) (int, error)

// MoqWriter_starGenType_Write_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Write_results struct {
	Params  MoqWriter_starGenType_Write_params
	Results []struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Write_doFn
		DoReturnFn MoqWriter_starGenType_Write_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Write_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Write_fnRecorder struct {
	Params    MoqWriter_starGenType_Write_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Write_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Write_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Write_anyParams struct {
	Recorder *MoqWriter_starGenType_Write_fnRecorder
}

// MoqWriter_starGenType_Close_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Close_params struct{}

// MoqWriter_starGenType_Close_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWriter_starGenType_Close_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Close_paramsKey]*MoqWriter_starGenType_Close_results
}

// MoqWriter_starGenType_Close_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Close_doFn func()

// MoqWriter_starGenType_Close_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Close_doReturnFn func() error

// MoqWriter_starGenType_Close_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Close_results struct {
	Params  MoqWriter_starGenType_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Close_doFn
		DoReturnFn MoqWriter_starGenType_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Close_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Close_fnRecorder struct {
	Params    MoqWriter_starGenType_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Close_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Close_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Close_anyParams struct {
	Recorder *MoqWriter_starGenType_Close_fnRecorder
}

// MoqWriter_starGenType_Emerg_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Emerg_params struct{ Param1 string }

// MoqWriter_starGenType_Emerg_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Emerg_paramsKey struct {
	Params struct{ Param1 string }
	Hashes struct{ Param1 hash.Hash }
}

// MoqWriter_starGenType_Emerg_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Emerg_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Emerg_paramsKey]*MoqWriter_starGenType_Emerg_results
}

// MoqWriter_starGenType_Emerg_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Emerg_doFn func(m string)

// MoqWriter_starGenType_Emerg_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Emerg_doReturnFn func(m string) error

// MoqWriter_starGenType_Emerg_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Emerg_results struct {
	Params  MoqWriter_starGenType_Emerg_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Emerg_doFn
		DoReturnFn MoqWriter_starGenType_Emerg_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Emerg_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Emerg_fnRecorder struct {
	Params    MoqWriter_starGenType_Emerg_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Emerg_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Emerg_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Emerg_anyParams struct {
	Recorder *MoqWriter_starGenType_Emerg_fnRecorder
}

// MoqWriter_starGenType_Alert_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Alert_params struct{ Param1 string }

// MoqWriter_starGenType_Alert_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Alert_paramsKey struct {
	Params struct{ Param1 string }
	Hashes struct{ Param1 hash.Hash }
}

// MoqWriter_starGenType_Alert_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Alert_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Alert_paramsKey]*MoqWriter_starGenType_Alert_results
}

// MoqWriter_starGenType_Alert_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Alert_doFn func(m string)

// MoqWriter_starGenType_Alert_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Alert_doReturnFn func(m string) error

// MoqWriter_starGenType_Alert_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Alert_results struct {
	Params  MoqWriter_starGenType_Alert_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Alert_doFn
		DoReturnFn MoqWriter_starGenType_Alert_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Alert_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Alert_fnRecorder struct {
	Params    MoqWriter_starGenType_Alert_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Alert_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Alert_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Alert_anyParams struct {
	Recorder *MoqWriter_starGenType_Alert_fnRecorder
}

// MoqWriter_starGenType_Crit_params holds the params of the Writer_starGenType
// type
type MoqWriter_starGenType_Crit_params struct{ Param1 string }

// MoqWriter_starGenType_Crit_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Crit_paramsKey struct {
	Params struct{ Param1 string }
	Hashes struct{ Param1 hash.Hash }
}

// MoqWriter_starGenType_Crit_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Crit_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Crit_paramsKey]*MoqWriter_starGenType_Crit_results
}

// MoqWriter_starGenType_Crit_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Crit_doFn func(m string)

// MoqWriter_starGenType_Crit_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Crit_doReturnFn func(m string) error

// MoqWriter_starGenType_Crit_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Crit_results struct {
	Params  MoqWriter_starGenType_Crit_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Crit_doFn
		DoReturnFn MoqWriter_starGenType_Crit_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Crit_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Crit_fnRecorder struct {
	Params    MoqWriter_starGenType_Crit_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Crit_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Crit_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Crit_anyParams struct {
	Recorder *MoqWriter_starGenType_Crit_fnRecorder
}

// MoqWriter_starGenType_Err_params holds the params of the Writer_starGenType
// type
type MoqWriter_starGenType_Err_params struct{ Param1 string }

// MoqWriter_starGenType_Err_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Err_paramsKey struct {
	Params struct{ Param1 string }
	Hashes struct{ Param1 hash.Hash }
}

// MoqWriter_starGenType_Err_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Err_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Err_paramsKey]*MoqWriter_starGenType_Err_results
}

// MoqWriter_starGenType_Err_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Err_doFn func(m string)

// MoqWriter_starGenType_Err_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Err_doReturnFn func(m string) error

// MoqWriter_starGenType_Err_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Err_results struct {
	Params  MoqWriter_starGenType_Err_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Err_doFn
		DoReturnFn MoqWriter_starGenType_Err_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Err_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Err_fnRecorder struct {
	Params    MoqWriter_starGenType_Err_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Err_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Err_anyParams isolates the any params functions of the
// Writer_starGenType type
type MoqWriter_starGenType_Err_anyParams struct {
	Recorder *MoqWriter_starGenType_Err_fnRecorder
}

// MoqWriter_starGenType_Warning_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Warning_params struct{ Param1 string }

// MoqWriter_starGenType_Warning_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Warning_paramsKey struct {
	Params struct{ Param1 string }
	Hashes struct{ Param1 hash.Hash }
}

// MoqWriter_starGenType_Warning_resultsByParams contains the results for a
// given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Warning_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Warning_paramsKey]*MoqWriter_starGenType_Warning_results
}

// MoqWriter_starGenType_Warning_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Warning_doFn func(m string)

// MoqWriter_starGenType_Warning_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Warning_doReturnFn func(m string) error

// MoqWriter_starGenType_Warning_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Warning_results struct {
	Params  MoqWriter_starGenType_Warning_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Warning_doFn
		DoReturnFn MoqWriter_starGenType_Warning_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Warning_fnRecorder routes recorded function calls to
// the MoqWriter_starGenType moq
type MoqWriter_starGenType_Warning_fnRecorder struct {
	Params    MoqWriter_starGenType_Warning_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Warning_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Warning_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Warning_anyParams struct {
	Recorder *MoqWriter_starGenType_Warning_fnRecorder
}

// MoqWriter_starGenType_Notice_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Notice_params struct{ Param1 string }

// MoqWriter_starGenType_Notice_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Notice_paramsKey struct {
	Params struct{ Param1 string }
	Hashes struct{ Param1 hash.Hash }
}

// MoqWriter_starGenType_Notice_resultsByParams contains the results for a
// given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Notice_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Notice_paramsKey]*MoqWriter_starGenType_Notice_results
}

// MoqWriter_starGenType_Notice_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Notice_doFn func(m string)

// MoqWriter_starGenType_Notice_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Notice_doReturnFn func(m string) error

// MoqWriter_starGenType_Notice_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Notice_results struct {
	Params  MoqWriter_starGenType_Notice_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Notice_doFn
		DoReturnFn MoqWriter_starGenType_Notice_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Notice_fnRecorder routes recorded function calls to
// the MoqWriter_starGenType moq
type MoqWriter_starGenType_Notice_fnRecorder struct {
	Params    MoqWriter_starGenType_Notice_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Notice_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Notice_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Notice_anyParams struct {
	Recorder *MoqWriter_starGenType_Notice_fnRecorder
}

// MoqWriter_starGenType_Info_params holds the params of the Writer_starGenType
// type
type MoqWriter_starGenType_Info_params struct{ Param1 string }

// MoqWriter_starGenType_Info_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Info_paramsKey struct {
	Params struct{ Param1 string }
	Hashes struct{ Param1 hash.Hash }
}

// MoqWriter_starGenType_Info_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Info_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Info_paramsKey]*MoqWriter_starGenType_Info_results
}

// MoqWriter_starGenType_Info_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Info_doFn func(m string)

// MoqWriter_starGenType_Info_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Info_doReturnFn func(m string) error

// MoqWriter_starGenType_Info_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Info_results struct {
	Params  MoqWriter_starGenType_Info_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Info_doFn
		DoReturnFn MoqWriter_starGenType_Info_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Info_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Info_fnRecorder struct {
	Params    MoqWriter_starGenType_Info_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Info_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Info_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Info_anyParams struct {
	Recorder *MoqWriter_starGenType_Info_fnRecorder
}

// MoqWriter_starGenType_Debug_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Debug_params struct{ Param1 string }

// MoqWriter_starGenType_Debug_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Debug_paramsKey struct {
	Params struct{ Param1 string }
	Hashes struct{ Param1 hash.Hash }
}

// MoqWriter_starGenType_Debug_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Debug_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Debug_paramsKey]*MoqWriter_starGenType_Debug_results
}

// MoqWriter_starGenType_Debug_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Debug_doFn func(m string)

// MoqWriter_starGenType_Debug_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Debug_doReturnFn func(m string) error

// MoqWriter_starGenType_Debug_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Debug_results struct {
	Params  MoqWriter_starGenType_Debug_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Debug_doFn
		DoReturnFn MoqWriter_starGenType_Debug_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Debug_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Debug_fnRecorder struct {
	Params    MoqWriter_starGenType_Debug_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Debug_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Debug_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Debug_anyParams struct {
	Recorder *MoqWriter_starGenType_Debug_fnRecorder
}

// NewMoqWriter_starGenType creates a new moq of the Writer_starGenType type
func NewMoqWriter_starGenType(scene *moq.Scene, config *moq.Config) *MoqWriter_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqWriter_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqWriter_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Write struct {
					B moq.ParamIndexing
				}
				Close struct{}
				Emerg struct {
					Param1 moq.ParamIndexing
				}
				Alert struct {
					Param1 moq.ParamIndexing
				}
				Crit struct {
					Param1 moq.ParamIndexing
				}
				Err struct {
					Param1 moq.ParamIndexing
				}
				Warning struct {
					Param1 moq.ParamIndexing
				}
				Notice struct {
					Param1 moq.ParamIndexing
				}
				Info struct {
					Param1 moq.ParamIndexing
				}
				Debug struct {
					Param1 moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Write struct {
				B moq.ParamIndexing
			}
			Close struct{}
			Emerg struct {
				Param1 moq.ParamIndexing
			}
			Alert struct {
				Param1 moq.ParamIndexing
			}
			Crit struct {
				Param1 moq.ParamIndexing
			}
			Err struct {
				Param1 moq.ParamIndexing
			}
			Warning struct {
				Param1 moq.ParamIndexing
			}
			Notice struct {
				Param1 moq.ParamIndexing
			}
			Info struct {
				Param1 moq.ParamIndexing
			}
			Debug struct {
				Param1 moq.ParamIndexing
			}
		}{
			Write: struct {
				B moq.ParamIndexing
			}{
				B: moq.ParamIndexByHash,
			},
			Close: struct{}{},
			Emerg: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			Alert: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			Crit: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			Err: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			Warning: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			Notice: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			Info: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			Debug: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Writer_starGenType type
func (m *MoqWriter_starGenType) Mock() *MoqWriter_starGenType_mock { return m.Moq }

func (m *MoqWriter_starGenType_mock) Write(b []byte) (result1 int, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Write_params{
		B: b,
	}
	var results *MoqWriter_starGenType_Write_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Write {
		paramsKey := m.Moq.ParamsKey_Write(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Write(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Write(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Write(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(b)
	}
	return
}

func (m *MoqWriter_starGenType_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Close_params{}
	var results *MoqWriter_starGenType_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWriter_starGenType_mock) Emerg(param1 string) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Emerg_params{
		Param1: param1,
	}
	var results *MoqWriter_starGenType_Emerg_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Emerg {
		paramsKey := m.Moq.ParamsKey_Emerg(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Emerg(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Emerg(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Emerg(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqWriter_starGenType_mock) Alert(param1 string) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Alert_params{
		Param1: param1,
	}
	var results *MoqWriter_starGenType_Alert_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Alert {
		paramsKey := m.Moq.ParamsKey_Alert(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Alert(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Alert(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Alert(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqWriter_starGenType_mock) Crit(param1 string) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Crit_params{
		Param1: param1,
	}
	var results *MoqWriter_starGenType_Crit_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Crit {
		paramsKey := m.Moq.ParamsKey_Crit(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Crit(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Crit(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Crit(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqWriter_starGenType_mock) Err(param1 string) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Err_params{
		Param1: param1,
	}
	var results *MoqWriter_starGenType_Err_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Err {
		paramsKey := m.Moq.ParamsKey_Err(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Err(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Err(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Err(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqWriter_starGenType_mock) Warning(param1 string) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Warning_params{
		Param1: param1,
	}
	var results *MoqWriter_starGenType_Warning_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Warning {
		paramsKey := m.Moq.ParamsKey_Warning(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Warning(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Warning(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Warning(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqWriter_starGenType_mock) Notice(param1 string) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Notice_params{
		Param1: param1,
	}
	var results *MoqWriter_starGenType_Notice_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Notice {
		paramsKey := m.Moq.ParamsKey_Notice(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Notice(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Notice(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Notice(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqWriter_starGenType_mock) Info(param1 string) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Info_params{
		Param1: param1,
	}
	var results *MoqWriter_starGenType_Info_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Info {
		paramsKey := m.Moq.ParamsKey_Info(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Info(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Info(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Info(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqWriter_starGenType_mock) Debug(param1 string) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Debug_params{
		Param1: param1,
	}
	var results *MoqWriter_starGenType_Debug_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Debug {
		paramsKey := m.Moq.ParamsKey_Debug(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Debug(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Debug(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Debug(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

// OnCall returns the recorder implementation of the Writer_starGenType type
func (m *MoqWriter_starGenType) OnCall() *MoqWriter_starGenType_recorder {
	return &MoqWriter_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqWriter_starGenType_recorder) Write(b []byte) *MoqWriter_starGenType_Write_fnRecorder {
	return &MoqWriter_starGenType_Write_fnRecorder{
		Params: MoqWriter_starGenType_Write_params{
			B: b,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Write_fnRecorder) Any() *MoqWriter_starGenType_Write_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Write_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_Write_anyParams) B() *MoqWriter_starGenType_Write_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_Write_fnRecorder) Seq() *MoqWriter_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Write_fnRecorder) NoSeq() *MoqWriter_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Write_fnRecorder) ReturnResults(result1 int, result2 error) *MoqWriter_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Write_doFn
		DoReturnFn MoqWriter_starGenType_Write_doReturnFn
	}{
		Values: &struct {
			Result1 int
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Write_fnRecorder) AndDo(fn MoqWriter_starGenType_Write_doFn) *MoqWriter_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Write_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Write_doReturnFn) *MoqWriter_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Write_doFn
		DoReturnFn MoqWriter_starGenType_Write_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Write_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Write_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Write {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Write_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Write_paramsKey]*MoqWriter_starGenType_Write_results{},
		}
		r.Moq.ResultsByParams_Write = append(r.Moq.ResultsByParams_Write, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Write) {
			copy(r.Moq.ResultsByParams_Write[insertAt+1:], r.Moq.ResultsByParams_Write[insertAt:0])
			r.Moq.ResultsByParams_Write[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Write(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Write_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Write_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Write_doFn
				DoReturnFn MoqWriter_starGenType_Write_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Write(params MoqWriter_starGenType_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.B)
}

func (m *MoqWriter_starGenType) ParamsKey_Write(params MoqWriter_starGenType_Write_params, anyParams uint64) MoqWriter_starGenType_Write_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Write.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the Write function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	return MoqWriter_starGenType_Write_paramsKey{
		Params: struct{}{},
		Hashes: struct{ B hash.Hash }{
			B: bUsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) Close() *MoqWriter_starGenType_Close_fnRecorder {
	return &MoqWriter_starGenType_Close_fnRecorder{
		Params:   MoqWriter_starGenType_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Close_fnRecorder) Any() *MoqWriter_starGenType_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Close_anyParams{Recorder: r}
}

func (r *MoqWriter_starGenType_Close_fnRecorder) Seq() *MoqWriter_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Close_fnRecorder) NoSeq() *MoqWriter_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Close_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Close_doFn
		DoReturnFn MoqWriter_starGenType_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Close_fnRecorder) AndDo(fn MoqWriter_starGenType_Close_doFn) *MoqWriter_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Close_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Close_doReturnFn) *MoqWriter_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Close_doFn
		DoReturnFn MoqWriter_starGenType_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Close_paramsKey]*MoqWriter_starGenType_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Close_doFn
				DoReturnFn MoqWriter_starGenType_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Close(params MoqWriter_starGenType_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqWriter_starGenType) ParamsKey_Close(params MoqWriter_starGenType_Close_params, anyParams uint64) MoqWriter_starGenType_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqWriter_starGenType_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWriter_starGenType_recorder) Emerg(param1 string) *MoqWriter_starGenType_Emerg_fnRecorder {
	return &MoqWriter_starGenType_Emerg_fnRecorder{
		Params: MoqWriter_starGenType_Emerg_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Emerg_fnRecorder) Any() *MoqWriter_starGenType_Emerg_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Emerg(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Emerg_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_Emerg_anyParams) Param1() *MoqWriter_starGenType_Emerg_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_Emerg_fnRecorder) Seq() *MoqWriter_starGenType_Emerg_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Emerg(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Emerg_fnRecorder) NoSeq() *MoqWriter_starGenType_Emerg_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Emerg(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Emerg_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_Emerg_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Emerg_doFn
		DoReturnFn MoqWriter_starGenType_Emerg_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Emerg_fnRecorder) AndDo(fn MoqWriter_starGenType_Emerg_doFn) *MoqWriter_starGenType_Emerg_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Emerg_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Emerg_doReturnFn) *MoqWriter_starGenType_Emerg_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Emerg_doFn
		DoReturnFn MoqWriter_starGenType_Emerg_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Emerg_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Emerg_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Emerg {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Emerg_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Emerg_paramsKey]*MoqWriter_starGenType_Emerg_results{},
		}
		r.Moq.ResultsByParams_Emerg = append(r.Moq.ResultsByParams_Emerg, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Emerg) {
			copy(r.Moq.ResultsByParams_Emerg[insertAt+1:], r.Moq.ResultsByParams_Emerg[insertAt:0])
			r.Moq.ResultsByParams_Emerg[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Emerg(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Emerg_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Emerg_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Emerg_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Emerg_doFn
				DoReturnFn MoqWriter_starGenType_Emerg_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Emerg(params MoqWriter_starGenType_Emerg_params) string {
	return fmt.Sprintf("Emerg(%#v)", params.Param1)
}

func (m *MoqWriter_starGenType) ParamsKey_Emerg(params MoqWriter_starGenType_Emerg_params, anyParams uint64) MoqWriter_starGenType_Emerg_paramsKey {
	m.Scene.T.Helper()
	var param1Used string
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Emerg.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqWriter_starGenType_Emerg_paramsKey{
		Params: struct{ Param1 string }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) Alert(param1 string) *MoqWriter_starGenType_Alert_fnRecorder {
	return &MoqWriter_starGenType_Alert_fnRecorder{
		Params: MoqWriter_starGenType_Alert_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Alert_fnRecorder) Any() *MoqWriter_starGenType_Alert_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Alert(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Alert_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_Alert_anyParams) Param1() *MoqWriter_starGenType_Alert_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_Alert_fnRecorder) Seq() *MoqWriter_starGenType_Alert_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Alert(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Alert_fnRecorder) NoSeq() *MoqWriter_starGenType_Alert_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Alert(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Alert_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_Alert_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Alert_doFn
		DoReturnFn MoqWriter_starGenType_Alert_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Alert_fnRecorder) AndDo(fn MoqWriter_starGenType_Alert_doFn) *MoqWriter_starGenType_Alert_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Alert_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Alert_doReturnFn) *MoqWriter_starGenType_Alert_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Alert_doFn
		DoReturnFn MoqWriter_starGenType_Alert_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Alert_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Alert_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Alert {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Alert_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Alert_paramsKey]*MoqWriter_starGenType_Alert_results{},
		}
		r.Moq.ResultsByParams_Alert = append(r.Moq.ResultsByParams_Alert, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Alert) {
			copy(r.Moq.ResultsByParams_Alert[insertAt+1:], r.Moq.ResultsByParams_Alert[insertAt:0])
			r.Moq.ResultsByParams_Alert[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Alert(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Alert_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Alert_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Alert_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Alert_doFn
				DoReturnFn MoqWriter_starGenType_Alert_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Alert(params MoqWriter_starGenType_Alert_params) string {
	return fmt.Sprintf("Alert(%#v)", params.Param1)
}

func (m *MoqWriter_starGenType) ParamsKey_Alert(params MoqWriter_starGenType_Alert_params, anyParams uint64) MoqWriter_starGenType_Alert_paramsKey {
	m.Scene.T.Helper()
	var param1Used string
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Alert.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqWriter_starGenType_Alert_paramsKey{
		Params: struct{ Param1 string }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) Crit(param1 string) *MoqWriter_starGenType_Crit_fnRecorder {
	return &MoqWriter_starGenType_Crit_fnRecorder{
		Params: MoqWriter_starGenType_Crit_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Crit_fnRecorder) Any() *MoqWriter_starGenType_Crit_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Crit(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Crit_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_Crit_anyParams) Param1() *MoqWriter_starGenType_Crit_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_Crit_fnRecorder) Seq() *MoqWriter_starGenType_Crit_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Crit(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Crit_fnRecorder) NoSeq() *MoqWriter_starGenType_Crit_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Crit(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Crit_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_Crit_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Crit_doFn
		DoReturnFn MoqWriter_starGenType_Crit_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Crit_fnRecorder) AndDo(fn MoqWriter_starGenType_Crit_doFn) *MoqWriter_starGenType_Crit_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Crit_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Crit_doReturnFn) *MoqWriter_starGenType_Crit_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Crit_doFn
		DoReturnFn MoqWriter_starGenType_Crit_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Crit_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Crit_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Crit {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Crit_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Crit_paramsKey]*MoqWriter_starGenType_Crit_results{},
		}
		r.Moq.ResultsByParams_Crit = append(r.Moq.ResultsByParams_Crit, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Crit) {
			copy(r.Moq.ResultsByParams_Crit[insertAt+1:], r.Moq.ResultsByParams_Crit[insertAt:0])
			r.Moq.ResultsByParams_Crit[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Crit(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Crit_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Crit_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Crit_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Crit_doFn
				DoReturnFn MoqWriter_starGenType_Crit_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Crit(params MoqWriter_starGenType_Crit_params) string {
	return fmt.Sprintf("Crit(%#v)", params.Param1)
}

func (m *MoqWriter_starGenType) ParamsKey_Crit(params MoqWriter_starGenType_Crit_params, anyParams uint64) MoqWriter_starGenType_Crit_paramsKey {
	m.Scene.T.Helper()
	var param1Used string
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Crit.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqWriter_starGenType_Crit_paramsKey{
		Params: struct{ Param1 string }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) Err(param1 string) *MoqWriter_starGenType_Err_fnRecorder {
	return &MoqWriter_starGenType_Err_fnRecorder{
		Params: MoqWriter_starGenType_Err_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Err_fnRecorder) Any() *MoqWriter_starGenType_Err_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Err(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Err_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_Err_anyParams) Param1() *MoqWriter_starGenType_Err_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_Err_fnRecorder) Seq() *MoqWriter_starGenType_Err_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Err(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Err_fnRecorder) NoSeq() *MoqWriter_starGenType_Err_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Err(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Err_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_Err_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Err_doFn
		DoReturnFn MoqWriter_starGenType_Err_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Err_fnRecorder) AndDo(fn MoqWriter_starGenType_Err_doFn) *MoqWriter_starGenType_Err_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Err_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Err_doReturnFn) *MoqWriter_starGenType_Err_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Err_doFn
		DoReturnFn MoqWriter_starGenType_Err_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Err_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Err_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Err {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Err_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Err_paramsKey]*MoqWriter_starGenType_Err_results{},
		}
		r.Moq.ResultsByParams_Err = append(r.Moq.ResultsByParams_Err, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Err) {
			copy(r.Moq.ResultsByParams_Err[insertAt+1:], r.Moq.ResultsByParams_Err[insertAt:0])
			r.Moq.ResultsByParams_Err[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Err(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Err_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Err_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Err_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Err_doFn
				DoReturnFn MoqWriter_starGenType_Err_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Err(params MoqWriter_starGenType_Err_params) string {
	return fmt.Sprintf("Err(%#v)", params.Param1)
}

func (m *MoqWriter_starGenType) ParamsKey_Err(params MoqWriter_starGenType_Err_params, anyParams uint64) MoqWriter_starGenType_Err_paramsKey {
	m.Scene.T.Helper()
	var param1Used string
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Err.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqWriter_starGenType_Err_paramsKey{
		Params: struct{ Param1 string }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) Warning(param1 string) *MoqWriter_starGenType_Warning_fnRecorder {
	return &MoqWriter_starGenType_Warning_fnRecorder{
		Params: MoqWriter_starGenType_Warning_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Warning_fnRecorder) Any() *MoqWriter_starGenType_Warning_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Warning(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Warning_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_Warning_anyParams) Param1() *MoqWriter_starGenType_Warning_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_Warning_fnRecorder) Seq() *MoqWriter_starGenType_Warning_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Warning(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Warning_fnRecorder) NoSeq() *MoqWriter_starGenType_Warning_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Warning(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Warning_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_Warning_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Warning_doFn
		DoReturnFn MoqWriter_starGenType_Warning_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Warning_fnRecorder) AndDo(fn MoqWriter_starGenType_Warning_doFn) *MoqWriter_starGenType_Warning_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Warning_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Warning_doReturnFn) *MoqWriter_starGenType_Warning_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Warning_doFn
		DoReturnFn MoqWriter_starGenType_Warning_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Warning_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Warning_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Warning {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Warning_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Warning_paramsKey]*MoqWriter_starGenType_Warning_results{},
		}
		r.Moq.ResultsByParams_Warning = append(r.Moq.ResultsByParams_Warning, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Warning) {
			copy(r.Moq.ResultsByParams_Warning[insertAt+1:], r.Moq.ResultsByParams_Warning[insertAt:0])
			r.Moq.ResultsByParams_Warning[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Warning(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Warning_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Warning_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Warning_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Warning_doFn
				DoReturnFn MoqWriter_starGenType_Warning_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Warning(params MoqWriter_starGenType_Warning_params) string {
	return fmt.Sprintf("Warning(%#v)", params.Param1)
}

func (m *MoqWriter_starGenType) ParamsKey_Warning(params MoqWriter_starGenType_Warning_params, anyParams uint64) MoqWriter_starGenType_Warning_paramsKey {
	m.Scene.T.Helper()
	var param1Used string
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Warning.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqWriter_starGenType_Warning_paramsKey{
		Params: struct{ Param1 string }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) Notice(param1 string) *MoqWriter_starGenType_Notice_fnRecorder {
	return &MoqWriter_starGenType_Notice_fnRecorder{
		Params: MoqWriter_starGenType_Notice_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Notice_fnRecorder) Any() *MoqWriter_starGenType_Notice_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Notice(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Notice_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_Notice_anyParams) Param1() *MoqWriter_starGenType_Notice_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_Notice_fnRecorder) Seq() *MoqWriter_starGenType_Notice_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Notice(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Notice_fnRecorder) NoSeq() *MoqWriter_starGenType_Notice_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Notice(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Notice_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_Notice_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Notice_doFn
		DoReturnFn MoqWriter_starGenType_Notice_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Notice_fnRecorder) AndDo(fn MoqWriter_starGenType_Notice_doFn) *MoqWriter_starGenType_Notice_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Notice_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Notice_doReturnFn) *MoqWriter_starGenType_Notice_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Notice_doFn
		DoReturnFn MoqWriter_starGenType_Notice_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Notice_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Notice_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Notice {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Notice_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Notice_paramsKey]*MoqWriter_starGenType_Notice_results{},
		}
		r.Moq.ResultsByParams_Notice = append(r.Moq.ResultsByParams_Notice, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Notice) {
			copy(r.Moq.ResultsByParams_Notice[insertAt+1:], r.Moq.ResultsByParams_Notice[insertAt:0])
			r.Moq.ResultsByParams_Notice[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Notice(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Notice_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Notice_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Notice_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Notice_doFn
				DoReturnFn MoqWriter_starGenType_Notice_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Notice(params MoqWriter_starGenType_Notice_params) string {
	return fmt.Sprintf("Notice(%#v)", params.Param1)
}

func (m *MoqWriter_starGenType) ParamsKey_Notice(params MoqWriter_starGenType_Notice_params, anyParams uint64) MoqWriter_starGenType_Notice_paramsKey {
	m.Scene.T.Helper()
	var param1Used string
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Notice.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqWriter_starGenType_Notice_paramsKey{
		Params: struct{ Param1 string }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) Info(param1 string) *MoqWriter_starGenType_Info_fnRecorder {
	return &MoqWriter_starGenType_Info_fnRecorder{
		Params: MoqWriter_starGenType_Info_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Info_fnRecorder) Any() *MoqWriter_starGenType_Info_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Info(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Info_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_Info_anyParams) Param1() *MoqWriter_starGenType_Info_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_Info_fnRecorder) Seq() *MoqWriter_starGenType_Info_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Info(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Info_fnRecorder) NoSeq() *MoqWriter_starGenType_Info_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Info(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Info_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_Info_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Info_doFn
		DoReturnFn MoqWriter_starGenType_Info_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Info_fnRecorder) AndDo(fn MoqWriter_starGenType_Info_doFn) *MoqWriter_starGenType_Info_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Info_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Info_doReturnFn) *MoqWriter_starGenType_Info_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Info_doFn
		DoReturnFn MoqWriter_starGenType_Info_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Info_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Info_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Info {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Info_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Info_paramsKey]*MoqWriter_starGenType_Info_results{},
		}
		r.Moq.ResultsByParams_Info = append(r.Moq.ResultsByParams_Info, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Info) {
			copy(r.Moq.ResultsByParams_Info[insertAt+1:], r.Moq.ResultsByParams_Info[insertAt:0])
			r.Moq.ResultsByParams_Info[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Info(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Info_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Info_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Info_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Info_doFn
				DoReturnFn MoqWriter_starGenType_Info_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Info(params MoqWriter_starGenType_Info_params) string {
	return fmt.Sprintf("Info(%#v)", params.Param1)
}

func (m *MoqWriter_starGenType) ParamsKey_Info(params MoqWriter_starGenType_Info_params, anyParams uint64) MoqWriter_starGenType_Info_paramsKey {
	m.Scene.T.Helper()
	var param1Used string
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Info.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqWriter_starGenType_Info_paramsKey{
		Params: struct{ Param1 string }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) Debug(param1 string) *MoqWriter_starGenType_Debug_fnRecorder {
	return &MoqWriter_starGenType_Debug_fnRecorder{
		Params: MoqWriter_starGenType_Debug_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Debug_fnRecorder) Any() *MoqWriter_starGenType_Debug_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Debug(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Debug_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_Debug_anyParams) Param1() *MoqWriter_starGenType_Debug_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_Debug_fnRecorder) Seq() *MoqWriter_starGenType_Debug_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Debug(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Debug_fnRecorder) NoSeq() *MoqWriter_starGenType_Debug_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Debug(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Debug_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_Debug_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Debug_doFn
		DoReturnFn MoqWriter_starGenType_Debug_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Debug_fnRecorder) AndDo(fn MoqWriter_starGenType_Debug_doFn) *MoqWriter_starGenType_Debug_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Debug_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Debug_doReturnFn) *MoqWriter_starGenType_Debug_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Debug_doFn
		DoReturnFn MoqWriter_starGenType_Debug_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Debug_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Debug_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Debug {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Debug_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Debug_paramsKey]*MoqWriter_starGenType_Debug_results{},
		}
		r.Moq.ResultsByParams_Debug = append(r.Moq.ResultsByParams_Debug, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Debug) {
			copy(r.Moq.ResultsByParams_Debug[insertAt+1:], r.Moq.ResultsByParams_Debug[insertAt:0])
			r.Moq.ResultsByParams_Debug[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Debug(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Debug_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Debug_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Debug_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Debug_doFn
				DoReturnFn MoqWriter_starGenType_Debug_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Debug(params MoqWriter_starGenType_Debug_params) string {
	return fmt.Sprintf("Debug(%#v)", params.Param1)
}

func (m *MoqWriter_starGenType) ParamsKey_Debug(params MoqWriter_starGenType_Debug_params, anyParams uint64) MoqWriter_starGenType_Debug_paramsKey {
	m.Scene.T.Helper()
	var param1Used string
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Debug.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqWriter_starGenType_Debug_paramsKey{
		Params: struct{ Param1 string }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqWriter_starGenType) Reset() {
	m.ResultsByParams_Write = nil
	m.ResultsByParams_Close = nil
	m.ResultsByParams_Emerg = nil
	m.ResultsByParams_Alert = nil
	m.ResultsByParams_Crit = nil
	m.ResultsByParams_Err = nil
	m.ResultsByParams_Warning = nil
	m.ResultsByParams_Notice = nil
	m.ResultsByParams_Info = nil
	m.ResultsByParams_Debug = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqWriter_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Write {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Write(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Emerg {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Emerg(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Alert {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Alert(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Crit {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Crit(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Err {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Err(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Warning {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Warning(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Notice {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Notice(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Info {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Info(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Debug {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Debug(results.Params))
			}
		}
	}
}
