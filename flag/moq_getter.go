// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package flag

import (
	"flag"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that flag.Getter is mocked completely
var _ flag.Getter = (*MoqGetter_mock)(nil)

// MoqGetter holds the state of a moq of the Getter type
type MoqGetter struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqGetter_mock

	ResultsByParams_String []MoqGetter_String_resultsByParams
	ResultsByParams_Set    []MoqGetter_Set_resultsByParams
	ResultsByParams_Get    []MoqGetter_Get_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			String struct{}
			Set    struct {
				Param1 moq.ParamIndexing
			}
			Get struct{}
		}
	}
}

// MoqGetter_mock isolates the mock interface of the Getter type
type MoqGetter_mock struct {
	Moq *MoqGetter
}

// MoqGetter_recorder isolates the recorder interface of the Getter type
type MoqGetter_recorder struct {
	Moq *MoqGetter
}

// MoqGetter_String_params holds the params of the Getter type
type MoqGetter_String_params struct{}

// MoqGetter_String_paramsKey holds the map key params of the Getter type
type MoqGetter_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqGetter_String_resultsByParams contains the results for a given set of
// parameters for the Getter type
type MoqGetter_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqGetter_String_paramsKey]*MoqGetter_String_results
}

// MoqGetter_String_doFn defines the type of function needed when calling AndDo
// for the Getter type
type MoqGetter_String_doFn func()

// MoqGetter_String_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Getter type
type MoqGetter_String_doReturnFn func() string

// MoqGetter_String_results holds the results of the Getter type
type MoqGetter_String_results struct {
	Params  MoqGetter_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqGetter_String_doFn
		DoReturnFn MoqGetter_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqGetter_String_fnRecorder routes recorded function calls to the MoqGetter
// moq
type MoqGetter_String_fnRecorder struct {
	Params    MoqGetter_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqGetter_String_results
	Moq       *MoqGetter
}

// MoqGetter_String_anyParams isolates the any params functions of the Getter
// type
type MoqGetter_String_anyParams struct {
	Recorder *MoqGetter_String_fnRecorder
}

// MoqGetter_Set_params holds the params of the Getter type
type MoqGetter_Set_params struct{ Param1 string }

// MoqGetter_Set_paramsKey holds the map key params of the Getter type
type MoqGetter_Set_paramsKey struct {
	Params struct{ Param1 string }
	Hashes struct{ Param1 hash.Hash }
}

// MoqGetter_Set_resultsByParams contains the results for a given set of
// parameters for the Getter type
type MoqGetter_Set_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqGetter_Set_paramsKey]*MoqGetter_Set_results
}

// MoqGetter_Set_doFn defines the type of function needed when calling AndDo
// for the Getter type
type MoqGetter_Set_doFn func(string)

// MoqGetter_Set_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Getter type
type MoqGetter_Set_doReturnFn func(string) error

// MoqGetter_Set_results holds the results of the Getter type
type MoqGetter_Set_results struct {
	Params  MoqGetter_Set_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqGetter_Set_doFn
		DoReturnFn MoqGetter_Set_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqGetter_Set_fnRecorder routes recorded function calls to the MoqGetter moq
type MoqGetter_Set_fnRecorder struct {
	Params    MoqGetter_Set_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqGetter_Set_results
	Moq       *MoqGetter
}

// MoqGetter_Set_anyParams isolates the any params functions of the Getter type
type MoqGetter_Set_anyParams struct {
	Recorder *MoqGetter_Set_fnRecorder
}

// MoqGetter_Get_params holds the params of the Getter type
type MoqGetter_Get_params struct{}

// MoqGetter_Get_paramsKey holds the map key params of the Getter type
type MoqGetter_Get_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqGetter_Get_resultsByParams contains the results for a given set of
// parameters for the Getter type
type MoqGetter_Get_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqGetter_Get_paramsKey]*MoqGetter_Get_results
}

// MoqGetter_Get_doFn defines the type of function needed when calling AndDo
// for the Getter type
type MoqGetter_Get_doFn func()

// MoqGetter_Get_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Getter type
type MoqGetter_Get_doReturnFn func() interface{}

// MoqGetter_Get_results holds the results of the Getter type
type MoqGetter_Get_results struct {
	Params  MoqGetter_Get_params
	Results []struct {
		Values *struct {
			Result1 interface{}
		}
		Sequence   uint32
		DoFn       MoqGetter_Get_doFn
		DoReturnFn MoqGetter_Get_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqGetter_Get_fnRecorder routes recorded function calls to the MoqGetter moq
type MoqGetter_Get_fnRecorder struct {
	Params    MoqGetter_Get_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqGetter_Get_results
	Moq       *MoqGetter
}

// MoqGetter_Get_anyParams isolates the any params functions of the Getter type
type MoqGetter_Get_anyParams struct {
	Recorder *MoqGetter_Get_fnRecorder
}

// NewMoqGetter creates a new moq of the Getter type
func NewMoqGetter(scene *moq.Scene, config *moq.Config) *MoqGetter {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqGetter{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqGetter_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				String struct{}
				Set    struct {
					Param1 moq.ParamIndexing
				}
				Get struct{}
			}
		}{ParameterIndexing: struct {
			String struct{}
			Set    struct {
				Param1 moq.ParamIndexing
			}
			Get struct{}
		}{
			String: struct{}{},
			Set: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			Get: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Getter type
func (m *MoqGetter) Mock() *MoqGetter_mock { return m.Moq }

func (m *MoqGetter_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqGetter_String_params{}
	var results *MoqGetter_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqGetter_mock) Set(param1 string) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqGetter_Set_params{
		Param1: param1,
	}
	var results *MoqGetter_Set_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Set {
		paramsKey := m.Moq.ParamsKey_Set(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Set(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Set(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Set(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqGetter_mock) Get() (result1 interface{}) {
	m.Moq.Scene.T.Helper()
	params := MoqGetter_Get_params{}
	var results *MoqGetter_Get_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Get {
		paramsKey := m.Moq.ParamsKey_Get(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Get(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Get(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Get(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Getter type
func (m *MoqGetter) OnCall() *MoqGetter_recorder {
	return &MoqGetter_recorder{
		Moq: m,
	}
}

func (m *MoqGetter_recorder) String() *MoqGetter_String_fnRecorder {
	return &MoqGetter_String_fnRecorder{
		Params:   MoqGetter_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqGetter_String_fnRecorder) Any() *MoqGetter_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqGetter_String_anyParams{Recorder: r}
}

func (r *MoqGetter_String_fnRecorder) Seq() *MoqGetter_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqGetter_String_fnRecorder) NoSeq() *MoqGetter_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqGetter_String_fnRecorder) ReturnResults(result1 string) *MoqGetter_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqGetter_String_doFn
		DoReturnFn MoqGetter_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqGetter_String_fnRecorder) AndDo(fn MoqGetter_String_doFn) *MoqGetter_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqGetter_String_fnRecorder) DoReturnResults(fn MoqGetter_String_doReturnFn) *MoqGetter_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqGetter_String_doFn
		DoReturnFn MoqGetter_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqGetter_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqGetter_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqGetter_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqGetter_String_paramsKey]*MoqGetter_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqGetter_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqGetter_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqGetter_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqGetter_String_doFn
				DoReturnFn MoqGetter_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqGetter) PrettyParams_String(params MoqGetter_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqGetter) ParamsKey_String(params MoqGetter_String_params, anyParams uint64) MoqGetter_String_paramsKey {
	m.Scene.T.Helper()
	return MoqGetter_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqGetter_recorder) Set(param1 string) *MoqGetter_Set_fnRecorder {
	return &MoqGetter_Set_fnRecorder{
		Params: MoqGetter_Set_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqGetter_Set_fnRecorder) Any() *MoqGetter_Set_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	return &MoqGetter_Set_anyParams{Recorder: r}
}

func (a *MoqGetter_Set_anyParams) Param1() *MoqGetter_Set_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqGetter_Set_fnRecorder) Seq() *MoqGetter_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqGetter_Set_fnRecorder) NoSeq() *MoqGetter_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqGetter_Set_fnRecorder) ReturnResults(result1 error) *MoqGetter_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqGetter_Set_doFn
		DoReturnFn MoqGetter_Set_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqGetter_Set_fnRecorder) AndDo(fn MoqGetter_Set_doFn) *MoqGetter_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqGetter_Set_fnRecorder) DoReturnResults(fn MoqGetter_Set_doReturnFn) *MoqGetter_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqGetter_Set_doFn
		DoReturnFn MoqGetter_Set_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqGetter_Set_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqGetter_Set_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Set {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqGetter_Set_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqGetter_Set_paramsKey]*MoqGetter_Set_results{},
		}
		r.Moq.ResultsByParams_Set = append(r.Moq.ResultsByParams_Set, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Set) {
			copy(r.Moq.ResultsByParams_Set[insertAt+1:], r.Moq.ResultsByParams_Set[insertAt:0])
			r.Moq.ResultsByParams_Set[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Set(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqGetter_Set_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqGetter_Set_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqGetter_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqGetter_Set_doFn
				DoReturnFn MoqGetter_Set_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqGetter) PrettyParams_Set(params MoqGetter_Set_params) string {
	return fmt.Sprintf("Set(%#v)", params.Param1)
}

func (m *MoqGetter) ParamsKey_Set(params MoqGetter_Set_params, anyParams uint64) MoqGetter_Set_paramsKey {
	m.Scene.T.Helper()
	var param1Used string
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Set.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqGetter_Set_paramsKey{
		Params: struct{ Param1 string }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqGetter_recorder) Get() *MoqGetter_Get_fnRecorder {
	return &MoqGetter_Get_fnRecorder{
		Params:   MoqGetter_Get_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqGetter_Get_fnRecorder) Any() *MoqGetter_Get_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Get(r.Params))
		return nil
	}
	return &MoqGetter_Get_anyParams{Recorder: r}
}

func (r *MoqGetter_Get_fnRecorder) Seq() *MoqGetter_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Get(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqGetter_Get_fnRecorder) NoSeq() *MoqGetter_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Get(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqGetter_Get_fnRecorder) ReturnResults(result1 interface{}) *MoqGetter_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 interface{}
		}
		Sequence   uint32
		DoFn       MoqGetter_Get_doFn
		DoReturnFn MoqGetter_Get_doReturnFn
	}{
		Values: &struct {
			Result1 interface{}
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqGetter_Get_fnRecorder) AndDo(fn MoqGetter_Get_doFn) *MoqGetter_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqGetter_Get_fnRecorder) DoReturnResults(fn MoqGetter_Get_doReturnFn) *MoqGetter_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 interface{}
		}
		Sequence   uint32
		DoFn       MoqGetter_Get_doFn
		DoReturnFn MoqGetter_Get_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqGetter_Get_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqGetter_Get_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Get {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqGetter_Get_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqGetter_Get_paramsKey]*MoqGetter_Get_results{},
		}
		r.Moq.ResultsByParams_Get = append(r.Moq.ResultsByParams_Get, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Get) {
			copy(r.Moq.ResultsByParams_Get[insertAt+1:], r.Moq.ResultsByParams_Get[insertAt:0])
			r.Moq.ResultsByParams_Get[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Get(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqGetter_Get_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqGetter_Get_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqGetter_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 interface{}
				}
				Sequence   uint32
				DoFn       MoqGetter_Get_doFn
				DoReturnFn MoqGetter_Get_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqGetter) PrettyParams_Get(params MoqGetter_Get_params) string { return fmt.Sprintf("Get()") }

func (m *MoqGetter) ParamsKey_Get(params MoqGetter_Get_params, anyParams uint64) MoqGetter_Get_paramsKey {
	m.Scene.T.Helper()
	return MoqGetter_Get_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqGetter) Reset() {
	m.ResultsByParams_String = nil
	m.ResultsByParams_Set = nil
	m.ResultsByParams_Get = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqGetter) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Set {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Set(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Get {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Get(results.Params))
			}
		}
	}
}
