// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package flag

import (
	"flag"
	"fmt"
	"io"
	"math/bits"
	"sync/atomic"
	"time"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that flag.FlagSet_starGenType is mocked
// completely
var _ FlagSet_starGenType = (*MoqFlagSet_starGenType_mock)(nil)

// FlagSet_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type FlagSet_starGenType interface {
	Output() io.Writer
	Name() string
	ErrorHandling() flag.ErrorHandling
	SetOutput(output io.Writer)
	VisitAll(fn func(*flag.Flag))
	Visit(fn func(*flag.Flag))
	Lookup(name string) *flag.Flag
	Set(name, value string) error
	PrintDefaults()
	NFlag() int
	Arg(i int) string
	NArg() int
	Args() []string
	BoolVar(p *bool, name string, value bool, usage string)
	Bool(name string, value bool, usage string) *bool
	IntVar(p *int, name string, value int, usage string)
	Int(name string, value int, usage string) *int
	Int64Var(p *int64, name string, value int64, usage string)
	Int64(name string, value int64, usage string) *int64
	UintVar(p *uint, name string, value uint, usage string)
	Uint(name string, value uint, usage string) *uint
	Uint64Var(p *uint64, name string, value uint64, usage string)
	Uint64(name string, value uint64, usage string) *uint64
	StringVar(p *string, name string, value string, usage string)
	String(name string, value string, usage string) *string
	Float64Var(p *float64, name string, value float64, usage string)
	Float64(name string, value float64, usage string) *float64
	DurationVar(p *time.Duration, name string, value time.Duration, usage string)
	Duration(name string, value time.Duration, usage string) *time.Duration
	Var(value flag.Value, name string, usage string)
	Parse(arguments []string) error
	Parsed() bool
	Init(name string, errorHandling flag.ErrorHandling)
}

// MoqFlagSet_starGenType holds the state of a moq of the FlagSet_starGenType
// type
type MoqFlagSet_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqFlagSet_starGenType_mock

	ResultsByParams_Output        []MoqFlagSet_starGenType_Output_resultsByParams
	ResultsByParams_Name          []MoqFlagSet_starGenType_Name_resultsByParams
	ResultsByParams_ErrorHandling []MoqFlagSet_starGenType_ErrorHandling_resultsByParams
	ResultsByParams_SetOutput     []MoqFlagSet_starGenType_SetOutput_resultsByParams
	ResultsByParams_VisitAll      []MoqFlagSet_starGenType_VisitAll_resultsByParams
	ResultsByParams_Visit         []MoqFlagSet_starGenType_Visit_resultsByParams
	ResultsByParams_Lookup        []MoqFlagSet_starGenType_Lookup_resultsByParams
	ResultsByParams_Set           []MoqFlagSet_starGenType_Set_resultsByParams
	ResultsByParams_PrintDefaults []MoqFlagSet_starGenType_PrintDefaults_resultsByParams
	ResultsByParams_NFlag         []MoqFlagSet_starGenType_NFlag_resultsByParams
	ResultsByParams_Arg           []MoqFlagSet_starGenType_Arg_resultsByParams
	ResultsByParams_NArg          []MoqFlagSet_starGenType_NArg_resultsByParams
	ResultsByParams_Args          []MoqFlagSet_starGenType_Args_resultsByParams
	ResultsByParams_BoolVar       []MoqFlagSet_starGenType_BoolVar_resultsByParams
	ResultsByParams_Bool          []MoqFlagSet_starGenType_Bool_resultsByParams
	ResultsByParams_IntVar        []MoqFlagSet_starGenType_IntVar_resultsByParams
	ResultsByParams_Int           []MoqFlagSet_starGenType_Int_resultsByParams
	ResultsByParams_Int64Var      []MoqFlagSet_starGenType_Int64Var_resultsByParams
	ResultsByParams_Int64         []MoqFlagSet_starGenType_Int64_resultsByParams
	ResultsByParams_UintVar       []MoqFlagSet_starGenType_UintVar_resultsByParams
	ResultsByParams_Uint          []MoqFlagSet_starGenType_Uint_resultsByParams
	ResultsByParams_Uint64Var     []MoqFlagSet_starGenType_Uint64Var_resultsByParams
	ResultsByParams_Uint64        []MoqFlagSet_starGenType_Uint64_resultsByParams
	ResultsByParams_StringVar     []MoqFlagSet_starGenType_StringVar_resultsByParams
	ResultsByParams_String        []MoqFlagSet_starGenType_String_resultsByParams
	ResultsByParams_Float64Var    []MoqFlagSet_starGenType_Float64Var_resultsByParams
	ResultsByParams_Float64       []MoqFlagSet_starGenType_Float64_resultsByParams
	ResultsByParams_DurationVar   []MoqFlagSet_starGenType_DurationVar_resultsByParams
	ResultsByParams_Duration      []MoqFlagSet_starGenType_Duration_resultsByParams
	ResultsByParams_Var           []MoqFlagSet_starGenType_Var_resultsByParams
	ResultsByParams_Parse         []MoqFlagSet_starGenType_Parse_resultsByParams
	ResultsByParams_Parsed        []MoqFlagSet_starGenType_Parsed_resultsByParams
	ResultsByParams_Init          []MoqFlagSet_starGenType_Init_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Output        struct{}
			Name          struct{}
			ErrorHandling struct{}
			SetOutput     struct {
				Output moq.ParamIndexing
			}
			VisitAll struct {
				Fn moq.ParamIndexing
			}
			Visit struct {
				Fn moq.ParamIndexing
			}
			Lookup struct {
				Name moq.ParamIndexing
			}
			Set struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
			}
			PrintDefaults struct{}
			NFlag         struct{}
			Arg           struct {
				Param1 moq.ParamIndexing
			}
			NArg    struct{}
			Args    struct{}
			BoolVar struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Bool struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			IntVar struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Int struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Int64Var struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Int64 struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			UintVar struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Uint struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Uint64Var struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Uint64 struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			StringVar struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			String struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Float64Var struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Float64 struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			DurationVar struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Duration struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Var struct {
				Value moq.ParamIndexing
				Name  moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Parse struct {
				Arguments moq.ParamIndexing
			}
			Parsed struct{}
			Init   struct {
				Name          moq.ParamIndexing
				ErrorHandling moq.ParamIndexing
			}
		}
	}
	// MoqFlagSet_starGenType_mock isolates the mock interface of the
}

// FlagSet_starGenType type
type MoqFlagSet_starGenType_mock struct {
	Moq *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_recorder isolates the recorder interface of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_recorder struct {
	Moq *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Output_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Output_params struct{}

// MoqFlagSet_starGenType_Output_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Output_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFlagSet_starGenType_Output_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Output_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Output_paramsKey]*MoqFlagSet_starGenType_Output_results
}

// MoqFlagSet_starGenType_Output_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Output_doFn func()

// MoqFlagSet_starGenType_Output_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Output_doReturnFn func() io.Writer

// MoqFlagSet_starGenType_Output_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Output_results struct {
	Params  MoqFlagSet_starGenType_Output_params
	Results []struct {
		Values *struct {
			Result1 io.Writer
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Output_doFn
		DoReturnFn MoqFlagSet_starGenType_Output_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Output_fnRecorder routes recorded function calls to
// the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Output_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Output_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Output_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Output_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_Output_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Output_fnRecorder
}

// MoqFlagSet_starGenType_Name_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Name_params struct{}

// MoqFlagSet_starGenType_Name_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Name_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFlagSet_starGenType_Name_resultsByParams contains the results for a given
// set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Name_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Name_paramsKey]*MoqFlagSet_starGenType_Name_results
}

// MoqFlagSet_starGenType_Name_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Name_doFn func()

// MoqFlagSet_starGenType_Name_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Name_doReturnFn func() string

// MoqFlagSet_starGenType_Name_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Name_results struct {
	Params  MoqFlagSet_starGenType_Name_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Name_doFn
		DoReturnFn MoqFlagSet_starGenType_Name_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Name_fnRecorder routes recorded function calls to the
// MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Name_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Name_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Name_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Name_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_Name_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Name_fnRecorder
}

// MoqFlagSet_starGenType_ErrorHandling_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_ErrorHandling_params struct{}

// MoqFlagSet_starGenType_ErrorHandling_paramsKey holds the map key params of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_ErrorHandling_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFlagSet_starGenType_ErrorHandling_resultsByParams contains the results
// for a given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_ErrorHandling_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_ErrorHandling_paramsKey]*MoqFlagSet_starGenType_ErrorHandling_results
}

// MoqFlagSet_starGenType_ErrorHandling_doFn defines the type of function
// needed when calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_ErrorHandling_doFn func()

// MoqFlagSet_starGenType_ErrorHandling_doReturnFn defines the type of function
// needed when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_ErrorHandling_doReturnFn func() flag.ErrorHandling

// MoqFlagSet_starGenType_ErrorHandling_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_ErrorHandling_results struct {
	Params  MoqFlagSet_starGenType_ErrorHandling_params
	Results []struct {
		Values *struct {
			Result1 flag.ErrorHandling
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_ErrorHandling_doFn
		DoReturnFn MoqFlagSet_starGenType_ErrorHandling_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_ErrorHandling_fnRecorder routes recorded function
// calls to the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_ErrorHandling_fnRecorder struct {
	Params    MoqFlagSet_starGenType_ErrorHandling_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_ErrorHandling_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_ErrorHandling_anyParams isolates the any params
// functions of the FlagSet_starGenType type
type MoqFlagSet_starGenType_ErrorHandling_anyParams struct {
	Recorder *MoqFlagSet_starGenType_ErrorHandling_fnRecorder
}

// MoqFlagSet_starGenType_SetOutput_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_SetOutput_params struct{ Output io.Writer }

// MoqFlagSet_starGenType_SetOutput_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_SetOutput_paramsKey struct {
	Params struct{ Output io.Writer }
	Hashes struct{ Output hash.Hash }
}

// MoqFlagSet_starGenType_SetOutput_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_SetOutput_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_SetOutput_paramsKey]*MoqFlagSet_starGenType_SetOutput_results
}

// MoqFlagSet_starGenType_SetOutput_doFn defines the type of function needed
// when calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_SetOutput_doFn func(output io.Writer)

// MoqFlagSet_starGenType_SetOutput_doReturnFn defines the type of function
// needed when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_SetOutput_doReturnFn func(output io.Writer)

// MoqFlagSet_starGenType_SetOutput_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_SetOutput_results struct {
	Params  MoqFlagSet_starGenType_SetOutput_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_SetOutput_doFn
		DoReturnFn MoqFlagSet_starGenType_SetOutput_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_SetOutput_fnRecorder routes recorded function calls
// to the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_SetOutput_fnRecorder struct {
	Params    MoqFlagSet_starGenType_SetOutput_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_SetOutput_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_SetOutput_anyParams isolates the any params functions
// of the FlagSet_starGenType type
type MoqFlagSet_starGenType_SetOutput_anyParams struct {
	Recorder *MoqFlagSet_starGenType_SetOutput_fnRecorder
}

// MoqFlagSet_starGenType_VisitAll_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_VisitAll_params struct{ Fn func(*flag.Flag) }

// MoqFlagSet_starGenType_VisitAll_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_VisitAll_paramsKey struct {
	Params struct{}
	Hashes struct{ Fn hash.Hash }
}

// MoqFlagSet_starGenType_VisitAll_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_VisitAll_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_VisitAll_paramsKey]*MoqFlagSet_starGenType_VisitAll_results
}

// MoqFlagSet_starGenType_VisitAll_doFn defines the type of function needed
// when calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_VisitAll_doFn func(fn func(*flag.Flag))

// MoqFlagSet_starGenType_VisitAll_doReturnFn defines the type of function
// needed when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_VisitAll_doReturnFn func(fn func(*flag.Flag))

// MoqFlagSet_starGenType_VisitAll_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_VisitAll_results struct {
	Params  MoqFlagSet_starGenType_VisitAll_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_VisitAll_doFn
		DoReturnFn MoqFlagSet_starGenType_VisitAll_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_VisitAll_fnRecorder routes recorded function calls to
// the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_VisitAll_fnRecorder struct {
	Params    MoqFlagSet_starGenType_VisitAll_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_VisitAll_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_VisitAll_anyParams isolates the any params functions
// of the FlagSet_starGenType type
type MoqFlagSet_starGenType_VisitAll_anyParams struct {
	Recorder *MoqFlagSet_starGenType_VisitAll_fnRecorder
}

// MoqFlagSet_starGenType_Visit_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Visit_params struct{ Fn func(*flag.Flag) }

// MoqFlagSet_starGenType_Visit_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Visit_paramsKey struct {
	Params struct{}
	Hashes struct{ Fn hash.Hash }
}

// MoqFlagSet_starGenType_Visit_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Visit_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Visit_paramsKey]*MoqFlagSet_starGenType_Visit_results
}

// MoqFlagSet_starGenType_Visit_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Visit_doFn func(fn func(*flag.Flag))

// MoqFlagSet_starGenType_Visit_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Visit_doReturnFn func(fn func(*flag.Flag))

// MoqFlagSet_starGenType_Visit_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Visit_results struct {
	Params  MoqFlagSet_starGenType_Visit_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Visit_doFn
		DoReturnFn MoqFlagSet_starGenType_Visit_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Visit_fnRecorder routes recorded function calls to
// the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Visit_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Visit_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Visit_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Visit_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_Visit_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Visit_fnRecorder
}

// MoqFlagSet_starGenType_Lookup_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Lookup_params struct{ Name string }

// MoqFlagSet_starGenType_Lookup_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Lookup_paramsKey struct {
	Params struct{ Name string }
	Hashes struct{ Name hash.Hash }
}

// MoqFlagSet_starGenType_Lookup_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Lookup_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Lookup_paramsKey]*MoqFlagSet_starGenType_Lookup_results
}

// MoqFlagSet_starGenType_Lookup_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Lookup_doFn func(name string)

// MoqFlagSet_starGenType_Lookup_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Lookup_doReturnFn func(name string) *flag.Flag

// MoqFlagSet_starGenType_Lookup_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Lookup_results struct {
	Params  MoqFlagSet_starGenType_Lookup_params
	Results []struct {
		Values *struct {
			Result1 *flag.Flag
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Lookup_doFn
		DoReturnFn MoqFlagSet_starGenType_Lookup_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Lookup_fnRecorder routes recorded function calls to
// the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Lookup_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Lookup_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Lookup_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Lookup_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_Lookup_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Lookup_fnRecorder
}

// MoqFlagSet_starGenType_Set_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Set_params struct{ Name, Value string }

// MoqFlagSet_starGenType_Set_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Set_paramsKey struct {
	Params struct{ Name, Value string }
	Hashes struct{ Name, Value hash.Hash }
}

// MoqFlagSet_starGenType_Set_resultsByParams contains the results for a given
// set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Set_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Set_paramsKey]*MoqFlagSet_starGenType_Set_results
}

// MoqFlagSet_starGenType_Set_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Set_doFn func(name, value string)

// MoqFlagSet_starGenType_Set_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Set_doReturnFn func(name, value string) error

// MoqFlagSet_starGenType_Set_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Set_results struct {
	Params  MoqFlagSet_starGenType_Set_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Set_doFn
		DoReturnFn MoqFlagSet_starGenType_Set_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Set_fnRecorder routes recorded function calls to the
// MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Set_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Set_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Set_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Set_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_Set_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Set_fnRecorder
}

// MoqFlagSet_starGenType_PrintDefaults_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_PrintDefaults_params struct{}

// MoqFlagSet_starGenType_PrintDefaults_paramsKey holds the map key params of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_PrintDefaults_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFlagSet_starGenType_PrintDefaults_resultsByParams contains the results
// for a given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_PrintDefaults_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_PrintDefaults_paramsKey]*MoqFlagSet_starGenType_PrintDefaults_results
}

// MoqFlagSet_starGenType_PrintDefaults_doFn defines the type of function
// needed when calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_PrintDefaults_doFn func()

// MoqFlagSet_starGenType_PrintDefaults_doReturnFn defines the type of function
// needed when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_PrintDefaults_doReturnFn func()

// MoqFlagSet_starGenType_PrintDefaults_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_PrintDefaults_results struct {
	Params  MoqFlagSet_starGenType_PrintDefaults_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_PrintDefaults_doFn
		DoReturnFn MoqFlagSet_starGenType_PrintDefaults_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_PrintDefaults_fnRecorder routes recorded function
// calls to the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_PrintDefaults_fnRecorder struct {
	Params    MoqFlagSet_starGenType_PrintDefaults_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_PrintDefaults_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_PrintDefaults_anyParams isolates the any params
// functions of the FlagSet_starGenType type
type MoqFlagSet_starGenType_PrintDefaults_anyParams struct {
	Recorder *MoqFlagSet_starGenType_PrintDefaults_fnRecorder
}

// MoqFlagSet_starGenType_NFlag_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_NFlag_params struct{}

// MoqFlagSet_starGenType_NFlag_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_NFlag_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFlagSet_starGenType_NFlag_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_NFlag_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_NFlag_paramsKey]*MoqFlagSet_starGenType_NFlag_results
}

// MoqFlagSet_starGenType_NFlag_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_NFlag_doFn func()

// MoqFlagSet_starGenType_NFlag_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_NFlag_doReturnFn func() int

// MoqFlagSet_starGenType_NFlag_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_NFlag_results struct {
	Params  MoqFlagSet_starGenType_NFlag_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_NFlag_doFn
		DoReturnFn MoqFlagSet_starGenType_NFlag_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_NFlag_fnRecorder routes recorded function calls to
// the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_NFlag_fnRecorder struct {
	Params    MoqFlagSet_starGenType_NFlag_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_NFlag_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_NFlag_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_NFlag_anyParams struct {
	Recorder *MoqFlagSet_starGenType_NFlag_fnRecorder
}

// MoqFlagSet_starGenType_Arg_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Arg_params struct{ Param1 int }

// MoqFlagSet_starGenType_Arg_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Arg_paramsKey struct {
	Params struct{ Param1 int }
	Hashes struct{ Param1 hash.Hash }
}

// MoqFlagSet_starGenType_Arg_resultsByParams contains the results for a given
// set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Arg_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Arg_paramsKey]*MoqFlagSet_starGenType_Arg_results
}

// MoqFlagSet_starGenType_Arg_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Arg_doFn func(i int)

// MoqFlagSet_starGenType_Arg_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Arg_doReturnFn func(i int) string

// MoqFlagSet_starGenType_Arg_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Arg_results struct {
	Params  MoqFlagSet_starGenType_Arg_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Arg_doFn
		DoReturnFn MoqFlagSet_starGenType_Arg_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Arg_fnRecorder routes recorded function calls to the
// MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Arg_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Arg_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Arg_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Arg_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_Arg_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Arg_fnRecorder
}

// MoqFlagSet_starGenType_NArg_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_NArg_params struct{}

// MoqFlagSet_starGenType_NArg_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_NArg_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFlagSet_starGenType_NArg_resultsByParams contains the results for a given
// set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_NArg_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_NArg_paramsKey]*MoqFlagSet_starGenType_NArg_results
}

// MoqFlagSet_starGenType_NArg_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_NArg_doFn func()

// MoqFlagSet_starGenType_NArg_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_NArg_doReturnFn func() int

// MoqFlagSet_starGenType_NArg_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_NArg_results struct {
	Params  MoqFlagSet_starGenType_NArg_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_NArg_doFn
		DoReturnFn MoqFlagSet_starGenType_NArg_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_NArg_fnRecorder routes recorded function calls to the
// MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_NArg_fnRecorder struct {
	Params    MoqFlagSet_starGenType_NArg_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_NArg_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_NArg_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_NArg_anyParams struct {
	Recorder *MoqFlagSet_starGenType_NArg_fnRecorder
}

// MoqFlagSet_starGenType_Args_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Args_params struct{}

// MoqFlagSet_starGenType_Args_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Args_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFlagSet_starGenType_Args_resultsByParams contains the results for a given
// set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Args_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Args_paramsKey]*MoqFlagSet_starGenType_Args_results
}

// MoqFlagSet_starGenType_Args_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Args_doFn func()

// MoqFlagSet_starGenType_Args_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Args_doReturnFn func() []string

// MoqFlagSet_starGenType_Args_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Args_results struct {
	Params  MoqFlagSet_starGenType_Args_params
	Results []struct {
		Values *struct {
			Result1 []string
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Args_doFn
		DoReturnFn MoqFlagSet_starGenType_Args_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Args_fnRecorder routes recorded function calls to the
// MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Args_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Args_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Args_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Args_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_Args_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Args_fnRecorder
}

// MoqFlagSet_starGenType_BoolVar_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_BoolVar_params struct {
	P     *bool
	Name  string
	Value bool
	Usage string
}

// MoqFlagSet_starGenType_BoolVar_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_BoolVar_paramsKey struct {
	Params struct {
		P     *bool
		Name  string
		Value bool
		Usage string
	}
	Hashes struct {
		P     hash.Hash
		Name  hash.Hash
		Value hash.Hash
		Usage hash.Hash
	}
}

// MoqFlagSet_starGenType_BoolVar_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_BoolVar_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_BoolVar_paramsKey]*MoqFlagSet_starGenType_BoolVar_results
}

// MoqFlagSet_starGenType_BoolVar_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_BoolVar_doFn func(p *bool, name string, value bool, usage string)

// MoqFlagSet_starGenType_BoolVar_doReturnFn defines the type of function
// needed when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_BoolVar_doReturnFn func(p *bool, name string, value bool, usage string)

// MoqFlagSet_starGenType_BoolVar_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_BoolVar_results struct {
	Params  MoqFlagSet_starGenType_BoolVar_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_BoolVar_doFn
		DoReturnFn MoqFlagSet_starGenType_BoolVar_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_BoolVar_fnRecorder routes recorded function calls to
// the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_BoolVar_fnRecorder struct {
	Params    MoqFlagSet_starGenType_BoolVar_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_BoolVar_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_BoolVar_anyParams isolates the any params functions
// of the FlagSet_starGenType type
type MoqFlagSet_starGenType_BoolVar_anyParams struct {
	Recorder *MoqFlagSet_starGenType_BoolVar_fnRecorder
}

// MoqFlagSet_starGenType_Bool_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Bool_params struct {
	Name  string
	Value bool
	Usage string
}

// MoqFlagSet_starGenType_Bool_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Bool_paramsKey struct {
	Params struct {
		Name  string
		Value bool
		Usage string
	}
	Hashes struct {
		Name  hash.Hash
		Value hash.Hash
		Usage hash.Hash
	}
}

// MoqFlagSet_starGenType_Bool_resultsByParams contains the results for a given
// set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Bool_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Bool_paramsKey]*MoqFlagSet_starGenType_Bool_results
}

// MoqFlagSet_starGenType_Bool_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Bool_doFn func(name string, value bool, usage string)

// MoqFlagSet_starGenType_Bool_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Bool_doReturnFn func(name string, value bool, usage string) *bool

// MoqFlagSet_starGenType_Bool_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Bool_results struct {
	Params  MoqFlagSet_starGenType_Bool_params
	Results []struct {
		Values *struct {
			Result1 *bool
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Bool_doFn
		DoReturnFn MoqFlagSet_starGenType_Bool_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Bool_fnRecorder routes recorded function calls to the
// MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Bool_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Bool_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Bool_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Bool_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_Bool_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Bool_fnRecorder
}

// MoqFlagSet_starGenType_IntVar_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_IntVar_params struct {
	P     *int
	Name  string
	Value int
	Usage string
}

// MoqFlagSet_starGenType_IntVar_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_IntVar_paramsKey struct {
	Params struct {
		P     *int
		Name  string
		Value int
		Usage string
	}
	Hashes struct {
		P     hash.Hash
		Name  hash.Hash
		Value hash.Hash
		Usage hash.Hash
	}
}

// MoqFlagSet_starGenType_IntVar_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_IntVar_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_IntVar_paramsKey]*MoqFlagSet_starGenType_IntVar_results
}

// MoqFlagSet_starGenType_IntVar_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_IntVar_doFn func(p *int, name string, value int, usage string)

// MoqFlagSet_starGenType_IntVar_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_IntVar_doReturnFn func(p *int, name string, value int, usage string)

// MoqFlagSet_starGenType_IntVar_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_IntVar_results struct {
	Params  MoqFlagSet_starGenType_IntVar_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_IntVar_doFn
		DoReturnFn MoqFlagSet_starGenType_IntVar_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_IntVar_fnRecorder routes recorded function calls to
// the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_IntVar_fnRecorder struct {
	Params    MoqFlagSet_starGenType_IntVar_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_IntVar_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_IntVar_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_IntVar_anyParams struct {
	Recorder *MoqFlagSet_starGenType_IntVar_fnRecorder
}

// MoqFlagSet_starGenType_Int_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Int_params struct {
	Name  string
	Value int
	Usage string
}

// MoqFlagSet_starGenType_Int_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Int_paramsKey struct {
	Params struct {
		Name  string
		Value int
		Usage string
	}
	Hashes struct {
		Name  hash.Hash
		Value hash.Hash
		Usage hash.Hash
	}
}

// MoqFlagSet_starGenType_Int_resultsByParams contains the results for a given
// set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Int_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Int_paramsKey]*MoqFlagSet_starGenType_Int_results
}

// MoqFlagSet_starGenType_Int_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Int_doFn func(name string, value int, usage string)

// MoqFlagSet_starGenType_Int_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Int_doReturnFn func(name string, value int, usage string) *int

// MoqFlagSet_starGenType_Int_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Int_results struct {
	Params  MoqFlagSet_starGenType_Int_params
	Results []struct {
		Values *struct {
			Result1 *int
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Int_doFn
		DoReturnFn MoqFlagSet_starGenType_Int_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Int_fnRecorder routes recorded function calls to the
// MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Int_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Int_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Int_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Int_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_Int_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Int_fnRecorder
}

// MoqFlagSet_starGenType_Int64Var_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Int64Var_params struct {
	P     *int64
	Name  string
	Value int64
	Usage string
}

// MoqFlagSet_starGenType_Int64Var_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Int64Var_paramsKey struct {
	Params struct {
		P     *int64
		Name  string
		Value int64
		Usage string
	}
	Hashes struct {
		P     hash.Hash
		Name  hash.Hash
		Value hash.Hash
		Usage hash.Hash
	}
}

// MoqFlagSet_starGenType_Int64Var_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Int64Var_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Int64Var_paramsKey]*MoqFlagSet_starGenType_Int64Var_results
}

// MoqFlagSet_starGenType_Int64Var_doFn defines the type of function needed
// when calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Int64Var_doFn func(p *int64, name string, value int64, usage string)

// MoqFlagSet_starGenType_Int64Var_doReturnFn defines the type of function
// needed when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Int64Var_doReturnFn func(p *int64, name string, value int64, usage string)

// MoqFlagSet_starGenType_Int64Var_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Int64Var_results struct {
	Params  MoqFlagSet_starGenType_Int64Var_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Int64Var_doFn
		DoReturnFn MoqFlagSet_starGenType_Int64Var_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Int64Var_fnRecorder routes recorded function calls to
// the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Int64Var_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Int64Var_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Int64Var_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Int64Var_anyParams isolates the any params functions
// of the FlagSet_starGenType type
type MoqFlagSet_starGenType_Int64Var_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Int64Var_fnRecorder
}

// MoqFlagSet_starGenType_Int64_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Int64_params struct {
	Name  string
	Value int64
	Usage string
}

// MoqFlagSet_starGenType_Int64_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Int64_paramsKey struct {
	Params struct {
		Name  string
		Value int64
		Usage string
	}
	Hashes struct {
		Name  hash.Hash
		Value hash.Hash
		Usage hash.Hash
	}
}

// MoqFlagSet_starGenType_Int64_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Int64_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Int64_paramsKey]*MoqFlagSet_starGenType_Int64_results
}

// MoqFlagSet_starGenType_Int64_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Int64_doFn func(name string, value int64, usage string)

// MoqFlagSet_starGenType_Int64_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Int64_doReturnFn func(name string, value int64, usage string) *int64

// MoqFlagSet_starGenType_Int64_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Int64_results struct {
	Params  MoqFlagSet_starGenType_Int64_params
	Results []struct {
		Values *struct {
			Result1 *int64
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Int64_doFn
		DoReturnFn MoqFlagSet_starGenType_Int64_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Int64_fnRecorder routes recorded function calls to
// the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Int64_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Int64_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Int64_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Int64_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_Int64_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Int64_fnRecorder
}

// MoqFlagSet_starGenType_UintVar_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_UintVar_params struct {
	P     *uint
	Name  string
	Value uint
	Usage string
}

// MoqFlagSet_starGenType_UintVar_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_UintVar_paramsKey struct {
	Params struct {
		P     *uint
		Name  string
		Value uint
		Usage string
	}
	Hashes struct {
		P     hash.Hash
		Name  hash.Hash
		Value hash.Hash
		Usage hash.Hash
	}
}

// MoqFlagSet_starGenType_UintVar_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_UintVar_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_UintVar_paramsKey]*MoqFlagSet_starGenType_UintVar_results
}

// MoqFlagSet_starGenType_UintVar_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_UintVar_doFn func(p *uint, name string, value uint, usage string)

// MoqFlagSet_starGenType_UintVar_doReturnFn defines the type of function
// needed when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_UintVar_doReturnFn func(p *uint, name string, value uint, usage string)

// MoqFlagSet_starGenType_UintVar_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_UintVar_results struct {
	Params  MoqFlagSet_starGenType_UintVar_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_UintVar_doFn
		DoReturnFn MoqFlagSet_starGenType_UintVar_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_UintVar_fnRecorder routes recorded function calls to
// the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_UintVar_fnRecorder struct {
	Params    MoqFlagSet_starGenType_UintVar_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_UintVar_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_UintVar_anyParams isolates the any params functions
// of the FlagSet_starGenType type
type MoqFlagSet_starGenType_UintVar_anyParams struct {
	Recorder *MoqFlagSet_starGenType_UintVar_fnRecorder
}

// MoqFlagSet_starGenType_Uint_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint_params struct {
	Name  string
	Value uint
	Usage string
}

// MoqFlagSet_starGenType_Uint_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint_paramsKey struct {
	Params struct {
		Name  string
		Value uint
		Usage string
	}
	Hashes struct {
		Name  hash.Hash
		Value hash.Hash
		Usage hash.Hash
	}
}

// MoqFlagSet_starGenType_Uint_resultsByParams contains the results for a given
// set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Uint_paramsKey]*MoqFlagSet_starGenType_Uint_results
}

// MoqFlagSet_starGenType_Uint_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint_doFn func(name string, value uint, usage string)

// MoqFlagSet_starGenType_Uint_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint_doReturnFn func(name string, value uint, usage string) *uint

// MoqFlagSet_starGenType_Uint_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint_results struct {
	Params  MoqFlagSet_starGenType_Uint_params
	Results []struct {
		Values *struct {
			Result1 *uint
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Uint_doFn
		DoReturnFn MoqFlagSet_starGenType_Uint_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Uint_fnRecorder routes recorded function calls to the
// MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Uint_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Uint_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Uint_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Uint_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Uint_fnRecorder
}

// MoqFlagSet_starGenType_Uint64Var_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint64Var_params struct {
	P     *uint64
	Name  string
	Value uint64
	Usage string
}

// MoqFlagSet_starGenType_Uint64Var_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint64Var_paramsKey struct {
	Params struct {
		P     *uint64
		Name  string
		Value uint64
		Usage string
	}
	Hashes struct {
		P     hash.Hash
		Name  hash.Hash
		Value hash.Hash
		Usage hash.Hash
	}
}

// MoqFlagSet_starGenType_Uint64Var_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint64Var_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Uint64Var_paramsKey]*MoqFlagSet_starGenType_Uint64Var_results
}

// MoqFlagSet_starGenType_Uint64Var_doFn defines the type of function needed
// when calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint64Var_doFn func(p *uint64, name string, value uint64, usage string)

// MoqFlagSet_starGenType_Uint64Var_doReturnFn defines the type of function
// needed when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint64Var_doReturnFn func(p *uint64, name string, value uint64, usage string)

// MoqFlagSet_starGenType_Uint64Var_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint64Var_results struct {
	Params  MoqFlagSet_starGenType_Uint64Var_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Uint64Var_doFn
		DoReturnFn MoqFlagSet_starGenType_Uint64Var_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Uint64Var_fnRecorder routes recorded function calls
// to the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Uint64Var_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Uint64Var_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Uint64Var_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Uint64Var_anyParams isolates the any params functions
// of the FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint64Var_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Uint64Var_fnRecorder
}

// MoqFlagSet_starGenType_Uint64_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint64_params struct {
	Name  string
	Value uint64
	Usage string
}

// MoqFlagSet_starGenType_Uint64_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint64_paramsKey struct {
	Params struct {
		Name  string
		Value uint64
		Usage string
	}
	Hashes struct {
		Name  hash.Hash
		Value hash.Hash
		Usage hash.Hash
	}
}

// MoqFlagSet_starGenType_Uint64_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint64_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Uint64_paramsKey]*MoqFlagSet_starGenType_Uint64_results
}

// MoqFlagSet_starGenType_Uint64_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint64_doFn func(name string, value uint64, usage string)

// MoqFlagSet_starGenType_Uint64_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint64_doReturnFn func(name string, value uint64, usage string) *uint64

// MoqFlagSet_starGenType_Uint64_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint64_results struct {
	Params  MoqFlagSet_starGenType_Uint64_params
	Results []struct {
		Values *struct {
			Result1 *uint64
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Uint64_doFn
		DoReturnFn MoqFlagSet_starGenType_Uint64_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Uint64_fnRecorder routes recorded function calls to
// the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Uint64_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Uint64_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Uint64_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Uint64_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_Uint64_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Uint64_fnRecorder
}

// MoqFlagSet_starGenType_StringVar_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_StringVar_params struct {
	P     *string
	Name  string
	Value string
	Usage string
}

// MoqFlagSet_starGenType_StringVar_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_StringVar_paramsKey struct {
	Params struct {
		P     *string
		Name  string
		Value string
		Usage string
	}
	Hashes struct {
		P     hash.Hash
		Name  hash.Hash
		Value hash.Hash
		Usage hash.Hash
	}
}

// MoqFlagSet_starGenType_StringVar_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_StringVar_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_StringVar_paramsKey]*MoqFlagSet_starGenType_StringVar_results
}

// MoqFlagSet_starGenType_StringVar_doFn defines the type of function needed
// when calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_StringVar_doFn func(p *string, name string, value string, usage string)

// MoqFlagSet_starGenType_StringVar_doReturnFn defines the type of function
// needed when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_StringVar_doReturnFn func(p *string, name string, value string, usage string)

// MoqFlagSet_starGenType_StringVar_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_StringVar_results struct {
	Params  MoqFlagSet_starGenType_StringVar_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_StringVar_doFn
		DoReturnFn MoqFlagSet_starGenType_StringVar_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_StringVar_fnRecorder routes recorded function calls
// to the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_StringVar_fnRecorder struct {
	Params    MoqFlagSet_starGenType_StringVar_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_StringVar_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_StringVar_anyParams isolates the any params functions
// of the FlagSet_starGenType type
type MoqFlagSet_starGenType_StringVar_anyParams struct {
	Recorder *MoqFlagSet_starGenType_StringVar_fnRecorder
}

// MoqFlagSet_starGenType_String_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_String_params struct {
	Name  string
	Value string
	Usage string
}

// MoqFlagSet_starGenType_String_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_String_paramsKey struct {
	Params struct {
		Name  string
		Value string
		Usage string
	}
	Hashes struct {
		Name  hash.Hash
		Value hash.Hash
		Usage hash.Hash
	}
}

// MoqFlagSet_starGenType_String_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_String_paramsKey]*MoqFlagSet_starGenType_String_results
}

// MoqFlagSet_starGenType_String_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_String_doFn func(name string, value string, usage string)

// MoqFlagSet_starGenType_String_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_String_doReturnFn func(name string, value string, usage string) *string

// MoqFlagSet_starGenType_String_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_String_results struct {
	Params  MoqFlagSet_starGenType_String_params
	Results []struct {
		Values *struct {
			Result1 *string
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_String_doFn
		DoReturnFn MoqFlagSet_starGenType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_String_fnRecorder routes recorded function calls to
// the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_String_fnRecorder struct {
	Params    MoqFlagSet_starGenType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_String_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_String_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_String_anyParams struct {
	Recorder *MoqFlagSet_starGenType_String_fnRecorder
}

// MoqFlagSet_starGenType_Float64Var_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Float64Var_params struct {
	P     *float64
	Name  string
	Value float64
	Usage string
}

// MoqFlagSet_starGenType_Float64Var_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Float64Var_paramsKey struct {
	Params struct {
		P     *float64
		Name  string
		Value float64
		Usage string
	}
	Hashes struct {
		P     hash.Hash
		Name  hash.Hash
		Value hash.Hash
		Usage hash.Hash
	}
}

// MoqFlagSet_starGenType_Float64Var_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Float64Var_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Float64Var_paramsKey]*MoqFlagSet_starGenType_Float64Var_results
}

// MoqFlagSet_starGenType_Float64Var_doFn defines the type of function needed
// when calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Float64Var_doFn func(p *float64, name string, value float64, usage string)

// MoqFlagSet_starGenType_Float64Var_doReturnFn defines the type of function
// needed when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Float64Var_doReturnFn func(p *float64, name string, value float64, usage string)

// MoqFlagSet_starGenType_Float64Var_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Float64Var_results struct {
	Params  MoqFlagSet_starGenType_Float64Var_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Float64Var_doFn
		DoReturnFn MoqFlagSet_starGenType_Float64Var_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Float64Var_fnRecorder routes recorded function calls
// to the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Float64Var_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Float64Var_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Float64Var_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Float64Var_anyParams isolates the any params
// functions of the FlagSet_starGenType type
type MoqFlagSet_starGenType_Float64Var_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Float64Var_fnRecorder
}

// MoqFlagSet_starGenType_Float64_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Float64_params struct {
	Name  string
	Value float64
	Usage string
}

// MoqFlagSet_starGenType_Float64_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Float64_paramsKey struct {
	Params struct {
		Name  string
		Value float64
		Usage string
	}
	Hashes struct {
		Name  hash.Hash
		Value hash.Hash
		Usage hash.Hash
	}
}

// MoqFlagSet_starGenType_Float64_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Float64_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Float64_paramsKey]*MoqFlagSet_starGenType_Float64_results
}

// MoqFlagSet_starGenType_Float64_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Float64_doFn func(name string, value float64, usage string)

// MoqFlagSet_starGenType_Float64_doReturnFn defines the type of function
// needed when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Float64_doReturnFn func(name string, value float64, usage string) *float64

// MoqFlagSet_starGenType_Float64_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Float64_results struct {
	Params  MoqFlagSet_starGenType_Float64_params
	Results []struct {
		Values *struct {
			Result1 *float64
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Float64_doFn
		DoReturnFn MoqFlagSet_starGenType_Float64_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Float64_fnRecorder routes recorded function calls to
// the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Float64_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Float64_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Float64_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Float64_anyParams isolates the any params functions
// of the FlagSet_starGenType type
type MoqFlagSet_starGenType_Float64_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Float64_fnRecorder
}

// MoqFlagSet_starGenType_DurationVar_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_DurationVar_params struct {
	P     *time.Duration
	Name  string
	Value time.Duration
	Usage string
}

// MoqFlagSet_starGenType_DurationVar_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_DurationVar_paramsKey struct {
	Params struct {
		P     *time.Duration
		Name  string
		Value time.Duration
		Usage string
	}
	Hashes struct {
		P     hash.Hash
		Name  hash.Hash
		Value hash.Hash
		Usage hash.Hash
	}
}

// MoqFlagSet_starGenType_DurationVar_resultsByParams contains the results for
// a given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_DurationVar_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_DurationVar_paramsKey]*MoqFlagSet_starGenType_DurationVar_results
}

// MoqFlagSet_starGenType_DurationVar_doFn defines the type of function needed
// when calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_DurationVar_doFn func(p *time.Duration, name string, value time.Duration, usage string)

// MoqFlagSet_starGenType_DurationVar_doReturnFn defines the type of function
// needed when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_DurationVar_doReturnFn func(p *time.Duration, name string, value time.Duration, usage string)

// MoqFlagSet_starGenType_DurationVar_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_DurationVar_results struct {
	Params  MoqFlagSet_starGenType_DurationVar_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_DurationVar_doFn
		DoReturnFn MoqFlagSet_starGenType_DurationVar_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_DurationVar_fnRecorder routes recorded function calls
// to the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_DurationVar_fnRecorder struct {
	Params    MoqFlagSet_starGenType_DurationVar_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_DurationVar_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_DurationVar_anyParams isolates the any params
// functions of the FlagSet_starGenType type
type MoqFlagSet_starGenType_DurationVar_anyParams struct {
	Recorder *MoqFlagSet_starGenType_DurationVar_fnRecorder
}

// MoqFlagSet_starGenType_Duration_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Duration_params struct {
	Name  string
	Value time.Duration
	Usage string
}

// MoqFlagSet_starGenType_Duration_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Duration_paramsKey struct {
	Params struct {
		Name  string
		Value time.Duration
		Usage string
	}
	Hashes struct {
		Name  hash.Hash
		Value hash.Hash
		Usage hash.Hash
	}
}

// MoqFlagSet_starGenType_Duration_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Duration_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Duration_paramsKey]*MoqFlagSet_starGenType_Duration_results
}

// MoqFlagSet_starGenType_Duration_doFn defines the type of function needed
// when calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Duration_doFn func(name string, value time.Duration, usage string)

// MoqFlagSet_starGenType_Duration_doReturnFn defines the type of function
// needed when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Duration_doReturnFn func(name string, value time.Duration, usage string) *time.Duration

// MoqFlagSet_starGenType_Duration_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Duration_results struct {
	Params  MoqFlagSet_starGenType_Duration_params
	Results []struct {
		Values *struct {
			Result1 *time.Duration
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Duration_doFn
		DoReturnFn MoqFlagSet_starGenType_Duration_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Duration_fnRecorder routes recorded function calls to
// the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Duration_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Duration_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Duration_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Duration_anyParams isolates the any params functions
// of the FlagSet_starGenType type
type MoqFlagSet_starGenType_Duration_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Duration_fnRecorder
}

// MoqFlagSet_starGenType_Var_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Var_params struct {
	Value flag.Value
	Name  string
	Usage string
}

// MoqFlagSet_starGenType_Var_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Var_paramsKey struct {
	Params struct {
		Value flag.Value
		Name  string
		Usage string
	}
	Hashes struct {
		Value hash.Hash
		Name  hash.Hash
		Usage hash.Hash
	}
}

// MoqFlagSet_starGenType_Var_resultsByParams contains the results for a given
// set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Var_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Var_paramsKey]*MoqFlagSet_starGenType_Var_results
}

// MoqFlagSet_starGenType_Var_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Var_doFn func(value flag.Value, name string, usage string)

// MoqFlagSet_starGenType_Var_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Var_doReturnFn func(value flag.Value, name string, usage string)

// MoqFlagSet_starGenType_Var_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Var_results struct {
	Params  MoqFlagSet_starGenType_Var_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Var_doFn
		DoReturnFn MoqFlagSet_starGenType_Var_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Var_fnRecorder routes recorded function calls to the
// MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Var_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Var_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Var_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Var_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_Var_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Var_fnRecorder
}

// MoqFlagSet_starGenType_Parse_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Parse_params struct{ Arguments []string }

// MoqFlagSet_starGenType_Parse_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Parse_paramsKey struct {
	Params struct{}
	Hashes struct{ Arguments hash.Hash }
}

// MoqFlagSet_starGenType_Parse_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Parse_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Parse_paramsKey]*MoqFlagSet_starGenType_Parse_results
}

// MoqFlagSet_starGenType_Parse_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Parse_doFn func(arguments []string)

// MoqFlagSet_starGenType_Parse_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Parse_doReturnFn func(arguments []string) error

// MoqFlagSet_starGenType_Parse_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Parse_results struct {
	Params  MoqFlagSet_starGenType_Parse_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Parse_doFn
		DoReturnFn MoqFlagSet_starGenType_Parse_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Parse_fnRecorder routes recorded function calls to
// the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Parse_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Parse_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Parse_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Parse_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_Parse_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Parse_fnRecorder
}

// MoqFlagSet_starGenType_Parsed_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Parsed_params struct{}

// MoqFlagSet_starGenType_Parsed_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Parsed_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFlagSet_starGenType_Parsed_resultsByParams contains the results for a
// given set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Parsed_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Parsed_paramsKey]*MoqFlagSet_starGenType_Parsed_results
}

// MoqFlagSet_starGenType_Parsed_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Parsed_doFn func()

// MoqFlagSet_starGenType_Parsed_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Parsed_doReturnFn func() bool

// MoqFlagSet_starGenType_Parsed_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Parsed_results struct {
	Params  MoqFlagSet_starGenType_Parsed_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Parsed_doFn
		DoReturnFn MoqFlagSet_starGenType_Parsed_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Parsed_fnRecorder routes recorded function calls to
// the MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Parsed_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Parsed_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Parsed_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Parsed_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_Parsed_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Parsed_fnRecorder
}

// MoqFlagSet_starGenType_Init_params holds the params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Init_params struct {
	Name          string
	ErrorHandling flag.ErrorHandling
}

// MoqFlagSet_starGenType_Init_paramsKey holds the map key params of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Init_paramsKey struct {
	Params struct {
		Name          string
		ErrorHandling flag.ErrorHandling
	}
	Hashes struct {
		Name          hash.Hash
		ErrorHandling hash.Hash
	}
}

// MoqFlagSet_starGenType_Init_resultsByParams contains the results for a given
// set of parameters for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Init_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFlagSet_starGenType_Init_paramsKey]*MoqFlagSet_starGenType_Init_results
}

// MoqFlagSet_starGenType_Init_doFn defines the type of function needed when
// calling AndDo for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Init_doFn func(name string, errorHandling flag.ErrorHandling)

// MoqFlagSet_starGenType_Init_doReturnFn defines the type of function needed
// when calling DoReturnResults for the FlagSet_starGenType type
type MoqFlagSet_starGenType_Init_doReturnFn func(name string, errorHandling flag.ErrorHandling)

// MoqFlagSet_starGenType_Init_results holds the results of the
// FlagSet_starGenType type
type MoqFlagSet_starGenType_Init_results struct {
	Params  MoqFlagSet_starGenType_Init_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Init_doFn
		DoReturnFn MoqFlagSet_starGenType_Init_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFlagSet_starGenType_Init_fnRecorder routes recorded function calls to the
// MoqFlagSet_starGenType moq
type MoqFlagSet_starGenType_Init_fnRecorder struct {
	Params    MoqFlagSet_starGenType_Init_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFlagSet_starGenType_Init_results
	Moq       *MoqFlagSet_starGenType
}

// MoqFlagSet_starGenType_Init_anyParams isolates the any params functions of
// the FlagSet_starGenType type
type MoqFlagSet_starGenType_Init_anyParams struct {
	Recorder *MoqFlagSet_starGenType_Init_fnRecorder
}

// NewMoqFlagSet_starGenType creates a new moq of the FlagSet_starGenType type
func NewMoqFlagSet_starGenType(scene *moq.Scene, config *moq.Config) *MoqFlagSet_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqFlagSet_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqFlagSet_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Output        struct{}
				Name          struct{}
				ErrorHandling struct{}
				SetOutput     struct {
					Output moq.ParamIndexing
				}
				VisitAll struct {
					Fn moq.ParamIndexing
				}
				Visit struct {
					Fn moq.ParamIndexing
				}
				Lookup struct {
					Name moq.ParamIndexing
				}
				Set struct {
					Name  moq.ParamIndexing
					Value moq.ParamIndexing
				}
				PrintDefaults struct{}
				NFlag         struct{}
				Arg           struct {
					Param1 moq.ParamIndexing
				}
				NArg    struct{}
				Args    struct{}
				BoolVar struct {
					P     moq.ParamIndexing
					Name  moq.ParamIndexing
					Value moq.ParamIndexing
					Usage moq.ParamIndexing
				}
				Bool struct {
					Name  moq.ParamIndexing
					Value moq.ParamIndexing
					Usage moq.ParamIndexing
				}
				IntVar struct {
					P     moq.ParamIndexing
					Name  moq.ParamIndexing
					Value moq.ParamIndexing
					Usage moq.ParamIndexing
				}
				Int struct {
					Name  moq.ParamIndexing
					Value moq.ParamIndexing
					Usage moq.ParamIndexing
				}
				Int64Var struct {
					P     moq.ParamIndexing
					Name  moq.ParamIndexing
					Value moq.ParamIndexing
					Usage moq.ParamIndexing
				}
				Int64 struct {
					Name  moq.ParamIndexing
					Value moq.ParamIndexing
					Usage moq.ParamIndexing
				}
				UintVar struct {
					P     moq.ParamIndexing
					Name  moq.ParamIndexing
					Value moq.ParamIndexing
					Usage moq.ParamIndexing
				}
				Uint struct {
					Name  moq.ParamIndexing
					Value moq.ParamIndexing
					Usage moq.ParamIndexing
				}
				Uint64Var struct {
					P     moq.ParamIndexing
					Name  moq.ParamIndexing
					Value moq.ParamIndexing
					Usage moq.ParamIndexing
				}
				Uint64 struct {
					Name  moq.ParamIndexing
					Value moq.ParamIndexing
					Usage moq.ParamIndexing
				}
				StringVar struct {
					P     moq.ParamIndexing
					Name  moq.ParamIndexing
					Value moq.ParamIndexing
					Usage moq.ParamIndexing
				}
				String struct {
					Name  moq.ParamIndexing
					Value moq.ParamIndexing
					Usage moq.ParamIndexing
				}
				Float64Var struct {
					P     moq.ParamIndexing
					Name  moq.ParamIndexing
					Value moq.ParamIndexing
					Usage moq.ParamIndexing
				}
				Float64 struct {
					Name  moq.ParamIndexing
					Value moq.ParamIndexing
					Usage moq.ParamIndexing
				}
				DurationVar struct {
					P     moq.ParamIndexing
					Name  moq.ParamIndexing
					Value moq.ParamIndexing
					Usage moq.ParamIndexing
				}
				Duration struct {
					Name  moq.ParamIndexing
					Value moq.ParamIndexing
					Usage moq.ParamIndexing
				}
				Var struct {
					Value moq.ParamIndexing
					Name  moq.ParamIndexing
					Usage moq.ParamIndexing
				}
				Parse struct {
					Arguments moq.ParamIndexing
				}
				Parsed struct{}
				Init   struct {
					Name          moq.ParamIndexing
					ErrorHandling moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Output        struct{}
			Name          struct{}
			ErrorHandling struct{}
			SetOutput     struct {
				Output moq.ParamIndexing
			}
			VisitAll struct {
				Fn moq.ParamIndexing
			}
			Visit struct {
				Fn moq.ParamIndexing
			}
			Lookup struct {
				Name moq.ParamIndexing
			}
			Set struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
			}
			PrintDefaults struct{}
			NFlag         struct{}
			Arg           struct {
				Param1 moq.ParamIndexing
			}
			NArg    struct{}
			Args    struct{}
			BoolVar struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Bool struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			IntVar struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Int struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Int64Var struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Int64 struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			UintVar struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Uint struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Uint64Var struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Uint64 struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			StringVar struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			String struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Float64Var struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Float64 struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			DurationVar struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Duration struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Var struct {
				Value moq.ParamIndexing
				Name  moq.ParamIndexing
				Usage moq.ParamIndexing
			}
			Parse struct {
				Arguments moq.ParamIndexing
			}
			Parsed struct{}
			Init   struct {
				Name          moq.ParamIndexing
				ErrorHandling moq.ParamIndexing
			}
		}{
			Output:        struct{}{},
			Name:          struct{}{},
			ErrorHandling: struct{}{},
			SetOutput: struct {
				Output moq.ParamIndexing
			}{
				Output: moq.ParamIndexByHash,
			},
			VisitAll: struct {
				Fn moq.ParamIndexing
			}{
				Fn: moq.ParamIndexByHash,
			},
			Visit: struct {
				Fn moq.ParamIndexing
			}{
				Fn: moq.ParamIndexByHash,
			},
			Lookup: struct {
				Name moq.ParamIndexing
			}{
				Name: moq.ParamIndexByValue,
			},
			Set: struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
			}{
				Name:  moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
			},
			PrintDefaults: struct{}{},
			NFlag:         struct{}{},
			Arg: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			NArg: struct{}{},
			Args: struct{}{},
			BoolVar: struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}{
				P:     moq.ParamIndexByHash,
				Name:  moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
				Usage: moq.ParamIndexByValue,
			},
			Bool: struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}{
				Name:  moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
				Usage: moq.ParamIndexByValue,
			},
			IntVar: struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}{
				P:     moq.ParamIndexByHash,
				Name:  moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
				Usage: moq.ParamIndexByValue,
			},
			Int: struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}{
				Name:  moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
				Usage: moq.ParamIndexByValue,
			},
			Int64Var: struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}{
				P:     moq.ParamIndexByHash,
				Name:  moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
				Usage: moq.ParamIndexByValue,
			},
			Int64: struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}{
				Name:  moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
				Usage: moq.ParamIndexByValue,
			},
			UintVar: struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}{
				P:     moq.ParamIndexByHash,
				Name:  moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
				Usage: moq.ParamIndexByValue,
			},
			Uint: struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}{
				Name:  moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
				Usage: moq.ParamIndexByValue,
			},
			Uint64Var: struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}{
				P:     moq.ParamIndexByHash,
				Name:  moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
				Usage: moq.ParamIndexByValue,
			},
			Uint64: struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}{
				Name:  moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
				Usage: moq.ParamIndexByValue,
			},
			StringVar: struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}{
				P:     moq.ParamIndexByHash,
				Name:  moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
				Usage: moq.ParamIndexByValue,
			},
			String: struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}{
				Name:  moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
				Usage: moq.ParamIndexByValue,
			},
			Float64Var: struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}{
				P:     moq.ParamIndexByHash,
				Name:  moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
				Usage: moq.ParamIndexByValue,
			},
			Float64: struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}{
				Name:  moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
				Usage: moq.ParamIndexByValue,
			},
			DurationVar: struct {
				P     moq.ParamIndexing
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}{
				P:     moq.ParamIndexByHash,
				Name:  moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
				Usage: moq.ParamIndexByValue,
			},
			Duration: struct {
				Name  moq.ParamIndexing
				Value moq.ParamIndexing
				Usage moq.ParamIndexing
			}{
				Name:  moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
				Usage: moq.ParamIndexByValue,
			},
			Var: struct {
				Value moq.ParamIndexing
				Name  moq.ParamIndexing
				Usage moq.ParamIndexing
			}{
				Value: moq.ParamIndexByHash,
				Name:  moq.ParamIndexByValue,
				Usage: moq.ParamIndexByValue,
			},
			Parse: struct {
				Arguments moq.ParamIndexing
			}{
				Arguments: moq.ParamIndexByHash,
			},
			Parsed: struct{}{},
			Init: struct {
				Name          moq.ParamIndexing
				ErrorHandling moq.ParamIndexing
			}{
				Name:          moq.ParamIndexByValue,
				ErrorHandling: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the FlagSet_starGenType type
func (m *MoqFlagSet_starGenType) Mock() *MoqFlagSet_starGenType_mock { return m.Moq }

func (m *MoqFlagSet_starGenType_mock) Output() (result1 io.Writer) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Output_params{}
	var results *MoqFlagSet_starGenType_Output_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Output {
		paramsKey := m.Moq.ParamsKey_Output(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Output(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Output(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Output(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Name() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Name_params{}
	var results *MoqFlagSet_starGenType_Name_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Name {
		paramsKey := m.Moq.ParamsKey_Name(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Name(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Name(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Name(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) ErrorHandling() (result1 flag.ErrorHandling) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_ErrorHandling_params{}
	var results *MoqFlagSet_starGenType_ErrorHandling_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ErrorHandling {
		paramsKey := m.Moq.ParamsKey_ErrorHandling(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ErrorHandling(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ErrorHandling(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ErrorHandling(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) SetOutput(output io.Writer) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_SetOutput_params{
		Output: output,
	}
	var results *MoqFlagSet_starGenType_SetOutput_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetOutput {
		paramsKey := m.Moq.ParamsKey_SetOutput(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetOutput(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetOutput(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetOutput(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(output)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(output)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) VisitAll(fn func(*flag.Flag)) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_VisitAll_params{
		Fn: fn,
	}
	var results *MoqFlagSet_starGenType_VisitAll_results
	for _, resultsByParams := range m.Moq.ResultsByParams_VisitAll {
		paramsKey := m.Moq.ParamsKey_VisitAll(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_VisitAll(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_VisitAll(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_VisitAll(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(fn)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(fn)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Visit(fn func(*flag.Flag)) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Visit_params{
		Fn: fn,
	}
	var results *MoqFlagSet_starGenType_Visit_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Visit {
		paramsKey := m.Moq.ParamsKey_Visit(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Visit(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Visit(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Visit(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(fn)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(fn)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Lookup(name string) (result1 *flag.Flag) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Lookup_params{
		Name: name,
	}
	var results *MoqFlagSet_starGenType_Lookup_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Lookup {
		paramsKey := m.Moq.ParamsKey_Lookup(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Lookup(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Lookup(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Lookup(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(name)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Set(name, value string) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Set_params{
		Name:  name,
		Value: value,
	}
	var results *MoqFlagSet_starGenType_Set_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Set {
		paramsKey := m.Moq.ParamsKey_Set(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Set(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Set(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Set(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name, value)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(name, value)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) PrintDefaults() {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_PrintDefaults_params{}
	var results *MoqFlagSet_starGenType_PrintDefaults_results
	for _, resultsByParams := range m.Moq.ResultsByParams_PrintDefaults {
		paramsKey := m.Moq.ParamsKey_PrintDefaults(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_PrintDefaults(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_PrintDefaults(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_PrintDefaults(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) NFlag() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_NFlag_params{}
	var results *MoqFlagSet_starGenType_NFlag_results
	for _, resultsByParams := range m.Moq.ResultsByParams_NFlag {
		paramsKey := m.Moq.ParamsKey_NFlag(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_NFlag(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_NFlag(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_NFlag(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Arg(param1 int) (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Arg_params{
		Param1: param1,
	}
	var results *MoqFlagSet_starGenType_Arg_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Arg {
		paramsKey := m.Moq.ParamsKey_Arg(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Arg(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Arg(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Arg(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) NArg() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_NArg_params{}
	var results *MoqFlagSet_starGenType_NArg_results
	for _, resultsByParams := range m.Moq.ResultsByParams_NArg {
		paramsKey := m.Moq.ParamsKey_NArg(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_NArg(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_NArg(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_NArg(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Args() (result1 []string) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Args_params{}
	var results *MoqFlagSet_starGenType_Args_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Args {
		paramsKey := m.Moq.ParamsKey_Args(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Args(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Args(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Args(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) BoolVar(p *bool, name string, value bool, usage string) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_BoolVar_params{
		P:     p,
		Name:  name,
		Value: value,
		Usage: usage,
	}
	var results *MoqFlagSet_starGenType_BoolVar_results
	for _, resultsByParams := range m.Moq.ResultsByParams_BoolVar {
		paramsKey := m.Moq.ParamsKey_BoolVar(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_BoolVar(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_BoolVar(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_BoolVar(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p, name, value, usage)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(p, name, value, usage)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Bool(name string, value bool, usage string) (result1 *bool) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Bool_params{
		Name:  name,
		Value: value,
		Usage: usage,
	}
	var results *MoqFlagSet_starGenType_Bool_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Bool {
		paramsKey := m.Moq.ParamsKey_Bool(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Bool(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Bool(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Bool(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name, value, usage)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(name, value, usage)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) IntVar(p *int, name string, value int, usage string) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_IntVar_params{
		P:     p,
		Name:  name,
		Value: value,
		Usage: usage,
	}
	var results *MoqFlagSet_starGenType_IntVar_results
	for _, resultsByParams := range m.Moq.ResultsByParams_IntVar {
		paramsKey := m.Moq.ParamsKey_IntVar(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_IntVar(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_IntVar(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_IntVar(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p, name, value, usage)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(p, name, value, usage)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Int(name string, value int, usage string) (result1 *int) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Int_params{
		Name:  name,
		Value: value,
		Usage: usage,
	}
	var results *MoqFlagSet_starGenType_Int_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Int {
		paramsKey := m.Moq.ParamsKey_Int(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Int(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Int(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Int(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name, value, usage)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(name, value, usage)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Int64Var(p *int64, name string, value int64, usage string) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Int64Var_params{
		P:     p,
		Name:  name,
		Value: value,
		Usage: usage,
	}
	var results *MoqFlagSet_starGenType_Int64Var_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Int64Var {
		paramsKey := m.Moq.ParamsKey_Int64Var(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Int64Var(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Int64Var(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Int64Var(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p, name, value, usage)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(p, name, value, usage)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Int64(name string, value int64, usage string) (result1 *int64) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Int64_params{
		Name:  name,
		Value: value,
		Usage: usage,
	}
	var results *MoqFlagSet_starGenType_Int64_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Int64 {
		paramsKey := m.Moq.ParamsKey_Int64(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Int64(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Int64(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Int64(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name, value, usage)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(name, value, usage)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) UintVar(p *uint, name string, value uint, usage string) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_UintVar_params{
		P:     p,
		Name:  name,
		Value: value,
		Usage: usage,
	}
	var results *MoqFlagSet_starGenType_UintVar_results
	for _, resultsByParams := range m.Moq.ResultsByParams_UintVar {
		paramsKey := m.Moq.ParamsKey_UintVar(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_UintVar(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_UintVar(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_UintVar(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p, name, value, usage)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(p, name, value, usage)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Uint(name string, value uint, usage string) (result1 *uint) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Uint_params{
		Name:  name,
		Value: value,
		Usage: usage,
	}
	var results *MoqFlagSet_starGenType_Uint_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Uint {
		paramsKey := m.Moq.ParamsKey_Uint(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Uint(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Uint(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Uint(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name, value, usage)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(name, value, usage)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Uint64Var(p *uint64, name string, value uint64, usage string) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Uint64Var_params{
		P:     p,
		Name:  name,
		Value: value,
		Usage: usage,
	}
	var results *MoqFlagSet_starGenType_Uint64Var_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Uint64Var {
		paramsKey := m.Moq.ParamsKey_Uint64Var(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Uint64Var(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Uint64Var(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Uint64Var(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p, name, value, usage)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(p, name, value, usage)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Uint64(name string, value uint64, usage string) (result1 *uint64) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Uint64_params{
		Name:  name,
		Value: value,
		Usage: usage,
	}
	var results *MoqFlagSet_starGenType_Uint64_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Uint64 {
		paramsKey := m.Moq.ParamsKey_Uint64(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Uint64(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Uint64(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Uint64(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name, value, usage)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(name, value, usage)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) StringVar(p *string, name string, value string, usage string) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_StringVar_params{
		P:     p,
		Name:  name,
		Value: value,
		Usage: usage,
	}
	var results *MoqFlagSet_starGenType_StringVar_results
	for _, resultsByParams := range m.Moq.ResultsByParams_StringVar {
		paramsKey := m.Moq.ParamsKey_StringVar(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_StringVar(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_StringVar(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_StringVar(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p, name, value, usage)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(p, name, value, usage)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) String(name string, value string, usage string) (result1 *string) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_String_params{
		Name:  name,
		Value: value,
		Usage: usage,
	}
	var results *MoqFlagSet_starGenType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name, value, usage)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(name, value, usage)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Float64Var(p *float64, name string, value float64, usage string) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Float64Var_params{
		P:     p,
		Name:  name,
		Value: value,
		Usage: usage,
	}
	var results *MoqFlagSet_starGenType_Float64Var_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Float64Var {
		paramsKey := m.Moq.ParamsKey_Float64Var(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Float64Var(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Float64Var(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Float64Var(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p, name, value, usage)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(p, name, value, usage)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Float64(name string, value float64, usage string) (result1 *float64) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Float64_params{
		Name:  name,
		Value: value,
		Usage: usage,
	}
	var results *MoqFlagSet_starGenType_Float64_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Float64 {
		paramsKey := m.Moq.ParamsKey_Float64(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Float64(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Float64(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Float64(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name, value, usage)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(name, value, usage)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) DurationVar(p *time.Duration, name string, value time.Duration, usage string) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_DurationVar_params{
		P:     p,
		Name:  name,
		Value: value,
		Usage: usage,
	}
	var results *MoqFlagSet_starGenType_DurationVar_results
	for _, resultsByParams := range m.Moq.ResultsByParams_DurationVar {
		paramsKey := m.Moq.ParamsKey_DurationVar(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_DurationVar(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_DurationVar(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_DurationVar(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p, name, value, usage)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(p, name, value, usage)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Duration(name string, value time.Duration, usage string) (result1 *time.Duration) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Duration_params{
		Name:  name,
		Value: value,
		Usage: usage,
	}
	var results *MoqFlagSet_starGenType_Duration_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Duration {
		paramsKey := m.Moq.ParamsKey_Duration(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Duration(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Duration(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Duration(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name, value, usage)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(name, value, usage)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Var(value flag.Value, name string, usage string) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Var_params{
		Value: value,
		Name:  name,
		Usage: usage,
	}
	var results *MoqFlagSet_starGenType_Var_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Var {
		paramsKey := m.Moq.ParamsKey_Var(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Var(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Var(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Var(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(value, name, usage)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(value, name, usage)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Parse(arguments []string) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Parse_params{
		Arguments: arguments,
	}
	var results *MoqFlagSet_starGenType_Parse_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Parse {
		paramsKey := m.Moq.ParamsKey_Parse(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Parse(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Parse(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Parse(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(arguments)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(arguments)
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Parsed() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Parsed_params{}
	var results *MoqFlagSet_starGenType_Parsed_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Parsed {
		paramsKey := m.Moq.ParamsKey_Parsed(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Parsed(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Parsed(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Parsed(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqFlagSet_starGenType_mock) Init(name string, errorHandling flag.ErrorHandling) {
	m.Moq.Scene.T.Helper()
	params := MoqFlagSet_starGenType_Init_params{
		Name:          name,
		ErrorHandling: errorHandling,
	}
	var results *MoqFlagSet_starGenType_Init_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Init {
		paramsKey := m.Moq.ParamsKey_Init(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Init(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Init(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Init(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name, errorHandling)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(name, errorHandling)
	}
	return
}

// OnCall returns the recorder implementation of the FlagSet_starGenType type
func (m *MoqFlagSet_starGenType) OnCall() *MoqFlagSet_starGenType_recorder {
	return &MoqFlagSet_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqFlagSet_starGenType_recorder) Output() *MoqFlagSet_starGenType_Output_fnRecorder {
	return &MoqFlagSet_starGenType_Output_fnRecorder{
		Params:   MoqFlagSet_starGenType_Output_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Output_fnRecorder) Any() *MoqFlagSet_starGenType_Output_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Output(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Output_anyParams{Recorder: r}
}

func (r *MoqFlagSet_starGenType_Output_fnRecorder) Seq() *MoqFlagSet_starGenType_Output_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Output(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Output_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Output_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Output(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Output_fnRecorder) ReturnResults(result1 io.Writer) *MoqFlagSet_starGenType_Output_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.Writer
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Output_doFn
		DoReturnFn MoqFlagSet_starGenType_Output_doReturnFn
	}{
		Values: &struct {
			Result1 io.Writer
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Output_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Output_doFn) *MoqFlagSet_starGenType_Output_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Output_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Output_doReturnFn) *MoqFlagSet_starGenType_Output_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.Writer
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Output_doFn
		DoReturnFn MoqFlagSet_starGenType_Output_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Output_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Output_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Output {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Output_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Output_paramsKey]*MoqFlagSet_starGenType_Output_results{},
		}
		r.Moq.ResultsByParams_Output = append(r.Moq.ResultsByParams_Output, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Output) {
			copy(r.Moq.ResultsByParams_Output[insertAt+1:], r.Moq.ResultsByParams_Output[insertAt:0])
			r.Moq.ResultsByParams_Output[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Output(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Output_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Output_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Output_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 io.Writer
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Output_doFn
				DoReturnFn MoqFlagSet_starGenType_Output_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Output(params MoqFlagSet_starGenType_Output_params) string {
	return fmt.Sprintf("Output()")
}

func (m *MoqFlagSet_starGenType) ParamsKey_Output(params MoqFlagSet_starGenType_Output_params, anyParams uint64) MoqFlagSet_starGenType_Output_paramsKey {
	m.Scene.T.Helper()
	return MoqFlagSet_starGenType_Output_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Name() *MoqFlagSet_starGenType_Name_fnRecorder {
	return &MoqFlagSet_starGenType_Name_fnRecorder{
		Params:   MoqFlagSet_starGenType_Name_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Name_fnRecorder) Any() *MoqFlagSet_starGenType_Name_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Name_anyParams{Recorder: r}
}

func (r *MoqFlagSet_starGenType_Name_fnRecorder) Seq() *MoqFlagSet_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Name_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Name_fnRecorder) ReturnResults(result1 string) *MoqFlagSet_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Name_doFn
		DoReturnFn MoqFlagSet_starGenType_Name_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Name_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Name_doFn) *MoqFlagSet_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Name_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Name_doReturnFn) *MoqFlagSet_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Name_doFn
		DoReturnFn MoqFlagSet_starGenType_Name_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Name_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Name_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Name {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Name_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Name_paramsKey]*MoqFlagSet_starGenType_Name_results{},
		}
		r.Moq.ResultsByParams_Name = append(r.Moq.ResultsByParams_Name, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Name) {
			copy(r.Moq.ResultsByParams_Name[insertAt+1:], r.Moq.ResultsByParams_Name[insertAt:0])
			r.Moq.ResultsByParams_Name[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Name(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Name_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Name_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Name_doFn
				DoReturnFn MoqFlagSet_starGenType_Name_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Name(params MoqFlagSet_starGenType_Name_params) string {
	return fmt.Sprintf("Name()")
}

func (m *MoqFlagSet_starGenType) ParamsKey_Name(params MoqFlagSet_starGenType_Name_params, anyParams uint64) MoqFlagSet_starGenType_Name_paramsKey {
	m.Scene.T.Helper()
	return MoqFlagSet_starGenType_Name_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFlagSet_starGenType_recorder) ErrorHandling() *MoqFlagSet_starGenType_ErrorHandling_fnRecorder {
	return &MoqFlagSet_starGenType_ErrorHandling_fnRecorder{
		Params:   MoqFlagSet_starGenType_ErrorHandling_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_ErrorHandling_fnRecorder) Any() *MoqFlagSet_starGenType_ErrorHandling_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ErrorHandling(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_ErrorHandling_anyParams{Recorder: r}
}

func (r *MoqFlagSet_starGenType_ErrorHandling_fnRecorder) Seq() *MoqFlagSet_starGenType_ErrorHandling_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ErrorHandling(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_ErrorHandling_fnRecorder) NoSeq() *MoqFlagSet_starGenType_ErrorHandling_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ErrorHandling(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_ErrorHandling_fnRecorder) ReturnResults(result1 flag.ErrorHandling) *MoqFlagSet_starGenType_ErrorHandling_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 flag.ErrorHandling
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_ErrorHandling_doFn
		DoReturnFn MoqFlagSet_starGenType_ErrorHandling_doReturnFn
	}{
		Values: &struct {
			Result1 flag.ErrorHandling
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_ErrorHandling_fnRecorder) AndDo(fn MoqFlagSet_starGenType_ErrorHandling_doFn) *MoqFlagSet_starGenType_ErrorHandling_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_ErrorHandling_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_ErrorHandling_doReturnFn) *MoqFlagSet_starGenType_ErrorHandling_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 flag.ErrorHandling
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_ErrorHandling_doFn
		DoReturnFn MoqFlagSet_starGenType_ErrorHandling_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_ErrorHandling_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_ErrorHandling_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ErrorHandling {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_ErrorHandling_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_ErrorHandling_paramsKey]*MoqFlagSet_starGenType_ErrorHandling_results{},
		}
		r.Moq.ResultsByParams_ErrorHandling = append(r.Moq.ResultsByParams_ErrorHandling, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ErrorHandling) {
			copy(r.Moq.ResultsByParams_ErrorHandling[insertAt+1:], r.Moq.ResultsByParams_ErrorHandling[insertAt:0])
			r.Moq.ResultsByParams_ErrorHandling[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ErrorHandling(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_ErrorHandling_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_ErrorHandling_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_ErrorHandling_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 flag.ErrorHandling
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_ErrorHandling_doFn
				DoReturnFn MoqFlagSet_starGenType_ErrorHandling_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_ErrorHandling(params MoqFlagSet_starGenType_ErrorHandling_params) string {
	return fmt.Sprintf("ErrorHandling()")
}

func (m *MoqFlagSet_starGenType) ParamsKey_ErrorHandling(params MoqFlagSet_starGenType_ErrorHandling_params, anyParams uint64) MoqFlagSet_starGenType_ErrorHandling_paramsKey {
	m.Scene.T.Helper()
	return MoqFlagSet_starGenType_ErrorHandling_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFlagSet_starGenType_recorder) SetOutput(output io.Writer) *MoqFlagSet_starGenType_SetOutput_fnRecorder {
	return &MoqFlagSet_starGenType_SetOutput_fnRecorder{
		Params: MoqFlagSet_starGenType_SetOutput_params{
			Output: output,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_SetOutput_fnRecorder) Any() *MoqFlagSet_starGenType_SetOutput_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetOutput(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_SetOutput_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_SetOutput_anyParams) Output() *MoqFlagSet_starGenType_SetOutput_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_SetOutput_fnRecorder) Seq() *MoqFlagSet_starGenType_SetOutput_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetOutput(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_SetOutput_fnRecorder) NoSeq() *MoqFlagSet_starGenType_SetOutput_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetOutput(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_SetOutput_fnRecorder) ReturnResults() *MoqFlagSet_starGenType_SetOutput_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_SetOutput_doFn
		DoReturnFn MoqFlagSet_starGenType_SetOutput_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_SetOutput_fnRecorder) AndDo(fn MoqFlagSet_starGenType_SetOutput_doFn) *MoqFlagSet_starGenType_SetOutput_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_SetOutput_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_SetOutput_doReturnFn) *MoqFlagSet_starGenType_SetOutput_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_SetOutput_doFn
		DoReturnFn MoqFlagSet_starGenType_SetOutput_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_SetOutput_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_SetOutput_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetOutput {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_SetOutput_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_SetOutput_paramsKey]*MoqFlagSet_starGenType_SetOutput_results{},
		}
		r.Moq.ResultsByParams_SetOutput = append(r.Moq.ResultsByParams_SetOutput, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetOutput) {
			copy(r.Moq.ResultsByParams_SetOutput[insertAt+1:], r.Moq.ResultsByParams_SetOutput[insertAt:0])
			r.Moq.ResultsByParams_SetOutput[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetOutput(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_SetOutput_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_SetOutput_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_SetOutput_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_SetOutput_doFn
				DoReturnFn MoqFlagSet_starGenType_SetOutput_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_SetOutput(params MoqFlagSet_starGenType_SetOutput_params) string {
	return fmt.Sprintf("SetOutput(%#v)", params.Output)
}

func (m *MoqFlagSet_starGenType) ParamsKey_SetOutput(params MoqFlagSet_starGenType_SetOutput_params, anyParams uint64) MoqFlagSet_starGenType_SetOutput_paramsKey {
	m.Scene.T.Helper()
	var outputUsed io.Writer
	var outputUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetOutput.Output == moq.ParamIndexByValue {
			outputUsed = params.Output
		} else {
			outputUsedHash = hash.DeepHash(params.Output)
		}
	}
	return MoqFlagSet_starGenType_SetOutput_paramsKey{
		Params: struct{ Output io.Writer }{
			Output: outputUsed,
		},
		Hashes: struct{ Output hash.Hash }{
			Output: outputUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) VisitAll(fn func(*flag.Flag)) *MoqFlagSet_starGenType_VisitAll_fnRecorder {
	return &MoqFlagSet_starGenType_VisitAll_fnRecorder{
		Params: MoqFlagSet_starGenType_VisitAll_params{
			Fn: fn,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_VisitAll_fnRecorder) Any() *MoqFlagSet_starGenType_VisitAll_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_VisitAll(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_VisitAll_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_VisitAll_anyParams) Fn() *MoqFlagSet_starGenType_VisitAll_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_VisitAll_fnRecorder) Seq() *MoqFlagSet_starGenType_VisitAll_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_VisitAll(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_VisitAll_fnRecorder) NoSeq() *MoqFlagSet_starGenType_VisitAll_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_VisitAll(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_VisitAll_fnRecorder) ReturnResults() *MoqFlagSet_starGenType_VisitAll_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_VisitAll_doFn
		DoReturnFn MoqFlagSet_starGenType_VisitAll_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_VisitAll_fnRecorder) AndDo(fn MoqFlagSet_starGenType_VisitAll_doFn) *MoqFlagSet_starGenType_VisitAll_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_VisitAll_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_VisitAll_doReturnFn) *MoqFlagSet_starGenType_VisitAll_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_VisitAll_doFn
		DoReturnFn MoqFlagSet_starGenType_VisitAll_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_VisitAll_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_VisitAll_resultsByParams
	for n, res := range r.Moq.ResultsByParams_VisitAll {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_VisitAll_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_VisitAll_paramsKey]*MoqFlagSet_starGenType_VisitAll_results{},
		}
		r.Moq.ResultsByParams_VisitAll = append(r.Moq.ResultsByParams_VisitAll, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_VisitAll) {
			copy(r.Moq.ResultsByParams_VisitAll[insertAt+1:], r.Moq.ResultsByParams_VisitAll[insertAt:0])
			r.Moq.ResultsByParams_VisitAll[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_VisitAll(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_VisitAll_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_VisitAll_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_VisitAll_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_VisitAll_doFn
				DoReturnFn MoqFlagSet_starGenType_VisitAll_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_VisitAll(params MoqFlagSet_starGenType_VisitAll_params) string {
	return fmt.Sprintf("VisitAll(%#v)", moq.FnString(params.Fn))
}

func (m *MoqFlagSet_starGenType) ParamsKey_VisitAll(params MoqFlagSet_starGenType_VisitAll_params, anyParams uint64) MoqFlagSet_starGenType_VisitAll_paramsKey {
	m.Scene.T.Helper()
	var fnUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.VisitAll.Fn == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The fn parameter of the VisitAll function can't be indexed by value")
		}
		fnUsedHash = hash.DeepHash(params.Fn)
	}
	return MoqFlagSet_starGenType_VisitAll_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Fn hash.Hash }{
			Fn: fnUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Visit(fn func(*flag.Flag)) *MoqFlagSet_starGenType_Visit_fnRecorder {
	return &MoqFlagSet_starGenType_Visit_fnRecorder{
		Params: MoqFlagSet_starGenType_Visit_params{
			Fn: fn,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Visit_fnRecorder) Any() *MoqFlagSet_starGenType_Visit_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Visit(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Visit_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_Visit_anyParams) Fn() *MoqFlagSet_starGenType_Visit_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_Visit_fnRecorder) Seq() *MoqFlagSet_starGenType_Visit_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Visit(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Visit_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Visit_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Visit(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Visit_fnRecorder) ReturnResults() *MoqFlagSet_starGenType_Visit_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Visit_doFn
		DoReturnFn MoqFlagSet_starGenType_Visit_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Visit_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Visit_doFn) *MoqFlagSet_starGenType_Visit_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Visit_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Visit_doReturnFn) *MoqFlagSet_starGenType_Visit_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Visit_doFn
		DoReturnFn MoqFlagSet_starGenType_Visit_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Visit_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Visit_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Visit {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Visit_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Visit_paramsKey]*MoqFlagSet_starGenType_Visit_results{},
		}
		r.Moq.ResultsByParams_Visit = append(r.Moq.ResultsByParams_Visit, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Visit) {
			copy(r.Moq.ResultsByParams_Visit[insertAt+1:], r.Moq.ResultsByParams_Visit[insertAt:0])
			r.Moq.ResultsByParams_Visit[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Visit(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Visit_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Visit_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Visit_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Visit_doFn
				DoReturnFn MoqFlagSet_starGenType_Visit_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Visit(params MoqFlagSet_starGenType_Visit_params) string {
	return fmt.Sprintf("Visit(%#v)", moq.FnString(params.Fn))
}

func (m *MoqFlagSet_starGenType) ParamsKey_Visit(params MoqFlagSet_starGenType_Visit_params, anyParams uint64) MoqFlagSet_starGenType_Visit_paramsKey {
	m.Scene.T.Helper()
	var fnUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Visit.Fn == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The fn parameter of the Visit function can't be indexed by value")
		}
		fnUsedHash = hash.DeepHash(params.Fn)
	}
	return MoqFlagSet_starGenType_Visit_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Fn hash.Hash }{
			Fn: fnUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Lookup(name string) *MoqFlagSet_starGenType_Lookup_fnRecorder {
	return &MoqFlagSet_starGenType_Lookup_fnRecorder{
		Params: MoqFlagSet_starGenType_Lookup_params{
			Name: name,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Lookup_fnRecorder) Any() *MoqFlagSet_starGenType_Lookup_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Lookup(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Lookup_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_Lookup_anyParams) Name() *MoqFlagSet_starGenType_Lookup_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_Lookup_fnRecorder) Seq() *MoqFlagSet_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Lookup(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Lookup_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Lookup(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Lookup_fnRecorder) ReturnResults(result1 *flag.Flag) *MoqFlagSet_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *flag.Flag
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Lookup_doFn
		DoReturnFn MoqFlagSet_starGenType_Lookup_doReturnFn
	}{
		Values: &struct {
			Result1 *flag.Flag
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Lookup_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Lookup_doFn) *MoqFlagSet_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Lookup_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Lookup_doReturnFn) *MoqFlagSet_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *flag.Flag
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Lookup_doFn
		DoReturnFn MoqFlagSet_starGenType_Lookup_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Lookup_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Lookup_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Lookup {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Lookup_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Lookup_paramsKey]*MoqFlagSet_starGenType_Lookup_results{},
		}
		r.Moq.ResultsByParams_Lookup = append(r.Moq.ResultsByParams_Lookup, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Lookup) {
			copy(r.Moq.ResultsByParams_Lookup[insertAt+1:], r.Moq.ResultsByParams_Lookup[insertAt:0])
			r.Moq.ResultsByParams_Lookup[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Lookup(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Lookup_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Lookup_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *flag.Flag
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Lookup_doFn
				DoReturnFn MoqFlagSet_starGenType_Lookup_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Lookup(params MoqFlagSet_starGenType_Lookup_params) string {
	return fmt.Sprintf("Lookup(%#v)", params.Name)
}

func (m *MoqFlagSet_starGenType) ParamsKey_Lookup(params MoqFlagSet_starGenType_Lookup_params, anyParams uint64) MoqFlagSet_starGenType_Lookup_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Lookup.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	return MoqFlagSet_starGenType_Lookup_paramsKey{
		Params: struct{ Name string }{
			Name: nameUsed,
		},
		Hashes: struct{ Name hash.Hash }{
			Name: nameUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Set(name, value string) *MoqFlagSet_starGenType_Set_fnRecorder {
	return &MoqFlagSet_starGenType_Set_fnRecorder{
		Params: MoqFlagSet_starGenType_Set_params{
			Name:  name,
			Value: value,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Set_fnRecorder) Any() *MoqFlagSet_starGenType_Set_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Set_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_Set_anyParams) Name() *MoqFlagSet_starGenType_Set_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Set_anyParams) Value() *MoqFlagSet_starGenType_Set_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_Set_fnRecorder) Seq() *MoqFlagSet_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Set_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Set_fnRecorder) ReturnResults(result1 error) *MoqFlagSet_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Set_doFn
		DoReturnFn MoqFlagSet_starGenType_Set_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Set_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Set_doFn) *MoqFlagSet_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Set_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Set_doReturnFn) *MoqFlagSet_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Set_doFn
		DoReturnFn MoqFlagSet_starGenType_Set_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Set_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Set_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Set {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Set_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Set_paramsKey]*MoqFlagSet_starGenType_Set_results{},
		}
		r.Moq.ResultsByParams_Set = append(r.Moq.ResultsByParams_Set, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Set) {
			copy(r.Moq.ResultsByParams_Set[insertAt+1:], r.Moq.ResultsByParams_Set[insertAt:0])
			r.Moq.ResultsByParams_Set[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Set(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Set_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Set_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Set_doFn
				DoReturnFn MoqFlagSet_starGenType_Set_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Set(params MoqFlagSet_starGenType_Set_params) string {
	return fmt.Sprintf("Set(%#v, %#v)", params.Name, params.Value)
}

func (m *MoqFlagSet_starGenType) ParamsKey_Set(params MoqFlagSet_starGenType_Set_params, anyParams uint64) MoqFlagSet_starGenType_Set_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Set.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var valueUsed string
	var valueUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Set.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	return MoqFlagSet_starGenType_Set_paramsKey{
		Params: struct{ Name, Value string }{
			Name:  nameUsed,
			Value: valueUsed,
		},
		Hashes: struct{ Name, Value hash.Hash }{
			Name:  nameUsedHash,
			Value: valueUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) PrintDefaults() *MoqFlagSet_starGenType_PrintDefaults_fnRecorder {
	return &MoqFlagSet_starGenType_PrintDefaults_fnRecorder{
		Params:   MoqFlagSet_starGenType_PrintDefaults_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_PrintDefaults_fnRecorder) Any() *MoqFlagSet_starGenType_PrintDefaults_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PrintDefaults(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_PrintDefaults_anyParams{Recorder: r}
}

func (r *MoqFlagSet_starGenType_PrintDefaults_fnRecorder) Seq() *MoqFlagSet_starGenType_PrintDefaults_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PrintDefaults(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_PrintDefaults_fnRecorder) NoSeq() *MoqFlagSet_starGenType_PrintDefaults_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PrintDefaults(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_PrintDefaults_fnRecorder) ReturnResults() *MoqFlagSet_starGenType_PrintDefaults_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_PrintDefaults_doFn
		DoReturnFn MoqFlagSet_starGenType_PrintDefaults_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_PrintDefaults_fnRecorder) AndDo(fn MoqFlagSet_starGenType_PrintDefaults_doFn) *MoqFlagSet_starGenType_PrintDefaults_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_PrintDefaults_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_PrintDefaults_doReturnFn) *MoqFlagSet_starGenType_PrintDefaults_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_PrintDefaults_doFn
		DoReturnFn MoqFlagSet_starGenType_PrintDefaults_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_PrintDefaults_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_PrintDefaults_resultsByParams
	for n, res := range r.Moq.ResultsByParams_PrintDefaults {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_PrintDefaults_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_PrintDefaults_paramsKey]*MoqFlagSet_starGenType_PrintDefaults_results{},
		}
		r.Moq.ResultsByParams_PrintDefaults = append(r.Moq.ResultsByParams_PrintDefaults, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_PrintDefaults) {
			copy(r.Moq.ResultsByParams_PrintDefaults[insertAt+1:], r.Moq.ResultsByParams_PrintDefaults[insertAt:0])
			r.Moq.ResultsByParams_PrintDefaults[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_PrintDefaults(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_PrintDefaults_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_PrintDefaults_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_PrintDefaults_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_PrintDefaults_doFn
				DoReturnFn MoqFlagSet_starGenType_PrintDefaults_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_PrintDefaults(params MoqFlagSet_starGenType_PrintDefaults_params) string {
	return fmt.Sprintf("PrintDefaults()")
}

func (m *MoqFlagSet_starGenType) ParamsKey_PrintDefaults(params MoqFlagSet_starGenType_PrintDefaults_params, anyParams uint64) MoqFlagSet_starGenType_PrintDefaults_paramsKey {
	m.Scene.T.Helper()
	return MoqFlagSet_starGenType_PrintDefaults_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFlagSet_starGenType_recorder) NFlag() *MoqFlagSet_starGenType_NFlag_fnRecorder {
	return &MoqFlagSet_starGenType_NFlag_fnRecorder{
		Params:   MoqFlagSet_starGenType_NFlag_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_NFlag_fnRecorder) Any() *MoqFlagSet_starGenType_NFlag_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NFlag(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_NFlag_anyParams{Recorder: r}
}

func (r *MoqFlagSet_starGenType_NFlag_fnRecorder) Seq() *MoqFlagSet_starGenType_NFlag_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NFlag(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_NFlag_fnRecorder) NoSeq() *MoqFlagSet_starGenType_NFlag_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NFlag(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_NFlag_fnRecorder) ReturnResults(result1 int) *MoqFlagSet_starGenType_NFlag_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_NFlag_doFn
		DoReturnFn MoqFlagSet_starGenType_NFlag_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_NFlag_fnRecorder) AndDo(fn MoqFlagSet_starGenType_NFlag_doFn) *MoqFlagSet_starGenType_NFlag_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_NFlag_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_NFlag_doReturnFn) *MoqFlagSet_starGenType_NFlag_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_NFlag_doFn
		DoReturnFn MoqFlagSet_starGenType_NFlag_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_NFlag_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_NFlag_resultsByParams
	for n, res := range r.Moq.ResultsByParams_NFlag {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_NFlag_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_NFlag_paramsKey]*MoqFlagSet_starGenType_NFlag_results{},
		}
		r.Moq.ResultsByParams_NFlag = append(r.Moq.ResultsByParams_NFlag, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_NFlag) {
			copy(r.Moq.ResultsByParams_NFlag[insertAt+1:], r.Moq.ResultsByParams_NFlag[insertAt:0])
			r.Moq.ResultsByParams_NFlag[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_NFlag(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_NFlag_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_NFlag_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_NFlag_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_NFlag_doFn
				DoReturnFn MoqFlagSet_starGenType_NFlag_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_NFlag(params MoqFlagSet_starGenType_NFlag_params) string {
	return fmt.Sprintf("NFlag()")
}

func (m *MoqFlagSet_starGenType) ParamsKey_NFlag(params MoqFlagSet_starGenType_NFlag_params, anyParams uint64) MoqFlagSet_starGenType_NFlag_paramsKey {
	m.Scene.T.Helper()
	return MoqFlagSet_starGenType_NFlag_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Arg(param1 int) *MoqFlagSet_starGenType_Arg_fnRecorder {
	return &MoqFlagSet_starGenType_Arg_fnRecorder{
		Params: MoqFlagSet_starGenType_Arg_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Arg_fnRecorder) Any() *MoqFlagSet_starGenType_Arg_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Arg(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Arg_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_Arg_anyParams) Param1() *MoqFlagSet_starGenType_Arg_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_Arg_fnRecorder) Seq() *MoqFlagSet_starGenType_Arg_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Arg(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Arg_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Arg_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Arg(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Arg_fnRecorder) ReturnResults(result1 string) *MoqFlagSet_starGenType_Arg_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Arg_doFn
		DoReturnFn MoqFlagSet_starGenType_Arg_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Arg_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Arg_doFn) *MoqFlagSet_starGenType_Arg_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Arg_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Arg_doReturnFn) *MoqFlagSet_starGenType_Arg_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Arg_doFn
		DoReturnFn MoqFlagSet_starGenType_Arg_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Arg_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Arg_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Arg {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Arg_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Arg_paramsKey]*MoqFlagSet_starGenType_Arg_results{},
		}
		r.Moq.ResultsByParams_Arg = append(r.Moq.ResultsByParams_Arg, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Arg) {
			copy(r.Moq.ResultsByParams_Arg[insertAt+1:], r.Moq.ResultsByParams_Arg[insertAt:0])
			r.Moq.ResultsByParams_Arg[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Arg(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Arg_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Arg_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Arg_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Arg_doFn
				DoReturnFn MoqFlagSet_starGenType_Arg_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Arg(params MoqFlagSet_starGenType_Arg_params) string {
	return fmt.Sprintf("Arg(%#v)", params.Param1)
}

func (m *MoqFlagSet_starGenType) ParamsKey_Arg(params MoqFlagSet_starGenType_Arg_params, anyParams uint64) MoqFlagSet_starGenType_Arg_paramsKey {
	m.Scene.T.Helper()
	var param1Used int
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Arg.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqFlagSet_starGenType_Arg_paramsKey{
		Params: struct{ Param1 int }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) NArg() *MoqFlagSet_starGenType_NArg_fnRecorder {
	return &MoqFlagSet_starGenType_NArg_fnRecorder{
		Params:   MoqFlagSet_starGenType_NArg_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_NArg_fnRecorder) Any() *MoqFlagSet_starGenType_NArg_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NArg(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_NArg_anyParams{Recorder: r}
}

func (r *MoqFlagSet_starGenType_NArg_fnRecorder) Seq() *MoqFlagSet_starGenType_NArg_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NArg(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_NArg_fnRecorder) NoSeq() *MoqFlagSet_starGenType_NArg_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NArg(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_NArg_fnRecorder) ReturnResults(result1 int) *MoqFlagSet_starGenType_NArg_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_NArg_doFn
		DoReturnFn MoqFlagSet_starGenType_NArg_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_NArg_fnRecorder) AndDo(fn MoqFlagSet_starGenType_NArg_doFn) *MoqFlagSet_starGenType_NArg_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_NArg_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_NArg_doReturnFn) *MoqFlagSet_starGenType_NArg_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_NArg_doFn
		DoReturnFn MoqFlagSet_starGenType_NArg_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_NArg_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_NArg_resultsByParams
	for n, res := range r.Moq.ResultsByParams_NArg {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_NArg_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_NArg_paramsKey]*MoqFlagSet_starGenType_NArg_results{},
		}
		r.Moq.ResultsByParams_NArg = append(r.Moq.ResultsByParams_NArg, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_NArg) {
			copy(r.Moq.ResultsByParams_NArg[insertAt+1:], r.Moq.ResultsByParams_NArg[insertAt:0])
			r.Moq.ResultsByParams_NArg[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_NArg(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_NArg_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_NArg_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_NArg_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_NArg_doFn
				DoReturnFn MoqFlagSet_starGenType_NArg_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_NArg(params MoqFlagSet_starGenType_NArg_params) string {
	return fmt.Sprintf("NArg()")
}

func (m *MoqFlagSet_starGenType) ParamsKey_NArg(params MoqFlagSet_starGenType_NArg_params, anyParams uint64) MoqFlagSet_starGenType_NArg_paramsKey {
	m.Scene.T.Helper()
	return MoqFlagSet_starGenType_NArg_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Args() *MoqFlagSet_starGenType_Args_fnRecorder {
	return &MoqFlagSet_starGenType_Args_fnRecorder{
		Params:   MoqFlagSet_starGenType_Args_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Args_fnRecorder) Any() *MoqFlagSet_starGenType_Args_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Args(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Args_anyParams{Recorder: r}
}

func (r *MoqFlagSet_starGenType_Args_fnRecorder) Seq() *MoqFlagSet_starGenType_Args_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Args(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Args_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Args_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Args(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Args_fnRecorder) ReturnResults(result1 []string) *MoqFlagSet_starGenType_Args_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []string
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Args_doFn
		DoReturnFn MoqFlagSet_starGenType_Args_doReturnFn
	}{
		Values: &struct {
			Result1 []string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Args_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Args_doFn) *MoqFlagSet_starGenType_Args_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Args_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Args_doReturnFn) *MoqFlagSet_starGenType_Args_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []string
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Args_doFn
		DoReturnFn MoqFlagSet_starGenType_Args_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Args_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Args_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Args {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Args_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Args_paramsKey]*MoqFlagSet_starGenType_Args_results{},
		}
		r.Moq.ResultsByParams_Args = append(r.Moq.ResultsByParams_Args, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Args) {
			copy(r.Moq.ResultsByParams_Args[insertAt+1:], r.Moq.ResultsByParams_Args[insertAt:0])
			r.Moq.ResultsByParams_Args[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Args(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Args_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Args_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Args_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []string
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Args_doFn
				DoReturnFn MoqFlagSet_starGenType_Args_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Args(params MoqFlagSet_starGenType_Args_params) string {
	return fmt.Sprintf("Args()")
}

func (m *MoqFlagSet_starGenType) ParamsKey_Args(params MoqFlagSet_starGenType_Args_params, anyParams uint64) MoqFlagSet_starGenType_Args_paramsKey {
	m.Scene.T.Helper()
	return MoqFlagSet_starGenType_Args_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFlagSet_starGenType_recorder) BoolVar(p *bool, name string, value bool, usage string) *MoqFlagSet_starGenType_BoolVar_fnRecorder {
	return &MoqFlagSet_starGenType_BoolVar_fnRecorder{
		Params: MoqFlagSet_starGenType_BoolVar_params{
			P:     p,
			Name:  name,
			Value: value,
			Usage: usage,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_BoolVar_fnRecorder) Any() *MoqFlagSet_starGenType_BoolVar_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BoolVar(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_BoolVar_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_BoolVar_anyParams) P() *MoqFlagSet_starGenType_BoolVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_BoolVar_anyParams) Name() *MoqFlagSet_starGenType_BoolVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_BoolVar_anyParams) Value() *MoqFlagSet_starGenType_BoolVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_BoolVar_anyParams) Usage() *MoqFlagSet_starGenType_BoolVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 3
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_BoolVar_fnRecorder) Seq() *MoqFlagSet_starGenType_BoolVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BoolVar(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_BoolVar_fnRecorder) NoSeq() *MoqFlagSet_starGenType_BoolVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BoolVar(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_BoolVar_fnRecorder) ReturnResults() *MoqFlagSet_starGenType_BoolVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_BoolVar_doFn
		DoReturnFn MoqFlagSet_starGenType_BoolVar_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_BoolVar_fnRecorder) AndDo(fn MoqFlagSet_starGenType_BoolVar_doFn) *MoqFlagSet_starGenType_BoolVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_BoolVar_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_BoolVar_doReturnFn) *MoqFlagSet_starGenType_BoolVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_BoolVar_doFn
		DoReturnFn MoqFlagSet_starGenType_BoolVar_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_BoolVar_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_BoolVar_resultsByParams
	for n, res := range r.Moq.ResultsByParams_BoolVar {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_BoolVar_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_BoolVar_paramsKey]*MoqFlagSet_starGenType_BoolVar_results{},
		}
		r.Moq.ResultsByParams_BoolVar = append(r.Moq.ResultsByParams_BoolVar, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_BoolVar) {
			copy(r.Moq.ResultsByParams_BoolVar[insertAt+1:], r.Moq.ResultsByParams_BoolVar[insertAt:0])
			r.Moq.ResultsByParams_BoolVar[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_BoolVar(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_BoolVar_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_BoolVar_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_BoolVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_BoolVar_doFn
				DoReturnFn MoqFlagSet_starGenType_BoolVar_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_BoolVar(params MoqFlagSet_starGenType_BoolVar_params) string {
	return fmt.Sprintf("BoolVar(%#v, %#v, %#v, %#v)", params.P, params.Name, params.Value, params.Usage)
}

func (m *MoqFlagSet_starGenType) ParamsKey_BoolVar(params MoqFlagSet_starGenType_BoolVar_params, anyParams uint64) MoqFlagSet_starGenType_BoolVar_paramsKey {
	m.Scene.T.Helper()
	var pUsed *bool
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.BoolVar.P == moq.ParamIndexByValue {
			pUsed = params.P
		} else {
			pUsedHash = hash.DeepHash(params.P)
		}
	}
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.BoolVar.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var valueUsed bool
	var valueUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.BoolVar.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	var usageUsed string
	var usageUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.Runtime.ParameterIndexing.BoolVar.Usage == moq.ParamIndexByValue {
			usageUsed = params.Usage
		} else {
			usageUsedHash = hash.DeepHash(params.Usage)
		}
	}
	return MoqFlagSet_starGenType_BoolVar_paramsKey{
		Params: struct {
			P     *bool
			Name  string
			Value bool
			Usage string
		}{
			P:     pUsed,
			Name:  nameUsed,
			Value: valueUsed,
			Usage: usageUsed,
		},
		Hashes: struct {
			P     hash.Hash
			Name  hash.Hash
			Value hash.Hash
			Usage hash.Hash
		}{
			P:     pUsedHash,
			Name:  nameUsedHash,
			Value: valueUsedHash,
			Usage: usageUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Bool(name string, value bool, usage string) *MoqFlagSet_starGenType_Bool_fnRecorder {
	return &MoqFlagSet_starGenType_Bool_fnRecorder{
		Params: MoqFlagSet_starGenType_Bool_params{
			Name:  name,
			Value: value,
			Usage: usage,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Bool_fnRecorder) Any() *MoqFlagSet_starGenType_Bool_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bool(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Bool_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_Bool_anyParams) Name() *MoqFlagSet_starGenType_Bool_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Bool_anyParams) Value() *MoqFlagSet_starGenType_Bool_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Bool_anyParams) Usage() *MoqFlagSet_starGenType_Bool_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_Bool_fnRecorder) Seq() *MoqFlagSet_starGenType_Bool_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bool(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Bool_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Bool_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bool(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Bool_fnRecorder) ReturnResults(result1 *bool) *MoqFlagSet_starGenType_Bool_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *bool
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Bool_doFn
		DoReturnFn MoqFlagSet_starGenType_Bool_doReturnFn
	}{
		Values: &struct {
			Result1 *bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Bool_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Bool_doFn) *MoqFlagSet_starGenType_Bool_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Bool_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Bool_doReturnFn) *MoqFlagSet_starGenType_Bool_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *bool
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Bool_doFn
		DoReturnFn MoqFlagSet_starGenType_Bool_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Bool_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Bool_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Bool {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Bool_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Bool_paramsKey]*MoqFlagSet_starGenType_Bool_results{},
		}
		r.Moq.ResultsByParams_Bool = append(r.Moq.ResultsByParams_Bool, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Bool) {
			copy(r.Moq.ResultsByParams_Bool[insertAt+1:], r.Moq.ResultsByParams_Bool[insertAt:0])
			r.Moq.ResultsByParams_Bool[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Bool(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Bool_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Bool_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Bool_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *bool
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Bool_doFn
				DoReturnFn MoqFlagSet_starGenType_Bool_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Bool(params MoqFlagSet_starGenType_Bool_params) string {
	return fmt.Sprintf("Bool(%#v, %#v, %#v)", params.Name, params.Value, params.Usage)
}

func (m *MoqFlagSet_starGenType) ParamsKey_Bool(params MoqFlagSet_starGenType_Bool_params, anyParams uint64) MoqFlagSet_starGenType_Bool_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Bool.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var valueUsed bool
	var valueUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Bool.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	var usageUsed string
	var usageUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Bool.Usage == moq.ParamIndexByValue {
			usageUsed = params.Usage
		} else {
			usageUsedHash = hash.DeepHash(params.Usage)
		}
	}
	return MoqFlagSet_starGenType_Bool_paramsKey{
		Params: struct {
			Name  string
			Value bool
			Usage string
		}{
			Name:  nameUsed,
			Value: valueUsed,
			Usage: usageUsed,
		},
		Hashes: struct {
			Name  hash.Hash
			Value hash.Hash
			Usage hash.Hash
		}{
			Name:  nameUsedHash,
			Value: valueUsedHash,
			Usage: usageUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) IntVar(p *int, name string, value int, usage string) *MoqFlagSet_starGenType_IntVar_fnRecorder {
	return &MoqFlagSet_starGenType_IntVar_fnRecorder{
		Params: MoqFlagSet_starGenType_IntVar_params{
			P:     p,
			Name:  name,
			Value: value,
			Usage: usage,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_IntVar_fnRecorder) Any() *MoqFlagSet_starGenType_IntVar_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IntVar(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_IntVar_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_IntVar_anyParams) P() *MoqFlagSet_starGenType_IntVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_IntVar_anyParams) Name() *MoqFlagSet_starGenType_IntVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_IntVar_anyParams) Value() *MoqFlagSet_starGenType_IntVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_IntVar_anyParams) Usage() *MoqFlagSet_starGenType_IntVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 3
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_IntVar_fnRecorder) Seq() *MoqFlagSet_starGenType_IntVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IntVar(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_IntVar_fnRecorder) NoSeq() *MoqFlagSet_starGenType_IntVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IntVar(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_IntVar_fnRecorder) ReturnResults() *MoqFlagSet_starGenType_IntVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_IntVar_doFn
		DoReturnFn MoqFlagSet_starGenType_IntVar_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_IntVar_fnRecorder) AndDo(fn MoqFlagSet_starGenType_IntVar_doFn) *MoqFlagSet_starGenType_IntVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_IntVar_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_IntVar_doReturnFn) *MoqFlagSet_starGenType_IntVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_IntVar_doFn
		DoReturnFn MoqFlagSet_starGenType_IntVar_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_IntVar_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_IntVar_resultsByParams
	for n, res := range r.Moq.ResultsByParams_IntVar {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_IntVar_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_IntVar_paramsKey]*MoqFlagSet_starGenType_IntVar_results{},
		}
		r.Moq.ResultsByParams_IntVar = append(r.Moq.ResultsByParams_IntVar, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_IntVar) {
			copy(r.Moq.ResultsByParams_IntVar[insertAt+1:], r.Moq.ResultsByParams_IntVar[insertAt:0])
			r.Moq.ResultsByParams_IntVar[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_IntVar(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_IntVar_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_IntVar_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_IntVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_IntVar_doFn
				DoReturnFn MoqFlagSet_starGenType_IntVar_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_IntVar(params MoqFlagSet_starGenType_IntVar_params) string {
	return fmt.Sprintf("IntVar(%#v, %#v, %#v, %#v)", params.P, params.Name, params.Value, params.Usage)
}

func (m *MoqFlagSet_starGenType) ParamsKey_IntVar(params MoqFlagSet_starGenType_IntVar_params, anyParams uint64) MoqFlagSet_starGenType_IntVar_paramsKey {
	m.Scene.T.Helper()
	var pUsed *int
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.IntVar.P == moq.ParamIndexByValue {
			pUsed = params.P
		} else {
			pUsedHash = hash.DeepHash(params.P)
		}
	}
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.IntVar.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var valueUsed int
	var valueUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.IntVar.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	var usageUsed string
	var usageUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.Runtime.ParameterIndexing.IntVar.Usage == moq.ParamIndexByValue {
			usageUsed = params.Usage
		} else {
			usageUsedHash = hash.DeepHash(params.Usage)
		}
	}
	return MoqFlagSet_starGenType_IntVar_paramsKey{
		Params: struct {
			P     *int
			Name  string
			Value int
			Usage string
		}{
			P:     pUsed,
			Name:  nameUsed,
			Value: valueUsed,
			Usage: usageUsed,
		},
		Hashes: struct {
			P     hash.Hash
			Name  hash.Hash
			Value hash.Hash
			Usage hash.Hash
		}{
			P:     pUsedHash,
			Name:  nameUsedHash,
			Value: valueUsedHash,
			Usage: usageUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Int(name string, value int, usage string) *MoqFlagSet_starGenType_Int_fnRecorder {
	return &MoqFlagSet_starGenType_Int_fnRecorder{
		Params: MoqFlagSet_starGenType_Int_params{
			Name:  name,
			Value: value,
			Usage: usage,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Int_fnRecorder) Any() *MoqFlagSet_starGenType_Int_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Int_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_Int_anyParams) Name() *MoqFlagSet_starGenType_Int_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Int_anyParams) Value() *MoqFlagSet_starGenType_Int_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Int_anyParams) Usage() *MoqFlagSet_starGenType_Int_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_Int_fnRecorder) Seq() *MoqFlagSet_starGenType_Int_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Int_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Int_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Int_fnRecorder) ReturnResults(result1 *int) *MoqFlagSet_starGenType_Int_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *int
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Int_doFn
		DoReturnFn MoqFlagSet_starGenType_Int_doReturnFn
	}{
		Values: &struct {
			Result1 *int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Int_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Int_doFn) *MoqFlagSet_starGenType_Int_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Int_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Int_doReturnFn) *MoqFlagSet_starGenType_Int_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *int
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Int_doFn
		DoReturnFn MoqFlagSet_starGenType_Int_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Int_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Int_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Int {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Int_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Int_paramsKey]*MoqFlagSet_starGenType_Int_results{},
		}
		r.Moq.ResultsByParams_Int = append(r.Moq.ResultsByParams_Int, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Int) {
			copy(r.Moq.ResultsByParams_Int[insertAt+1:], r.Moq.ResultsByParams_Int[insertAt:0])
			r.Moq.ResultsByParams_Int[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Int(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Int_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Int_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Int_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *int
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Int_doFn
				DoReturnFn MoqFlagSet_starGenType_Int_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Int(params MoqFlagSet_starGenType_Int_params) string {
	return fmt.Sprintf("Int(%#v, %#v, %#v)", params.Name, params.Value, params.Usage)
}

func (m *MoqFlagSet_starGenType) ParamsKey_Int(params MoqFlagSet_starGenType_Int_params, anyParams uint64) MoqFlagSet_starGenType_Int_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Int.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var valueUsed int
	var valueUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Int.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	var usageUsed string
	var usageUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Int.Usage == moq.ParamIndexByValue {
			usageUsed = params.Usage
		} else {
			usageUsedHash = hash.DeepHash(params.Usage)
		}
	}
	return MoqFlagSet_starGenType_Int_paramsKey{
		Params: struct {
			Name  string
			Value int
			Usage string
		}{
			Name:  nameUsed,
			Value: valueUsed,
			Usage: usageUsed,
		},
		Hashes: struct {
			Name  hash.Hash
			Value hash.Hash
			Usage hash.Hash
		}{
			Name:  nameUsedHash,
			Value: valueUsedHash,
			Usage: usageUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Int64Var(p *int64, name string, value int64, usage string) *MoqFlagSet_starGenType_Int64Var_fnRecorder {
	return &MoqFlagSet_starGenType_Int64Var_fnRecorder{
		Params: MoqFlagSet_starGenType_Int64Var_params{
			P:     p,
			Name:  name,
			Value: value,
			Usage: usage,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Int64Var_fnRecorder) Any() *MoqFlagSet_starGenType_Int64Var_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int64Var(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Int64Var_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_Int64Var_anyParams) P() *MoqFlagSet_starGenType_Int64Var_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Int64Var_anyParams) Name() *MoqFlagSet_starGenType_Int64Var_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Int64Var_anyParams) Value() *MoqFlagSet_starGenType_Int64Var_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Int64Var_anyParams) Usage() *MoqFlagSet_starGenType_Int64Var_fnRecorder {
	a.Recorder.AnyParams |= 1 << 3
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_Int64Var_fnRecorder) Seq() *MoqFlagSet_starGenType_Int64Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int64Var(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Int64Var_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Int64Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int64Var(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Int64Var_fnRecorder) ReturnResults() *MoqFlagSet_starGenType_Int64Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Int64Var_doFn
		DoReturnFn MoqFlagSet_starGenType_Int64Var_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Int64Var_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Int64Var_doFn) *MoqFlagSet_starGenType_Int64Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Int64Var_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Int64Var_doReturnFn) *MoqFlagSet_starGenType_Int64Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Int64Var_doFn
		DoReturnFn MoqFlagSet_starGenType_Int64Var_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Int64Var_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Int64Var_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Int64Var {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Int64Var_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Int64Var_paramsKey]*MoqFlagSet_starGenType_Int64Var_results{},
		}
		r.Moq.ResultsByParams_Int64Var = append(r.Moq.ResultsByParams_Int64Var, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Int64Var) {
			copy(r.Moq.ResultsByParams_Int64Var[insertAt+1:], r.Moq.ResultsByParams_Int64Var[insertAt:0])
			r.Moq.ResultsByParams_Int64Var[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Int64Var(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Int64Var_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Int64Var_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Int64Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Int64Var_doFn
				DoReturnFn MoqFlagSet_starGenType_Int64Var_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Int64Var(params MoqFlagSet_starGenType_Int64Var_params) string {
	return fmt.Sprintf("Int64Var(%#v, %#v, %#v, %#v)", params.P, params.Name, params.Value, params.Usage)
}

func (m *MoqFlagSet_starGenType) ParamsKey_Int64Var(params MoqFlagSet_starGenType_Int64Var_params, anyParams uint64) MoqFlagSet_starGenType_Int64Var_paramsKey {
	m.Scene.T.Helper()
	var pUsed *int64
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Int64Var.P == moq.ParamIndexByValue {
			pUsed = params.P
		} else {
			pUsedHash = hash.DeepHash(params.P)
		}
	}
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Int64Var.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var valueUsed int64
	var valueUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Int64Var.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	var usageUsed string
	var usageUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.Runtime.ParameterIndexing.Int64Var.Usage == moq.ParamIndexByValue {
			usageUsed = params.Usage
		} else {
			usageUsedHash = hash.DeepHash(params.Usage)
		}
	}
	return MoqFlagSet_starGenType_Int64Var_paramsKey{
		Params: struct {
			P     *int64
			Name  string
			Value int64
			Usage string
		}{
			P:     pUsed,
			Name:  nameUsed,
			Value: valueUsed,
			Usage: usageUsed,
		},
		Hashes: struct {
			P     hash.Hash
			Name  hash.Hash
			Value hash.Hash
			Usage hash.Hash
		}{
			P:     pUsedHash,
			Name:  nameUsedHash,
			Value: valueUsedHash,
			Usage: usageUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Int64(name string, value int64, usage string) *MoqFlagSet_starGenType_Int64_fnRecorder {
	return &MoqFlagSet_starGenType_Int64_fnRecorder{
		Params: MoqFlagSet_starGenType_Int64_params{
			Name:  name,
			Value: value,
			Usage: usage,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Int64_fnRecorder) Any() *MoqFlagSet_starGenType_Int64_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int64(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Int64_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_Int64_anyParams) Name() *MoqFlagSet_starGenType_Int64_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Int64_anyParams) Value() *MoqFlagSet_starGenType_Int64_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Int64_anyParams) Usage() *MoqFlagSet_starGenType_Int64_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_Int64_fnRecorder) Seq() *MoqFlagSet_starGenType_Int64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int64(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Int64_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Int64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int64(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Int64_fnRecorder) ReturnResults(result1 *int64) *MoqFlagSet_starGenType_Int64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *int64
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Int64_doFn
		DoReturnFn MoqFlagSet_starGenType_Int64_doReturnFn
	}{
		Values: &struct {
			Result1 *int64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Int64_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Int64_doFn) *MoqFlagSet_starGenType_Int64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Int64_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Int64_doReturnFn) *MoqFlagSet_starGenType_Int64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *int64
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Int64_doFn
		DoReturnFn MoqFlagSet_starGenType_Int64_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Int64_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Int64_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Int64 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Int64_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Int64_paramsKey]*MoqFlagSet_starGenType_Int64_results{},
		}
		r.Moq.ResultsByParams_Int64 = append(r.Moq.ResultsByParams_Int64, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Int64) {
			copy(r.Moq.ResultsByParams_Int64[insertAt+1:], r.Moq.ResultsByParams_Int64[insertAt:0])
			r.Moq.ResultsByParams_Int64[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Int64(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Int64_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Int64_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Int64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *int64
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Int64_doFn
				DoReturnFn MoqFlagSet_starGenType_Int64_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Int64(params MoqFlagSet_starGenType_Int64_params) string {
	return fmt.Sprintf("Int64(%#v, %#v, %#v)", params.Name, params.Value, params.Usage)
}

func (m *MoqFlagSet_starGenType) ParamsKey_Int64(params MoqFlagSet_starGenType_Int64_params, anyParams uint64) MoqFlagSet_starGenType_Int64_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Int64.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var valueUsed int64
	var valueUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Int64.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	var usageUsed string
	var usageUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Int64.Usage == moq.ParamIndexByValue {
			usageUsed = params.Usage
		} else {
			usageUsedHash = hash.DeepHash(params.Usage)
		}
	}
	return MoqFlagSet_starGenType_Int64_paramsKey{
		Params: struct {
			Name  string
			Value int64
			Usage string
		}{
			Name:  nameUsed,
			Value: valueUsed,
			Usage: usageUsed,
		},
		Hashes: struct {
			Name  hash.Hash
			Value hash.Hash
			Usage hash.Hash
		}{
			Name:  nameUsedHash,
			Value: valueUsedHash,
			Usage: usageUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) UintVar(p *uint, name string, value uint, usage string) *MoqFlagSet_starGenType_UintVar_fnRecorder {
	return &MoqFlagSet_starGenType_UintVar_fnRecorder{
		Params: MoqFlagSet_starGenType_UintVar_params{
			P:     p,
			Name:  name,
			Value: value,
			Usage: usage,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_UintVar_fnRecorder) Any() *MoqFlagSet_starGenType_UintVar_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UintVar(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_UintVar_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_UintVar_anyParams) P() *MoqFlagSet_starGenType_UintVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_UintVar_anyParams) Name() *MoqFlagSet_starGenType_UintVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_UintVar_anyParams) Value() *MoqFlagSet_starGenType_UintVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_UintVar_anyParams) Usage() *MoqFlagSet_starGenType_UintVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 3
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_UintVar_fnRecorder) Seq() *MoqFlagSet_starGenType_UintVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UintVar(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_UintVar_fnRecorder) NoSeq() *MoqFlagSet_starGenType_UintVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UintVar(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_UintVar_fnRecorder) ReturnResults() *MoqFlagSet_starGenType_UintVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_UintVar_doFn
		DoReturnFn MoqFlagSet_starGenType_UintVar_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_UintVar_fnRecorder) AndDo(fn MoqFlagSet_starGenType_UintVar_doFn) *MoqFlagSet_starGenType_UintVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_UintVar_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_UintVar_doReturnFn) *MoqFlagSet_starGenType_UintVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_UintVar_doFn
		DoReturnFn MoqFlagSet_starGenType_UintVar_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_UintVar_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_UintVar_resultsByParams
	for n, res := range r.Moq.ResultsByParams_UintVar {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_UintVar_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_UintVar_paramsKey]*MoqFlagSet_starGenType_UintVar_results{},
		}
		r.Moq.ResultsByParams_UintVar = append(r.Moq.ResultsByParams_UintVar, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_UintVar) {
			copy(r.Moq.ResultsByParams_UintVar[insertAt+1:], r.Moq.ResultsByParams_UintVar[insertAt:0])
			r.Moq.ResultsByParams_UintVar[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_UintVar(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_UintVar_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_UintVar_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_UintVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_UintVar_doFn
				DoReturnFn MoqFlagSet_starGenType_UintVar_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_UintVar(params MoqFlagSet_starGenType_UintVar_params) string {
	return fmt.Sprintf("UintVar(%#v, %#v, %#v, %#v)", params.P, params.Name, params.Value, params.Usage)
}

func (m *MoqFlagSet_starGenType) ParamsKey_UintVar(params MoqFlagSet_starGenType_UintVar_params, anyParams uint64) MoqFlagSet_starGenType_UintVar_paramsKey {
	m.Scene.T.Helper()
	var pUsed *uint
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.UintVar.P == moq.ParamIndexByValue {
			pUsed = params.P
		} else {
			pUsedHash = hash.DeepHash(params.P)
		}
	}
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.UintVar.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var valueUsed uint
	var valueUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.UintVar.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	var usageUsed string
	var usageUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.Runtime.ParameterIndexing.UintVar.Usage == moq.ParamIndexByValue {
			usageUsed = params.Usage
		} else {
			usageUsedHash = hash.DeepHash(params.Usage)
		}
	}
	return MoqFlagSet_starGenType_UintVar_paramsKey{
		Params: struct {
			P     *uint
			Name  string
			Value uint
			Usage string
		}{
			P:     pUsed,
			Name:  nameUsed,
			Value: valueUsed,
			Usage: usageUsed,
		},
		Hashes: struct {
			P     hash.Hash
			Name  hash.Hash
			Value hash.Hash
			Usage hash.Hash
		}{
			P:     pUsedHash,
			Name:  nameUsedHash,
			Value: valueUsedHash,
			Usage: usageUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Uint(name string, value uint, usage string) *MoqFlagSet_starGenType_Uint_fnRecorder {
	return &MoqFlagSet_starGenType_Uint_fnRecorder{
		Params: MoqFlagSet_starGenType_Uint_params{
			Name:  name,
			Value: value,
			Usage: usage,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Uint_fnRecorder) Any() *MoqFlagSet_starGenType_Uint_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Uint_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_Uint_anyParams) Name() *MoqFlagSet_starGenType_Uint_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Uint_anyParams) Value() *MoqFlagSet_starGenType_Uint_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Uint_anyParams) Usage() *MoqFlagSet_starGenType_Uint_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_Uint_fnRecorder) Seq() *MoqFlagSet_starGenType_Uint_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Uint_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Uint_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Uint_fnRecorder) ReturnResults(result1 *uint) *MoqFlagSet_starGenType_Uint_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *uint
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Uint_doFn
		DoReturnFn MoqFlagSet_starGenType_Uint_doReturnFn
	}{
		Values: &struct {
			Result1 *uint
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Uint_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Uint_doFn) *MoqFlagSet_starGenType_Uint_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Uint_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Uint_doReturnFn) *MoqFlagSet_starGenType_Uint_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *uint
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Uint_doFn
		DoReturnFn MoqFlagSet_starGenType_Uint_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Uint_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Uint_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Uint {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Uint_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Uint_paramsKey]*MoqFlagSet_starGenType_Uint_results{},
		}
		r.Moq.ResultsByParams_Uint = append(r.Moq.ResultsByParams_Uint, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Uint) {
			copy(r.Moq.ResultsByParams_Uint[insertAt+1:], r.Moq.ResultsByParams_Uint[insertAt:0])
			r.Moq.ResultsByParams_Uint[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Uint(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Uint_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Uint_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Uint_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *uint
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Uint_doFn
				DoReturnFn MoqFlagSet_starGenType_Uint_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Uint(params MoqFlagSet_starGenType_Uint_params) string {
	return fmt.Sprintf("Uint(%#v, %#v, %#v)", params.Name, params.Value, params.Usage)
}

func (m *MoqFlagSet_starGenType) ParamsKey_Uint(params MoqFlagSet_starGenType_Uint_params, anyParams uint64) MoqFlagSet_starGenType_Uint_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Uint.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var valueUsed uint
	var valueUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Uint.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	var usageUsed string
	var usageUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Uint.Usage == moq.ParamIndexByValue {
			usageUsed = params.Usage
		} else {
			usageUsedHash = hash.DeepHash(params.Usage)
		}
	}
	return MoqFlagSet_starGenType_Uint_paramsKey{
		Params: struct {
			Name  string
			Value uint
			Usage string
		}{
			Name:  nameUsed,
			Value: valueUsed,
			Usage: usageUsed,
		},
		Hashes: struct {
			Name  hash.Hash
			Value hash.Hash
			Usage hash.Hash
		}{
			Name:  nameUsedHash,
			Value: valueUsedHash,
			Usage: usageUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Uint64Var(p *uint64, name string, value uint64, usage string) *MoqFlagSet_starGenType_Uint64Var_fnRecorder {
	return &MoqFlagSet_starGenType_Uint64Var_fnRecorder{
		Params: MoqFlagSet_starGenType_Uint64Var_params{
			P:     p,
			Name:  name,
			Value: value,
			Usage: usage,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Uint64Var_fnRecorder) Any() *MoqFlagSet_starGenType_Uint64Var_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint64Var(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Uint64Var_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_Uint64Var_anyParams) P() *MoqFlagSet_starGenType_Uint64Var_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Uint64Var_anyParams) Name() *MoqFlagSet_starGenType_Uint64Var_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Uint64Var_anyParams) Value() *MoqFlagSet_starGenType_Uint64Var_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Uint64Var_anyParams) Usage() *MoqFlagSet_starGenType_Uint64Var_fnRecorder {
	a.Recorder.AnyParams |= 1 << 3
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_Uint64Var_fnRecorder) Seq() *MoqFlagSet_starGenType_Uint64Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint64Var(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Uint64Var_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Uint64Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint64Var(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Uint64Var_fnRecorder) ReturnResults() *MoqFlagSet_starGenType_Uint64Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Uint64Var_doFn
		DoReturnFn MoqFlagSet_starGenType_Uint64Var_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Uint64Var_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Uint64Var_doFn) *MoqFlagSet_starGenType_Uint64Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Uint64Var_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Uint64Var_doReturnFn) *MoqFlagSet_starGenType_Uint64Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Uint64Var_doFn
		DoReturnFn MoqFlagSet_starGenType_Uint64Var_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Uint64Var_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Uint64Var_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Uint64Var {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Uint64Var_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Uint64Var_paramsKey]*MoqFlagSet_starGenType_Uint64Var_results{},
		}
		r.Moq.ResultsByParams_Uint64Var = append(r.Moq.ResultsByParams_Uint64Var, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Uint64Var) {
			copy(r.Moq.ResultsByParams_Uint64Var[insertAt+1:], r.Moq.ResultsByParams_Uint64Var[insertAt:0])
			r.Moq.ResultsByParams_Uint64Var[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Uint64Var(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Uint64Var_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Uint64Var_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Uint64Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Uint64Var_doFn
				DoReturnFn MoqFlagSet_starGenType_Uint64Var_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Uint64Var(params MoqFlagSet_starGenType_Uint64Var_params) string {
	return fmt.Sprintf("Uint64Var(%#v, %#v, %#v, %#v)", params.P, params.Name, params.Value, params.Usage)
}

func (m *MoqFlagSet_starGenType) ParamsKey_Uint64Var(params MoqFlagSet_starGenType_Uint64Var_params, anyParams uint64) MoqFlagSet_starGenType_Uint64Var_paramsKey {
	m.Scene.T.Helper()
	var pUsed *uint64
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Uint64Var.P == moq.ParamIndexByValue {
			pUsed = params.P
		} else {
			pUsedHash = hash.DeepHash(params.P)
		}
	}
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Uint64Var.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var valueUsed uint64
	var valueUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Uint64Var.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	var usageUsed string
	var usageUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.Runtime.ParameterIndexing.Uint64Var.Usage == moq.ParamIndexByValue {
			usageUsed = params.Usage
		} else {
			usageUsedHash = hash.DeepHash(params.Usage)
		}
	}
	return MoqFlagSet_starGenType_Uint64Var_paramsKey{
		Params: struct {
			P     *uint64
			Name  string
			Value uint64
			Usage string
		}{
			P:     pUsed,
			Name:  nameUsed,
			Value: valueUsed,
			Usage: usageUsed,
		},
		Hashes: struct {
			P     hash.Hash
			Name  hash.Hash
			Value hash.Hash
			Usage hash.Hash
		}{
			P:     pUsedHash,
			Name:  nameUsedHash,
			Value: valueUsedHash,
			Usage: usageUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Uint64(name string, value uint64, usage string) *MoqFlagSet_starGenType_Uint64_fnRecorder {
	return &MoqFlagSet_starGenType_Uint64_fnRecorder{
		Params: MoqFlagSet_starGenType_Uint64_params{
			Name:  name,
			Value: value,
			Usage: usage,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Uint64_fnRecorder) Any() *MoqFlagSet_starGenType_Uint64_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint64(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Uint64_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_Uint64_anyParams) Name() *MoqFlagSet_starGenType_Uint64_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Uint64_anyParams) Value() *MoqFlagSet_starGenType_Uint64_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Uint64_anyParams) Usage() *MoqFlagSet_starGenType_Uint64_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_Uint64_fnRecorder) Seq() *MoqFlagSet_starGenType_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint64(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Uint64_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint64(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Uint64_fnRecorder) ReturnResults(result1 *uint64) *MoqFlagSet_starGenType_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *uint64
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Uint64_doFn
		DoReturnFn MoqFlagSet_starGenType_Uint64_doReturnFn
	}{
		Values: &struct {
			Result1 *uint64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Uint64_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Uint64_doFn) *MoqFlagSet_starGenType_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Uint64_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Uint64_doReturnFn) *MoqFlagSet_starGenType_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *uint64
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Uint64_doFn
		DoReturnFn MoqFlagSet_starGenType_Uint64_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Uint64_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Uint64_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Uint64 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Uint64_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Uint64_paramsKey]*MoqFlagSet_starGenType_Uint64_results{},
		}
		r.Moq.ResultsByParams_Uint64 = append(r.Moq.ResultsByParams_Uint64, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Uint64) {
			copy(r.Moq.ResultsByParams_Uint64[insertAt+1:], r.Moq.ResultsByParams_Uint64[insertAt:0])
			r.Moq.ResultsByParams_Uint64[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Uint64(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Uint64_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Uint64_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *uint64
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Uint64_doFn
				DoReturnFn MoqFlagSet_starGenType_Uint64_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Uint64(params MoqFlagSet_starGenType_Uint64_params) string {
	return fmt.Sprintf("Uint64(%#v, %#v, %#v)", params.Name, params.Value, params.Usage)
}

func (m *MoqFlagSet_starGenType) ParamsKey_Uint64(params MoqFlagSet_starGenType_Uint64_params, anyParams uint64) MoqFlagSet_starGenType_Uint64_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Uint64.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var valueUsed uint64
	var valueUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Uint64.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	var usageUsed string
	var usageUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Uint64.Usage == moq.ParamIndexByValue {
			usageUsed = params.Usage
		} else {
			usageUsedHash = hash.DeepHash(params.Usage)
		}
	}
	return MoqFlagSet_starGenType_Uint64_paramsKey{
		Params: struct {
			Name  string
			Value uint64
			Usage string
		}{
			Name:  nameUsed,
			Value: valueUsed,
			Usage: usageUsed,
		},
		Hashes: struct {
			Name  hash.Hash
			Value hash.Hash
			Usage hash.Hash
		}{
			Name:  nameUsedHash,
			Value: valueUsedHash,
			Usage: usageUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) StringVar(p *string, name string, value string, usage string) *MoqFlagSet_starGenType_StringVar_fnRecorder {
	return &MoqFlagSet_starGenType_StringVar_fnRecorder{
		Params: MoqFlagSet_starGenType_StringVar_params{
			P:     p,
			Name:  name,
			Value: value,
			Usage: usage,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_StringVar_fnRecorder) Any() *MoqFlagSet_starGenType_StringVar_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StringVar(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_StringVar_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_StringVar_anyParams) P() *MoqFlagSet_starGenType_StringVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_StringVar_anyParams) Name() *MoqFlagSet_starGenType_StringVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_StringVar_anyParams) Value() *MoqFlagSet_starGenType_StringVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_StringVar_anyParams) Usage() *MoqFlagSet_starGenType_StringVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 3
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_StringVar_fnRecorder) Seq() *MoqFlagSet_starGenType_StringVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StringVar(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_StringVar_fnRecorder) NoSeq() *MoqFlagSet_starGenType_StringVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StringVar(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_StringVar_fnRecorder) ReturnResults() *MoqFlagSet_starGenType_StringVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_StringVar_doFn
		DoReturnFn MoqFlagSet_starGenType_StringVar_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_StringVar_fnRecorder) AndDo(fn MoqFlagSet_starGenType_StringVar_doFn) *MoqFlagSet_starGenType_StringVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_StringVar_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_StringVar_doReturnFn) *MoqFlagSet_starGenType_StringVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_StringVar_doFn
		DoReturnFn MoqFlagSet_starGenType_StringVar_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_StringVar_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_StringVar_resultsByParams
	for n, res := range r.Moq.ResultsByParams_StringVar {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_StringVar_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_StringVar_paramsKey]*MoqFlagSet_starGenType_StringVar_results{},
		}
		r.Moq.ResultsByParams_StringVar = append(r.Moq.ResultsByParams_StringVar, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_StringVar) {
			copy(r.Moq.ResultsByParams_StringVar[insertAt+1:], r.Moq.ResultsByParams_StringVar[insertAt:0])
			r.Moq.ResultsByParams_StringVar[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_StringVar(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_StringVar_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_StringVar_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_StringVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_StringVar_doFn
				DoReturnFn MoqFlagSet_starGenType_StringVar_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_StringVar(params MoqFlagSet_starGenType_StringVar_params) string {
	return fmt.Sprintf("StringVar(%#v, %#v, %#v, %#v)", params.P, params.Name, params.Value, params.Usage)
}

func (m *MoqFlagSet_starGenType) ParamsKey_StringVar(params MoqFlagSet_starGenType_StringVar_params, anyParams uint64) MoqFlagSet_starGenType_StringVar_paramsKey {
	m.Scene.T.Helper()
	var pUsed *string
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.StringVar.P == moq.ParamIndexByValue {
			pUsed = params.P
		} else {
			pUsedHash = hash.DeepHash(params.P)
		}
	}
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.StringVar.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var valueUsed string
	var valueUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.StringVar.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	var usageUsed string
	var usageUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.Runtime.ParameterIndexing.StringVar.Usage == moq.ParamIndexByValue {
			usageUsed = params.Usage
		} else {
			usageUsedHash = hash.DeepHash(params.Usage)
		}
	}
	return MoqFlagSet_starGenType_StringVar_paramsKey{
		Params: struct {
			P     *string
			Name  string
			Value string
			Usage string
		}{
			P:     pUsed,
			Name:  nameUsed,
			Value: valueUsed,
			Usage: usageUsed,
		},
		Hashes: struct {
			P     hash.Hash
			Name  hash.Hash
			Value hash.Hash
			Usage hash.Hash
		}{
			P:     pUsedHash,
			Name:  nameUsedHash,
			Value: valueUsedHash,
			Usage: usageUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) String(name string, value string, usage string) *MoqFlagSet_starGenType_String_fnRecorder {
	return &MoqFlagSet_starGenType_String_fnRecorder{
		Params: MoqFlagSet_starGenType_String_params{
			Name:  name,
			Value: value,
			Usage: usage,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_String_fnRecorder) Any() *MoqFlagSet_starGenType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_String_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_String_anyParams) Name() *MoqFlagSet_starGenType_String_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_String_anyParams) Value() *MoqFlagSet_starGenType_String_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_String_anyParams) Usage() *MoqFlagSet_starGenType_String_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_String_fnRecorder) Seq() *MoqFlagSet_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_String_fnRecorder) NoSeq() *MoqFlagSet_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_String_fnRecorder) ReturnResults(result1 *string) *MoqFlagSet_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *string
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_String_doFn
		DoReturnFn MoqFlagSet_starGenType_String_doReturnFn
	}{
		Values: &struct {
			Result1 *string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_String_fnRecorder) AndDo(fn MoqFlagSet_starGenType_String_doFn) *MoqFlagSet_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_String_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_String_doReturnFn) *MoqFlagSet_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *string
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_String_doFn
		DoReturnFn MoqFlagSet_starGenType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_String_paramsKey]*MoqFlagSet_starGenType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *string
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_String_doFn
				DoReturnFn MoqFlagSet_starGenType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_String(params MoqFlagSet_starGenType_String_params) string {
	return fmt.Sprintf("String(%#v, %#v, %#v)", params.Name, params.Value, params.Usage)
}

func (m *MoqFlagSet_starGenType) ParamsKey_String(params MoqFlagSet_starGenType_String_params, anyParams uint64) MoqFlagSet_starGenType_String_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.String.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var valueUsed string
	var valueUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.String.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	var usageUsed string
	var usageUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.String.Usage == moq.ParamIndexByValue {
			usageUsed = params.Usage
		} else {
			usageUsedHash = hash.DeepHash(params.Usage)
		}
	}
	return MoqFlagSet_starGenType_String_paramsKey{
		Params: struct {
			Name  string
			Value string
			Usage string
		}{
			Name:  nameUsed,
			Value: valueUsed,
			Usage: usageUsed,
		},
		Hashes: struct {
			Name  hash.Hash
			Value hash.Hash
			Usage hash.Hash
		}{
			Name:  nameUsedHash,
			Value: valueUsedHash,
			Usage: usageUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Float64Var(p *float64, name string, value float64, usage string) *MoqFlagSet_starGenType_Float64Var_fnRecorder {
	return &MoqFlagSet_starGenType_Float64Var_fnRecorder{
		Params: MoqFlagSet_starGenType_Float64Var_params{
			P:     p,
			Name:  name,
			Value: value,
			Usage: usage,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Float64Var_fnRecorder) Any() *MoqFlagSet_starGenType_Float64Var_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Float64Var(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Float64Var_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_Float64Var_anyParams) P() *MoqFlagSet_starGenType_Float64Var_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Float64Var_anyParams) Name() *MoqFlagSet_starGenType_Float64Var_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Float64Var_anyParams) Value() *MoqFlagSet_starGenType_Float64Var_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Float64Var_anyParams) Usage() *MoqFlagSet_starGenType_Float64Var_fnRecorder {
	a.Recorder.AnyParams |= 1 << 3
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_Float64Var_fnRecorder) Seq() *MoqFlagSet_starGenType_Float64Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Float64Var(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Float64Var_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Float64Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Float64Var(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Float64Var_fnRecorder) ReturnResults() *MoqFlagSet_starGenType_Float64Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Float64Var_doFn
		DoReturnFn MoqFlagSet_starGenType_Float64Var_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Float64Var_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Float64Var_doFn) *MoqFlagSet_starGenType_Float64Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Float64Var_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Float64Var_doReturnFn) *MoqFlagSet_starGenType_Float64Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Float64Var_doFn
		DoReturnFn MoqFlagSet_starGenType_Float64Var_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Float64Var_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Float64Var_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Float64Var {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Float64Var_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Float64Var_paramsKey]*MoqFlagSet_starGenType_Float64Var_results{},
		}
		r.Moq.ResultsByParams_Float64Var = append(r.Moq.ResultsByParams_Float64Var, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Float64Var) {
			copy(r.Moq.ResultsByParams_Float64Var[insertAt+1:], r.Moq.ResultsByParams_Float64Var[insertAt:0])
			r.Moq.ResultsByParams_Float64Var[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Float64Var(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Float64Var_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Float64Var_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Float64Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Float64Var_doFn
				DoReturnFn MoqFlagSet_starGenType_Float64Var_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Float64Var(params MoqFlagSet_starGenType_Float64Var_params) string {
	return fmt.Sprintf("Float64Var(%#v, %#v, %#v, %#v)", params.P, params.Name, params.Value, params.Usage)
}

func (m *MoqFlagSet_starGenType) ParamsKey_Float64Var(params MoqFlagSet_starGenType_Float64Var_params, anyParams uint64) MoqFlagSet_starGenType_Float64Var_paramsKey {
	m.Scene.T.Helper()
	var pUsed *float64
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Float64Var.P == moq.ParamIndexByValue {
			pUsed = params.P
		} else {
			pUsedHash = hash.DeepHash(params.P)
		}
	}
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Float64Var.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var valueUsed float64
	var valueUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Float64Var.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	var usageUsed string
	var usageUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.Runtime.ParameterIndexing.Float64Var.Usage == moq.ParamIndexByValue {
			usageUsed = params.Usage
		} else {
			usageUsedHash = hash.DeepHash(params.Usage)
		}
	}
	return MoqFlagSet_starGenType_Float64Var_paramsKey{
		Params: struct {
			P     *float64
			Name  string
			Value float64
			Usage string
		}{
			P:     pUsed,
			Name:  nameUsed,
			Value: valueUsed,
			Usage: usageUsed,
		},
		Hashes: struct {
			P     hash.Hash
			Name  hash.Hash
			Value hash.Hash
			Usage hash.Hash
		}{
			P:     pUsedHash,
			Name:  nameUsedHash,
			Value: valueUsedHash,
			Usage: usageUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Float64(name string, value float64, usage string) *MoqFlagSet_starGenType_Float64_fnRecorder {
	return &MoqFlagSet_starGenType_Float64_fnRecorder{
		Params: MoqFlagSet_starGenType_Float64_params{
			Name:  name,
			Value: value,
			Usage: usage,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Float64_fnRecorder) Any() *MoqFlagSet_starGenType_Float64_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Float64(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Float64_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_Float64_anyParams) Name() *MoqFlagSet_starGenType_Float64_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Float64_anyParams) Value() *MoqFlagSet_starGenType_Float64_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Float64_anyParams) Usage() *MoqFlagSet_starGenType_Float64_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_Float64_fnRecorder) Seq() *MoqFlagSet_starGenType_Float64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Float64(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Float64_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Float64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Float64(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Float64_fnRecorder) ReturnResults(result1 *float64) *MoqFlagSet_starGenType_Float64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *float64
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Float64_doFn
		DoReturnFn MoqFlagSet_starGenType_Float64_doReturnFn
	}{
		Values: &struct {
			Result1 *float64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Float64_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Float64_doFn) *MoqFlagSet_starGenType_Float64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Float64_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Float64_doReturnFn) *MoqFlagSet_starGenType_Float64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *float64
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Float64_doFn
		DoReturnFn MoqFlagSet_starGenType_Float64_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Float64_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Float64_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Float64 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Float64_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Float64_paramsKey]*MoqFlagSet_starGenType_Float64_results{},
		}
		r.Moq.ResultsByParams_Float64 = append(r.Moq.ResultsByParams_Float64, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Float64) {
			copy(r.Moq.ResultsByParams_Float64[insertAt+1:], r.Moq.ResultsByParams_Float64[insertAt:0])
			r.Moq.ResultsByParams_Float64[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Float64(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Float64_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Float64_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Float64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *float64
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Float64_doFn
				DoReturnFn MoqFlagSet_starGenType_Float64_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Float64(params MoqFlagSet_starGenType_Float64_params) string {
	return fmt.Sprintf("Float64(%#v, %#v, %#v)", params.Name, params.Value, params.Usage)
}

func (m *MoqFlagSet_starGenType) ParamsKey_Float64(params MoqFlagSet_starGenType_Float64_params, anyParams uint64) MoqFlagSet_starGenType_Float64_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Float64.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var valueUsed float64
	var valueUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Float64.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	var usageUsed string
	var usageUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Float64.Usage == moq.ParamIndexByValue {
			usageUsed = params.Usage
		} else {
			usageUsedHash = hash.DeepHash(params.Usage)
		}
	}
	return MoqFlagSet_starGenType_Float64_paramsKey{
		Params: struct {
			Name  string
			Value float64
			Usage string
		}{
			Name:  nameUsed,
			Value: valueUsed,
			Usage: usageUsed,
		},
		Hashes: struct {
			Name  hash.Hash
			Value hash.Hash
			Usage hash.Hash
		}{
			Name:  nameUsedHash,
			Value: valueUsedHash,
			Usage: usageUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) DurationVar(p *time.Duration, name string, value time.Duration, usage string) *MoqFlagSet_starGenType_DurationVar_fnRecorder {
	return &MoqFlagSet_starGenType_DurationVar_fnRecorder{
		Params: MoqFlagSet_starGenType_DurationVar_params{
			P:     p,
			Name:  name,
			Value: value,
			Usage: usage,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_DurationVar_fnRecorder) Any() *MoqFlagSet_starGenType_DurationVar_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DurationVar(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_DurationVar_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_DurationVar_anyParams) P() *MoqFlagSet_starGenType_DurationVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_DurationVar_anyParams) Name() *MoqFlagSet_starGenType_DurationVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_DurationVar_anyParams) Value() *MoqFlagSet_starGenType_DurationVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_DurationVar_anyParams) Usage() *MoqFlagSet_starGenType_DurationVar_fnRecorder {
	a.Recorder.AnyParams |= 1 << 3
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_DurationVar_fnRecorder) Seq() *MoqFlagSet_starGenType_DurationVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DurationVar(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_DurationVar_fnRecorder) NoSeq() *MoqFlagSet_starGenType_DurationVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DurationVar(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_DurationVar_fnRecorder) ReturnResults() *MoqFlagSet_starGenType_DurationVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_DurationVar_doFn
		DoReturnFn MoqFlagSet_starGenType_DurationVar_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_DurationVar_fnRecorder) AndDo(fn MoqFlagSet_starGenType_DurationVar_doFn) *MoqFlagSet_starGenType_DurationVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_DurationVar_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_DurationVar_doReturnFn) *MoqFlagSet_starGenType_DurationVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_DurationVar_doFn
		DoReturnFn MoqFlagSet_starGenType_DurationVar_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_DurationVar_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_DurationVar_resultsByParams
	for n, res := range r.Moq.ResultsByParams_DurationVar {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_DurationVar_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_DurationVar_paramsKey]*MoqFlagSet_starGenType_DurationVar_results{},
		}
		r.Moq.ResultsByParams_DurationVar = append(r.Moq.ResultsByParams_DurationVar, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_DurationVar) {
			copy(r.Moq.ResultsByParams_DurationVar[insertAt+1:], r.Moq.ResultsByParams_DurationVar[insertAt:0])
			r.Moq.ResultsByParams_DurationVar[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_DurationVar(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_DurationVar_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_DurationVar_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_DurationVar_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_DurationVar_doFn
				DoReturnFn MoqFlagSet_starGenType_DurationVar_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_DurationVar(params MoqFlagSet_starGenType_DurationVar_params) string {
	return fmt.Sprintf("DurationVar(%#v, %#v, %#v, %#v)", params.P, params.Name, params.Value, params.Usage)
}

func (m *MoqFlagSet_starGenType) ParamsKey_DurationVar(params MoqFlagSet_starGenType_DurationVar_params, anyParams uint64) MoqFlagSet_starGenType_DurationVar_paramsKey {
	m.Scene.T.Helper()
	var pUsed *time.Duration
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.DurationVar.P == moq.ParamIndexByValue {
			pUsed = params.P
		} else {
			pUsedHash = hash.DeepHash(params.P)
		}
	}
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.DurationVar.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var valueUsed time.Duration
	var valueUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.DurationVar.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	var usageUsed string
	var usageUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.Runtime.ParameterIndexing.DurationVar.Usage == moq.ParamIndexByValue {
			usageUsed = params.Usage
		} else {
			usageUsedHash = hash.DeepHash(params.Usage)
		}
	}
	return MoqFlagSet_starGenType_DurationVar_paramsKey{
		Params: struct {
			P     *time.Duration
			Name  string
			Value time.Duration
			Usage string
		}{
			P:     pUsed,
			Name:  nameUsed,
			Value: valueUsed,
			Usage: usageUsed,
		},
		Hashes: struct {
			P     hash.Hash
			Name  hash.Hash
			Value hash.Hash
			Usage hash.Hash
		}{
			P:     pUsedHash,
			Name:  nameUsedHash,
			Value: valueUsedHash,
			Usage: usageUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Duration(name string, value time.Duration, usage string) *MoqFlagSet_starGenType_Duration_fnRecorder {
	return &MoqFlagSet_starGenType_Duration_fnRecorder{
		Params: MoqFlagSet_starGenType_Duration_params{
			Name:  name,
			Value: value,
			Usage: usage,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Duration_fnRecorder) Any() *MoqFlagSet_starGenType_Duration_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Duration(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Duration_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_Duration_anyParams) Name() *MoqFlagSet_starGenType_Duration_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Duration_anyParams) Value() *MoqFlagSet_starGenType_Duration_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Duration_anyParams) Usage() *MoqFlagSet_starGenType_Duration_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_Duration_fnRecorder) Seq() *MoqFlagSet_starGenType_Duration_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Duration(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Duration_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Duration_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Duration(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Duration_fnRecorder) ReturnResults(result1 *time.Duration) *MoqFlagSet_starGenType_Duration_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *time.Duration
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Duration_doFn
		DoReturnFn MoqFlagSet_starGenType_Duration_doReturnFn
	}{
		Values: &struct {
			Result1 *time.Duration
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Duration_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Duration_doFn) *MoqFlagSet_starGenType_Duration_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Duration_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Duration_doReturnFn) *MoqFlagSet_starGenType_Duration_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *time.Duration
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Duration_doFn
		DoReturnFn MoqFlagSet_starGenType_Duration_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Duration_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Duration_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Duration {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Duration_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Duration_paramsKey]*MoqFlagSet_starGenType_Duration_results{},
		}
		r.Moq.ResultsByParams_Duration = append(r.Moq.ResultsByParams_Duration, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Duration) {
			copy(r.Moq.ResultsByParams_Duration[insertAt+1:], r.Moq.ResultsByParams_Duration[insertAt:0])
			r.Moq.ResultsByParams_Duration[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Duration(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Duration_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Duration_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Duration_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *time.Duration
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Duration_doFn
				DoReturnFn MoqFlagSet_starGenType_Duration_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Duration(params MoqFlagSet_starGenType_Duration_params) string {
	return fmt.Sprintf("Duration(%#v, %#v, %#v)", params.Name, params.Value, params.Usage)
}

func (m *MoqFlagSet_starGenType) ParamsKey_Duration(params MoqFlagSet_starGenType_Duration_params, anyParams uint64) MoqFlagSet_starGenType_Duration_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Duration.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var valueUsed time.Duration
	var valueUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Duration.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	var usageUsed string
	var usageUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Duration.Usage == moq.ParamIndexByValue {
			usageUsed = params.Usage
		} else {
			usageUsedHash = hash.DeepHash(params.Usage)
		}
	}
	return MoqFlagSet_starGenType_Duration_paramsKey{
		Params: struct {
			Name  string
			Value time.Duration
			Usage string
		}{
			Name:  nameUsed,
			Value: valueUsed,
			Usage: usageUsed,
		},
		Hashes: struct {
			Name  hash.Hash
			Value hash.Hash
			Usage hash.Hash
		}{
			Name:  nameUsedHash,
			Value: valueUsedHash,
			Usage: usageUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Var(value flag.Value, name string, usage string) *MoqFlagSet_starGenType_Var_fnRecorder {
	return &MoqFlagSet_starGenType_Var_fnRecorder{
		Params: MoqFlagSet_starGenType_Var_params{
			Value: value,
			Name:  name,
			Usage: usage,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Var_fnRecorder) Any() *MoqFlagSet_starGenType_Var_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Var(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Var_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_Var_anyParams) Value() *MoqFlagSet_starGenType_Var_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Var_anyParams) Name() *MoqFlagSet_starGenType_Var_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Var_anyParams) Usage() *MoqFlagSet_starGenType_Var_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_Var_fnRecorder) Seq() *MoqFlagSet_starGenType_Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Var(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Var_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Var(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Var_fnRecorder) ReturnResults() *MoqFlagSet_starGenType_Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Var_doFn
		DoReturnFn MoqFlagSet_starGenType_Var_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Var_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Var_doFn) *MoqFlagSet_starGenType_Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Var_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Var_doReturnFn) *MoqFlagSet_starGenType_Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Var_doFn
		DoReturnFn MoqFlagSet_starGenType_Var_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Var_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Var_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Var {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Var_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Var_paramsKey]*MoqFlagSet_starGenType_Var_results{},
		}
		r.Moq.ResultsByParams_Var = append(r.Moq.ResultsByParams_Var, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Var) {
			copy(r.Moq.ResultsByParams_Var[insertAt+1:], r.Moq.ResultsByParams_Var[insertAt:0])
			r.Moq.ResultsByParams_Var[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Var(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Var_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Var_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Var_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Var_doFn
				DoReturnFn MoqFlagSet_starGenType_Var_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Var(params MoqFlagSet_starGenType_Var_params) string {
	return fmt.Sprintf("Var(%#v, %#v, %#v)", params.Value, params.Name, params.Usage)
}

func (m *MoqFlagSet_starGenType) ParamsKey_Var(params MoqFlagSet_starGenType_Var_params, anyParams uint64) MoqFlagSet_starGenType_Var_paramsKey {
	m.Scene.T.Helper()
	var valueUsed flag.Value
	var valueUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Var.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Var.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var usageUsed string
	var usageUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Var.Usage == moq.ParamIndexByValue {
			usageUsed = params.Usage
		} else {
			usageUsedHash = hash.DeepHash(params.Usage)
		}
	}
	return MoqFlagSet_starGenType_Var_paramsKey{
		Params: struct {
			Value flag.Value
			Name  string
			Usage string
		}{
			Value: valueUsed,
			Name:  nameUsed,
			Usage: usageUsed,
		},
		Hashes: struct {
			Value hash.Hash
			Name  hash.Hash
			Usage hash.Hash
		}{
			Value: valueUsedHash,
			Name:  nameUsedHash,
			Usage: usageUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Parse(arguments []string) *MoqFlagSet_starGenType_Parse_fnRecorder {
	return &MoqFlagSet_starGenType_Parse_fnRecorder{
		Params: MoqFlagSet_starGenType_Parse_params{
			Arguments: arguments,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Parse_fnRecorder) Any() *MoqFlagSet_starGenType_Parse_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Parse(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Parse_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_Parse_anyParams) Arguments() *MoqFlagSet_starGenType_Parse_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_Parse_fnRecorder) Seq() *MoqFlagSet_starGenType_Parse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Parse(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Parse_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Parse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Parse(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Parse_fnRecorder) ReturnResults(result1 error) *MoqFlagSet_starGenType_Parse_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Parse_doFn
		DoReturnFn MoqFlagSet_starGenType_Parse_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Parse_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Parse_doFn) *MoqFlagSet_starGenType_Parse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Parse_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Parse_doReturnFn) *MoqFlagSet_starGenType_Parse_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Parse_doFn
		DoReturnFn MoqFlagSet_starGenType_Parse_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Parse_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Parse_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Parse {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Parse_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Parse_paramsKey]*MoqFlagSet_starGenType_Parse_results{},
		}
		r.Moq.ResultsByParams_Parse = append(r.Moq.ResultsByParams_Parse, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Parse) {
			copy(r.Moq.ResultsByParams_Parse[insertAt+1:], r.Moq.ResultsByParams_Parse[insertAt:0])
			r.Moq.ResultsByParams_Parse[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Parse(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Parse_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Parse_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Parse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Parse_doFn
				DoReturnFn MoqFlagSet_starGenType_Parse_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Parse(params MoqFlagSet_starGenType_Parse_params) string {
	return fmt.Sprintf("Parse(%#v)", params.Arguments)
}

func (m *MoqFlagSet_starGenType) ParamsKey_Parse(params MoqFlagSet_starGenType_Parse_params, anyParams uint64) MoqFlagSet_starGenType_Parse_paramsKey {
	m.Scene.T.Helper()
	var argumentsUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Parse.Arguments == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The arguments parameter of the Parse function can't be indexed by value")
		}
		argumentsUsedHash = hash.DeepHash(params.Arguments)
	}
	return MoqFlagSet_starGenType_Parse_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Arguments hash.Hash }{
			Arguments: argumentsUsedHash,
		},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Parsed() *MoqFlagSet_starGenType_Parsed_fnRecorder {
	return &MoqFlagSet_starGenType_Parsed_fnRecorder{
		Params:   MoqFlagSet_starGenType_Parsed_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Parsed_fnRecorder) Any() *MoqFlagSet_starGenType_Parsed_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Parsed(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Parsed_anyParams{Recorder: r}
}

func (r *MoqFlagSet_starGenType_Parsed_fnRecorder) Seq() *MoqFlagSet_starGenType_Parsed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Parsed(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Parsed_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Parsed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Parsed(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Parsed_fnRecorder) ReturnResults(result1 bool) *MoqFlagSet_starGenType_Parsed_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Parsed_doFn
		DoReturnFn MoqFlagSet_starGenType_Parsed_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Parsed_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Parsed_doFn) *MoqFlagSet_starGenType_Parsed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Parsed_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Parsed_doReturnFn) *MoqFlagSet_starGenType_Parsed_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Parsed_doFn
		DoReturnFn MoqFlagSet_starGenType_Parsed_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Parsed_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Parsed_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Parsed {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Parsed_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Parsed_paramsKey]*MoqFlagSet_starGenType_Parsed_results{},
		}
		r.Moq.ResultsByParams_Parsed = append(r.Moq.ResultsByParams_Parsed, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Parsed) {
			copy(r.Moq.ResultsByParams_Parsed[insertAt+1:], r.Moq.ResultsByParams_Parsed[insertAt:0])
			r.Moq.ResultsByParams_Parsed[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Parsed(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Parsed_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Parsed_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Parsed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Parsed_doFn
				DoReturnFn MoqFlagSet_starGenType_Parsed_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Parsed(params MoqFlagSet_starGenType_Parsed_params) string {
	return fmt.Sprintf("Parsed()")
}

func (m *MoqFlagSet_starGenType) ParamsKey_Parsed(params MoqFlagSet_starGenType_Parsed_params, anyParams uint64) MoqFlagSet_starGenType_Parsed_paramsKey {
	m.Scene.T.Helper()
	return MoqFlagSet_starGenType_Parsed_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFlagSet_starGenType_recorder) Init(name string, errorHandling flag.ErrorHandling) *MoqFlagSet_starGenType_Init_fnRecorder {
	return &MoqFlagSet_starGenType_Init_fnRecorder{
		Params: MoqFlagSet_starGenType_Init_params{
			Name:          name,
			ErrorHandling: errorHandling,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFlagSet_starGenType_Init_fnRecorder) Any() *MoqFlagSet_starGenType_Init_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Init(r.Params))
		return nil
	}
	return &MoqFlagSet_starGenType_Init_anyParams{Recorder: r}
}

func (a *MoqFlagSet_starGenType_Init_anyParams) Name() *MoqFlagSet_starGenType_Init_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFlagSet_starGenType_Init_anyParams) ErrorHandling() *MoqFlagSet_starGenType_Init_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqFlagSet_starGenType_Init_fnRecorder) Seq() *MoqFlagSet_starGenType_Init_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Init(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFlagSet_starGenType_Init_fnRecorder) NoSeq() *MoqFlagSet_starGenType_Init_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Init(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFlagSet_starGenType_Init_fnRecorder) ReturnResults() *MoqFlagSet_starGenType_Init_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Init_doFn
		DoReturnFn MoqFlagSet_starGenType_Init_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFlagSet_starGenType_Init_fnRecorder) AndDo(fn MoqFlagSet_starGenType_Init_doFn) *MoqFlagSet_starGenType_Init_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFlagSet_starGenType_Init_fnRecorder) DoReturnResults(fn MoqFlagSet_starGenType_Init_doReturnFn) *MoqFlagSet_starGenType_Init_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFlagSet_starGenType_Init_doFn
		DoReturnFn MoqFlagSet_starGenType_Init_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFlagSet_starGenType_Init_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFlagSet_starGenType_Init_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Init {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFlagSet_starGenType_Init_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFlagSet_starGenType_Init_paramsKey]*MoqFlagSet_starGenType_Init_results{},
		}
		r.Moq.ResultsByParams_Init = append(r.Moq.ResultsByParams_Init, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Init) {
			copy(r.Moq.ResultsByParams_Init[insertAt+1:], r.Moq.ResultsByParams_Init[insertAt:0])
			r.Moq.ResultsByParams_Init[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Init(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFlagSet_starGenType_Init_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFlagSet_starGenType_Init_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFlagSet_starGenType_Init_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFlagSet_starGenType_Init_doFn
				DoReturnFn MoqFlagSet_starGenType_Init_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFlagSet_starGenType) PrettyParams_Init(params MoqFlagSet_starGenType_Init_params) string {
	return fmt.Sprintf("Init(%#v, %#v)", params.Name, params.ErrorHandling)
}

func (m *MoqFlagSet_starGenType) ParamsKey_Init(params MoqFlagSet_starGenType_Init_params, anyParams uint64) MoqFlagSet_starGenType_Init_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Init.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	var errorHandlingUsed flag.ErrorHandling
	var errorHandlingUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Init.ErrorHandling == moq.ParamIndexByValue {
			errorHandlingUsed = params.ErrorHandling
		} else {
			errorHandlingUsedHash = hash.DeepHash(params.ErrorHandling)
		}
	}
	return MoqFlagSet_starGenType_Init_paramsKey{
		Params: struct {
			Name          string
			ErrorHandling flag.ErrorHandling
		}{
			Name:          nameUsed,
			ErrorHandling: errorHandlingUsed,
		},
		Hashes: struct {
			Name          hash.Hash
			ErrorHandling hash.Hash
		}{
			Name:          nameUsedHash,
			ErrorHandling: errorHandlingUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqFlagSet_starGenType) Reset() {
	m.ResultsByParams_Output = nil
	m.ResultsByParams_Name = nil
	m.ResultsByParams_ErrorHandling = nil
	m.ResultsByParams_SetOutput = nil
	m.ResultsByParams_VisitAll = nil
	m.ResultsByParams_Visit = nil
	m.ResultsByParams_Lookup = nil
	m.ResultsByParams_Set = nil
	m.ResultsByParams_PrintDefaults = nil
	m.ResultsByParams_NFlag = nil
	m.ResultsByParams_Arg = nil
	m.ResultsByParams_NArg = nil
	m.ResultsByParams_Args = nil
	m.ResultsByParams_BoolVar = nil
	m.ResultsByParams_Bool = nil
	m.ResultsByParams_IntVar = nil
	m.ResultsByParams_Int = nil
	m.ResultsByParams_Int64Var = nil
	m.ResultsByParams_Int64 = nil
	m.ResultsByParams_UintVar = nil
	m.ResultsByParams_Uint = nil
	m.ResultsByParams_Uint64Var = nil
	m.ResultsByParams_Uint64 = nil
	m.ResultsByParams_StringVar = nil
	m.ResultsByParams_String = nil
	m.ResultsByParams_Float64Var = nil
	m.ResultsByParams_Float64 = nil
	m.ResultsByParams_DurationVar = nil
	m.ResultsByParams_Duration = nil
	m.ResultsByParams_Var = nil
	m.ResultsByParams_Parse = nil
	m.ResultsByParams_Parsed = nil
	m.ResultsByParams_Init = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqFlagSet_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Output {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Output(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Name {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Name(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ErrorHandling {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ErrorHandling(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetOutput {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetOutput(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_VisitAll {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_VisitAll(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Visit {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Visit(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Lookup {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Lookup(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Set {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Set(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_PrintDefaults {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_PrintDefaults(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_NFlag {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_NFlag(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Arg {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Arg(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_NArg {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_NArg(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Args {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Args(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_BoolVar {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_BoolVar(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Bool {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Bool(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_IntVar {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_IntVar(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Int {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Int(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Int64Var {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Int64Var(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Int64 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Int64(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_UintVar {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_UintVar(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Uint {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Uint(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Uint64Var {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Uint64Var(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Uint64 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Uint64(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_StringVar {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_StringVar(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Float64Var {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Float64Var(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Float64 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Float64(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_DurationVar {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_DurationVar(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Duration {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Duration(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Var {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Var(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Parse {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Parse(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Parsed {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Parsed(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Init {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Init(results.Params))
			}
		}
	}
}
