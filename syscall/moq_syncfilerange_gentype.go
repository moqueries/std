// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package syscall

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// SyncFileRange_genType is the fabricated implementation type of this mock
// (emitted when mocking functions directly and not from a function type)
type SyncFileRange_genType func(fd int, off int64, n int64, flags int) (err error)

// MoqSyncFileRange_genType holds the state of a moq of the
// SyncFileRange_genType type
type MoqSyncFileRange_genType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqSyncFileRange_genType_mock

	ResultsByParams []MoqSyncFileRange_genType_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Fd    moq.ParamIndexing
			Off   moq.ParamIndexing
			N     moq.ParamIndexing
			Flags moq.ParamIndexing
		}
	}
}

// MoqSyncFileRange_genType_mock isolates the mock interface of the
// SyncFileRange_genType type
type MoqSyncFileRange_genType_mock struct {
	Moq *MoqSyncFileRange_genType
}

// MoqSyncFileRange_genType_params holds the params of the
// SyncFileRange_genType type
type MoqSyncFileRange_genType_params struct {
	Fd    int
	Off   int64
	N     int64
	Flags int
}

// MoqSyncFileRange_genType_paramsKey holds the map key params of the
// SyncFileRange_genType type
type MoqSyncFileRange_genType_paramsKey struct {
	Params struct {
		Fd    int
		Off   int64
		N     int64
		Flags int
	}
	Hashes struct {
		Fd    hash.Hash
		Off   hash.Hash
		N     hash.Hash
		Flags hash.Hash
	}
}

// MoqSyncFileRange_genType_resultsByParams contains the results for a given
// set of parameters for the SyncFileRange_genType type
type MoqSyncFileRange_genType_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSyncFileRange_genType_paramsKey]*MoqSyncFileRange_genType_results
}

// MoqSyncFileRange_genType_doFn defines the type of function needed when
// calling AndDo for the SyncFileRange_genType type
type MoqSyncFileRange_genType_doFn func(fd int, off int64, n int64, flags int)

// MoqSyncFileRange_genType_doReturnFn defines the type of function needed when
// calling DoReturnResults for the SyncFileRange_genType type
type MoqSyncFileRange_genType_doReturnFn func(fd int, off int64, n int64, flags int) (err error)

// MoqSyncFileRange_genType_results holds the results of the
// SyncFileRange_genType type
type MoqSyncFileRange_genType_results struct {
	Params  MoqSyncFileRange_genType_params
	Results []struct {
		Values     *struct{ Err error }
		Sequence   uint32
		DoFn       MoqSyncFileRange_genType_doFn
		DoReturnFn MoqSyncFileRange_genType_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSyncFileRange_genType_fnRecorder routes recorded function calls to the
// MoqSyncFileRange_genType moq
type MoqSyncFileRange_genType_fnRecorder struct {
	Params    MoqSyncFileRange_genType_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSyncFileRange_genType_results
	Moq       *MoqSyncFileRange_genType
}

// MoqSyncFileRange_genType_anyParams isolates the any params functions of the
// SyncFileRange_genType type
type MoqSyncFileRange_genType_anyParams struct {
	Recorder *MoqSyncFileRange_genType_fnRecorder
}

// NewMoqSyncFileRange_genType creates a new moq of the SyncFileRange_genType
// type
func NewMoqSyncFileRange_genType(scene *moq.Scene, config *moq.Config) *MoqSyncFileRange_genType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqSyncFileRange_genType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqSyncFileRange_genType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Fd    moq.ParamIndexing
				Off   moq.ParamIndexing
				N     moq.ParamIndexing
				Flags moq.ParamIndexing
			}
		}{ParameterIndexing: struct {
			Fd    moq.ParamIndexing
			Off   moq.ParamIndexing
			N     moq.ParamIndexing
			Flags moq.ParamIndexing
		}{
			Fd:    moq.ParamIndexByValue,
			Off:   moq.ParamIndexByValue,
			N:     moq.ParamIndexByValue,
			Flags: moq.ParamIndexByValue,
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the SyncFileRange_genType type
func (m *MoqSyncFileRange_genType) Mock() SyncFileRange_genType {
	return func(fd int, off int64, n int64, flags int) (_ error) {
		m.Scene.T.Helper()
		moq := &MoqSyncFileRange_genType_mock{Moq: m}
		return moq.Fn(fd, off, n, flags)
	}
}

func (m *MoqSyncFileRange_genType_mock) Fn(fd int, off int64, n int64, flags int) (err error) {
	m.Moq.Scene.T.Helper()
	params := MoqSyncFileRange_genType_params{
		Fd:    fd,
		Off:   off,
		N:     n,
		Flags: flags,
	}
	var results *MoqSyncFileRange_genType_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		paramsKey := m.Moq.ParamsKey(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(fd, off, n, flags)
	}

	if result.Values != nil {
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		err = result.DoReturnFn(fd, off, n, flags)
	}
	return
}

func (m *MoqSyncFileRange_genType) OnCall(fd int, off int64, n int64, flags int) *MoqSyncFileRange_genType_fnRecorder {
	return &MoqSyncFileRange_genType_fnRecorder{
		Params: MoqSyncFileRange_genType_params{
			Fd:    fd,
			Off:   off,
			N:     n,
			Flags: flags,
		},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqSyncFileRange_genType_fnRecorder) Any() *MoqSyncFileRange_genType_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	return &MoqSyncFileRange_genType_anyParams{Recorder: r}
}

func (a *MoqSyncFileRange_genType_anyParams) Fd() *MoqSyncFileRange_genType_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqSyncFileRange_genType_anyParams) Off() *MoqSyncFileRange_genType_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqSyncFileRange_genType_anyParams) N() *MoqSyncFileRange_genType_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (a *MoqSyncFileRange_genType_anyParams) Flags() *MoqSyncFileRange_genType_fnRecorder {
	a.Recorder.AnyParams |= 1 << 3
	return a.Recorder
}

func (r *MoqSyncFileRange_genType_fnRecorder) Seq() *MoqSyncFileRange_genType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSyncFileRange_genType_fnRecorder) NoSeq() *MoqSyncFileRange_genType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSyncFileRange_genType_fnRecorder) ReturnResults(err error) *MoqSyncFileRange_genType_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Err error }
		Sequence   uint32
		DoFn       MoqSyncFileRange_genType_doFn
		DoReturnFn MoqSyncFileRange_genType_doReturnFn
	}{
		Values: &struct{ Err error }{
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSyncFileRange_genType_fnRecorder) AndDo(fn MoqSyncFileRange_genType_doFn) *MoqSyncFileRange_genType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSyncFileRange_genType_fnRecorder) DoReturnResults(fn MoqSyncFileRange_genType_doReturnFn) *MoqSyncFileRange_genType_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Err error }
		Sequence   uint32
		DoFn       MoqSyncFileRange_genType_doFn
		DoReturnFn MoqSyncFileRange_genType_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSyncFileRange_genType_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSyncFileRange_genType_resultsByParams
	for n, res := range r.Moq.ResultsByParams {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSyncFileRange_genType_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSyncFileRange_genType_paramsKey]*MoqSyncFileRange_genType_results{},
		}
		r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
			copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
			r.Moq.ResultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSyncFileRange_genType_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSyncFileRange_genType_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSyncFileRange_genType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ Err error }
				Sequence   uint32
				DoFn       MoqSyncFileRange_genType_doFn
				DoReturnFn MoqSyncFileRange_genType_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSyncFileRange_genType) PrettyParams(params MoqSyncFileRange_genType_params) string {
	return fmt.Sprintf("SyncFileRange_genType(%#v, %#v, %#v, %#v)", params.Fd, params.Off, params.N, params.Flags)
}

func (m *MoqSyncFileRange_genType) ParamsKey(params MoqSyncFileRange_genType_params, anyParams uint64) MoqSyncFileRange_genType_paramsKey {
	m.Scene.T.Helper()
	var fdUsed int
	var fdUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Fd == moq.ParamIndexByValue {
			fdUsed = params.Fd
		} else {
			fdUsedHash = hash.DeepHash(params.Fd)
		}
	}
	var offUsed int64
	var offUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Off == moq.ParamIndexByValue {
			offUsed = params.Off
		} else {
			offUsedHash = hash.DeepHash(params.Off)
		}
	}
	var nUsed int64
	var nUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	var flagsUsed int
	var flagsUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.Runtime.ParameterIndexing.Flags == moq.ParamIndexByValue {
			flagsUsed = params.Flags
		} else {
			flagsUsedHash = hash.DeepHash(params.Flags)
		}
	}
	return MoqSyncFileRange_genType_paramsKey{
		Params: struct {
			Fd    int
			Off   int64
			N     int64
			Flags int
		}{
			Fd:    fdUsed,
			Off:   offUsed,
			N:     nUsed,
			Flags: flagsUsed,
		},
		Hashes: struct {
			Fd    hash.Hash
			Off   hash.Hash
			N     hash.Hash
			Flags hash.Hash
		}{
			Fd:    fdUsedHash,
			Off:   offUsedHash,
			N:     nUsedHash,
			Flags: flagsUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqSyncFileRange_genType) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqSyncFileRange_genType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams(results.Params))
			}
		}
	}
}
