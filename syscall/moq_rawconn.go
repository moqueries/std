// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package syscall

import (
	"fmt"
	"math/bits"
	"sync/atomic"
	"syscall"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that syscall.RawConn is mocked
// completely
var _ syscall.RawConn = (*MoqRawConn_mock)(nil)

// MoqRawConn holds the state of a moq of the RawConn type
type MoqRawConn struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqRawConn_mock

	ResultsByParams_Control []MoqRawConn_Control_resultsByParams
	ResultsByParams_Read    []MoqRawConn_Read_resultsByParams
	ResultsByParams_Write   []MoqRawConn_Write_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Control struct {
				F moq.ParamIndexing
			}
			Read struct {
				F moq.ParamIndexing
			}
			Write struct {
				F moq.ParamIndexing
			}
		}
	}
	// MoqRawConn_mock isolates the mock interface of the RawConn type
}

type MoqRawConn_mock struct {
	Moq *MoqRawConn
}

// MoqRawConn_recorder isolates the recorder interface of the RawConn type
type MoqRawConn_recorder struct {
	Moq *MoqRawConn
}

// MoqRawConn_Control_params holds the params of the RawConn type
type MoqRawConn_Control_params struct{ F func(fd uintptr) }

// MoqRawConn_Control_paramsKey holds the map key params of the RawConn type
type MoqRawConn_Control_paramsKey struct {
	Params struct{}
	Hashes struct{ F hash.Hash }
}

// MoqRawConn_Control_resultsByParams contains the results for a given set of
// parameters for the RawConn type
type MoqRawConn_Control_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRawConn_Control_paramsKey]*MoqRawConn_Control_results
}

// MoqRawConn_Control_doFn defines the type of function needed when calling
// AndDo for the RawConn type
type MoqRawConn_Control_doFn func(f func(fd uintptr))

// MoqRawConn_Control_doReturnFn defines the type of function needed when
// calling DoReturnResults for the RawConn type
type MoqRawConn_Control_doReturnFn func(f func(fd uintptr)) error

// MoqRawConn_Control_results holds the results of the RawConn type
type MoqRawConn_Control_results struct {
	Params  MoqRawConn_Control_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRawConn_Control_doFn
		DoReturnFn MoqRawConn_Control_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRawConn_Control_fnRecorder routes recorded function calls to the
// MoqRawConn moq
type MoqRawConn_Control_fnRecorder struct {
	Params    MoqRawConn_Control_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRawConn_Control_results
	Moq       *MoqRawConn
}

// MoqRawConn_Control_anyParams isolates the any params functions of the
// RawConn type
type MoqRawConn_Control_anyParams struct {
	Recorder *MoqRawConn_Control_fnRecorder
}

// MoqRawConn_Read_params holds the params of the RawConn type
type MoqRawConn_Read_params struct{ F func(fd uintptr) (done bool) }

// MoqRawConn_Read_paramsKey holds the map key params of the RawConn type
type MoqRawConn_Read_paramsKey struct {
	Params struct{}
	Hashes struct{ F hash.Hash }
}

// MoqRawConn_Read_resultsByParams contains the results for a given set of
// parameters for the RawConn type
type MoqRawConn_Read_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRawConn_Read_paramsKey]*MoqRawConn_Read_results
}

// MoqRawConn_Read_doFn defines the type of function needed when calling AndDo
// for the RawConn type
type MoqRawConn_Read_doFn func(f func(fd uintptr) (done bool))

// MoqRawConn_Read_doReturnFn defines the type of function needed when calling
// DoReturnResults for the RawConn type
type MoqRawConn_Read_doReturnFn func(f func(fd uintptr) (done bool)) error

// MoqRawConn_Read_results holds the results of the RawConn type
type MoqRawConn_Read_results struct {
	Params  MoqRawConn_Read_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRawConn_Read_doFn
		DoReturnFn MoqRawConn_Read_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRawConn_Read_fnRecorder routes recorded function calls to the MoqRawConn
// moq
type MoqRawConn_Read_fnRecorder struct {
	Params    MoqRawConn_Read_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRawConn_Read_results
	Moq       *MoqRawConn
}

// MoqRawConn_Read_anyParams isolates the any params functions of the RawConn
// type
type MoqRawConn_Read_anyParams struct {
	Recorder *MoqRawConn_Read_fnRecorder
}

// MoqRawConn_Write_params holds the params of the RawConn type
type MoqRawConn_Write_params struct{ F func(fd uintptr) (done bool) }

// MoqRawConn_Write_paramsKey holds the map key params of the RawConn type
type MoqRawConn_Write_paramsKey struct {
	Params struct{}
	Hashes struct{ F hash.Hash }
}

// MoqRawConn_Write_resultsByParams contains the results for a given set of
// parameters for the RawConn type
type MoqRawConn_Write_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRawConn_Write_paramsKey]*MoqRawConn_Write_results
}

// MoqRawConn_Write_doFn defines the type of function needed when calling AndDo
// for the RawConn type
type MoqRawConn_Write_doFn func(f func(fd uintptr) (done bool))

// MoqRawConn_Write_doReturnFn defines the type of function needed when calling
// DoReturnResults for the RawConn type
type MoqRawConn_Write_doReturnFn func(f func(fd uintptr) (done bool)) error

// MoqRawConn_Write_results holds the results of the RawConn type
type MoqRawConn_Write_results struct {
	Params  MoqRawConn_Write_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRawConn_Write_doFn
		DoReturnFn MoqRawConn_Write_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRawConn_Write_fnRecorder routes recorded function calls to the MoqRawConn
// moq
type MoqRawConn_Write_fnRecorder struct {
	Params    MoqRawConn_Write_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRawConn_Write_results
	Moq       *MoqRawConn
}

// MoqRawConn_Write_anyParams isolates the any params functions of the RawConn
// type
type MoqRawConn_Write_anyParams struct {
	Recorder *MoqRawConn_Write_fnRecorder
}

// NewMoqRawConn creates a new moq of the RawConn type
func NewMoqRawConn(scene *moq.Scene, config *moq.Config) *MoqRawConn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqRawConn{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqRawConn_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Control struct {
					F moq.ParamIndexing
				}
				Read struct {
					F moq.ParamIndexing
				}
				Write struct {
					F moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Control struct {
				F moq.ParamIndexing
			}
			Read struct {
				F moq.ParamIndexing
			}
			Write struct {
				F moq.ParamIndexing
			}
		}{
			Control: struct {
				F moq.ParamIndexing
			}{
				F: moq.ParamIndexByHash,
			},
			Read: struct {
				F moq.ParamIndexing
			}{
				F: moq.ParamIndexByHash,
			},
			Write: struct {
				F moq.ParamIndexing
			}{
				F: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the RawConn type
func (m *MoqRawConn) Mock() *MoqRawConn_mock { return m.Moq }

func (m *MoqRawConn_mock) Control(f func(fd uintptr)) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqRawConn_Control_params{
		F: f,
	}
	var results *MoqRawConn_Control_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Control {
		paramsKey := m.Moq.ParamsKey_Control(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Control(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Control(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Control(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(f)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(f)
	}
	return
}

func (m *MoqRawConn_mock) Read(f func(fd uintptr) (done bool)) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqRawConn_Read_params{
		F: f,
	}
	var results *MoqRawConn_Read_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Read {
		paramsKey := m.Moq.ParamsKey_Read(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Read(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Read(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Read(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(f)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(f)
	}
	return
}

func (m *MoqRawConn_mock) Write(f func(fd uintptr) (done bool)) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqRawConn_Write_params{
		F: f,
	}
	var results *MoqRawConn_Write_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Write {
		paramsKey := m.Moq.ParamsKey_Write(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Write(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Write(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Write(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(f)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(f)
	}
	return
}

// OnCall returns the recorder implementation of the RawConn type
func (m *MoqRawConn) OnCall() *MoqRawConn_recorder {
	return &MoqRawConn_recorder{
		Moq: m,
	}
}

func (m *MoqRawConn_recorder) Control(f func(fd uintptr)) *MoqRawConn_Control_fnRecorder {
	return &MoqRawConn_Control_fnRecorder{
		Params: MoqRawConn_Control_params{
			F: f,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRawConn_Control_fnRecorder) Any() *MoqRawConn_Control_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Control(r.Params))
		return nil
	}
	return &MoqRawConn_Control_anyParams{Recorder: r}
}

func (a *MoqRawConn_Control_anyParams) F() *MoqRawConn_Control_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRawConn_Control_fnRecorder) Seq() *MoqRawConn_Control_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Control(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRawConn_Control_fnRecorder) NoSeq() *MoqRawConn_Control_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Control(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRawConn_Control_fnRecorder) ReturnResults(result1 error) *MoqRawConn_Control_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRawConn_Control_doFn
		DoReturnFn MoqRawConn_Control_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRawConn_Control_fnRecorder) AndDo(fn MoqRawConn_Control_doFn) *MoqRawConn_Control_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRawConn_Control_fnRecorder) DoReturnResults(fn MoqRawConn_Control_doReturnFn) *MoqRawConn_Control_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRawConn_Control_doFn
		DoReturnFn MoqRawConn_Control_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRawConn_Control_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRawConn_Control_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Control {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRawConn_Control_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRawConn_Control_paramsKey]*MoqRawConn_Control_results{},
		}
		r.Moq.ResultsByParams_Control = append(r.Moq.ResultsByParams_Control, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Control) {
			copy(r.Moq.ResultsByParams_Control[insertAt+1:], r.Moq.ResultsByParams_Control[insertAt:0])
			r.Moq.ResultsByParams_Control[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Control(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRawConn_Control_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRawConn_Control_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRawConn_Control_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqRawConn_Control_doFn
				DoReturnFn MoqRawConn_Control_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRawConn) PrettyParams_Control(params MoqRawConn_Control_params) string {
	return fmt.Sprintf("Control(%#v)", params.F)
}

func (m *MoqRawConn) ParamsKey_Control(params MoqRawConn_Control_params, anyParams uint64) MoqRawConn_Control_paramsKey {
	m.Scene.T.Helper()
	var fUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Control.F == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The f parameter of the Control function can't be indexed by value")
		}
		fUsedHash = hash.DeepHash(params.F)
	}
	return MoqRawConn_Control_paramsKey{
		Params: struct{}{},
		Hashes: struct{ F hash.Hash }{
			F: fUsedHash,
		},
	}
}

func (m *MoqRawConn_recorder) Read(f func(fd uintptr) (done bool)) *MoqRawConn_Read_fnRecorder {
	return &MoqRawConn_Read_fnRecorder{
		Params: MoqRawConn_Read_params{
			F: f,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRawConn_Read_fnRecorder) Any() *MoqRawConn_Read_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	return &MoqRawConn_Read_anyParams{Recorder: r}
}

func (a *MoqRawConn_Read_anyParams) F() *MoqRawConn_Read_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRawConn_Read_fnRecorder) Seq() *MoqRawConn_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRawConn_Read_fnRecorder) NoSeq() *MoqRawConn_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRawConn_Read_fnRecorder) ReturnResults(result1 error) *MoqRawConn_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRawConn_Read_doFn
		DoReturnFn MoqRawConn_Read_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRawConn_Read_fnRecorder) AndDo(fn MoqRawConn_Read_doFn) *MoqRawConn_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRawConn_Read_fnRecorder) DoReturnResults(fn MoqRawConn_Read_doReturnFn) *MoqRawConn_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRawConn_Read_doFn
		DoReturnFn MoqRawConn_Read_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRawConn_Read_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRawConn_Read_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Read {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRawConn_Read_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRawConn_Read_paramsKey]*MoqRawConn_Read_results{},
		}
		r.Moq.ResultsByParams_Read = append(r.Moq.ResultsByParams_Read, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Read) {
			copy(r.Moq.ResultsByParams_Read[insertAt+1:], r.Moq.ResultsByParams_Read[insertAt:0])
			r.Moq.ResultsByParams_Read[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Read(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRawConn_Read_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRawConn_Read_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRawConn_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqRawConn_Read_doFn
				DoReturnFn MoqRawConn_Read_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRawConn) PrettyParams_Read(params MoqRawConn_Read_params) string {
	return fmt.Sprintf("Read(%#v)", params.F)
}

func (m *MoqRawConn) ParamsKey_Read(params MoqRawConn_Read_params, anyParams uint64) MoqRawConn_Read_paramsKey {
	m.Scene.T.Helper()
	var fUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Read.F == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The f parameter of the Read function can't be indexed by value")
		}
		fUsedHash = hash.DeepHash(params.F)
	}
	return MoqRawConn_Read_paramsKey{
		Params: struct{}{},
		Hashes: struct{ F hash.Hash }{
			F: fUsedHash,
		},
	}
}

func (m *MoqRawConn_recorder) Write(f func(fd uintptr) (done bool)) *MoqRawConn_Write_fnRecorder {
	return &MoqRawConn_Write_fnRecorder{
		Params: MoqRawConn_Write_params{
			F: f,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRawConn_Write_fnRecorder) Any() *MoqRawConn_Write_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	return &MoqRawConn_Write_anyParams{Recorder: r}
}

func (a *MoqRawConn_Write_anyParams) F() *MoqRawConn_Write_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRawConn_Write_fnRecorder) Seq() *MoqRawConn_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRawConn_Write_fnRecorder) NoSeq() *MoqRawConn_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRawConn_Write_fnRecorder) ReturnResults(result1 error) *MoqRawConn_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRawConn_Write_doFn
		DoReturnFn MoqRawConn_Write_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRawConn_Write_fnRecorder) AndDo(fn MoqRawConn_Write_doFn) *MoqRawConn_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRawConn_Write_fnRecorder) DoReturnResults(fn MoqRawConn_Write_doReturnFn) *MoqRawConn_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRawConn_Write_doFn
		DoReturnFn MoqRawConn_Write_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRawConn_Write_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRawConn_Write_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Write {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRawConn_Write_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRawConn_Write_paramsKey]*MoqRawConn_Write_results{},
		}
		r.Moq.ResultsByParams_Write = append(r.Moq.ResultsByParams_Write, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Write) {
			copy(r.Moq.ResultsByParams_Write[insertAt+1:], r.Moq.ResultsByParams_Write[insertAt:0])
			r.Moq.ResultsByParams_Write[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Write(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRawConn_Write_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRawConn_Write_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRawConn_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqRawConn_Write_doFn
				DoReturnFn MoqRawConn_Write_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRawConn) PrettyParams_Write(params MoqRawConn_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.F)
}

func (m *MoqRawConn) ParamsKey_Write(params MoqRawConn_Write_params, anyParams uint64) MoqRawConn_Write_paramsKey {
	m.Scene.T.Helper()
	var fUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Write.F == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The f parameter of the Write function can't be indexed by value")
		}
		fUsedHash = hash.DeepHash(params.F)
	}
	return MoqRawConn_Write_paramsKey{
		Params: struct{}{},
		Hashes: struct{ F hash.Hash }{
			F: fUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqRawConn) Reset() {
	m.ResultsByParams_Control = nil
	m.ResultsByParams_Read = nil
	m.ResultsByParams_Write = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqRawConn) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Control {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Control(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Read {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Read(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Write {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Write(results.Params))
			}
		}
	}
}
