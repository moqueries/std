// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package syscall

import (
	"fmt"
	"math/bits"
	"sync/atomic"
	"syscall"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that syscall.WaitStatus_genType is
// mocked completely
var _ WaitStatus_genType = (*MoqWaitStatus_genType_mock)(nil)

// WaitStatus_genType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type WaitStatus_genType interface {
	Exited() bool
	Signaled() bool
	Stopped() bool
	Continued() bool
	CoreDump() bool
	ExitStatus() int
	Signal() syscall.Signal
	StopSignal() syscall.Signal
	TrapCause() int
}

// MoqWaitStatus_genType holds the state of a moq of the WaitStatus_genType
// type
type MoqWaitStatus_genType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqWaitStatus_genType_mock

	ResultsByParams_Exited     []MoqWaitStatus_genType_Exited_resultsByParams
	ResultsByParams_Signaled   []MoqWaitStatus_genType_Signaled_resultsByParams
	ResultsByParams_Stopped    []MoqWaitStatus_genType_Stopped_resultsByParams
	ResultsByParams_Continued  []MoqWaitStatus_genType_Continued_resultsByParams
	ResultsByParams_CoreDump   []MoqWaitStatus_genType_CoreDump_resultsByParams
	ResultsByParams_ExitStatus []MoqWaitStatus_genType_ExitStatus_resultsByParams
	ResultsByParams_Signal     []MoqWaitStatus_genType_Signal_resultsByParams
	ResultsByParams_StopSignal []MoqWaitStatus_genType_StopSignal_resultsByParams
	ResultsByParams_TrapCause  []MoqWaitStatus_genType_TrapCause_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Exited     struct{}
			Signaled   struct{}
			Stopped    struct{}
			Continued  struct{}
			CoreDump   struct{}
			ExitStatus struct{}
			Signal     struct{}
			StopSignal struct{}
			TrapCause  struct{}
		}
	}
}

// MoqWaitStatus_genType_mock isolates the mock interface of the
// WaitStatus_genType type
type MoqWaitStatus_genType_mock struct {
	Moq *MoqWaitStatus_genType
}

// MoqWaitStatus_genType_recorder isolates the recorder interface of the
// WaitStatus_genType type
type MoqWaitStatus_genType_recorder struct {
	Moq *MoqWaitStatus_genType
}

// MoqWaitStatus_genType_Exited_params holds the params of the
// WaitStatus_genType type
type MoqWaitStatus_genType_Exited_params struct{}

// MoqWaitStatus_genType_Exited_paramsKey holds the map key params of the
// WaitStatus_genType type
type MoqWaitStatus_genType_Exited_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWaitStatus_genType_Exited_resultsByParams contains the results for a
// given set of parameters for the WaitStatus_genType type
type MoqWaitStatus_genType_Exited_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWaitStatus_genType_Exited_paramsKey]*MoqWaitStatus_genType_Exited_results
}

// MoqWaitStatus_genType_Exited_doFn defines the type of function needed when
// calling AndDo for the WaitStatus_genType type
type MoqWaitStatus_genType_Exited_doFn func()

// MoqWaitStatus_genType_Exited_doReturnFn defines the type of function needed
// when calling DoReturnResults for the WaitStatus_genType type
type MoqWaitStatus_genType_Exited_doReturnFn func() bool

// MoqWaitStatus_genType_Exited_results holds the results of the
// WaitStatus_genType type
type MoqWaitStatus_genType_Exited_results struct {
	Params  MoqWaitStatus_genType_Exited_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_Exited_doFn
		DoReturnFn MoqWaitStatus_genType_Exited_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWaitStatus_genType_Exited_fnRecorder routes recorded function calls to
// the MoqWaitStatus_genType moq
type MoqWaitStatus_genType_Exited_fnRecorder struct {
	Params    MoqWaitStatus_genType_Exited_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWaitStatus_genType_Exited_results
	Moq       *MoqWaitStatus_genType
}

// MoqWaitStatus_genType_Exited_anyParams isolates the any params functions of
// the WaitStatus_genType type
type MoqWaitStatus_genType_Exited_anyParams struct {
	Recorder *MoqWaitStatus_genType_Exited_fnRecorder
}

// MoqWaitStatus_genType_Signaled_params holds the params of the
// WaitStatus_genType type
type MoqWaitStatus_genType_Signaled_params struct{}

// MoqWaitStatus_genType_Signaled_paramsKey holds the map key params of the
// WaitStatus_genType type
type MoqWaitStatus_genType_Signaled_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWaitStatus_genType_Signaled_resultsByParams contains the results for a
// given set of parameters for the WaitStatus_genType type
type MoqWaitStatus_genType_Signaled_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWaitStatus_genType_Signaled_paramsKey]*MoqWaitStatus_genType_Signaled_results
}

// MoqWaitStatus_genType_Signaled_doFn defines the type of function needed when
// calling AndDo for the WaitStatus_genType type
type MoqWaitStatus_genType_Signaled_doFn func()

// MoqWaitStatus_genType_Signaled_doReturnFn defines the type of function
// needed when calling DoReturnResults for the WaitStatus_genType type
type MoqWaitStatus_genType_Signaled_doReturnFn func() bool

// MoqWaitStatus_genType_Signaled_results holds the results of the
// WaitStatus_genType type
type MoqWaitStatus_genType_Signaled_results struct {
	Params  MoqWaitStatus_genType_Signaled_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_Signaled_doFn
		DoReturnFn MoqWaitStatus_genType_Signaled_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWaitStatus_genType_Signaled_fnRecorder routes recorded function calls to
// the MoqWaitStatus_genType moq
type MoqWaitStatus_genType_Signaled_fnRecorder struct {
	Params    MoqWaitStatus_genType_Signaled_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWaitStatus_genType_Signaled_results
	Moq       *MoqWaitStatus_genType
}

// MoqWaitStatus_genType_Signaled_anyParams isolates the any params functions
// of the WaitStatus_genType type
type MoqWaitStatus_genType_Signaled_anyParams struct {
	Recorder *MoqWaitStatus_genType_Signaled_fnRecorder
}

// MoqWaitStatus_genType_Stopped_params holds the params of the
// WaitStatus_genType type
type MoqWaitStatus_genType_Stopped_params struct{}

// MoqWaitStatus_genType_Stopped_paramsKey holds the map key params of the
// WaitStatus_genType type
type MoqWaitStatus_genType_Stopped_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWaitStatus_genType_Stopped_resultsByParams contains the results for a
// given set of parameters for the WaitStatus_genType type
type MoqWaitStatus_genType_Stopped_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWaitStatus_genType_Stopped_paramsKey]*MoqWaitStatus_genType_Stopped_results
}

// MoqWaitStatus_genType_Stopped_doFn defines the type of function needed when
// calling AndDo for the WaitStatus_genType type
type MoqWaitStatus_genType_Stopped_doFn func()

// MoqWaitStatus_genType_Stopped_doReturnFn defines the type of function needed
// when calling DoReturnResults for the WaitStatus_genType type
type MoqWaitStatus_genType_Stopped_doReturnFn func() bool

// MoqWaitStatus_genType_Stopped_results holds the results of the
// WaitStatus_genType type
type MoqWaitStatus_genType_Stopped_results struct {
	Params  MoqWaitStatus_genType_Stopped_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_Stopped_doFn
		DoReturnFn MoqWaitStatus_genType_Stopped_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWaitStatus_genType_Stopped_fnRecorder routes recorded function calls to
// the MoqWaitStatus_genType moq
type MoqWaitStatus_genType_Stopped_fnRecorder struct {
	Params    MoqWaitStatus_genType_Stopped_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWaitStatus_genType_Stopped_results
	Moq       *MoqWaitStatus_genType
}

// MoqWaitStatus_genType_Stopped_anyParams isolates the any params functions of
// the WaitStatus_genType type
type MoqWaitStatus_genType_Stopped_anyParams struct {
	Recorder *MoqWaitStatus_genType_Stopped_fnRecorder
}

// MoqWaitStatus_genType_Continued_params holds the params of the
// WaitStatus_genType type
type MoqWaitStatus_genType_Continued_params struct{}

// MoqWaitStatus_genType_Continued_paramsKey holds the map key params of the
// WaitStatus_genType type
type MoqWaitStatus_genType_Continued_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWaitStatus_genType_Continued_resultsByParams contains the results for a
// given set of parameters for the WaitStatus_genType type
type MoqWaitStatus_genType_Continued_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWaitStatus_genType_Continued_paramsKey]*MoqWaitStatus_genType_Continued_results
}

// MoqWaitStatus_genType_Continued_doFn defines the type of function needed
// when calling AndDo for the WaitStatus_genType type
type MoqWaitStatus_genType_Continued_doFn func()

// MoqWaitStatus_genType_Continued_doReturnFn defines the type of function
// needed when calling DoReturnResults for the WaitStatus_genType type
type MoqWaitStatus_genType_Continued_doReturnFn func() bool

// MoqWaitStatus_genType_Continued_results holds the results of the
// WaitStatus_genType type
type MoqWaitStatus_genType_Continued_results struct {
	Params  MoqWaitStatus_genType_Continued_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_Continued_doFn
		DoReturnFn MoqWaitStatus_genType_Continued_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWaitStatus_genType_Continued_fnRecorder routes recorded function calls to
// the MoqWaitStatus_genType moq
type MoqWaitStatus_genType_Continued_fnRecorder struct {
	Params    MoqWaitStatus_genType_Continued_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWaitStatus_genType_Continued_results
	Moq       *MoqWaitStatus_genType
}

// MoqWaitStatus_genType_Continued_anyParams isolates the any params functions
// of the WaitStatus_genType type
type MoqWaitStatus_genType_Continued_anyParams struct {
	Recorder *MoqWaitStatus_genType_Continued_fnRecorder
}

// MoqWaitStatus_genType_CoreDump_params holds the params of the
// WaitStatus_genType type
type MoqWaitStatus_genType_CoreDump_params struct{}

// MoqWaitStatus_genType_CoreDump_paramsKey holds the map key params of the
// WaitStatus_genType type
type MoqWaitStatus_genType_CoreDump_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWaitStatus_genType_CoreDump_resultsByParams contains the results for a
// given set of parameters for the WaitStatus_genType type
type MoqWaitStatus_genType_CoreDump_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWaitStatus_genType_CoreDump_paramsKey]*MoqWaitStatus_genType_CoreDump_results
}

// MoqWaitStatus_genType_CoreDump_doFn defines the type of function needed when
// calling AndDo for the WaitStatus_genType type
type MoqWaitStatus_genType_CoreDump_doFn func()

// MoqWaitStatus_genType_CoreDump_doReturnFn defines the type of function
// needed when calling DoReturnResults for the WaitStatus_genType type
type MoqWaitStatus_genType_CoreDump_doReturnFn func() bool

// MoqWaitStatus_genType_CoreDump_results holds the results of the
// WaitStatus_genType type
type MoqWaitStatus_genType_CoreDump_results struct {
	Params  MoqWaitStatus_genType_CoreDump_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_CoreDump_doFn
		DoReturnFn MoqWaitStatus_genType_CoreDump_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWaitStatus_genType_CoreDump_fnRecorder routes recorded function calls to
// the MoqWaitStatus_genType moq
type MoqWaitStatus_genType_CoreDump_fnRecorder struct {
	Params    MoqWaitStatus_genType_CoreDump_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWaitStatus_genType_CoreDump_results
	Moq       *MoqWaitStatus_genType
}

// MoqWaitStatus_genType_CoreDump_anyParams isolates the any params functions
// of the WaitStatus_genType type
type MoqWaitStatus_genType_CoreDump_anyParams struct {
	Recorder *MoqWaitStatus_genType_CoreDump_fnRecorder
}

// MoqWaitStatus_genType_ExitStatus_params holds the params of the
// WaitStatus_genType type
type MoqWaitStatus_genType_ExitStatus_params struct{}

// MoqWaitStatus_genType_ExitStatus_paramsKey holds the map key params of the
// WaitStatus_genType type
type MoqWaitStatus_genType_ExitStatus_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWaitStatus_genType_ExitStatus_resultsByParams contains the results for a
// given set of parameters for the WaitStatus_genType type
type MoqWaitStatus_genType_ExitStatus_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWaitStatus_genType_ExitStatus_paramsKey]*MoqWaitStatus_genType_ExitStatus_results
}

// MoqWaitStatus_genType_ExitStatus_doFn defines the type of function needed
// when calling AndDo for the WaitStatus_genType type
type MoqWaitStatus_genType_ExitStatus_doFn func()

// MoqWaitStatus_genType_ExitStatus_doReturnFn defines the type of function
// needed when calling DoReturnResults for the WaitStatus_genType type
type MoqWaitStatus_genType_ExitStatus_doReturnFn func() int

// MoqWaitStatus_genType_ExitStatus_results holds the results of the
// WaitStatus_genType type
type MoqWaitStatus_genType_ExitStatus_results struct {
	Params  MoqWaitStatus_genType_ExitStatus_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_ExitStatus_doFn
		DoReturnFn MoqWaitStatus_genType_ExitStatus_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWaitStatus_genType_ExitStatus_fnRecorder routes recorded function calls
// to the MoqWaitStatus_genType moq
type MoqWaitStatus_genType_ExitStatus_fnRecorder struct {
	Params    MoqWaitStatus_genType_ExitStatus_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWaitStatus_genType_ExitStatus_results
	Moq       *MoqWaitStatus_genType
}

// MoqWaitStatus_genType_ExitStatus_anyParams isolates the any params functions
// of the WaitStatus_genType type
type MoqWaitStatus_genType_ExitStatus_anyParams struct {
	Recorder *MoqWaitStatus_genType_ExitStatus_fnRecorder
}

// MoqWaitStatus_genType_Signal_params holds the params of the
// WaitStatus_genType type
type MoqWaitStatus_genType_Signal_params struct{}

// MoqWaitStatus_genType_Signal_paramsKey holds the map key params of the
// WaitStatus_genType type
type MoqWaitStatus_genType_Signal_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWaitStatus_genType_Signal_resultsByParams contains the results for a
// given set of parameters for the WaitStatus_genType type
type MoqWaitStatus_genType_Signal_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWaitStatus_genType_Signal_paramsKey]*MoqWaitStatus_genType_Signal_results
}

// MoqWaitStatus_genType_Signal_doFn defines the type of function needed when
// calling AndDo for the WaitStatus_genType type
type MoqWaitStatus_genType_Signal_doFn func()

// MoqWaitStatus_genType_Signal_doReturnFn defines the type of function needed
// when calling DoReturnResults for the WaitStatus_genType type
type MoqWaitStatus_genType_Signal_doReturnFn func() syscall.Signal

// MoqWaitStatus_genType_Signal_results holds the results of the
// WaitStatus_genType type
type MoqWaitStatus_genType_Signal_results struct {
	Params  MoqWaitStatus_genType_Signal_params
	Results []struct {
		Values *struct {
			Result1 syscall.Signal
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_Signal_doFn
		DoReturnFn MoqWaitStatus_genType_Signal_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWaitStatus_genType_Signal_fnRecorder routes recorded function calls to
// the MoqWaitStatus_genType moq
type MoqWaitStatus_genType_Signal_fnRecorder struct {
	Params    MoqWaitStatus_genType_Signal_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWaitStatus_genType_Signal_results
	Moq       *MoqWaitStatus_genType
}

// MoqWaitStatus_genType_Signal_anyParams isolates the any params functions of
// the WaitStatus_genType type
type MoqWaitStatus_genType_Signal_anyParams struct {
	Recorder *MoqWaitStatus_genType_Signal_fnRecorder
}

// MoqWaitStatus_genType_StopSignal_params holds the params of the
// WaitStatus_genType type
type MoqWaitStatus_genType_StopSignal_params struct{}

// MoqWaitStatus_genType_StopSignal_paramsKey holds the map key params of the
// WaitStatus_genType type
type MoqWaitStatus_genType_StopSignal_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWaitStatus_genType_StopSignal_resultsByParams contains the results for a
// given set of parameters for the WaitStatus_genType type
type MoqWaitStatus_genType_StopSignal_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWaitStatus_genType_StopSignal_paramsKey]*MoqWaitStatus_genType_StopSignal_results
}

// MoqWaitStatus_genType_StopSignal_doFn defines the type of function needed
// when calling AndDo for the WaitStatus_genType type
type MoqWaitStatus_genType_StopSignal_doFn func()

// MoqWaitStatus_genType_StopSignal_doReturnFn defines the type of function
// needed when calling DoReturnResults for the WaitStatus_genType type
type MoqWaitStatus_genType_StopSignal_doReturnFn func() syscall.Signal

// MoqWaitStatus_genType_StopSignal_results holds the results of the
// WaitStatus_genType type
type MoqWaitStatus_genType_StopSignal_results struct {
	Params  MoqWaitStatus_genType_StopSignal_params
	Results []struct {
		Values *struct {
			Result1 syscall.Signal
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_StopSignal_doFn
		DoReturnFn MoqWaitStatus_genType_StopSignal_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWaitStatus_genType_StopSignal_fnRecorder routes recorded function calls
// to the MoqWaitStatus_genType moq
type MoqWaitStatus_genType_StopSignal_fnRecorder struct {
	Params    MoqWaitStatus_genType_StopSignal_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWaitStatus_genType_StopSignal_results
	Moq       *MoqWaitStatus_genType
}

// MoqWaitStatus_genType_StopSignal_anyParams isolates the any params functions
// of the WaitStatus_genType type
type MoqWaitStatus_genType_StopSignal_anyParams struct {
	Recorder *MoqWaitStatus_genType_StopSignal_fnRecorder
}

// MoqWaitStatus_genType_TrapCause_params holds the params of the
// WaitStatus_genType type
type MoqWaitStatus_genType_TrapCause_params struct{}

// MoqWaitStatus_genType_TrapCause_paramsKey holds the map key params of the
// WaitStatus_genType type
type MoqWaitStatus_genType_TrapCause_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWaitStatus_genType_TrapCause_resultsByParams contains the results for a
// given set of parameters for the WaitStatus_genType type
type MoqWaitStatus_genType_TrapCause_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWaitStatus_genType_TrapCause_paramsKey]*MoqWaitStatus_genType_TrapCause_results
}

// MoqWaitStatus_genType_TrapCause_doFn defines the type of function needed
// when calling AndDo for the WaitStatus_genType type
type MoqWaitStatus_genType_TrapCause_doFn func()

// MoqWaitStatus_genType_TrapCause_doReturnFn defines the type of function
// needed when calling DoReturnResults for the WaitStatus_genType type
type MoqWaitStatus_genType_TrapCause_doReturnFn func() int

// MoqWaitStatus_genType_TrapCause_results holds the results of the
// WaitStatus_genType type
type MoqWaitStatus_genType_TrapCause_results struct {
	Params  MoqWaitStatus_genType_TrapCause_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_TrapCause_doFn
		DoReturnFn MoqWaitStatus_genType_TrapCause_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWaitStatus_genType_TrapCause_fnRecorder routes recorded function calls to
// the MoqWaitStatus_genType moq
type MoqWaitStatus_genType_TrapCause_fnRecorder struct {
	Params    MoqWaitStatus_genType_TrapCause_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWaitStatus_genType_TrapCause_results
	Moq       *MoqWaitStatus_genType
}

// MoqWaitStatus_genType_TrapCause_anyParams isolates the any params functions
// of the WaitStatus_genType type
type MoqWaitStatus_genType_TrapCause_anyParams struct {
	Recorder *MoqWaitStatus_genType_TrapCause_fnRecorder
}

// NewMoqWaitStatus_genType creates a new moq of the WaitStatus_genType type
func NewMoqWaitStatus_genType(scene *moq.Scene, config *moq.Config) *MoqWaitStatus_genType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqWaitStatus_genType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqWaitStatus_genType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Exited     struct{}
				Signaled   struct{}
				Stopped    struct{}
				Continued  struct{}
				CoreDump   struct{}
				ExitStatus struct{}
				Signal     struct{}
				StopSignal struct{}
				TrapCause  struct{}
			}
		}{ParameterIndexing: struct {
			Exited     struct{}
			Signaled   struct{}
			Stopped    struct{}
			Continued  struct{}
			CoreDump   struct{}
			ExitStatus struct{}
			Signal     struct{}
			StopSignal struct{}
			TrapCause  struct{}
		}{
			Exited:     struct{}{},
			Signaled:   struct{}{},
			Stopped:    struct{}{},
			Continued:  struct{}{},
			CoreDump:   struct{}{},
			ExitStatus: struct{}{},
			Signal:     struct{}{},
			StopSignal: struct{}{},
			TrapCause:  struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the WaitStatus_genType type
func (m *MoqWaitStatus_genType) Mock() *MoqWaitStatus_genType_mock { return m.Moq }

func (m *MoqWaitStatus_genType_mock) Exited() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqWaitStatus_genType_Exited_params{}
	var results *MoqWaitStatus_genType_Exited_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Exited {
		paramsKey := m.Moq.ParamsKey_Exited(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Exited(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Exited(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Exited(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWaitStatus_genType_mock) Signaled() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqWaitStatus_genType_Signaled_params{}
	var results *MoqWaitStatus_genType_Signaled_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Signaled {
		paramsKey := m.Moq.ParamsKey_Signaled(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Signaled(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Signaled(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Signaled(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWaitStatus_genType_mock) Stopped() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqWaitStatus_genType_Stopped_params{}
	var results *MoqWaitStatus_genType_Stopped_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Stopped {
		paramsKey := m.Moq.ParamsKey_Stopped(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Stopped(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Stopped(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Stopped(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWaitStatus_genType_mock) Continued() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqWaitStatus_genType_Continued_params{}
	var results *MoqWaitStatus_genType_Continued_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Continued {
		paramsKey := m.Moq.ParamsKey_Continued(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Continued(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Continued(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Continued(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWaitStatus_genType_mock) CoreDump() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqWaitStatus_genType_CoreDump_params{}
	var results *MoqWaitStatus_genType_CoreDump_results
	for _, resultsByParams := range m.Moq.ResultsByParams_CoreDump {
		paramsKey := m.Moq.ParamsKey_CoreDump(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_CoreDump(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_CoreDump(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_CoreDump(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWaitStatus_genType_mock) ExitStatus() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqWaitStatus_genType_ExitStatus_params{}
	var results *MoqWaitStatus_genType_ExitStatus_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ExitStatus {
		paramsKey := m.Moq.ParamsKey_ExitStatus(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ExitStatus(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ExitStatus(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ExitStatus(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWaitStatus_genType_mock) Signal() (result1 syscall.Signal) {
	m.Moq.Scene.T.Helper()
	params := MoqWaitStatus_genType_Signal_params{}
	var results *MoqWaitStatus_genType_Signal_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Signal {
		paramsKey := m.Moq.ParamsKey_Signal(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Signal(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Signal(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Signal(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWaitStatus_genType_mock) StopSignal() (result1 syscall.Signal) {
	m.Moq.Scene.T.Helper()
	params := MoqWaitStatus_genType_StopSignal_params{}
	var results *MoqWaitStatus_genType_StopSignal_results
	for _, resultsByParams := range m.Moq.ResultsByParams_StopSignal {
		paramsKey := m.Moq.ParamsKey_StopSignal(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_StopSignal(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_StopSignal(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_StopSignal(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWaitStatus_genType_mock) TrapCause() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqWaitStatus_genType_TrapCause_params{}
	var results *MoqWaitStatus_genType_TrapCause_results
	for _, resultsByParams := range m.Moq.ResultsByParams_TrapCause {
		paramsKey := m.Moq.ParamsKey_TrapCause(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_TrapCause(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_TrapCause(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_TrapCause(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the WaitStatus_genType type
func (m *MoqWaitStatus_genType) OnCall() *MoqWaitStatus_genType_recorder {
	return &MoqWaitStatus_genType_recorder{
		Moq: m,
	}
}

func (m *MoqWaitStatus_genType_recorder) Exited() *MoqWaitStatus_genType_Exited_fnRecorder {
	return &MoqWaitStatus_genType_Exited_fnRecorder{
		Params:   MoqWaitStatus_genType_Exited_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWaitStatus_genType_Exited_fnRecorder) Any() *MoqWaitStatus_genType_Exited_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Exited(r.Params))
		return nil
	}
	return &MoqWaitStatus_genType_Exited_anyParams{Recorder: r}
}

func (r *MoqWaitStatus_genType_Exited_fnRecorder) Seq() *MoqWaitStatus_genType_Exited_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Exited(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWaitStatus_genType_Exited_fnRecorder) NoSeq() *MoqWaitStatus_genType_Exited_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Exited(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWaitStatus_genType_Exited_fnRecorder) ReturnResults(result1 bool) *MoqWaitStatus_genType_Exited_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_Exited_doFn
		DoReturnFn MoqWaitStatus_genType_Exited_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWaitStatus_genType_Exited_fnRecorder) AndDo(fn MoqWaitStatus_genType_Exited_doFn) *MoqWaitStatus_genType_Exited_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWaitStatus_genType_Exited_fnRecorder) DoReturnResults(fn MoqWaitStatus_genType_Exited_doReturnFn) *MoqWaitStatus_genType_Exited_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_Exited_doFn
		DoReturnFn MoqWaitStatus_genType_Exited_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWaitStatus_genType_Exited_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWaitStatus_genType_Exited_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Exited {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWaitStatus_genType_Exited_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWaitStatus_genType_Exited_paramsKey]*MoqWaitStatus_genType_Exited_results{},
		}
		r.Moq.ResultsByParams_Exited = append(r.Moq.ResultsByParams_Exited, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Exited) {
			copy(r.Moq.ResultsByParams_Exited[insertAt+1:], r.Moq.ResultsByParams_Exited[insertAt:0])
			r.Moq.ResultsByParams_Exited[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Exited(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWaitStatus_genType_Exited_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWaitStatus_genType_Exited_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWaitStatus_genType_Exited_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqWaitStatus_genType_Exited_doFn
				DoReturnFn MoqWaitStatus_genType_Exited_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWaitStatus_genType) PrettyParams_Exited(params MoqWaitStatus_genType_Exited_params) string {
	return fmt.Sprintf("Exited()")
}

func (m *MoqWaitStatus_genType) ParamsKey_Exited(params MoqWaitStatus_genType_Exited_params, anyParams uint64) MoqWaitStatus_genType_Exited_paramsKey {
	m.Scene.T.Helper()
	return MoqWaitStatus_genType_Exited_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWaitStatus_genType_recorder) Signaled() *MoqWaitStatus_genType_Signaled_fnRecorder {
	return &MoqWaitStatus_genType_Signaled_fnRecorder{
		Params:   MoqWaitStatus_genType_Signaled_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWaitStatus_genType_Signaled_fnRecorder) Any() *MoqWaitStatus_genType_Signaled_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Signaled(r.Params))
		return nil
	}
	return &MoqWaitStatus_genType_Signaled_anyParams{Recorder: r}
}

func (r *MoqWaitStatus_genType_Signaled_fnRecorder) Seq() *MoqWaitStatus_genType_Signaled_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Signaled(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWaitStatus_genType_Signaled_fnRecorder) NoSeq() *MoqWaitStatus_genType_Signaled_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Signaled(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWaitStatus_genType_Signaled_fnRecorder) ReturnResults(result1 bool) *MoqWaitStatus_genType_Signaled_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_Signaled_doFn
		DoReturnFn MoqWaitStatus_genType_Signaled_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWaitStatus_genType_Signaled_fnRecorder) AndDo(fn MoqWaitStatus_genType_Signaled_doFn) *MoqWaitStatus_genType_Signaled_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWaitStatus_genType_Signaled_fnRecorder) DoReturnResults(fn MoqWaitStatus_genType_Signaled_doReturnFn) *MoqWaitStatus_genType_Signaled_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_Signaled_doFn
		DoReturnFn MoqWaitStatus_genType_Signaled_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWaitStatus_genType_Signaled_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWaitStatus_genType_Signaled_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Signaled {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWaitStatus_genType_Signaled_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWaitStatus_genType_Signaled_paramsKey]*MoqWaitStatus_genType_Signaled_results{},
		}
		r.Moq.ResultsByParams_Signaled = append(r.Moq.ResultsByParams_Signaled, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Signaled) {
			copy(r.Moq.ResultsByParams_Signaled[insertAt+1:], r.Moq.ResultsByParams_Signaled[insertAt:0])
			r.Moq.ResultsByParams_Signaled[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Signaled(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWaitStatus_genType_Signaled_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWaitStatus_genType_Signaled_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWaitStatus_genType_Signaled_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqWaitStatus_genType_Signaled_doFn
				DoReturnFn MoqWaitStatus_genType_Signaled_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWaitStatus_genType) PrettyParams_Signaled(params MoqWaitStatus_genType_Signaled_params) string {
	return fmt.Sprintf("Signaled()")
}

func (m *MoqWaitStatus_genType) ParamsKey_Signaled(params MoqWaitStatus_genType_Signaled_params, anyParams uint64) MoqWaitStatus_genType_Signaled_paramsKey {
	m.Scene.T.Helper()
	return MoqWaitStatus_genType_Signaled_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWaitStatus_genType_recorder) Stopped() *MoqWaitStatus_genType_Stopped_fnRecorder {
	return &MoqWaitStatus_genType_Stopped_fnRecorder{
		Params:   MoqWaitStatus_genType_Stopped_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWaitStatus_genType_Stopped_fnRecorder) Any() *MoqWaitStatus_genType_Stopped_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Stopped(r.Params))
		return nil
	}
	return &MoqWaitStatus_genType_Stopped_anyParams{Recorder: r}
}

func (r *MoqWaitStatus_genType_Stopped_fnRecorder) Seq() *MoqWaitStatus_genType_Stopped_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Stopped(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWaitStatus_genType_Stopped_fnRecorder) NoSeq() *MoqWaitStatus_genType_Stopped_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Stopped(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWaitStatus_genType_Stopped_fnRecorder) ReturnResults(result1 bool) *MoqWaitStatus_genType_Stopped_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_Stopped_doFn
		DoReturnFn MoqWaitStatus_genType_Stopped_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWaitStatus_genType_Stopped_fnRecorder) AndDo(fn MoqWaitStatus_genType_Stopped_doFn) *MoqWaitStatus_genType_Stopped_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWaitStatus_genType_Stopped_fnRecorder) DoReturnResults(fn MoqWaitStatus_genType_Stopped_doReturnFn) *MoqWaitStatus_genType_Stopped_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_Stopped_doFn
		DoReturnFn MoqWaitStatus_genType_Stopped_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWaitStatus_genType_Stopped_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWaitStatus_genType_Stopped_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Stopped {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWaitStatus_genType_Stopped_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWaitStatus_genType_Stopped_paramsKey]*MoqWaitStatus_genType_Stopped_results{},
		}
		r.Moq.ResultsByParams_Stopped = append(r.Moq.ResultsByParams_Stopped, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Stopped) {
			copy(r.Moq.ResultsByParams_Stopped[insertAt+1:], r.Moq.ResultsByParams_Stopped[insertAt:0])
			r.Moq.ResultsByParams_Stopped[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Stopped(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWaitStatus_genType_Stopped_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWaitStatus_genType_Stopped_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWaitStatus_genType_Stopped_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqWaitStatus_genType_Stopped_doFn
				DoReturnFn MoqWaitStatus_genType_Stopped_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWaitStatus_genType) PrettyParams_Stopped(params MoqWaitStatus_genType_Stopped_params) string {
	return fmt.Sprintf("Stopped()")
}

func (m *MoqWaitStatus_genType) ParamsKey_Stopped(params MoqWaitStatus_genType_Stopped_params, anyParams uint64) MoqWaitStatus_genType_Stopped_paramsKey {
	m.Scene.T.Helper()
	return MoqWaitStatus_genType_Stopped_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWaitStatus_genType_recorder) Continued() *MoqWaitStatus_genType_Continued_fnRecorder {
	return &MoqWaitStatus_genType_Continued_fnRecorder{
		Params:   MoqWaitStatus_genType_Continued_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWaitStatus_genType_Continued_fnRecorder) Any() *MoqWaitStatus_genType_Continued_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Continued(r.Params))
		return nil
	}
	return &MoqWaitStatus_genType_Continued_anyParams{Recorder: r}
}

func (r *MoqWaitStatus_genType_Continued_fnRecorder) Seq() *MoqWaitStatus_genType_Continued_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Continued(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWaitStatus_genType_Continued_fnRecorder) NoSeq() *MoqWaitStatus_genType_Continued_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Continued(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWaitStatus_genType_Continued_fnRecorder) ReturnResults(result1 bool) *MoqWaitStatus_genType_Continued_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_Continued_doFn
		DoReturnFn MoqWaitStatus_genType_Continued_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWaitStatus_genType_Continued_fnRecorder) AndDo(fn MoqWaitStatus_genType_Continued_doFn) *MoqWaitStatus_genType_Continued_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWaitStatus_genType_Continued_fnRecorder) DoReturnResults(fn MoqWaitStatus_genType_Continued_doReturnFn) *MoqWaitStatus_genType_Continued_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_Continued_doFn
		DoReturnFn MoqWaitStatus_genType_Continued_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWaitStatus_genType_Continued_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWaitStatus_genType_Continued_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Continued {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWaitStatus_genType_Continued_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWaitStatus_genType_Continued_paramsKey]*MoqWaitStatus_genType_Continued_results{},
		}
		r.Moq.ResultsByParams_Continued = append(r.Moq.ResultsByParams_Continued, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Continued) {
			copy(r.Moq.ResultsByParams_Continued[insertAt+1:], r.Moq.ResultsByParams_Continued[insertAt:0])
			r.Moq.ResultsByParams_Continued[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Continued(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWaitStatus_genType_Continued_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWaitStatus_genType_Continued_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWaitStatus_genType_Continued_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqWaitStatus_genType_Continued_doFn
				DoReturnFn MoqWaitStatus_genType_Continued_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWaitStatus_genType) PrettyParams_Continued(params MoqWaitStatus_genType_Continued_params) string {
	return fmt.Sprintf("Continued()")
}

func (m *MoqWaitStatus_genType) ParamsKey_Continued(params MoqWaitStatus_genType_Continued_params, anyParams uint64) MoqWaitStatus_genType_Continued_paramsKey {
	m.Scene.T.Helper()
	return MoqWaitStatus_genType_Continued_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWaitStatus_genType_recorder) CoreDump() *MoqWaitStatus_genType_CoreDump_fnRecorder {
	return &MoqWaitStatus_genType_CoreDump_fnRecorder{
		Params:   MoqWaitStatus_genType_CoreDump_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWaitStatus_genType_CoreDump_fnRecorder) Any() *MoqWaitStatus_genType_CoreDump_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CoreDump(r.Params))
		return nil
	}
	return &MoqWaitStatus_genType_CoreDump_anyParams{Recorder: r}
}

func (r *MoqWaitStatus_genType_CoreDump_fnRecorder) Seq() *MoqWaitStatus_genType_CoreDump_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CoreDump(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWaitStatus_genType_CoreDump_fnRecorder) NoSeq() *MoqWaitStatus_genType_CoreDump_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CoreDump(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWaitStatus_genType_CoreDump_fnRecorder) ReturnResults(result1 bool) *MoqWaitStatus_genType_CoreDump_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_CoreDump_doFn
		DoReturnFn MoqWaitStatus_genType_CoreDump_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWaitStatus_genType_CoreDump_fnRecorder) AndDo(fn MoqWaitStatus_genType_CoreDump_doFn) *MoqWaitStatus_genType_CoreDump_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWaitStatus_genType_CoreDump_fnRecorder) DoReturnResults(fn MoqWaitStatus_genType_CoreDump_doReturnFn) *MoqWaitStatus_genType_CoreDump_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_CoreDump_doFn
		DoReturnFn MoqWaitStatus_genType_CoreDump_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWaitStatus_genType_CoreDump_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWaitStatus_genType_CoreDump_resultsByParams
	for n, res := range r.Moq.ResultsByParams_CoreDump {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWaitStatus_genType_CoreDump_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWaitStatus_genType_CoreDump_paramsKey]*MoqWaitStatus_genType_CoreDump_results{},
		}
		r.Moq.ResultsByParams_CoreDump = append(r.Moq.ResultsByParams_CoreDump, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_CoreDump) {
			copy(r.Moq.ResultsByParams_CoreDump[insertAt+1:], r.Moq.ResultsByParams_CoreDump[insertAt:0])
			r.Moq.ResultsByParams_CoreDump[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_CoreDump(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWaitStatus_genType_CoreDump_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWaitStatus_genType_CoreDump_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWaitStatus_genType_CoreDump_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqWaitStatus_genType_CoreDump_doFn
				DoReturnFn MoqWaitStatus_genType_CoreDump_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWaitStatus_genType) PrettyParams_CoreDump(params MoqWaitStatus_genType_CoreDump_params) string {
	return fmt.Sprintf("CoreDump()")
}

func (m *MoqWaitStatus_genType) ParamsKey_CoreDump(params MoqWaitStatus_genType_CoreDump_params, anyParams uint64) MoqWaitStatus_genType_CoreDump_paramsKey {
	m.Scene.T.Helper()
	return MoqWaitStatus_genType_CoreDump_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWaitStatus_genType_recorder) ExitStatus() *MoqWaitStatus_genType_ExitStatus_fnRecorder {
	return &MoqWaitStatus_genType_ExitStatus_fnRecorder{
		Params:   MoqWaitStatus_genType_ExitStatus_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWaitStatus_genType_ExitStatus_fnRecorder) Any() *MoqWaitStatus_genType_ExitStatus_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExitStatus(r.Params))
		return nil
	}
	return &MoqWaitStatus_genType_ExitStatus_anyParams{Recorder: r}
}

func (r *MoqWaitStatus_genType_ExitStatus_fnRecorder) Seq() *MoqWaitStatus_genType_ExitStatus_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExitStatus(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWaitStatus_genType_ExitStatus_fnRecorder) NoSeq() *MoqWaitStatus_genType_ExitStatus_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExitStatus(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWaitStatus_genType_ExitStatus_fnRecorder) ReturnResults(result1 int) *MoqWaitStatus_genType_ExitStatus_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_ExitStatus_doFn
		DoReturnFn MoqWaitStatus_genType_ExitStatus_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWaitStatus_genType_ExitStatus_fnRecorder) AndDo(fn MoqWaitStatus_genType_ExitStatus_doFn) *MoqWaitStatus_genType_ExitStatus_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWaitStatus_genType_ExitStatus_fnRecorder) DoReturnResults(fn MoqWaitStatus_genType_ExitStatus_doReturnFn) *MoqWaitStatus_genType_ExitStatus_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_ExitStatus_doFn
		DoReturnFn MoqWaitStatus_genType_ExitStatus_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWaitStatus_genType_ExitStatus_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWaitStatus_genType_ExitStatus_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ExitStatus {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWaitStatus_genType_ExitStatus_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWaitStatus_genType_ExitStatus_paramsKey]*MoqWaitStatus_genType_ExitStatus_results{},
		}
		r.Moq.ResultsByParams_ExitStatus = append(r.Moq.ResultsByParams_ExitStatus, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ExitStatus) {
			copy(r.Moq.ResultsByParams_ExitStatus[insertAt+1:], r.Moq.ResultsByParams_ExitStatus[insertAt:0])
			r.Moq.ResultsByParams_ExitStatus[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ExitStatus(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWaitStatus_genType_ExitStatus_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWaitStatus_genType_ExitStatus_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWaitStatus_genType_ExitStatus_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqWaitStatus_genType_ExitStatus_doFn
				DoReturnFn MoqWaitStatus_genType_ExitStatus_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWaitStatus_genType) PrettyParams_ExitStatus(params MoqWaitStatus_genType_ExitStatus_params) string {
	return fmt.Sprintf("ExitStatus()")
}

func (m *MoqWaitStatus_genType) ParamsKey_ExitStatus(params MoqWaitStatus_genType_ExitStatus_params, anyParams uint64) MoqWaitStatus_genType_ExitStatus_paramsKey {
	m.Scene.T.Helper()
	return MoqWaitStatus_genType_ExitStatus_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWaitStatus_genType_recorder) Signal() *MoqWaitStatus_genType_Signal_fnRecorder {
	return &MoqWaitStatus_genType_Signal_fnRecorder{
		Params:   MoqWaitStatus_genType_Signal_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWaitStatus_genType_Signal_fnRecorder) Any() *MoqWaitStatus_genType_Signal_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Signal(r.Params))
		return nil
	}
	return &MoqWaitStatus_genType_Signal_anyParams{Recorder: r}
}

func (r *MoqWaitStatus_genType_Signal_fnRecorder) Seq() *MoqWaitStatus_genType_Signal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Signal(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWaitStatus_genType_Signal_fnRecorder) NoSeq() *MoqWaitStatus_genType_Signal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Signal(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWaitStatus_genType_Signal_fnRecorder) ReturnResults(result1 syscall.Signal) *MoqWaitStatus_genType_Signal_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 syscall.Signal
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_Signal_doFn
		DoReturnFn MoqWaitStatus_genType_Signal_doReturnFn
	}{
		Values: &struct {
			Result1 syscall.Signal
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWaitStatus_genType_Signal_fnRecorder) AndDo(fn MoqWaitStatus_genType_Signal_doFn) *MoqWaitStatus_genType_Signal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWaitStatus_genType_Signal_fnRecorder) DoReturnResults(fn MoqWaitStatus_genType_Signal_doReturnFn) *MoqWaitStatus_genType_Signal_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 syscall.Signal
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_Signal_doFn
		DoReturnFn MoqWaitStatus_genType_Signal_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWaitStatus_genType_Signal_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWaitStatus_genType_Signal_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Signal {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWaitStatus_genType_Signal_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWaitStatus_genType_Signal_paramsKey]*MoqWaitStatus_genType_Signal_results{},
		}
		r.Moq.ResultsByParams_Signal = append(r.Moq.ResultsByParams_Signal, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Signal) {
			copy(r.Moq.ResultsByParams_Signal[insertAt+1:], r.Moq.ResultsByParams_Signal[insertAt:0])
			r.Moq.ResultsByParams_Signal[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Signal(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWaitStatus_genType_Signal_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWaitStatus_genType_Signal_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWaitStatus_genType_Signal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 syscall.Signal
				}
				Sequence   uint32
				DoFn       MoqWaitStatus_genType_Signal_doFn
				DoReturnFn MoqWaitStatus_genType_Signal_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWaitStatus_genType) PrettyParams_Signal(params MoqWaitStatus_genType_Signal_params) string {
	return fmt.Sprintf("Signal()")
}

func (m *MoqWaitStatus_genType) ParamsKey_Signal(params MoqWaitStatus_genType_Signal_params, anyParams uint64) MoqWaitStatus_genType_Signal_paramsKey {
	m.Scene.T.Helper()
	return MoqWaitStatus_genType_Signal_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWaitStatus_genType_recorder) StopSignal() *MoqWaitStatus_genType_StopSignal_fnRecorder {
	return &MoqWaitStatus_genType_StopSignal_fnRecorder{
		Params:   MoqWaitStatus_genType_StopSignal_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWaitStatus_genType_StopSignal_fnRecorder) Any() *MoqWaitStatus_genType_StopSignal_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StopSignal(r.Params))
		return nil
	}
	return &MoqWaitStatus_genType_StopSignal_anyParams{Recorder: r}
}

func (r *MoqWaitStatus_genType_StopSignal_fnRecorder) Seq() *MoqWaitStatus_genType_StopSignal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StopSignal(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWaitStatus_genType_StopSignal_fnRecorder) NoSeq() *MoqWaitStatus_genType_StopSignal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StopSignal(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWaitStatus_genType_StopSignal_fnRecorder) ReturnResults(result1 syscall.Signal) *MoqWaitStatus_genType_StopSignal_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 syscall.Signal
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_StopSignal_doFn
		DoReturnFn MoqWaitStatus_genType_StopSignal_doReturnFn
	}{
		Values: &struct {
			Result1 syscall.Signal
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWaitStatus_genType_StopSignal_fnRecorder) AndDo(fn MoqWaitStatus_genType_StopSignal_doFn) *MoqWaitStatus_genType_StopSignal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWaitStatus_genType_StopSignal_fnRecorder) DoReturnResults(fn MoqWaitStatus_genType_StopSignal_doReturnFn) *MoqWaitStatus_genType_StopSignal_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 syscall.Signal
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_StopSignal_doFn
		DoReturnFn MoqWaitStatus_genType_StopSignal_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWaitStatus_genType_StopSignal_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWaitStatus_genType_StopSignal_resultsByParams
	for n, res := range r.Moq.ResultsByParams_StopSignal {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWaitStatus_genType_StopSignal_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWaitStatus_genType_StopSignal_paramsKey]*MoqWaitStatus_genType_StopSignal_results{},
		}
		r.Moq.ResultsByParams_StopSignal = append(r.Moq.ResultsByParams_StopSignal, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_StopSignal) {
			copy(r.Moq.ResultsByParams_StopSignal[insertAt+1:], r.Moq.ResultsByParams_StopSignal[insertAt:0])
			r.Moq.ResultsByParams_StopSignal[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_StopSignal(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWaitStatus_genType_StopSignal_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWaitStatus_genType_StopSignal_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWaitStatus_genType_StopSignal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 syscall.Signal
				}
				Sequence   uint32
				DoFn       MoqWaitStatus_genType_StopSignal_doFn
				DoReturnFn MoqWaitStatus_genType_StopSignal_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWaitStatus_genType) PrettyParams_StopSignal(params MoqWaitStatus_genType_StopSignal_params) string {
	return fmt.Sprintf("StopSignal()")
}

func (m *MoqWaitStatus_genType) ParamsKey_StopSignal(params MoqWaitStatus_genType_StopSignal_params, anyParams uint64) MoqWaitStatus_genType_StopSignal_paramsKey {
	m.Scene.T.Helper()
	return MoqWaitStatus_genType_StopSignal_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWaitStatus_genType_recorder) TrapCause() *MoqWaitStatus_genType_TrapCause_fnRecorder {
	return &MoqWaitStatus_genType_TrapCause_fnRecorder{
		Params:   MoqWaitStatus_genType_TrapCause_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWaitStatus_genType_TrapCause_fnRecorder) Any() *MoqWaitStatus_genType_TrapCause_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_TrapCause(r.Params))
		return nil
	}
	return &MoqWaitStatus_genType_TrapCause_anyParams{Recorder: r}
}

func (r *MoqWaitStatus_genType_TrapCause_fnRecorder) Seq() *MoqWaitStatus_genType_TrapCause_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_TrapCause(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWaitStatus_genType_TrapCause_fnRecorder) NoSeq() *MoqWaitStatus_genType_TrapCause_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_TrapCause(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWaitStatus_genType_TrapCause_fnRecorder) ReturnResults(result1 int) *MoqWaitStatus_genType_TrapCause_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_TrapCause_doFn
		DoReturnFn MoqWaitStatus_genType_TrapCause_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWaitStatus_genType_TrapCause_fnRecorder) AndDo(fn MoqWaitStatus_genType_TrapCause_doFn) *MoqWaitStatus_genType_TrapCause_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWaitStatus_genType_TrapCause_fnRecorder) DoReturnResults(fn MoqWaitStatus_genType_TrapCause_doReturnFn) *MoqWaitStatus_genType_TrapCause_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqWaitStatus_genType_TrapCause_doFn
		DoReturnFn MoqWaitStatus_genType_TrapCause_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWaitStatus_genType_TrapCause_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWaitStatus_genType_TrapCause_resultsByParams
	for n, res := range r.Moq.ResultsByParams_TrapCause {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWaitStatus_genType_TrapCause_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWaitStatus_genType_TrapCause_paramsKey]*MoqWaitStatus_genType_TrapCause_results{},
		}
		r.Moq.ResultsByParams_TrapCause = append(r.Moq.ResultsByParams_TrapCause, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_TrapCause) {
			copy(r.Moq.ResultsByParams_TrapCause[insertAt+1:], r.Moq.ResultsByParams_TrapCause[insertAt:0])
			r.Moq.ResultsByParams_TrapCause[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_TrapCause(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWaitStatus_genType_TrapCause_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWaitStatus_genType_TrapCause_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWaitStatus_genType_TrapCause_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqWaitStatus_genType_TrapCause_doFn
				DoReturnFn MoqWaitStatus_genType_TrapCause_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWaitStatus_genType) PrettyParams_TrapCause(params MoqWaitStatus_genType_TrapCause_params) string {
	return fmt.Sprintf("TrapCause()")
}

func (m *MoqWaitStatus_genType) ParamsKey_TrapCause(params MoqWaitStatus_genType_TrapCause_params, anyParams uint64) MoqWaitStatus_genType_TrapCause_paramsKey {
	m.Scene.T.Helper()
	return MoqWaitStatus_genType_TrapCause_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqWaitStatus_genType) Reset() {
	m.ResultsByParams_Exited = nil
	m.ResultsByParams_Signaled = nil
	m.ResultsByParams_Stopped = nil
	m.ResultsByParams_Continued = nil
	m.ResultsByParams_CoreDump = nil
	m.ResultsByParams_ExitStatus = nil
	m.ResultsByParams_Signal = nil
	m.ResultsByParams_StopSignal = nil
	m.ResultsByParams_TrapCause = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqWaitStatus_genType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Exited {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Exited(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Signaled {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Signaled(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Stopped {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Stopped(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Continued {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Continued(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_CoreDump {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_CoreDump(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ExitStatus {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ExitStatus(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Signal {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Signal(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_StopSignal {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_StopSignal(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_TrapCause {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_TrapCause(results.Params))
			}
		}
	}
}
