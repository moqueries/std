// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package io

import (
	"fmt"
	"io"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that io.ReadWriter is mocked completely
var _ io.ReadWriter = (*MoqReadWriter_mock)(nil)

// MoqReadWriter holds the state of a moq of the ReadWriter type
type MoqReadWriter struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqReadWriter_mock

	ResultsByParams_Read  []MoqReadWriter_Read_resultsByParams
	ResultsByParams_Write []MoqReadWriter_Write_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Read struct {
				P moq.ParamIndexing
			}
			Write struct {
				P moq.ParamIndexing
			}
		}
	}
	// MoqReadWriter_mock isolates the mock interface of the ReadWriter type
}

type MoqReadWriter_mock struct {
	Moq *MoqReadWriter
}

// MoqReadWriter_recorder isolates the recorder interface of the ReadWriter
// type
type MoqReadWriter_recorder struct {
	Moq *MoqReadWriter
}

// MoqReadWriter_Read_params holds the params of the ReadWriter type
type MoqReadWriter_Read_params struct{ P []byte }

// MoqReadWriter_Read_paramsKey holds the map key params of the ReadWriter type
type MoqReadWriter_Read_paramsKey struct {
	Params struct{}
	Hashes struct{ P hash.Hash }
}

// MoqReadWriter_Read_resultsByParams contains the results for a given set of
// parameters for the ReadWriter type
type MoqReadWriter_Read_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReadWriter_Read_paramsKey]*MoqReadWriter_Read_results
}

// MoqReadWriter_Read_doFn defines the type of function needed when calling
// AndDo for the ReadWriter type
type MoqReadWriter_Read_doFn func(p []byte)

// MoqReadWriter_Read_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ReadWriter type
type MoqReadWriter_Read_doReturnFn func(p []byte) (n int, err error)

// MoqReadWriter_Read_results holds the results of the ReadWriter type
type MoqReadWriter_Read_results struct {
	Params  MoqReadWriter_Read_params
	Results []struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqReadWriter_Read_doFn
		DoReturnFn MoqReadWriter_Read_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReadWriter_Read_fnRecorder routes recorded function calls to the
// MoqReadWriter moq
type MoqReadWriter_Read_fnRecorder struct {
	Params    MoqReadWriter_Read_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReadWriter_Read_results
	Moq       *MoqReadWriter
}

// MoqReadWriter_Read_anyParams isolates the any params functions of the
// ReadWriter type
type MoqReadWriter_Read_anyParams struct {
	Recorder *MoqReadWriter_Read_fnRecorder
}

// MoqReadWriter_Write_params holds the params of the ReadWriter type
type MoqReadWriter_Write_params struct{ P []byte }

// MoqReadWriter_Write_paramsKey holds the map key params of the ReadWriter
// type
type MoqReadWriter_Write_paramsKey struct {
	Params struct{}
	Hashes struct{ P hash.Hash }
}

// MoqReadWriter_Write_resultsByParams contains the results for a given set of
// parameters for the ReadWriter type
type MoqReadWriter_Write_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReadWriter_Write_paramsKey]*MoqReadWriter_Write_results
}

// MoqReadWriter_Write_doFn defines the type of function needed when calling
// AndDo for the ReadWriter type
type MoqReadWriter_Write_doFn func(p []byte)

// MoqReadWriter_Write_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ReadWriter type
type MoqReadWriter_Write_doReturnFn func(p []byte) (n int, err error)

// MoqReadWriter_Write_results holds the results of the ReadWriter type
type MoqReadWriter_Write_results struct {
	Params  MoqReadWriter_Write_params
	Results []struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqReadWriter_Write_doFn
		DoReturnFn MoqReadWriter_Write_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReadWriter_Write_fnRecorder routes recorded function calls to the
// MoqReadWriter moq
type MoqReadWriter_Write_fnRecorder struct {
	Params    MoqReadWriter_Write_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReadWriter_Write_results
	Moq       *MoqReadWriter
}

// MoqReadWriter_Write_anyParams isolates the any params functions of the
// ReadWriter type
type MoqReadWriter_Write_anyParams struct {
	Recorder *MoqReadWriter_Write_fnRecorder
}

// NewMoqReadWriter creates a new moq of the ReadWriter type
func NewMoqReadWriter(scene *moq.Scene, config *moq.Config) *MoqReadWriter {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqReadWriter{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqReadWriter_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Read struct {
					P moq.ParamIndexing
				}
				Write struct {
					P moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Read struct {
				P moq.ParamIndexing
			}
			Write struct {
				P moq.ParamIndexing
			}
		}{
			Read: struct {
				P moq.ParamIndexing
			}{
				P: moq.ParamIndexByHash,
			},
			Write: struct {
				P moq.ParamIndexing
			}{
				P: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the ReadWriter type
func (m *MoqReadWriter) Mock() *MoqReadWriter_mock { return m.Moq }

func (m *MoqReadWriter_mock) Read(p []byte) (n int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqReadWriter_Read_params{
		P: p,
	}
	var results *MoqReadWriter_Read_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Read {
		paramsKey := m.Moq.ParamsKey_Read(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Read(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Read(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Read(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(p)
	}
	return
}

func (m *MoqReadWriter_mock) Write(p []byte) (n int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqReadWriter_Write_params{
		P: p,
	}
	var results *MoqReadWriter_Write_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Write {
		paramsKey := m.Moq.ParamsKey_Write(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Write(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Write(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Write(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(p)
	}
	return
}

// OnCall returns the recorder implementation of the ReadWriter type
func (m *MoqReadWriter) OnCall() *MoqReadWriter_recorder {
	return &MoqReadWriter_recorder{
		Moq: m,
	}
}

func (m *MoqReadWriter_recorder) Read(p []byte) *MoqReadWriter_Read_fnRecorder {
	return &MoqReadWriter_Read_fnRecorder{
		Params: MoqReadWriter_Read_params{
			P: p,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReadWriter_Read_fnRecorder) Any() *MoqReadWriter_Read_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	return &MoqReadWriter_Read_anyParams{Recorder: r}
}

func (a *MoqReadWriter_Read_anyParams) P() *MoqReadWriter_Read_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqReadWriter_Read_fnRecorder) Seq() *MoqReadWriter_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReadWriter_Read_fnRecorder) NoSeq() *MoqReadWriter_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReadWriter_Read_fnRecorder) ReturnResults(n int, err error) *MoqReadWriter_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqReadWriter_Read_doFn
		DoReturnFn MoqReadWriter_Read_doReturnFn
	}{
		Values: &struct {
			N   int
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReadWriter_Read_fnRecorder) AndDo(fn MoqReadWriter_Read_doFn) *MoqReadWriter_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReadWriter_Read_fnRecorder) DoReturnResults(fn MoqReadWriter_Read_doReturnFn) *MoqReadWriter_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqReadWriter_Read_doFn
		DoReturnFn MoqReadWriter_Read_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReadWriter_Read_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReadWriter_Read_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Read {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReadWriter_Read_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReadWriter_Read_paramsKey]*MoqReadWriter_Read_results{},
		}
		r.Moq.ResultsByParams_Read = append(r.Moq.ResultsByParams_Read, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Read) {
			copy(r.Moq.ResultsByParams_Read[insertAt+1:], r.Moq.ResultsByParams_Read[insertAt:0])
			r.Moq.ResultsByParams_Read[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Read(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReadWriter_Read_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReadWriter_Read_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReadWriter_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int
					Err error
				}
				Sequence   uint32
				DoFn       MoqReadWriter_Read_doFn
				DoReturnFn MoqReadWriter_Read_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReadWriter) PrettyParams_Read(params MoqReadWriter_Read_params) string {
	return fmt.Sprintf("Read(%#v)", params.P)
}

func (m *MoqReadWriter) ParamsKey_Read(params MoqReadWriter_Read_params, anyParams uint64) MoqReadWriter_Read_paramsKey {
	m.Scene.T.Helper()
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Read.P == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The p parameter of the Read function can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.P)
	}
	return MoqReadWriter_Read_paramsKey{
		Params: struct{}{},
		Hashes: struct{ P hash.Hash }{
			P: pUsedHash,
		},
	}
}

func (m *MoqReadWriter_recorder) Write(p []byte) *MoqReadWriter_Write_fnRecorder {
	return &MoqReadWriter_Write_fnRecorder{
		Params: MoqReadWriter_Write_params{
			P: p,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReadWriter_Write_fnRecorder) Any() *MoqReadWriter_Write_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	return &MoqReadWriter_Write_anyParams{Recorder: r}
}

func (a *MoqReadWriter_Write_anyParams) P() *MoqReadWriter_Write_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqReadWriter_Write_fnRecorder) Seq() *MoqReadWriter_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReadWriter_Write_fnRecorder) NoSeq() *MoqReadWriter_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReadWriter_Write_fnRecorder) ReturnResults(n int, err error) *MoqReadWriter_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqReadWriter_Write_doFn
		DoReturnFn MoqReadWriter_Write_doReturnFn
	}{
		Values: &struct {
			N   int
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReadWriter_Write_fnRecorder) AndDo(fn MoqReadWriter_Write_doFn) *MoqReadWriter_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReadWriter_Write_fnRecorder) DoReturnResults(fn MoqReadWriter_Write_doReturnFn) *MoqReadWriter_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqReadWriter_Write_doFn
		DoReturnFn MoqReadWriter_Write_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReadWriter_Write_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReadWriter_Write_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Write {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReadWriter_Write_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReadWriter_Write_paramsKey]*MoqReadWriter_Write_results{},
		}
		r.Moq.ResultsByParams_Write = append(r.Moq.ResultsByParams_Write, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Write) {
			copy(r.Moq.ResultsByParams_Write[insertAt+1:], r.Moq.ResultsByParams_Write[insertAt:0])
			r.Moq.ResultsByParams_Write[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Write(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReadWriter_Write_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReadWriter_Write_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReadWriter_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int
					Err error
				}
				Sequence   uint32
				DoFn       MoqReadWriter_Write_doFn
				DoReturnFn MoqReadWriter_Write_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReadWriter) PrettyParams_Write(params MoqReadWriter_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.P)
}

func (m *MoqReadWriter) ParamsKey_Write(params MoqReadWriter_Write_params, anyParams uint64) MoqReadWriter_Write_paramsKey {
	m.Scene.T.Helper()
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Write.P == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The p parameter of the Write function can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.P)
	}
	return MoqReadWriter_Write_paramsKey{
		Params: struct{}{},
		Hashes: struct{ P hash.Hash }{
			P: pUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqReadWriter) Reset() { m.ResultsByParams_Read = nil; m.ResultsByParams_Write = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqReadWriter) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Read {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Read(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Write {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Write(results.Params))
			}
		}
	}
}
