// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package io

import (
	"fmt"
	"io"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that io.RuneReader is mocked completely
var _ io.RuneReader = (*MoqRuneReader_mock)(nil)

// MoqRuneReader holds the state of a moq of the RuneReader type
type MoqRuneReader struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqRuneReader_mock

	ResultsByParams_ReadRune []MoqRuneReader_ReadRune_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			ReadRune struct{}
		}
	}
}

// MoqRuneReader_mock isolates the mock interface of the RuneReader type
type MoqRuneReader_mock struct {
	Moq *MoqRuneReader
}

// MoqRuneReader_recorder isolates the recorder interface of the RuneReader
// type
type MoqRuneReader_recorder struct {
	Moq *MoqRuneReader
}

// MoqRuneReader_ReadRune_params holds the params of the RuneReader type
type MoqRuneReader_ReadRune_params struct{}

// MoqRuneReader_ReadRune_paramsKey holds the map key params of the RuneReader
// type
type MoqRuneReader_ReadRune_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRuneReader_ReadRune_resultsByParams contains the results for a given set
// of parameters for the RuneReader type
type MoqRuneReader_ReadRune_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRuneReader_ReadRune_paramsKey]*MoqRuneReader_ReadRune_results
}

// MoqRuneReader_ReadRune_doFn defines the type of function needed when calling
// AndDo for the RuneReader type
type MoqRuneReader_ReadRune_doFn func()

// MoqRuneReader_ReadRune_doReturnFn defines the type of function needed when
// calling DoReturnResults for the RuneReader type
type MoqRuneReader_ReadRune_doReturnFn func() (r rune, size int, err error)

// MoqRuneReader_ReadRune_results holds the results of the RuneReader type
type MoqRuneReader_ReadRune_results struct {
	Params  MoqRuneReader_ReadRune_params
	Results []struct {
		Values *struct {
			Result1 rune
			Size    int
			Err     error
		}
		Sequence   uint32
		DoFn       MoqRuneReader_ReadRune_doFn
		DoReturnFn MoqRuneReader_ReadRune_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRuneReader_ReadRune_fnRecorder routes recorded function calls to the
// MoqRuneReader moq
type MoqRuneReader_ReadRune_fnRecorder struct {
	Params    MoqRuneReader_ReadRune_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRuneReader_ReadRune_results
	Moq       *MoqRuneReader
}

// MoqRuneReader_ReadRune_anyParams isolates the any params functions of the
// RuneReader type
type MoqRuneReader_ReadRune_anyParams struct {
	Recorder *MoqRuneReader_ReadRune_fnRecorder
}

// NewMoqRuneReader creates a new moq of the RuneReader type
func NewMoqRuneReader(scene *moq.Scene, config *moq.Config) *MoqRuneReader {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqRuneReader{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqRuneReader_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				ReadRune struct{}
			}
		}{ParameterIndexing: struct {
			ReadRune struct{}
		}{
			ReadRune: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the RuneReader type
func (m *MoqRuneReader) Mock() *MoqRuneReader_mock { return m.Moq }

func (m *MoqRuneReader_mock) ReadRune() (result1 rune, size int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqRuneReader_ReadRune_params{}
	var results *MoqRuneReader_ReadRune_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadRune {
		paramsKey := m.Moq.ParamsKey_ReadRune(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadRune(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadRune(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadRune(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		size = result.Values.Size
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		result1, size, err = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the RuneReader type
func (m *MoqRuneReader) OnCall() *MoqRuneReader_recorder {
	return &MoqRuneReader_recorder{
		Moq: m,
	}
}

func (m *MoqRuneReader_recorder) ReadRune() *MoqRuneReader_ReadRune_fnRecorder {
	return &MoqRuneReader_ReadRune_fnRecorder{
		Params:   MoqRuneReader_ReadRune_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRuneReader_ReadRune_fnRecorder) Any() *MoqRuneReader_ReadRune_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadRune(r.Params))
		return nil
	}
	return &MoqRuneReader_ReadRune_anyParams{Recorder: r}
}

func (r *MoqRuneReader_ReadRune_fnRecorder) Seq() *MoqRuneReader_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadRune(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRuneReader_ReadRune_fnRecorder) NoSeq() *MoqRuneReader_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadRune(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRuneReader_ReadRune_fnRecorder) ReturnResults(result1 rune, size int, err error) *MoqRuneReader_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 rune
			Size    int
			Err     error
		}
		Sequence   uint32
		DoFn       MoqRuneReader_ReadRune_doFn
		DoReturnFn MoqRuneReader_ReadRune_doReturnFn
	}{
		Values: &struct {
			Result1 rune
			Size    int
			Err     error
		}{
			Result1: result1,
			Size:    size,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRuneReader_ReadRune_fnRecorder) AndDo(fn MoqRuneReader_ReadRune_doFn) *MoqRuneReader_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRuneReader_ReadRune_fnRecorder) DoReturnResults(fn MoqRuneReader_ReadRune_doReturnFn) *MoqRuneReader_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 rune
			Size    int
			Err     error
		}
		Sequence   uint32
		DoFn       MoqRuneReader_ReadRune_doFn
		DoReturnFn MoqRuneReader_ReadRune_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRuneReader_ReadRune_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRuneReader_ReadRune_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadRune {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRuneReader_ReadRune_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRuneReader_ReadRune_paramsKey]*MoqRuneReader_ReadRune_results{},
		}
		r.Moq.ResultsByParams_ReadRune = append(r.Moq.ResultsByParams_ReadRune, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadRune) {
			copy(r.Moq.ResultsByParams_ReadRune[insertAt+1:], r.Moq.ResultsByParams_ReadRune[insertAt:0])
			r.Moq.ResultsByParams_ReadRune[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadRune(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRuneReader_ReadRune_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRuneReader_ReadRune_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRuneReader_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 rune
					Size    int
					Err     error
				}
				Sequence   uint32
				DoFn       MoqRuneReader_ReadRune_doFn
				DoReturnFn MoqRuneReader_ReadRune_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRuneReader) PrettyParams_ReadRune(params MoqRuneReader_ReadRune_params) string {
	return fmt.Sprintf("ReadRune()")
}

func (m *MoqRuneReader) ParamsKey_ReadRune(params MoqRuneReader_ReadRune_params, anyParams uint64) MoqRuneReader_ReadRune_paramsKey {
	m.Scene.T.Helper()
	return MoqRuneReader_ReadRune_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqRuneReader) Reset() { m.ResultsByParams_ReadRune = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqRuneReader) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_ReadRune {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadRune(results.Params))
			}
		}
	}
}
