// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package fs

import (
	"fmt"
	"io/fs"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that fs.ReadDirFile is mocked
// completely
var _ fs.ReadDirFile = (*MoqReadDirFile_mock)(nil)

// MoqReadDirFile holds the state of a moq of the ReadDirFile type
type MoqReadDirFile struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqReadDirFile_mock

	ResultsByParams_Stat    []MoqReadDirFile_Stat_resultsByParams
	ResultsByParams_Read    []MoqReadDirFile_Read_resultsByParams
	ResultsByParams_Close   []MoqReadDirFile_Close_resultsByParams
	ResultsByParams_ReadDir []MoqReadDirFile_ReadDir_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Stat struct{}
			Read struct {
				Param1 moq.ParamIndexing
			}
			Close   struct{}
			ReadDir struct {
				N moq.ParamIndexing
			}
		}
	}
	// MoqReadDirFile_mock isolates the mock interface of the ReadDirFile type
}

type MoqReadDirFile_mock struct {
	Moq *MoqReadDirFile
}

// MoqReadDirFile_recorder isolates the recorder interface of the ReadDirFile
// type
type MoqReadDirFile_recorder struct {
	Moq *MoqReadDirFile
}

// MoqReadDirFile_Stat_params holds the params of the ReadDirFile type
type MoqReadDirFile_Stat_params struct{}

// MoqReadDirFile_Stat_paramsKey holds the map key params of the ReadDirFile
// type
type MoqReadDirFile_Stat_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReadDirFile_Stat_resultsByParams contains the results for a given set of
// parameters for the ReadDirFile type
type MoqReadDirFile_Stat_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReadDirFile_Stat_paramsKey]*MoqReadDirFile_Stat_results
}

// MoqReadDirFile_Stat_doFn defines the type of function needed when calling
// AndDo for the ReadDirFile type
type MoqReadDirFile_Stat_doFn func()

// MoqReadDirFile_Stat_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ReadDirFile type
type MoqReadDirFile_Stat_doReturnFn func() (fs.FileInfo, error)

// MoqReadDirFile_Stat_results holds the results of the ReadDirFile type
type MoqReadDirFile_Stat_results struct {
	Params  MoqReadDirFile_Stat_params
	Results []struct {
		Values *struct {
			Result1 fs.FileInfo
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReadDirFile_Stat_doFn
		DoReturnFn MoqReadDirFile_Stat_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReadDirFile_Stat_fnRecorder routes recorded function calls to the
// MoqReadDirFile moq
type MoqReadDirFile_Stat_fnRecorder struct {
	Params    MoqReadDirFile_Stat_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReadDirFile_Stat_results
	Moq       *MoqReadDirFile
}

// MoqReadDirFile_Stat_anyParams isolates the any params functions of the
// ReadDirFile type
type MoqReadDirFile_Stat_anyParams struct {
	Recorder *MoqReadDirFile_Stat_fnRecorder
}

// MoqReadDirFile_Read_params holds the params of the ReadDirFile type
type MoqReadDirFile_Read_params struct{ Param1 []byte }

// MoqReadDirFile_Read_paramsKey holds the map key params of the ReadDirFile
// type
type MoqReadDirFile_Read_paramsKey struct {
	Params struct{}
	Hashes struct{ Param1 hash.Hash }
}

// MoqReadDirFile_Read_resultsByParams contains the results for a given set of
// parameters for the ReadDirFile type
type MoqReadDirFile_Read_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReadDirFile_Read_paramsKey]*MoqReadDirFile_Read_results
}

// MoqReadDirFile_Read_doFn defines the type of function needed when calling
// AndDo for the ReadDirFile type
type MoqReadDirFile_Read_doFn func([]byte)

// MoqReadDirFile_Read_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ReadDirFile type
type MoqReadDirFile_Read_doReturnFn func([]byte) (int, error)

// MoqReadDirFile_Read_results holds the results of the ReadDirFile type
type MoqReadDirFile_Read_results struct {
	Params  MoqReadDirFile_Read_params
	Results []struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReadDirFile_Read_doFn
		DoReturnFn MoqReadDirFile_Read_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReadDirFile_Read_fnRecorder routes recorded function calls to the
// MoqReadDirFile moq
type MoqReadDirFile_Read_fnRecorder struct {
	Params    MoqReadDirFile_Read_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReadDirFile_Read_results
	Moq       *MoqReadDirFile
}

// MoqReadDirFile_Read_anyParams isolates the any params functions of the
// ReadDirFile type
type MoqReadDirFile_Read_anyParams struct {
	Recorder *MoqReadDirFile_Read_fnRecorder
}

// MoqReadDirFile_Close_params holds the params of the ReadDirFile type
type MoqReadDirFile_Close_params struct{}

// MoqReadDirFile_Close_paramsKey holds the map key params of the ReadDirFile
// type
type MoqReadDirFile_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReadDirFile_Close_resultsByParams contains the results for a given set of
// parameters for the ReadDirFile type
type MoqReadDirFile_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReadDirFile_Close_paramsKey]*MoqReadDirFile_Close_results
}

// MoqReadDirFile_Close_doFn defines the type of function needed when calling
// AndDo for the ReadDirFile type
type MoqReadDirFile_Close_doFn func()

// MoqReadDirFile_Close_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ReadDirFile type
type MoqReadDirFile_Close_doReturnFn func() error

// MoqReadDirFile_Close_results holds the results of the ReadDirFile type
type MoqReadDirFile_Close_results struct {
	Params  MoqReadDirFile_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqReadDirFile_Close_doFn
		DoReturnFn MoqReadDirFile_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReadDirFile_Close_fnRecorder routes recorded function calls to the
// MoqReadDirFile moq
type MoqReadDirFile_Close_fnRecorder struct {
	Params    MoqReadDirFile_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReadDirFile_Close_results
	Moq       *MoqReadDirFile
}

// MoqReadDirFile_Close_anyParams isolates the any params functions of the
// ReadDirFile type
type MoqReadDirFile_Close_anyParams struct {
	Recorder *MoqReadDirFile_Close_fnRecorder
}

// MoqReadDirFile_ReadDir_params holds the params of the ReadDirFile type
type MoqReadDirFile_ReadDir_params struct{ N int }

// MoqReadDirFile_ReadDir_paramsKey holds the map key params of the ReadDirFile
// type
type MoqReadDirFile_ReadDir_paramsKey struct {
	Params struct{ N int }
	Hashes struct{ N hash.Hash }
}

// MoqReadDirFile_ReadDir_resultsByParams contains the results for a given set
// of parameters for the ReadDirFile type
type MoqReadDirFile_ReadDir_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReadDirFile_ReadDir_paramsKey]*MoqReadDirFile_ReadDir_results
}

// MoqReadDirFile_ReadDir_doFn defines the type of function needed when calling
// AndDo for the ReadDirFile type
type MoqReadDirFile_ReadDir_doFn func(n int)

// MoqReadDirFile_ReadDir_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ReadDirFile type
type MoqReadDirFile_ReadDir_doReturnFn func(n int) ([]fs.DirEntry, error)

// MoqReadDirFile_ReadDir_results holds the results of the ReadDirFile type
type MoqReadDirFile_ReadDir_results struct {
	Params  MoqReadDirFile_ReadDir_params
	Results []struct {
		Values *struct {
			Result1 []fs.DirEntry
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReadDirFile_ReadDir_doFn
		DoReturnFn MoqReadDirFile_ReadDir_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReadDirFile_ReadDir_fnRecorder routes recorded function calls to the
// MoqReadDirFile moq
type MoqReadDirFile_ReadDir_fnRecorder struct {
	Params    MoqReadDirFile_ReadDir_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReadDirFile_ReadDir_results
	Moq       *MoqReadDirFile
}

// MoqReadDirFile_ReadDir_anyParams isolates the any params functions of the
// ReadDirFile type
type MoqReadDirFile_ReadDir_anyParams struct {
	Recorder *MoqReadDirFile_ReadDir_fnRecorder
}

// NewMoqReadDirFile creates a new moq of the ReadDirFile type
func NewMoqReadDirFile(scene *moq.Scene, config *moq.Config) *MoqReadDirFile {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqReadDirFile{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqReadDirFile_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Stat struct{}
				Read struct {
					Param1 moq.ParamIndexing
				}
				Close   struct{}
				ReadDir struct {
					N moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Stat struct{}
			Read struct {
				Param1 moq.ParamIndexing
			}
			Close   struct{}
			ReadDir struct {
				N moq.ParamIndexing
			}
		}{
			Stat: struct{}{},
			Read: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
			},
			Close: struct{}{},
			ReadDir: struct {
				N moq.ParamIndexing
			}{
				N: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the ReadDirFile type
func (m *MoqReadDirFile) Mock() *MoqReadDirFile_mock { return m.Moq }

func (m *MoqReadDirFile_mock) Stat() (result1 fs.FileInfo, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReadDirFile_Stat_params{}
	var results *MoqReadDirFile_Stat_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Stat {
		paramsKey := m.Moq.ParamsKey_Stat(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Stat(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Stat(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Stat(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqReadDirFile_mock) Read(param1 []byte) (result1 int, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReadDirFile_Read_params{
		Param1: param1,
	}
	var results *MoqReadDirFile_Read_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Read {
		paramsKey := m.Moq.ParamsKey_Read(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Read(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Read(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Read(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqReadDirFile_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReadDirFile_Close_params{}
	var results *MoqReadDirFile_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqReadDirFile_mock) ReadDir(n int) (result1 []fs.DirEntry, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReadDirFile_ReadDir_params{
		N: n,
	}
	var results *MoqReadDirFile_ReadDir_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadDir {
		paramsKey := m.Moq.ParamsKey_ReadDir(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadDir(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadDir(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadDir(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(n)
	}
	return
}

// OnCall returns the recorder implementation of the ReadDirFile type
func (m *MoqReadDirFile) OnCall() *MoqReadDirFile_recorder {
	return &MoqReadDirFile_recorder{
		Moq: m,
	}
}

func (m *MoqReadDirFile_recorder) Stat() *MoqReadDirFile_Stat_fnRecorder {
	return &MoqReadDirFile_Stat_fnRecorder{
		Params:   MoqReadDirFile_Stat_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReadDirFile_Stat_fnRecorder) Any() *MoqReadDirFile_Stat_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Stat(r.Params))
		return nil
	}
	return &MoqReadDirFile_Stat_anyParams{Recorder: r}
}

func (r *MoqReadDirFile_Stat_fnRecorder) Seq() *MoqReadDirFile_Stat_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Stat(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReadDirFile_Stat_fnRecorder) NoSeq() *MoqReadDirFile_Stat_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Stat(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReadDirFile_Stat_fnRecorder) ReturnResults(result1 fs.FileInfo, result2 error) *MoqReadDirFile_Stat_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 fs.FileInfo
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReadDirFile_Stat_doFn
		DoReturnFn MoqReadDirFile_Stat_doReturnFn
	}{
		Values: &struct {
			Result1 fs.FileInfo
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReadDirFile_Stat_fnRecorder) AndDo(fn MoqReadDirFile_Stat_doFn) *MoqReadDirFile_Stat_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReadDirFile_Stat_fnRecorder) DoReturnResults(fn MoqReadDirFile_Stat_doReturnFn) *MoqReadDirFile_Stat_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 fs.FileInfo
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReadDirFile_Stat_doFn
		DoReturnFn MoqReadDirFile_Stat_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReadDirFile_Stat_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReadDirFile_Stat_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Stat {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReadDirFile_Stat_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReadDirFile_Stat_paramsKey]*MoqReadDirFile_Stat_results{},
		}
		r.Moq.ResultsByParams_Stat = append(r.Moq.ResultsByParams_Stat, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Stat) {
			copy(r.Moq.ResultsByParams_Stat[insertAt+1:], r.Moq.ResultsByParams_Stat[insertAt:0])
			r.Moq.ResultsByParams_Stat[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Stat(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReadDirFile_Stat_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReadDirFile_Stat_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReadDirFile_Stat_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 fs.FileInfo
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqReadDirFile_Stat_doFn
				DoReturnFn MoqReadDirFile_Stat_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReadDirFile) PrettyParams_Stat(params MoqReadDirFile_Stat_params) string {
	return fmt.Sprintf("Stat()")
}

func (m *MoqReadDirFile) ParamsKey_Stat(params MoqReadDirFile_Stat_params, anyParams uint64) MoqReadDirFile_Stat_paramsKey {
	m.Scene.T.Helper()
	return MoqReadDirFile_Stat_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReadDirFile_recorder) Read(param1 []byte) *MoqReadDirFile_Read_fnRecorder {
	return &MoqReadDirFile_Read_fnRecorder{
		Params: MoqReadDirFile_Read_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReadDirFile_Read_fnRecorder) Any() *MoqReadDirFile_Read_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	return &MoqReadDirFile_Read_anyParams{Recorder: r}
}

func (a *MoqReadDirFile_Read_anyParams) Param1() *MoqReadDirFile_Read_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqReadDirFile_Read_fnRecorder) Seq() *MoqReadDirFile_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReadDirFile_Read_fnRecorder) NoSeq() *MoqReadDirFile_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReadDirFile_Read_fnRecorder) ReturnResults(result1 int, result2 error) *MoqReadDirFile_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReadDirFile_Read_doFn
		DoReturnFn MoqReadDirFile_Read_doReturnFn
	}{
		Values: &struct {
			Result1 int
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReadDirFile_Read_fnRecorder) AndDo(fn MoqReadDirFile_Read_doFn) *MoqReadDirFile_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReadDirFile_Read_fnRecorder) DoReturnResults(fn MoqReadDirFile_Read_doReturnFn) *MoqReadDirFile_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReadDirFile_Read_doFn
		DoReturnFn MoqReadDirFile_Read_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReadDirFile_Read_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReadDirFile_Read_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Read {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReadDirFile_Read_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReadDirFile_Read_paramsKey]*MoqReadDirFile_Read_results{},
		}
		r.Moq.ResultsByParams_Read = append(r.Moq.ResultsByParams_Read, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Read) {
			copy(r.Moq.ResultsByParams_Read[insertAt+1:], r.Moq.ResultsByParams_Read[insertAt:0])
			r.Moq.ResultsByParams_Read[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Read(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReadDirFile_Read_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReadDirFile_Read_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReadDirFile_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqReadDirFile_Read_doFn
				DoReturnFn MoqReadDirFile_Read_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReadDirFile) PrettyParams_Read(params MoqReadDirFile_Read_params) string {
	return fmt.Sprintf("Read(%#v)", params.Param1)
}

func (m *MoqReadDirFile) ParamsKey_Read(params MoqReadDirFile_Read_params, anyParams uint64) MoqReadDirFile_Read_paramsKey {
	m.Scene.T.Helper()
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Read.Param1 == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The param1 parameter of the Read function can't be indexed by value")
		}
		param1UsedHash = hash.DeepHash(params.Param1)
	}
	return MoqReadDirFile_Read_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqReadDirFile_recorder) Close() *MoqReadDirFile_Close_fnRecorder {
	return &MoqReadDirFile_Close_fnRecorder{
		Params:   MoqReadDirFile_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReadDirFile_Close_fnRecorder) Any() *MoqReadDirFile_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqReadDirFile_Close_anyParams{Recorder: r}
}

func (r *MoqReadDirFile_Close_fnRecorder) Seq() *MoqReadDirFile_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReadDirFile_Close_fnRecorder) NoSeq() *MoqReadDirFile_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReadDirFile_Close_fnRecorder) ReturnResults(result1 error) *MoqReadDirFile_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqReadDirFile_Close_doFn
		DoReturnFn MoqReadDirFile_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReadDirFile_Close_fnRecorder) AndDo(fn MoqReadDirFile_Close_doFn) *MoqReadDirFile_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReadDirFile_Close_fnRecorder) DoReturnResults(fn MoqReadDirFile_Close_doReturnFn) *MoqReadDirFile_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqReadDirFile_Close_doFn
		DoReturnFn MoqReadDirFile_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReadDirFile_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReadDirFile_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReadDirFile_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReadDirFile_Close_paramsKey]*MoqReadDirFile_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReadDirFile_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReadDirFile_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReadDirFile_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqReadDirFile_Close_doFn
				DoReturnFn MoqReadDirFile_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReadDirFile) PrettyParams_Close(params MoqReadDirFile_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqReadDirFile) ParamsKey_Close(params MoqReadDirFile_Close_params, anyParams uint64) MoqReadDirFile_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqReadDirFile_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReadDirFile_recorder) ReadDir(n int) *MoqReadDirFile_ReadDir_fnRecorder {
	return &MoqReadDirFile_ReadDir_fnRecorder{
		Params: MoqReadDirFile_ReadDir_params{
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReadDirFile_ReadDir_fnRecorder) Any() *MoqReadDirFile_ReadDir_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadDir(r.Params))
		return nil
	}
	return &MoqReadDirFile_ReadDir_anyParams{Recorder: r}
}

func (a *MoqReadDirFile_ReadDir_anyParams) N() *MoqReadDirFile_ReadDir_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqReadDirFile_ReadDir_fnRecorder) Seq() *MoqReadDirFile_ReadDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadDir(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReadDirFile_ReadDir_fnRecorder) NoSeq() *MoqReadDirFile_ReadDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadDir(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReadDirFile_ReadDir_fnRecorder) ReturnResults(result1 []fs.DirEntry, result2 error) *MoqReadDirFile_ReadDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []fs.DirEntry
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReadDirFile_ReadDir_doFn
		DoReturnFn MoqReadDirFile_ReadDir_doReturnFn
	}{
		Values: &struct {
			Result1 []fs.DirEntry
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReadDirFile_ReadDir_fnRecorder) AndDo(fn MoqReadDirFile_ReadDir_doFn) *MoqReadDirFile_ReadDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReadDirFile_ReadDir_fnRecorder) DoReturnResults(fn MoqReadDirFile_ReadDir_doReturnFn) *MoqReadDirFile_ReadDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []fs.DirEntry
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReadDirFile_ReadDir_doFn
		DoReturnFn MoqReadDirFile_ReadDir_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReadDirFile_ReadDir_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReadDirFile_ReadDir_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadDir {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReadDirFile_ReadDir_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReadDirFile_ReadDir_paramsKey]*MoqReadDirFile_ReadDir_results{},
		}
		r.Moq.ResultsByParams_ReadDir = append(r.Moq.ResultsByParams_ReadDir, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadDir) {
			copy(r.Moq.ResultsByParams_ReadDir[insertAt+1:], r.Moq.ResultsByParams_ReadDir[insertAt:0])
			r.Moq.ResultsByParams_ReadDir[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadDir(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReadDirFile_ReadDir_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReadDirFile_ReadDir_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReadDirFile_ReadDir_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []fs.DirEntry
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqReadDirFile_ReadDir_doFn
				DoReturnFn MoqReadDirFile_ReadDir_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReadDirFile) PrettyParams_ReadDir(params MoqReadDirFile_ReadDir_params) string {
	return fmt.Sprintf("ReadDir(%#v)", params.N)
}

func (m *MoqReadDirFile) ParamsKey_ReadDir(params MoqReadDirFile_ReadDir_params, anyParams uint64) MoqReadDirFile_ReadDir_paramsKey {
	m.Scene.T.Helper()
	var nUsed int
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadDir.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqReadDirFile_ReadDir_paramsKey{
		Params: struct{ N int }{
			N: nUsed,
		},
		Hashes: struct{ N hash.Hash }{
			N: nUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqReadDirFile) Reset() {
	m.ResultsByParams_Stat = nil
	m.ResultsByParams_Read = nil
	m.ResultsByParams_Close = nil
	m.ResultsByParams_ReadDir = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqReadDirFile) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Stat {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Stat(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Read {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Read(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadDir {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadDir(results.Params))
			}
		}
	}
}
