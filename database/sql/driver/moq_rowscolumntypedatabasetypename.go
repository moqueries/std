// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package driver

import (
	"database/sql/driver"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that
// driver.RowsColumnTypeDatabaseTypeName is mocked completely
var _ driver.RowsColumnTypeDatabaseTypeName = (*MoqRowsColumnTypeDatabaseTypeName_mock)(nil)

// MoqRowsColumnTypeDatabaseTypeName holds the state of a moq of the
// RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqRowsColumnTypeDatabaseTypeName_mock

	ResultsByParams_Columns                    []MoqRowsColumnTypeDatabaseTypeName_Columns_resultsByParams
	ResultsByParams_Close                      []MoqRowsColumnTypeDatabaseTypeName_Close_resultsByParams
	ResultsByParams_Next                       []MoqRowsColumnTypeDatabaseTypeName_Next_resultsByParams
	ResultsByParams_ColumnTypeDatabaseTypeName []MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Columns struct{}
			Close   struct{}
			Next    struct {
				Dest moq.ParamIndexing
			}
			ColumnTypeDatabaseTypeName struct {
				Index moq.ParamIndexing
			}
		}
	}
	// MoqRowsColumnTypeDatabaseTypeName_mock isolates the mock interface of the
}

// RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_mock struct {
	Moq *MoqRowsColumnTypeDatabaseTypeName
}

// MoqRowsColumnTypeDatabaseTypeName_recorder isolates the recorder interface
// of the RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_recorder struct {
	Moq *MoqRowsColumnTypeDatabaseTypeName
}

// MoqRowsColumnTypeDatabaseTypeName_Columns_params holds the params of the
// RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Columns_params struct{}

// MoqRowsColumnTypeDatabaseTypeName_Columns_paramsKey holds the map key params
// of the RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Columns_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRowsColumnTypeDatabaseTypeName_Columns_resultsByParams contains the
// results for a given set of parameters for the RowsColumnTypeDatabaseTypeName
// type
type MoqRowsColumnTypeDatabaseTypeName_Columns_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRowsColumnTypeDatabaseTypeName_Columns_paramsKey]*MoqRowsColumnTypeDatabaseTypeName_Columns_results
}

// MoqRowsColumnTypeDatabaseTypeName_Columns_doFn defines the type of function
// needed when calling AndDo for the RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Columns_doFn func()

// MoqRowsColumnTypeDatabaseTypeName_Columns_doReturnFn defines the type of
// function needed when calling DoReturnResults for the
// RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Columns_doReturnFn func() []string

// MoqRowsColumnTypeDatabaseTypeName_Columns_results holds the results of the
// RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Columns_results struct {
	Params  MoqRowsColumnTypeDatabaseTypeName_Columns_params
	Results []struct {
		Values *struct {
			Result1 []string
		}
		Sequence   uint32
		DoFn       MoqRowsColumnTypeDatabaseTypeName_Columns_doFn
		DoReturnFn MoqRowsColumnTypeDatabaseTypeName_Columns_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder routes recorded
// function calls to the MoqRowsColumnTypeDatabaseTypeName moq
type MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder struct {
	Params    MoqRowsColumnTypeDatabaseTypeName_Columns_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRowsColumnTypeDatabaseTypeName_Columns_results
	Moq       *MoqRowsColumnTypeDatabaseTypeName
}

// MoqRowsColumnTypeDatabaseTypeName_Columns_anyParams isolates the any params
// functions of the RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Columns_anyParams struct {
	Recorder *MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder
}

// MoqRowsColumnTypeDatabaseTypeName_Close_params holds the params of the
// RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Close_params struct{}

// MoqRowsColumnTypeDatabaseTypeName_Close_paramsKey holds the map key params
// of the RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRowsColumnTypeDatabaseTypeName_Close_resultsByParams contains the results
// for a given set of parameters for the RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRowsColumnTypeDatabaseTypeName_Close_paramsKey]*MoqRowsColumnTypeDatabaseTypeName_Close_results
}

// MoqRowsColumnTypeDatabaseTypeName_Close_doFn defines the type of function
// needed when calling AndDo for the RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Close_doFn func()

// MoqRowsColumnTypeDatabaseTypeName_Close_doReturnFn defines the type of
// function needed when calling DoReturnResults for the
// RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Close_doReturnFn func() error

// MoqRowsColumnTypeDatabaseTypeName_Close_results holds the results of the
// RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Close_results struct {
	Params  MoqRowsColumnTypeDatabaseTypeName_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRowsColumnTypeDatabaseTypeName_Close_doFn
		DoReturnFn MoqRowsColumnTypeDatabaseTypeName_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder routes recorded function
// calls to the MoqRowsColumnTypeDatabaseTypeName moq
type MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder struct {
	Params    MoqRowsColumnTypeDatabaseTypeName_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRowsColumnTypeDatabaseTypeName_Close_results
	Moq       *MoqRowsColumnTypeDatabaseTypeName
}

// MoqRowsColumnTypeDatabaseTypeName_Close_anyParams isolates the any params
// functions of the RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Close_anyParams struct {
	Recorder *MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder
}

// MoqRowsColumnTypeDatabaseTypeName_Next_params holds the params of the
// RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Next_params struct{ Dest []driver.Value }

// MoqRowsColumnTypeDatabaseTypeName_Next_paramsKey holds the map key params of
// the RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Next_paramsKey struct {
	Params struct{}
	Hashes struct{ Dest hash.Hash }
}

// MoqRowsColumnTypeDatabaseTypeName_Next_resultsByParams contains the results
// for a given set of parameters for the RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Next_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRowsColumnTypeDatabaseTypeName_Next_paramsKey]*MoqRowsColumnTypeDatabaseTypeName_Next_results
}

// MoqRowsColumnTypeDatabaseTypeName_Next_doFn defines the type of function
// needed when calling AndDo for the RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Next_doFn func(dest []driver.Value)

// MoqRowsColumnTypeDatabaseTypeName_Next_doReturnFn defines the type of
// function needed when calling DoReturnResults for the
// RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Next_doReturnFn func(dest []driver.Value) error

// MoqRowsColumnTypeDatabaseTypeName_Next_results holds the results of the
// RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Next_results struct {
	Params  MoqRowsColumnTypeDatabaseTypeName_Next_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRowsColumnTypeDatabaseTypeName_Next_doFn
		DoReturnFn MoqRowsColumnTypeDatabaseTypeName_Next_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder routes recorded function
// calls to the MoqRowsColumnTypeDatabaseTypeName moq
type MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder struct {
	Params    MoqRowsColumnTypeDatabaseTypeName_Next_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRowsColumnTypeDatabaseTypeName_Next_results
	Moq       *MoqRowsColumnTypeDatabaseTypeName
}

// MoqRowsColumnTypeDatabaseTypeName_Next_anyParams isolates the any params
// functions of the RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_Next_anyParams struct {
	Recorder *MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder
}

// MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_params holds
// the params of the RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_params struct{ Index int }

// MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_paramsKey holds
// the map key params of the RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_paramsKey struct {
	Params struct{ Index int }
	Hashes struct{ Index hash.Hash }
}

// MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_resultsByParams
// contains the results for a given set of parameters for the
// RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_paramsKey]*MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_results
}

// MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_doFn defines
// the type of function needed when calling AndDo for the
// RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_doFn func(index int)

// MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_doReturnFn
// defines the type of function needed when calling DoReturnResults for the
// RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_doReturnFn func(index int) string

// MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_results holds
// the results of the RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_results struct {
	Params  MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_doFn
		DoReturnFn MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder
// routes recorded function calls to the MoqRowsColumnTypeDatabaseTypeName moq
type MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder struct {
	Params    MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_results
	Moq       *MoqRowsColumnTypeDatabaseTypeName
}

// MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_anyParams
// isolates the any params functions of the RowsColumnTypeDatabaseTypeName type
type MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_anyParams struct {
	Recorder *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder
}

// NewMoqRowsColumnTypeDatabaseTypeName creates a new moq of the
// RowsColumnTypeDatabaseTypeName type
func NewMoqRowsColumnTypeDatabaseTypeName(scene *moq.Scene, config *moq.Config) *MoqRowsColumnTypeDatabaseTypeName {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqRowsColumnTypeDatabaseTypeName{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqRowsColumnTypeDatabaseTypeName_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Columns struct{}
				Close   struct{}
				Next    struct {
					Dest moq.ParamIndexing
				}
				ColumnTypeDatabaseTypeName struct {
					Index moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Columns struct{}
			Close   struct{}
			Next    struct {
				Dest moq.ParamIndexing
			}
			ColumnTypeDatabaseTypeName struct {
				Index moq.ParamIndexing
			}
		}{
			Columns: struct{}{},
			Close:   struct{}{},
			Next: struct {
				Dest moq.ParamIndexing
			}{
				Dest: moq.ParamIndexByHash,
			},
			ColumnTypeDatabaseTypeName: struct {
				Index moq.ParamIndexing
			}{
				Index: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the RowsColumnTypeDatabaseTypeName
// type
func (m *MoqRowsColumnTypeDatabaseTypeName) Mock() *MoqRowsColumnTypeDatabaseTypeName_mock {
	return m.Moq
}

func (m *MoqRowsColumnTypeDatabaseTypeName_mock) Columns() (result1 []string) {
	m.Moq.Scene.T.Helper()
	params := MoqRowsColumnTypeDatabaseTypeName_Columns_params{}
	var results *MoqRowsColumnTypeDatabaseTypeName_Columns_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Columns {
		paramsKey := m.Moq.ParamsKey_Columns(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Columns(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Columns(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Columns(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRowsColumnTypeDatabaseTypeName_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqRowsColumnTypeDatabaseTypeName_Close_params{}
	var results *MoqRowsColumnTypeDatabaseTypeName_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRowsColumnTypeDatabaseTypeName_mock) Next(dest []driver.Value) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqRowsColumnTypeDatabaseTypeName_Next_params{
		Dest: dest,
	}
	var results *MoqRowsColumnTypeDatabaseTypeName_Next_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Next {
		paramsKey := m.Moq.ParamsKey_Next(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Next(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Next(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Next(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(dest)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(dest)
	}
	return
}

func (m *MoqRowsColumnTypeDatabaseTypeName_mock) ColumnTypeDatabaseTypeName(index int) (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_params{
		Index: index,
	}
	var results *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ColumnTypeDatabaseTypeName {
		paramsKey := m.Moq.ParamsKey_ColumnTypeDatabaseTypeName(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ColumnTypeDatabaseTypeName(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ColumnTypeDatabaseTypeName(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ColumnTypeDatabaseTypeName(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(index)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(index)
	}
	return
}

// OnCall returns the recorder implementation of the
// RowsColumnTypeDatabaseTypeName type
func (m *MoqRowsColumnTypeDatabaseTypeName) OnCall() *MoqRowsColumnTypeDatabaseTypeName_recorder {
	return &MoqRowsColumnTypeDatabaseTypeName_recorder{
		Moq: m,
	}
}

func (m *MoqRowsColumnTypeDatabaseTypeName_recorder) Columns() *MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder {
	return &MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder{
		Params:   MoqRowsColumnTypeDatabaseTypeName_Columns_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder) Any() *MoqRowsColumnTypeDatabaseTypeName_Columns_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Columns(r.Params))
		return nil
	}
	return &MoqRowsColumnTypeDatabaseTypeName_Columns_anyParams{Recorder: r}
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder) Seq() *MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Columns(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder) NoSeq() *MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Columns(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder) ReturnResults(result1 []string) *MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []string
		}
		Sequence   uint32
		DoFn       MoqRowsColumnTypeDatabaseTypeName_Columns_doFn
		DoReturnFn MoqRowsColumnTypeDatabaseTypeName_Columns_doReturnFn
	}{
		Values: &struct {
			Result1 []string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder) AndDo(fn MoqRowsColumnTypeDatabaseTypeName_Columns_doFn) *MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder) DoReturnResults(fn MoqRowsColumnTypeDatabaseTypeName_Columns_doReturnFn) *MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []string
		}
		Sequence   uint32
		DoFn       MoqRowsColumnTypeDatabaseTypeName_Columns_doFn
		DoReturnFn MoqRowsColumnTypeDatabaseTypeName_Columns_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRowsColumnTypeDatabaseTypeName_Columns_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Columns {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRowsColumnTypeDatabaseTypeName_Columns_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRowsColumnTypeDatabaseTypeName_Columns_paramsKey]*MoqRowsColumnTypeDatabaseTypeName_Columns_results{},
		}
		r.Moq.ResultsByParams_Columns = append(r.Moq.ResultsByParams_Columns, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Columns) {
			copy(r.Moq.ResultsByParams_Columns[insertAt+1:], r.Moq.ResultsByParams_Columns[insertAt:0])
			r.Moq.ResultsByParams_Columns[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Columns(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRowsColumnTypeDatabaseTypeName_Columns_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRowsColumnTypeDatabaseTypeName_Columns_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []string
				}
				Sequence   uint32
				DoFn       MoqRowsColumnTypeDatabaseTypeName_Columns_doFn
				DoReturnFn MoqRowsColumnTypeDatabaseTypeName_Columns_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRowsColumnTypeDatabaseTypeName) PrettyParams_Columns(params MoqRowsColumnTypeDatabaseTypeName_Columns_params) string {
	return fmt.Sprintf("Columns()")
}

func (m *MoqRowsColumnTypeDatabaseTypeName) ParamsKey_Columns(params MoqRowsColumnTypeDatabaseTypeName_Columns_params, anyParams uint64) MoqRowsColumnTypeDatabaseTypeName_Columns_paramsKey {
	m.Scene.T.Helper()
	return MoqRowsColumnTypeDatabaseTypeName_Columns_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRowsColumnTypeDatabaseTypeName_recorder) Close() *MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder {
	return &MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder{
		Params:   MoqRowsColumnTypeDatabaseTypeName_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder) Any() *MoqRowsColumnTypeDatabaseTypeName_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqRowsColumnTypeDatabaseTypeName_Close_anyParams{Recorder: r}
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder) Seq() *MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder) NoSeq() *MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder) ReturnResults(result1 error) *MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRowsColumnTypeDatabaseTypeName_Close_doFn
		DoReturnFn MoqRowsColumnTypeDatabaseTypeName_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder) AndDo(fn MoqRowsColumnTypeDatabaseTypeName_Close_doFn) *MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder) DoReturnResults(fn MoqRowsColumnTypeDatabaseTypeName_Close_doReturnFn) *MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRowsColumnTypeDatabaseTypeName_Close_doFn
		DoReturnFn MoqRowsColumnTypeDatabaseTypeName_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRowsColumnTypeDatabaseTypeName_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRowsColumnTypeDatabaseTypeName_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRowsColumnTypeDatabaseTypeName_Close_paramsKey]*MoqRowsColumnTypeDatabaseTypeName_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRowsColumnTypeDatabaseTypeName_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRowsColumnTypeDatabaseTypeName_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqRowsColumnTypeDatabaseTypeName_Close_doFn
				DoReturnFn MoqRowsColumnTypeDatabaseTypeName_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRowsColumnTypeDatabaseTypeName) PrettyParams_Close(params MoqRowsColumnTypeDatabaseTypeName_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqRowsColumnTypeDatabaseTypeName) ParamsKey_Close(params MoqRowsColumnTypeDatabaseTypeName_Close_params, anyParams uint64) MoqRowsColumnTypeDatabaseTypeName_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqRowsColumnTypeDatabaseTypeName_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRowsColumnTypeDatabaseTypeName_recorder) Next(dest []driver.Value) *MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder {
	return &MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder{
		Params: MoqRowsColumnTypeDatabaseTypeName_Next_params{
			Dest: dest,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder) Any() *MoqRowsColumnTypeDatabaseTypeName_Next_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	return &MoqRowsColumnTypeDatabaseTypeName_Next_anyParams{Recorder: r}
}

func (a *MoqRowsColumnTypeDatabaseTypeName_Next_anyParams) Dest() *MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder) Seq() *MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder) NoSeq() *MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder) ReturnResults(result1 error) *MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRowsColumnTypeDatabaseTypeName_Next_doFn
		DoReturnFn MoqRowsColumnTypeDatabaseTypeName_Next_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder) AndDo(fn MoqRowsColumnTypeDatabaseTypeName_Next_doFn) *MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder) DoReturnResults(fn MoqRowsColumnTypeDatabaseTypeName_Next_doReturnFn) *MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRowsColumnTypeDatabaseTypeName_Next_doFn
		DoReturnFn MoqRowsColumnTypeDatabaseTypeName_Next_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRowsColumnTypeDatabaseTypeName_Next_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Next {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRowsColumnTypeDatabaseTypeName_Next_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRowsColumnTypeDatabaseTypeName_Next_paramsKey]*MoqRowsColumnTypeDatabaseTypeName_Next_results{},
		}
		r.Moq.ResultsByParams_Next = append(r.Moq.ResultsByParams_Next, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Next) {
			copy(r.Moq.ResultsByParams_Next[insertAt+1:], r.Moq.ResultsByParams_Next[insertAt:0])
			r.Moq.ResultsByParams_Next[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Next(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRowsColumnTypeDatabaseTypeName_Next_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRowsColumnTypeDatabaseTypeName_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqRowsColumnTypeDatabaseTypeName_Next_doFn
				DoReturnFn MoqRowsColumnTypeDatabaseTypeName_Next_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRowsColumnTypeDatabaseTypeName) PrettyParams_Next(params MoqRowsColumnTypeDatabaseTypeName_Next_params) string {
	return fmt.Sprintf("Next(%#v)", params.Dest)
}

func (m *MoqRowsColumnTypeDatabaseTypeName) ParamsKey_Next(params MoqRowsColumnTypeDatabaseTypeName_Next_params, anyParams uint64) MoqRowsColumnTypeDatabaseTypeName_Next_paramsKey {
	m.Scene.T.Helper()
	var destUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Next.Dest == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The dest parameter of the Next function can't be indexed by value")
		}
		destUsedHash = hash.DeepHash(params.Dest)
	}
	return MoqRowsColumnTypeDatabaseTypeName_Next_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Dest hash.Hash }{
			Dest: destUsedHash,
		},
	}
}

func (m *MoqRowsColumnTypeDatabaseTypeName_recorder) ColumnTypeDatabaseTypeName(index int) *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder {
	return &MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder{
		Params: MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_params{
			Index: index,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder) Any() *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ColumnTypeDatabaseTypeName(r.Params))
		return nil
	}
	return &MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_anyParams{Recorder: r}
}

func (a *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_anyParams) Index() *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder) Seq() *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ColumnTypeDatabaseTypeName(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder) NoSeq() *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ColumnTypeDatabaseTypeName(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder) ReturnResults(result1 string) *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_doFn
		DoReturnFn MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder) AndDo(fn MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_doFn) *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder) DoReturnResults(fn MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_doReturnFn) *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_doFn
		DoReturnFn MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ColumnTypeDatabaseTypeName {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_paramsKey]*MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_results{},
		}
		r.Moq.ResultsByParams_ColumnTypeDatabaseTypeName = append(r.Moq.ResultsByParams_ColumnTypeDatabaseTypeName, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ColumnTypeDatabaseTypeName) {
			copy(r.Moq.ResultsByParams_ColumnTypeDatabaseTypeName[insertAt+1:], r.Moq.ResultsByParams_ColumnTypeDatabaseTypeName[insertAt:0])
			r.Moq.ResultsByParams_ColumnTypeDatabaseTypeName[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ColumnTypeDatabaseTypeName(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_doFn
				DoReturnFn MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRowsColumnTypeDatabaseTypeName) PrettyParams_ColumnTypeDatabaseTypeName(params MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_params) string {
	return fmt.Sprintf("ColumnTypeDatabaseTypeName(%#v)", params.Index)
}

func (m *MoqRowsColumnTypeDatabaseTypeName) ParamsKey_ColumnTypeDatabaseTypeName(params MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_params, anyParams uint64) MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_paramsKey {
	m.Scene.T.Helper()
	var indexUsed int
	var indexUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ColumnTypeDatabaseTypeName.Index == moq.ParamIndexByValue {
			indexUsed = params.Index
		} else {
			indexUsedHash = hash.DeepHash(params.Index)
		}
	}
	return MoqRowsColumnTypeDatabaseTypeName_ColumnTypeDatabaseTypeName_paramsKey{
		Params: struct{ Index int }{
			Index: indexUsed,
		},
		Hashes: struct{ Index hash.Hash }{
			Index: indexUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqRowsColumnTypeDatabaseTypeName) Reset() {
	m.ResultsByParams_Columns = nil
	m.ResultsByParams_Close = nil
	m.ResultsByParams_Next = nil
	m.ResultsByParams_ColumnTypeDatabaseTypeName = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqRowsColumnTypeDatabaseTypeName) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Columns {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Columns(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Next {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Next(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ColumnTypeDatabaseTypeName {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ColumnTypeDatabaseTypeName(results.Params))
			}
		}
	}
}
