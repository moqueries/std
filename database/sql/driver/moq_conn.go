// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package driver

import (
	"database/sql/driver"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that driver.Conn is mocked completely
var _ driver.Conn = (*MoqConn_mock)(nil)

// MoqConn holds the state of a moq of the Conn type
type MoqConn struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqConn_mock

	ResultsByParams_Prepare []MoqConn_Prepare_resultsByParams
	ResultsByParams_Close   []MoqConn_Close_resultsByParams
	ResultsByParams_Begin   []MoqConn_Begin_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Prepare struct {
				Query moq.ParamIndexing
			}
			Close struct{}
			Begin struct{}
		}
	}
}

// MoqConn_mock isolates the mock interface of the Conn type
type MoqConn_mock struct {
	Moq *MoqConn
}

// MoqConn_recorder isolates the recorder interface of the Conn type
type MoqConn_recorder struct {
	Moq *MoqConn
}

// MoqConn_Prepare_params holds the params of the Conn type
type MoqConn_Prepare_params struct{ Query string }

// MoqConn_Prepare_paramsKey holds the map key params of the Conn type
type MoqConn_Prepare_paramsKey struct {
	Params struct{ Query string }
	Hashes struct{ Query hash.Hash }
}

// MoqConn_Prepare_resultsByParams contains the results for a given set of
// parameters for the Conn type
type MoqConn_Prepare_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_Prepare_paramsKey]*MoqConn_Prepare_results
}

// MoqConn_Prepare_doFn defines the type of function needed when calling AndDo
// for the Conn type
type MoqConn_Prepare_doFn func(query string)

// MoqConn_Prepare_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Conn type
type MoqConn_Prepare_doReturnFn func(query string) (driver.Stmt, error)

// MoqConn_Prepare_results holds the results of the Conn type
type MoqConn_Prepare_results struct {
	Params  MoqConn_Prepare_params
	Results []struct {
		Values *struct {
			Result1 driver.Stmt
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConn_Prepare_doFn
		DoReturnFn MoqConn_Prepare_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_Prepare_fnRecorder routes recorded function calls to the MoqConn moq
type MoqConn_Prepare_fnRecorder struct {
	Params    MoqConn_Prepare_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_Prepare_results
	Moq       *MoqConn
}

// MoqConn_Prepare_anyParams isolates the any params functions of the Conn type
type MoqConn_Prepare_anyParams struct {
	Recorder *MoqConn_Prepare_fnRecorder
}

// MoqConn_Close_params holds the params of the Conn type
type MoqConn_Close_params struct{}

// MoqConn_Close_paramsKey holds the map key params of the Conn type
type MoqConn_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqConn_Close_resultsByParams contains the results for a given set of
// parameters for the Conn type
type MoqConn_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_Close_paramsKey]*MoqConn_Close_results
}

// MoqConn_Close_doFn defines the type of function needed when calling AndDo
// for the Conn type
type MoqConn_Close_doFn func()

// MoqConn_Close_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Conn type
type MoqConn_Close_doReturnFn func() error

// MoqConn_Close_results holds the results of the Conn type
type MoqConn_Close_results struct {
	Params  MoqConn_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_Close_doFn
		DoReturnFn MoqConn_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_Close_fnRecorder routes recorded function calls to the MoqConn moq
type MoqConn_Close_fnRecorder struct {
	Params    MoqConn_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_Close_results
	Moq       *MoqConn
}

// MoqConn_Close_anyParams isolates the any params functions of the Conn type
type MoqConn_Close_anyParams struct {
	Recorder *MoqConn_Close_fnRecorder
}

// MoqConn_Begin_params holds the params of the Conn type
type MoqConn_Begin_params struct{}

// MoqConn_Begin_paramsKey holds the map key params of the Conn type
type MoqConn_Begin_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqConn_Begin_resultsByParams contains the results for a given set of
// parameters for the Conn type
type MoqConn_Begin_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_Begin_paramsKey]*MoqConn_Begin_results
}

// MoqConn_Begin_doFn defines the type of function needed when calling AndDo
// for the Conn type
type MoqConn_Begin_doFn func()

// MoqConn_Begin_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Conn type
type MoqConn_Begin_doReturnFn func() (driver.Tx, error)

// MoqConn_Begin_results holds the results of the Conn type
type MoqConn_Begin_results struct {
	Params  MoqConn_Begin_params
	Results []struct {
		Values *struct {
			Result1 driver.Tx
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConn_Begin_doFn
		DoReturnFn MoqConn_Begin_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_Begin_fnRecorder routes recorded function calls to the MoqConn moq
type MoqConn_Begin_fnRecorder struct {
	Params    MoqConn_Begin_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_Begin_results
	Moq       *MoqConn
}

// MoqConn_Begin_anyParams isolates the any params functions of the Conn type
type MoqConn_Begin_anyParams struct {
	Recorder *MoqConn_Begin_fnRecorder
}

// NewMoqConn creates a new moq of the Conn type
func NewMoqConn(scene *moq.Scene, config *moq.Config) *MoqConn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqConn{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqConn_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Prepare struct {
					Query moq.ParamIndexing
				}
				Close struct{}
				Begin struct{}
			}
		}{ParameterIndexing: struct {
			Prepare struct {
				Query moq.ParamIndexing
			}
			Close struct{}
			Begin struct{}
		}{
			Prepare: struct {
				Query moq.ParamIndexing
			}{
				Query: moq.ParamIndexByValue,
			},
			Close: struct{}{},
			Begin: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Conn type
func (m *MoqConn) Mock() *MoqConn_mock { return m.Moq }

func (m *MoqConn_mock) Prepare(query string) (result1 driver.Stmt, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_Prepare_params{
		Query: query,
	}
	var results *MoqConn_Prepare_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Prepare {
		paramsKey := m.Moq.ParamsKey_Prepare(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Prepare(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Prepare(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Prepare(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(query)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(query)
	}
	return
}

func (m *MoqConn_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_Close_params{}
	var results *MoqConn_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqConn_mock) Begin() (result1 driver.Tx, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_Begin_params{}
	var results *MoqConn_Begin_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Begin {
		paramsKey := m.Moq.ParamsKey_Begin(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Begin(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Begin(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Begin(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Conn type
func (m *MoqConn) OnCall() *MoqConn_recorder {
	return &MoqConn_recorder{
		Moq: m,
	}
}

func (m *MoqConn_recorder) Prepare(query string) *MoqConn_Prepare_fnRecorder {
	return &MoqConn_Prepare_fnRecorder{
		Params: MoqConn_Prepare_params{
			Query: query,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_Prepare_fnRecorder) Any() *MoqConn_Prepare_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Prepare(r.Params))
		return nil
	}
	return &MoqConn_Prepare_anyParams{Recorder: r}
}

func (a *MoqConn_Prepare_anyParams) Query() *MoqConn_Prepare_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqConn_Prepare_fnRecorder) Seq() *MoqConn_Prepare_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Prepare(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_Prepare_fnRecorder) NoSeq() *MoqConn_Prepare_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Prepare(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_Prepare_fnRecorder) ReturnResults(result1 driver.Stmt, result2 error) *MoqConn_Prepare_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 driver.Stmt
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConn_Prepare_doFn
		DoReturnFn MoqConn_Prepare_doReturnFn
	}{
		Values: &struct {
			Result1 driver.Stmt
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_Prepare_fnRecorder) AndDo(fn MoqConn_Prepare_doFn) *MoqConn_Prepare_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_Prepare_fnRecorder) DoReturnResults(fn MoqConn_Prepare_doReturnFn) *MoqConn_Prepare_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 driver.Stmt
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConn_Prepare_doFn
		DoReturnFn MoqConn_Prepare_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_Prepare_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_Prepare_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Prepare {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_Prepare_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_Prepare_paramsKey]*MoqConn_Prepare_results{},
		}
		r.Moq.ResultsByParams_Prepare = append(r.Moq.ResultsByParams_Prepare, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Prepare) {
			copy(r.Moq.ResultsByParams_Prepare[insertAt+1:], r.Moq.ResultsByParams_Prepare[insertAt:0])
			r.Moq.ResultsByParams_Prepare[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Prepare(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_Prepare_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_Prepare_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_Prepare_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 driver.Stmt
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqConn_Prepare_doFn
				DoReturnFn MoqConn_Prepare_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn) PrettyParams_Prepare(params MoqConn_Prepare_params) string {
	return fmt.Sprintf("Prepare(%#v)", params.Query)
}

func (m *MoqConn) ParamsKey_Prepare(params MoqConn_Prepare_params, anyParams uint64) MoqConn_Prepare_paramsKey {
	m.Scene.T.Helper()
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Prepare.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	return MoqConn_Prepare_paramsKey{
		Params: struct{ Query string }{
			Query: queryUsed,
		},
		Hashes: struct{ Query hash.Hash }{
			Query: queryUsedHash,
		},
	}
}

func (m *MoqConn_recorder) Close() *MoqConn_Close_fnRecorder {
	return &MoqConn_Close_fnRecorder{
		Params:   MoqConn_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_Close_fnRecorder) Any() *MoqConn_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqConn_Close_anyParams{Recorder: r}
}

func (r *MoqConn_Close_fnRecorder) Seq() *MoqConn_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_Close_fnRecorder) NoSeq() *MoqConn_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_Close_fnRecorder) ReturnResults(result1 error) *MoqConn_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_Close_doFn
		DoReturnFn MoqConn_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_Close_fnRecorder) AndDo(fn MoqConn_Close_doFn) *MoqConn_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_Close_fnRecorder) DoReturnResults(fn MoqConn_Close_doReturnFn) *MoqConn_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_Close_doFn
		DoReturnFn MoqConn_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_Close_paramsKey]*MoqConn_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqConn_Close_doFn
				DoReturnFn MoqConn_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn) PrettyParams_Close(params MoqConn_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqConn) ParamsKey_Close(params MoqConn_Close_params, anyParams uint64) MoqConn_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqConn_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqConn_recorder) Begin() *MoqConn_Begin_fnRecorder {
	return &MoqConn_Begin_fnRecorder{
		Params:   MoqConn_Begin_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_Begin_fnRecorder) Any() *MoqConn_Begin_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Begin(r.Params))
		return nil
	}
	return &MoqConn_Begin_anyParams{Recorder: r}
}

func (r *MoqConn_Begin_fnRecorder) Seq() *MoqConn_Begin_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Begin(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_Begin_fnRecorder) NoSeq() *MoqConn_Begin_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Begin(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_Begin_fnRecorder) ReturnResults(result1 driver.Tx, result2 error) *MoqConn_Begin_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 driver.Tx
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConn_Begin_doFn
		DoReturnFn MoqConn_Begin_doReturnFn
	}{
		Values: &struct {
			Result1 driver.Tx
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_Begin_fnRecorder) AndDo(fn MoqConn_Begin_doFn) *MoqConn_Begin_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_Begin_fnRecorder) DoReturnResults(fn MoqConn_Begin_doReturnFn) *MoqConn_Begin_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 driver.Tx
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConn_Begin_doFn
		DoReturnFn MoqConn_Begin_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_Begin_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_Begin_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Begin {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_Begin_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_Begin_paramsKey]*MoqConn_Begin_results{},
		}
		r.Moq.ResultsByParams_Begin = append(r.Moq.ResultsByParams_Begin, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Begin) {
			copy(r.Moq.ResultsByParams_Begin[insertAt+1:], r.Moq.ResultsByParams_Begin[insertAt:0])
			r.Moq.ResultsByParams_Begin[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Begin(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_Begin_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_Begin_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_Begin_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 driver.Tx
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqConn_Begin_doFn
				DoReturnFn MoqConn_Begin_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn) PrettyParams_Begin(params MoqConn_Begin_params) string {
	return fmt.Sprintf("Begin()")
}

func (m *MoqConn) ParamsKey_Begin(params MoqConn_Begin_params, anyParams uint64) MoqConn_Begin_paramsKey {
	m.Scene.T.Helper()
	return MoqConn_Begin_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqConn) Reset() {
	m.ResultsByParams_Prepare = nil
	m.ResultsByParams_Close = nil
	m.ResultsByParams_Begin = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqConn) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Prepare {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Prepare(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Begin {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Begin(results.Params))
			}
		}
	}
}
