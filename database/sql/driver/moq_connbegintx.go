// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package driver

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that driver.ConnBeginTx is mocked
// completely
var _ driver.ConnBeginTx = (*MoqConnBeginTx_mock)(nil)

// MoqConnBeginTx holds the state of a moq of the ConnBeginTx type
type MoqConnBeginTx struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqConnBeginTx_mock

	ResultsByParams_BeginTx []MoqConnBeginTx_BeginTx_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			BeginTx struct {
				Ctx  moq.ParamIndexing
				Opts moq.ParamIndexing
			}
		}
	}
	// MoqConnBeginTx_mock isolates the mock interface of the ConnBeginTx type
}

type MoqConnBeginTx_mock struct {
	Moq *MoqConnBeginTx
}

// MoqConnBeginTx_recorder isolates the recorder interface of the ConnBeginTx
// type
type MoqConnBeginTx_recorder struct {
	Moq *MoqConnBeginTx
}

// MoqConnBeginTx_BeginTx_params holds the params of the ConnBeginTx type
type MoqConnBeginTx_BeginTx_params struct {
	Ctx  context.Context
	Opts driver.TxOptions
}

// MoqConnBeginTx_BeginTx_paramsKey holds the map key params of the ConnBeginTx
// type
type MoqConnBeginTx_BeginTx_paramsKey struct {
	Params struct {
		Ctx  context.Context
		Opts driver.TxOptions
	}
	Hashes struct {
		Ctx  hash.Hash
		Opts hash.Hash
	}
}

// MoqConnBeginTx_BeginTx_resultsByParams contains the results for a given set
// of parameters for the ConnBeginTx type
type MoqConnBeginTx_BeginTx_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConnBeginTx_BeginTx_paramsKey]*MoqConnBeginTx_BeginTx_results
}

// MoqConnBeginTx_BeginTx_doFn defines the type of function needed when calling
// AndDo for the ConnBeginTx type
type MoqConnBeginTx_BeginTx_doFn func(ctx context.Context, opts driver.TxOptions)

// MoqConnBeginTx_BeginTx_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ConnBeginTx type
type MoqConnBeginTx_BeginTx_doReturnFn func(ctx context.Context, opts driver.TxOptions) (driver.Tx, error)

// MoqConnBeginTx_BeginTx_results holds the results of the ConnBeginTx type
type MoqConnBeginTx_BeginTx_results struct {
	Params  MoqConnBeginTx_BeginTx_params
	Results []struct {
		Values *struct {
			Result1 driver.Tx
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConnBeginTx_BeginTx_doFn
		DoReturnFn MoqConnBeginTx_BeginTx_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConnBeginTx_BeginTx_fnRecorder routes recorded function calls to the
// MoqConnBeginTx moq
type MoqConnBeginTx_BeginTx_fnRecorder struct {
	Params    MoqConnBeginTx_BeginTx_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConnBeginTx_BeginTx_results
	Moq       *MoqConnBeginTx
}

// MoqConnBeginTx_BeginTx_anyParams isolates the any params functions of the
// ConnBeginTx type
type MoqConnBeginTx_BeginTx_anyParams struct {
	Recorder *MoqConnBeginTx_BeginTx_fnRecorder
}

// NewMoqConnBeginTx creates a new moq of the ConnBeginTx type
func NewMoqConnBeginTx(scene *moq.Scene, config *moq.Config) *MoqConnBeginTx {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqConnBeginTx{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqConnBeginTx_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				BeginTx struct {
					Ctx  moq.ParamIndexing
					Opts moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			BeginTx struct {
				Ctx  moq.ParamIndexing
				Opts moq.ParamIndexing
			}
		}{
			BeginTx: struct {
				Ctx  moq.ParamIndexing
				Opts moq.ParamIndexing
			}{
				Ctx:  moq.ParamIndexByHash,
				Opts: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the ConnBeginTx type
func (m *MoqConnBeginTx) Mock() *MoqConnBeginTx_mock { return m.Moq }

func (m *MoqConnBeginTx_mock) BeginTx(ctx context.Context, opts driver.TxOptions) (result1 driver.Tx, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqConnBeginTx_BeginTx_params{
		Ctx:  ctx,
		Opts: opts,
	}
	var results *MoqConnBeginTx_BeginTx_results
	for _, resultsByParams := range m.Moq.ResultsByParams_BeginTx {
		paramsKey := m.Moq.ParamsKey_BeginTx(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_BeginTx(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_BeginTx(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_BeginTx(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, opts)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(ctx, opts)
	}
	return
}

// OnCall returns the recorder implementation of the ConnBeginTx type
func (m *MoqConnBeginTx) OnCall() *MoqConnBeginTx_recorder {
	return &MoqConnBeginTx_recorder{
		Moq: m,
	}
}

func (m *MoqConnBeginTx_recorder) BeginTx(ctx context.Context, opts driver.TxOptions) *MoqConnBeginTx_BeginTx_fnRecorder {
	return &MoqConnBeginTx_BeginTx_fnRecorder{
		Params: MoqConnBeginTx_BeginTx_params{
			Ctx:  ctx,
			Opts: opts,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConnBeginTx_BeginTx_fnRecorder) Any() *MoqConnBeginTx_BeginTx_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BeginTx(r.Params))
		return nil
	}
	return &MoqConnBeginTx_BeginTx_anyParams{Recorder: r}
}

func (a *MoqConnBeginTx_BeginTx_anyParams) Ctx() *MoqConnBeginTx_BeginTx_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqConnBeginTx_BeginTx_anyParams) Opts() *MoqConnBeginTx_BeginTx_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqConnBeginTx_BeginTx_fnRecorder) Seq() *MoqConnBeginTx_BeginTx_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BeginTx(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConnBeginTx_BeginTx_fnRecorder) NoSeq() *MoqConnBeginTx_BeginTx_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BeginTx(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConnBeginTx_BeginTx_fnRecorder) ReturnResults(result1 driver.Tx, result2 error) *MoqConnBeginTx_BeginTx_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 driver.Tx
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConnBeginTx_BeginTx_doFn
		DoReturnFn MoqConnBeginTx_BeginTx_doReturnFn
	}{
		Values: &struct {
			Result1 driver.Tx
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConnBeginTx_BeginTx_fnRecorder) AndDo(fn MoqConnBeginTx_BeginTx_doFn) *MoqConnBeginTx_BeginTx_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConnBeginTx_BeginTx_fnRecorder) DoReturnResults(fn MoqConnBeginTx_BeginTx_doReturnFn) *MoqConnBeginTx_BeginTx_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 driver.Tx
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConnBeginTx_BeginTx_doFn
		DoReturnFn MoqConnBeginTx_BeginTx_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConnBeginTx_BeginTx_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConnBeginTx_BeginTx_resultsByParams
	for n, res := range r.Moq.ResultsByParams_BeginTx {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConnBeginTx_BeginTx_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConnBeginTx_BeginTx_paramsKey]*MoqConnBeginTx_BeginTx_results{},
		}
		r.Moq.ResultsByParams_BeginTx = append(r.Moq.ResultsByParams_BeginTx, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_BeginTx) {
			copy(r.Moq.ResultsByParams_BeginTx[insertAt+1:], r.Moq.ResultsByParams_BeginTx[insertAt:0])
			r.Moq.ResultsByParams_BeginTx[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_BeginTx(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConnBeginTx_BeginTx_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConnBeginTx_BeginTx_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConnBeginTx_BeginTx_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 driver.Tx
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqConnBeginTx_BeginTx_doFn
				DoReturnFn MoqConnBeginTx_BeginTx_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConnBeginTx) PrettyParams_BeginTx(params MoqConnBeginTx_BeginTx_params) string {
	return fmt.Sprintf("BeginTx(%#v, %#v)", params.Ctx, params.Opts)
}

func (m *MoqConnBeginTx) ParamsKey_BeginTx(params MoqConnBeginTx_BeginTx_params, anyParams uint64) MoqConnBeginTx_BeginTx_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.BeginTx.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var optsUsed driver.TxOptions
	var optsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.BeginTx.Opts == moq.ParamIndexByValue {
			optsUsed = params.Opts
		} else {
			optsUsedHash = hash.DeepHash(params.Opts)
		}
	}
	return MoqConnBeginTx_BeginTx_paramsKey{
		Params: struct {
			Ctx  context.Context
			Opts driver.TxOptions
		}{
			Ctx:  ctxUsed,
			Opts: optsUsed,
		},
		Hashes: struct {
			Ctx  hash.Hash
			Opts hash.Hash
		}{
			Ctx:  ctxUsedHash,
			Opts: optsUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqConnBeginTx) Reset() { m.ResultsByParams_BeginTx = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqConnBeginTx) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_BeginTx {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_BeginTx(results.Params))
			}
		}
	}
}
