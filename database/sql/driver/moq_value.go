// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package driver

import (
	"database/sql/driver"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that driver.Value is mocked completely
var _ driver.Value = (*MoqValue_mock)(nil)

// MoqValue holds the state of a moq of the Value type
type MoqValue struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqValue_mock

	Runtime struct {
		ParameterIndexing struct{}
	}
}

// MoqValue_mock isolates the mock interface of the Value type
type MoqValue_mock struct {
	Moq *MoqValue
}

// MoqValue_recorder isolates the recorder interface of the Value type
type MoqValue_recorder struct {
	Moq *MoqValue
}

// NewMoqValue creates a new moq of the Value type
func NewMoqValue(scene *moq.Scene, config *moq.Config) *MoqValue {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqValue{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqValue_mock{},

		Runtime: struct {
			ParameterIndexing struct{}
		}{ParameterIndexing: struct{}{}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Value type
func (m *MoqValue) Mock() *MoqValue_mock { return m.Moq }

// OnCall returns the recorder implementation of the Value type
func (m *MoqValue) OnCall() *MoqValue_recorder {
	return &MoqValue_recorder{
		Moq: m,
	}
}

// Reset resets the state of the moq
func (m *MoqValue) Reset() {}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqValue) AssertExpectationsMet() { m.Scene.T.Helper() }
