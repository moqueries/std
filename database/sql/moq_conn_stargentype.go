// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package sql

import (
	"context"
	"database/sql"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that sql.Conn_starGenType is mocked
// completely
var _ Conn_starGenType = (*MoqConn_starGenType_mock)(nil)

// Conn_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Conn_starGenType interface {
	PingContext(ctx context.Context) error
	ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error)
	QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)
	QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row
	PrepareContext(ctx context.Context, query string) (*sql.Stmt, error)
	Raw(f func(driverConn interface{}) error) (err error)
	BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error)
	Close() error
}

// MoqConn_starGenType holds the state of a moq of the Conn_starGenType type
type MoqConn_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqConn_starGenType_mock

	ResultsByParams_PingContext     []MoqConn_starGenType_PingContext_resultsByParams
	ResultsByParams_ExecContext     []MoqConn_starGenType_ExecContext_resultsByParams
	ResultsByParams_QueryContext    []MoqConn_starGenType_QueryContext_resultsByParams
	ResultsByParams_QueryRowContext []MoqConn_starGenType_QueryRowContext_resultsByParams
	ResultsByParams_PrepareContext  []MoqConn_starGenType_PrepareContext_resultsByParams
	ResultsByParams_Raw             []MoqConn_starGenType_Raw_resultsByParams
	ResultsByParams_BeginTx         []MoqConn_starGenType_BeginTx_resultsByParams
	ResultsByParams_Close           []MoqConn_starGenType_Close_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			PingContext struct {
				Ctx moq.ParamIndexing
			}
			ExecContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			QueryContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			QueryRowContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			PrepareContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
			}
			Raw struct {
				F moq.ParamIndexing
			}
			BeginTx struct {
				Ctx  moq.ParamIndexing
				Opts moq.ParamIndexing
			}
			Close struct{}
		}
	}
}

// MoqConn_starGenType_mock isolates the mock interface of the Conn_starGenType
// type
type MoqConn_starGenType_mock struct {
	Moq *MoqConn_starGenType
}

// MoqConn_starGenType_recorder isolates the recorder interface of the
// Conn_starGenType type
type MoqConn_starGenType_recorder struct {
	Moq *MoqConn_starGenType
}

// MoqConn_starGenType_PingContext_params holds the params of the
// Conn_starGenType type
type MoqConn_starGenType_PingContext_params struct{ Ctx context.Context }

// MoqConn_starGenType_PingContext_paramsKey holds the map key params of the
// Conn_starGenType type
type MoqConn_starGenType_PingContext_paramsKey struct {
	Params struct{ Ctx context.Context }
	Hashes struct{ Ctx hash.Hash }
}

// MoqConn_starGenType_PingContext_resultsByParams contains the results for a
// given set of parameters for the Conn_starGenType type
type MoqConn_starGenType_PingContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_starGenType_PingContext_paramsKey]*MoqConn_starGenType_PingContext_results
}

// MoqConn_starGenType_PingContext_doFn defines the type of function needed
// when calling AndDo for the Conn_starGenType type
type MoqConn_starGenType_PingContext_doFn func(ctx context.Context)

// MoqConn_starGenType_PingContext_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Conn_starGenType type
type MoqConn_starGenType_PingContext_doReturnFn func(ctx context.Context) error

// MoqConn_starGenType_PingContext_results holds the results of the
// Conn_starGenType type
type MoqConn_starGenType_PingContext_results struct {
	Params  MoqConn_starGenType_PingContext_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_PingContext_doFn
		DoReturnFn MoqConn_starGenType_PingContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_starGenType_PingContext_fnRecorder routes recorded function calls to
// the MoqConn_starGenType moq
type MoqConn_starGenType_PingContext_fnRecorder struct {
	Params    MoqConn_starGenType_PingContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_starGenType_PingContext_results
	Moq       *MoqConn_starGenType
}

// MoqConn_starGenType_PingContext_anyParams isolates the any params functions
// of the Conn_starGenType type
type MoqConn_starGenType_PingContext_anyParams struct {
	Recorder *MoqConn_starGenType_PingContext_fnRecorder
}

// MoqConn_starGenType_ExecContext_params holds the params of the
// Conn_starGenType type
type MoqConn_starGenType_ExecContext_params struct {
	Ctx   context.Context
	Query string
	Args  []interface{}
}

// MoqConn_starGenType_ExecContext_paramsKey holds the map key params of the
// Conn_starGenType type
type MoqConn_starGenType_ExecContext_paramsKey struct {
	Params struct {
		Ctx   context.Context
		Query string
	}
	Hashes struct {
		Ctx   hash.Hash
		Query hash.Hash
		Args  hash.Hash
	}
}

// MoqConn_starGenType_ExecContext_resultsByParams contains the results for a
// given set of parameters for the Conn_starGenType type
type MoqConn_starGenType_ExecContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_starGenType_ExecContext_paramsKey]*MoqConn_starGenType_ExecContext_results
}

// MoqConn_starGenType_ExecContext_doFn defines the type of function needed
// when calling AndDo for the Conn_starGenType type
type MoqConn_starGenType_ExecContext_doFn func(ctx context.Context, query string, args ...interface{})

// MoqConn_starGenType_ExecContext_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Conn_starGenType type
type MoqConn_starGenType_ExecContext_doReturnFn func(ctx context.Context, query string, args ...interface{}) (sql.Result, error)

// MoqConn_starGenType_ExecContext_results holds the results of the
// Conn_starGenType type
type MoqConn_starGenType_ExecContext_results struct {
	Params  MoqConn_starGenType_ExecContext_params
	Results []struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_ExecContext_doFn
		DoReturnFn MoqConn_starGenType_ExecContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_starGenType_ExecContext_fnRecorder routes recorded function calls to
// the MoqConn_starGenType moq
type MoqConn_starGenType_ExecContext_fnRecorder struct {
	Params    MoqConn_starGenType_ExecContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_starGenType_ExecContext_results
	Moq       *MoqConn_starGenType
}

// MoqConn_starGenType_ExecContext_anyParams isolates the any params functions
// of the Conn_starGenType type
type MoqConn_starGenType_ExecContext_anyParams struct {
	Recorder *MoqConn_starGenType_ExecContext_fnRecorder
}

// MoqConn_starGenType_QueryContext_params holds the params of the
// Conn_starGenType type
type MoqConn_starGenType_QueryContext_params struct {
	Ctx   context.Context
	Query string
	Args  []interface{}
}

// MoqConn_starGenType_QueryContext_paramsKey holds the map key params of the
// Conn_starGenType type
type MoqConn_starGenType_QueryContext_paramsKey struct {
	Params struct {
		Ctx   context.Context
		Query string
	}
	Hashes struct {
		Ctx   hash.Hash
		Query hash.Hash
		Args  hash.Hash
	}
}

// MoqConn_starGenType_QueryContext_resultsByParams contains the results for a
// given set of parameters for the Conn_starGenType type
type MoqConn_starGenType_QueryContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_starGenType_QueryContext_paramsKey]*MoqConn_starGenType_QueryContext_results
}

// MoqConn_starGenType_QueryContext_doFn defines the type of function needed
// when calling AndDo for the Conn_starGenType type
type MoqConn_starGenType_QueryContext_doFn func(ctx context.Context, query string, args ...interface{})

// MoqConn_starGenType_QueryContext_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Conn_starGenType type
type MoqConn_starGenType_QueryContext_doReturnFn func(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)

// MoqConn_starGenType_QueryContext_results holds the results of the
// Conn_starGenType type
type MoqConn_starGenType_QueryContext_results struct {
	Params  MoqConn_starGenType_QueryContext_params
	Results []struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_QueryContext_doFn
		DoReturnFn MoqConn_starGenType_QueryContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_starGenType_QueryContext_fnRecorder routes recorded function calls
// to the MoqConn_starGenType moq
type MoqConn_starGenType_QueryContext_fnRecorder struct {
	Params    MoqConn_starGenType_QueryContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_starGenType_QueryContext_results
	Moq       *MoqConn_starGenType
}

// MoqConn_starGenType_QueryContext_anyParams isolates the any params functions
// of the Conn_starGenType type
type MoqConn_starGenType_QueryContext_anyParams struct {
	Recorder *MoqConn_starGenType_QueryContext_fnRecorder
}

// MoqConn_starGenType_QueryRowContext_params holds the params of the
// Conn_starGenType type
type MoqConn_starGenType_QueryRowContext_params struct {
	Ctx   context.Context
	Query string
	Args  []interface{}
}

// MoqConn_starGenType_QueryRowContext_paramsKey holds the map key params of
// the Conn_starGenType type
type MoqConn_starGenType_QueryRowContext_paramsKey struct {
	Params struct {
		Ctx   context.Context
		Query string
	}
	Hashes struct {
		Ctx   hash.Hash
		Query hash.Hash
		Args  hash.Hash
	}
}

// MoqConn_starGenType_QueryRowContext_resultsByParams contains the results for
// a given set of parameters for the Conn_starGenType type
type MoqConn_starGenType_QueryRowContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_starGenType_QueryRowContext_paramsKey]*MoqConn_starGenType_QueryRowContext_results
}

// MoqConn_starGenType_QueryRowContext_doFn defines the type of function needed
// when calling AndDo for the Conn_starGenType type
type MoqConn_starGenType_QueryRowContext_doFn func(ctx context.Context, query string, args ...interface{})

// MoqConn_starGenType_QueryRowContext_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Conn_starGenType type
type MoqConn_starGenType_QueryRowContext_doReturnFn func(ctx context.Context, query string, args ...interface{}) *sql.Row

// MoqConn_starGenType_QueryRowContext_results holds the results of the
// Conn_starGenType type
type MoqConn_starGenType_QueryRowContext_results struct {
	Params  MoqConn_starGenType_QueryRowContext_params
	Results []struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_QueryRowContext_doFn
		DoReturnFn MoqConn_starGenType_QueryRowContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_starGenType_QueryRowContext_fnRecorder routes recorded function
// calls to the MoqConn_starGenType moq
type MoqConn_starGenType_QueryRowContext_fnRecorder struct {
	Params    MoqConn_starGenType_QueryRowContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_starGenType_QueryRowContext_results
	Moq       *MoqConn_starGenType
}

// MoqConn_starGenType_QueryRowContext_anyParams isolates the any params
// functions of the Conn_starGenType type
type MoqConn_starGenType_QueryRowContext_anyParams struct {
	Recorder *MoqConn_starGenType_QueryRowContext_fnRecorder
}

// MoqConn_starGenType_PrepareContext_params holds the params of the
// Conn_starGenType type
type MoqConn_starGenType_PrepareContext_params struct {
	Ctx   context.Context
	Query string
}

// MoqConn_starGenType_PrepareContext_paramsKey holds the map key params of the
// Conn_starGenType type
type MoqConn_starGenType_PrepareContext_paramsKey struct {
	Params struct {
		Ctx   context.Context
		Query string
	}
	Hashes struct {
		Ctx   hash.Hash
		Query hash.Hash
	}
}

// MoqConn_starGenType_PrepareContext_resultsByParams contains the results for
// a given set of parameters for the Conn_starGenType type
type MoqConn_starGenType_PrepareContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_starGenType_PrepareContext_paramsKey]*MoqConn_starGenType_PrepareContext_results
}

// MoqConn_starGenType_PrepareContext_doFn defines the type of function needed
// when calling AndDo for the Conn_starGenType type
type MoqConn_starGenType_PrepareContext_doFn func(ctx context.Context, query string)

// MoqConn_starGenType_PrepareContext_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Conn_starGenType type
type MoqConn_starGenType_PrepareContext_doReturnFn func(ctx context.Context, query string) (*sql.Stmt, error)

// MoqConn_starGenType_PrepareContext_results holds the results of the
// Conn_starGenType type
type MoqConn_starGenType_PrepareContext_results struct {
	Params  MoqConn_starGenType_PrepareContext_params
	Results []struct {
		Values *struct {
			Result1 *sql.Stmt
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_PrepareContext_doFn
		DoReturnFn MoqConn_starGenType_PrepareContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_starGenType_PrepareContext_fnRecorder routes recorded function calls
// to the MoqConn_starGenType moq
type MoqConn_starGenType_PrepareContext_fnRecorder struct {
	Params    MoqConn_starGenType_PrepareContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_starGenType_PrepareContext_results
	Moq       *MoqConn_starGenType
}

// MoqConn_starGenType_PrepareContext_anyParams isolates the any params
// functions of the Conn_starGenType type
type MoqConn_starGenType_PrepareContext_anyParams struct {
	Recorder *MoqConn_starGenType_PrepareContext_fnRecorder
}

// MoqConn_starGenType_Raw_params holds the params of the Conn_starGenType type
type MoqConn_starGenType_Raw_params struct {
	F func(driverConn interface{}) error
}

// MoqConn_starGenType_Raw_paramsKey holds the map key params of the
// Conn_starGenType type
type MoqConn_starGenType_Raw_paramsKey struct {
	Params struct{}
	Hashes struct{ F hash.Hash }
}

// MoqConn_starGenType_Raw_resultsByParams contains the results for a given set
// of parameters for the Conn_starGenType type
type MoqConn_starGenType_Raw_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_starGenType_Raw_paramsKey]*MoqConn_starGenType_Raw_results
}

// MoqConn_starGenType_Raw_doFn defines the type of function needed when
// calling AndDo for the Conn_starGenType type
type MoqConn_starGenType_Raw_doFn func(f func(driverConn interface{}) error)

// MoqConn_starGenType_Raw_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Conn_starGenType type
type MoqConn_starGenType_Raw_doReturnFn func(f func(driverConn interface{}) error) (err error)

// MoqConn_starGenType_Raw_results holds the results of the Conn_starGenType
// type
type MoqConn_starGenType_Raw_results struct {
	Params  MoqConn_starGenType_Raw_params
	Results []struct {
		Values     *struct{ Err error }
		Sequence   uint32
		DoFn       MoqConn_starGenType_Raw_doFn
		DoReturnFn MoqConn_starGenType_Raw_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_starGenType_Raw_fnRecorder routes recorded function calls to the
// MoqConn_starGenType moq
type MoqConn_starGenType_Raw_fnRecorder struct {
	Params    MoqConn_starGenType_Raw_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_starGenType_Raw_results
	Moq       *MoqConn_starGenType
}

// MoqConn_starGenType_Raw_anyParams isolates the any params functions of the
// Conn_starGenType type
type MoqConn_starGenType_Raw_anyParams struct {
	Recorder *MoqConn_starGenType_Raw_fnRecorder
}

// MoqConn_starGenType_BeginTx_params holds the params of the Conn_starGenType
// type
type MoqConn_starGenType_BeginTx_params struct {
	Ctx  context.Context
	Opts *sql.TxOptions
}

// MoqConn_starGenType_BeginTx_paramsKey holds the map key params of the
// Conn_starGenType type
type MoqConn_starGenType_BeginTx_paramsKey struct {
	Params struct {
		Ctx  context.Context
		Opts *sql.TxOptions
	}
	Hashes struct {
		Ctx  hash.Hash
		Opts hash.Hash
	}
}

// MoqConn_starGenType_BeginTx_resultsByParams contains the results for a given
// set of parameters for the Conn_starGenType type
type MoqConn_starGenType_BeginTx_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_starGenType_BeginTx_paramsKey]*MoqConn_starGenType_BeginTx_results
}

// MoqConn_starGenType_BeginTx_doFn defines the type of function needed when
// calling AndDo for the Conn_starGenType type
type MoqConn_starGenType_BeginTx_doFn func(ctx context.Context, opts *sql.TxOptions)

// MoqConn_starGenType_BeginTx_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Conn_starGenType type
type MoqConn_starGenType_BeginTx_doReturnFn func(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error)

// MoqConn_starGenType_BeginTx_results holds the results of the
// Conn_starGenType type
type MoqConn_starGenType_BeginTx_results struct {
	Params  MoqConn_starGenType_BeginTx_params
	Results []struct {
		Values *struct {
			Result1 *sql.Tx
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_BeginTx_doFn
		DoReturnFn MoqConn_starGenType_BeginTx_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_starGenType_BeginTx_fnRecorder routes recorded function calls to the
// MoqConn_starGenType moq
type MoqConn_starGenType_BeginTx_fnRecorder struct {
	Params    MoqConn_starGenType_BeginTx_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_starGenType_BeginTx_results
	Moq       *MoqConn_starGenType
}

// MoqConn_starGenType_BeginTx_anyParams isolates the any params functions of
// the Conn_starGenType type
type MoqConn_starGenType_BeginTx_anyParams struct {
	Recorder *MoqConn_starGenType_BeginTx_fnRecorder
}

// MoqConn_starGenType_Close_params holds the params of the Conn_starGenType
// type
type MoqConn_starGenType_Close_params struct{}

// MoqConn_starGenType_Close_paramsKey holds the map key params of the
// Conn_starGenType type
type MoqConn_starGenType_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqConn_starGenType_Close_resultsByParams contains the results for a given
// set of parameters for the Conn_starGenType type
type MoqConn_starGenType_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_starGenType_Close_paramsKey]*MoqConn_starGenType_Close_results
}

// MoqConn_starGenType_Close_doFn defines the type of function needed when
// calling AndDo for the Conn_starGenType type
type MoqConn_starGenType_Close_doFn func()

// MoqConn_starGenType_Close_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Conn_starGenType type
type MoqConn_starGenType_Close_doReturnFn func() error

// MoqConn_starGenType_Close_results holds the results of the Conn_starGenType
// type
type MoqConn_starGenType_Close_results struct {
	Params  MoqConn_starGenType_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_Close_doFn
		DoReturnFn MoqConn_starGenType_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_starGenType_Close_fnRecorder routes recorded function calls to the
// MoqConn_starGenType moq
type MoqConn_starGenType_Close_fnRecorder struct {
	Params    MoqConn_starGenType_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_starGenType_Close_results
	Moq       *MoqConn_starGenType
}

// MoqConn_starGenType_Close_anyParams isolates the any params functions of the
// Conn_starGenType type
type MoqConn_starGenType_Close_anyParams struct {
	Recorder *MoqConn_starGenType_Close_fnRecorder
}

// NewMoqConn_starGenType creates a new moq of the Conn_starGenType type
func NewMoqConn_starGenType(scene *moq.Scene, config *moq.Config) *MoqConn_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqConn_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqConn_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				PingContext struct {
					Ctx moq.ParamIndexing
				}
				ExecContext struct {
					Ctx   moq.ParamIndexing
					Query moq.ParamIndexing
					Args  moq.ParamIndexing
				}
				QueryContext struct {
					Ctx   moq.ParamIndexing
					Query moq.ParamIndexing
					Args  moq.ParamIndexing
				}
				QueryRowContext struct {
					Ctx   moq.ParamIndexing
					Query moq.ParamIndexing
					Args  moq.ParamIndexing
				}
				PrepareContext struct {
					Ctx   moq.ParamIndexing
					Query moq.ParamIndexing
				}
				Raw struct {
					F moq.ParamIndexing
				}
				BeginTx struct {
					Ctx  moq.ParamIndexing
					Opts moq.ParamIndexing
				}
				Close struct{}
			}
		}{ParameterIndexing: struct {
			PingContext struct {
				Ctx moq.ParamIndexing
			}
			ExecContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			QueryContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			QueryRowContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			PrepareContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
			}
			Raw struct {
				F moq.ParamIndexing
			}
			BeginTx struct {
				Ctx  moq.ParamIndexing
				Opts moq.ParamIndexing
			}
			Close struct{}
		}{
			PingContext: struct {
				Ctx moq.ParamIndexing
			}{
				Ctx: moq.ParamIndexByHash,
			},
			ExecContext: struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}{
				Ctx:   moq.ParamIndexByHash,
				Query: moq.ParamIndexByValue,
				Args:  moq.ParamIndexByHash,
			},
			QueryContext: struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}{
				Ctx:   moq.ParamIndexByHash,
				Query: moq.ParamIndexByValue,
				Args:  moq.ParamIndexByHash,
			},
			QueryRowContext: struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}{
				Ctx:   moq.ParamIndexByHash,
				Query: moq.ParamIndexByValue,
				Args:  moq.ParamIndexByHash,
			},
			PrepareContext: struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
			}{
				Ctx:   moq.ParamIndexByHash,
				Query: moq.ParamIndexByValue,
			},
			Raw: struct {
				F moq.ParamIndexing
			}{
				F: moq.ParamIndexByHash,
			},
			BeginTx: struct {
				Ctx  moq.ParamIndexing
				Opts moq.ParamIndexing
			}{
				Ctx:  moq.ParamIndexByHash,
				Opts: moq.ParamIndexByHash,
			},
			Close: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Conn_starGenType type
func (m *MoqConn_starGenType) Mock() *MoqConn_starGenType_mock { return m.Moq }

func (m *MoqConn_starGenType_mock) PingContext(ctx context.Context) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_starGenType_PingContext_params{
		Ctx: ctx,
	}
	var results *MoqConn_starGenType_PingContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_PingContext {
		paramsKey := m.Moq.ParamsKey_PingContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_PingContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_PingContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_PingContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(ctx)
	}
	return
}

func (m *MoqConn_starGenType_mock) ExecContext(ctx context.Context, query string, args ...interface{}) (result1 sql.Result, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_starGenType_ExecContext_params{
		Ctx:   ctx,
		Query: query,
		Args:  args,
	}
	var results *MoqConn_starGenType_ExecContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ExecContext {
		paramsKey := m.Moq.ParamsKey_ExecContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ExecContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ExecContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ExecContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, query, args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(ctx, query, args...)
	}
	return
}

func (m *MoqConn_starGenType_mock) QueryContext(ctx context.Context, query string, args ...interface{}) (result1 *sql.Rows, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_starGenType_QueryContext_params{
		Ctx:   ctx,
		Query: query,
		Args:  args,
	}
	var results *MoqConn_starGenType_QueryContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_QueryContext {
		paramsKey := m.Moq.ParamsKey_QueryContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_QueryContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_QueryContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_QueryContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, query, args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(ctx, query, args...)
	}
	return
}

func (m *MoqConn_starGenType_mock) QueryRowContext(ctx context.Context, query string, args ...interface{}) (result1 *sql.Row) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_starGenType_QueryRowContext_params{
		Ctx:   ctx,
		Query: query,
		Args:  args,
	}
	var results *MoqConn_starGenType_QueryRowContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_QueryRowContext {
		paramsKey := m.Moq.ParamsKey_QueryRowContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_QueryRowContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_QueryRowContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_QueryRowContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, query, args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(ctx, query, args...)
	}
	return
}

func (m *MoqConn_starGenType_mock) PrepareContext(ctx context.Context, query string) (result1 *sql.Stmt, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_starGenType_PrepareContext_params{
		Ctx:   ctx,
		Query: query,
	}
	var results *MoqConn_starGenType_PrepareContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_PrepareContext {
		paramsKey := m.Moq.ParamsKey_PrepareContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_PrepareContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_PrepareContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_PrepareContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, query)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(ctx, query)
	}
	return
}

func (m *MoqConn_starGenType_mock) Raw(f func(driverConn interface{}) error) (err error) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_starGenType_Raw_params{
		F: f,
	}
	var results *MoqConn_starGenType_Raw_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Raw {
		paramsKey := m.Moq.ParamsKey_Raw(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Raw(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Raw(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Raw(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(f)
	}

	if result.Values != nil {
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		err = result.DoReturnFn(f)
	}
	return
}

func (m *MoqConn_starGenType_mock) BeginTx(ctx context.Context, opts *sql.TxOptions) (result1 *sql.Tx, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_starGenType_BeginTx_params{
		Ctx:  ctx,
		Opts: opts,
	}
	var results *MoqConn_starGenType_BeginTx_results
	for _, resultsByParams := range m.Moq.ResultsByParams_BeginTx {
		paramsKey := m.Moq.ParamsKey_BeginTx(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_BeginTx(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_BeginTx(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_BeginTx(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, opts)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(ctx, opts)
	}
	return
}

func (m *MoqConn_starGenType_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_starGenType_Close_params{}
	var results *MoqConn_starGenType_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Conn_starGenType type
func (m *MoqConn_starGenType) OnCall() *MoqConn_starGenType_recorder {
	return &MoqConn_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqConn_starGenType_recorder) PingContext(ctx context.Context) *MoqConn_starGenType_PingContext_fnRecorder {
	return &MoqConn_starGenType_PingContext_fnRecorder{
		Params: MoqConn_starGenType_PingContext_params{
			Ctx: ctx,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_starGenType_PingContext_fnRecorder) Any() *MoqConn_starGenType_PingContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PingContext(r.Params))
		return nil
	}
	return &MoqConn_starGenType_PingContext_anyParams{Recorder: r}
}

func (a *MoqConn_starGenType_PingContext_anyParams) Ctx() *MoqConn_starGenType_PingContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqConn_starGenType_PingContext_fnRecorder) Seq() *MoqConn_starGenType_PingContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PingContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_starGenType_PingContext_fnRecorder) NoSeq() *MoqConn_starGenType_PingContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PingContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_starGenType_PingContext_fnRecorder) ReturnResults(result1 error) *MoqConn_starGenType_PingContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_PingContext_doFn
		DoReturnFn MoqConn_starGenType_PingContext_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_starGenType_PingContext_fnRecorder) AndDo(fn MoqConn_starGenType_PingContext_doFn) *MoqConn_starGenType_PingContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_starGenType_PingContext_fnRecorder) DoReturnResults(fn MoqConn_starGenType_PingContext_doReturnFn) *MoqConn_starGenType_PingContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_PingContext_doFn
		DoReturnFn MoqConn_starGenType_PingContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_starGenType_PingContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_starGenType_PingContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_PingContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_starGenType_PingContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_starGenType_PingContext_paramsKey]*MoqConn_starGenType_PingContext_results{},
		}
		r.Moq.ResultsByParams_PingContext = append(r.Moq.ResultsByParams_PingContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_PingContext) {
			copy(r.Moq.ResultsByParams_PingContext[insertAt+1:], r.Moq.ResultsByParams_PingContext[insertAt:0])
			r.Moq.ResultsByParams_PingContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_PingContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_starGenType_PingContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_starGenType_PingContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_starGenType_PingContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqConn_starGenType_PingContext_doFn
				DoReturnFn MoqConn_starGenType_PingContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn_starGenType) PrettyParams_PingContext(params MoqConn_starGenType_PingContext_params) string {
	return fmt.Sprintf("PingContext(%#v)", params.Ctx)
}

func (m *MoqConn_starGenType) ParamsKey_PingContext(params MoqConn_starGenType_PingContext_params, anyParams uint64) MoqConn_starGenType_PingContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.PingContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	return MoqConn_starGenType_PingContext_paramsKey{
		Params: struct{ Ctx context.Context }{
			Ctx: ctxUsed,
		},
		Hashes: struct{ Ctx hash.Hash }{
			Ctx: ctxUsedHash,
		},
	}
}

func (m *MoqConn_starGenType_recorder) ExecContext(ctx context.Context, query string, args ...interface{}) *MoqConn_starGenType_ExecContext_fnRecorder {
	return &MoqConn_starGenType_ExecContext_fnRecorder{
		Params: MoqConn_starGenType_ExecContext_params{
			Ctx:   ctx,
			Query: query,
			Args:  args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_starGenType_ExecContext_fnRecorder) Any() *MoqConn_starGenType_ExecContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExecContext(r.Params))
		return nil
	}
	return &MoqConn_starGenType_ExecContext_anyParams{Recorder: r}
}

func (a *MoqConn_starGenType_ExecContext_anyParams) Ctx() *MoqConn_starGenType_ExecContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqConn_starGenType_ExecContext_anyParams) Query() *MoqConn_starGenType_ExecContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqConn_starGenType_ExecContext_anyParams) Args() *MoqConn_starGenType_ExecContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqConn_starGenType_ExecContext_fnRecorder) Seq() *MoqConn_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExecContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_starGenType_ExecContext_fnRecorder) NoSeq() *MoqConn_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExecContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_starGenType_ExecContext_fnRecorder) ReturnResults(result1 sql.Result, result2 error) *MoqConn_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_ExecContext_doFn
		DoReturnFn MoqConn_starGenType_ExecContext_doReturnFn
	}{
		Values: &struct {
			Result1 sql.Result
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_starGenType_ExecContext_fnRecorder) AndDo(fn MoqConn_starGenType_ExecContext_doFn) *MoqConn_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_starGenType_ExecContext_fnRecorder) DoReturnResults(fn MoqConn_starGenType_ExecContext_doReturnFn) *MoqConn_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_ExecContext_doFn
		DoReturnFn MoqConn_starGenType_ExecContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_starGenType_ExecContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_starGenType_ExecContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ExecContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_starGenType_ExecContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_starGenType_ExecContext_paramsKey]*MoqConn_starGenType_ExecContext_results{},
		}
		r.Moq.ResultsByParams_ExecContext = append(r.Moq.ResultsByParams_ExecContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ExecContext) {
			copy(r.Moq.ResultsByParams_ExecContext[insertAt+1:], r.Moq.ResultsByParams_ExecContext[insertAt:0])
			r.Moq.ResultsByParams_ExecContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ExecContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_starGenType_ExecContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_starGenType_ExecContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 sql.Result
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqConn_starGenType_ExecContext_doFn
				DoReturnFn MoqConn_starGenType_ExecContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn_starGenType) PrettyParams_ExecContext(params MoqConn_starGenType_ExecContext_params) string {
	return fmt.Sprintf("ExecContext(%#v, %#v, %#v)", params.Ctx, params.Query, params.Args)
}

func (m *MoqConn_starGenType) ParamsKey_ExecContext(params MoqConn_starGenType_ExecContext_params, anyParams uint64) MoqConn_starGenType_ExecContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ExecContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.ExecContext.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.ExecContext.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the ExecContext function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqConn_starGenType_ExecContext_paramsKey{
		Params: struct {
			Ctx   context.Context
			Query string
		}{
			Ctx:   ctxUsed,
			Query: queryUsed,
		},
		Hashes: struct {
			Ctx   hash.Hash
			Query hash.Hash
			Args  hash.Hash
		}{
			Ctx:   ctxUsedHash,
			Query: queryUsedHash,
			Args:  argsUsedHash,
		},
	}
}

func (m *MoqConn_starGenType_recorder) QueryContext(ctx context.Context, query string, args ...interface{}) *MoqConn_starGenType_QueryContext_fnRecorder {
	return &MoqConn_starGenType_QueryContext_fnRecorder{
		Params: MoqConn_starGenType_QueryContext_params{
			Ctx:   ctx,
			Query: query,
			Args:  args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_starGenType_QueryContext_fnRecorder) Any() *MoqConn_starGenType_QueryContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryContext(r.Params))
		return nil
	}
	return &MoqConn_starGenType_QueryContext_anyParams{Recorder: r}
}

func (a *MoqConn_starGenType_QueryContext_anyParams) Ctx() *MoqConn_starGenType_QueryContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqConn_starGenType_QueryContext_anyParams) Query() *MoqConn_starGenType_QueryContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqConn_starGenType_QueryContext_anyParams) Args() *MoqConn_starGenType_QueryContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqConn_starGenType_QueryContext_fnRecorder) Seq() *MoqConn_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_starGenType_QueryContext_fnRecorder) NoSeq() *MoqConn_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_starGenType_QueryContext_fnRecorder) ReturnResults(result1 *sql.Rows, result2 error) *MoqConn_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_QueryContext_doFn
		DoReturnFn MoqConn_starGenType_QueryContext_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Rows
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_starGenType_QueryContext_fnRecorder) AndDo(fn MoqConn_starGenType_QueryContext_doFn) *MoqConn_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_starGenType_QueryContext_fnRecorder) DoReturnResults(fn MoqConn_starGenType_QueryContext_doReturnFn) *MoqConn_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_QueryContext_doFn
		DoReturnFn MoqConn_starGenType_QueryContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_starGenType_QueryContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_starGenType_QueryContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_QueryContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_starGenType_QueryContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_starGenType_QueryContext_paramsKey]*MoqConn_starGenType_QueryContext_results{},
		}
		r.Moq.ResultsByParams_QueryContext = append(r.Moq.ResultsByParams_QueryContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_QueryContext) {
			copy(r.Moq.ResultsByParams_QueryContext[insertAt+1:], r.Moq.ResultsByParams_QueryContext[insertAt:0])
			r.Moq.ResultsByParams_QueryContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_QueryContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_starGenType_QueryContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_starGenType_QueryContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Rows
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqConn_starGenType_QueryContext_doFn
				DoReturnFn MoqConn_starGenType_QueryContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn_starGenType) PrettyParams_QueryContext(params MoqConn_starGenType_QueryContext_params) string {
	return fmt.Sprintf("QueryContext(%#v, %#v, %#v)", params.Ctx, params.Query, params.Args)
}

func (m *MoqConn_starGenType) ParamsKey_QueryContext(params MoqConn_starGenType_QueryContext_params, anyParams uint64) MoqConn_starGenType_QueryContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.QueryContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.QueryContext.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.QueryContext.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the QueryContext function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqConn_starGenType_QueryContext_paramsKey{
		Params: struct {
			Ctx   context.Context
			Query string
		}{
			Ctx:   ctxUsed,
			Query: queryUsed,
		},
		Hashes: struct {
			Ctx   hash.Hash
			Query hash.Hash
			Args  hash.Hash
		}{
			Ctx:   ctxUsedHash,
			Query: queryUsedHash,
			Args:  argsUsedHash,
		},
	}
}

func (m *MoqConn_starGenType_recorder) QueryRowContext(ctx context.Context, query string, args ...interface{}) *MoqConn_starGenType_QueryRowContext_fnRecorder {
	return &MoqConn_starGenType_QueryRowContext_fnRecorder{
		Params: MoqConn_starGenType_QueryRowContext_params{
			Ctx:   ctx,
			Query: query,
			Args:  args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_starGenType_QueryRowContext_fnRecorder) Any() *MoqConn_starGenType_QueryRowContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRowContext(r.Params))
		return nil
	}
	return &MoqConn_starGenType_QueryRowContext_anyParams{Recorder: r}
}

func (a *MoqConn_starGenType_QueryRowContext_anyParams) Ctx() *MoqConn_starGenType_QueryRowContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqConn_starGenType_QueryRowContext_anyParams) Query() *MoqConn_starGenType_QueryRowContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqConn_starGenType_QueryRowContext_anyParams) Args() *MoqConn_starGenType_QueryRowContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqConn_starGenType_QueryRowContext_fnRecorder) Seq() *MoqConn_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRowContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_starGenType_QueryRowContext_fnRecorder) NoSeq() *MoqConn_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRowContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_starGenType_QueryRowContext_fnRecorder) ReturnResults(result1 *sql.Row) *MoqConn_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_QueryRowContext_doFn
		DoReturnFn MoqConn_starGenType_QueryRowContext_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Row
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_starGenType_QueryRowContext_fnRecorder) AndDo(fn MoqConn_starGenType_QueryRowContext_doFn) *MoqConn_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_starGenType_QueryRowContext_fnRecorder) DoReturnResults(fn MoqConn_starGenType_QueryRowContext_doReturnFn) *MoqConn_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_QueryRowContext_doFn
		DoReturnFn MoqConn_starGenType_QueryRowContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_starGenType_QueryRowContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_starGenType_QueryRowContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_QueryRowContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_starGenType_QueryRowContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_starGenType_QueryRowContext_paramsKey]*MoqConn_starGenType_QueryRowContext_results{},
		}
		r.Moq.ResultsByParams_QueryRowContext = append(r.Moq.ResultsByParams_QueryRowContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_QueryRowContext) {
			copy(r.Moq.ResultsByParams_QueryRowContext[insertAt+1:], r.Moq.ResultsByParams_QueryRowContext[insertAt:0])
			r.Moq.ResultsByParams_QueryRowContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_QueryRowContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_starGenType_QueryRowContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_starGenType_QueryRowContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Row
				}
				Sequence   uint32
				DoFn       MoqConn_starGenType_QueryRowContext_doFn
				DoReturnFn MoqConn_starGenType_QueryRowContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn_starGenType) PrettyParams_QueryRowContext(params MoqConn_starGenType_QueryRowContext_params) string {
	return fmt.Sprintf("QueryRowContext(%#v, %#v, %#v)", params.Ctx, params.Query, params.Args)
}

func (m *MoqConn_starGenType) ParamsKey_QueryRowContext(params MoqConn_starGenType_QueryRowContext_params, anyParams uint64) MoqConn_starGenType_QueryRowContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.QueryRowContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.QueryRowContext.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.QueryRowContext.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the QueryRowContext function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqConn_starGenType_QueryRowContext_paramsKey{
		Params: struct {
			Ctx   context.Context
			Query string
		}{
			Ctx:   ctxUsed,
			Query: queryUsed,
		},
		Hashes: struct {
			Ctx   hash.Hash
			Query hash.Hash
			Args  hash.Hash
		}{
			Ctx:   ctxUsedHash,
			Query: queryUsedHash,
			Args:  argsUsedHash,
		},
	}
}

func (m *MoqConn_starGenType_recorder) PrepareContext(ctx context.Context, query string) *MoqConn_starGenType_PrepareContext_fnRecorder {
	return &MoqConn_starGenType_PrepareContext_fnRecorder{
		Params: MoqConn_starGenType_PrepareContext_params{
			Ctx:   ctx,
			Query: query,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_starGenType_PrepareContext_fnRecorder) Any() *MoqConn_starGenType_PrepareContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PrepareContext(r.Params))
		return nil
	}
	return &MoqConn_starGenType_PrepareContext_anyParams{Recorder: r}
}

func (a *MoqConn_starGenType_PrepareContext_anyParams) Ctx() *MoqConn_starGenType_PrepareContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqConn_starGenType_PrepareContext_anyParams) Query() *MoqConn_starGenType_PrepareContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqConn_starGenType_PrepareContext_fnRecorder) Seq() *MoqConn_starGenType_PrepareContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PrepareContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_starGenType_PrepareContext_fnRecorder) NoSeq() *MoqConn_starGenType_PrepareContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PrepareContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_starGenType_PrepareContext_fnRecorder) ReturnResults(result1 *sql.Stmt, result2 error) *MoqConn_starGenType_PrepareContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Stmt
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_PrepareContext_doFn
		DoReturnFn MoqConn_starGenType_PrepareContext_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Stmt
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_starGenType_PrepareContext_fnRecorder) AndDo(fn MoqConn_starGenType_PrepareContext_doFn) *MoqConn_starGenType_PrepareContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_starGenType_PrepareContext_fnRecorder) DoReturnResults(fn MoqConn_starGenType_PrepareContext_doReturnFn) *MoqConn_starGenType_PrepareContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Stmt
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_PrepareContext_doFn
		DoReturnFn MoqConn_starGenType_PrepareContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_starGenType_PrepareContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_starGenType_PrepareContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_PrepareContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_starGenType_PrepareContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_starGenType_PrepareContext_paramsKey]*MoqConn_starGenType_PrepareContext_results{},
		}
		r.Moq.ResultsByParams_PrepareContext = append(r.Moq.ResultsByParams_PrepareContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_PrepareContext) {
			copy(r.Moq.ResultsByParams_PrepareContext[insertAt+1:], r.Moq.ResultsByParams_PrepareContext[insertAt:0])
			r.Moq.ResultsByParams_PrepareContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_PrepareContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_starGenType_PrepareContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_starGenType_PrepareContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_starGenType_PrepareContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Stmt
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqConn_starGenType_PrepareContext_doFn
				DoReturnFn MoqConn_starGenType_PrepareContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn_starGenType) PrettyParams_PrepareContext(params MoqConn_starGenType_PrepareContext_params) string {
	return fmt.Sprintf("PrepareContext(%#v, %#v)", params.Ctx, params.Query)
}

func (m *MoqConn_starGenType) ParamsKey_PrepareContext(params MoqConn_starGenType_PrepareContext_params, anyParams uint64) MoqConn_starGenType_PrepareContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.PrepareContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.PrepareContext.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	return MoqConn_starGenType_PrepareContext_paramsKey{
		Params: struct {
			Ctx   context.Context
			Query string
		}{
			Ctx:   ctxUsed,
			Query: queryUsed,
		},
		Hashes: struct {
			Ctx   hash.Hash
			Query hash.Hash
		}{
			Ctx:   ctxUsedHash,
			Query: queryUsedHash,
		},
	}
}

func (m *MoqConn_starGenType_recorder) Raw(f func(driverConn interface{}) error) *MoqConn_starGenType_Raw_fnRecorder {
	return &MoqConn_starGenType_Raw_fnRecorder{
		Params: MoqConn_starGenType_Raw_params{
			F: f,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_starGenType_Raw_fnRecorder) Any() *MoqConn_starGenType_Raw_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Raw(r.Params))
		return nil
	}
	return &MoqConn_starGenType_Raw_anyParams{Recorder: r}
}

func (a *MoqConn_starGenType_Raw_anyParams) F() *MoqConn_starGenType_Raw_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqConn_starGenType_Raw_fnRecorder) Seq() *MoqConn_starGenType_Raw_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Raw(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_starGenType_Raw_fnRecorder) NoSeq() *MoqConn_starGenType_Raw_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Raw(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_starGenType_Raw_fnRecorder) ReturnResults(err error) *MoqConn_starGenType_Raw_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Err error }
		Sequence   uint32
		DoFn       MoqConn_starGenType_Raw_doFn
		DoReturnFn MoqConn_starGenType_Raw_doReturnFn
	}{
		Values: &struct{ Err error }{
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_starGenType_Raw_fnRecorder) AndDo(fn MoqConn_starGenType_Raw_doFn) *MoqConn_starGenType_Raw_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_starGenType_Raw_fnRecorder) DoReturnResults(fn MoqConn_starGenType_Raw_doReturnFn) *MoqConn_starGenType_Raw_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Err error }
		Sequence   uint32
		DoFn       MoqConn_starGenType_Raw_doFn
		DoReturnFn MoqConn_starGenType_Raw_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_starGenType_Raw_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_starGenType_Raw_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Raw {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_starGenType_Raw_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_starGenType_Raw_paramsKey]*MoqConn_starGenType_Raw_results{},
		}
		r.Moq.ResultsByParams_Raw = append(r.Moq.ResultsByParams_Raw, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Raw) {
			copy(r.Moq.ResultsByParams_Raw[insertAt+1:], r.Moq.ResultsByParams_Raw[insertAt:0])
			r.Moq.ResultsByParams_Raw[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Raw(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_starGenType_Raw_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_starGenType_Raw_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_starGenType_Raw_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ Err error }
				Sequence   uint32
				DoFn       MoqConn_starGenType_Raw_doFn
				DoReturnFn MoqConn_starGenType_Raw_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn_starGenType) PrettyParams_Raw(params MoqConn_starGenType_Raw_params) string {
	return fmt.Sprintf("Raw(%#v)", params.F)
}

func (m *MoqConn_starGenType) ParamsKey_Raw(params MoqConn_starGenType_Raw_params, anyParams uint64) MoqConn_starGenType_Raw_paramsKey {
	m.Scene.T.Helper()
	var fUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Raw.F == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The f parameter of the Raw function can't be indexed by value")
		}
		fUsedHash = hash.DeepHash(params.F)
	}
	return MoqConn_starGenType_Raw_paramsKey{
		Params: struct{}{},
		Hashes: struct{ F hash.Hash }{
			F: fUsedHash,
		},
	}
}

func (m *MoqConn_starGenType_recorder) BeginTx(ctx context.Context, opts *sql.TxOptions) *MoqConn_starGenType_BeginTx_fnRecorder {
	return &MoqConn_starGenType_BeginTx_fnRecorder{
		Params: MoqConn_starGenType_BeginTx_params{
			Ctx:  ctx,
			Opts: opts,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_starGenType_BeginTx_fnRecorder) Any() *MoqConn_starGenType_BeginTx_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BeginTx(r.Params))
		return nil
	}
	return &MoqConn_starGenType_BeginTx_anyParams{Recorder: r}
}

func (a *MoqConn_starGenType_BeginTx_anyParams) Ctx() *MoqConn_starGenType_BeginTx_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqConn_starGenType_BeginTx_anyParams) Opts() *MoqConn_starGenType_BeginTx_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqConn_starGenType_BeginTx_fnRecorder) Seq() *MoqConn_starGenType_BeginTx_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BeginTx(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_starGenType_BeginTx_fnRecorder) NoSeq() *MoqConn_starGenType_BeginTx_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BeginTx(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_starGenType_BeginTx_fnRecorder) ReturnResults(result1 *sql.Tx, result2 error) *MoqConn_starGenType_BeginTx_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Tx
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_BeginTx_doFn
		DoReturnFn MoqConn_starGenType_BeginTx_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Tx
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_starGenType_BeginTx_fnRecorder) AndDo(fn MoqConn_starGenType_BeginTx_doFn) *MoqConn_starGenType_BeginTx_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_starGenType_BeginTx_fnRecorder) DoReturnResults(fn MoqConn_starGenType_BeginTx_doReturnFn) *MoqConn_starGenType_BeginTx_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Tx
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_BeginTx_doFn
		DoReturnFn MoqConn_starGenType_BeginTx_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_starGenType_BeginTx_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_starGenType_BeginTx_resultsByParams
	for n, res := range r.Moq.ResultsByParams_BeginTx {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_starGenType_BeginTx_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_starGenType_BeginTx_paramsKey]*MoqConn_starGenType_BeginTx_results{},
		}
		r.Moq.ResultsByParams_BeginTx = append(r.Moq.ResultsByParams_BeginTx, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_BeginTx) {
			copy(r.Moq.ResultsByParams_BeginTx[insertAt+1:], r.Moq.ResultsByParams_BeginTx[insertAt:0])
			r.Moq.ResultsByParams_BeginTx[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_BeginTx(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_starGenType_BeginTx_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_starGenType_BeginTx_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_starGenType_BeginTx_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Tx
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqConn_starGenType_BeginTx_doFn
				DoReturnFn MoqConn_starGenType_BeginTx_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn_starGenType) PrettyParams_BeginTx(params MoqConn_starGenType_BeginTx_params) string {
	return fmt.Sprintf("BeginTx(%#v, %#v)", params.Ctx, params.Opts)
}

func (m *MoqConn_starGenType) ParamsKey_BeginTx(params MoqConn_starGenType_BeginTx_params, anyParams uint64) MoqConn_starGenType_BeginTx_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.BeginTx.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var optsUsed *sql.TxOptions
	var optsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.BeginTx.Opts == moq.ParamIndexByValue {
			optsUsed = params.Opts
		} else {
			optsUsedHash = hash.DeepHash(params.Opts)
		}
	}
	return MoqConn_starGenType_BeginTx_paramsKey{
		Params: struct {
			Ctx  context.Context
			Opts *sql.TxOptions
		}{
			Ctx:  ctxUsed,
			Opts: optsUsed,
		},
		Hashes: struct {
			Ctx  hash.Hash
			Opts hash.Hash
		}{
			Ctx:  ctxUsedHash,
			Opts: optsUsedHash,
		},
	}
}

func (m *MoqConn_starGenType_recorder) Close() *MoqConn_starGenType_Close_fnRecorder {
	return &MoqConn_starGenType_Close_fnRecorder{
		Params:   MoqConn_starGenType_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_starGenType_Close_fnRecorder) Any() *MoqConn_starGenType_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqConn_starGenType_Close_anyParams{Recorder: r}
}

func (r *MoqConn_starGenType_Close_fnRecorder) Seq() *MoqConn_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_starGenType_Close_fnRecorder) NoSeq() *MoqConn_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_starGenType_Close_fnRecorder) ReturnResults(result1 error) *MoqConn_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_Close_doFn
		DoReturnFn MoqConn_starGenType_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_starGenType_Close_fnRecorder) AndDo(fn MoqConn_starGenType_Close_doFn) *MoqConn_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_starGenType_Close_fnRecorder) DoReturnResults(fn MoqConn_starGenType_Close_doReturnFn) *MoqConn_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_Close_doFn
		DoReturnFn MoqConn_starGenType_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_starGenType_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_starGenType_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_starGenType_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_starGenType_Close_paramsKey]*MoqConn_starGenType_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_starGenType_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_starGenType_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqConn_starGenType_Close_doFn
				DoReturnFn MoqConn_starGenType_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn_starGenType) PrettyParams_Close(params MoqConn_starGenType_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqConn_starGenType) ParamsKey_Close(params MoqConn_starGenType_Close_params, anyParams uint64) MoqConn_starGenType_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqConn_starGenType_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqConn_starGenType) Reset() {
	m.ResultsByParams_PingContext = nil
	m.ResultsByParams_ExecContext = nil
	m.ResultsByParams_QueryContext = nil
	m.ResultsByParams_QueryRowContext = nil
	m.ResultsByParams_PrepareContext = nil
	m.ResultsByParams_Raw = nil
	m.ResultsByParams_BeginTx = nil
	m.ResultsByParams_Close = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqConn_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_PingContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_PingContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ExecContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ExecContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_QueryContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_QueryContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_QueryRowContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_QueryRowContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_PrepareContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_PrepareContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Raw {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Raw(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_BeginTx {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_BeginTx(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
}
