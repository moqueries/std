// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package sql

import (
	"context"
	"database/sql"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that sql.Stmt_starGenType is mocked
// completely
var _ Stmt_starGenType = (*MoqStmt_starGenType_mock)(nil)

// Stmt_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Stmt_starGenType interface {
	ExecContext(ctx context.Context, args ...any) (sql.Result, error)
	Exec(args ...any) (sql.Result, error)
	QueryContext(ctx context.Context, args ...any) (*sql.Rows, error)
	Query(args ...any) (*sql.Rows, error)
	QueryRowContext(ctx context.Context, args ...any) *sql.Row
	QueryRow(args ...any) *sql.Row
	Close() error
}

// MoqStmt_starGenType holds the state of a moq of the Stmt_starGenType type
type MoqStmt_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqStmt_starGenType_mock

	ResultsByParams_ExecContext     []MoqStmt_starGenType_ExecContext_resultsByParams
	ResultsByParams_Exec            []MoqStmt_starGenType_Exec_resultsByParams
	ResultsByParams_QueryContext    []MoqStmt_starGenType_QueryContext_resultsByParams
	ResultsByParams_Query           []MoqStmt_starGenType_Query_resultsByParams
	ResultsByParams_QueryRowContext []MoqStmt_starGenType_QueryRowContext_resultsByParams
	ResultsByParams_QueryRow        []MoqStmt_starGenType_QueryRow_resultsByParams
	ResultsByParams_Close           []MoqStmt_starGenType_Close_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			ExecContext struct {
				Ctx  moq.ParamIndexing
				Args moq.ParamIndexing
			}
			Exec struct {
				Args moq.ParamIndexing
			}
			QueryContext struct {
				Ctx  moq.ParamIndexing
				Args moq.ParamIndexing
			}
			Query struct {
				Args moq.ParamIndexing
			}
			QueryRowContext struct {
				Ctx  moq.ParamIndexing
				Args moq.ParamIndexing
			}
			QueryRow struct {
				Args moq.ParamIndexing
			}
			Close struct{}
		}
	}
}

// MoqStmt_starGenType_mock isolates the mock interface of the Stmt_starGenType
// type
type MoqStmt_starGenType_mock struct {
	Moq *MoqStmt_starGenType
}

// MoqStmt_starGenType_recorder isolates the recorder interface of the
// Stmt_starGenType type
type MoqStmt_starGenType_recorder struct {
	Moq *MoqStmt_starGenType
}

// MoqStmt_starGenType_ExecContext_params holds the params of the
// Stmt_starGenType type
type MoqStmt_starGenType_ExecContext_params struct {
	Ctx  context.Context
	Args []any
}

// MoqStmt_starGenType_ExecContext_paramsKey holds the map key params of the
// Stmt_starGenType type
type MoqStmt_starGenType_ExecContext_paramsKey struct {
	Params struct{ Ctx context.Context }
	Hashes struct {
		Ctx  hash.Hash
		Args hash.Hash
	}
}

// MoqStmt_starGenType_ExecContext_resultsByParams contains the results for a
// given set of parameters for the Stmt_starGenType type
type MoqStmt_starGenType_ExecContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqStmt_starGenType_ExecContext_paramsKey]*MoqStmt_starGenType_ExecContext_results
}

// MoqStmt_starGenType_ExecContext_doFn defines the type of function needed
// when calling AndDo for the Stmt_starGenType type
type MoqStmt_starGenType_ExecContext_doFn func(ctx context.Context, args ...any)

// MoqStmt_starGenType_ExecContext_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Stmt_starGenType type
type MoqStmt_starGenType_ExecContext_doReturnFn func(ctx context.Context, args ...any) (sql.Result, error)

// MoqStmt_starGenType_ExecContext_results holds the results of the
// Stmt_starGenType type
type MoqStmt_starGenType_ExecContext_results struct {
	Params  MoqStmt_starGenType_ExecContext_params
	Results []struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_ExecContext_doFn
		DoReturnFn MoqStmt_starGenType_ExecContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqStmt_starGenType_ExecContext_fnRecorder routes recorded function calls to
// the MoqStmt_starGenType moq
type MoqStmt_starGenType_ExecContext_fnRecorder struct {
	Params    MoqStmt_starGenType_ExecContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqStmt_starGenType_ExecContext_results
	Moq       *MoqStmt_starGenType
}

// MoqStmt_starGenType_ExecContext_anyParams isolates the any params functions
// of the Stmt_starGenType type
type MoqStmt_starGenType_ExecContext_anyParams struct {
	Recorder *MoqStmt_starGenType_ExecContext_fnRecorder
}

// MoqStmt_starGenType_Exec_params holds the params of the Stmt_starGenType
// type
type MoqStmt_starGenType_Exec_params struct{ Args []any }

// MoqStmt_starGenType_Exec_paramsKey holds the map key params of the
// Stmt_starGenType type
type MoqStmt_starGenType_Exec_paramsKey struct {
	Params struct{}
	Hashes struct{ Args hash.Hash }
}

// MoqStmt_starGenType_Exec_resultsByParams contains the results for a given
// set of parameters for the Stmt_starGenType type
type MoqStmt_starGenType_Exec_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqStmt_starGenType_Exec_paramsKey]*MoqStmt_starGenType_Exec_results
}

// MoqStmt_starGenType_Exec_doFn defines the type of function needed when
// calling AndDo for the Stmt_starGenType type
type MoqStmt_starGenType_Exec_doFn func(args ...any)

// MoqStmt_starGenType_Exec_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Stmt_starGenType type
type MoqStmt_starGenType_Exec_doReturnFn func(args ...any) (sql.Result, error)

// MoqStmt_starGenType_Exec_results holds the results of the Stmt_starGenType
// type
type MoqStmt_starGenType_Exec_results struct {
	Params  MoqStmt_starGenType_Exec_params
	Results []struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_Exec_doFn
		DoReturnFn MoqStmt_starGenType_Exec_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqStmt_starGenType_Exec_fnRecorder routes recorded function calls to the
// MoqStmt_starGenType moq
type MoqStmt_starGenType_Exec_fnRecorder struct {
	Params    MoqStmt_starGenType_Exec_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqStmt_starGenType_Exec_results
	Moq       *MoqStmt_starGenType
}

// MoqStmt_starGenType_Exec_anyParams isolates the any params functions of the
// Stmt_starGenType type
type MoqStmt_starGenType_Exec_anyParams struct {
	Recorder *MoqStmt_starGenType_Exec_fnRecorder
}

// MoqStmt_starGenType_QueryContext_params holds the params of the
// Stmt_starGenType type
type MoqStmt_starGenType_QueryContext_params struct {
	Ctx  context.Context
	Args []any
}

// MoqStmt_starGenType_QueryContext_paramsKey holds the map key params of the
// Stmt_starGenType type
type MoqStmt_starGenType_QueryContext_paramsKey struct {
	Params struct{ Ctx context.Context }
	Hashes struct {
		Ctx  hash.Hash
		Args hash.Hash
	}
}

// MoqStmt_starGenType_QueryContext_resultsByParams contains the results for a
// given set of parameters for the Stmt_starGenType type
type MoqStmt_starGenType_QueryContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqStmt_starGenType_QueryContext_paramsKey]*MoqStmt_starGenType_QueryContext_results
}

// MoqStmt_starGenType_QueryContext_doFn defines the type of function needed
// when calling AndDo for the Stmt_starGenType type
type MoqStmt_starGenType_QueryContext_doFn func(ctx context.Context, args ...any)

// MoqStmt_starGenType_QueryContext_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Stmt_starGenType type
type MoqStmt_starGenType_QueryContext_doReturnFn func(ctx context.Context, args ...any) (*sql.Rows, error)

// MoqStmt_starGenType_QueryContext_results holds the results of the
// Stmt_starGenType type
type MoqStmt_starGenType_QueryContext_results struct {
	Params  MoqStmt_starGenType_QueryContext_params
	Results []struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_QueryContext_doFn
		DoReturnFn MoqStmt_starGenType_QueryContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqStmt_starGenType_QueryContext_fnRecorder routes recorded function calls
// to the MoqStmt_starGenType moq
type MoqStmt_starGenType_QueryContext_fnRecorder struct {
	Params    MoqStmt_starGenType_QueryContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqStmt_starGenType_QueryContext_results
	Moq       *MoqStmt_starGenType
}

// MoqStmt_starGenType_QueryContext_anyParams isolates the any params functions
// of the Stmt_starGenType type
type MoqStmt_starGenType_QueryContext_anyParams struct {
	Recorder *MoqStmt_starGenType_QueryContext_fnRecorder
}

// MoqStmt_starGenType_Query_params holds the params of the Stmt_starGenType
// type
type MoqStmt_starGenType_Query_params struct{ Args []any }

// MoqStmt_starGenType_Query_paramsKey holds the map key params of the
// Stmt_starGenType type
type MoqStmt_starGenType_Query_paramsKey struct {
	Params struct{}
	Hashes struct{ Args hash.Hash }
}

// MoqStmt_starGenType_Query_resultsByParams contains the results for a given
// set of parameters for the Stmt_starGenType type
type MoqStmt_starGenType_Query_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqStmt_starGenType_Query_paramsKey]*MoqStmt_starGenType_Query_results
}

// MoqStmt_starGenType_Query_doFn defines the type of function needed when
// calling AndDo for the Stmt_starGenType type
type MoqStmt_starGenType_Query_doFn func(args ...any)

// MoqStmt_starGenType_Query_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Stmt_starGenType type
type MoqStmt_starGenType_Query_doReturnFn func(args ...any) (*sql.Rows, error)

// MoqStmt_starGenType_Query_results holds the results of the Stmt_starGenType
// type
type MoqStmt_starGenType_Query_results struct {
	Params  MoqStmt_starGenType_Query_params
	Results []struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_Query_doFn
		DoReturnFn MoqStmt_starGenType_Query_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqStmt_starGenType_Query_fnRecorder routes recorded function calls to the
// MoqStmt_starGenType moq
type MoqStmt_starGenType_Query_fnRecorder struct {
	Params    MoqStmt_starGenType_Query_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqStmt_starGenType_Query_results
	Moq       *MoqStmt_starGenType
}

// MoqStmt_starGenType_Query_anyParams isolates the any params functions of the
// Stmt_starGenType type
type MoqStmt_starGenType_Query_anyParams struct {
	Recorder *MoqStmt_starGenType_Query_fnRecorder
}

// MoqStmt_starGenType_QueryRowContext_params holds the params of the
// Stmt_starGenType type
type MoqStmt_starGenType_QueryRowContext_params struct {
	Ctx  context.Context
	Args []any
}

// MoqStmt_starGenType_QueryRowContext_paramsKey holds the map key params of
// the Stmt_starGenType type
type MoqStmt_starGenType_QueryRowContext_paramsKey struct {
	Params struct{ Ctx context.Context }
	Hashes struct {
		Ctx  hash.Hash
		Args hash.Hash
	}
}

// MoqStmt_starGenType_QueryRowContext_resultsByParams contains the results for
// a given set of parameters for the Stmt_starGenType type
type MoqStmt_starGenType_QueryRowContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqStmt_starGenType_QueryRowContext_paramsKey]*MoqStmt_starGenType_QueryRowContext_results
}

// MoqStmt_starGenType_QueryRowContext_doFn defines the type of function needed
// when calling AndDo for the Stmt_starGenType type
type MoqStmt_starGenType_QueryRowContext_doFn func(ctx context.Context, args ...any)

// MoqStmt_starGenType_QueryRowContext_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Stmt_starGenType type
type MoqStmt_starGenType_QueryRowContext_doReturnFn func(ctx context.Context, args ...any) *sql.Row

// MoqStmt_starGenType_QueryRowContext_results holds the results of the
// Stmt_starGenType type
type MoqStmt_starGenType_QueryRowContext_results struct {
	Params  MoqStmt_starGenType_QueryRowContext_params
	Results []struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_QueryRowContext_doFn
		DoReturnFn MoqStmt_starGenType_QueryRowContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqStmt_starGenType_QueryRowContext_fnRecorder routes recorded function
// calls to the MoqStmt_starGenType moq
type MoqStmt_starGenType_QueryRowContext_fnRecorder struct {
	Params    MoqStmt_starGenType_QueryRowContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqStmt_starGenType_QueryRowContext_results
	Moq       *MoqStmt_starGenType
}

// MoqStmt_starGenType_QueryRowContext_anyParams isolates the any params
// functions of the Stmt_starGenType type
type MoqStmt_starGenType_QueryRowContext_anyParams struct {
	Recorder *MoqStmt_starGenType_QueryRowContext_fnRecorder
}

// MoqStmt_starGenType_QueryRow_params holds the params of the Stmt_starGenType
// type
type MoqStmt_starGenType_QueryRow_params struct{ Args []any }

// MoqStmt_starGenType_QueryRow_paramsKey holds the map key params of the
// Stmt_starGenType type
type MoqStmt_starGenType_QueryRow_paramsKey struct {
	Params struct{}
	Hashes struct{ Args hash.Hash }
}

// MoqStmt_starGenType_QueryRow_resultsByParams contains the results for a
// given set of parameters for the Stmt_starGenType type
type MoqStmt_starGenType_QueryRow_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqStmt_starGenType_QueryRow_paramsKey]*MoqStmt_starGenType_QueryRow_results
}

// MoqStmt_starGenType_QueryRow_doFn defines the type of function needed when
// calling AndDo for the Stmt_starGenType type
type MoqStmt_starGenType_QueryRow_doFn func(args ...any)

// MoqStmt_starGenType_QueryRow_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Stmt_starGenType type
type MoqStmt_starGenType_QueryRow_doReturnFn func(args ...any) *sql.Row

// MoqStmt_starGenType_QueryRow_results holds the results of the
// Stmt_starGenType type
type MoqStmt_starGenType_QueryRow_results struct {
	Params  MoqStmt_starGenType_QueryRow_params
	Results []struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_QueryRow_doFn
		DoReturnFn MoqStmt_starGenType_QueryRow_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqStmt_starGenType_QueryRow_fnRecorder routes recorded function calls to
// the MoqStmt_starGenType moq
type MoqStmt_starGenType_QueryRow_fnRecorder struct {
	Params    MoqStmt_starGenType_QueryRow_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqStmt_starGenType_QueryRow_results
	Moq       *MoqStmt_starGenType
}

// MoqStmt_starGenType_QueryRow_anyParams isolates the any params functions of
// the Stmt_starGenType type
type MoqStmt_starGenType_QueryRow_anyParams struct {
	Recorder *MoqStmt_starGenType_QueryRow_fnRecorder
}

// MoqStmt_starGenType_Close_params holds the params of the Stmt_starGenType
// type
type MoqStmt_starGenType_Close_params struct{}

// MoqStmt_starGenType_Close_paramsKey holds the map key params of the
// Stmt_starGenType type
type MoqStmt_starGenType_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqStmt_starGenType_Close_resultsByParams contains the results for a given
// set of parameters for the Stmt_starGenType type
type MoqStmt_starGenType_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqStmt_starGenType_Close_paramsKey]*MoqStmt_starGenType_Close_results
}

// MoqStmt_starGenType_Close_doFn defines the type of function needed when
// calling AndDo for the Stmt_starGenType type
type MoqStmt_starGenType_Close_doFn func()

// MoqStmt_starGenType_Close_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Stmt_starGenType type
type MoqStmt_starGenType_Close_doReturnFn func() error

// MoqStmt_starGenType_Close_results holds the results of the Stmt_starGenType
// type
type MoqStmt_starGenType_Close_results struct {
	Params  MoqStmt_starGenType_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_Close_doFn
		DoReturnFn MoqStmt_starGenType_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqStmt_starGenType_Close_fnRecorder routes recorded function calls to the
// MoqStmt_starGenType moq
type MoqStmt_starGenType_Close_fnRecorder struct {
	Params    MoqStmt_starGenType_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqStmt_starGenType_Close_results
	Moq       *MoqStmt_starGenType
}

// MoqStmt_starGenType_Close_anyParams isolates the any params functions of the
// Stmt_starGenType type
type MoqStmt_starGenType_Close_anyParams struct {
	Recorder *MoqStmt_starGenType_Close_fnRecorder
}

// NewMoqStmt_starGenType creates a new moq of the Stmt_starGenType type
func NewMoqStmt_starGenType(scene *moq.Scene, config *moq.Config) *MoqStmt_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqStmt_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqStmt_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				ExecContext struct {
					Ctx  moq.ParamIndexing
					Args moq.ParamIndexing
				}
				Exec struct {
					Args moq.ParamIndexing
				}
				QueryContext struct {
					Ctx  moq.ParamIndexing
					Args moq.ParamIndexing
				}
				Query struct {
					Args moq.ParamIndexing
				}
				QueryRowContext struct {
					Ctx  moq.ParamIndexing
					Args moq.ParamIndexing
				}
				QueryRow struct {
					Args moq.ParamIndexing
				}
				Close struct{}
			}
		}{ParameterIndexing: struct {
			ExecContext struct {
				Ctx  moq.ParamIndexing
				Args moq.ParamIndexing
			}
			Exec struct {
				Args moq.ParamIndexing
			}
			QueryContext struct {
				Ctx  moq.ParamIndexing
				Args moq.ParamIndexing
			}
			Query struct {
				Args moq.ParamIndexing
			}
			QueryRowContext struct {
				Ctx  moq.ParamIndexing
				Args moq.ParamIndexing
			}
			QueryRow struct {
				Args moq.ParamIndexing
			}
			Close struct{}
		}{
			ExecContext: struct {
				Ctx  moq.ParamIndexing
				Args moq.ParamIndexing
			}{
				Ctx:  moq.ParamIndexByHash,
				Args: moq.ParamIndexByHash,
			},
			Exec: struct {
				Args moq.ParamIndexing
			}{
				Args: moq.ParamIndexByHash,
			},
			QueryContext: struct {
				Ctx  moq.ParamIndexing
				Args moq.ParamIndexing
			}{
				Ctx:  moq.ParamIndexByHash,
				Args: moq.ParamIndexByHash,
			},
			Query: struct {
				Args moq.ParamIndexing
			}{
				Args: moq.ParamIndexByHash,
			},
			QueryRowContext: struct {
				Ctx  moq.ParamIndexing
				Args moq.ParamIndexing
			}{
				Ctx:  moq.ParamIndexByHash,
				Args: moq.ParamIndexByHash,
			},
			QueryRow: struct {
				Args moq.ParamIndexing
			}{
				Args: moq.ParamIndexByHash,
			},
			Close: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Stmt_starGenType type
func (m *MoqStmt_starGenType) Mock() *MoqStmt_starGenType_mock { return m.Moq }

func (m *MoqStmt_starGenType_mock) ExecContext(ctx context.Context, args ...any) (result1 sql.Result, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqStmt_starGenType_ExecContext_params{
		Ctx:  ctx,
		Args: args,
	}
	var results *MoqStmt_starGenType_ExecContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ExecContext {
		paramsKey := m.Moq.ParamsKey_ExecContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ExecContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ExecContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ExecContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(ctx, args...)
	}
	return
}

func (m *MoqStmt_starGenType_mock) Exec(args ...any) (result1 sql.Result, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqStmt_starGenType_Exec_params{
		Args: args,
	}
	var results *MoqStmt_starGenType_Exec_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Exec {
		paramsKey := m.Moq.ParamsKey_Exec(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Exec(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Exec(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Exec(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(args...)
	}
	return
}

func (m *MoqStmt_starGenType_mock) QueryContext(ctx context.Context, args ...any) (result1 *sql.Rows, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqStmt_starGenType_QueryContext_params{
		Ctx:  ctx,
		Args: args,
	}
	var results *MoqStmt_starGenType_QueryContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_QueryContext {
		paramsKey := m.Moq.ParamsKey_QueryContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_QueryContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_QueryContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_QueryContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(ctx, args...)
	}
	return
}

func (m *MoqStmt_starGenType_mock) Query(args ...any) (result1 *sql.Rows, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqStmt_starGenType_Query_params{
		Args: args,
	}
	var results *MoqStmt_starGenType_Query_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Query {
		paramsKey := m.Moq.ParamsKey_Query(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Query(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Query(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Query(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(args...)
	}
	return
}

func (m *MoqStmt_starGenType_mock) QueryRowContext(ctx context.Context, args ...any) (result1 *sql.Row) {
	m.Moq.Scene.T.Helper()
	params := MoqStmt_starGenType_QueryRowContext_params{
		Ctx:  ctx,
		Args: args,
	}
	var results *MoqStmt_starGenType_QueryRowContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_QueryRowContext {
		paramsKey := m.Moq.ParamsKey_QueryRowContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_QueryRowContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_QueryRowContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_QueryRowContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(ctx, args...)
	}
	return
}

func (m *MoqStmt_starGenType_mock) QueryRow(args ...any) (result1 *sql.Row) {
	m.Moq.Scene.T.Helper()
	params := MoqStmt_starGenType_QueryRow_params{
		Args: args,
	}
	var results *MoqStmt_starGenType_QueryRow_results
	for _, resultsByParams := range m.Moq.ResultsByParams_QueryRow {
		paramsKey := m.Moq.ParamsKey_QueryRow(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_QueryRow(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_QueryRow(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_QueryRow(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(args...)
	}
	return
}

func (m *MoqStmt_starGenType_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqStmt_starGenType_Close_params{}
	var results *MoqStmt_starGenType_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Stmt_starGenType type
func (m *MoqStmt_starGenType) OnCall() *MoqStmt_starGenType_recorder {
	return &MoqStmt_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqStmt_starGenType_recorder) ExecContext(ctx context.Context, args ...any) *MoqStmt_starGenType_ExecContext_fnRecorder {
	return &MoqStmt_starGenType_ExecContext_fnRecorder{
		Params: MoqStmt_starGenType_ExecContext_params{
			Ctx:  ctx,
			Args: args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqStmt_starGenType_ExecContext_fnRecorder) Any() *MoqStmt_starGenType_ExecContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExecContext(r.Params))
		return nil
	}
	return &MoqStmt_starGenType_ExecContext_anyParams{Recorder: r}
}

func (a *MoqStmt_starGenType_ExecContext_anyParams) Ctx() *MoqStmt_starGenType_ExecContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqStmt_starGenType_ExecContext_anyParams) Args() *MoqStmt_starGenType_ExecContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqStmt_starGenType_ExecContext_fnRecorder) Seq() *MoqStmt_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExecContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqStmt_starGenType_ExecContext_fnRecorder) NoSeq() *MoqStmt_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExecContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqStmt_starGenType_ExecContext_fnRecorder) ReturnResults(result1 sql.Result, result2 error) *MoqStmt_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_ExecContext_doFn
		DoReturnFn MoqStmt_starGenType_ExecContext_doReturnFn
	}{
		Values: &struct {
			Result1 sql.Result
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqStmt_starGenType_ExecContext_fnRecorder) AndDo(fn MoqStmt_starGenType_ExecContext_doFn) *MoqStmt_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqStmt_starGenType_ExecContext_fnRecorder) DoReturnResults(fn MoqStmt_starGenType_ExecContext_doReturnFn) *MoqStmt_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_ExecContext_doFn
		DoReturnFn MoqStmt_starGenType_ExecContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqStmt_starGenType_ExecContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqStmt_starGenType_ExecContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ExecContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqStmt_starGenType_ExecContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqStmt_starGenType_ExecContext_paramsKey]*MoqStmt_starGenType_ExecContext_results{},
		}
		r.Moq.ResultsByParams_ExecContext = append(r.Moq.ResultsByParams_ExecContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ExecContext) {
			copy(r.Moq.ResultsByParams_ExecContext[insertAt+1:], r.Moq.ResultsByParams_ExecContext[insertAt:0])
			r.Moq.ResultsByParams_ExecContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ExecContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqStmt_starGenType_ExecContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqStmt_starGenType_ExecContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqStmt_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 sql.Result
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqStmt_starGenType_ExecContext_doFn
				DoReturnFn MoqStmt_starGenType_ExecContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqStmt_starGenType) PrettyParams_ExecContext(params MoqStmt_starGenType_ExecContext_params) string {
	return fmt.Sprintf("ExecContext(%#v, %#v)", params.Ctx, params.Args)
}

func (m *MoqStmt_starGenType) ParamsKey_ExecContext(params MoqStmt_starGenType_ExecContext_params, anyParams uint64) MoqStmt_starGenType_ExecContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ExecContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.ExecContext.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the ExecContext function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqStmt_starGenType_ExecContext_paramsKey{
		Params: struct{ Ctx context.Context }{
			Ctx: ctxUsed,
		},
		Hashes: struct {
			Ctx  hash.Hash
			Args hash.Hash
		}{
			Ctx:  ctxUsedHash,
			Args: argsUsedHash,
		},
	}
}

func (m *MoqStmt_starGenType_recorder) Exec(args ...any) *MoqStmt_starGenType_Exec_fnRecorder {
	return &MoqStmt_starGenType_Exec_fnRecorder{
		Params: MoqStmt_starGenType_Exec_params{
			Args: args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqStmt_starGenType_Exec_fnRecorder) Any() *MoqStmt_starGenType_Exec_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Exec(r.Params))
		return nil
	}
	return &MoqStmt_starGenType_Exec_anyParams{Recorder: r}
}

func (a *MoqStmt_starGenType_Exec_anyParams) Args() *MoqStmt_starGenType_Exec_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqStmt_starGenType_Exec_fnRecorder) Seq() *MoqStmt_starGenType_Exec_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Exec(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqStmt_starGenType_Exec_fnRecorder) NoSeq() *MoqStmt_starGenType_Exec_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Exec(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqStmt_starGenType_Exec_fnRecorder) ReturnResults(result1 sql.Result, result2 error) *MoqStmt_starGenType_Exec_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_Exec_doFn
		DoReturnFn MoqStmt_starGenType_Exec_doReturnFn
	}{
		Values: &struct {
			Result1 sql.Result
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqStmt_starGenType_Exec_fnRecorder) AndDo(fn MoqStmt_starGenType_Exec_doFn) *MoqStmt_starGenType_Exec_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqStmt_starGenType_Exec_fnRecorder) DoReturnResults(fn MoqStmt_starGenType_Exec_doReturnFn) *MoqStmt_starGenType_Exec_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_Exec_doFn
		DoReturnFn MoqStmt_starGenType_Exec_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqStmt_starGenType_Exec_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqStmt_starGenType_Exec_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Exec {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqStmt_starGenType_Exec_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqStmt_starGenType_Exec_paramsKey]*MoqStmt_starGenType_Exec_results{},
		}
		r.Moq.ResultsByParams_Exec = append(r.Moq.ResultsByParams_Exec, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Exec) {
			copy(r.Moq.ResultsByParams_Exec[insertAt+1:], r.Moq.ResultsByParams_Exec[insertAt:0])
			r.Moq.ResultsByParams_Exec[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Exec(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqStmt_starGenType_Exec_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqStmt_starGenType_Exec_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqStmt_starGenType_Exec_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 sql.Result
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqStmt_starGenType_Exec_doFn
				DoReturnFn MoqStmt_starGenType_Exec_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqStmt_starGenType) PrettyParams_Exec(params MoqStmt_starGenType_Exec_params) string {
	return fmt.Sprintf("Exec(%#v)", params.Args)
}

func (m *MoqStmt_starGenType) ParamsKey_Exec(params MoqStmt_starGenType_Exec_params, anyParams uint64) MoqStmt_starGenType_Exec_paramsKey {
	m.Scene.T.Helper()
	var argsUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Exec.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the Exec function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqStmt_starGenType_Exec_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Args hash.Hash }{
			Args: argsUsedHash,
		},
	}
}

func (m *MoqStmt_starGenType_recorder) QueryContext(ctx context.Context, args ...any) *MoqStmt_starGenType_QueryContext_fnRecorder {
	return &MoqStmt_starGenType_QueryContext_fnRecorder{
		Params: MoqStmt_starGenType_QueryContext_params{
			Ctx:  ctx,
			Args: args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqStmt_starGenType_QueryContext_fnRecorder) Any() *MoqStmt_starGenType_QueryContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryContext(r.Params))
		return nil
	}
	return &MoqStmt_starGenType_QueryContext_anyParams{Recorder: r}
}

func (a *MoqStmt_starGenType_QueryContext_anyParams) Ctx() *MoqStmt_starGenType_QueryContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqStmt_starGenType_QueryContext_anyParams) Args() *MoqStmt_starGenType_QueryContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqStmt_starGenType_QueryContext_fnRecorder) Seq() *MoqStmt_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqStmt_starGenType_QueryContext_fnRecorder) NoSeq() *MoqStmt_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqStmt_starGenType_QueryContext_fnRecorder) ReturnResults(result1 *sql.Rows, result2 error) *MoqStmt_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_QueryContext_doFn
		DoReturnFn MoqStmt_starGenType_QueryContext_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Rows
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqStmt_starGenType_QueryContext_fnRecorder) AndDo(fn MoqStmt_starGenType_QueryContext_doFn) *MoqStmt_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqStmt_starGenType_QueryContext_fnRecorder) DoReturnResults(fn MoqStmt_starGenType_QueryContext_doReturnFn) *MoqStmt_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_QueryContext_doFn
		DoReturnFn MoqStmt_starGenType_QueryContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqStmt_starGenType_QueryContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqStmt_starGenType_QueryContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_QueryContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqStmt_starGenType_QueryContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqStmt_starGenType_QueryContext_paramsKey]*MoqStmt_starGenType_QueryContext_results{},
		}
		r.Moq.ResultsByParams_QueryContext = append(r.Moq.ResultsByParams_QueryContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_QueryContext) {
			copy(r.Moq.ResultsByParams_QueryContext[insertAt+1:], r.Moq.ResultsByParams_QueryContext[insertAt:0])
			r.Moq.ResultsByParams_QueryContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_QueryContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqStmt_starGenType_QueryContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqStmt_starGenType_QueryContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqStmt_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Rows
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqStmt_starGenType_QueryContext_doFn
				DoReturnFn MoqStmt_starGenType_QueryContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqStmt_starGenType) PrettyParams_QueryContext(params MoqStmt_starGenType_QueryContext_params) string {
	return fmt.Sprintf("QueryContext(%#v, %#v)", params.Ctx, params.Args)
}

func (m *MoqStmt_starGenType) ParamsKey_QueryContext(params MoqStmt_starGenType_QueryContext_params, anyParams uint64) MoqStmt_starGenType_QueryContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.QueryContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.QueryContext.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the QueryContext function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqStmt_starGenType_QueryContext_paramsKey{
		Params: struct{ Ctx context.Context }{
			Ctx: ctxUsed,
		},
		Hashes: struct {
			Ctx  hash.Hash
			Args hash.Hash
		}{
			Ctx:  ctxUsedHash,
			Args: argsUsedHash,
		},
	}
}

func (m *MoqStmt_starGenType_recorder) Query(args ...any) *MoqStmt_starGenType_Query_fnRecorder {
	return &MoqStmt_starGenType_Query_fnRecorder{
		Params: MoqStmt_starGenType_Query_params{
			Args: args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqStmt_starGenType_Query_fnRecorder) Any() *MoqStmt_starGenType_Query_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Query(r.Params))
		return nil
	}
	return &MoqStmt_starGenType_Query_anyParams{Recorder: r}
}

func (a *MoqStmt_starGenType_Query_anyParams) Args() *MoqStmt_starGenType_Query_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqStmt_starGenType_Query_fnRecorder) Seq() *MoqStmt_starGenType_Query_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Query(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqStmt_starGenType_Query_fnRecorder) NoSeq() *MoqStmt_starGenType_Query_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Query(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqStmt_starGenType_Query_fnRecorder) ReturnResults(result1 *sql.Rows, result2 error) *MoqStmt_starGenType_Query_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_Query_doFn
		DoReturnFn MoqStmt_starGenType_Query_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Rows
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqStmt_starGenType_Query_fnRecorder) AndDo(fn MoqStmt_starGenType_Query_doFn) *MoqStmt_starGenType_Query_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqStmt_starGenType_Query_fnRecorder) DoReturnResults(fn MoqStmt_starGenType_Query_doReturnFn) *MoqStmt_starGenType_Query_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_Query_doFn
		DoReturnFn MoqStmt_starGenType_Query_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqStmt_starGenType_Query_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqStmt_starGenType_Query_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Query {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqStmt_starGenType_Query_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqStmt_starGenType_Query_paramsKey]*MoqStmt_starGenType_Query_results{},
		}
		r.Moq.ResultsByParams_Query = append(r.Moq.ResultsByParams_Query, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Query) {
			copy(r.Moq.ResultsByParams_Query[insertAt+1:], r.Moq.ResultsByParams_Query[insertAt:0])
			r.Moq.ResultsByParams_Query[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Query(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqStmt_starGenType_Query_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqStmt_starGenType_Query_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqStmt_starGenType_Query_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Rows
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqStmt_starGenType_Query_doFn
				DoReturnFn MoqStmt_starGenType_Query_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqStmt_starGenType) PrettyParams_Query(params MoqStmt_starGenType_Query_params) string {
	return fmt.Sprintf("Query(%#v)", params.Args)
}

func (m *MoqStmt_starGenType) ParamsKey_Query(params MoqStmt_starGenType_Query_params, anyParams uint64) MoqStmt_starGenType_Query_paramsKey {
	m.Scene.T.Helper()
	var argsUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Query.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the Query function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqStmt_starGenType_Query_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Args hash.Hash }{
			Args: argsUsedHash,
		},
	}
}

func (m *MoqStmt_starGenType_recorder) QueryRowContext(ctx context.Context, args ...any) *MoqStmt_starGenType_QueryRowContext_fnRecorder {
	return &MoqStmt_starGenType_QueryRowContext_fnRecorder{
		Params: MoqStmt_starGenType_QueryRowContext_params{
			Ctx:  ctx,
			Args: args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqStmt_starGenType_QueryRowContext_fnRecorder) Any() *MoqStmt_starGenType_QueryRowContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRowContext(r.Params))
		return nil
	}
	return &MoqStmt_starGenType_QueryRowContext_anyParams{Recorder: r}
}

func (a *MoqStmt_starGenType_QueryRowContext_anyParams) Ctx() *MoqStmt_starGenType_QueryRowContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqStmt_starGenType_QueryRowContext_anyParams) Args() *MoqStmt_starGenType_QueryRowContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqStmt_starGenType_QueryRowContext_fnRecorder) Seq() *MoqStmt_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRowContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqStmt_starGenType_QueryRowContext_fnRecorder) NoSeq() *MoqStmt_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRowContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqStmt_starGenType_QueryRowContext_fnRecorder) ReturnResults(result1 *sql.Row) *MoqStmt_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_QueryRowContext_doFn
		DoReturnFn MoqStmt_starGenType_QueryRowContext_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Row
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqStmt_starGenType_QueryRowContext_fnRecorder) AndDo(fn MoqStmt_starGenType_QueryRowContext_doFn) *MoqStmt_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqStmt_starGenType_QueryRowContext_fnRecorder) DoReturnResults(fn MoqStmt_starGenType_QueryRowContext_doReturnFn) *MoqStmt_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_QueryRowContext_doFn
		DoReturnFn MoqStmt_starGenType_QueryRowContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqStmt_starGenType_QueryRowContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqStmt_starGenType_QueryRowContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_QueryRowContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqStmt_starGenType_QueryRowContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqStmt_starGenType_QueryRowContext_paramsKey]*MoqStmt_starGenType_QueryRowContext_results{},
		}
		r.Moq.ResultsByParams_QueryRowContext = append(r.Moq.ResultsByParams_QueryRowContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_QueryRowContext) {
			copy(r.Moq.ResultsByParams_QueryRowContext[insertAt+1:], r.Moq.ResultsByParams_QueryRowContext[insertAt:0])
			r.Moq.ResultsByParams_QueryRowContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_QueryRowContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqStmt_starGenType_QueryRowContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqStmt_starGenType_QueryRowContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqStmt_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Row
				}
				Sequence   uint32
				DoFn       MoqStmt_starGenType_QueryRowContext_doFn
				DoReturnFn MoqStmt_starGenType_QueryRowContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqStmt_starGenType) PrettyParams_QueryRowContext(params MoqStmt_starGenType_QueryRowContext_params) string {
	return fmt.Sprintf("QueryRowContext(%#v, %#v)", params.Ctx, params.Args)
}

func (m *MoqStmt_starGenType) ParamsKey_QueryRowContext(params MoqStmt_starGenType_QueryRowContext_params, anyParams uint64) MoqStmt_starGenType_QueryRowContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.QueryRowContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.QueryRowContext.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the QueryRowContext function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqStmt_starGenType_QueryRowContext_paramsKey{
		Params: struct{ Ctx context.Context }{
			Ctx: ctxUsed,
		},
		Hashes: struct {
			Ctx  hash.Hash
			Args hash.Hash
		}{
			Ctx:  ctxUsedHash,
			Args: argsUsedHash,
		},
	}
}

func (m *MoqStmt_starGenType_recorder) QueryRow(args ...any) *MoqStmt_starGenType_QueryRow_fnRecorder {
	return &MoqStmt_starGenType_QueryRow_fnRecorder{
		Params: MoqStmt_starGenType_QueryRow_params{
			Args: args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqStmt_starGenType_QueryRow_fnRecorder) Any() *MoqStmt_starGenType_QueryRow_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRow(r.Params))
		return nil
	}
	return &MoqStmt_starGenType_QueryRow_anyParams{Recorder: r}
}

func (a *MoqStmt_starGenType_QueryRow_anyParams) Args() *MoqStmt_starGenType_QueryRow_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqStmt_starGenType_QueryRow_fnRecorder) Seq() *MoqStmt_starGenType_QueryRow_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRow(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqStmt_starGenType_QueryRow_fnRecorder) NoSeq() *MoqStmt_starGenType_QueryRow_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRow(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqStmt_starGenType_QueryRow_fnRecorder) ReturnResults(result1 *sql.Row) *MoqStmt_starGenType_QueryRow_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_QueryRow_doFn
		DoReturnFn MoqStmt_starGenType_QueryRow_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Row
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqStmt_starGenType_QueryRow_fnRecorder) AndDo(fn MoqStmt_starGenType_QueryRow_doFn) *MoqStmt_starGenType_QueryRow_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqStmt_starGenType_QueryRow_fnRecorder) DoReturnResults(fn MoqStmt_starGenType_QueryRow_doReturnFn) *MoqStmt_starGenType_QueryRow_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_QueryRow_doFn
		DoReturnFn MoqStmt_starGenType_QueryRow_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqStmt_starGenType_QueryRow_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqStmt_starGenType_QueryRow_resultsByParams
	for n, res := range r.Moq.ResultsByParams_QueryRow {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqStmt_starGenType_QueryRow_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqStmt_starGenType_QueryRow_paramsKey]*MoqStmt_starGenType_QueryRow_results{},
		}
		r.Moq.ResultsByParams_QueryRow = append(r.Moq.ResultsByParams_QueryRow, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_QueryRow) {
			copy(r.Moq.ResultsByParams_QueryRow[insertAt+1:], r.Moq.ResultsByParams_QueryRow[insertAt:0])
			r.Moq.ResultsByParams_QueryRow[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_QueryRow(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqStmt_starGenType_QueryRow_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqStmt_starGenType_QueryRow_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqStmt_starGenType_QueryRow_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Row
				}
				Sequence   uint32
				DoFn       MoqStmt_starGenType_QueryRow_doFn
				DoReturnFn MoqStmt_starGenType_QueryRow_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqStmt_starGenType) PrettyParams_QueryRow(params MoqStmt_starGenType_QueryRow_params) string {
	return fmt.Sprintf("QueryRow(%#v)", params.Args)
}

func (m *MoqStmt_starGenType) ParamsKey_QueryRow(params MoqStmt_starGenType_QueryRow_params, anyParams uint64) MoqStmt_starGenType_QueryRow_paramsKey {
	m.Scene.T.Helper()
	var argsUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.QueryRow.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the QueryRow function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqStmt_starGenType_QueryRow_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Args hash.Hash }{
			Args: argsUsedHash,
		},
	}
}

func (m *MoqStmt_starGenType_recorder) Close() *MoqStmt_starGenType_Close_fnRecorder {
	return &MoqStmt_starGenType_Close_fnRecorder{
		Params:   MoqStmt_starGenType_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqStmt_starGenType_Close_fnRecorder) Any() *MoqStmt_starGenType_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqStmt_starGenType_Close_anyParams{Recorder: r}
}

func (r *MoqStmt_starGenType_Close_fnRecorder) Seq() *MoqStmt_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqStmt_starGenType_Close_fnRecorder) NoSeq() *MoqStmt_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqStmt_starGenType_Close_fnRecorder) ReturnResults(result1 error) *MoqStmt_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_Close_doFn
		DoReturnFn MoqStmt_starGenType_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqStmt_starGenType_Close_fnRecorder) AndDo(fn MoqStmt_starGenType_Close_doFn) *MoqStmt_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqStmt_starGenType_Close_fnRecorder) DoReturnResults(fn MoqStmt_starGenType_Close_doReturnFn) *MoqStmt_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqStmt_starGenType_Close_doFn
		DoReturnFn MoqStmt_starGenType_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqStmt_starGenType_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqStmt_starGenType_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqStmt_starGenType_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqStmt_starGenType_Close_paramsKey]*MoqStmt_starGenType_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqStmt_starGenType_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqStmt_starGenType_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqStmt_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqStmt_starGenType_Close_doFn
				DoReturnFn MoqStmt_starGenType_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqStmt_starGenType) PrettyParams_Close(params MoqStmt_starGenType_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqStmt_starGenType) ParamsKey_Close(params MoqStmt_starGenType_Close_params, anyParams uint64) MoqStmt_starGenType_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqStmt_starGenType_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqStmt_starGenType) Reset() {
	m.ResultsByParams_ExecContext = nil
	m.ResultsByParams_Exec = nil
	m.ResultsByParams_QueryContext = nil
	m.ResultsByParams_Query = nil
	m.ResultsByParams_QueryRowContext = nil
	m.ResultsByParams_QueryRow = nil
	m.ResultsByParams_Close = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqStmt_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_ExecContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ExecContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Exec {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Exec(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_QueryContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_QueryContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Query {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Query(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_QueryRowContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_QueryRowContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_QueryRow {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_QueryRow(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
}
