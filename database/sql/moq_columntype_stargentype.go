// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package sql

import (
	"fmt"
	"math/bits"
	"reflect"
	"sync/atomic"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that sql.ColumnType_starGenType is
// mocked completely
var _ ColumnType_starGenType = (*MoqColumnType_starGenType_mock)(nil)

// ColumnType_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type ColumnType_starGenType interface {
	Name() string
	Length() (length int64, ok bool)
	DecimalSize() (precision, scale int64, ok bool)
	ScanType() reflect.Type
	Nullable() (nullable, ok bool)
	DatabaseTypeName() string
}

// MoqColumnType_starGenType holds the state of a moq of the
// ColumnType_starGenType type
type MoqColumnType_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqColumnType_starGenType_mock

	ResultsByParams_Name             []MoqColumnType_starGenType_Name_resultsByParams
	ResultsByParams_Length           []MoqColumnType_starGenType_Length_resultsByParams
	ResultsByParams_DecimalSize      []MoqColumnType_starGenType_DecimalSize_resultsByParams
	ResultsByParams_ScanType         []MoqColumnType_starGenType_ScanType_resultsByParams
	ResultsByParams_Nullable         []MoqColumnType_starGenType_Nullable_resultsByParams
	ResultsByParams_DatabaseTypeName []MoqColumnType_starGenType_DatabaseTypeName_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Name             struct{}
			Length           struct{}
			DecimalSize      struct{}
			ScanType         struct{}
			Nullable         struct{}
			DatabaseTypeName struct{}
		}
	}
}

// MoqColumnType_starGenType_mock isolates the mock interface of the
// ColumnType_starGenType type
type MoqColumnType_starGenType_mock struct {
	Moq *MoqColumnType_starGenType
}

// MoqColumnType_starGenType_recorder isolates the recorder interface of the
// ColumnType_starGenType type
type MoqColumnType_starGenType_recorder struct {
	Moq *MoqColumnType_starGenType
}

// MoqColumnType_starGenType_Name_params holds the params of the
// ColumnType_starGenType type
type MoqColumnType_starGenType_Name_params struct{}

// MoqColumnType_starGenType_Name_paramsKey holds the map key params of the
// ColumnType_starGenType type
type MoqColumnType_starGenType_Name_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqColumnType_starGenType_Name_resultsByParams contains the results for a
// given set of parameters for the ColumnType_starGenType type
type MoqColumnType_starGenType_Name_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqColumnType_starGenType_Name_paramsKey]*MoqColumnType_starGenType_Name_results
}

// MoqColumnType_starGenType_Name_doFn defines the type of function needed when
// calling AndDo for the ColumnType_starGenType type
type MoqColumnType_starGenType_Name_doFn func()

// MoqColumnType_starGenType_Name_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ColumnType_starGenType type
type MoqColumnType_starGenType_Name_doReturnFn func() string

// MoqColumnType_starGenType_Name_results holds the results of the
// ColumnType_starGenType type
type MoqColumnType_starGenType_Name_results struct {
	Params  MoqColumnType_starGenType_Name_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqColumnType_starGenType_Name_doFn
		DoReturnFn MoqColumnType_starGenType_Name_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqColumnType_starGenType_Name_fnRecorder routes recorded function calls to
// the MoqColumnType_starGenType moq
type MoqColumnType_starGenType_Name_fnRecorder struct {
	Params    MoqColumnType_starGenType_Name_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqColumnType_starGenType_Name_results
	Moq       *MoqColumnType_starGenType
}

// MoqColumnType_starGenType_Name_anyParams isolates the any params functions
// of the ColumnType_starGenType type
type MoqColumnType_starGenType_Name_anyParams struct {
	Recorder *MoqColumnType_starGenType_Name_fnRecorder
}

// MoqColumnType_starGenType_Length_params holds the params of the
// ColumnType_starGenType type
type MoqColumnType_starGenType_Length_params struct{}

// MoqColumnType_starGenType_Length_paramsKey holds the map key params of the
// ColumnType_starGenType type
type MoqColumnType_starGenType_Length_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqColumnType_starGenType_Length_resultsByParams contains the results for a
// given set of parameters for the ColumnType_starGenType type
type MoqColumnType_starGenType_Length_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqColumnType_starGenType_Length_paramsKey]*MoqColumnType_starGenType_Length_results
}

// MoqColumnType_starGenType_Length_doFn defines the type of function needed
// when calling AndDo for the ColumnType_starGenType type
type MoqColumnType_starGenType_Length_doFn func()

// MoqColumnType_starGenType_Length_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ColumnType_starGenType type
type MoqColumnType_starGenType_Length_doReturnFn func() (length int64, ok bool)

// MoqColumnType_starGenType_Length_results holds the results of the
// ColumnType_starGenType type
type MoqColumnType_starGenType_Length_results struct {
	Params  MoqColumnType_starGenType_Length_params
	Results []struct {
		Values *struct {
			Length int64
			Ok     bool
		}
		Sequence   uint32
		DoFn       MoqColumnType_starGenType_Length_doFn
		DoReturnFn MoqColumnType_starGenType_Length_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqColumnType_starGenType_Length_fnRecorder routes recorded function calls
// to the MoqColumnType_starGenType moq
type MoqColumnType_starGenType_Length_fnRecorder struct {
	Params    MoqColumnType_starGenType_Length_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqColumnType_starGenType_Length_results
	Moq       *MoqColumnType_starGenType
}

// MoqColumnType_starGenType_Length_anyParams isolates the any params functions
// of the ColumnType_starGenType type
type MoqColumnType_starGenType_Length_anyParams struct {
	Recorder *MoqColumnType_starGenType_Length_fnRecorder
}

// MoqColumnType_starGenType_DecimalSize_params holds the params of the
// ColumnType_starGenType type
type MoqColumnType_starGenType_DecimalSize_params struct{}

// MoqColumnType_starGenType_DecimalSize_paramsKey holds the map key params of
// the ColumnType_starGenType type
type MoqColumnType_starGenType_DecimalSize_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqColumnType_starGenType_DecimalSize_resultsByParams contains the results
// for a given set of parameters for the ColumnType_starGenType type
type MoqColumnType_starGenType_DecimalSize_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqColumnType_starGenType_DecimalSize_paramsKey]*MoqColumnType_starGenType_DecimalSize_results
}

// MoqColumnType_starGenType_DecimalSize_doFn defines the type of function
// needed when calling AndDo for the ColumnType_starGenType type
type MoqColumnType_starGenType_DecimalSize_doFn func()

// MoqColumnType_starGenType_DecimalSize_doReturnFn defines the type of
// function needed when calling DoReturnResults for the ColumnType_starGenType
// type
type MoqColumnType_starGenType_DecimalSize_doReturnFn func() (precision, scale int64, ok bool)

// MoqColumnType_starGenType_DecimalSize_results holds the results of the
// ColumnType_starGenType type
type MoqColumnType_starGenType_DecimalSize_results struct {
	Params  MoqColumnType_starGenType_DecimalSize_params
	Results []struct {
		Values *struct {
			Precision, Scale int64
			Ok               bool
		}
		Sequence   uint32
		DoFn       MoqColumnType_starGenType_DecimalSize_doFn
		DoReturnFn MoqColumnType_starGenType_DecimalSize_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqColumnType_starGenType_DecimalSize_fnRecorder routes recorded function
// calls to the MoqColumnType_starGenType moq
type MoqColumnType_starGenType_DecimalSize_fnRecorder struct {
	Params    MoqColumnType_starGenType_DecimalSize_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqColumnType_starGenType_DecimalSize_results
	Moq       *MoqColumnType_starGenType
}

// MoqColumnType_starGenType_DecimalSize_anyParams isolates the any params
// functions of the ColumnType_starGenType type
type MoqColumnType_starGenType_DecimalSize_anyParams struct {
	Recorder *MoqColumnType_starGenType_DecimalSize_fnRecorder
}

// MoqColumnType_starGenType_ScanType_params holds the params of the
// ColumnType_starGenType type
type MoqColumnType_starGenType_ScanType_params struct{}

// MoqColumnType_starGenType_ScanType_paramsKey holds the map key params of the
// ColumnType_starGenType type
type MoqColumnType_starGenType_ScanType_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqColumnType_starGenType_ScanType_resultsByParams contains the results for
// a given set of parameters for the ColumnType_starGenType type
type MoqColumnType_starGenType_ScanType_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqColumnType_starGenType_ScanType_paramsKey]*MoqColumnType_starGenType_ScanType_results
}

// MoqColumnType_starGenType_ScanType_doFn defines the type of function needed
// when calling AndDo for the ColumnType_starGenType type
type MoqColumnType_starGenType_ScanType_doFn func()

// MoqColumnType_starGenType_ScanType_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ColumnType_starGenType type
type MoqColumnType_starGenType_ScanType_doReturnFn func() reflect.Type

// MoqColumnType_starGenType_ScanType_results holds the results of the
// ColumnType_starGenType type
type MoqColumnType_starGenType_ScanType_results struct {
	Params  MoqColumnType_starGenType_ScanType_params
	Results []struct {
		Values *struct {
			Result1 reflect.Type
		}
		Sequence   uint32
		DoFn       MoqColumnType_starGenType_ScanType_doFn
		DoReturnFn MoqColumnType_starGenType_ScanType_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqColumnType_starGenType_ScanType_fnRecorder routes recorded function calls
// to the MoqColumnType_starGenType moq
type MoqColumnType_starGenType_ScanType_fnRecorder struct {
	Params    MoqColumnType_starGenType_ScanType_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqColumnType_starGenType_ScanType_results
	Moq       *MoqColumnType_starGenType
}

// MoqColumnType_starGenType_ScanType_anyParams isolates the any params
// functions of the ColumnType_starGenType type
type MoqColumnType_starGenType_ScanType_anyParams struct {
	Recorder *MoqColumnType_starGenType_ScanType_fnRecorder
}

// MoqColumnType_starGenType_Nullable_params holds the params of the
// ColumnType_starGenType type
type MoqColumnType_starGenType_Nullable_params struct{}

// MoqColumnType_starGenType_Nullable_paramsKey holds the map key params of the
// ColumnType_starGenType type
type MoqColumnType_starGenType_Nullable_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqColumnType_starGenType_Nullable_resultsByParams contains the results for
// a given set of parameters for the ColumnType_starGenType type
type MoqColumnType_starGenType_Nullable_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqColumnType_starGenType_Nullable_paramsKey]*MoqColumnType_starGenType_Nullable_results
}

// MoqColumnType_starGenType_Nullable_doFn defines the type of function needed
// when calling AndDo for the ColumnType_starGenType type
type MoqColumnType_starGenType_Nullable_doFn func()

// MoqColumnType_starGenType_Nullable_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ColumnType_starGenType type
type MoqColumnType_starGenType_Nullable_doReturnFn func() (nullable, ok bool)

// MoqColumnType_starGenType_Nullable_results holds the results of the
// ColumnType_starGenType type
type MoqColumnType_starGenType_Nullable_results struct {
	Params  MoqColumnType_starGenType_Nullable_params
	Results []struct {
		Values     *struct{ Nullable, Ok bool }
		Sequence   uint32
		DoFn       MoqColumnType_starGenType_Nullable_doFn
		DoReturnFn MoqColumnType_starGenType_Nullable_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqColumnType_starGenType_Nullable_fnRecorder routes recorded function calls
// to the MoqColumnType_starGenType moq
type MoqColumnType_starGenType_Nullable_fnRecorder struct {
	Params    MoqColumnType_starGenType_Nullable_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqColumnType_starGenType_Nullable_results
	Moq       *MoqColumnType_starGenType
}

// MoqColumnType_starGenType_Nullable_anyParams isolates the any params
// functions of the ColumnType_starGenType type
type MoqColumnType_starGenType_Nullable_anyParams struct {
	Recorder *MoqColumnType_starGenType_Nullable_fnRecorder
}

// MoqColumnType_starGenType_DatabaseTypeName_params holds the params of the
// ColumnType_starGenType type
type MoqColumnType_starGenType_DatabaseTypeName_params struct{}

// MoqColumnType_starGenType_DatabaseTypeName_paramsKey holds the map key
// params of the ColumnType_starGenType type
type MoqColumnType_starGenType_DatabaseTypeName_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqColumnType_starGenType_DatabaseTypeName_resultsByParams contains the
// results for a given set of parameters for the ColumnType_starGenType type
type MoqColumnType_starGenType_DatabaseTypeName_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqColumnType_starGenType_DatabaseTypeName_paramsKey]*MoqColumnType_starGenType_DatabaseTypeName_results
}

// MoqColumnType_starGenType_DatabaseTypeName_doFn defines the type of function
// needed when calling AndDo for the ColumnType_starGenType type
type MoqColumnType_starGenType_DatabaseTypeName_doFn func()

// MoqColumnType_starGenType_DatabaseTypeName_doReturnFn defines the type of
// function needed when calling DoReturnResults for the ColumnType_starGenType
// type
type MoqColumnType_starGenType_DatabaseTypeName_doReturnFn func() string

// MoqColumnType_starGenType_DatabaseTypeName_results holds the results of the
// ColumnType_starGenType type
type MoqColumnType_starGenType_DatabaseTypeName_results struct {
	Params  MoqColumnType_starGenType_DatabaseTypeName_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqColumnType_starGenType_DatabaseTypeName_doFn
		DoReturnFn MoqColumnType_starGenType_DatabaseTypeName_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqColumnType_starGenType_DatabaseTypeName_fnRecorder routes recorded
// function calls to the MoqColumnType_starGenType moq
type MoqColumnType_starGenType_DatabaseTypeName_fnRecorder struct {
	Params    MoqColumnType_starGenType_DatabaseTypeName_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqColumnType_starGenType_DatabaseTypeName_results
	Moq       *MoqColumnType_starGenType
}

// MoqColumnType_starGenType_DatabaseTypeName_anyParams isolates the any params
// functions of the ColumnType_starGenType type
type MoqColumnType_starGenType_DatabaseTypeName_anyParams struct {
	Recorder *MoqColumnType_starGenType_DatabaseTypeName_fnRecorder
}

// NewMoqColumnType_starGenType creates a new moq of the ColumnType_starGenType
// type
func NewMoqColumnType_starGenType(scene *moq.Scene, config *moq.Config) *MoqColumnType_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqColumnType_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqColumnType_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Name             struct{}
				Length           struct{}
				DecimalSize      struct{}
				ScanType         struct{}
				Nullable         struct{}
				DatabaseTypeName struct{}
			}
		}{ParameterIndexing: struct {
			Name             struct{}
			Length           struct{}
			DecimalSize      struct{}
			ScanType         struct{}
			Nullable         struct{}
			DatabaseTypeName struct{}
		}{
			Name:             struct{}{},
			Length:           struct{}{},
			DecimalSize:      struct{}{},
			ScanType:         struct{}{},
			Nullable:         struct{}{},
			DatabaseTypeName: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the ColumnType_starGenType type
func (m *MoqColumnType_starGenType) Mock() *MoqColumnType_starGenType_mock { return m.Moq }

func (m *MoqColumnType_starGenType_mock) Name() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqColumnType_starGenType_Name_params{}
	var results *MoqColumnType_starGenType_Name_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Name {
		paramsKey := m.Moq.ParamsKey_Name(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Name(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Name(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Name(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqColumnType_starGenType_mock) Length() (length int64, ok bool) {
	m.Moq.Scene.T.Helper()
	params := MoqColumnType_starGenType_Length_params{}
	var results *MoqColumnType_starGenType_Length_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Length {
		paramsKey := m.Moq.ParamsKey_Length(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Length(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Length(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Length(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		length = result.Values.Length
		ok = result.Values.Ok
	}
	if result.DoReturnFn != nil {
		length, ok = result.DoReturnFn()
	}
	return
}

func (m *MoqColumnType_starGenType_mock) DecimalSize() (precision, scale int64, ok bool) {
	m.Moq.Scene.T.Helper()
	params := MoqColumnType_starGenType_DecimalSize_params{}
	var results *MoqColumnType_starGenType_DecimalSize_results
	for _, resultsByParams := range m.Moq.ResultsByParams_DecimalSize {
		paramsKey := m.Moq.ParamsKey_DecimalSize(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_DecimalSize(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_DecimalSize(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_DecimalSize(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		precision = result.Values.Precision
		scale = result.Values.Scale
		ok = result.Values.Ok
	}
	if result.DoReturnFn != nil {
		precision, scale, ok = result.DoReturnFn()
	}
	return
}

func (m *MoqColumnType_starGenType_mock) ScanType() (result1 reflect.Type) {
	m.Moq.Scene.T.Helper()
	params := MoqColumnType_starGenType_ScanType_params{}
	var results *MoqColumnType_starGenType_ScanType_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ScanType {
		paramsKey := m.Moq.ParamsKey_ScanType(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ScanType(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ScanType(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ScanType(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqColumnType_starGenType_mock) Nullable() (nullable, ok bool) {
	m.Moq.Scene.T.Helper()
	params := MoqColumnType_starGenType_Nullable_params{}
	var results *MoqColumnType_starGenType_Nullable_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Nullable {
		paramsKey := m.Moq.ParamsKey_Nullable(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Nullable(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Nullable(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Nullable(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		nullable = result.Values.Nullable
		ok = result.Values.Ok
	}
	if result.DoReturnFn != nil {
		nullable, ok = result.DoReturnFn()
	}
	return
}

func (m *MoqColumnType_starGenType_mock) DatabaseTypeName() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqColumnType_starGenType_DatabaseTypeName_params{}
	var results *MoqColumnType_starGenType_DatabaseTypeName_results
	for _, resultsByParams := range m.Moq.ResultsByParams_DatabaseTypeName {
		paramsKey := m.Moq.ParamsKey_DatabaseTypeName(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_DatabaseTypeName(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_DatabaseTypeName(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_DatabaseTypeName(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the ColumnType_starGenType
// type
func (m *MoqColumnType_starGenType) OnCall() *MoqColumnType_starGenType_recorder {
	return &MoqColumnType_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqColumnType_starGenType_recorder) Name() *MoqColumnType_starGenType_Name_fnRecorder {
	return &MoqColumnType_starGenType_Name_fnRecorder{
		Params:   MoqColumnType_starGenType_Name_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqColumnType_starGenType_Name_fnRecorder) Any() *MoqColumnType_starGenType_Name_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	return &MoqColumnType_starGenType_Name_anyParams{Recorder: r}
}

func (r *MoqColumnType_starGenType_Name_fnRecorder) Seq() *MoqColumnType_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqColumnType_starGenType_Name_fnRecorder) NoSeq() *MoqColumnType_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqColumnType_starGenType_Name_fnRecorder) ReturnResults(result1 string) *MoqColumnType_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqColumnType_starGenType_Name_doFn
		DoReturnFn MoqColumnType_starGenType_Name_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqColumnType_starGenType_Name_fnRecorder) AndDo(fn MoqColumnType_starGenType_Name_doFn) *MoqColumnType_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqColumnType_starGenType_Name_fnRecorder) DoReturnResults(fn MoqColumnType_starGenType_Name_doReturnFn) *MoqColumnType_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqColumnType_starGenType_Name_doFn
		DoReturnFn MoqColumnType_starGenType_Name_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqColumnType_starGenType_Name_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqColumnType_starGenType_Name_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Name {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqColumnType_starGenType_Name_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqColumnType_starGenType_Name_paramsKey]*MoqColumnType_starGenType_Name_results{},
		}
		r.Moq.ResultsByParams_Name = append(r.Moq.ResultsByParams_Name, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Name) {
			copy(r.Moq.ResultsByParams_Name[insertAt+1:], r.Moq.ResultsByParams_Name[insertAt:0])
			r.Moq.ResultsByParams_Name[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Name(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqColumnType_starGenType_Name_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqColumnType_starGenType_Name_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqColumnType_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqColumnType_starGenType_Name_doFn
				DoReturnFn MoqColumnType_starGenType_Name_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqColumnType_starGenType) PrettyParams_Name(params MoqColumnType_starGenType_Name_params) string {
	return fmt.Sprintf("Name()")
}

func (m *MoqColumnType_starGenType) ParamsKey_Name(params MoqColumnType_starGenType_Name_params, anyParams uint64) MoqColumnType_starGenType_Name_paramsKey {
	m.Scene.T.Helper()
	return MoqColumnType_starGenType_Name_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqColumnType_starGenType_recorder) Length() *MoqColumnType_starGenType_Length_fnRecorder {
	return &MoqColumnType_starGenType_Length_fnRecorder{
		Params:   MoqColumnType_starGenType_Length_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqColumnType_starGenType_Length_fnRecorder) Any() *MoqColumnType_starGenType_Length_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Length(r.Params))
		return nil
	}
	return &MoqColumnType_starGenType_Length_anyParams{Recorder: r}
}

func (r *MoqColumnType_starGenType_Length_fnRecorder) Seq() *MoqColumnType_starGenType_Length_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Length(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqColumnType_starGenType_Length_fnRecorder) NoSeq() *MoqColumnType_starGenType_Length_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Length(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqColumnType_starGenType_Length_fnRecorder) ReturnResults(length int64, ok bool) *MoqColumnType_starGenType_Length_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Length int64
			Ok     bool
		}
		Sequence   uint32
		DoFn       MoqColumnType_starGenType_Length_doFn
		DoReturnFn MoqColumnType_starGenType_Length_doReturnFn
	}{
		Values: &struct {
			Length int64
			Ok     bool
		}{
			Length: length,
			Ok:     ok,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqColumnType_starGenType_Length_fnRecorder) AndDo(fn MoqColumnType_starGenType_Length_doFn) *MoqColumnType_starGenType_Length_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqColumnType_starGenType_Length_fnRecorder) DoReturnResults(fn MoqColumnType_starGenType_Length_doReturnFn) *MoqColumnType_starGenType_Length_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Length int64
			Ok     bool
		}
		Sequence   uint32
		DoFn       MoqColumnType_starGenType_Length_doFn
		DoReturnFn MoqColumnType_starGenType_Length_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqColumnType_starGenType_Length_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqColumnType_starGenType_Length_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Length {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqColumnType_starGenType_Length_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqColumnType_starGenType_Length_paramsKey]*MoqColumnType_starGenType_Length_results{},
		}
		r.Moq.ResultsByParams_Length = append(r.Moq.ResultsByParams_Length, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Length) {
			copy(r.Moq.ResultsByParams_Length[insertAt+1:], r.Moq.ResultsByParams_Length[insertAt:0])
			r.Moq.ResultsByParams_Length[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Length(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqColumnType_starGenType_Length_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqColumnType_starGenType_Length_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqColumnType_starGenType_Length_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Length int64
					Ok     bool
				}
				Sequence   uint32
				DoFn       MoqColumnType_starGenType_Length_doFn
				DoReturnFn MoqColumnType_starGenType_Length_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqColumnType_starGenType) PrettyParams_Length(params MoqColumnType_starGenType_Length_params) string {
	return fmt.Sprintf("Length()")
}

func (m *MoqColumnType_starGenType) ParamsKey_Length(params MoqColumnType_starGenType_Length_params, anyParams uint64) MoqColumnType_starGenType_Length_paramsKey {
	m.Scene.T.Helper()
	return MoqColumnType_starGenType_Length_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqColumnType_starGenType_recorder) DecimalSize() *MoqColumnType_starGenType_DecimalSize_fnRecorder {
	return &MoqColumnType_starGenType_DecimalSize_fnRecorder{
		Params:   MoqColumnType_starGenType_DecimalSize_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqColumnType_starGenType_DecimalSize_fnRecorder) Any() *MoqColumnType_starGenType_DecimalSize_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DecimalSize(r.Params))
		return nil
	}
	return &MoqColumnType_starGenType_DecimalSize_anyParams{Recorder: r}
}

func (r *MoqColumnType_starGenType_DecimalSize_fnRecorder) Seq() *MoqColumnType_starGenType_DecimalSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DecimalSize(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqColumnType_starGenType_DecimalSize_fnRecorder) NoSeq() *MoqColumnType_starGenType_DecimalSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DecimalSize(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqColumnType_starGenType_DecimalSize_fnRecorder) ReturnResults(precision, scale int64, ok bool) *MoqColumnType_starGenType_DecimalSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Precision, Scale int64
			Ok               bool
		}
		Sequence   uint32
		DoFn       MoqColumnType_starGenType_DecimalSize_doFn
		DoReturnFn MoqColumnType_starGenType_DecimalSize_doReturnFn
	}{
		Values: &struct {
			Precision, Scale int64
			Ok               bool
		}{
			Precision: precision,
			Scale:     scale,
			Ok:        ok,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqColumnType_starGenType_DecimalSize_fnRecorder) AndDo(fn MoqColumnType_starGenType_DecimalSize_doFn) *MoqColumnType_starGenType_DecimalSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqColumnType_starGenType_DecimalSize_fnRecorder) DoReturnResults(fn MoqColumnType_starGenType_DecimalSize_doReturnFn) *MoqColumnType_starGenType_DecimalSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Precision, Scale int64
			Ok               bool
		}
		Sequence   uint32
		DoFn       MoqColumnType_starGenType_DecimalSize_doFn
		DoReturnFn MoqColumnType_starGenType_DecimalSize_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqColumnType_starGenType_DecimalSize_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqColumnType_starGenType_DecimalSize_resultsByParams
	for n, res := range r.Moq.ResultsByParams_DecimalSize {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqColumnType_starGenType_DecimalSize_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqColumnType_starGenType_DecimalSize_paramsKey]*MoqColumnType_starGenType_DecimalSize_results{},
		}
		r.Moq.ResultsByParams_DecimalSize = append(r.Moq.ResultsByParams_DecimalSize, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_DecimalSize) {
			copy(r.Moq.ResultsByParams_DecimalSize[insertAt+1:], r.Moq.ResultsByParams_DecimalSize[insertAt:0])
			r.Moq.ResultsByParams_DecimalSize[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_DecimalSize(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqColumnType_starGenType_DecimalSize_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqColumnType_starGenType_DecimalSize_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqColumnType_starGenType_DecimalSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Precision, Scale int64
					Ok               bool
				}
				Sequence   uint32
				DoFn       MoqColumnType_starGenType_DecimalSize_doFn
				DoReturnFn MoqColumnType_starGenType_DecimalSize_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqColumnType_starGenType) PrettyParams_DecimalSize(params MoqColumnType_starGenType_DecimalSize_params) string {
	return fmt.Sprintf("DecimalSize()")
}

func (m *MoqColumnType_starGenType) ParamsKey_DecimalSize(params MoqColumnType_starGenType_DecimalSize_params, anyParams uint64) MoqColumnType_starGenType_DecimalSize_paramsKey {
	m.Scene.T.Helper()
	return MoqColumnType_starGenType_DecimalSize_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqColumnType_starGenType_recorder) ScanType() *MoqColumnType_starGenType_ScanType_fnRecorder {
	return &MoqColumnType_starGenType_ScanType_fnRecorder{
		Params:   MoqColumnType_starGenType_ScanType_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqColumnType_starGenType_ScanType_fnRecorder) Any() *MoqColumnType_starGenType_ScanType_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ScanType(r.Params))
		return nil
	}
	return &MoqColumnType_starGenType_ScanType_anyParams{Recorder: r}
}

func (r *MoqColumnType_starGenType_ScanType_fnRecorder) Seq() *MoqColumnType_starGenType_ScanType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ScanType(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqColumnType_starGenType_ScanType_fnRecorder) NoSeq() *MoqColumnType_starGenType_ScanType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ScanType(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqColumnType_starGenType_ScanType_fnRecorder) ReturnResults(result1 reflect.Type) *MoqColumnType_starGenType_ScanType_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 reflect.Type
		}
		Sequence   uint32
		DoFn       MoqColumnType_starGenType_ScanType_doFn
		DoReturnFn MoqColumnType_starGenType_ScanType_doReturnFn
	}{
		Values: &struct {
			Result1 reflect.Type
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqColumnType_starGenType_ScanType_fnRecorder) AndDo(fn MoqColumnType_starGenType_ScanType_doFn) *MoqColumnType_starGenType_ScanType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqColumnType_starGenType_ScanType_fnRecorder) DoReturnResults(fn MoqColumnType_starGenType_ScanType_doReturnFn) *MoqColumnType_starGenType_ScanType_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 reflect.Type
		}
		Sequence   uint32
		DoFn       MoqColumnType_starGenType_ScanType_doFn
		DoReturnFn MoqColumnType_starGenType_ScanType_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqColumnType_starGenType_ScanType_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqColumnType_starGenType_ScanType_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ScanType {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqColumnType_starGenType_ScanType_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqColumnType_starGenType_ScanType_paramsKey]*MoqColumnType_starGenType_ScanType_results{},
		}
		r.Moq.ResultsByParams_ScanType = append(r.Moq.ResultsByParams_ScanType, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ScanType) {
			copy(r.Moq.ResultsByParams_ScanType[insertAt+1:], r.Moq.ResultsByParams_ScanType[insertAt:0])
			r.Moq.ResultsByParams_ScanType[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ScanType(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqColumnType_starGenType_ScanType_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqColumnType_starGenType_ScanType_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqColumnType_starGenType_ScanType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 reflect.Type
				}
				Sequence   uint32
				DoFn       MoqColumnType_starGenType_ScanType_doFn
				DoReturnFn MoqColumnType_starGenType_ScanType_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqColumnType_starGenType) PrettyParams_ScanType(params MoqColumnType_starGenType_ScanType_params) string {
	return fmt.Sprintf("ScanType()")
}

func (m *MoqColumnType_starGenType) ParamsKey_ScanType(params MoqColumnType_starGenType_ScanType_params, anyParams uint64) MoqColumnType_starGenType_ScanType_paramsKey {
	m.Scene.T.Helper()
	return MoqColumnType_starGenType_ScanType_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqColumnType_starGenType_recorder) Nullable() *MoqColumnType_starGenType_Nullable_fnRecorder {
	return &MoqColumnType_starGenType_Nullable_fnRecorder{
		Params:   MoqColumnType_starGenType_Nullable_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqColumnType_starGenType_Nullable_fnRecorder) Any() *MoqColumnType_starGenType_Nullable_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Nullable(r.Params))
		return nil
	}
	return &MoqColumnType_starGenType_Nullable_anyParams{Recorder: r}
}

func (r *MoqColumnType_starGenType_Nullable_fnRecorder) Seq() *MoqColumnType_starGenType_Nullable_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Nullable(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqColumnType_starGenType_Nullable_fnRecorder) NoSeq() *MoqColumnType_starGenType_Nullable_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Nullable(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqColumnType_starGenType_Nullable_fnRecorder) ReturnResults(nullable, ok bool) *MoqColumnType_starGenType_Nullable_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Nullable, Ok bool }
		Sequence   uint32
		DoFn       MoqColumnType_starGenType_Nullable_doFn
		DoReturnFn MoqColumnType_starGenType_Nullable_doReturnFn
	}{
		Values: &struct{ Nullable, Ok bool }{
			Nullable: nullable,
			Ok:       ok,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqColumnType_starGenType_Nullable_fnRecorder) AndDo(fn MoqColumnType_starGenType_Nullable_doFn) *MoqColumnType_starGenType_Nullable_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqColumnType_starGenType_Nullable_fnRecorder) DoReturnResults(fn MoqColumnType_starGenType_Nullable_doReturnFn) *MoqColumnType_starGenType_Nullable_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Nullable, Ok bool }
		Sequence   uint32
		DoFn       MoqColumnType_starGenType_Nullable_doFn
		DoReturnFn MoqColumnType_starGenType_Nullable_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqColumnType_starGenType_Nullable_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqColumnType_starGenType_Nullable_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Nullable {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqColumnType_starGenType_Nullable_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqColumnType_starGenType_Nullable_paramsKey]*MoqColumnType_starGenType_Nullable_results{},
		}
		r.Moq.ResultsByParams_Nullable = append(r.Moq.ResultsByParams_Nullable, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Nullable) {
			copy(r.Moq.ResultsByParams_Nullable[insertAt+1:], r.Moq.ResultsByParams_Nullable[insertAt:0])
			r.Moq.ResultsByParams_Nullable[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Nullable(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqColumnType_starGenType_Nullable_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqColumnType_starGenType_Nullable_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqColumnType_starGenType_Nullable_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ Nullable, Ok bool }
				Sequence   uint32
				DoFn       MoqColumnType_starGenType_Nullable_doFn
				DoReturnFn MoqColumnType_starGenType_Nullable_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqColumnType_starGenType) PrettyParams_Nullable(params MoqColumnType_starGenType_Nullable_params) string {
	return fmt.Sprintf("Nullable()")
}

func (m *MoqColumnType_starGenType) ParamsKey_Nullable(params MoqColumnType_starGenType_Nullable_params, anyParams uint64) MoqColumnType_starGenType_Nullable_paramsKey {
	m.Scene.T.Helper()
	return MoqColumnType_starGenType_Nullable_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqColumnType_starGenType_recorder) DatabaseTypeName() *MoqColumnType_starGenType_DatabaseTypeName_fnRecorder {
	return &MoqColumnType_starGenType_DatabaseTypeName_fnRecorder{
		Params:   MoqColumnType_starGenType_DatabaseTypeName_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqColumnType_starGenType_DatabaseTypeName_fnRecorder) Any() *MoqColumnType_starGenType_DatabaseTypeName_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DatabaseTypeName(r.Params))
		return nil
	}
	return &MoqColumnType_starGenType_DatabaseTypeName_anyParams{Recorder: r}
}

func (r *MoqColumnType_starGenType_DatabaseTypeName_fnRecorder) Seq() *MoqColumnType_starGenType_DatabaseTypeName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DatabaseTypeName(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqColumnType_starGenType_DatabaseTypeName_fnRecorder) NoSeq() *MoqColumnType_starGenType_DatabaseTypeName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DatabaseTypeName(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqColumnType_starGenType_DatabaseTypeName_fnRecorder) ReturnResults(result1 string) *MoqColumnType_starGenType_DatabaseTypeName_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqColumnType_starGenType_DatabaseTypeName_doFn
		DoReturnFn MoqColumnType_starGenType_DatabaseTypeName_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqColumnType_starGenType_DatabaseTypeName_fnRecorder) AndDo(fn MoqColumnType_starGenType_DatabaseTypeName_doFn) *MoqColumnType_starGenType_DatabaseTypeName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqColumnType_starGenType_DatabaseTypeName_fnRecorder) DoReturnResults(fn MoqColumnType_starGenType_DatabaseTypeName_doReturnFn) *MoqColumnType_starGenType_DatabaseTypeName_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqColumnType_starGenType_DatabaseTypeName_doFn
		DoReturnFn MoqColumnType_starGenType_DatabaseTypeName_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqColumnType_starGenType_DatabaseTypeName_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqColumnType_starGenType_DatabaseTypeName_resultsByParams
	for n, res := range r.Moq.ResultsByParams_DatabaseTypeName {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqColumnType_starGenType_DatabaseTypeName_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqColumnType_starGenType_DatabaseTypeName_paramsKey]*MoqColumnType_starGenType_DatabaseTypeName_results{},
		}
		r.Moq.ResultsByParams_DatabaseTypeName = append(r.Moq.ResultsByParams_DatabaseTypeName, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_DatabaseTypeName) {
			copy(r.Moq.ResultsByParams_DatabaseTypeName[insertAt+1:], r.Moq.ResultsByParams_DatabaseTypeName[insertAt:0])
			r.Moq.ResultsByParams_DatabaseTypeName[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_DatabaseTypeName(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqColumnType_starGenType_DatabaseTypeName_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqColumnType_starGenType_DatabaseTypeName_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqColumnType_starGenType_DatabaseTypeName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqColumnType_starGenType_DatabaseTypeName_doFn
				DoReturnFn MoqColumnType_starGenType_DatabaseTypeName_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqColumnType_starGenType) PrettyParams_DatabaseTypeName(params MoqColumnType_starGenType_DatabaseTypeName_params) string {
	return fmt.Sprintf("DatabaseTypeName()")
}

func (m *MoqColumnType_starGenType) ParamsKey_DatabaseTypeName(params MoqColumnType_starGenType_DatabaseTypeName_params, anyParams uint64) MoqColumnType_starGenType_DatabaseTypeName_paramsKey {
	m.Scene.T.Helper()
	return MoqColumnType_starGenType_DatabaseTypeName_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqColumnType_starGenType) Reset() {
	m.ResultsByParams_Name = nil
	m.ResultsByParams_Length = nil
	m.ResultsByParams_DecimalSize = nil
	m.ResultsByParams_ScanType = nil
	m.ResultsByParams_Nullable = nil
	m.ResultsByParams_DatabaseTypeName = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqColumnType_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Name {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Name(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Length {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Length(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_DecimalSize {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_DecimalSize(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ScanType {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ScanType(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Nullable {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Nullable(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_DatabaseTypeName {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_DatabaseTypeName(results.Params))
			}
		}
	}
}
