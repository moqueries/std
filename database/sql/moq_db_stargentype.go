// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package sql

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"math/bits"
	"sync/atomic"
	"time"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that sql.DB_starGenType is mocked
// completely
var _ DB_starGenType = (*MoqDB_starGenType_mock)(nil)

// DB_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type DB_starGenType interface {
	PingContext(ctx context.Context) error
	Ping() error
	Close() error
	SetMaxIdleConns(n int)
	SetMaxOpenConns(n int)
	SetConnMaxLifetime(d time.Duration)
	Stats() sql.DBStats
	PrepareContext(ctx context.Context, query string) (*sql.Stmt, error)
	Prepare(query string) (*sql.Stmt, error)
	ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error)
	Exec(query string, args ...interface{}) (sql.Result, error)
	QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)
	Query(query string, args ...interface{}) (*sql.Rows, error)
	QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row
	QueryRow(query string, args ...interface{}) *sql.Row
	BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error)
	Begin() (*sql.Tx, error)
	Driver() driver.Driver
	Conn(ctx context.Context) (*sql.Conn, error)
}

// MoqDB_starGenType holds the state of a moq of the DB_starGenType type
type MoqDB_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqDB_starGenType_mock

	ResultsByParams_PingContext        []MoqDB_starGenType_PingContext_resultsByParams
	ResultsByParams_Ping               []MoqDB_starGenType_Ping_resultsByParams
	ResultsByParams_Close              []MoqDB_starGenType_Close_resultsByParams
	ResultsByParams_SetMaxIdleConns    []MoqDB_starGenType_SetMaxIdleConns_resultsByParams
	ResultsByParams_SetMaxOpenConns    []MoqDB_starGenType_SetMaxOpenConns_resultsByParams
	ResultsByParams_SetConnMaxLifetime []MoqDB_starGenType_SetConnMaxLifetime_resultsByParams
	ResultsByParams_Stats              []MoqDB_starGenType_Stats_resultsByParams
	ResultsByParams_PrepareContext     []MoqDB_starGenType_PrepareContext_resultsByParams
	ResultsByParams_Prepare            []MoqDB_starGenType_Prepare_resultsByParams
	ResultsByParams_ExecContext        []MoqDB_starGenType_ExecContext_resultsByParams
	ResultsByParams_Exec               []MoqDB_starGenType_Exec_resultsByParams
	ResultsByParams_QueryContext       []MoqDB_starGenType_QueryContext_resultsByParams
	ResultsByParams_Query              []MoqDB_starGenType_Query_resultsByParams
	ResultsByParams_QueryRowContext    []MoqDB_starGenType_QueryRowContext_resultsByParams
	ResultsByParams_QueryRow           []MoqDB_starGenType_QueryRow_resultsByParams
	ResultsByParams_BeginTx            []MoqDB_starGenType_BeginTx_resultsByParams
	ResultsByParams_Begin              []MoqDB_starGenType_Begin_resultsByParams
	ResultsByParams_Driver             []MoqDB_starGenType_Driver_resultsByParams
	ResultsByParams_Conn               []MoqDB_starGenType_Conn_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			PingContext struct {
				Ctx moq.ParamIndexing
			}
			Ping            struct{}
			Close           struct{}
			SetMaxIdleConns struct {
				N moq.ParamIndexing
			}
			SetMaxOpenConns struct {
				N moq.ParamIndexing
			}
			SetConnMaxLifetime struct {
				D moq.ParamIndexing
			}
			Stats          struct{}
			PrepareContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
			}
			Prepare struct {
				Query moq.ParamIndexing
			}
			ExecContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			Exec struct {
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			QueryContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			Query struct {
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			QueryRowContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			QueryRow struct {
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			BeginTx struct {
				Ctx  moq.ParamIndexing
				Opts moq.ParamIndexing
			}
			Begin  struct{}
			Driver struct{}
			Conn   struct {
				Ctx moq.ParamIndexing
			}
		}
	}
	// MoqDB_starGenType_mock isolates the mock interface of the DB_starGenType
}

// type
type MoqDB_starGenType_mock struct {
	Moq *MoqDB_starGenType
}

// MoqDB_starGenType_recorder isolates the recorder interface of the
// DB_starGenType type
type MoqDB_starGenType_recorder struct {
	Moq *MoqDB_starGenType
}

// MoqDB_starGenType_PingContext_params holds the params of the DB_starGenType
// type
type MoqDB_starGenType_PingContext_params struct{ Ctx context.Context }

// MoqDB_starGenType_PingContext_paramsKey holds the map key params of the
// DB_starGenType type
type MoqDB_starGenType_PingContext_paramsKey struct {
	Params struct{ Ctx context.Context }
	Hashes struct{ Ctx hash.Hash }
}

// MoqDB_starGenType_PingContext_resultsByParams contains the results for a
// given set of parameters for the DB_starGenType type
type MoqDB_starGenType_PingContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_PingContext_paramsKey]*MoqDB_starGenType_PingContext_results
}

// MoqDB_starGenType_PingContext_doFn defines the type of function needed when
// calling AndDo for the DB_starGenType type
type MoqDB_starGenType_PingContext_doFn func(ctx context.Context)

// MoqDB_starGenType_PingContext_doReturnFn defines the type of function needed
// when calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_PingContext_doReturnFn func(ctx context.Context) error

// MoqDB_starGenType_PingContext_results holds the results of the
// DB_starGenType type
type MoqDB_starGenType_PingContext_results struct {
	Params  MoqDB_starGenType_PingContext_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_PingContext_doFn
		DoReturnFn MoqDB_starGenType_PingContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_PingContext_fnRecorder routes recorded function calls to
// the MoqDB_starGenType moq
type MoqDB_starGenType_PingContext_fnRecorder struct {
	Params    MoqDB_starGenType_PingContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_PingContext_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_PingContext_anyParams isolates the any params functions of
// the DB_starGenType type
type MoqDB_starGenType_PingContext_anyParams struct {
	Recorder *MoqDB_starGenType_PingContext_fnRecorder
}

// MoqDB_starGenType_Ping_params holds the params of the DB_starGenType type
type MoqDB_starGenType_Ping_params struct{}

// MoqDB_starGenType_Ping_paramsKey holds the map key params of the
// DB_starGenType type
type MoqDB_starGenType_Ping_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDB_starGenType_Ping_resultsByParams contains the results for a given set
// of parameters for the DB_starGenType type
type MoqDB_starGenType_Ping_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_Ping_paramsKey]*MoqDB_starGenType_Ping_results
}

// MoqDB_starGenType_Ping_doFn defines the type of function needed when calling
// AndDo for the DB_starGenType type
type MoqDB_starGenType_Ping_doFn func()

// MoqDB_starGenType_Ping_doReturnFn defines the type of function needed when
// calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_Ping_doReturnFn func() error

// MoqDB_starGenType_Ping_results holds the results of the DB_starGenType type
type MoqDB_starGenType_Ping_results struct {
	Params  MoqDB_starGenType_Ping_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Ping_doFn
		DoReturnFn MoqDB_starGenType_Ping_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_Ping_fnRecorder routes recorded function calls to the
// MoqDB_starGenType moq
type MoqDB_starGenType_Ping_fnRecorder struct {
	Params    MoqDB_starGenType_Ping_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_Ping_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_Ping_anyParams isolates the any params functions of the
// DB_starGenType type
type MoqDB_starGenType_Ping_anyParams struct {
	Recorder *MoqDB_starGenType_Ping_fnRecorder
}

// MoqDB_starGenType_Close_params holds the params of the DB_starGenType type
type MoqDB_starGenType_Close_params struct{}

// MoqDB_starGenType_Close_paramsKey holds the map key params of the
// DB_starGenType type
type MoqDB_starGenType_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDB_starGenType_Close_resultsByParams contains the results for a given set
// of parameters for the DB_starGenType type
type MoqDB_starGenType_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_Close_paramsKey]*MoqDB_starGenType_Close_results
}

// MoqDB_starGenType_Close_doFn defines the type of function needed when
// calling AndDo for the DB_starGenType type
type MoqDB_starGenType_Close_doFn func()

// MoqDB_starGenType_Close_doReturnFn defines the type of function needed when
// calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_Close_doReturnFn func() error

// MoqDB_starGenType_Close_results holds the results of the DB_starGenType type
type MoqDB_starGenType_Close_results struct {
	Params  MoqDB_starGenType_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Close_doFn
		DoReturnFn MoqDB_starGenType_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_Close_fnRecorder routes recorded function calls to the
// MoqDB_starGenType moq
type MoqDB_starGenType_Close_fnRecorder struct {
	Params    MoqDB_starGenType_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_Close_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_Close_anyParams isolates the any params functions of the
// DB_starGenType type
type MoqDB_starGenType_Close_anyParams struct {
	Recorder *MoqDB_starGenType_Close_fnRecorder
}

// MoqDB_starGenType_SetMaxIdleConns_params holds the params of the
// DB_starGenType type
type MoqDB_starGenType_SetMaxIdleConns_params struct{ N int }

// MoqDB_starGenType_SetMaxIdleConns_paramsKey holds the map key params of the
// DB_starGenType type
type MoqDB_starGenType_SetMaxIdleConns_paramsKey struct {
	Params struct{ N int }
	Hashes struct{ N hash.Hash }
}

// MoqDB_starGenType_SetMaxIdleConns_resultsByParams contains the results for a
// given set of parameters for the DB_starGenType type
type MoqDB_starGenType_SetMaxIdleConns_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_SetMaxIdleConns_paramsKey]*MoqDB_starGenType_SetMaxIdleConns_results
}

// MoqDB_starGenType_SetMaxIdleConns_doFn defines the type of function needed
// when calling AndDo for the DB_starGenType type
type MoqDB_starGenType_SetMaxIdleConns_doFn func(n int)

// MoqDB_starGenType_SetMaxIdleConns_doReturnFn defines the type of function
// needed when calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_SetMaxIdleConns_doReturnFn func(n int)

// MoqDB_starGenType_SetMaxIdleConns_results holds the results of the
// DB_starGenType type
type MoqDB_starGenType_SetMaxIdleConns_results struct {
	Params  MoqDB_starGenType_SetMaxIdleConns_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDB_starGenType_SetMaxIdleConns_doFn
		DoReturnFn MoqDB_starGenType_SetMaxIdleConns_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_SetMaxIdleConns_fnRecorder routes recorded function calls
// to the MoqDB_starGenType moq
type MoqDB_starGenType_SetMaxIdleConns_fnRecorder struct {
	Params    MoqDB_starGenType_SetMaxIdleConns_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_SetMaxIdleConns_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_SetMaxIdleConns_anyParams isolates the any params
// functions of the DB_starGenType type
type MoqDB_starGenType_SetMaxIdleConns_anyParams struct {
	Recorder *MoqDB_starGenType_SetMaxIdleConns_fnRecorder
}

// MoqDB_starGenType_SetMaxOpenConns_params holds the params of the
// DB_starGenType type
type MoqDB_starGenType_SetMaxOpenConns_params struct{ N int }

// MoqDB_starGenType_SetMaxOpenConns_paramsKey holds the map key params of the
// DB_starGenType type
type MoqDB_starGenType_SetMaxOpenConns_paramsKey struct {
	Params struct{ N int }
	Hashes struct{ N hash.Hash }
}

// MoqDB_starGenType_SetMaxOpenConns_resultsByParams contains the results for a
// given set of parameters for the DB_starGenType type
type MoqDB_starGenType_SetMaxOpenConns_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_SetMaxOpenConns_paramsKey]*MoqDB_starGenType_SetMaxOpenConns_results
}

// MoqDB_starGenType_SetMaxOpenConns_doFn defines the type of function needed
// when calling AndDo for the DB_starGenType type
type MoqDB_starGenType_SetMaxOpenConns_doFn func(n int)

// MoqDB_starGenType_SetMaxOpenConns_doReturnFn defines the type of function
// needed when calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_SetMaxOpenConns_doReturnFn func(n int)

// MoqDB_starGenType_SetMaxOpenConns_results holds the results of the
// DB_starGenType type
type MoqDB_starGenType_SetMaxOpenConns_results struct {
	Params  MoqDB_starGenType_SetMaxOpenConns_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDB_starGenType_SetMaxOpenConns_doFn
		DoReturnFn MoqDB_starGenType_SetMaxOpenConns_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_SetMaxOpenConns_fnRecorder routes recorded function calls
// to the MoqDB_starGenType moq
type MoqDB_starGenType_SetMaxOpenConns_fnRecorder struct {
	Params    MoqDB_starGenType_SetMaxOpenConns_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_SetMaxOpenConns_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_SetMaxOpenConns_anyParams isolates the any params
// functions of the DB_starGenType type
type MoqDB_starGenType_SetMaxOpenConns_anyParams struct {
	Recorder *MoqDB_starGenType_SetMaxOpenConns_fnRecorder
}

// MoqDB_starGenType_SetConnMaxLifetime_params holds the params of the
// DB_starGenType type
type MoqDB_starGenType_SetConnMaxLifetime_params struct{ D time.Duration }

// MoqDB_starGenType_SetConnMaxLifetime_paramsKey holds the map key params of
// the DB_starGenType type
type MoqDB_starGenType_SetConnMaxLifetime_paramsKey struct {
	Params struct{ D time.Duration }
	Hashes struct{ D hash.Hash }
}

// MoqDB_starGenType_SetConnMaxLifetime_resultsByParams contains the results
// for a given set of parameters for the DB_starGenType type
type MoqDB_starGenType_SetConnMaxLifetime_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_SetConnMaxLifetime_paramsKey]*MoqDB_starGenType_SetConnMaxLifetime_results
}

// MoqDB_starGenType_SetConnMaxLifetime_doFn defines the type of function
// needed when calling AndDo for the DB_starGenType type
type MoqDB_starGenType_SetConnMaxLifetime_doFn func(d time.Duration)

// MoqDB_starGenType_SetConnMaxLifetime_doReturnFn defines the type of function
// needed when calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_SetConnMaxLifetime_doReturnFn func(d time.Duration)

// MoqDB_starGenType_SetConnMaxLifetime_results holds the results of the
// DB_starGenType type
type MoqDB_starGenType_SetConnMaxLifetime_results struct {
	Params  MoqDB_starGenType_SetConnMaxLifetime_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDB_starGenType_SetConnMaxLifetime_doFn
		DoReturnFn MoqDB_starGenType_SetConnMaxLifetime_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_SetConnMaxLifetime_fnRecorder routes recorded function
// calls to the MoqDB_starGenType moq
type MoqDB_starGenType_SetConnMaxLifetime_fnRecorder struct {
	Params    MoqDB_starGenType_SetConnMaxLifetime_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_SetConnMaxLifetime_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_SetConnMaxLifetime_anyParams isolates the any params
// functions of the DB_starGenType type
type MoqDB_starGenType_SetConnMaxLifetime_anyParams struct {
	Recorder *MoqDB_starGenType_SetConnMaxLifetime_fnRecorder
}

// MoqDB_starGenType_Stats_params holds the params of the DB_starGenType type
type MoqDB_starGenType_Stats_params struct{}

// MoqDB_starGenType_Stats_paramsKey holds the map key params of the
// DB_starGenType type
type MoqDB_starGenType_Stats_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDB_starGenType_Stats_resultsByParams contains the results for a given set
// of parameters for the DB_starGenType type
type MoqDB_starGenType_Stats_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_Stats_paramsKey]*MoqDB_starGenType_Stats_results
}

// MoqDB_starGenType_Stats_doFn defines the type of function needed when
// calling AndDo for the DB_starGenType type
type MoqDB_starGenType_Stats_doFn func()

// MoqDB_starGenType_Stats_doReturnFn defines the type of function needed when
// calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_Stats_doReturnFn func() sql.DBStats

// MoqDB_starGenType_Stats_results holds the results of the DB_starGenType type
type MoqDB_starGenType_Stats_results struct {
	Params  MoqDB_starGenType_Stats_params
	Results []struct {
		Values *struct {
			Result1 sql.DBStats
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Stats_doFn
		DoReturnFn MoqDB_starGenType_Stats_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_Stats_fnRecorder routes recorded function calls to the
// MoqDB_starGenType moq
type MoqDB_starGenType_Stats_fnRecorder struct {
	Params    MoqDB_starGenType_Stats_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_Stats_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_Stats_anyParams isolates the any params functions of the
// DB_starGenType type
type MoqDB_starGenType_Stats_anyParams struct {
	Recorder *MoqDB_starGenType_Stats_fnRecorder
}

// MoqDB_starGenType_PrepareContext_params holds the params of the
// DB_starGenType type
type MoqDB_starGenType_PrepareContext_params struct {
	Ctx   context.Context
	Query string
}

// MoqDB_starGenType_PrepareContext_paramsKey holds the map key params of the
// DB_starGenType type
type MoqDB_starGenType_PrepareContext_paramsKey struct {
	Params struct {
		Ctx   context.Context
		Query string
	}
	Hashes struct {
		Ctx   hash.Hash
		Query hash.Hash
	}
}

// MoqDB_starGenType_PrepareContext_resultsByParams contains the results for a
// given set of parameters for the DB_starGenType type
type MoqDB_starGenType_PrepareContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_PrepareContext_paramsKey]*MoqDB_starGenType_PrepareContext_results
}

// MoqDB_starGenType_PrepareContext_doFn defines the type of function needed
// when calling AndDo for the DB_starGenType type
type MoqDB_starGenType_PrepareContext_doFn func(ctx context.Context, query string)

// MoqDB_starGenType_PrepareContext_doReturnFn defines the type of function
// needed when calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_PrepareContext_doReturnFn func(ctx context.Context, query string) (*sql.Stmt, error)

// MoqDB_starGenType_PrepareContext_results holds the results of the
// DB_starGenType type
type MoqDB_starGenType_PrepareContext_results struct {
	Params  MoqDB_starGenType_PrepareContext_params
	Results []struct {
		Values *struct {
			Result1 *sql.Stmt
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_PrepareContext_doFn
		DoReturnFn MoqDB_starGenType_PrepareContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_PrepareContext_fnRecorder routes recorded function calls
// to the MoqDB_starGenType moq
type MoqDB_starGenType_PrepareContext_fnRecorder struct {
	Params    MoqDB_starGenType_PrepareContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_PrepareContext_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_PrepareContext_anyParams isolates the any params functions
// of the DB_starGenType type
type MoqDB_starGenType_PrepareContext_anyParams struct {
	Recorder *MoqDB_starGenType_PrepareContext_fnRecorder
}

// MoqDB_starGenType_Prepare_params holds the params of the DB_starGenType type
type MoqDB_starGenType_Prepare_params struct{ Query string }

// MoqDB_starGenType_Prepare_paramsKey holds the map key params of the
// DB_starGenType type
type MoqDB_starGenType_Prepare_paramsKey struct {
	Params struct{ Query string }
	Hashes struct{ Query hash.Hash }
}

// MoqDB_starGenType_Prepare_resultsByParams contains the results for a given
// set of parameters for the DB_starGenType type
type MoqDB_starGenType_Prepare_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_Prepare_paramsKey]*MoqDB_starGenType_Prepare_results
}

// MoqDB_starGenType_Prepare_doFn defines the type of function needed when
// calling AndDo for the DB_starGenType type
type MoqDB_starGenType_Prepare_doFn func(query string)

// MoqDB_starGenType_Prepare_doReturnFn defines the type of function needed
// when calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_Prepare_doReturnFn func(query string) (*sql.Stmt, error)

// MoqDB_starGenType_Prepare_results holds the results of the DB_starGenType
// type
type MoqDB_starGenType_Prepare_results struct {
	Params  MoqDB_starGenType_Prepare_params
	Results []struct {
		Values *struct {
			Result1 *sql.Stmt
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Prepare_doFn
		DoReturnFn MoqDB_starGenType_Prepare_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_Prepare_fnRecorder routes recorded function calls to the
// MoqDB_starGenType moq
type MoqDB_starGenType_Prepare_fnRecorder struct {
	Params    MoqDB_starGenType_Prepare_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_Prepare_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_Prepare_anyParams isolates the any params functions of the
// DB_starGenType type
type MoqDB_starGenType_Prepare_anyParams struct {
	Recorder *MoqDB_starGenType_Prepare_fnRecorder
}

// MoqDB_starGenType_ExecContext_params holds the params of the DB_starGenType
// type
type MoqDB_starGenType_ExecContext_params struct {
	Ctx   context.Context
	Query string
	Args  []interface{}
}

// MoqDB_starGenType_ExecContext_paramsKey holds the map key params of the
// DB_starGenType type
type MoqDB_starGenType_ExecContext_paramsKey struct {
	Params struct {
		Ctx   context.Context
		Query string
	}
	Hashes struct {
		Ctx   hash.Hash
		Query hash.Hash
		Args  hash.Hash
	}
}

// MoqDB_starGenType_ExecContext_resultsByParams contains the results for a
// given set of parameters for the DB_starGenType type
type MoqDB_starGenType_ExecContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_ExecContext_paramsKey]*MoqDB_starGenType_ExecContext_results
}

// MoqDB_starGenType_ExecContext_doFn defines the type of function needed when
// calling AndDo for the DB_starGenType type
type MoqDB_starGenType_ExecContext_doFn func(ctx context.Context, query string, args ...interface{})

// MoqDB_starGenType_ExecContext_doReturnFn defines the type of function needed
// when calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_ExecContext_doReturnFn func(ctx context.Context, query string, args ...interface{}) (sql.Result, error)

// MoqDB_starGenType_ExecContext_results holds the results of the
// DB_starGenType type
type MoqDB_starGenType_ExecContext_results struct {
	Params  MoqDB_starGenType_ExecContext_params
	Results []struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_ExecContext_doFn
		DoReturnFn MoqDB_starGenType_ExecContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_ExecContext_fnRecorder routes recorded function calls to
// the MoqDB_starGenType moq
type MoqDB_starGenType_ExecContext_fnRecorder struct {
	Params    MoqDB_starGenType_ExecContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_ExecContext_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_ExecContext_anyParams isolates the any params functions of
// the DB_starGenType type
type MoqDB_starGenType_ExecContext_anyParams struct {
	Recorder *MoqDB_starGenType_ExecContext_fnRecorder
}

// MoqDB_starGenType_Exec_params holds the params of the DB_starGenType type
type MoqDB_starGenType_Exec_params struct {
	Query string
	Args  []interface{}
}

// MoqDB_starGenType_Exec_paramsKey holds the map key params of the
// DB_starGenType type
type MoqDB_starGenType_Exec_paramsKey struct {
	Params struct{ Query string }
	Hashes struct {
		Query hash.Hash
		Args  hash.Hash
	}
}

// MoqDB_starGenType_Exec_resultsByParams contains the results for a given set
// of parameters for the DB_starGenType type
type MoqDB_starGenType_Exec_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_Exec_paramsKey]*MoqDB_starGenType_Exec_results
}

// MoqDB_starGenType_Exec_doFn defines the type of function needed when calling
// AndDo for the DB_starGenType type
type MoqDB_starGenType_Exec_doFn func(query string, args ...interface{})

// MoqDB_starGenType_Exec_doReturnFn defines the type of function needed when
// calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_Exec_doReturnFn func(query string, args ...interface{}) (sql.Result, error)

// MoqDB_starGenType_Exec_results holds the results of the DB_starGenType type
type MoqDB_starGenType_Exec_results struct {
	Params  MoqDB_starGenType_Exec_params
	Results []struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Exec_doFn
		DoReturnFn MoqDB_starGenType_Exec_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_Exec_fnRecorder routes recorded function calls to the
// MoqDB_starGenType moq
type MoqDB_starGenType_Exec_fnRecorder struct {
	Params    MoqDB_starGenType_Exec_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_Exec_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_Exec_anyParams isolates the any params functions of the
// DB_starGenType type
type MoqDB_starGenType_Exec_anyParams struct {
	Recorder *MoqDB_starGenType_Exec_fnRecorder
}

// MoqDB_starGenType_QueryContext_params holds the params of the DB_starGenType
// type
type MoqDB_starGenType_QueryContext_params struct {
	Ctx   context.Context
	Query string
	Args  []interface{}
}

// MoqDB_starGenType_QueryContext_paramsKey holds the map key params of the
// DB_starGenType type
type MoqDB_starGenType_QueryContext_paramsKey struct {
	Params struct {
		Ctx   context.Context
		Query string
	}
	Hashes struct {
		Ctx   hash.Hash
		Query hash.Hash
		Args  hash.Hash
	}
}

// MoqDB_starGenType_QueryContext_resultsByParams contains the results for a
// given set of parameters for the DB_starGenType type
type MoqDB_starGenType_QueryContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_QueryContext_paramsKey]*MoqDB_starGenType_QueryContext_results
}

// MoqDB_starGenType_QueryContext_doFn defines the type of function needed when
// calling AndDo for the DB_starGenType type
type MoqDB_starGenType_QueryContext_doFn func(ctx context.Context, query string, args ...interface{})

// MoqDB_starGenType_QueryContext_doReturnFn defines the type of function
// needed when calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_QueryContext_doReturnFn func(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)

// MoqDB_starGenType_QueryContext_results holds the results of the
// DB_starGenType type
type MoqDB_starGenType_QueryContext_results struct {
	Params  MoqDB_starGenType_QueryContext_params
	Results []struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_QueryContext_doFn
		DoReturnFn MoqDB_starGenType_QueryContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_QueryContext_fnRecorder routes recorded function calls to
// the MoqDB_starGenType moq
type MoqDB_starGenType_QueryContext_fnRecorder struct {
	Params    MoqDB_starGenType_QueryContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_QueryContext_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_QueryContext_anyParams isolates the any params functions
// of the DB_starGenType type
type MoqDB_starGenType_QueryContext_anyParams struct {
	Recorder *MoqDB_starGenType_QueryContext_fnRecorder
}

// MoqDB_starGenType_Query_params holds the params of the DB_starGenType type
type MoqDB_starGenType_Query_params struct {
	Query string
	Args  []interface{}
}

// MoqDB_starGenType_Query_paramsKey holds the map key params of the
// DB_starGenType type
type MoqDB_starGenType_Query_paramsKey struct {
	Params struct{ Query string }
	Hashes struct {
		Query hash.Hash
		Args  hash.Hash
	}
}

// MoqDB_starGenType_Query_resultsByParams contains the results for a given set
// of parameters for the DB_starGenType type
type MoqDB_starGenType_Query_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_Query_paramsKey]*MoqDB_starGenType_Query_results
}

// MoqDB_starGenType_Query_doFn defines the type of function needed when
// calling AndDo for the DB_starGenType type
type MoqDB_starGenType_Query_doFn func(query string, args ...interface{})

// MoqDB_starGenType_Query_doReturnFn defines the type of function needed when
// calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_Query_doReturnFn func(query string, args ...interface{}) (*sql.Rows, error)

// MoqDB_starGenType_Query_results holds the results of the DB_starGenType type
type MoqDB_starGenType_Query_results struct {
	Params  MoqDB_starGenType_Query_params
	Results []struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Query_doFn
		DoReturnFn MoqDB_starGenType_Query_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_Query_fnRecorder routes recorded function calls to the
// MoqDB_starGenType moq
type MoqDB_starGenType_Query_fnRecorder struct {
	Params    MoqDB_starGenType_Query_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_Query_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_Query_anyParams isolates the any params functions of the
// DB_starGenType type
type MoqDB_starGenType_Query_anyParams struct {
	Recorder *MoqDB_starGenType_Query_fnRecorder
}

// MoqDB_starGenType_QueryRowContext_params holds the params of the
// DB_starGenType type
type MoqDB_starGenType_QueryRowContext_params struct {
	Ctx   context.Context
	Query string
	Args  []interface{}
}

// MoqDB_starGenType_QueryRowContext_paramsKey holds the map key params of the
// DB_starGenType type
type MoqDB_starGenType_QueryRowContext_paramsKey struct {
	Params struct {
		Ctx   context.Context
		Query string
	}
	Hashes struct {
		Ctx   hash.Hash
		Query hash.Hash
		Args  hash.Hash
	}
}

// MoqDB_starGenType_QueryRowContext_resultsByParams contains the results for a
// given set of parameters for the DB_starGenType type
type MoqDB_starGenType_QueryRowContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_QueryRowContext_paramsKey]*MoqDB_starGenType_QueryRowContext_results
}

// MoqDB_starGenType_QueryRowContext_doFn defines the type of function needed
// when calling AndDo for the DB_starGenType type
type MoqDB_starGenType_QueryRowContext_doFn func(ctx context.Context, query string, args ...interface{})

// MoqDB_starGenType_QueryRowContext_doReturnFn defines the type of function
// needed when calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_QueryRowContext_doReturnFn func(ctx context.Context, query string, args ...interface{}) *sql.Row

// MoqDB_starGenType_QueryRowContext_results holds the results of the
// DB_starGenType type
type MoqDB_starGenType_QueryRowContext_results struct {
	Params  MoqDB_starGenType_QueryRowContext_params
	Results []struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_QueryRowContext_doFn
		DoReturnFn MoqDB_starGenType_QueryRowContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_QueryRowContext_fnRecorder routes recorded function calls
// to the MoqDB_starGenType moq
type MoqDB_starGenType_QueryRowContext_fnRecorder struct {
	Params    MoqDB_starGenType_QueryRowContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_QueryRowContext_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_QueryRowContext_anyParams isolates the any params
// functions of the DB_starGenType type
type MoqDB_starGenType_QueryRowContext_anyParams struct {
	Recorder *MoqDB_starGenType_QueryRowContext_fnRecorder
}

// MoqDB_starGenType_QueryRow_params holds the params of the DB_starGenType
// type
type MoqDB_starGenType_QueryRow_params struct {
	Query string
	Args  []interface{}
}

// MoqDB_starGenType_QueryRow_paramsKey holds the map key params of the
// DB_starGenType type
type MoqDB_starGenType_QueryRow_paramsKey struct {
	Params struct{ Query string }
	Hashes struct {
		Query hash.Hash
		Args  hash.Hash
	}
}

// MoqDB_starGenType_QueryRow_resultsByParams contains the results for a given
// set of parameters for the DB_starGenType type
type MoqDB_starGenType_QueryRow_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_QueryRow_paramsKey]*MoqDB_starGenType_QueryRow_results
}

// MoqDB_starGenType_QueryRow_doFn defines the type of function needed when
// calling AndDo for the DB_starGenType type
type MoqDB_starGenType_QueryRow_doFn func(query string, args ...interface{})

// MoqDB_starGenType_QueryRow_doReturnFn defines the type of function needed
// when calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_QueryRow_doReturnFn func(query string, args ...interface{}) *sql.Row

// MoqDB_starGenType_QueryRow_results holds the results of the DB_starGenType
// type
type MoqDB_starGenType_QueryRow_results struct {
	Params  MoqDB_starGenType_QueryRow_params
	Results []struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_QueryRow_doFn
		DoReturnFn MoqDB_starGenType_QueryRow_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_QueryRow_fnRecorder routes recorded function calls to the
// MoqDB_starGenType moq
type MoqDB_starGenType_QueryRow_fnRecorder struct {
	Params    MoqDB_starGenType_QueryRow_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_QueryRow_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_QueryRow_anyParams isolates the any params functions of
// the DB_starGenType type
type MoqDB_starGenType_QueryRow_anyParams struct {
	Recorder *MoqDB_starGenType_QueryRow_fnRecorder
}

// MoqDB_starGenType_BeginTx_params holds the params of the DB_starGenType type
type MoqDB_starGenType_BeginTx_params struct {
	Ctx  context.Context
	Opts *sql.TxOptions
}

// MoqDB_starGenType_BeginTx_paramsKey holds the map key params of the
// DB_starGenType type
type MoqDB_starGenType_BeginTx_paramsKey struct {
	Params struct {
		Ctx  context.Context
		Opts *sql.TxOptions
	}
	Hashes struct {
		Ctx  hash.Hash
		Opts hash.Hash
	}
}

// MoqDB_starGenType_BeginTx_resultsByParams contains the results for a given
// set of parameters for the DB_starGenType type
type MoqDB_starGenType_BeginTx_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_BeginTx_paramsKey]*MoqDB_starGenType_BeginTx_results
}

// MoqDB_starGenType_BeginTx_doFn defines the type of function needed when
// calling AndDo for the DB_starGenType type
type MoqDB_starGenType_BeginTx_doFn func(ctx context.Context, opts *sql.TxOptions)

// MoqDB_starGenType_BeginTx_doReturnFn defines the type of function needed
// when calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_BeginTx_doReturnFn func(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error)

// MoqDB_starGenType_BeginTx_results holds the results of the DB_starGenType
// type
type MoqDB_starGenType_BeginTx_results struct {
	Params  MoqDB_starGenType_BeginTx_params
	Results []struct {
		Values *struct {
			Result1 *sql.Tx
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_BeginTx_doFn
		DoReturnFn MoqDB_starGenType_BeginTx_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_BeginTx_fnRecorder routes recorded function calls to the
// MoqDB_starGenType moq
type MoqDB_starGenType_BeginTx_fnRecorder struct {
	Params    MoqDB_starGenType_BeginTx_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_BeginTx_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_BeginTx_anyParams isolates the any params functions of the
// DB_starGenType type
type MoqDB_starGenType_BeginTx_anyParams struct {
	Recorder *MoqDB_starGenType_BeginTx_fnRecorder
}

// MoqDB_starGenType_Begin_params holds the params of the DB_starGenType type
type MoqDB_starGenType_Begin_params struct{}

// MoqDB_starGenType_Begin_paramsKey holds the map key params of the
// DB_starGenType type
type MoqDB_starGenType_Begin_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDB_starGenType_Begin_resultsByParams contains the results for a given set
// of parameters for the DB_starGenType type
type MoqDB_starGenType_Begin_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_Begin_paramsKey]*MoqDB_starGenType_Begin_results
}

// MoqDB_starGenType_Begin_doFn defines the type of function needed when
// calling AndDo for the DB_starGenType type
type MoqDB_starGenType_Begin_doFn func()

// MoqDB_starGenType_Begin_doReturnFn defines the type of function needed when
// calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_Begin_doReturnFn func() (*sql.Tx, error)

// MoqDB_starGenType_Begin_results holds the results of the DB_starGenType type
type MoqDB_starGenType_Begin_results struct {
	Params  MoqDB_starGenType_Begin_params
	Results []struct {
		Values *struct {
			Result1 *sql.Tx
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Begin_doFn
		DoReturnFn MoqDB_starGenType_Begin_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_Begin_fnRecorder routes recorded function calls to the
// MoqDB_starGenType moq
type MoqDB_starGenType_Begin_fnRecorder struct {
	Params    MoqDB_starGenType_Begin_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_Begin_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_Begin_anyParams isolates the any params functions of the
// DB_starGenType type
type MoqDB_starGenType_Begin_anyParams struct {
	Recorder *MoqDB_starGenType_Begin_fnRecorder
}

// MoqDB_starGenType_Driver_params holds the params of the DB_starGenType type
type MoqDB_starGenType_Driver_params struct{}

// MoqDB_starGenType_Driver_paramsKey holds the map key params of the
// DB_starGenType type
type MoqDB_starGenType_Driver_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDB_starGenType_Driver_resultsByParams contains the results for a given
// set of parameters for the DB_starGenType type
type MoqDB_starGenType_Driver_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_Driver_paramsKey]*MoqDB_starGenType_Driver_results
}

// MoqDB_starGenType_Driver_doFn defines the type of function needed when
// calling AndDo for the DB_starGenType type
type MoqDB_starGenType_Driver_doFn func()

// MoqDB_starGenType_Driver_doReturnFn defines the type of function needed when
// calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_Driver_doReturnFn func() driver.Driver

// MoqDB_starGenType_Driver_results holds the results of the DB_starGenType
// type
type MoqDB_starGenType_Driver_results struct {
	Params  MoqDB_starGenType_Driver_params
	Results []struct {
		Values *struct {
			Result1 driver.Driver
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Driver_doFn
		DoReturnFn MoqDB_starGenType_Driver_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_Driver_fnRecorder routes recorded function calls to the
// MoqDB_starGenType moq
type MoqDB_starGenType_Driver_fnRecorder struct {
	Params    MoqDB_starGenType_Driver_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_Driver_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_Driver_anyParams isolates the any params functions of the
// DB_starGenType type
type MoqDB_starGenType_Driver_anyParams struct {
	Recorder *MoqDB_starGenType_Driver_fnRecorder
}

// MoqDB_starGenType_Conn_params holds the params of the DB_starGenType type
type MoqDB_starGenType_Conn_params struct{ Ctx context.Context }

// MoqDB_starGenType_Conn_paramsKey holds the map key params of the
// DB_starGenType type
type MoqDB_starGenType_Conn_paramsKey struct {
	Params struct{ Ctx context.Context }
	Hashes struct{ Ctx hash.Hash }
}

// MoqDB_starGenType_Conn_resultsByParams contains the results for a given set
// of parameters for the DB_starGenType type
type MoqDB_starGenType_Conn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDB_starGenType_Conn_paramsKey]*MoqDB_starGenType_Conn_results
}

// MoqDB_starGenType_Conn_doFn defines the type of function needed when calling
// AndDo for the DB_starGenType type
type MoqDB_starGenType_Conn_doFn func(ctx context.Context)

// MoqDB_starGenType_Conn_doReturnFn defines the type of function needed when
// calling DoReturnResults for the DB_starGenType type
type MoqDB_starGenType_Conn_doReturnFn func(ctx context.Context) (*sql.Conn, error)

// MoqDB_starGenType_Conn_results holds the results of the DB_starGenType type
type MoqDB_starGenType_Conn_results struct {
	Params  MoqDB_starGenType_Conn_params
	Results []struct {
		Values *struct {
			Result1 *sql.Conn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Conn_doFn
		DoReturnFn MoqDB_starGenType_Conn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDB_starGenType_Conn_fnRecorder routes recorded function calls to the
// MoqDB_starGenType moq
type MoqDB_starGenType_Conn_fnRecorder struct {
	Params    MoqDB_starGenType_Conn_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDB_starGenType_Conn_results
	Moq       *MoqDB_starGenType
}

// MoqDB_starGenType_Conn_anyParams isolates the any params functions of the
// DB_starGenType type
type MoqDB_starGenType_Conn_anyParams struct {
	Recorder *MoqDB_starGenType_Conn_fnRecorder
}

// NewMoqDB_starGenType creates a new moq of the DB_starGenType type
func NewMoqDB_starGenType(scene *moq.Scene, config *moq.Config) *MoqDB_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqDB_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqDB_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				PingContext struct {
					Ctx moq.ParamIndexing
				}
				Ping            struct{}
				Close           struct{}
				SetMaxIdleConns struct {
					N moq.ParamIndexing
				}
				SetMaxOpenConns struct {
					N moq.ParamIndexing
				}
				SetConnMaxLifetime struct {
					D moq.ParamIndexing
				}
				Stats          struct{}
				PrepareContext struct {
					Ctx   moq.ParamIndexing
					Query moq.ParamIndexing
				}
				Prepare struct {
					Query moq.ParamIndexing
				}
				ExecContext struct {
					Ctx   moq.ParamIndexing
					Query moq.ParamIndexing
					Args  moq.ParamIndexing
				}
				Exec struct {
					Query moq.ParamIndexing
					Args  moq.ParamIndexing
				}
				QueryContext struct {
					Ctx   moq.ParamIndexing
					Query moq.ParamIndexing
					Args  moq.ParamIndexing
				}
				Query struct {
					Query moq.ParamIndexing
					Args  moq.ParamIndexing
				}
				QueryRowContext struct {
					Ctx   moq.ParamIndexing
					Query moq.ParamIndexing
					Args  moq.ParamIndexing
				}
				QueryRow struct {
					Query moq.ParamIndexing
					Args  moq.ParamIndexing
				}
				BeginTx struct {
					Ctx  moq.ParamIndexing
					Opts moq.ParamIndexing
				}
				Begin  struct{}
				Driver struct{}
				Conn   struct {
					Ctx moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			PingContext struct {
				Ctx moq.ParamIndexing
			}
			Ping            struct{}
			Close           struct{}
			SetMaxIdleConns struct {
				N moq.ParamIndexing
			}
			SetMaxOpenConns struct {
				N moq.ParamIndexing
			}
			SetConnMaxLifetime struct {
				D moq.ParamIndexing
			}
			Stats          struct{}
			PrepareContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
			}
			Prepare struct {
				Query moq.ParamIndexing
			}
			ExecContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			Exec struct {
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			QueryContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			Query struct {
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			QueryRowContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			QueryRow struct {
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			BeginTx struct {
				Ctx  moq.ParamIndexing
				Opts moq.ParamIndexing
			}
			Begin  struct{}
			Driver struct{}
			Conn   struct {
				Ctx moq.ParamIndexing
			}
		}{
			PingContext: struct {
				Ctx moq.ParamIndexing
			}{
				Ctx: moq.ParamIndexByHash,
			},
			Ping:  struct{}{},
			Close: struct{}{},
			SetMaxIdleConns: struct {
				N moq.ParamIndexing
			}{
				N: moq.ParamIndexByValue,
			},
			SetMaxOpenConns: struct {
				N moq.ParamIndexing
			}{
				N: moq.ParamIndexByValue,
			},
			SetConnMaxLifetime: struct {
				D moq.ParamIndexing
			}{
				D: moq.ParamIndexByValue,
			},
			Stats: struct{}{},
			PrepareContext: struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
			}{
				Ctx:   moq.ParamIndexByHash,
				Query: moq.ParamIndexByValue,
			},
			Prepare: struct {
				Query moq.ParamIndexing
			}{
				Query: moq.ParamIndexByValue,
			},
			ExecContext: struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}{
				Ctx:   moq.ParamIndexByHash,
				Query: moq.ParamIndexByValue,
				Args:  moq.ParamIndexByHash,
			},
			Exec: struct {
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}{
				Query: moq.ParamIndexByValue,
				Args:  moq.ParamIndexByHash,
			},
			QueryContext: struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}{
				Ctx:   moq.ParamIndexByHash,
				Query: moq.ParamIndexByValue,
				Args:  moq.ParamIndexByHash,
			},
			Query: struct {
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}{
				Query: moq.ParamIndexByValue,
				Args:  moq.ParamIndexByHash,
			},
			QueryRowContext: struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}{
				Ctx:   moq.ParamIndexByHash,
				Query: moq.ParamIndexByValue,
				Args:  moq.ParamIndexByHash,
			},
			QueryRow: struct {
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}{
				Query: moq.ParamIndexByValue,
				Args:  moq.ParamIndexByHash,
			},
			BeginTx: struct {
				Ctx  moq.ParamIndexing
				Opts moq.ParamIndexing
			}{
				Ctx:  moq.ParamIndexByHash,
				Opts: moq.ParamIndexByHash,
			},
			Begin:  struct{}{},
			Driver: struct{}{},
			Conn: struct {
				Ctx moq.ParamIndexing
			}{
				Ctx: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the DB_starGenType type
func (m *MoqDB_starGenType) Mock() *MoqDB_starGenType_mock { return m.Moq }

func (m *MoqDB_starGenType_mock) PingContext(ctx context.Context) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_PingContext_params{
		Ctx: ctx,
	}
	var results *MoqDB_starGenType_PingContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_PingContext {
		paramsKey := m.Moq.ParamsKey_PingContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_PingContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_PingContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_PingContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(ctx)
	}
	return
}

func (m *MoqDB_starGenType_mock) Ping() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_Ping_params{}
	var results *MoqDB_starGenType_Ping_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Ping {
		paramsKey := m.Moq.ParamsKey_Ping(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Ping(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Ping(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Ping(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqDB_starGenType_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_Close_params{}
	var results *MoqDB_starGenType_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqDB_starGenType_mock) SetMaxIdleConns(n int) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_SetMaxIdleConns_params{
		N: n,
	}
	var results *MoqDB_starGenType_SetMaxIdleConns_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetMaxIdleConns {
		paramsKey := m.Moq.ParamsKey_SetMaxIdleConns(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetMaxIdleConns(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetMaxIdleConns(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetMaxIdleConns(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(n)
	}
	return
}

func (m *MoqDB_starGenType_mock) SetMaxOpenConns(n int) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_SetMaxOpenConns_params{
		N: n,
	}
	var results *MoqDB_starGenType_SetMaxOpenConns_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetMaxOpenConns {
		paramsKey := m.Moq.ParamsKey_SetMaxOpenConns(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetMaxOpenConns(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetMaxOpenConns(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetMaxOpenConns(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(n)
	}
	return
}

func (m *MoqDB_starGenType_mock) SetConnMaxLifetime(d time.Duration) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_SetConnMaxLifetime_params{
		D: d,
	}
	var results *MoqDB_starGenType_SetConnMaxLifetime_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetConnMaxLifetime {
		paramsKey := m.Moq.ParamsKey_SetConnMaxLifetime(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetConnMaxLifetime(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetConnMaxLifetime(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetConnMaxLifetime(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(d)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(d)
	}
	return
}

func (m *MoqDB_starGenType_mock) Stats() (result1 sql.DBStats) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_Stats_params{}
	var results *MoqDB_starGenType_Stats_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Stats {
		paramsKey := m.Moq.ParamsKey_Stats(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Stats(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Stats(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Stats(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqDB_starGenType_mock) PrepareContext(ctx context.Context, query string) (result1 *sql.Stmt, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_PrepareContext_params{
		Ctx:   ctx,
		Query: query,
	}
	var results *MoqDB_starGenType_PrepareContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_PrepareContext {
		paramsKey := m.Moq.ParamsKey_PrepareContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_PrepareContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_PrepareContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_PrepareContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, query)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(ctx, query)
	}
	return
}

func (m *MoqDB_starGenType_mock) Prepare(query string) (result1 *sql.Stmt, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_Prepare_params{
		Query: query,
	}
	var results *MoqDB_starGenType_Prepare_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Prepare {
		paramsKey := m.Moq.ParamsKey_Prepare(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Prepare(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Prepare(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Prepare(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(query)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(query)
	}
	return
}

func (m *MoqDB_starGenType_mock) ExecContext(ctx context.Context, query string, args ...interface{}) (result1 sql.Result, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_ExecContext_params{
		Ctx:   ctx,
		Query: query,
		Args:  args,
	}
	var results *MoqDB_starGenType_ExecContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ExecContext {
		paramsKey := m.Moq.ParamsKey_ExecContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ExecContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ExecContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ExecContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, query, args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(ctx, query, args...)
	}
	return
}

func (m *MoqDB_starGenType_mock) Exec(query string, args ...interface{}) (result1 sql.Result, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_Exec_params{
		Query: query,
		Args:  args,
	}
	var results *MoqDB_starGenType_Exec_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Exec {
		paramsKey := m.Moq.ParamsKey_Exec(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Exec(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Exec(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Exec(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(query, args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(query, args...)
	}
	return
}

func (m *MoqDB_starGenType_mock) QueryContext(ctx context.Context, query string, args ...interface{}) (result1 *sql.Rows, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_QueryContext_params{
		Ctx:   ctx,
		Query: query,
		Args:  args,
	}
	var results *MoqDB_starGenType_QueryContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_QueryContext {
		paramsKey := m.Moq.ParamsKey_QueryContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_QueryContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_QueryContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_QueryContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, query, args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(ctx, query, args...)
	}
	return
}

func (m *MoqDB_starGenType_mock) Query(query string, args ...interface{}) (result1 *sql.Rows, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_Query_params{
		Query: query,
		Args:  args,
	}
	var results *MoqDB_starGenType_Query_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Query {
		paramsKey := m.Moq.ParamsKey_Query(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Query(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Query(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Query(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(query, args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(query, args...)
	}
	return
}

func (m *MoqDB_starGenType_mock) QueryRowContext(ctx context.Context, query string, args ...interface{}) (result1 *sql.Row) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_QueryRowContext_params{
		Ctx:   ctx,
		Query: query,
		Args:  args,
	}
	var results *MoqDB_starGenType_QueryRowContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_QueryRowContext {
		paramsKey := m.Moq.ParamsKey_QueryRowContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_QueryRowContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_QueryRowContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_QueryRowContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, query, args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(ctx, query, args...)
	}
	return
}

func (m *MoqDB_starGenType_mock) QueryRow(query string, args ...interface{}) (result1 *sql.Row) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_QueryRow_params{
		Query: query,
		Args:  args,
	}
	var results *MoqDB_starGenType_QueryRow_results
	for _, resultsByParams := range m.Moq.ResultsByParams_QueryRow {
		paramsKey := m.Moq.ParamsKey_QueryRow(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_QueryRow(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_QueryRow(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_QueryRow(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(query, args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(query, args...)
	}
	return
}

func (m *MoqDB_starGenType_mock) BeginTx(ctx context.Context, opts *sql.TxOptions) (result1 *sql.Tx, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_BeginTx_params{
		Ctx:  ctx,
		Opts: opts,
	}
	var results *MoqDB_starGenType_BeginTx_results
	for _, resultsByParams := range m.Moq.ResultsByParams_BeginTx {
		paramsKey := m.Moq.ParamsKey_BeginTx(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_BeginTx(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_BeginTx(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_BeginTx(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, opts)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(ctx, opts)
	}
	return
}

func (m *MoqDB_starGenType_mock) Begin() (result1 *sql.Tx, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_Begin_params{}
	var results *MoqDB_starGenType_Begin_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Begin {
		paramsKey := m.Moq.ParamsKey_Begin(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Begin(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Begin(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Begin(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqDB_starGenType_mock) Driver() (result1 driver.Driver) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_Driver_params{}
	var results *MoqDB_starGenType_Driver_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Driver {
		paramsKey := m.Moq.ParamsKey_Driver(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Driver(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Driver(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Driver(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqDB_starGenType_mock) Conn(ctx context.Context) (result1 *sql.Conn, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqDB_starGenType_Conn_params{
		Ctx: ctx,
	}
	var results *MoqDB_starGenType_Conn_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Conn {
		paramsKey := m.Moq.ParamsKey_Conn(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Conn(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Conn(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Conn(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(ctx)
	}
	return
}

// OnCall returns the recorder implementation of the DB_starGenType type
func (m *MoqDB_starGenType) OnCall() *MoqDB_starGenType_recorder {
	return &MoqDB_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqDB_starGenType_recorder) PingContext(ctx context.Context) *MoqDB_starGenType_PingContext_fnRecorder {
	return &MoqDB_starGenType_PingContext_fnRecorder{
		Params: MoqDB_starGenType_PingContext_params{
			Ctx: ctx,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_PingContext_fnRecorder) Any() *MoqDB_starGenType_PingContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PingContext(r.Params))
		return nil
	}
	return &MoqDB_starGenType_PingContext_anyParams{Recorder: r}
}

func (a *MoqDB_starGenType_PingContext_anyParams) Ctx() *MoqDB_starGenType_PingContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqDB_starGenType_PingContext_fnRecorder) Seq() *MoqDB_starGenType_PingContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PingContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_PingContext_fnRecorder) NoSeq() *MoqDB_starGenType_PingContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PingContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_PingContext_fnRecorder) ReturnResults(result1 error) *MoqDB_starGenType_PingContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_PingContext_doFn
		DoReturnFn MoqDB_starGenType_PingContext_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_PingContext_fnRecorder) AndDo(fn MoqDB_starGenType_PingContext_doFn) *MoqDB_starGenType_PingContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_PingContext_fnRecorder) DoReturnResults(fn MoqDB_starGenType_PingContext_doReturnFn) *MoqDB_starGenType_PingContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_PingContext_doFn
		DoReturnFn MoqDB_starGenType_PingContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_PingContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_PingContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_PingContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_PingContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_PingContext_paramsKey]*MoqDB_starGenType_PingContext_results{},
		}
		r.Moq.ResultsByParams_PingContext = append(r.Moq.ResultsByParams_PingContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_PingContext) {
			copy(r.Moq.ResultsByParams_PingContext[insertAt+1:], r.Moq.ResultsByParams_PingContext[insertAt:0])
			r.Moq.ResultsByParams_PingContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_PingContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_PingContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_PingContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_PingContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqDB_starGenType_PingContext_doFn
				DoReturnFn MoqDB_starGenType_PingContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_PingContext(params MoqDB_starGenType_PingContext_params) string {
	return fmt.Sprintf("PingContext(%#v)", params.Ctx)
}

func (m *MoqDB_starGenType) ParamsKey_PingContext(params MoqDB_starGenType_PingContext_params, anyParams uint64) MoqDB_starGenType_PingContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.PingContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	return MoqDB_starGenType_PingContext_paramsKey{
		Params: struct{ Ctx context.Context }{
			Ctx: ctxUsed,
		},
		Hashes: struct{ Ctx hash.Hash }{
			Ctx: ctxUsedHash,
		},
	}
}

func (m *MoqDB_starGenType_recorder) Ping() *MoqDB_starGenType_Ping_fnRecorder {
	return &MoqDB_starGenType_Ping_fnRecorder{
		Params:   MoqDB_starGenType_Ping_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_Ping_fnRecorder) Any() *MoqDB_starGenType_Ping_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Ping(r.Params))
		return nil
	}
	return &MoqDB_starGenType_Ping_anyParams{Recorder: r}
}

func (r *MoqDB_starGenType_Ping_fnRecorder) Seq() *MoqDB_starGenType_Ping_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Ping(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_Ping_fnRecorder) NoSeq() *MoqDB_starGenType_Ping_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Ping(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_Ping_fnRecorder) ReturnResults(result1 error) *MoqDB_starGenType_Ping_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Ping_doFn
		DoReturnFn MoqDB_starGenType_Ping_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_Ping_fnRecorder) AndDo(fn MoqDB_starGenType_Ping_doFn) *MoqDB_starGenType_Ping_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_Ping_fnRecorder) DoReturnResults(fn MoqDB_starGenType_Ping_doReturnFn) *MoqDB_starGenType_Ping_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Ping_doFn
		DoReturnFn MoqDB_starGenType_Ping_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_Ping_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_Ping_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Ping {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_Ping_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_Ping_paramsKey]*MoqDB_starGenType_Ping_results{},
		}
		r.Moq.ResultsByParams_Ping = append(r.Moq.ResultsByParams_Ping, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Ping) {
			copy(r.Moq.ResultsByParams_Ping[insertAt+1:], r.Moq.ResultsByParams_Ping[insertAt:0])
			r.Moq.ResultsByParams_Ping[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Ping(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_Ping_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_Ping_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_Ping_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqDB_starGenType_Ping_doFn
				DoReturnFn MoqDB_starGenType_Ping_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_Ping(params MoqDB_starGenType_Ping_params) string {
	return fmt.Sprintf("Ping()")
}

func (m *MoqDB_starGenType) ParamsKey_Ping(params MoqDB_starGenType_Ping_params, anyParams uint64) MoqDB_starGenType_Ping_paramsKey {
	m.Scene.T.Helper()
	return MoqDB_starGenType_Ping_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqDB_starGenType_recorder) Close() *MoqDB_starGenType_Close_fnRecorder {
	return &MoqDB_starGenType_Close_fnRecorder{
		Params:   MoqDB_starGenType_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_Close_fnRecorder) Any() *MoqDB_starGenType_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqDB_starGenType_Close_anyParams{Recorder: r}
}

func (r *MoqDB_starGenType_Close_fnRecorder) Seq() *MoqDB_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_Close_fnRecorder) NoSeq() *MoqDB_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_Close_fnRecorder) ReturnResults(result1 error) *MoqDB_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Close_doFn
		DoReturnFn MoqDB_starGenType_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_Close_fnRecorder) AndDo(fn MoqDB_starGenType_Close_doFn) *MoqDB_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_Close_fnRecorder) DoReturnResults(fn MoqDB_starGenType_Close_doReturnFn) *MoqDB_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Close_doFn
		DoReturnFn MoqDB_starGenType_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_Close_paramsKey]*MoqDB_starGenType_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqDB_starGenType_Close_doFn
				DoReturnFn MoqDB_starGenType_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_Close(params MoqDB_starGenType_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqDB_starGenType) ParamsKey_Close(params MoqDB_starGenType_Close_params, anyParams uint64) MoqDB_starGenType_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqDB_starGenType_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqDB_starGenType_recorder) SetMaxIdleConns(n int) *MoqDB_starGenType_SetMaxIdleConns_fnRecorder {
	return &MoqDB_starGenType_SetMaxIdleConns_fnRecorder{
		Params: MoqDB_starGenType_SetMaxIdleConns_params{
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_SetMaxIdleConns_fnRecorder) Any() *MoqDB_starGenType_SetMaxIdleConns_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetMaxIdleConns(r.Params))
		return nil
	}
	return &MoqDB_starGenType_SetMaxIdleConns_anyParams{Recorder: r}
}

func (a *MoqDB_starGenType_SetMaxIdleConns_anyParams) N() *MoqDB_starGenType_SetMaxIdleConns_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqDB_starGenType_SetMaxIdleConns_fnRecorder) Seq() *MoqDB_starGenType_SetMaxIdleConns_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetMaxIdleConns(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_SetMaxIdleConns_fnRecorder) NoSeq() *MoqDB_starGenType_SetMaxIdleConns_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetMaxIdleConns(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_SetMaxIdleConns_fnRecorder) ReturnResults() *MoqDB_starGenType_SetMaxIdleConns_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDB_starGenType_SetMaxIdleConns_doFn
		DoReturnFn MoqDB_starGenType_SetMaxIdleConns_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_SetMaxIdleConns_fnRecorder) AndDo(fn MoqDB_starGenType_SetMaxIdleConns_doFn) *MoqDB_starGenType_SetMaxIdleConns_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_SetMaxIdleConns_fnRecorder) DoReturnResults(fn MoqDB_starGenType_SetMaxIdleConns_doReturnFn) *MoqDB_starGenType_SetMaxIdleConns_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDB_starGenType_SetMaxIdleConns_doFn
		DoReturnFn MoqDB_starGenType_SetMaxIdleConns_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_SetMaxIdleConns_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_SetMaxIdleConns_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetMaxIdleConns {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_SetMaxIdleConns_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_SetMaxIdleConns_paramsKey]*MoqDB_starGenType_SetMaxIdleConns_results{},
		}
		r.Moq.ResultsByParams_SetMaxIdleConns = append(r.Moq.ResultsByParams_SetMaxIdleConns, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetMaxIdleConns) {
			copy(r.Moq.ResultsByParams_SetMaxIdleConns[insertAt+1:], r.Moq.ResultsByParams_SetMaxIdleConns[insertAt:0])
			r.Moq.ResultsByParams_SetMaxIdleConns[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetMaxIdleConns(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_SetMaxIdleConns_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_SetMaxIdleConns_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_SetMaxIdleConns_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqDB_starGenType_SetMaxIdleConns_doFn
				DoReturnFn MoqDB_starGenType_SetMaxIdleConns_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_SetMaxIdleConns(params MoqDB_starGenType_SetMaxIdleConns_params) string {
	return fmt.Sprintf("SetMaxIdleConns(%#v)", params.N)
}

func (m *MoqDB_starGenType) ParamsKey_SetMaxIdleConns(params MoqDB_starGenType_SetMaxIdleConns_params, anyParams uint64) MoqDB_starGenType_SetMaxIdleConns_paramsKey {
	m.Scene.T.Helper()
	var nUsed int
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetMaxIdleConns.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqDB_starGenType_SetMaxIdleConns_paramsKey{
		Params: struct{ N int }{
			N: nUsed,
		},
		Hashes: struct{ N hash.Hash }{
			N: nUsedHash,
		},
	}
}

func (m *MoqDB_starGenType_recorder) SetMaxOpenConns(n int) *MoqDB_starGenType_SetMaxOpenConns_fnRecorder {
	return &MoqDB_starGenType_SetMaxOpenConns_fnRecorder{
		Params: MoqDB_starGenType_SetMaxOpenConns_params{
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_SetMaxOpenConns_fnRecorder) Any() *MoqDB_starGenType_SetMaxOpenConns_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetMaxOpenConns(r.Params))
		return nil
	}
	return &MoqDB_starGenType_SetMaxOpenConns_anyParams{Recorder: r}
}

func (a *MoqDB_starGenType_SetMaxOpenConns_anyParams) N() *MoqDB_starGenType_SetMaxOpenConns_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqDB_starGenType_SetMaxOpenConns_fnRecorder) Seq() *MoqDB_starGenType_SetMaxOpenConns_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetMaxOpenConns(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_SetMaxOpenConns_fnRecorder) NoSeq() *MoqDB_starGenType_SetMaxOpenConns_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetMaxOpenConns(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_SetMaxOpenConns_fnRecorder) ReturnResults() *MoqDB_starGenType_SetMaxOpenConns_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDB_starGenType_SetMaxOpenConns_doFn
		DoReturnFn MoqDB_starGenType_SetMaxOpenConns_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_SetMaxOpenConns_fnRecorder) AndDo(fn MoqDB_starGenType_SetMaxOpenConns_doFn) *MoqDB_starGenType_SetMaxOpenConns_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_SetMaxOpenConns_fnRecorder) DoReturnResults(fn MoqDB_starGenType_SetMaxOpenConns_doReturnFn) *MoqDB_starGenType_SetMaxOpenConns_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDB_starGenType_SetMaxOpenConns_doFn
		DoReturnFn MoqDB_starGenType_SetMaxOpenConns_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_SetMaxOpenConns_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_SetMaxOpenConns_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetMaxOpenConns {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_SetMaxOpenConns_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_SetMaxOpenConns_paramsKey]*MoqDB_starGenType_SetMaxOpenConns_results{},
		}
		r.Moq.ResultsByParams_SetMaxOpenConns = append(r.Moq.ResultsByParams_SetMaxOpenConns, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetMaxOpenConns) {
			copy(r.Moq.ResultsByParams_SetMaxOpenConns[insertAt+1:], r.Moq.ResultsByParams_SetMaxOpenConns[insertAt:0])
			r.Moq.ResultsByParams_SetMaxOpenConns[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetMaxOpenConns(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_SetMaxOpenConns_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_SetMaxOpenConns_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_SetMaxOpenConns_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqDB_starGenType_SetMaxOpenConns_doFn
				DoReturnFn MoqDB_starGenType_SetMaxOpenConns_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_SetMaxOpenConns(params MoqDB_starGenType_SetMaxOpenConns_params) string {
	return fmt.Sprintf("SetMaxOpenConns(%#v)", params.N)
}

func (m *MoqDB_starGenType) ParamsKey_SetMaxOpenConns(params MoqDB_starGenType_SetMaxOpenConns_params, anyParams uint64) MoqDB_starGenType_SetMaxOpenConns_paramsKey {
	m.Scene.T.Helper()
	var nUsed int
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetMaxOpenConns.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqDB_starGenType_SetMaxOpenConns_paramsKey{
		Params: struct{ N int }{
			N: nUsed,
		},
		Hashes: struct{ N hash.Hash }{
			N: nUsedHash,
		},
	}
}

func (m *MoqDB_starGenType_recorder) SetConnMaxLifetime(d time.Duration) *MoqDB_starGenType_SetConnMaxLifetime_fnRecorder {
	return &MoqDB_starGenType_SetConnMaxLifetime_fnRecorder{
		Params: MoqDB_starGenType_SetConnMaxLifetime_params{
			D: d,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_SetConnMaxLifetime_fnRecorder) Any() *MoqDB_starGenType_SetConnMaxLifetime_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetConnMaxLifetime(r.Params))
		return nil
	}
	return &MoqDB_starGenType_SetConnMaxLifetime_anyParams{Recorder: r}
}

func (a *MoqDB_starGenType_SetConnMaxLifetime_anyParams) D() *MoqDB_starGenType_SetConnMaxLifetime_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqDB_starGenType_SetConnMaxLifetime_fnRecorder) Seq() *MoqDB_starGenType_SetConnMaxLifetime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetConnMaxLifetime(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_SetConnMaxLifetime_fnRecorder) NoSeq() *MoqDB_starGenType_SetConnMaxLifetime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetConnMaxLifetime(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_SetConnMaxLifetime_fnRecorder) ReturnResults() *MoqDB_starGenType_SetConnMaxLifetime_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDB_starGenType_SetConnMaxLifetime_doFn
		DoReturnFn MoqDB_starGenType_SetConnMaxLifetime_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_SetConnMaxLifetime_fnRecorder) AndDo(fn MoqDB_starGenType_SetConnMaxLifetime_doFn) *MoqDB_starGenType_SetConnMaxLifetime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_SetConnMaxLifetime_fnRecorder) DoReturnResults(fn MoqDB_starGenType_SetConnMaxLifetime_doReturnFn) *MoqDB_starGenType_SetConnMaxLifetime_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDB_starGenType_SetConnMaxLifetime_doFn
		DoReturnFn MoqDB_starGenType_SetConnMaxLifetime_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_SetConnMaxLifetime_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_SetConnMaxLifetime_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetConnMaxLifetime {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_SetConnMaxLifetime_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_SetConnMaxLifetime_paramsKey]*MoqDB_starGenType_SetConnMaxLifetime_results{},
		}
		r.Moq.ResultsByParams_SetConnMaxLifetime = append(r.Moq.ResultsByParams_SetConnMaxLifetime, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetConnMaxLifetime) {
			copy(r.Moq.ResultsByParams_SetConnMaxLifetime[insertAt+1:], r.Moq.ResultsByParams_SetConnMaxLifetime[insertAt:0])
			r.Moq.ResultsByParams_SetConnMaxLifetime[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetConnMaxLifetime(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_SetConnMaxLifetime_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_SetConnMaxLifetime_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_SetConnMaxLifetime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqDB_starGenType_SetConnMaxLifetime_doFn
				DoReturnFn MoqDB_starGenType_SetConnMaxLifetime_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_SetConnMaxLifetime(params MoqDB_starGenType_SetConnMaxLifetime_params) string {
	return fmt.Sprintf("SetConnMaxLifetime(%#v)", params.D)
}

func (m *MoqDB_starGenType) ParamsKey_SetConnMaxLifetime(params MoqDB_starGenType_SetConnMaxLifetime_params, anyParams uint64) MoqDB_starGenType_SetConnMaxLifetime_paramsKey {
	m.Scene.T.Helper()
	var dUsed time.Duration
	var dUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetConnMaxLifetime.D == moq.ParamIndexByValue {
			dUsed = params.D
		} else {
			dUsedHash = hash.DeepHash(params.D)
		}
	}
	return MoqDB_starGenType_SetConnMaxLifetime_paramsKey{
		Params: struct{ D time.Duration }{
			D: dUsed,
		},
		Hashes: struct{ D hash.Hash }{
			D: dUsedHash,
		},
	}
}

func (m *MoqDB_starGenType_recorder) Stats() *MoqDB_starGenType_Stats_fnRecorder {
	return &MoqDB_starGenType_Stats_fnRecorder{
		Params:   MoqDB_starGenType_Stats_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_Stats_fnRecorder) Any() *MoqDB_starGenType_Stats_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Stats(r.Params))
		return nil
	}
	return &MoqDB_starGenType_Stats_anyParams{Recorder: r}
}

func (r *MoqDB_starGenType_Stats_fnRecorder) Seq() *MoqDB_starGenType_Stats_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Stats(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_Stats_fnRecorder) NoSeq() *MoqDB_starGenType_Stats_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Stats(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_Stats_fnRecorder) ReturnResults(result1 sql.DBStats) *MoqDB_starGenType_Stats_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 sql.DBStats
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Stats_doFn
		DoReturnFn MoqDB_starGenType_Stats_doReturnFn
	}{
		Values: &struct {
			Result1 sql.DBStats
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_Stats_fnRecorder) AndDo(fn MoqDB_starGenType_Stats_doFn) *MoqDB_starGenType_Stats_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_Stats_fnRecorder) DoReturnResults(fn MoqDB_starGenType_Stats_doReturnFn) *MoqDB_starGenType_Stats_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 sql.DBStats
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Stats_doFn
		DoReturnFn MoqDB_starGenType_Stats_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_Stats_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_Stats_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Stats {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_Stats_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_Stats_paramsKey]*MoqDB_starGenType_Stats_results{},
		}
		r.Moq.ResultsByParams_Stats = append(r.Moq.ResultsByParams_Stats, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Stats) {
			copy(r.Moq.ResultsByParams_Stats[insertAt+1:], r.Moq.ResultsByParams_Stats[insertAt:0])
			r.Moq.ResultsByParams_Stats[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Stats(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_Stats_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_Stats_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_Stats_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 sql.DBStats
				}
				Sequence   uint32
				DoFn       MoqDB_starGenType_Stats_doFn
				DoReturnFn MoqDB_starGenType_Stats_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_Stats(params MoqDB_starGenType_Stats_params) string {
	return fmt.Sprintf("Stats()")
}

func (m *MoqDB_starGenType) ParamsKey_Stats(params MoqDB_starGenType_Stats_params, anyParams uint64) MoqDB_starGenType_Stats_paramsKey {
	m.Scene.T.Helper()
	return MoqDB_starGenType_Stats_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqDB_starGenType_recorder) PrepareContext(ctx context.Context, query string) *MoqDB_starGenType_PrepareContext_fnRecorder {
	return &MoqDB_starGenType_PrepareContext_fnRecorder{
		Params: MoqDB_starGenType_PrepareContext_params{
			Ctx:   ctx,
			Query: query,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_PrepareContext_fnRecorder) Any() *MoqDB_starGenType_PrepareContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PrepareContext(r.Params))
		return nil
	}
	return &MoqDB_starGenType_PrepareContext_anyParams{Recorder: r}
}

func (a *MoqDB_starGenType_PrepareContext_anyParams) Ctx() *MoqDB_starGenType_PrepareContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqDB_starGenType_PrepareContext_anyParams) Query() *MoqDB_starGenType_PrepareContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqDB_starGenType_PrepareContext_fnRecorder) Seq() *MoqDB_starGenType_PrepareContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PrepareContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_PrepareContext_fnRecorder) NoSeq() *MoqDB_starGenType_PrepareContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PrepareContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_PrepareContext_fnRecorder) ReturnResults(result1 *sql.Stmt, result2 error) *MoqDB_starGenType_PrepareContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Stmt
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_PrepareContext_doFn
		DoReturnFn MoqDB_starGenType_PrepareContext_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Stmt
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_PrepareContext_fnRecorder) AndDo(fn MoqDB_starGenType_PrepareContext_doFn) *MoqDB_starGenType_PrepareContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_PrepareContext_fnRecorder) DoReturnResults(fn MoqDB_starGenType_PrepareContext_doReturnFn) *MoqDB_starGenType_PrepareContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Stmt
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_PrepareContext_doFn
		DoReturnFn MoqDB_starGenType_PrepareContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_PrepareContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_PrepareContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_PrepareContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_PrepareContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_PrepareContext_paramsKey]*MoqDB_starGenType_PrepareContext_results{},
		}
		r.Moq.ResultsByParams_PrepareContext = append(r.Moq.ResultsByParams_PrepareContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_PrepareContext) {
			copy(r.Moq.ResultsByParams_PrepareContext[insertAt+1:], r.Moq.ResultsByParams_PrepareContext[insertAt:0])
			r.Moq.ResultsByParams_PrepareContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_PrepareContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_PrepareContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_PrepareContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_PrepareContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Stmt
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqDB_starGenType_PrepareContext_doFn
				DoReturnFn MoqDB_starGenType_PrepareContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_PrepareContext(params MoqDB_starGenType_PrepareContext_params) string {
	return fmt.Sprintf("PrepareContext(%#v, %#v)", params.Ctx, params.Query)
}

func (m *MoqDB_starGenType) ParamsKey_PrepareContext(params MoqDB_starGenType_PrepareContext_params, anyParams uint64) MoqDB_starGenType_PrepareContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.PrepareContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.PrepareContext.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	return MoqDB_starGenType_PrepareContext_paramsKey{
		Params: struct {
			Ctx   context.Context
			Query string
		}{
			Ctx:   ctxUsed,
			Query: queryUsed,
		},
		Hashes: struct {
			Ctx   hash.Hash
			Query hash.Hash
		}{
			Ctx:   ctxUsedHash,
			Query: queryUsedHash,
		},
	}
}

func (m *MoqDB_starGenType_recorder) Prepare(query string) *MoqDB_starGenType_Prepare_fnRecorder {
	return &MoqDB_starGenType_Prepare_fnRecorder{
		Params: MoqDB_starGenType_Prepare_params{
			Query: query,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_Prepare_fnRecorder) Any() *MoqDB_starGenType_Prepare_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Prepare(r.Params))
		return nil
	}
	return &MoqDB_starGenType_Prepare_anyParams{Recorder: r}
}

func (a *MoqDB_starGenType_Prepare_anyParams) Query() *MoqDB_starGenType_Prepare_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqDB_starGenType_Prepare_fnRecorder) Seq() *MoqDB_starGenType_Prepare_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Prepare(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_Prepare_fnRecorder) NoSeq() *MoqDB_starGenType_Prepare_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Prepare(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_Prepare_fnRecorder) ReturnResults(result1 *sql.Stmt, result2 error) *MoqDB_starGenType_Prepare_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Stmt
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Prepare_doFn
		DoReturnFn MoqDB_starGenType_Prepare_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Stmt
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_Prepare_fnRecorder) AndDo(fn MoqDB_starGenType_Prepare_doFn) *MoqDB_starGenType_Prepare_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_Prepare_fnRecorder) DoReturnResults(fn MoqDB_starGenType_Prepare_doReturnFn) *MoqDB_starGenType_Prepare_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Stmt
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Prepare_doFn
		DoReturnFn MoqDB_starGenType_Prepare_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_Prepare_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_Prepare_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Prepare {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_Prepare_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_Prepare_paramsKey]*MoqDB_starGenType_Prepare_results{},
		}
		r.Moq.ResultsByParams_Prepare = append(r.Moq.ResultsByParams_Prepare, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Prepare) {
			copy(r.Moq.ResultsByParams_Prepare[insertAt+1:], r.Moq.ResultsByParams_Prepare[insertAt:0])
			r.Moq.ResultsByParams_Prepare[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Prepare(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_Prepare_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_Prepare_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_Prepare_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Stmt
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqDB_starGenType_Prepare_doFn
				DoReturnFn MoqDB_starGenType_Prepare_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_Prepare(params MoqDB_starGenType_Prepare_params) string {
	return fmt.Sprintf("Prepare(%#v)", params.Query)
}

func (m *MoqDB_starGenType) ParamsKey_Prepare(params MoqDB_starGenType_Prepare_params, anyParams uint64) MoqDB_starGenType_Prepare_paramsKey {
	m.Scene.T.Helper()
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Prepare.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	return MoqDB_starGenType_Prepare_paramsKey{
		Params: struct{ Query string }{
			Query: queryUsed,
		},
		Hashes: struct{ Query hash.Hash }{
			Query: queryUsedHash,
		},
	}
}

func (m *MoqDB_starGenType_recorder) ExecContext(ctx context.Context, query string, args ...interface{}) *MoqDB_starGenType_ExecContext_fnRecorder {
	return &MoqDB_starGenType_ExecContext_fnRecorder{
		Params: MoqDB_starGenType_ExecContext_params{
			Ctx:   ctx,
			Query: query,
			Args:  args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_ExecContext_fnRecorder) Any() *MoqDB_starGenType_ExecContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExecContext(r.Params))
		return nil
	}
	return &MoqDB_starGenType_ExecContext_anyParams{Recorder: r}
}

func (a *MoqDB_starGenType_ExecContext_anyParams) Ctx() *MoqDB_starGenType_ExecContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqDB_starGenType_ExecContext_anyParams) Query() *MoqDB_starGenType_ExecContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqDB_starGenType_ExecContext_anyParams) Args() *MoqDB_starGenType_ExecContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqDB_starGenType_ExecContext_fnRecorder) Seq() *MoqDB_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExecContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_ExecContext_fnRecorder) NoSeq() *MoqDB_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExecContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_ExecContext_fnRecorder) ReturnResults(result1 sql.Result, result2 error) *MoqDB_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_ExecContext_doFn
		DoReturnFn MoqDB_starGenType_ExecContext_doReturnFn
	}{
		Values: &struct {
			Result1 sql.Result
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_ExecContext_fnRecorder) AndDo(fn MoqDB_starGenType_ExecContext_doFn) *MoqDB_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_ExecContext_fnRecorder) DoReturnResults(fn MoqDB_starGenType_ExecContext_doReturnFn) *MoqDB_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_ExecContext_doFn
		DoReturnFn MoqDB_starGenType_ExecContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_ExecContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_ExecContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ExecContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_ExecContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_ExecContext_paramsKey]*MoqDB_starGenType_ExecContext_results{},
		}
		r.Moq.ResultsByParams_ExecContext = append(r.Moq.ResultsByParams_ExecContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ExecContext) {
			copy(r.Moq.ResultsByParams_ExecContext[insertAt+1:], r.Moq.ResultsByParams_ExecContext[insertAt:0])
			r.Moq.ResultsByParams_ExecContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ExecContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_ExecContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_ExecContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 sql.Result
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqDB_starGenType_ExecContext_doFn
				DoReturnFn MoqDB_starGenType_ExecContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_ExecContext(params MoqDB_starGenType_ExecContext_params) string {
	return fmt.Sprintf("ExecContext(%#v, %#v, %#v)", params.Ctx, params.Query, params.Args)
}

func (m *MoqDB_starGenType) ParamsKey_ExecContext(params MoqDB_starGenType_ExecContext_params, anyParams uint64) MoqDB_starGenType_ExecContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ExecContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.ExecContext.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.ExecContext.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the ExecContext function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqDB_starGenType_ExecContext_paramsKey{
		Params: struct {
			Ctx   context.Context
			Query string
		}{
			Ctx:   ctxUsed,
			Query: queryUsed,
		},
		Hashes: struct {
			Ctx   hash.Hash
			Query hash.Hash
			Args  hash.Hash
		}{
			Ctx:   ctxUsedHash,
			Query: queryUsedHash,
			Args:  argsUsedHash,
		},
	}
}

func (m *MoqDB_starGenType_recorder) Exec(query string, args ...interface{}) *MoqDB_starGenType_Exec_fnRecorder {
	return &MoqDB_starGenType_Exec_fnRecorder{
		Params: MoqDB_starGenType_Exec_params{
			Query: query,
			Args:  args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_Exec_fnRecorder) Any() *MoqDB_starGenType_Exec_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Exec(r.Params))
		return nil
	}
	return &MoqDB_starGenType_Exec_anyParams{Recorder: r}
}

func (a *MoqDB_starGenType_Exec_anyParams) Query() *MoqDB_starGenType_Exec_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqDB_starGenType_Exec_anyParams) Args() *MoqDB_starGenType_Exec_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqDB_starGenType_Exec_fnRecorder) Seq() *MoqDB_starGenType_Exec_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Exec(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_Exec_fnRecorder) NoSeq() *MoqDB_starGenType_Exec_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Exec(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_Exec_fnRecorder) ReturnResults(result1 sql.Result, result2 error) *MoqDB_starGenType_Exec_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Exec_doFn
		DoReturnFn MoqDB_starGenType_Exec_doReturnFn
	}{
		Values: &struct {
			Result1 sql.Result
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_Exec_fnRecorder) AndDo(fn MoqDB_starGenType_Exec_doFn) *MoqDB_starGenType_Exec_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_Exec_fnRecorder) DoReturnResults(fn MoqDB_starGenType_Exec_doReturnFn) *MoqDB_starGenType_Exec_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Exec_doFn
		DoReturnFn MoqDB_starGenType_Exec_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_Exec_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_Exec_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Exec {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_Exec_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_Exec_paramsKey]*MoqDB_starGenType_Exec_results{},
		}
		r.Moq.ResultsByParams_Exec = append(r.Moq.ResultsByParams_Exec, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Exec) {
			copy(r.Moq.ResultsByParams_Exec[insertAt+1:], r.Moq.ResultsByParams_Exec[insertAt:0])
			r.Moq.ResultsByParams_Exec[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Exec(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_Exec_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_Exec_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_Exec_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 sql.Result
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqDB_starGenType_Exec_doFn
				DoReturnFn MoqDB_starGenType_Exec_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_Exec(params MoqDB_starGenType_Exec_params) string {
	return fmt.Sprintf("Exec(%#v, %#v)", params.Query, params.Args)
}

func (m *MoqDB_starGenType) ParamsKey_Exec(params MoqDB_starGenType_Exec_params, anyParams uint64) MoqDB_starGenType_Exec_paramsKey {
	m.Scene.T.Helper()
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Exec.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Exec.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the Exec function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqDB_starGenType_Exec_paramsKey{
		Params: struct{ Query string }{
			Query: queryUsed,
		},
		Hashes: struct {
			Query hash.Hash
			Args  hash.Hash
		}{
			Query: queryUsedHash,
			Args:  argsUsedHash,
		},
	}
}

func (m *MoqDB_starGenType_recorder) QueryContext(ctx context.Context, query string, args ...interface{}) *MoqDB_starGenType_QueryContext_fnRecorder {
	return &MoqDB_starGenType_QueryContext_fnRecorder{
		Params: MoqDB_starGenType_QueryContext_params{
			Ctx:   ctx,
			Query: query,
			Args:  args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_QueryContext_fnRecorder) Any() *MoqDB_starGenType_QueryContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryContext(r.Params))
		return nil
	}
	return &MoqDB_starGenType_QueryContext_anyParams{Recorder: r}
}

func (a *MoqDB_starGenType_QueryContext_anyParams) Ctx() *MoqDB_starGenType_QueryContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqDB_starGenType_QueryContext_anyParams) Query() *MoqDB_starGenType_QueryContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqDB_starGenType_QueryContext_anyParams) Args() *MoqDB_starGenType_QueryContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqDB_starGenType_QueryContext_fnRecorder) Seq() *MoqDB_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_QueryContext_fnRecorder) NoSeq() *MoqDB_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_QueryContext_fnRecorder) ReturnResults(result1 *sql.Rows, result2 error) *MoqDB_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_QueryContext_doFn
		DoReturnFn MoqDB_starGenType_QueryContext_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Rows
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_QueryContext_fnRecorder) AndDo(fn MoqDB_starGenType_QueryContext_doFn) *MoqDB_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_QueryContext_fnRecorder) DoReturnResults(fn MoqDB_starGenType_QueryContext_doReturnFn) *MoqDB_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_QueryContext_doFn
		DoReturnFn MoqDB_starGenType_QueryContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_QueryContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_QueryContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_QueryContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_QueryContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_QueryContext_paramsKey]*MoqDB_starGenType_QueryContext_results{},
		}
		r.Moq.ResultsByParams_QueryContext = append(r.Moq.ResultsByParams_QueryContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_QueryContext) {
			copy(r.Moq.ResultsByParams_QueryContext[insertAt+1:], r.Moq.ResultsByParams_QueryContext[insertAt:0])
			r.Moq.ResultsByParams_QueryContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_QueryContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_QueryContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_QueryContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Rows
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqDB_starGenType_QueryContext_doFn
				DoReturnFn MoqDB_starGenType_QueryContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_QueryContext(params MoqDB_starGenType_QueryContext_params) string {
	return fmt.Sprintf("QueryContext(%#v, %#v, %#v)", params.Ctx, params.Query, params.Args)
}

func (m *MoqDB_starGenType) ParamsKey_QueryContext(params MoqDB_starGenType_QueryContext_params, anyParams uint64) MoqDB_starGenType_QueryContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.QueryContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.QueryContext.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.QueryContext.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the QueryContext function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqDB_starGenType_QueryContext_paramsKey{
		Params: struct {
			Ctx   context.Context
			Query string
		}{
			Ctx:   ctxUsed,
			Query: queryUsed,
		},
		Hashes: struct {
			Ctx   hash.Hash
			Query hash.Hash
			Args  hash.Hash
		}{
			Ctx:   ctxUsedHash,
			Query: queryUsedHash,
			Args:  argsUsedHash,
		},
	}
}

func (m *MoqDB_starGenType_recorder) Query(query string, args ...interface{}) *MoqDB_starGenType_Query_fnRecorder {
	return &MoqDB_starGenType_Query_fnRecorder{
		Params: MoqDB_starGenType_Query_params{
			Query: query,
			Args:  args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_Query_fnRecorder) Any() *MoqDB_starGenType_Query_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Query(r.Params))
		return nil
	}
	return &MoqDB_starGenType_Query_anyParams{Recorder: r}
}

func (a *MoqDB_starGenType_Query_anyParams) Query() *MoqDB_starGenType_Query_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqDB_starGenType_Query_anyParams) Args() *MoqDB_starGenType_Query_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqDB_starGenType_Query_fnRecorder) Seq() *MoqDB_starGenType_Query_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Query(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_Query_fnRecorder) NoSeq() *MoqDB_starGenType_Query_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Query(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_Query_fnRecorder) ReturnResults(result1 *sql.Rows, result2 error) *MoqDB_starGenType_Query_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Query_doFn
		DoReturnFn MoqDB_starGenType_Query_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Rows
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_Query_fnRecorder) AndDo(fn MoqDB_starGenType_Query_doFn) *MoqDB_starGenType_Query_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_Query_fnRecorder) DoReturnResults(fn MoqDB_starGenType_Query_doReturnFn) *MoqDB_starGenType_Query_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Query_doFn
		DoReturnFn MoqDB_starGenType_Query_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_Query_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_Query_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Query {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_Query_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_Query_paramsKey]*MoqDB_starGenType_Query_results{},
		}
		r.Moq.ResultsByParams_Query = append(r.Moq.ResultsByParams_Query, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Query) {
			copy(r.Moq.ResultsByParams_Query[insertAt+1:], r.Moq.ResultsByParams_Query[insertAt:0])
			r.Moq.ResultsByParams_Query[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Query(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_Query_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_Query_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_Query_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Rows
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqDB_starGenType_Query_doFn
				DoReturnFn MoqDB_starGenType_Query_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_Query(params MoqDB_starGenType_Query_params) string {
	return fmt.Sprintf("Query(%#v, %#v)", params.Query, params.Args)
}

func (m *MoqDB_starGenType) ParamsKey_Query(params MoqDB_starGenType_Query_params, anyParams uint64) MoqDB_starGenType_Query_paramsKey {
	m.Scene.T.Helper()
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Query.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Query.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the Query function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqDB_starGenType_Query_paramsKey{
		Params: struct{ Query string }{
			Query: queryUsed,
		},
		Hashes: struct {
			Query hash.Hash
			Args  hash.Hash
		}{
			Query: queryUsedHash,
			Args:  argsUsedHash,
		},
	}
}

func (m *MoqDB_starGenType_recorder) QueryRowContext(ctx context.Context, query string, args ...interface{}) *MoqDB_starGenType_QueryRowContext_fnRecorder {
	return &MoqDB_starGenType_QueryRowContext_fnRecorder{
		Params: MoqDB_starGenType_QueryRowContext_params{
			Ctx:   ctx,
			Query: query,
			Args:  args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_QueryRowContext_fnRecorder) Any() *MoqDB_starGenType_QueryRowContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRowContext(r.Params))
		return nil
	}
	return &MoqDB_starGenType_QueryRowContext_anyParams{Recorder: r}
}

func (a *MoqDB_starGenType_QueryRowContext_anyParams) Ctx() *MoqDB_starGenType_QueryRowContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqDB_starGenType_QueryRowContext_anyParams) Query() *MoqDB_starGenType_QueryRowContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqDB_starGenType_QueryRowContext_anyParams) Args() *MoqDB_starGenType_QueryRowContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqDB_starGenType_QueryRowContext_fnRecorder) Seq() *MoqDB_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRowContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_QueryRowContext_fnRecorder) NoSeq() *MoqDB_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRowContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_QueryRowContext_fnRecorder) ReturnResults(result1 *sql.Row) *MoqDB_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_QueryRowContext_doFn
		DoReturnFn MoqDB_starGenType_QueryRowContext_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Row
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_QueryRowContext_fnRecorder) AndDo(fn MoqDB_starGenType_QueryRowContext_doFn) *MoqDB_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_QueryRowContext_fnRecorder) DoReturnResults(fn MoqDB_starGenType_QueryRowContext_doReturnFn) *MoqDB_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_QueryRowContext_doFn
		DoReturnFn MoqDB_starGenType_QueryRowContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_QueryRowContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_QueryRowContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_QueryRowContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_QueryRowContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_QueryRowContext_paramsKey]*MoqDB_starGenType_QueryRowContext_results{},
		}
		r.Moq.ResultsByParams_QueryRowContext = append(r.Moq.ResultsByParams_QueryRowContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_QueryRowContext) {
			copy(r.Moq.ResultsByParams_QueryRowContext[insertAt+1:], r.Moq.ResultsByParams_QueryRowContext[insertAt:0])
			r.Moq.ResultsByParams_QueryRowContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_QueryRowContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_QueryRowContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_QueryRowContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Row
				}
				Sequence   uint32
				DoFn       MoqDB_starGenType_QueryRowContext_doFn
				DoReturnFn MoqDB_starGenType_QueryRowContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_QueryRowContext(params MoqDB_starGenType_QueryRowContext_params) string {
	return fmt.Sprintf("QueryRowContext(%#v, %#v, %#v)", params.Ctx, params.Query, params.Args)
}

func (m *MoqDB_starGenType) ParamsKey_QueryRowContext(params MoqDB_starGenType_QueryRowContext_params, anyParams uint64) MoqDB_starGenType_QueryRowContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.QueryRowContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.QueryRowContext.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.QueryRowContext.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the QueryRowContext function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqDB_starGenType_QueryRowContext_paramsKey{
		Params: struct {
			Ctx   context.Context
			Query string
		}{
			Ctx:   ctxUsed,
			Query: queryUsed,
		},
		Hashes: struct {
			Ctx   hash.Hash
			Query hash.Hash
			Args  hash.Hash
		}{
			Ctx:   ctxUsedHash,
			Query: queryUsedHash,
			Args:  argsUsedHash,
		},
	}
}

func (m *MoqDB_starGenType_recorder) QueryRow(query string, args ...interface{}) *MoqDB_starGenType_QueryRow_fnRecorder {
	return &MoqDB_starGenType_QueryRow_fnRecorder{
		Params: MoqDB_starGenType_QueryRow_params{
			Query: query,
			Args:  args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_QueryRow_fnRecorder) Any() *MoqDB_starGenType_QueryRow_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRow(r.Params))
		return nil
	}
	return &MoqDB_starGenType_QueryRow_anyParams{Recorder: r}
}

func (a *MoqDB_starGenType_QueryRow_anyParams) Query() *MoqDB_starGenType_QueryRow_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqDB_starGenType_QueryRow_anyParams) Args() *MoqDB_starGenType_QueryRow_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqDB_starGenType_QueryRow_fnRecorder) Seq() *MoqDB_starGenType_QueryRow_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRow(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_QueryRow_fnRecorder) NoSeq() *MoqDB_starGenType_QueryRow_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRow(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_QueryRow_fnRecorder) ReturnResults(result1 *sql.Row) *MoqDB_starGenType_QueryRow_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_QueryRow_doFn
		DoReturnFn MoqDB_starGenType_QueryRow_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Row
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_QueryRow_fnRecorder) AndDo(fn MoqDB_starGenType_QueryRow_doFn) *MoqDB_starGenType_QueryRow_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_QueryRow_fnRecorder) DoReturnResults(fn MoqDB_starGenType_QueryRow_doReturnFn) *MoqDB_starGenType_QueryRow_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_QueryRow_doFn
		DoReturnFn MoqDB_starGenType_QueryRow_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_QueryRow_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_QueryRow_resultsByParams
	for n, res := range r.Moq.ResultsByParams_QueryRow {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_QueryRow_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_QueryRow_paramsKey]*MoqDB_starGenType_QueryRow_results{},
		}
		r.Moq.ResultsByParams_QueryRow = append(r.Moq.ResultsByParams_QueryRow, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_QueryRow) {
			copy(r.Moq.ResultsByParams_QueryRow[insertAt+1:], r.Moq.ResultsByParams_QueryRow[insertAt:0])
			r.Moq.ResultsByParams_QueryRow[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_QueryRow(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_QueryRow_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_QueryRow_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_QueryRow_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Row
				}
				Sequence   uint32
				DoFn       MoqDB_starGenType_QueryRow_doFn
				DoReturnFn MoqDB_starGenType_QueryRow_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_QueryRow(params MoqDB_starGenType_QueryRow_params) string {
	return fmt.Sprintf("QueryRow(%#v, %#v)", params.Query, params.Args)
}

func (m *MoqDB_starGenType) ParamsKey_QueryRow(params MoqDB_starGenType_QueryRow_params, anyParams uint64) MoqDB_starGenType_QueryRow_paramsKey {
	m.Scene.T.Helper()
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.QueryRow.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.QueryRow.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the QueryRow function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqDB_starGenType_QueryRow_paramsKey{
		Params: struct{ Query string }{
			Query: queryUsed,
		},
		Hashes: struct {
			Query hash.Hash
			Args  hash.Hash
		}{
			Query: queryUsedHash,
			Args:  argsUsedHash,
		},
	}
}

func (m *MoqDB_starGenType_recorder) BeginTx(ctx context.Context, opts *sql.TxOptions) *MoqDB_starGenType_BeginTx_fnRecorder {
	return &MoqDB_starGenType_BeginTx_fnRecorder{
		Params: MoqDB_starGenType_BeginTx_params{
			Ctx:  ctx,
			Opts: opts,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_BeginTx_fnRecorder) Any() *MoqDB_starGenType_BeginTx_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BeginTx(r.Params))
		return nil
	}
	return &MoqDB_starGenType_BeginTx_anyParams{Recorder: r}
}

func (a *MoqDB_starGenType_BeginTx_anyParams) Ctx() *MoqDB_starGenType_BeginTx_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqDB_starGenType_BeginTx_anyParams) Opts() *MoqDB_starGenType_BeginTx_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqDB_starGenType_BeginTx_fnRecorder) Seq() *MoqDB_starGenType_BeginTx_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BeginTx(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_BeginTx_fnRecorder) NoSeq() *MoqDB_starGenType_BeginTx_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BeginTx(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_BeginTx_fnRecorder) ReturnResults(result1 *sql.Tx, result2 error) *MoqDB_starGenType_BeginTx_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Tx
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_BeginTx_doFn
		DoReturnFn MoqDB_starGenType_BeginTx_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Tx
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_BeginTx_fnRecorder) AndDo(fn MoqDB_starGenType_BeginTx_doFn) *MoqDB_starGenType_BeginTx_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_BeginTx_fnRecorder) DoReturnResults(fn MoqDB_starGenType_BeginTx_doReturnFn) *MoqDB_starGenType_BeginTx_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Tx
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_BeginTx_doFn
		DoReturnFn MoqDB_starGenType_BeginTx_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_BeginTx_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_BeginTx_resultsByParams
	for n, res := range r.Moq.ResultsByParams_BeginTx {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_BeginTx_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_BeginTx_paramsKey]*MoqDB_starGenType_BeginTx_results{},
		}
		r.Moq.ResultsByParams_BeginTx = append(r.Moq.ResultsByParams_BeginTx, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_BeginTx) {
			copy(r.Moq.ResultsByParams_BeginTx[insertAt+1:], r.Moq.ResultsByParams_BeginTx[insertAt:0])
			r.Moq.ResultsByParams_BeginTx[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_BeginTx(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_BeginTx_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_BeginTx_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_BeginTx_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Tx
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqDB_starGenType_BeginTx_doFn
				DoReturnFn MoqDB_starGenType_BeginTx_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_BeginTx(params MoqDB_starGenType_BeginTx_params) string {
	return fmt.Sprintf("BeginTx(%#v, %#v)", params.Ctx, params.Opts)
}

func (m *MoqDB_starGenType) ParamsKey_BeginTx(params MoqDB_starGenType_BeginTx_params, anyParams uint64) MoqDB_starGenType_BeginTx_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.BeginTx.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var optsUsed *sql.TxOptions
	var optsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.BeginTx.Opts == moq.ParamIndexByValue {
			optsUsed = params.Opts
		} else {
			optsUsedHash = hash.DeepHash(params.Opts)
		}
	}
	return MoqDB_starGenType_BeginTx_paramsKey{
		Params: struct {
			Ctx  context.Context
			Opts *sql.TxOptions
		}{
			Ctx:  ctxUsed,
			Opts: optsUsed,
		},
		Hashes: struct {
			Ctx  hash.Hash
			Opts hash.Hash
		}{
			Ctx:  ctxUsedHash,
			Opts: optsUsedHash,
		},
	}
}

func (m *MoqDB_starGenType_recorder) Begin() *MoqDB_starGenType_Begin_fnRecorder {
	return &MoqDB_starGenType_Begin_fnRecorder{
		Params:   MoqDB_starGenType_Begin_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_Begin_fnRecorder) Any() *MoqDB_starGenType_Begin_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Begin(r.Params))
		return nil
	}
	return &MoqDB_starGenType_Begin_anyParams{Recorder: r}
}

func (r *MoqDB_starGenType_Begin_fnRecorder) Seq() *MoqDB_starGenType_Begin_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Begin(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_Begin_fnRecorder) NoSeq() *MoqDB_starGenType_Begin_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Begin(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_Begin_fnRecorder) ReturnResults(result1 *sql.Tx, result2 error) *MoqDB_starGenType_Begin_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Tx
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Begin_doFn
		DoReturnFn MoqDB_starGenType_Begin_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Tx
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_Begin_fnRecorder) AndDo(fn MoqDB_starGenType_Begin_doFn) *MoqDB_starGenType_Begin_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_Begin_fnRecorder) DoReturnResults(fn MoqDB_starGenType_Begin_doReturnFn) *MoqDB_starGenType_Begin_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Tx
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Begin_doFn
		DoReturnFn MoqDB_starGenType_Begin_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_Begin_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_Begin_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Begin {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_Begin_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_Begin_paramsKey]*MoqDB_starGenType_Begin_results{},
		}
		r.Moq.ResultsByParams_Begin = append(r.Moq.ResultsByParams_Begin, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Begin) {
			copy(r.Moq.ResultsByParams_Begin[insertAt+1:], r.Moq.ResultsByParams_Begin[insertAt:0])
			r.Moq.ResultsByParams_Begin[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Begin(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_Begin_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_Begin_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_Begin_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Tx
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqDB_starGenType_Begin_doFn
				DoReturnFn MoqDB_starGenType_Begin_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_Begin(params MoqDB_starGenType_Begin_params) string {
	return fmt.Sprintf("Begin()")
}

func (m *MoqDB_starGenType) ParamsKey_Begin(params MoqDB_starGenType_Begin_params, anyParams uint64) MoqDB_starGenType_Begin_paramsKey {
	m.Scene.T.Helper()
	return MoqDB_starGenType_Begin_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqDB_starGenType_recorder) Driver() *MoqDB_starGenType_Driver_fnRecorder {
	return &MoqDB_starGenType_Driver_fnRecorder{
		Params:   MoqDB_starGenType_Driver_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_Driver_fnRecorder) Any() *MoqDB_starGenType_Driver_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Driver(r.Params))
		return nil
	}
	return &MoqDB_starGenType_Driver_anyParams{Recorder: r}
}

func (r *MoqDB_starGenType_Driver_fnRecorder) Seq() *MoqDB_starGenType_Driver_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Driver(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_Driver_fnRecorder) NoSeq() *MoqDB_starGenType_Driver_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Driver(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_Driver_fnRecorder) ReturnResults(result1 driver.Driver) *MoqDB_starGenType_Driver_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 driver.Driver
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Driver_doFn
		DoReturnFn MoqDB_starGenType_Driver_doReturnFn
	}{
		Values: &struct {
			Result1 driver.Driver
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_Driver_fnRecorder) AndDo(fn MoqDB_starGenType_Driver_doFn) *MoqDB_starGenType_Driver_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_Driver_fnRecorder) DoReturnResults(fn MoqDB_starGenType_Driver_doReturnFn) *MoqDB_starGenType_Driver_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 driver.Driver
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Driver_doFn
		DoReturnFn MoqDB_starGenType_Driver_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_Driver_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_Driver_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Driver {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_Driver_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_Driver_paramsKey]*MoqDB_starGenType_Driver_results{},
		}
		r.Moq.ResultsByParams_Driver = append(r.Moq.ResultsByParams_Driver, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Driver) {
			copy(r.Moq.ResultsByParams_Driver[insertAt+1:], r.Moq.ResultsByParams_Driver[insertAt:0])
			r.Moq.ResultsByParams_Driver[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Driver(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_Driver_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_Driver_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_Driver_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 driver.Driver
				}
				Sequence   uint32
				DoFn       MoqDB_starGenType_Driver_doFn
				DoReturnFn MoqDB_starGenType_Driver_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_Driver(params MoqDB_starGenType_Driver_params) string {
	return fmt.Sprintf("Driver()")
}

func (m *MoqDB_starGenType) ParamsKey_Driver(params MoqDB_starGenType_Driver_params, anyParams uint64) MoqDB_starGenType_Driver_paramsKey {
	m.Scene.T.Helper()
	return MoqDB_starGenType_Driver_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqDB_starGenType_recorder) Conn(ctx context.Context) *MoqDB_starGenType_Conn_fnRecorder {
	return &MoqDB_starGenType_Conn_fnRecorder{
		Params: MoqDB_starGenType_Conn_params{
			Ctx: ctx,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDB_starGenType_Conn_fnRecorder) Any() *MoqDB_starGenType_Conn_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Conn(r.Params))
		return nil
	}
	return &MoqDB_starGenType_Conn_anyParams{Recorder: r}
}

func (a *MoqDB_starGenType_Conn_anyParams) Ctx() *MoqDB_starGenType_Conn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqDB_starGenType_Conn_fnRecorder) Seq() *MoqDB_starGenType_Conn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Conn(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDB_starGenType_Conn_fnRecorder) NoSeq() *MoqDB_starGenType_Conn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Conn(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDB_starGenType_Conn_fnRecorder) ReturnResults(result1 *sql.Conn, result2 error) *MoqDB_starGenType_Conn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Conn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Conn_doFn
		DoReturnFn MoqDB_starGenType_Conn_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Conn
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDB_starGenType_Conn_fnRecorder) AndDo(fn MoqDB_starGenType_Conn_doFn) *MoqDB_starGenType_Conn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDB_starGenType_Conn_fnRecorder) DoReturnResults(fn MoqDB_starGenType_Conn_doReturnFn) *MoqDB_starGenType_Conn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Conn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDB_starGenType_Conn_doFn
		DoReturnFn MoqDB_starGenType_Conn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDB_starGenType_Conn_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDB_starGenType_Conn_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Conn {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDB_starGenType_Conn_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDB_starGenType_Conn_paramsKey]*MoqDB_starGenType_Conn_results{},
		}
		r.Moq.ResultsByParams_Conn = append(r.Moq.ResultsByParams_Conn, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Conn) {
			copy(r.Moq.ResultsByParams_Conn[insertAt+1:], r.Moq.ResultsByParams_Conn[insertAt:0])
			r.Moq.ResultsByParams_Conn[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Conn(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDB_starGenType_Conn_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDB_starGenType_Conn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDB_starGenType_Conn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Conn
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqDB_starGenType_Conn_doFn
				DoReturnFn MoqDB_starGenType_Conn_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDB_starGenType) PrettyParams_Conn(params MoqDB_starGenType_Conn_params) string {
	return fmt.Sprintf("Conn(%#v)", params.Ctx)
}

func (m *MoqDB_starGenType) ParamsKey_Conn(params MoqDB_starGenType_Conn_params, anyParams uint64) MoqDB_starGenType_Conn_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Conn.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	return MoqDB_starGenType_Conn_paramsKey{
		Params: struct{ Ctx context.Context }{
			Ctx: ctxUsed,
		},
		Hashes: struct{ Ctx hash.Hash }{
			Ctx: ctxUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqDB_starGenType) Reset() {
	m.ResultsByParams_PingContext = nil
	m.ResultsByParams_Ping = nil
	m.ResultsByParams_Close = nil
	m.ResultsByParams_SetMaxIdleConns = nil
	m.ResultsByParams_SetMaxOpenConns = nil
	m.ResultsByParams_SetConnMaxLifetime = nil
	m.ResultsByParams_Stats = nil
	m.ResultsByParams_PrepareContext = nil
	m.ResultsByParams_Prepare = nil
	m.ResultsByParams_ExecContext = nil
	m.ResultsByParams_Exec = nil
	m.ResultsByParams_QueryContext = nil
	m.ResultsByParams_Query = nil
	m.ResultsByParams_QueryRowContext = nil
	m.ResultsByParams_QueryRow = nil
	m.ResultsByParams_BeginTx = nil
	m.ResultsByParams_Begin = nil
	m.ResultsByParams_Driver = nil
	m.ResultsByParams_Conn = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqDB_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_PingContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_PingContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Ping {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Ping(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetMaxIdleConns {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetMaxIdleConns(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetMaxOpenConns {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetMaxOpenConns(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetConnMaxLifetime {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetConnMaxLifetime(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Stats {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Stats(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_PrepareContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_PrepareContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Prepare {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Prepare(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ExecContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ExecContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Exec {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Exec(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_QueryContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_QueryContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Query {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Query(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_QueryRowContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_QueryRowContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_QueryRow {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_QueryRow(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_BeginTx {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_BeginTx(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Begin {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Begin(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Driver {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Driver(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Conn {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Conn(results.Params))
			}
		}
	}
}
