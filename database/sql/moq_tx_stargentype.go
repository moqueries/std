// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package sql

import (
	"context"
	"database/sql"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that sql.Tx_starGenType is mocked
// completely
var _ Tx_starGenType = (*MoqTx_starGenType_mock)(nil)

// Tx_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Tx_starGenType interface {
	Commit() error
	Rollback() error
	PrepareContext(ctx context.Context, query string) (*sql.Stmt, error)
	Prepare(query string) (*sql.Stmt, error)
	StmtContext(ctx context.Context, stmt *sql.Stmt) *sql.Stmt
	Stmt(stmt *sql.Stmt) *sql.Stmt
	ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error)
	Exec(query string, args ...interface{}) (sql.Result, error)
	QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)
	Query(query string, args ...interface{}) (*sql.Rows, error)
	QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row
	QueryRow(query string, args ...interface{}) *sql.Row
}

// MoqTx_starGenType holds the state of a moq of the Tx_starGenType type
type MoqTx_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqTx_starGenType_mock

	ResultsByParams_Commit          []MoqTx_starGenType_Commit_resultsByParams
	ResultsByParams_Rollback        []MoqTx_starGenType_Rollback_resultsByParams
	ResultsByParams_PrepareContext  []MoqTx_starGenType_PrepareContext_resultsByParams
	ResultsByParams_Prepare         []MoqTx_starGenType_Prepare_resultsByParams
	ResultsByParams_StmtContext     []MoqTx_starGenType_StmtContext_resultsByParams
	ResultsByParams_Stmt            []MoqTx_starGenType_Stmt_resultsByParams
	ResultsByParams_ExecContext     []MoqTx_starGenType_ExecContext_resultsByParams
	ResultsByParams_Exec            []MoqTx_starGenType_Exec_resultsByParams
	ResultsByParams_QueryContext    []MoqTx_starGenType_QueryContext_resultsByParams
	ResultsByParams_Query           []MoqTx_starGenType_Query_resultsByParams
	ResultsByParams_QueryRowContext []MoqTx_starGenType_QueryRowContext_resultsByParams
	ResultsByParams_QueryRow        []MoqTx_starGenType_QueryRow_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Commit         struct{}
			Rollback       struct{}
			PrepareContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
			}
			Prepare struct {
				Query moq.ParamIndexing
			}
			StmtContext struct {
				Ctx  moq.ParamIndexing
				Stmt moq.ParamIndexing
			}
			Stmt struct {
				Stmt moq.ParamIndexing
			}
			ExecContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			Exec struct {
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			QueryContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			Query struct {
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			QueryRowContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			QueryRow struct {
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
		}
	}
	// MoqTx_starGenType_mock isolates the mock interface of the Tx_starGenType
}

// type
type MoqTx_starGenType_mock struct {
	Moq *MoqTx_starGenType
}

// MoqTx_starGenType_recorder isolates the recorder interface of the
// Tx_starGenType type
type MoqTx_starGenType_recorder struct {
	Moq *MoqTx_starGenType
}

// MoqTx_starGenType_Commit_params holds the params of the Tx_starGenType type
type MoqTx_starGenType_Commit_params struct{}

// MoqTx_starGenType_Commit_paramsKey holds the map key params of the
// Tx_starGenType type
type MoqTx_starGenType_Commit_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTx_starGenType_Commit_resultsByParams contains the results for a given
// set of parameters for the Tx_starGenType type
type MoqTx_starGenType_Commit_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTx_starGenType_Commit_paramsKey]*MoqTx_starGenType_Commit_results
}

// MoqTx_starGenType_Commit_doFn defines the type of function needed when
// calling AndDo for the Tx_starGenType type
type MoqTx_starGenType_Commit_doFn func()

// MoqTx_starGenType_Commit_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Tx_starGenType type
type MoqTx_starGenType_Commit_doReturnFn func() error

// MoqTx_starGenType_Commit_results holds the results of the Tx_starGenType
// type
type MoqTx_starGenType_Commit_results struct {
	Params  MoqTx_starGenType_Commit_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_Commit_doFn
		DoReturnFn MoqTx_starGenType_Commit_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTx_starGenType_Commit_fnRecorder routes recorded function calls to the
// MoqTx_starGenType moq
type MoqTx_starGenType_Commit_fnRecorder struct {
	Params    MoqTx_starGenType_Commit_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTx_starGenType_Commit_results
	Moq       *MoqTx_starGenType
}

// MoqTx_starGenType_Commit_anyParams isolates the any params functions of the
// Tx_starGenType type
type MoqTx_starGenType_Commit_anyParams struct {
	Recorder *MoqTx_starGenType_Commit_fnRecorder
}

// MoqTx_starGenType_Rollback_params holds the params of the Tx_starGenType
// type
type MoqTx_starGenType_Rollback_params struct{}

// MoqTx_starGenType_Rollback_paramsKey holds the map key params of the
// Tx_starGenType type
type MoqTx_starGenType_Rollback_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTx_starGenType_Rollback_resultsByParams contains the results for a given
// set of parameters for the Tx_starGenType type
type MoqTx_starGenType_Rollback_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTx_starGenType_Rollback_paramsKey]*MoqTx_starGenType_Rollback_results
}

// MoqTx_starGenType_Rollback_doFn defines the type of function needed when
// calling AndDo for the Tx_starGenType type
type MoqTx_starGenType_Rollback_doFn func()

// MoqTx_starGenType_Rollback_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Tx_starGenType type
type MoqTx_starGenType_Rollback_doReturnFn func() error

// MoqTx_starGenType_Rollback_results holds the results of the Tx_starGenType
// type
type MoqTx_starGenType_Rollback_results struct {
	Params  MoqTx_starGenType_Rollback_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_Rollback_doFn
		DoReturnFn MoqTx_starGenType_Rollback_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTx_starGenType_Rollback_fnRecorder routes recorded function calls to the
// MoqTx_starGenType moq
type MoqTx_starGenType_Rollback_fnRecorder struct {
	Params    MoqTx_starGenType_Rollback_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTx_starGenType_Rollback_results
	Moq       *MoqTx_starGenType
}

// MoqTx_starGenType_Rollback_anyParams isolates the any params functions of
// the Tx_starGenType type
type MoqTx_starGenType_Rollback_anyParams struct {
	Recorder *MoqTx_starGenType_Rollback_fnRecorder
}

// MoqTx_starGenType_PrepareContext_params holds the params of the
// Tx_starGenType type
type MoqTx_starGenType_PrepareContext_params struct {
	Ctx   context.Context
	Query string
}

// MoqTx_starGenType_PrepareContext_paramsKey holds the map key params of the
// Tx_starGenType type
type MoqTx_starGenType_PrepareContext_paramsKey struct {
	Params struct {
		Ctx   context.Context
		Query string
	}
	Hashes struct {
		Ctx   hash.Hash
		Query hash.Hash
	}
}

// MoqTx_starGenType_PrepareContext_resultsByParams contains the results for a
// given set of parameters for the Tx_starGenType type
type MoqTx_starGenType_PrepareContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTx_starGenType_PrepareContext_paramsKey]*MoqTx_starGenType_PrepareContext_results
}

// MoqTx_starGenType_PrepareContext_doFn defines the type of function needed
// when calling AndDo for the Tx_starGenType type
type MoqTx_starGenType_PrepareContext_doFn func(ctx context.Context, query string)

// MoqTx_starGenType_PrepareContext_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Tx_starGenType type
type MoqTx_starGenType_PrepareContext_doReturnFn func(ctx context.Context, query string) (*sql.Stmt, error)

// MoqTx_starGenType_PrepareContext_results holds the results of the
// Tx_starGenType type
type MoqTx_starGenType_PrepareContext_results struct {
	Params  MoqTx_starGenType_PrepareContext_params
	Results []struct {
		Values *struct {
			Result1 *sql.Stmt
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_PrepareContext_doFn
		DoReturnFn MoqTx_starGenType_PrepareContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTx_starGenType_PrepareContext_fnRecorder routes recorded function calls
// to the MoqTx_starGenType moq
type MoqTx_starGenType_PrepareContext_fnRecorder struct {
	Params    MoqTx_starGenType_PrepareContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTx_starGenType_PrepareContext_results
	Moq       *MoqTx_starGenType
}

// MoqTx_starGenType_PrepareContext_anyParams isolates the any params functions
// of the Tx_starGenType type
type MoqTx_starGenType_PrepareContext_anyParams struct {
	Recorder *MoqTx_starGenType_PrepareContext_fnRecorder
}

// MoqTx_starGenType_Prepare_params holds the params of the Tx_starGenType type
type MoqTx_starGenType_Prepare_params struct{ Query string }

// MoqTx_starGenType_Prepare_paramsKey holds the map key params of the
// Tx_starGenType type
type MoqTx_starGenType_Prepare_paramsKey struct {
	Params struct{ Query string }
	Hashes struct{ Query hash.Hash }
}

// MoqTx_starGenType_Prepare_resultsByParams contains the results for a given
// set of parameters for the Tx_starGenType type
type MoqTx_starGenType_Prepare_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTx_starGenType_Prepare_paramsKey]*MoqTx_starGenType_Prepare_results
}

// MoqTx_starGenType_Prepare_doFn defines the type of function needed when
// calling AndDo for the Tx_starGenType type
type MoqTx_starGenType_Prepare_doFn func(query string)

// MoqTx_starGenType_Prepare_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Tx_starGenType type
type MoqTx_starGenType_Prepare_doReturnFn func(query string) (*sql.Stmt, error)

// MoqTx_starGenType_Prepare_results holds the results of the Tx_starGenType
// type
type MoqTx_starGenType_Prepare_results struct {
	Params  MoqTx_starGenType_Prepare_params
	Results []struct {
		Values *struct {
			Result1 *sql.Stmt
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_Prepare_doFn
		DoReturnFn MoqTx_starGenType_Prepare_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTx_starGenType_Prepare_fnRecorder routes recorded function calls to the
// MoqTx_starGenType moq
type MoqTx_starGenType_Prepare_fnRecorder struct {
	Params    MoqTx_starGenType_Prepare_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTx_starGenType_Prepare_results
	Moq       *MoqTx_starGenType
}

// MoqTx_starGenType_Prepare_anyParams isolates the any params functions of the
// Tx_starGenType type
type MoqTx_starGenType_Prepare_anyParams struct {
	Recorder *MoqTx_starGenType_Prepare_fnRecorder
}

// MoqTx_starGenType_StmtContext_params holds the params of the Tx_starGenType
// type
type MoqTx_starGenType_StmtContext_params struct {
	Ctx  context.Context
	Stmt *sql.Stmt
}

// MoqTx_starGenType_StmtContext_paramsKey holds the map key params of the
// Tx_starGenType type
type MoqTx_starGenType_StmtContext_paramsKey struct {
	Params struct {
		Ctx  context.Context
		Stmt *sql.Stmt
	}
	Hashes struct {
		Ctx  hash.Hash
		Stmt hash.Hash
	}
}

// MoqTx_starGenType_StmtContext_resultsByParams contains the results for a
// given set of parameters for the Tx_starGenType type
type MoqTx_starGenType_StmtContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTx_starGenType_StmtContext_paramsKey]*MoqTx_starGenType_StmtContext_results
}

// MoqTx_starGenType_StmtContext_doFn defines the type of function needed when
// calling AndDo for the Tx_starGenType type
type MoqTx_starGenType_StmtContext_doFn func(ctx context.Context, stmt *sql.Stmt)

// MoqTx_starGenType_StmtContext_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Tx_starGenType type
type MoqTx_starGenType_StmtContext_doReturnFn func(ctx context.Context, stmt *sql.Stmt) *sql.Stmt

// MoqTx_starGenType_StmtContext_results holds the results of the
// Tx_starGenType type
type MoqTx_starGenType_StmtContext_results struct {
	Params  MoqTx_starGenType_StmtContext_params
	Results []struct {
		Values *struct {
			Result1 *sql.Stmt
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_StmtContext_doFn
		DoReturnFn MoqTx_starGenType_StmtContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTx_starGenType_StmtContext_fnRecorder routes recorded function calls to
// the MoqTx_starGenType moq
type MoqTx_starGenType_StmtContext_fnRecorder struct {
	Params    MoqTx_starGenType_StmtContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTx_starGenType_StmtContext_results
	Moq       *MoqTx_starGenType
}

// MoqTx_starGenType_StmtContext_anyParams isolates the any params functions of
// the Tx_starGenType type
type MoqTx_starGenType_StmtContext_anyParams struct {
	Recorder *MoqTx_starGenType_StmtContext_fnRecorder
}

// MoqTx_starGenType_Stmt_params holds the params of the Tx_starGenType type
type MoqTx_starGenType_Stmt_params struct{ Stmt *sql.Stmt }

// MoqTx_starGenType_Stmt_paramsKey holds the map key params of the
// Tx_starGenType type
type MoqTx_starGenType_Stmt_paramsKey struct {
	Params struct{ Stmt *sql.Stmt }
	Hashes struct{ Stmt hash.Hash }
}

// MoqTx_starGenType_Stmt_resultsByParams contains the results for a given set
// of parameters for the Tx_starGenType type
type MoqTx_starGenType_Stmt_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTx_starGenType_Stmt_paramsKey]*MoqTx_starGenType_Stmt_results
}

// MoqTx_starGenType_Stmt_doFn defines the type of function needed when calling
// AndDo for the Tx_starGenType type
type MoqTx_starGenType_Stmt_doFn func(stmt *sql.Stmt)

// MoqTx_starGenType_Stmt_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Tx_starGenType type
type MoqTx_starGenType_Stmt_doReturnFn func(stmt *sql.Stmt) *sql.Stmt

// MoqTx_starGenType_Stmt_results holds the results of the Tx_starGenType type
type MoqTx_starGenType_Stmt_results struct {
	Params  MoqTx_starGenType_Stmt_params
	Results []struct {
		Values *struct {
			Result1 *sql.Stmt
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_Stmt_doFn
		DoReturnFn MoqTx_starGenType_Stmt_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTx_starGenType_Stmt_fnRecorder routes recorded function calls to the
// MoqTx_starGenType moq
type MoqTx_starGenType_Stmt_fnRecorder struct {
	Params    MoqTx_starGenType_Stmt_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTx_starGenType_Stmt_results
	Moq       *MoqTx_starGenType
}

// MoqTx_starGenType_Stmt_anyParams isolates the any params functions of the
// Tx_starGenType type
type MoqTx_starGenType_Stmt_anyParams struct {
	Recorder *MoqTx_starGenType_Stmt_fnRecorder
}

// MoqTx_starGenType_ExecContext_params holds the params of the Tx_starGenType
// type
type MoqTx_starGenType_ExecContext_params struct {
	Ctx   context.Context
	Query string
	Args  []interface{}
}

// MoqTx_starGenType_ExecContext_paramsKey holds the map key params of the
// Tx_starGenType type
type MoqTx_starGenType_ExecContext_paramsKey struct {
	Params struct {
		Ctx   context.Context
		Query string
	}
	Hashes struct {
		Ctx   hash.Hash
		Query hash.Hash
		Args  hash.Hash
	}
}

// MoqTx_starGenType_ExecContext_resultsByParams contains the results for a
// given set of parameters for the Tx_starGenType type
type MoqTx_starGenType_ExecContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTx_starGenType_ExecContext_paramsKey]*MoqTx_starGenType_ExecContext_results
}

// MoqTx_starGenType_ExecContext_doFn defines the type of function needed when
// calling AndDo for the Tx_starGenType type
type MoqTx_starGenType_ExecContext_doFn func(ctx context.Context, query string, args ...interface{})

// MoqTx_starGenType_ExecContext_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Tx_starGenType type
type MoqTx_starGenType_ExecContext_doReturnFn func(ctx context.Context, query string, args ...interface{}) (sql.Result, error)

// MoqTx_starGenType_ExecContext_results holds the results of the
// Tx_starGenType type
type MoqTx_starGenType_ExecContext_results struct {
	Params  MoqTx_starGenType_ExecContext_params
	Results []struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_ExecContext_doFn
		DoReturnFn MoqTx_starGenType_ExecContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTx_starGenType_ExecContext_fnRecorder routes recorded function calls to
// the MoqTx_starGenType moq
type MoqTx_starGenType_ExecContext_fnRecorder struct {
	Params    MoqTx_starGenType_ExecContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTx_starGenType_ExecContext_results
	Moq       *MoqTx_starGenType
}

// MoqTx_starGenType_ExecContext_anyParams isolates the any params functions of
// the Tx_starGenType type
type MoqTx_starGenType_ExecContext_anyParams struct {
	Recorder *MoqTx_starGenType_ExecContext_fnRecorder
}

// MoqTx_starGenType_Exec_params holds the params of the Tx_starGenType type
type MoqTx_starGenType_Exec_params struct {
	Query string
	Args  []interface{}
}

// MoqTx_starGenType_Exec_paramsKey holds the map key params of the
// Tx_starGenType type
type MoqTx_starGenType_Exec_paramsKey struct {
	Params struct{ Query string }
	Hashes struct {
		Query hash.Hash
		Args  hash.Hash
	}
}

// MoqTx_starGenType_Exec_resultsByParams contains the results for a given set
// of parameters for the Tx_starGenType type
type MoqTx_starGenType_Exec_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTx_starGenType_Exec_paramsKey]*MoqTx_starGenType_Exec_results
}

// MoqTx_starGenType_Exec_doFn defines the type of function needed when calling
// AndDo for the Tx_starGenType type
type MoqTx_starGenType_Exec_doFn func(query string, args ...interface{})

// MoqTx_starGenType_Exec_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Tx_starGenType type
type MoqTx_starGenType_Exec_doReturnFn func(query string, args ...interface{}) (sql.Result, error)

// MoqTx_starGenType_Exec_results holds the results of the Tx_starGenType type
type MoqTx_starGenType_Exec_results struct {
	Params  MoqTx_starGenType_Exec_params
	Results []struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_Exec_doFn
		DoReturnFn MoqTx_starGenType_Exec_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTx_starGenType_Exec_fnRecorder routes recorded function calls to the
// MoqTx_starGenType moq
type MoqTx_starGenType_Exec_fnRecorder struct {
	Params    MoqTx_starGenType_Exec_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTx_starGenType_Exec_results
	Moq       *MoqTx_starGenType
}

// MoqTx_starGenType_Exec_anyParams isolates the any params functions of the
// Tx_starGenType type
type MoqTx_starGenType_Exec_anyParams struct {
	Recorder *MoqTx_starGenType_Exec_fnRecorder
}

// MoqTx_starGenType_QueryContext_params holds the params of the Tx_starGenType
// type
type MoqTx_starGenType_QueryContext_params struct {
	Ctx   context.Context
	Query string
	Args  []interface{}
}

// MoqTx_starGenType_QueryContext_paramsKey holds the map key params of the
// Tx_starGenType type
type MoqTx_starGenType_QueryContext_paramsKey struct {
	Params struct {
		Ctx   context.Context
		Query string
	}
	Hashes struct {
		Ctx   hash.Hash
		Query hash.Hash
		Args  hash.Hash
	}
}

// MoqTx_starGenType_QueryContext_resultsByParams contains the results for a
// given set of parameters for the Tx_starGenType type
type MoqTx_starGenType_QueryContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTx_starGenType_QueryContext_paramsKey]*MoqTx_starGenType_QueryContext_results
}

// MoqTx_starGenType_QueryContext_doFn defines the type of function needed when
// calling AndDo for the Tx_starGenType type
type MoqTx_starGenType_QueryContext_doFn func(ctx context.Context, query string, args ...interface{})

// MoqTx_starGenType_QueryContext_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Tx_starGenType type
type MoqTx_starGenType_QueryContext_doReturnFn func(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)

// MoqTx_starGenType_QueryContext_results holds the results of the
// Tx_starGenType type
type MoqTx_starGenType_QueryContext_results struct {
	Params  MoqTx_starGenType_QueryContext_params
	Results []struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_QueryContext_doFn
		DoReturnFn MoqTx_starGenType_QueryContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTx_starGenType_QueryContext_fnRecorder routes recorded function calls to
// the MoqTx_starGenType moq
type MoqTx_starGenType_QueryContext_fnRecorder struct {
	Params    MoqTx_starGenType_QueryContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTx_starGenType_QueryContext_results
	Moq       *MoqTx_starGenType
}

// MoqTx_starGenType_QueryContext_anyParams isolates the any params functions
// of the Tx_starGenType type
type MoqTx_starGenType_QueryContext_anyParams struct {
	Recorder *MoqTx_starGenType_QueryContext_fnRecorder
}

// MoqTx_starGenType_Query_params holds the params of the Tx_starGenType type
type MoqTx_starGenType_Query_params struct {
	Query string
	Args  []interface{}
}

// MoqTx_starGenType_Query_paramsKey holds the map key params of the
// Tx_starGenType type
type MoqTx_starGenType_Query_paramsKey struct {
	Params struct{ Query string }
	Hashes struct {
		Query hash.Hash
		Args  hash.Hash
	}
}

// MoqTx_starGenType_Query_resultsByParams contains the results for a given set
// of parameters for the Tx_starGenType type
type MoqTx_starGenType_Query_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTx_starGenType_Query_paramsKey]*MoqTx_starGenType_Query_results
}

// MoqTx_starGenType_Query_doFn defines the type of function needed when
// calling AndDo for the Tx_starGenType type
type MoqTx_starGenType_Query_doFn func(query string, args ...interface{})

// MoqTx_starGenType_Query_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Tx_starGenType type
type MoqTx_starGenType_Query_doReturnFn func(query string, args ...interface{}) (*sql.Rows, error)

// MoqTx_starGenType_Query_results holds the results of the Tx_starGenType type
type MoqTx_starGenType_Query_results struct {
	Params  MoqTx_starGenType_Query_params
	Results []struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_Query_doFn
		DoReturnFn MoqTx_starGenType_Query_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTx_starGenType_Query_fnRecorder routes recorded function calls to the
// MoqTx_starGenType moq
type MoqTx_starGenType_Query_fnRecorder struct {
	Params    MoqTx_starGenType_Query_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTx_starGenType_Query_results
	Moq       *MoqTx_starGenType
}

// MoqTx_starGenType_Query_anyParams isolates the any params functions of the
// Tx_starGenType type
type MoqTx_starGenType_Query_anyParams struct {
	Recorder *MoqTx_starGenType_Query_fnRecorder
}

// MoqTx_starGenType_QueryRowContext_params holds the params of the
// Tx_starGenType type
type MoqTx_starGenType_QueryRowContext_params struct {
	Ctx   context.Context
	Query string
	Args  []interface{}
}

// MoqTx_starGenType_QueryRowContext_paramsKey holds the map key params of the
// Tx_starGenType type
type MoqTx_starGenType_QueryRowContext_paramsKey struct {
	Params struct {
		Ctx   context.Context
		Query string
	}
	Hashes struct {
		Ctx   hash.Hash
		Query hash.Hash
		Args  hash.Hash
	}
}

// MoqTx_starGenType_QueryRowContext_resultsByParams contains the results for a
// given set of parameters for the Tx_starGenType type
type MoqTx_starGenType_QueryRowContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTx_starGenType_QueryRowContext_paramsKey]*MoqTx_starGenType_QueryRowContext_results
}

// MoqTx_starGenType_QueryRowContext_doFn defines the type of function needed
// when calling AndDo for the Tx_starGenType type
type MoqTx_starGenType_QueryRowContext_doFn func(ctx context.Context, query string, args ...interface{})

// MoqTx_starGenType_QueryRowContext_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Tx_starGenType type
type MoqTx_starGenType_QueryRowContext_doReturnFn func(ctx context.Context, query string, args ...interface{}) *sql.Row

// MoqTx_starGenType_QueryRowContext_results holds the results of the
// Tx_starGenType type
type MoqTx_starGenType_QueryRowContext_results struct {
	Params  MoqTx_starGenType_QueryRowContext_params
	Results []struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_QueryRowContext_doFn
		DoReturnFn MoqTx_starGenType_QueryRowContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTx_starGenType_QueryRowContext_fnRecorder routes recorded function calls
// to the MoqTx_starGenType moq
type MoqTx_starGenType_QueryRowContext_fnRecorder struct {
	Params    MoqTx_starGenType_QueryRowContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTx_starGenType_QueryRowContext_results
	Moq       *MoqTx_starGenType
}

// MoqTx_starGenType_QueryRowContext_anyParams isolates the any params
// functions of the Tx_starGenType type
type MoqTx_starGenType_QueryRowContext_anyParams struct {
	Recorder *MoqTx_starGenType_QueryRowContext_fnRecorder
}

// MoqTx_starGenType_QueryRow_params holds the params of the Tx_starGenType
// type
type MoqTx_starGenType_QueryRow_params struct {
	Query string
	Args  []interface{}
}

// MoqTx_starGenType_QueryRow_paramsKey holds the map key params of the
// Tx_starGenType type
type MoqTx_starGenType_QueryRow_paramsKey struct {
	Params struct{ Query string }
	Hashes struct {
		Query hash.Hash
		Args  hash.Hash
	}
}

// MoqTx_starGenType_QueryRow_resultsByParams contains the results for a given
// set of parameters for the Tx_starGenType type
type MoqTx_starGenType_QueryRow_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTx_starGenType_QueryRow_paramsKey]*MoqTx_starGenType_QueryRow_results
}

// MoqTx_starGenType_QueryRow_doFn defines the type of function needed when
// calling AndDo for the Tx_starGenType type
type MoqTx_starGenType_QueryRow_doFn func(query string, args ...interface{})

// MoqTx_starGenType_QueryRow_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Tx_starGenType type
type MoqTx_starGenType_QueryRow_doReturnFn func(query string, args ...interface{}) *sql.Row

// MoqTx_starGenType_QueryRow_results holds the results of the Tx_starGenType
// type
type MoqTx_starGenType_QueryRow_results struct {
	Params  MoqTx_starGenType_QueryRow_params
	Results []struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_QueryRow_doFn
		DoReturnFn MoqTx_starGenType_QueryRow_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTx_starGenType_QueryRow_fnRecorder routes recorded function calls to the
// MoqTx_starGenType moq
type MoqTx_starGenType_QueryRow_fnRecorder struct {
	Params    MoqTx_starGenType_QueryRow_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTx_starGenType_QueryRow_results
	Moq       *MoqTx_starGenType
}

// MoqTx_starGenType_QueryRow_anyParams isolates the any params functions of
// the Tx_starGenType type
type MoqTx_starGenType_QueryRow_anyParams struct {
	Recorder *MoqTx_starGenType_QueryRow_fnRecorder
}

// NewMoqTx_starGenType creates a new moq of the Tx_starGenType type
func NewMoqTx_starGenType(scene *moq.Scene, config *moq.Config) *MoqTx_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqTx_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqTx_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Commit         struct{}
				Rollback       struct{}
				PrepareContext struct {
					Ctx   moq.ParamIndexing
					Query moq.ParamIndexing
				}
				Prepare struct {
					Query moq.ParamIndexing
				}
				StmtContext struct {
					Ctx  moq.ParamIndexing
					Stmt moq.ParamIndexing
				}
				Stmt struct {
					Stmt moq.ParamIndexing
				}
				ExecContext struct {
					Ctx   moq.ParamIndexing
					Query moq.ParamIndexing
					Args  moq.ParamIndexing
				}
				Exec struct {
					Query moq.ParamIndexing
					Args  moq.ParamIndexing
				}
				QueryContext struct {
					Ctx   moq.ParamIndexing
					Query moq.ParamIndexing
					Args  moq.ParamIndexing
				}
				Query struct {
					Query moq.ParamIndexing
					Args  moq.ParamIndexing
				}
				QueryRowContext struct {
					Ctx   moq.ParamIndexing
					Query moq.ParamIndexing
					Args  moq.ParamIndexing
				}
				QueryRow struct {
					Query moq.ParamIndexing
					Args  moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Commit         struct{}
			Rollback       struct{}
			PrepareContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
			}
			Prepare struct {
				Query moq.ParamIndexing
			}
			StmtContext struct {
				Ctx  moq.ParamIndexing
				Stmt moq.ParamIndexing
			}
			Stmt struct {
				Stmt moq.ParamIndexing
			}
			ExecContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			Exec struct {
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			QueryContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			Query struct {
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			QueryRowContext struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			QueryRow struct {
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}
		}{
			Commit:   struct{}{},
			Rollback: struct{}{},
			PrepareContext: struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
			}{
				Ctx:   moq.ParamIndexByHash,
				Query: moq.ParamIndexByValue,
			},
			Prepare: struct {
				Query moq.ParamIndexing
			}{
				Query: moq.ParamIndexByValue,
			},
			StmtContext: struct {
				Ctx  moq.ParamIndexing
				Stmt moq.ParamIndexing
			}{
				Ctx:  moq.ParamIndexByHash,
				Stmt: moq.ParamIndexByHash,
			},
			Stmt: struct {
				Stmt moq.ParamIndexing
			}{
				Stmt: moq.ParamIndexByHash,
			},
			ExecContext: struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}{
				Ctx:   moq.ParamIndexByHash,
				Query: moq.ParamIndexByValue,
				Args:  moq.ParamIndexByHash,
			},
			Exec: struct {
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}{
				Query: moq.ParamIndexByValue,
				Args:  moq.ParamIndexByHash,
			},
			QueryContext: struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}{
				Ctx:   moq.ParamIndexByHash,
				Query: moq.ParamIndexByValue,
				Args:  moq.ParamIndexByHash,
			},
			Query: struct {
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}{
				Query: moq.ParamIndexByValue,
				Args:  moq.ParamIndexByHash,
			},
			QueryRowContext: struct {
				Ctx   moq.ParamIndexing
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}{
				Ctx:   moq.ParamIndexByHash,
				Query: moq.ParamIndexByValue,
				Args:  moq.ParamIndexByHash,
			},
			QueryRow: struct {
				Query moq.ParamIndexing
				Args  moq.ParamIndexing
			}{
				Query: moq.ParamIndexByValue,
				Args:  moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Tx_starGenType type
func (m *MoqTx_starGenType) Mock() *MoqTx_starGenType_mock { return m.Moq }

func (m *MoqTx_starGenType_mock) Commit() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqTx_starGenType_Commit_params{}
	var results *MoqTx_starGenType_Commit_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Commit {
		paramsKey := m.Moq.ParamsKey_Commit(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Commit(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Commit(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Commit(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqTx_starGenType_mock) Rollback() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqTx_starGenType_Rollback_params{}
	var results *MoqTx_starGenType_Rollback_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Rollback {
		paramsKey := m.Moq.ParamsKey_Rollback(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Rollback(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Rollback(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Rollback(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqTx_starGenType_mock) PrepareContext(ctx context.Context, query string) (result1 *sql.Stmt, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqTx_starGenType_PrepareContext_params{
		Ctx:   ctx,
		Query: query,
	}
	var results *MoqTx_starGenType_PrepareContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_PrepareContext {
		paramsKey := m.Moq.ParamsKey_PrepareContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_PrepareContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_PrepareContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_PrepareContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, query)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(ctx, query)
	}
	return
}

func (m *MoqTx_starGenType_mock) Prepare(query string) (result1 *sql.Stmt, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqTx_starGenType_Prepare_params{
		Query: query,
	}
	var results *MoqTx_starGenType_Prepare_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Prepare {
		paramsKey := m.Moq.ParamsKey_Prepare(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Prepare(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Prepare(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Prepare(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(query)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(query)
	}
	return
}

func (m *MoqTx_starGenType_mock) StmtContext(ctx context.Context, stmt *sql.Stmt) (result1 *sql.Stmt) {
	m.Moq.Scene.T.Helper()
	params := MoqTx_starGenType_StmtContext_params{
		Ctx:  ctx,
		Stmt: stmt,
	}
	var results *MoqTx_starGenType_StmtContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_StmtContext {
		paramsKey := m.Moq.ParamsKey_StmtContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_StmtContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_StmtContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_StmtContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, stmt)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(ctx, stmt)
	}
	return
}

func (m *MoqTx_starGenType_mock) Stmt(stmt *sql.Stmt) (result1 *sql.Stmt) {
	m.Moq.Scene.T.Helper()
	params := MoqTx_starGenType_Stmt_params{
		Stmt: stmt,
	}
	var results *MoqTx_starGenType_Stmt_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Stmt {
		paramsKey := m.Moq.ParamsKey_Stmt(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Stmt(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Stmt(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Stmt(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(stmt)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(stmt)
	}
	return
}

func (m *MoqTx_starGenType_mock) ExecContext(ctx context.Context, query string, args ...interface{}) (result1 sql.Result, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqTx_starGenType_ExecContext_params{
		Ctx:   ctx,
		Query: query,
		Args:  args,
	}
	var results *MoqTx_starGenType_ExecContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ExecContext {
		paramsKey := m.Moq.ParamsKey_ExecContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ExecContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ExecContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ExecContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, query, args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(ctx, query, args...)
	}
	return
}

func (m *MoqTx_starGenType_mock) Exec(query string, args ...interface{}) (result1 sql.Result, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqTx_starGenType_Exec_params{
		Query: query,
		Args:  args,
	}
	var results *MoqTx_starGenType_Exec_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Exec {
		paramsKey := m.Moq.ParamsKey_Exec(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Exec(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Exec(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Exec(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(query, args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(query, args...)
	}
	return
}

func (m *MoqTx_starGenType_mock) QueryContext(ctx context.Context, query string, args ...interface{}) (result1 *sql.Rows, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqTx_starGenType_QueryContext_params{
		Ctx:   ctx,
		Query: query,
		Args:  args,
	}
	var results *MoqTx_starGenType_QueryContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_QueryContext {
		paramsKey := m.Moq.ParamsKey_QueryContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_QueryContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_QueryContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_QueryContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, query, args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(ctx, query, args...)
	}
	return
}

func (m *MoqTx_starGenType_mock) Query(query string, args ...interface{}) (result1 *sql.Rows, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqTx_starGenType_Query_params{
		Query: query,
		Args:  args,
	}
	var results *MoqTx_starGenType_Query_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Query {
		paramsKey := m.Moq.ParamsKey_Query(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Query(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Query(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Query(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(query, args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(query, args...)
	}
	return
}

func (m *MoqTx_starGenType_mock) QueryRowContext(ctx context.Context, query string, args ...interface{}) (result1 *sql.Row) {
	m.Moq.Scene.T.Helper()
	params := MoqTx_starGenType_QueryRowContext_params{
		Ctx:   ctx,
		Query: query,
		Args:  args,
	}
	var results *MoqTx_starGenType_QueryRowContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_QueryRowContext {
		paramsKey := m.Moq.ParamsKey_QueryRowContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_QueryRowContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_QueryRowContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_QueryRowContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, query, args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(ctx, query, args...)
	}
	return
}

func (m *MoqTx_starGenType_mock) QueryRow(query string, args ...interface{}) (result1 *sql.Row) {
	m.Moq.Scene.T.Helper()
	params := MoqTx_starGenType_QueryRow_params{
		Query: query,
		Args:  args,
	}
	var results *MoqTx_starGenType_QueryRow_results
	for _, resultsByParams := range m.Moq.ResultsByParams_QueryRow {
		paramsKey := m.Moq.ParamsKey_QueryRow(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_QueryRow(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_QueryRow(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_QueryRow(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(query, args...)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(query, args...)
	}
	return
}

// OnCall returns the recorder implementation of the Tx_starGenType type
func (m *MoqTx_starGenType) OnCall() *MoqTx_starGenType_recorder {
	return &MoqTx_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqTx_starGenType_recorder) Commit() *MoqTx_starGenType_Commit_fnRecorder {
	return &MoqTx_starGenType_Commit_fnRecorder{
		Params:   MoqTx_starGenType_Commit_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTx_starGenType_Commit_fnRecorder) Any() *MoqTx_starGenType_Commit_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Commit(r.Params))
		return nil
	}
	return &MoqTx_starGenType_Commit_anyParams{Recorder: r}
}

func (r *MoqTx_starGenType_Commit_fnRecorder) Seq() *MoqTx_starGenType_Commit_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Commit(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTx_starGenType_Commit_fnRecorder) NoSeq() *MoqTx_starGenType_Commit_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Commit(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTx_starGenType_Commit_fnRecorder) ReturnResults(result1 error) *MoqTx_starGenType_Commit_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_Commit_doFn
		DoReturnFn MoqTx_starGenType_Commit_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTx_starGenType_Commit_fnRecorder) AndDo(fn MoqTx_starGenType_Commit_doFn) *MoqTx_starGenType_Commit_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTx_starGenType_Commit_fnRecorder) DoReturnResults(fn MoqTx_starGenType_Commit_doReturnFn) *MoqTx_starGenType_Commit_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_Commit_doFn
		DoReturnFn MoqTx_starGenType_Commit_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTx_starGenType_Commit_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTx_starGenType_Commit_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Commit {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTx_starGenType_Commit_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTx_starGenType_Commit_paramsKey]*MoqTx_starGenType_Commit_results{},
		}
		r.Moq.ResultsByParams_Commit = append(r.Moq.ResultsByParams_Commit, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Commit) {
			copy(r.Moq.ResultsByParams_Commit[insertAt+1:], r.Moq.ResultsByParams_Commit[insertAt:0])
			r.Moq.ResultsByParams_Commit[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Commit(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTx_starGenType_Commit_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTx_starGenType_Commit_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTx_starGenType_Commit_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqTx_starGenType_Commit_doFn
				DoReturnFn MoqTx_starGenType_Commit_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTx_starGenType) PrettyParams_Commit(params MoqTx_starGenType_Commit_params) string {
	return fmt.Sprintf("Commit()")
}

func (m *MoqTx_starGenType) ParamsKey_Commit(params MoqTx_starGenType_Commit_params, anyParams uint64) MoqTx_starGenType_Commit_paramsKey {
	m.Scene.T.Helper()
	return MoqTx_starGenType_Commit_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTx_starGenType_recorder) Rollback() *MoqTx_starGenType_Rollback_fnRecorder {
	return &MoqTx_starGenType_Rollback_fnRecorder{
		Params:   MoqTx_starGenType_Rollback_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTx_starGenType_Rollback_fnRecorder) Any() *MoqTx_starGenType_Rollback_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Rollback(r.Params))
		return nil
	}
	return &MoqTx_starGenType_Rollback_anyParams{Recorder: r}
}

func (r *MoqTx_starGenType_Rollback_fnRecorder) Seq() *MoqTx_starGenType_Rollback_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Rollback(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTx_starGenType_Rollback_fnRecorder) NoSeq() *MoqTx_starGenType_Rollback_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Rollback(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTx_starGenType_Rollback_fnRecorder) ReturnResults(result1 error) *MoqTx_starGenType_Rollback_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_Rollback_doFn
		DoReturnFn MoqTx_starGenType_Rollback_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTx_starGenType_Rollback_fnRecorder) AndDo(fn MoqTx_starGenType_Rollback_doFn) *MoqTx_starGenType_Rollback_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTx_starGenType_Rollback_fnRecorder) DoReturnResults(fn MoqTx_starGenType_Rollback_doReturnFn) *MoqTx_starGenType_Rollback_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_Rollback_doFn
		DoReturnFn MoqTx_starGenType_Rollback_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTx_starGenType_Rollback_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTx_starGenType_Rollback_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Rollback {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTx_starGenType_Rollback_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTx_starGenType_Rollback_paramsKey]*MoqTx_starGenType_Rollback_results{},
		}
		r.Moq.ResultsByParams_Rollback = append(r.Moq.ResultsByParams_Rollback, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Rollback) {
			copy(r.Moq.ResultsByParams_Rollback[insertAt+1:], r.Moq.ResultsByParams_Rollback[insertAt:0])
			r.Moq.ResultsByParams_Rollback[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Rollback(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTx_starGenType_Rollback_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTx_starGenType_Rollback_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTx_starGenType_Rollback_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqTx_starGenType_Rollback_doFn
				DoReturnFn MoqTx_starGenType_Rollback_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTx_starGenType) PrettyParams_Rollback(params MoqTx_starGenType_Rollback_params) string {
	return fmt.Sprintf("Rollback()")
}

func (m *MoqTx_starGenType) ParamsKey_Rollback(params MoqTx_starGenType_Rollback_params, anyParams uint64) MoqTx_starGenType_Rollback_paramsKey {
	m.Scene.T.Helper()
	return MoqTx_starGenType_Rollback_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTx_starGenType_recorder) PrepareContext(ctx context.Context, query string) *MoqTx_starGenType_PrepareContext_fnRecorder {
	return &MoqTx_starGenType_PrepareContext_fnRecorder{
		Params: MoqTx_starGenType_PrepareContext_params{
			Ctx:   ctx,
			Query: query,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTx_starGenType_PrepareContext_fnRecorder) Any() *MoqTx_starGenType_PrepareContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PrepareContext(r.Params))
		return nil
	}
	return &MoqTx_starGenType_PrepareContext_anyParams{Recorder: r}
}

func (a *MoqTx_starGenType_PrepareContext_anyParams) Ctx() *MoqTx_starGenType_PrepareContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqTx_starGenType_PrepareContext_anyParams) Query() *MoqTx_starGenType_PrepareContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqTx_starGenType_PrepareContext_fnRecorder) Seq() *MoqTx_starGenType_PrepareContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PrepareContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTx_starGenType_PrepareContext_fnRecorder) NoSeq() *MoqTx_starGenType_PrepareContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PrepareContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTx_starGenType_PrepareContext_fnRecorder) ReturnResults(result1 *sql.Stmt, result2 error) *MoqTx_starGenType_PrepareContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Stmt
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_PrepareContext_doFn
		DoReturnFn MoqTx_starGenType_PrepareContext_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Stmt
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTx_starGenType_PrepareContext_fnRecorder) AndDo(fn MoqTx_starGenType_PrepareContext_doFn) *MoqTx_starGenType_PrepareContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTx_starGenType_PrepareContext_fnRecorder) DoReturnResults(fn MoqTx_starGenType_PrepareContext_doReturnFn) *MoqTx_starGenType_PrepareContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Stmt
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_PrepareContext_doFn
		DoReturnFn MoqTx_starGenType_PrepareContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTx_starGenType_PrepareContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTx_starGenType_PrepareContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_PrepareContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTx_starGenType_PrepareContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTx_starGenType_PrepareContext_paramsKey]*MoqTx_starGenType_PrepareContext_results{},
		}
		r.Moq.ResultsByParams_PrepareContext = append(r.Moq.ResultsByParams_PrepareContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_PrepareContext) {
			copy(r.Moq.ResultsByParams_PrepareContext[insertAt+1:], r.Moq.ResultsByParams_PrepareContext[insertAt:0])
			r.Moq.ResultsByParams_PrepareContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_PrepareContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTx_starGenType_PrepareContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTx_starGenType_PrepareContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTx_starGenType_PrepareContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Stmt
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqTx_starGenType_PrepareContext_doFn
				DoReturnFn MoqTx_starGenType_PrepareContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTx_starGenType) PrettyParams_PrepareContext(params MoqTx_starGenType_PrepareContext_params) string {
	return fmt.Sprintf("PrepareContext(%#v, %#v)", params.Ctx, params.Query)
}

func (m *MoqTx_starGenType) ParamsKey_PrepareContext(params MoqTx_starGenType_PrepareContext_params, anyParams uint64) MoqTx_starGenType_PrepareContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.PrepareContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.PrepareContext.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	return MoqTx_starGenType_PrepareContext_paramsKey{
		Params: struct {
			Ctx   context.Context
			Query string
		}{
			Ctx:   ctxUsed,
			Query: queryUsed,
		},
		Hashes: struct {
			Ctx   hash.Hash
			Query hash.Hash
		}{
			Ctx:   ctxUsedHash,
			Query: queryUsedHash,
		},
	}
}

func (m *MoqTx_starGenType_recorder) Prepare(query string) *MoqTx_starGenType_Prepare_fnRecorder {
	return &MoqTx_starGenType_Prepare_fnRecorder{
		Params: MoqTx_starGenType_Prepare_params{
			Query: query,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTx_starGenType_Prepare_fnRecorder) Any() *MoqTx_starGenType_Prepare_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Prepare(r.Params))
		return nil
	}
	return &MoqTx_starGenType_Prepare_anyParams{Recorder: r}
}

func (a *MoqTx_starGenType_Prepare_anyParams) Query() *MoqTx_starGenType_Prepare_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqTx_starGenType_Prepare_fnRecorder) Seq() *MoqTx_starGenType_Prepare_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Prepare(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTx_starGenType_Prepare_fnRecorder) NoSeq() *MoqTx_starGenType_Prepare_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Prepare(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTx_starGenType_Prepare_fnRecorder) ReturnResults(result1 *sql.Stmt, result2 error) *MoqTx_starGenType_Prepare_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Stmt
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_Prepare_doFn
		DoReturnFn MoqTx_starGenType_Prepare_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Stmt
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTx_starGenType_Prepare_fnRecorder) AndDo(fn MoqTx_starGenType_Prepare_doFn) *MoqTx_starGenType_Prepare_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTx_starGenType_Prepare_fnRecorder) DoReturnResults(fn MoqTx_starGenType_Prepare_doReturnFn) *MoqTx_starGenType_Prepare_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Stmt
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_Prepare_doFn
		DoReturnFn MoqTx_starGenType_Prepare_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTx_starGenType_Prepare_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTx_starGenType_Prepare_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Prepare {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTx_starGenType_Prepare_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTx_starGenType_Prepare_paramsKey]*MoqTx_starGenType_Prepare_results{},
		}
		r.Moq.ResultsByParams_Prepare = append(r.Moq.ResultsByParams_Prepare, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Prepare) {
			copy(r.Moq.ResultsByParams_Prepare[insertAt+1:], r.Moq.ResultsByParams_Prepare[insertAt:0])
			r.Moq.ResultsByParams_Prepare[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Prepare(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTx_starGenType_Prepare_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTx_starGenType_Prepare_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTx_starGenType_Prepare_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Stmt
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqTx_starGenType_Prepare_doFn
				DoReturnFn MoqTx_starGenType_Prepare_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTx_starGenType) PrettyParams_Prepare(params MoqTx_starGenType_Prepare_params) string {
	return fmt.Sprintf("Prepare(%#v)", params.Query)
}

func (m *MoqTx_starGenType) ParamsKey_Prepare(params MoqTx_starGenType_Prepare_params, anyParams uint64) MoqTx_starGenType_Prepare_paramsKey {
	m.Scene.T.Helper()
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Prepare.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	return MoqTx_starGenType_Prepare_paramsKey{
		Params: struct{ Query string }{
			Query: queryUsed,
		},
		Hashes: struct{ Query hash.Hash }{
			Query: queryUsedHash,
		},
	}
}

func (m *MoqTx_starGenType_recorder) StmtContext(ctx context.Context, stmt *sql.Stmt) *MoqTx_starGenType_StmtContext_fnRecorder {
	return &MoqTx_starGenType_StmtContext_fnRecorder{
		Params: MoqTx_starGenType_StmtContext_params{
			Ctx:  ctx,
			Stmt: stmt,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTx_starGenType_StmtContext_fnRecorder) Any() *MoqTx_starGenType_StmtContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StmtContext(r.Params))
		return nil
	}
	return &MoqTx_starGenType_StmtContext_anyParams{Recorder: r}
}

func (a *MoqTx_starGenType_StmtContext_anyParams) Ctx() *MoqTx_starGenType_StmtContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqTx_starGenType_StmtContext_anyParams) Stmt() *MoqTx_starGenType_StmtContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqTx_starGenType_StmtContext_fnRecorder) Seq() *MoqTx_starGenType_StmtContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StmtContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTx_starGenType_StmtContext_fnRecorder) NoSeq() *MoqTx_starGenType_StmtContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StmtContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTx_starGenType_StmtContext_fnRecorder) ReturnResults(result1 *sql.Stmt) *MoqTx_starGenType_StmtContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Stmt
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_StmtContext_doFn
		DoReturnFn MoqTx_starGenType_StmtContext_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Stmt
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTx_starGenType_StmtContext_fnRecorder) AndDo(fn MoqTx_starGenType_StmtContext_doFn) *MoqTx_starGenType_StmtContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTx_starGenType_StmtContext_fnRecorder) DoReturnResults(fn MoqTx_starGenType_StmtContext_doReturnFn) *MoqTx_starGenType_StmtContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Stmt
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_StmtContext_doFn
		DoReturnFn MoqTx_starGenType_StmtContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTx_starGenType_StmtContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTx_starGenType_StmtContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_StmtContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTx_starGenType_StmtContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTx_starGenType_StmtContext_paramsKey]*MoqTx_starGenType_StmtContext_results{},
		}
		r.Moq.ResultsByParams_StmtContext = append(r.Moq.ResultsByParams_StmtContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_StmtContext) {
			copy(r.Moq.ResultsByParams_StmtContext[insertAt+1:], r.Moq.ResultsByParams_StmtContext[insertAt:0])
			r.Moq.ResultsByParams_StmtContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_StmtContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTx_starGenType_StmtContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTx_starGenType_StmtContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTx_starGenType_StmtContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Stmt
				}
				Sequence   uint32
				DoFn       MoqTx_starGenType_StmtContext_doFn
				DoReturnFn MoqTx_starGenType_StmtContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTx_starGenType) PrettyParams_StmtContext(params MoqTx_starGenType_StmtContext_params) string {
	return fmt.Sprintf("StmtContext(%#v, %#v)", params.Ctx, params.Stmt)
}

func (m *MoqTx_starGenType) ParamsKey_StmtContext(params MoqTx_starGenType_StmtContext_params, anyParams uint64) MoqTx_starGenType_StmtContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.StmtContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var stmtUsed *sql.Stmt
	var stmtUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.StmtContext.Stmt == moq.ParamIndexByValue {
			stmtUsed = params.Stmt
		} else {
			stmtUsedHash = hash.DeepHash(params.Stmt)
		}
	}
	return MoqTx_starGenType_StmtContext_paramsKey{
		Params: struct {
			Ctx  context.Context
			Stmt *sql.Stmt
		}{
			Ctx:  ctxUsed,
			Stmt: stmtUsed,
		},
		Hashes: struct {
			Ctx  hash.Hash
			Stmt hash.Hash
		}{
			Ctx:  ctxUsedHash,
			Stmt: stmtUsedHash,
		},
	}
}

func (m *MoqTx_starGenType_recorder) Stmt(stmt *sql.Stmt) *MoqTx_starGenType_Stmt_fnRecorder {
	return &MoqTx_starGenType_Stmt_fnRecorder{
		Params: MoqTx_starGenType_Stmt_params{
			Stmt: stmt,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTx_starGenType_Stmt_fnRecorder) Any() *MoqTx_starGenType_Stmt_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Stmt(r.Params))
		return nil
	}
	return &MoqTx_starGenType_Stmt_anyParams{Recorder: r}
}

func (a *MoqTx_starGenType_Stmt_anyParams) Stmt() *MoqTx_starGenType_Stmt_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqTx_starGenType_Stmt_fnRecorder) Seq() *MoqTx_starGenType_Stmt_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Stmt(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTx_starGenType_Stmt_fnRecorder) NoSeq() *MoqTx_starGenType_Stmt_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Stmt(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTx_starGenType_Stmt_fnRecorder) ReturnResults(result1 *sql.Stmt) *MoqTx_starGenType_Stmt_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Stmt
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_Stmt_doFn
		DoReturnFn MoqTx_starGenType_Stmt_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Stmt
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTx_starGenType_Stmt_fnRecorder) AndDo(fn MoqTx_starGenType_Stmt_doFn) *MoqTx_starGenType_Stmt_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTx_starGenType_Stmt_fnRecorder) DoReturnResults(fn MoqTx_starGenType_Stmt_doReturnFn) *MoqTx_starGenType_Stmt_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Stmt
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_Stmt_doFn
		DoReturnFn MoqTx_starGenType_Stmt_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTx_starGenType_Stmt_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTx_starGenType_Stmt_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Stmt {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTx_starGenType_Stmt_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTx_starGenType_Stmt_paramsKey]*MoqTx_starGenType_Stmt_results{},
		}
		r.Moq.ResultsByParams_Stmt = append(r.Moq.ResultsByParams_Stmt, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Stmt) {
			copy(r.Moq.ResultsByParams_Stmt[insertAt+1:], r.Moq.ResultsByParams_Stmt[insertAt:0])
			r.Moq.ResultsByParams_Stmt[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Stmt(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTx_starGenType_Stmt_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTx_starGenType_Stmt_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTx_starGenType_Stmt_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Stmt
				}
				Sequence   uint32
				DoFn       MoqTx_starGenType_Stmt_doFn
				DoReturnFn MoqTx_starGenType_Stmt_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTx_starGenType) PrettyParams_Stmt(params MoqTx_starGenType_Stmt_params) string {
	return fmt.Sprintf("Stmt(%#v)", params.Stmt)
}

func (m *MoqTx_starGenType) ParamsKey_Stmt(params MoqTx_starGenType_Stmt_params, anyParams uint64) MoqTx_starGenType_Stmt_paramsKey {
	m.Scene.T.Helper()
	var stmtUsed *sql.Stmt
	var stmtUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Stmt.Stmt == moq.ParamIndexByValue {
			stmtUsed = params.Stmt
		} else {
			stmtUsedHash = hash.DeepHash(params.Stmt)
		}
	}
	return MoqTx_starGenType_Stmt_paramsKey{
		Params: struct{ Stmt *sql.Stmt }{
			Stmt: stmtUsed,
		},
		Hashes: struct{ Stmt hash.Hash }{
			Stmt: stmtUsedHash,
		},
	}
}

func (m *MoqTx_starGenType_recorder) ExecContext(ctx context.Context, query string, args ...interface{}) *MoqTx_starGenType_ExecContext_fnRecorder {
	return &MoqTx_starGenType_ExecContext_fnRecorder{
		Params: MoqTx_starGenType_ExecContext_params{
			Ctx:   ctx,
			Query: query,
			Args:  args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTx_starGenType_ExecContext_fnRecorder) Any() *MoqTx_starGenType_ExecContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExecContext(r.Params))
		return nil
	}
	return &MoqTx_starGenType_ExecContext_anyParams{Recorder: r}
}

func (a *MoqTx_starGenType_ExecContext_anyParams) Ctx() *MoqTx_starGenType_ExecContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqTx_starGenType_ExecContext_anyParams) Query() *MoqTx_starGenType_ExecContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqTx_starGenType_ExecContext_anyParams) Args() *MoqTx_starGenType_ExecContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqTx_starGenType_ExecContext_fnRecorder) Seq() *MoqTx_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExecContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTx_starGenType_ExecContext_fnRecorder) NoSeq() *MoqTx_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExecContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTx_starGenType_ExecContext_fnRecorder) ReturnResults(result1 sql.Result, result2 error) *MoqTx_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_ExecContext_doFn
		DoReturnFn MoqTx_starGenType_ExecContext_doReturnFn
	}{
		Values: &struct {
			Result1 sql.Result
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTx_starGenType_ExecContext_fnRecorder) AndDo(fn MoqTx_starGenType_ExecContext_doFn) *MoqTx_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTx_starGenType_ExecContext_fnRecorder) DoReturnResults(fn MoqTx_starGenType_ExecContext_doReturnFn) *MoqTx_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_ExecContext_doFn
		DoReturnFn MoqTx_starGenType_ExecContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTx_starGenType_ExecContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTx_starGenType_ExecContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ExecContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTx_starGenType_ExecContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTx_starGenType_ExecContext_paramsKey]*MoqTx_starGenType_ExecContext_results{},
		}
		r.Moq.ResultsByParams_ExecContext = append(r.Moq.ResultsByParams_ExecContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ExecContext) {
			copy(r.Moq.ResultsByParams_ExecContext[insertAt+1:], r.Moq.ResultsByParams_ExecContext[insertAt:0])
			r.Moq.ResultsByParams_ExecContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ExecContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTx_starGenType_ExecContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTx_starGenType_ExecContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTx_starGenType_ExecContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 sql.Result
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqTx_starGenType_ExecContext_doFn
				DoReturnFn MoqTx_starGenType_ExecContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTx_starGenType) PrettyParams_ExecContext(params MoqTx_starGenType_ExecContext_params) string {
	return fmt.Sprintf("ExecContext(%#v, %#v, %#v)", params.Ctx, params.Query, params.Args)
}

func (m *MoqTx_starGenType) ParamsKey_ExecContext(params MoqTx_starGenType_ExecContext_params, anyParams uint64) MoqTx_starGenType_ExecContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ExecContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.ExecContext.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.ExecContext.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the ExecContext function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqTx_starGenType_ExecContext_paramsKey{
		Params: struct {
			Ctx   context.Context
			Query string
		}{
			Ctx:   ctxUsed,
			Query: queryUsed,
		},
		Hashes: struct {
			Ctx   hash.Hash
			Query hash.Hash
			Args  hash.Hash
		}{
			Ctx:   ctxUsedHash,
			Query: queryUsedHash,
			Args:  argsUsedHash,
		},
	}
}

func (m *MoqTx_starGenType_recorder) Exec(query string, args ...interface{}) *MoqTx_starGenType_Exec_fnRecorder {
	return &MoqTx_starGenType_Exec_fnRecorder{
		Params: MoqTx_starGenType_Exec_params{
			Query: query,
			Args:  args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTx_starGenType_Exec_fnRecorder) Any() *MoqTx_starGenType_Exec_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Exec(r.Params))
		return nil
	}
	return &MoqTx_starGenType_Exec_anyParams{Recorder: r}
}

func (a *MoqTx_starGenType_Exec_anyParams) Query() *MoqTx_starGenType_Exec_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqTx_starGenType_Exec_anyParams) Args() *MoqTx_starGenType_Exec_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqTx_starGenType_Exec_fnRecorder) Seq() *MoqTx_starGenType_Exec_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Exec(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTx_starGenType_Exec_fnRecorder) NoSeq() *MoqTx_starGenType_Exec_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Exec(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTx_starGenType_Exec_fnRecorder) ReturnResults(result1 sql.Result, result2 error) *MoqTx_starGenType_Exec_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_Exec_doFn
		DoReturnFn MoqTx_starGenType_Exec_doReturnFn
	}{
		Values: &struct {
			Result1 sql.Result
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTx_starGenType_Exec_fnRecorder) AndDo(fn MoqTx_starGenType_Exec_doFn) *MoqTx_starGenType_Exec_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTx_starGenType_Exec_fnRecorder) DoReturnResults(fn MoqTx_starGenType_Exec_doReturnFn) *MoqTx_starGenType_Exec_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 sql.Result
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_Exec_doFn
		DoReturnFn MoqTx_starGenType_Exec_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTx_starGenType_Exec_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTx_starGenType_Exec_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Exec {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTx_starGenType_Exec_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTx_starGenType_Exec_paramsKey]*MoqTx_starGenType_Exec_results{},
		}
		r.Moq.ResultsByParams_Exec = append(r.Moq.ResultsByParams_Exec, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Exec) {
			copy(r.Moq.ResultsByParams_Exec[insertAt+1:], r.Moq.ResultsByParams_Exec[insertAt:0])
			r.Moq.ResultsByParams_Exec[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Exec(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTx_starGenType_Exec_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTx_starGenType_Exec_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTx_starGenType_Exec_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 sql.Result
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqTx_starGenType_Exec_doFn
				DoReturnFn MoqTx_starGenType_Exec_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTx_starGenType) PrettyParams_Exec(params MoqTx_starGenType_Exec_params) string {
	return fmt.Sprintf("Exec(%#v, %#v)", params.Query, params.Args)
}

func (m *MoqTx_starGenType) ParamsKey_Exec(params MoqTx_starGenType_Exec_params, anyParams uint64) MoqTx_starGenType_Exec_paramsKey {
	m.Scene.T.Helper()
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Exec.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Exec.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the Exec function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqTx_starGenType_Exec_paramsKey{
		Params: struct{ Query string }{
			Query: queryUsed,
		},
		Hashes: struct {
			Query hash.Hash
			Args  hash.Hash
		}{
			Query: queryUsedHash,
			Args:  argsUsedHash,
		},
	}
}

func (m *MoqTx_starGenType_recorder) QueryContext(ctx context.Context, query string, args ...interface{}) *MoqTx_starGenType_QueryContext_fnRecorder {
	return &MoqTx_starGenType_QueryContext_fnRecorder{
		Params: MoqTx_starGenType_QueryContext_params{
			Ctx:   ctx,
			Query: query,
			Args:  args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTx_starGenType_QueryContext_fnRecorder) Any() *MoqTx_starGenType_QueryContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryContext(r.Params))
		return nil
	}
	return &MoqTx_starGenType_QueryContext_anyParams{Recorder: r}
}

func (a *MoqTx_starGenType_QueryContext_anyParams) Ctx() *MoqTx_starGenType_QueryContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqTx_starGenType_QueryContext_anyParams) Query() *MoqTx_starGenType_QueryContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqTx_starGenType_QueryContext_anyParams) Args() *MoqTx_starGenType_QueryContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqTx_starGenType_QueryContext_fnRecorder) Seq() *MoqTx_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTx_starGenType_QueryContext_fnRecorder) NoSeq() *MoqTx_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTx_starGenType_QueryContext_fnRecorder) ReturnResults(result1 *sql.Rows, result2 error) *MoqTx_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_QueryContext_doFn
		DoReturnFn MoqTx_starGenType_QueryContext_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Rows
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTx_starGenType_QueryContext_fnRecorder) AndDo(fn MoqTx_starGenType_QueryContext_doFn) *MoqTx_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTx_starGenType_QueryContext_fnRecorder) DoReturnResults(fn MoqTx_starGenType_QueryContext_doReturnFn) *MoqTx_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_QueryContext_doFn
		DoReturnFn MoqTx_starGenType_QueryContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTx_starGenType_QueryContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTx_starGenType_QueryContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_QueryContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTx_starGenType_QueryContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTx_starGenType_QueryContext_paramsKey]*MoqTx_starGenType_QueryContext_results{},
		}
		r.Moq.ResultsByParams_QueryContext = append(r.Moq.ResultsByParams_QueryContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_QueryContext) {
			copy(r.Moq.ResultsByParams_QueryContext[insertAt+1:], r.Moq.ResultsByParams_QueryContext[insertAt:0])
			r.Moq.ResultsByParams_QueryContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_QueryContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTx_starGenType_QueryContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTx_starGenType_QueryContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTx_starGenType_QueryContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Rows
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqTx_starGenType_QueryContext_doFn
				DoReturnFn MoqTx_starGenType_QueryContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTx_starGenType) PrettyParams_QueryContext(params MoqTx_starGenType_QueryContext_params) string {
	return fmt.Sprintf("QueryContext(%#v, %#v, %#v)", params.Ctx, params.Query, params.Args)
}

func (m *MoqTx_starGenType) ParamsKey_QueryContext(params MoqTx_starGenType_QueryContext_params, anyParams uint64) MoqTx_starGenType_QueryContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.QueryContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.QueryContext.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.QueryContext.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the QueryContext function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqTx_starGenType_QueryContext_paramsKey{
		Params: struct {
			Ctx   context.Context
			Query string
		}{
			Ctx:   ctxUsed,
			Query: queryUsed,
		},
		Hashes: struct {
			Ctx   hash.Hash
			Query hash.Hash
			Args  hash.Hash
		}{
			Ctx:   ctxUsedHash,
			Query: queryUsedHash,
			Args:  argsUsedHash,
		},
	}
}

func (m *MoqTx_starGenType_recorder) Query(query string, args ...interface{}) *MoqTx_starGenType_Query_fnRecorder {
	return &MoqTx_starGenType_Query_fnRecorder{
		Params: MoqTx_starGenType_Query_params{
			Query: query,
			Args:  args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTx_starGenType_Query_fnRecorder) Any() *MoqTx_starGenType_Query_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Query(r.Params))
		return nil
	}
	return &MoqTx_starGenType_Query_anyParams{Recorder: r}
}

func (a *MoqTx_starGenType_Query_anyParams) Query() *MoqTx_starGenType_Query_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqTx_starGenType_Query_anyParams) Args() *MoqTx_starGenType_Query_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqTx_starGenType_Query_fnRecorder) Seq() *MoqTx_starGenType_Query_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Query(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTx_starGenType_Query_fnRecorder) NoSeq() *MoqTx_starGenType_Query_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Query(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTx_starGenType_Query_fnRecorder) ReturnResults(result1 *sql.Rows, result2 error) *MoqTx_starGenType_Query_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_Query_doFn
		DoReturnFn MoqTx_starGenType_Query_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Rows
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTx_starGenType_Query_fnRecorder) AndDo(fn MoqTx_starGenType_Query_doFn) *MoqTx_starGenType_Query_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTx_starGenType_Query_fnRecorder) DoReturnResults(fn MoqTx_starGenType_Query_doReturnFn) *MoqTx_starGenType_Query_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Rows
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_Query_doFn
		DoReturnFn MoqTx_starGenType_Query_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTx_starGenType_Query_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTx_starGenType_Query_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Query {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTx_starGenType_Query_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTx_starGenType_Query_paramsKey]*MoqTx_starGenType_Query_results{},
		}
		r.Moq.ResultsByParams_Query = append(r.Moq.ResultsByParams_Query, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Query) {
			copy(r.Moq.ResultsByParams_Query[insertAt+1:], r.Moq.ResultsByParams_Query[insertAt:0])
			r.Moq.ResultsByParams_Query[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Query(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTx_starGenType_Query_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTx_starGenType_Query_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTx_starGenType_Query_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Rows
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqTx_starGenType_Query_doFn
				DoReturnFn MoqTx_starGenType_Query_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTx_starGenType) PrettyParams_Query(params MoqTx_starGenType_Query_params) string {
	return fmt.Sprintf("Query(%#v, %#v)", params.Query, params.Args)
}

func (m *MoqTx_starGenType) ParamsKey_Query(params MoqTx_starGenType_Query_params, anyParams uint64) MoqTx_starGenType_Query_paramsKey {
	m.Scene.T.Helper()
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Query.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Query.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the Query function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqTx_starGenType_Query_paramsKey{
		Params: struct{ Query string }{
			Query: queryUsed,
		},
		Hashes: struct {
			Query hash.Hash
			Args  hash.Hash
		}{
			Query: queryUsedHash,
			Args:  argsUsedHash,
		},
	}
}

func (m *MoqTx_starGenType_recorder) QueryRowContext(ctx context.Context, query string, args ...interface{}) *MoqTx_starGenType_QueryRowContext_fnRecorder {
	return &MoqTx_starGenType_QueryRowContext_fnRecorder{
		Params: MoqTx_starGenType_QueryRowContext_params{
			Ctx:   ctx,
			Query: query,
			Args:  args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTx_starGenType_QueryRowContext_fnRecorder) Any() *MoqTx_starGenType_QueryRowContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRowContext(r.Params))
		return nil
	}
	return &MoqTx_starGenType_QueryRowContext_anyParams{Recorder: r}
}

func (a *MoqTx_starGenType_QueryRowContext_anyParams) Ctx() *MoqTx_starGenType_QueryRowContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqTx_starGenType_QueryRowContext_anyParams) Query() *MoqTx_starGenType_QueryRowContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqTx_starGenType_QueryRowContext_anyParams) Args() *MoqTx_starGenType_QueryRowContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqTx_starGenType_QueryRowContext_fnRecorder) Seq() *MoqTx_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRowContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTx_starGenType_QueryRowContext_fnRecorder) NoSeq() *MoqTx_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRowContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTx_starGenType_QueryRowContext_fnRecorder) ReturnResults(result1 *sql.Row) *MoqTx_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_QueryRowContext_doFn
		DoReturnFn MoqTx_starGenType_QueryRowContext_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Row
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTx_starGenType_QueryRowContext_fnRecorder) AndDo(fn MoqTx_starGenType_QueryRowContext_doFn) *MoqTx_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTx_starGenType_QueryRowContext_fnRecorder) DoReturnResults(fn MoqTx_starGenType_QueryRowContext_doReturnFn) *MoqTx_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_QueryRowContext_doFn
		DoReturnFn MoqTx_starGenType_QueryRowContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTx_starGenType_QueryRowContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTx_starGenType_QueryRowContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_QueryRowContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTx_starGenType_QueryRowContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTx_starGenType_QueryRowContext_paramsKey]*MoqTx_starGenType_QueryRowContext_results{},
		}
		r.Moq.ResultsByParams_QueryRowContext = append(r.Moq.ResultsByParams_QueryRowContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_QueryRowContext) {
			copy(r.Moq.ResultsByParams_QueryRowContext[insertAt+1:], r.Moq.ResultsByParams_QueryRowContext[insertAt:0])
			r.Moq.ResultsByParams_QueryRowContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_QueryRowContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTx_starGenType_QueryRowContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTx_starGenType_QueryRowContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTx_starGenType_QueryRowContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Row
				}
				Sequence   uint32
				DoFn       MoqTx_starGenType_QueryRowContext_doFn
				DoReturnFn MoqTx_starGenType_QueryRowContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTx_starGenType) PrettyParams_QueryRowContext(params MoqTx_starGenType_QueryRowContext_params) string {
	return fmt.Sprintf("QueryRowContext(%#v, %#v, %#v)", params.Ctx, params.Query, params.Args)
}

func (m *MoqTx_starGenType) ParamsKey_QueryRowContext(params MoqTx_starGenType_QueryRowContext_params, anyParams uint64) MoqTx_starGenType_QueryRowContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.QueryRowContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.QueryRowContext.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.QueryRowContext.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the QueryRowContext function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqTx_starGenType_QueryRowContext_paramsKey{
		Params: struct {
			Ctx   context.Context
			Query string
		}{
			Ctx:   ctxUsed,
			Query: queryUsed,
		},
		Hashes: struct {
			Ctx   hash.Hash
			Query hash.Hash
			Args  hash.Hash
		}{
			Ctx:   ctxUsedHash,
			Query: queryUsedHash,
			Args:  argsUsedHash,
		},
	}
}

func (m *MoqTx_starGenType_recorder) QueryRow(query string, args ...interface{}) *MoqTx_starGenType_QueryRow_fnRecorder {
	return &MoqTx_starGenType_QueryRow_fnRecorder{
		Params: MoqTx_starGenType_QueryRow_params{
			Query: query,
			Args:  args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTx_starGenType_QueryRow_fnRecorder) Any() *MoqTx_starGenType_QueryRow_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRow(r.Params))
		return nil
	}
	return &MoqTx_starGenType_QueryRow_anyParams{Recorder: r}
}

func (a *MoqTx_starGenType_QueryRow_anyParams) Query() *MoqTx_starGenType_QueryRow_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqTx_starGenType_QueryRow_anyParams) Args() *MoqTx_starGenType_QueryRow_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqTx_starGenType_QueryRow_fnRecorder) Seq() *MoqTx_starGenType_QueryRow_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRow(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTx_starGenType_QueryRow_fnRecorder) NoSeq() *MoqTx_starGenType_QueryRow_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_QueryRow(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTx_starGenType_QueryRow_fnRecorder) ReturnResults(result1 *sql.Row) *MoqTx_starGenType_QueryRow_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_QueryRow_doFn
		DoReturnFn MoqTx_starGenType_QueryRow_doReturnFn
	}{
		Values: &struct {
			Result1 *sql.Row
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTx_starGenType_QueryRow_fnRecorder) AndDo(fn MoqTx_starGenType_QueryRow_doFn) *MoqTx_starGenType_QueryRow_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTx_starGenType_QueryRow_fnRecorder) DoReturnResults(fn MoqTx_starGenType_QueryRow_doReturnFn) *MoqTx_starGenType_QueryRow_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *sql.Row
		}
		Sequence   uint32
		DoFn       MoqTx_starGenType_QueryRow_doFn
		DoReturnFn MoqTx_starGenType_QueryRow_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTx_starGenType_QueryRow_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTx_starGenType_QueryRow_resultsByParams
	for n, res := range r.Moq.ResultsByParams_QueryRow {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTx_starGenType_QueryRow_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTx_starGenType_QueryRow_paramsKey]*MoqTx_starGenType_QueryRow_results{},
		}
		r.Moq.ResultsByParams_QueryRow = append(r.Moq.ResultsByParams_QueryRow, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_QueryRow) {
			copy(r.Moq.ResultsByParams_QueryRow[insertAt+1:], r.Moq.ResultsByParams_QueryRow[insertAt:0])
			r.Moq.ResultsByParams_QueryRow[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_QueryRow(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTx_starGenType_QueryRow_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTx_starGenType_QueryRow_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTx_starGenType_QueryRow_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *sql.Row
				}
				Sequence   uint32
				DoFn       MoqTx_starGenType_QueryRow_doFn
				DoReturnFn MoqTx_starGenType_QueryRow_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTx_starGenType) PrettyParams_QueryRow(params MoqTx_starGenType_QueryRow_params) string {
	return fmt.Sprintf("QueryRow(%#v, %#v)", params.Query, params.Args)
}

func (m *MoqTx_starGenType) ParamsKey_QueryRow(params MoqTx_starGenType_QueryRow_params, anyParams uint64) MoqTx_starGenType_QueryRow_paramsKey {
	m.Scene.T.Helper()
	var queryUsed string
	var queryUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.QueryRow.Query == moq.ParamIndexByValue {
			queryUsed = params.Query
		} else {
			queryUsedHash = hash.DeepHash(params.Query)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.QueryRow.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the QueryRow function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqTx_starGenType_QueryRow_paramsKey{
		Params: struct{ Query string }{
			Query: queryUsed,
		},
		Hashes: struct {
			Query hash.Hash
			Args  hash.Hash
		}{
			Query: queryUsedHash,
			Args:  argsUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqTx_starGenType) Reset() {
	m.ResultsByParams_Commit = nil
	m.ResultsByParams_Rollback = nil
	m.ResultsByParams_PrepareContext = nil
	m.ResultsByParams_Prepare = nil
	m.ResultsByParams_StmtContext = nil
	m.ResultsByParams_Stmt = nil
	m.ResultsByParams_ExecContext = nil
	m.ResultsByParams_Exec = nil
	m.ResultsByParams_QueryContext = nil
	m.ResultsByParams_Query = nil
	m.ResultsByParams_QueryRowContext = nil
	m.ResultsByParams_QueryRow = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqTx_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Commit {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Commit(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Rollback {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Rollback(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_PrepareContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_PrepareContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Prepare {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Prepare(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_StmtContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_StmtContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Stmt {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Stmt(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ExecContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ExecContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Exec {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Exec(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_QueryContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_QueryContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Query {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Query(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_QueryRowContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_QueryRowContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_QueryRow {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_QueryRow(results.Params))
			}
		}
	}
}
