// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package syntax

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that syntax.Inst_starGenType is mocked
// completely
var _ Inst_starGenType = (*MoqInst_starGenType_mock)(nil)

// Inst_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Inst_starGenType interface {
	MatchRune(r rune) bool
	MatchRunePos(r rune) int
	MatchEmptyWidth(before rune, after rune) bool
	String() string
}

// MoqInst_starGenType holds the state of a moq of the Inst_starGenType type
type MoqInst_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqInst_starGenType_mock

	ResultsByParams_MatchRune       []MoqInst_starGenType_MatchRune_resultsByParams
	ResultsByParams_MatchRunePos    []MoqInst_starGenType_MatchRunePos_resultsByParams
	ResultsByParams_MatchEmptyWidth []MoqInst_starGenType_MatchEmptyWidth_resultsByParams
	ResultsByParams_String          []MoqInst_starGenType_String_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			MatchRune struct {
				Param1 moq.ParamIndexing
			}
			MatchRunePos struct {
				Param1 moq.ParamIndexing
			}
			MatchEmptyWidth struct {
				Before moq.ParamIndexing
				After  moq.ParamIndexing
			}
			String struct{}
		}
	}
}

// MoqInst_starGenType_mock isolates the mock interface of the Inst_starGenType
// type
type MoqInst_starGenType_mock struct {
	Moq *MoqInst_starGenType
}

// MoqInst_starGenType_recorder isolates the recorder interface of the
// Inst_starGenType type
type MoqInst_starGenType_recorder struct {
	Moq *MoqInst_starGenType
}

// MoqInst_starGenType_MatchRune_params holds the params of the
// Inst_starGenType type
type MoqInst_starGenType_MatchRune_params struct{ Param1 rune }

// MoqInst_starGenType_MatchRune_paramsKey holds the map key params of the
// Inst_starGenType type
type MoqInst_starGenType_MatchRune_paramsKey struct {
	Params struct{ Param1 rune }
	Hashes struct{ Param1 hash.Hash }
}

// MoqInst_starGenType_MatchRune_resultsByParams contains the results for a
// given set of parameters for the Inst_starGenType type
type MoqInst_starGenType_MatchRune_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqInst_starGenType_MatchRune_paramsKey]*MoqInst_starGenType_MatchRune_results
}

// MoqInst_starGenType_MatchRune_doFn defines the type of function needed when
// calling AndDo for the Inst_starGenType type
type MoqInst_starGenType_MatchRune_doFn func(r rune)

// MoqInst_starGenType_MatchRune_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Inst_starGenType type
type MoqInst_starGenType_MatchRune_doReturnFn func(r rune) bool

// MoqInst_starGenType_MatchRune_results holds the results of the
// Inst_starGenType type
type MoqInst_starGenType_MatchRune_results struct {
	Params  MoqInst_starGenType_MatchRune_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqInst_starGenType_MatchRune_doFn
		DoReturnFn MoqInst_starGenType_MatchRune_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqInst_starGenType_MatchRune_fnRecorder routes recorded function calls to
// the MoqInst_starGenType moq
type MoqInst_starGenType_MatchRune_fnRecorder struct {
	Params    MoqInst_starGenType_MatchRune_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqInst_starGenType_MatchRune_results
	Moq       *MoqInst_starGenType
}

// MoqInst_starGenType_MatchRune_anyParams isolates the any params functions of
// the Inst_starGenType type
type MoqInst_starGenType_MatchRune_anyParams struct {
	Recorder *MoqInst_starGenType_MatchRune_fnRecorder
}

// MoqInst_starGenType_MatchRunePos_params holds the params of the
// Inst_starGenType type
type MoqInst_starGenType_MatchRunePos_params struct{ Param1 rune }

// MoqInst_starGenType_MatchRunePos_paramsKey holds the map key params of the
// Inst_starGenType type
type MoqInst_starGenType_MatchRunePos_paramsKey struct {
	Params struct{ Param1 rune }
	Hashes struct{ Param1 hash.Hash }
}

// MoqInst_starGenType_MatchRunePos_resultsByParams contains the results for a
// given set of parameters for the Inst_starGenType type
type MoqInst_starGenType_MatchRunePos_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqInst_starGenType_MatchRunePos_paramsKey]*MoqInst_starGenType_MatchRunePos_results
}

// MoqInst_starGenType_MatchRunePos_doFn defines the type of function needed
// when calling AndDo for the Inst_starGenType type
type MoqInst_starGenType_MatchRunePos_doFn func(r rune)

// MoqInst_starGenType_MatchRunePos_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Inst_starGenType type
type MoqInst_starGenType_MatchRunePos_doReturnFn func(r rune) int

// MoqInst_starGenType_MatchRunePos_results holds the results of the
// Inst_starGenType type
type MoqInst_starGenType_MatchRunePos_results struct {
	Params  MoqInst_starGenType_MatchRunePos_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqInst_starGenType_MatchRunePos_doFn
		DoReturnFn MoqInst_starGenType_MatchRunePos_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqInst_starGenType_MatchRunePos_fnRecorder routes recorded function calls
// to the MoqInst_starGenType moq
type MoqInst_starGenType_MatchRunePos_fnRecorder struct {
	Params    MoqInst_starGenType_MatchRunePos_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqInst_starGenType_MatchRunePos_results
	Moq       *MoqInst_starGenType
}

// MoqInst_starGenType_MatchRunePos_anyParams isolates the any params functions
// of the Inst_starGenType type
type MoqInst_starGenType_MatchRunePos_anyParams struct {
	Recorder *MoqInst_starGenType_MatchRunePos_fnRecorder
}

// MoqInst_starGenType_MatchEmptyWidth_params holds the params of the
// Inst_starGenType type
type MoqInst_starGenType_MatchEmptyWidth_params struct {
	Before rune
	After  rune
}

// MoqInst_starGenType_MatchEmptyWidth_paramsKey holds the map key params of
// the Inst_starGenType type
type MoqInst_starGenType_MatchEmptyWidth_paramsKey struct {
	Params struct {
		Before rune
		After  rune
	}
	Hashes struct {
		Before hash.Hash
		After  hash.Hash
	}
}

// MoqInst_starGenType_MatchEmptyWidth_resultsByParams contains the results for
// a given set of parameters for the Inst_starGenType type
type MoqInst_starGenType_MatchEmptyWidth_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqInst_starGenType_MatchEmptyWidth_paramsKey]*MoqInst_starGenType_MatchEmptyWidth_results
}

// MoqInst_starGenType_MatchEmptyWidth_doFn defines the type of function needed
// when calling AndDo for the Inst_starGenType type
type MoqInst_starGenType_MatchEmptyWidth_doFn func(before rune, after rune)

// MoqInst_starGenType_MatchEmptyWidth_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Inst_starGenType type
type MoqInst_starGenType_MatchEmptyWidth_doReturnFn func(before rune, after rune) bool

// MoqInst_starGenType_MatchEmptyWidth_results holds the results of the
// Inst_starGenType type
type MoqInst_starGenType_MatchEmptyWidth_results struct {
	Params  MoqInst_starGenType_MatchEmptyWidth_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqInst_starGenType_MatchEmptyWidth_doFn
		DoReturnFn MoqInst_starGenType_MatchEmptyWidth_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqInst_starGenType_MatchEmptyWidth_fnRecorder routes recorded function
// calls to the MoqInst_starGenType moq
type MoqInst_starGenType_MatchEmptyWidth_fnRecorder struct {
	Params    MoqInst_starGenType_MatchEmptyWidth_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqInst_starGenType_MatchEmptyWidth_results
	Moq       *MoqInst_starGenType
}

// MoqInst_starGenType_MatchEmptyWidth_anyParams isolates the any params
// functions of the Inst_starGenType type
type MoqInst_starGenType_MatchEmptyWidth_anyParams struct {
	Recorder *MoqInst_starGenType_MatchEmptyWidth_fnRecorder
}

// MoqInst_starGenType_String_params holds the params of the Inst_starGenType
// type
type MoqInst_starGenType_String_params struct{}

// MoqInst_starGenType_String_paramsKey holds the map key params of the
// Inst_starGenType type
type MoqInst_starGenType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqInst_starGenType_String_resultsByParams contains the results for a given
// set of parameters for the Inst_starGenType type
type MoqInst_starGenType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqInst_starGenType_String_paramsKey]*MoqInst_starGenType_String_results
}

// MoqInst_starGenType_String_doFn defines the type of function needed when
// calling AndDo for the Inst_starGenType type
type MoqInst_starGenType_String_doFn func()

// MoqInst_starGenType_String_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Inst_starGenType type
type MoqInst_starGenType_String_doReturnFn func() string

// MoqInst_starGenType_String_results holds the results of the Inst_starGenType
// type
type MoqInst_starGenType_String_results struct {
	Params  MoqInst_starGenType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqInst_starGenType_String_doFn
		DoReturnFn MoqInst_starGenType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqInst_starGenType_String_fnRecorder routes recorded function calls to the
// MoqInst_starGenType moq
type MoqInst_starGenType_String_fnRecorder struct {
	Params    MoqInst_starGenType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqInst_starGenType_String_results
	Moq       *MoqInst_starGenType
}

// MoqInst_starGenType_String_anyParams isolates the any params functions of
// the Inst_starGenType type
type MoqInst_starGenType_String_anyParams struct {
	Recorder *MoqInst_starGenType_String_fnRecorder
}

// NewMoqInst_starGenType creates a new moq of the Inst_starGenType type
func NewMoqInst_starGenType(scene *moq.Scene, config *moq.Config) *MoqInst_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqInst_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqInst_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				MatchRune struct {
					Param1 moq.ParamIndexing
				}
				MatchRunePos struct {
					Param1 moq.ParamIndexing
				}
				MatchEmptyWidth struct {
					Before moq.ParamIndexing
					After  moq.ParamIndexing
				}
				String struct{}
			}
		}{ParameterIndexing: struct {
			MatchRune struct {
				Param1 moq.ParamIndexing
			}
			MatchRunePos struct {
				Param1 moq.ParamIndexing
			}
			MatchEmptyWidth struct {
				Before moq.ParamIndexing
				After  moq.ParamIndexing
			}
			String struct{}
		}{
			MatchRune: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			MatchRunePos: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			MatchEmptyWidth: struct {
				Before moq.ParamIndexing
				After  moq.ParamIndexing
			}{
				Before: moq.ParamIndexByValue,
				After:  moq.ParamIndexByValue,
			},
			String: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Inst_starGenType type
func (m *MoqInst_starGenType) Mock() *MoqInst_starGenType_mock { return m.Moq }

func (m *MoqInst_starGenType_mock) MatchRune(param1 rune) (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqInst_starGenType_MatchRune_params{
		Param1: param1,
	}
	var results *MoqInst_starGenType_MatchRune_results
	for _, resultsByParams := range m.Moq.ResultsByParams_MatchRune {
		paramsKey := m.Moq.ParamsKey_MatchRune(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_MatchRune(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_MatchRune(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_MatchRune(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqInst_starGenType_mock) MatchRunePos(param1 rune) (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqInst_starGenType_MatchRunePos_params{
		Param1: param1,
	}
	var results *MoqInst_starGenType_MatchRunePos_results
	for _, resultsByParams := range m.Moq.ResultsByParams_MatchRunePos {
		paramsKey := m.Moq.ParamsKey_MatchRunePos(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_MatchRunePos(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_MatchRunePos(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_MatchRunePos(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqInst_starGenType_mock) MatchEmptyWidth(before rune, after rune) (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqInst_starGenType_MatchEmptyWidth_params{
		Before: before,
		After:  after,
	}
	var results *MoqInst_starGenType_MatchEmptyWidth_results
	for _, resultsByParams := range m.Moq.ResultsByParams_MatchEmptyWidth {
		paramsKey := m.Moq.ParamsKey_MatchEmptyWidth(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_MatchEmptyWidth(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_MatchEmptyWidth(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_MatchEmptyWidth(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(before, after)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(before, after)
	}
	return
}

func (m *MoqInst_starGenType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqInst_starGenType_String_params{}
	var results *MoqInst_starGenType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Inst_starGenType type
func (m *MoqInst_starGenType) OnCall() *MoqInst_starGenType_recorder {
	return &MoqInst_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqInst_starGenType_recorder) MatchRune(param1 rune) *MoqInst_starGenType_MatchRune_fnRecorder {
	return &MoqInst_starGenType_MatchRune_fnRecorder{
		Params: MoqInst_starGenType_MatchRune_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqInst_starGenType_MatchRune_fnRecorder) Any() *MoqInst_starGenType_MatchRune_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MatchRune(r.Params))
		return nil
	}
	return &MoqInst_starGenType_MatchRune_anyParams{Recorder: r}
}

func (a *MoqInst_starGenType_MatchRune_anyParams) Param1() *MoqInst_starGenType_MatchRune_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqInst_starGenType_MatchRune_fnRecorder) Seq() *MoqInst_starGenType_MatchRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MatchRune(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqInst_starGenType_MatchRune_fnRecorder) NoSeq() *MoqInst_starGenType_MatchRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MatchRune(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqInst_starGenType_MatchRune_fnRecorder) ReturnResults(result1 bool) *MoqInst_starGenType_MatchRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqInst_starGenType_MatchRune_doFn
		DoReturnFn MoqInst_starGenType_MatchRune_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqInst_starGenType_MatchRune_fnRecorder) AndDo(fn MoqInst_starGenType_MatchRune_doFn) *MoqInst_starGenType_MatchRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqInst_starGenType_MatchRune_fnRecorder) DoReturnResults(fn MoqInst_starGenType_MatchRune_doReturnFn) *MoqInst_starGenType_MatchRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqInst_starGenType_MatchRune_doFn
		DoReturnFn MoqInst_starGenType_MatchRune_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqInst_starGenType_MatchRune_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqInst_starGenType_MatchRune_resultsByParams
	for n, res := range r.Moq.ResultsByParams_MatchRune {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqInst_starGenType_MatchRune_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqInst_starGenType_MatchRune_paramsKey]*MoqInst_starGenType_MatchRune_results{},
		}
		r.Moq.ResultsByParams_MatchRune = append(r.Moq.ResultsByParams_MatchRune, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_MatchRune) {
			copy(r.Moq.ResultsByParams_MatchRune[insertAt+1:], r.Moq.ResultsByParams_MatchRune[insertAt:0])
			r.Moq.ResultsByParams_MatchRune[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_MatchRune(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqInst_starGenType_MatchRune_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqInst_starGenType_MatchRune_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqInst_starGenType_MatchRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqInst_starGenType_MatchRune_doFn
				DoReturnFn MoqInst_starGenType_MatchRune_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqInst_starGenType) PrettyParams_MatchRune(params MoqInst_starGenType_MatchRune_params) string {
	return fmt.Sprintf("MatchRune(%#v)", params.Param1)
}

func (m *MoqInst_starGenType) ParamsKey_MatchRune(params MoqInst_starGenType_MatchRune_params, anyParams uint64) MoqInst_starGenType_MatchRune_paramsKey {
	m.Scene.T.Helper()
	var param1Used rune
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.MatchRune.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqInst_starGenType_MatchRune_paramsKey{
		Params: struct{ Param1 rune }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqInst_starGenType_recorder) MatchRunePos(param1 rune) *MoqInst_starGenType_MatchRunePos_fnRecorder {
	return &MoqInst_starGenType_MatchRunePos_fnRecorder{
		Params: MoqInst_starGenType_MatchRunePos_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqInst_starGenType_MatchRunePos_fnRecorder) Any() *MoqInst_starGenType_MatchRunePos_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MatchRunePos(r.Params))
		return nil
	}
	return &MoqInst_starGenType_MatchRunePos_anyParams{Recorder: r}
}

func (a *MoqInst_starGenType_MatchRunePos_anyParams) Param1() *MoqInst_starGenType_MatchRunePos_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqInst_starGenType_MatchRunePos_fnRecorder) Seq() *MoqInst_starGenType_MatchRunePos_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MatchRunePos(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqInst_starGenType_MatchRunePos_fnRecorder) NoSeq() *MoqInst_starGenType_MatchRunePos_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MatchRunePos(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqInst_starGenType_MatchRunePos_fnRecorder) ReturnResults(result1 int) *MoqInst_starGenType_MatchRunePos_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqInst_starGenType_MatchRunePos_doFn
		DoReturnFn MoqInst_starGenType_MatchRunePos_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqInst_starGenType_MatchRunePos_fnRecorder) AndDo(fn MoqInst_starGenType_MatchRunePos_doFn) *MoqInst_starGenType_MatchRunePos_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqInst_starGenType_MatchRunePos_fnRecorder) DoReturnResults(fn MoqInst_starGenType_MatchRunePos_doReturnFn) *MoqInst_starGenType_MatchRunePos_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqInst_starGenType_MatchRunePos_doFn
		DoReturnFn MoqInst_starGenType_MatchRunePos_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqInst_starGenType_MatchRunePos_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqInst_starGenType_MatchRunePos_resultsByParams
	for n, res := range r.Moq.ResultsByParams_MatchRunePos {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqInst_starGenType_MatchRunePos_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqInst_starGenType_MatchRunePos_paramsKey]*MoqInst_starGenType_MatchRunePos_results{},
		}
		r.Moq.ResultsByParams_MatchRunePos = append(r.Moq.ResultsByParams_MatchRunePos, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_MatchRunePos) {
			copy(r.Moq.ResultsByParams_MatchRunePos[insertAt+1:], r.Moq.ResultsByParams_MatchRunePos[insertAt:0])
			r.Moq.ResultsByParams_MatchRunePos[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_MatchRunePos(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqInst_starGenType_MatchRunePos_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqInst_starGenType_MatchRunePos_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqInst_starGenType_MatchRunePos_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqInst_starGenType_MatchRunePos_doFn
				DoReturnFn MoqInst_starGenType_MatchRunePos_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqInst_starGenType) PrettyParams_MatchRunePos(params MoqInst_starGenType_MatchRunePos_params) string {
	return fmt.Sprintf("MatchRunePos(%#v)", params.Param1)
}

func (m *MoqInst_starGenType) ParamsKey_MatchRunePos(params MoqInst_starGenType_MatchRunePos_params, anyParams uint64) MoqInst_starGenType_MatchRunePos_paramsKey {
	m.Scene.T.Helper()
	var param1Used rune
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.MatchRunePos.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqInst_starGenType_MatchRunePos_paramsKey{
		Params: struct{ Param1 rune }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqInst_starGenType_recorder) MatchEmptyWidth(before rune, after rune) *MoqInst_starGenType_MatchEmptyWidth_fnRecorder {
	return &MoqInst_starGenType_MatchEmptyWidth_fnRecorder{
		Params: MoqInst_starGenType_MatchEmptyWidth_params{
			Before: before,
			After:  after,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqInst_starGenType_MatchEmptyWidth_fnRecorder) Any() *MoqInst_starGenType_MatchEmptyWidth_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MatchEmptyWidth(r.Params))
		return nil
	}
	return &MoqInst_starGenType_MatchEmptyWidth_anyParams{Recorder: r}
}

func (a *MoqInst_starGenType_MatchEmptyWidth_anyParams) Before() *MoqInst_starGenType_MatchEmptyWidth_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqInst_starGenType_MatchEmptyWidth_anyParams) After() *MoqInst_starGenType_MatchEmptyWidth_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqInst_starGenType_MatchEmptyWidth_fnRecorder) Seq() *MoqInst_starGenType_MatchEmptyWidth_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MatchEmptyWidth(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqInst_starGenType_MatchEmptyWidth_fnRecorder) NoSeq() *MoqInst_starGenType_MatchEmptyWidth_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MatchEmptyWidth(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqInst_starGenType_MatchEmptyWidth_fnRecorder) ReturnResults(result1 bool) *MoqInst_starGenType_MatchEmptyWidth_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqInst_starGenType_MatchEmptyWidth_doFn
		DoReturnFn MoqInst_starGenType_MatchEmptyWidth_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqInst_starGenType_MatchEmptyWidth_fnRecorder) AndDo(fn MoqInst_starGenType_MatchEmptyWidth_doFn) *MoqInst_starGenType_MatchEmptyWidth_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqInst_starGenType_MatchEmptyWidth_fnRecorder) DoReturnResults(fn MoqInst_starGenType_MatchEmptyWidth_doReturnFn) *MoqInst_starGenType_MatchEmptyWidth_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqInst_starGenType_MatchEmptyWidth_doFn
		DoReturnFn MoqInst_starGenType_MatchEmptyWidth_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqInst_starGenType_MatchEmptyWidth_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqInst_starGenType_MatchEmptyWidth_resultsByParams
	for n, res := range r.Moq.ResultsByParams_MatchEmptyWidth {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqInst_starGenType_MatchEmptyWidth_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqInst_starGenType_MatchEmptyWidth_paramsKey]*MoqInst_starGenType_MatchEmptyWidth_results{},
		}
		r.Moq.ResultsByParams_MatchEmptyWidth = append(r.Moq.ResultsByParams_MatchEmptyWidth, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_MatchEmptyWidth) {
			copy(r.Moq.ResultsByParams_MatchEmptyWidth[insertAt+1:], r.Moq.ResultsByParams_MatchEmptyWidth[insertAt:0])
			r.Moq.ResultsByParams_MatchEmptyWidth[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_MatchEmptyWidth(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqInst_starGenType_MatchEmptyWidth_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqInst_starGenType_MatchEmptyWidth_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqInst_starGenType_MatchEmptyWidth_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqInst_starGenType_MatchEmptyWidth_doFn
				DoReturnFn MoqInst_starGenType_MatchEmptyWidth_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqInst_starGenType) PrettyParams_MatchEmptyWidth(params MoqInst_starGenType_MatchEmptyWidth_params) string {
	return fmt.Sprintf("MatchEmptyWidth(%#v, %#v)", params.Before, params.After)
}

func (m *MoqInst_starGenType) ParamsKey_MatchEmptyWidth(params MoqInst_starGenType_MatchEmptyWidth_params, anyParams uint64) MoqInst_starGenType_MatchEmptyWidth_paramsKey {
	m.Scene.T.Helper()
	var beforeUsed rune
	var beforeUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.MatchEmptyWidth.Before == moq.ParamIndexByValue {
			beforeUsed = params.Before
		} else {
			beforeUsedHash = hash.DeepHash(params.Before)
		}
	}
	var afterUsed rune
	var afterUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.MatchEmptyWidth.After == moq.ParamIndexByValue {
			afterUsed = params.After
		} else {
			afterUsedHash = hash.DeepHash(params.After)
		}
	}
	return MoqInst_starGenType_MatchEmptyWidth_paramsKey{
		Params: struct {
			Before rune
			After  rune
		}{
			Before: beforeUsed,
			After:  afterUsed,
		},
		Hashes: struct {
			Before hash.Hash
			After  hash.Hash
		}{
			Before: beforeUsedHash,
			After:  afterUsedHash,
		},
	}
}

func (m *MoqInst_starGenType_recorder) String() *MoqInst_starGenType_String_fnRecorder {
	return &MoqInst_starGenType_String_fnRecorder{
		Params:   MoqInst_starGenType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqInst_starGenType_String_fnRecorder) Any() *MoqInst_starGenType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqInst_starGenType_String_anyParams{Recorder: r}
}

func (r *MoqInst_starGenType_String_fnRecorder) Seq() *MoqInst_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqInst_starGenType_String_fnRecorder) NoSeq() *MoqInst_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqInst_starGenType_String_fnRecorder) ReturnResults(result1 string) *MoqInst_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqInst_starGenType_String_doFn
		DoReturnFn MoqInst_starGenType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqInst_starGenType_String_fnRecorder) AndDo(fn MoqInst_starGenType_String_doFn) *MoqInst_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqInst_starGenType_String_fnRecorder) DoReturnResults(fn MoqInst_starGenType_String_doReturnFn) *MoqInst_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqInst_starGenType_String_doFn
		DoReturnFn MoqInst_starGenType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqInst_starGenType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqInst_starGenType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqInst_starGenType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqInst_starGenType_String_paramsKey]*MoqInst_starGenType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqInst_starGenType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqInst_starGenType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqInst_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqInst_starGenType_String_doFn
				DoReturnFn MoqInst_starGenType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqInst_starGenType) PrettyParams_String(params MoqInst_starGenType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqInst_starGenType) ParamsKey_String(params MoqInst_starGenType_String_params, anyParams uint64) MoqInst_starGenType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqInst_starGenType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqInst_starGenType) Reset() {
	m.ResultsByParams_MatchRune = nil
	m.ResultsByParams_MatchRunePos = nil
	m.ResultsByParams_MatchEmptyWidth = nil
	m.ResultsByParams_String = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqInst_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_MatchRune {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_MatchRune(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_MatchRunePos {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_MatchRunePos(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_MatchEmptyWidth {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_MatchEmptyWidth(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
}
