// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package syntax

import (
	"fmt"
	"math/bits"
	"regexp/syntax"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that syntax.Regexp_starGenType is
// mocked completely
var _ Regexp_starGenType = (*MoqRegexp_starGenType_mock)(nil)

// Regexp_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Regexp_starGenType interface {
	Equal(y *syntax.Regexp) bool
	String() string
	MaxCap() int
	CapNames() []string
	Simplify() *syntax.Regexp
}

// MoqRegexp_starGenType holds the state of a moq of the Regexp_starGenType
// type
type MoqRegexp_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqRegexp_starGenType_mock

	ResultsByParams_Equal    []MoqRegexp_starGenType_Equal_resultsByParams
	ResultsByParams_String   []MoqRegexp_starGenType_String_resultsByParams
	ResultsByParams_MaxCap   []MoqRegexp_starGenType_MaxCap_resultsByParams
	ResultsByParams_CapNames []MoqRegexp_starGenType_CapNames_resultsByParams
	ResultsByParams_Simplify []MoqRegexp_starGenType_Simplify_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Equal struct {
				Y moq.ParamIndexing
			}
			String   struct{}
			MaxCap   struct{}
			CapNames struct{}
			Simplify struct{}
		}
	}
}

// MoqRegexp_starGenType_mock isolates the mock interface of the
// Regexp_starGenType type
type MoqRegexp_starGenType_mock struct {
	Moq *MoqRegexp_starGenType
}

// MoqRegexp_starGenType_recorder isolates the recorder interface of the
// Regexp_starGenType type
type MoqRegexp_starGenType_recorder struct {
	Moq *MoqRegexp_starGenType
}

// MoqRegexp_starGenType_Equal_params holds the params of the
// Regexp_starGenType type
type MoqRegexp_starGenType_Equal_params struct{ Y *syntax.Regexp }

// MoqRegexp_starGenType_Equal_paramsKey holds the map key params of the
// Regexp_starGenType type
type MoqRegexp_starGenType_Equal_paramsKey struct {
	Params struct{ Y *syntax.Regexp }
	Hashes struct{ Y hash.Hash }
}

// MoqRegexp_starGenType_Equal_resultsByParams contains the results for a given
// set of parameters for the Regexp_starGenType type
type MoqRegexp_starGenType_Equal_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRegexp_starGenType_Equal_paramsKey]*MoqRegexp_starGenType_Equal_results
}

// MoqRegexp_starGenType_Equal_doFn defines the type of function needed when
// calling AndDo for the Regexp_starGenType type
type MoqRegexp_starGenType_Equal_doFn func(y *syntax.Regexp)

// MoqRegexp_starGenType_Equal_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Regexp_starGenType type
type MoqRegexp_starGenType_Equal_doReturnFn func(y *syntax.Regexp) bool

// MoqRegexp_starGenType_Equal_results holds the results of the
// Regexp_starGenType type
type MoqRegexp_starGenType_Equal_results struct {
	Params  MoqRegexp_starGenType_Equal_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqRegexp_starGenType_Equal_doFn
		DoReturnFn MoqRegexp_starGenType_Equal_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRegexp_starGenType_Equal_fnRecorder routes recorded function calls to the
// MoqRegexp_starGenType moq
type MoqRegexp_starGenType_Equal_fnRecorder struct {
	Params    MoqRegexp_starGenType_Equal_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRegexp_starGenType_Equal_results
	Moq       *MoqRegexp_starGenType
}

// MoqRegexp_starGenType_Equal_anyParams isolates the any params functions of
// the Regexp_starGenType type
type MoqRegexp_starGenType_Equal_anyParams struct {
	Recorder *MoqRegexp_starGenType_Equal_fnRecorder
}

// MoqRegexp_starGenType_String_params holds the params of the
// Regexp_starGenType type
type MoqRegexp_starGenType_String_params struct{}

// MoqRegexp_starGenType_String_paramsKey holds the map key params of the
// Regexp_starGenType type
type MoqRegexp_starGenType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRegexp_starGenType_String_resultsByParams contains the results for a
// given set of parameters for the Regexp_starGenType type
type MoqRegexp_starGenType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRegexp_starGenType_String_paramsKey]*MoqRegexp_starGenType_String_results
}

// MoqRegexp_starGenType_String_doFn defines the type of function needed when
// calling AndDo for the Regexp_starGenType type
type MoqRegexp_starGenType_String_doFn func()

// MoqRegexp_starGenType_String_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Regexp_starGenType type
type MoqRegexp_starGenType_String_doReturnFn func() string

// MoqRegexp_starGenType_String_results holds the results of the
// Regexp_starGenType type
type MoqRegexp_starGenType_String_results struct {
	Params  MoqRegexp_starGenType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqRegexp_starGenType_String_doFn
		DoReturnFn MoqRegexp_starGenType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRegexp_starGenType_String_fnRecorder routes recorded function calls to
// the MoqRegexp_starGenType moq
type MoqRegexp_starGenType_String_fnRecorder struct {
	Params    MoqRegexp_starGenType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRegexp_starGenType_String_results
	Moq       *MoqRegexp_starGenType
}

// MoqRegexp_starGenType_String_anyParams isolates the any params functions of
// the Regexp_starGenType type
type MoqRegexp_starGenType_String_anyParams struct {
	Recorder *MoqRegexp_starGenType_String_fnRecorder
}

// MoqRegexp_starGenType_MaxCap_params holds the params of the
// Regexp_starGenType type
type MoqRegexp_starGenType_MaxCap_params struct{}

// MoqRegexp_starGenType_MaxCap_paramsKey holds the map key params of the
// Regexp_starGenType type
type MoqRegexp_starGenType_MaxCap_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRegexp_starGenType_MaxCap_resultsByParams contains the results for a
// given set of parameters for the Regexp_starGenType type
type MoqRegexp_starGenType_MaxCap_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRegexp_starGenType_MaxCap_paramsKey]*MoqRegexp_starGenType_MaxCap_results
}

// MoqRegexp_starGenType_MaxCap_doFn defines the type of function needed when
// calling AndDo for the Regexp_starGenType type
type MoqRegexp_starGenType_MaxCap_doFn func()

// MoqRegexp_starGenType_MaxCap_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Regexp_starGenType type
type MoqRegexp_starGenType_MaxCap_doReturnFn func() int

// MoqRegexp_starGenType_MaxCap_results holds the results of the
// Regexp_starGenType type
type MoqRegexp_starGenType_MaxCap_results struct {
	Params  MoqRegexp_starGenType_MaxCap_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqRegexp_starGenType_MaxCap_doFn
		DoReturnFn MoqRegexp_starGenType_MaxCap_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRegexp_starGenType_MaxCap_fnRecorder routes recorded function calls to
// the MoqRegexp_starGenType moq
type MoqRegexp_starGenType_MaxCap_fnRecorder struct {
	Params    MoqRegexp_starGenType_MaxCap_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRegexp_starGenType_MaxCap_results
	Moq       *MoqRegexp_starGenType
}

// MoqRegexp_starGenType_MaxCap_anyParams isolates the any params functions of
// the Regexp_starGenType type
type MoqRegexp_starGenType_MaxCap_anyParams struct {
	Recorder *MoqRegexp_starGenType_MaxCap_fnRecorder
}

// MoqRegexp_starGenType_CapNames_params holds the params of the
// Regexp_starGenType type
type MoqRegexp_starGenType_CapNames_params struct{}

// MoqRegexp_starGenType_CapNames_paramsKey holds the map key params of the
// Regexp_starGenType type
type MoqRegexp_starGenType_CapNames_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRegexp_starGenType_CapNames_resultsByParams contains the results for a
// given set of parameters for the Regexp_starGenType type
type MoqRegexp_starGenType_CapNames_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRegexp_starGenType_CapNames_paramsKey]*MoqRegexp_starGenType_CapNames_results
}

// MoqRegexp_starGenType_CapNames_doFn defines the type of function needed when
// calling AndDo for the Regexp_starGenType type
type MoqRegexp_starGenType_CapNames_doFn func()

// MoqRegexp_starGenType_CapNames_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Regexp_starGenType type
type MoqRegexp_starGenType_CapNames_doReturnFn func() []string

// MoqRegexp_starGenType_CapNames_results holds the results of the
// Regexp_starGenType type
type MoqRegexp_starGenType_CapNames_results struct {
	Params  MoqRegexp_starGenType_CapNames_params
	Results []struct {
		Values *struct {
			Result1 []string
		}
		Sequence   uint32
		DoFn       MoqRegexp_starGenType_CapNames_doFn
		DoReturnFn MoqRegexp_starGenType_CapNames_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRegexp_starGenType_CapNames_fnRecorder routes recorded function calls to
// the MoqRegexp_starGenType moq
type MoqRegexp_starGenType_CapNames_fnRecorder struct {
	Params    MoqRegexp_starGenType_CapNames_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRegexp_starGenType_CapNames_results
	Moq       *MoqRegexp_starGenType
}

// MoqRegexp_starGenType_CapNames_anyParams isolates the any params functions
// of the Regexp_starGenType type
type MoqRegexp_starGenType_CapNames_anyParams struct {
	Recorder *MoqRegexp_starGenType_CapNames_fnRecorder
}

// MoqRegexp_starGenType_Simplify_params holds the params of the
// Regexp_starGenType type
type MoqRegexp_starGenType_Simplify_params struct{}

// MoqRegexp_starGenType_Simplify_paramsKey holds the map key params of the
// Regexp_starGenType type
type MoqRegexp_starGenType_Simplify_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRegexp_starGenType_Simplify_resultsByParams contains the results for a
// given set of parameters for the Regexp_starGenType type
type MoqRegexp_starGenType_Simplify_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRegexp_starGenType_Simplify_paramsKey]*MoqRegexp_starGenType_Simplify_results
}

// MoqRegexp_starGenType_Simplify_doFn defines the type of function needed when
// calling AndDo for the Regexp_starGenType type
type MoqRegexp_starGenType_Simplify_doFn func()

// MoqRegexp_starGenType_Simplify_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Regexp_starGenType type
type MoqRegexp_starGenType_Simplify_doReturnFn func() *syntax.Regexp

// MoqRegexp_starGenType_Simplify_results holds the results of the
// Regexp_starGenType type
type MoqRegexp_starGenType_Simplify_results struct {
	Params  MoqRegexp_starGenType_Simplify_params
	Results []struct {
		Values *struct {
			Result1 *syntax.Regexp
		}
		Sequence   uint32
		DoFn       MoqRegexp_starGenType_Simplify_doFn
		DoReturnFn MoqRegexp_starGenType_Simplify_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRegexp_starGenType_Simplify_fnRecorder routes recorded function calls to
// the MoqRegexp_starGenType moq
type MoqRegexp_starGenType_Simplify_fnRecorder struct {
	Params    MoqRegexp_starGenType_Simplify_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRegexp_starGenType_Simplify_results
	Moq       *MoqRegexp_starGenType
}

// MoqRegexp_starGenType_Simplify_anyParams isolates the any params functions
// of the Regexp_starGenType type
type MoqRegexp_starGenType_Simplify_anyParams struct {
	Recorder *MoqRegexp_starGenType_Simplify_fnRecorder
}

// NewMoqRegexp_starGenType creates a new moq of the Regexp_starGenType type
func NewMoqRegexp_starGenType(scene *moq.Scene, config *moq.Config) *MoqRegexp_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqRegexp_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqRegexp_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Equal struct {
					Y moq.ParamIndexing
				}
				String   struct{}
				MaxCap   struct{}
				CapNames struct{}
				Simplify struct{}
			}
		}{ParameterIndexing: struct {
			Equal struct {
				Y moq.ParamIndexing
			}
			String   struct{}
			MaxCap   struct{}
			CapNames struct{}
			Simplify struct{}
		}{
			Equal: struct {
				Y moq.ParamIndexing
			}{
				Y: moq.ParamIndexByHash,
			},
			String:   struct{}{},
			MaxCap:   struct{}{},
			CapNames: struct{}{},
			Simplify: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Regexp_starGenType type
func (m *MoqRegexp_starGenType) Mock() *MoqRegexp_starGenType_mock { return m.Moq }

func (m *MoqRegexp_starGenType_mock) Equal(y *syntax.Regexp) (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqRegexp_starGenType_Equal_params{
		Y: y,
	}
	var results *MoqRegexp_starGenType_Equal_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Equal {
		paramsKey := m.Moq.ParamsKey_Equal(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Equal(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Equal(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Equal(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(y)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(y)
	}
	return
}

func (m *MoqRegexp_starGenType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqRegexp_starGenType_String_params{}
	var results *MoqRegexp_starGenType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRegexp_starGenType_mock) MaxCap() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqRegexp_starGenType_MaxCap_params{}
	var results *MoqRegexp_starGenType_MaxCap_results
	for _, resultsByParams := range m.Moq.ResultsByParams_MaxCap {
		paramsKey := m.Moq.ParamsKey_MaxCap(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_MaxCap(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_MaxCap(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_MaxCap(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRegexp_starGenType_mock) CapNames() (result1 []string) {
	m.Moq.Scene.T.Helper()
	params := MoqRegexp_starGenType_CapNames_params{}
	var results *MoqRegexp_starGenType_CapNames_results
	for _, resultsByParams := range m.Moq.ResultsByParams_CapNames {
		paramsKey := m.Moq.ParamsKey_CapNames(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_CapNames(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_CapNames(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_CapNames(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRegexp_starGenType_mock) Simplify() (result1 *syntax.Regexp) {
	m.Moq.Scene.T.Helper()
	params := MoqRegexp_starGenType_Simplify_params{}
	var results *MoqRegexp_starGenType_Simplify_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Simplify {
		paramsKey := m.Moq.ParamsKey_Simplify(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Simplify(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Simplify(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Simplify(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Regexp_starGenType type
func (m *MoqRegexp_starGenType) OnCall() *MoqRegexp_starGenType_recorder {
	return &MoqRegexp_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqRegexp_starGenType_recorder) Equal(y *syntax.Regexp) *MoqRegexp_starGenType_Equal_fnRecorder {
	return &MoqRegexp_starGenType_Equal_fnRecorder{
		Params: MoqRegexp_starGenType_Equal_params{
			Y: y,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRegexp_starGenType_Equal_fnRecorder) Any() *MoqRegexp_starGenType_Equal_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Equal(r.Params))
		return nil
	}
	return &MoqRegexp_starGenType_Equal_anyParams{Recorder: r}
}

func (a *MoqRegexp_starGenType_Equal_anyParams) Y() *MoqRegexp_starGenType_Equal_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRegexp_starGenType_Equal_fnRecorder) Seq() *MoqRegexp_starGenType_Equal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Equal(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRegexp_starGenType_Equal_fnRecorder) NoSeq() *MoqRegexp_starGenType_Equal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Equal(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRegexp_starGenType_Equal_fnRecorder) ReturnResults(result1 bool) *MoqRegexp_starGenType_Equal_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqRegexp_starGenType_Equal_doFn
		DoReturnFn MoqRegexp_starGenType_Equal_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRegexp_starGenType_Equal_fnRecorder) AndDo(fn MoqRegexp_starGenType_Equal_doFn) *MoqRegexp_starGenType_Equal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRegexp_starGenType_Equal_fnRecorder) DoReturnResults(fn MoqRegexp_starGenType_Equal_doReturnFn) *MoqRegexp_starGenType_Equal_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqRegexp_starGenType_Equal_doFn
		DoReturnFn MoqRegexp_starGenType_Equal_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRegexp_starGenType_Equal_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRegexp_starGenType_Equal_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Equal {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRegexp_starGenType_Equal_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRegexp_starGenType_Equal_paramsKey]*MoqRegexp_starGenType_Equal_results{},
		}
		r.Moq.ResultsByParams_Equal = append(r.Moq.ResultsByParams_Equal, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Equal) {
			copy(r.Moq.ResultsByParams_Equal[insertAt+1:], r.Moq.ResultsByParams_Equal[insertAt:0])
			r.Moq.ResultsByParams_Equal[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Equal(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRegexp_starGenType_Equal_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRegexp_starGenType_Equal_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRegexp_starGenType_Equal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqRegexp_starGenType_Equal_doFn
				DoReturnFn MoqRegexp_starGenType_Equal_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRegexp_starGenType) PrettyParams_Equal(params MoqRegexp_starGenType_Equal_params) string {
	return fmt.Sprintf("Equal(%#v)", params.Y)
}

func (m *MoqRegexp_starGenType) ParamsKey_Equal(params MoqRegexp_starGenType_Equal_params, anyParams uint64) MoqRegexp_starGenType_Equal_paramsKey {
	m.Scene.T.Helper()
	var yUsed *syntax.Regexp
	var yUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Equal.Y == moq.ParamIndexByValue {
			yUsed = params.Y
		} else {
			yUsedHash = hash.DeepHash(params.Y)
		}
	}
	return MoqRegexp_starGenType_Equal_paramsKey{
		Params: struct{ Y *syntax.Regexp }{
			Y: yUsed,
		},
		Hashes: struct{ Y hash.Hash }{
			Y: yUsedHash,
		},
	}
}

func (m *MoqRegexp_starGenType_recorder) String() *MoqRegexp_starGenType_String_fnRecorder {
	return &MoqRegexp_starGenType_String_fnRecorder{
		Params:   MoqRegexp_starGenType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRegexp_starGenType_String_fnRecorder) Any() *MoqRegexp_starGenType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqRegexp_starGenType_String_anyParams{Recorder: r}
}

func (r *MoqRegexp_starGenType_String_fnRecorder) Seq() *MoqRegexp_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRegexp_starGenType_String_fnRecorder) NoSeq() *MoqRegexp_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRegexp_starGenType_String_fnRecorder) ReturnResults(result1 string) *MoqRegexp_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqRegexp_starGenType_String_doFn
		DoReturnFn MoqRegexp_starGenType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRegexp_starGenType_String_fnRecorder) AndDo(fn MoqRegexp_starGenType_String_doFn) *MoqRegexp_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRegexp_starGenType_String_fnRecorder) DoReturnResults(fn MoqRegexp_starGenType_String_doReturnFn) *MoqRegexp_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqRegexp_starGenType_String_doFn
		DoReturnFn MoqRegexp_starGenType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRegexp_starGenType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRegexp_starGenType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRegexp_starGenType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRegexp_starGenType_String_paramsKey]*MoqRegexp_starGenType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRegexp_starGenType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRegexp_starGenType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRegexp_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqRegexp_starGenType_String_doFn
				DoReturnFn MoqRegexp_starGenType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRegexp_starGenType) PrettyParams_String(params MoqRegexp_starGenType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqRegexp_starGenType) ParamsKey_String(params MoqRegexp_starGenType_String_params, anyParams uint64) MoqRegexp_starGenType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqRegexp_starGenType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRegexp_starGenType_recorder) MaxCap() *MoqRegexp_starGenType_MaxCap_fnRecorder {
	return &MoqRegexp_starGenType_MaxCap_fnRecorder{
		Params:   MoqRegexp_starGenType_MaxCap_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRegexp_starGenType_MaxCap_fnRecorder) Any() *MoqRegexp_starGenType_MaxCap_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MaxCap(r.Params))
		return nil
	}
	return &MoqRegexp_starGenType_MaxCap_anyParams{Recorder: r}
}

func (r *MoqRegexp_starGenType_MaxCap_fnRecorder) Seq() *MoqRegexp_starGenType_MaxCap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MaxCap(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRegexp_starGenType_MaxCap_fnRecorder) NoSeq() *MoqRegexp_starGenType_MaxCap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MaxCap(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRegexp_starGenType_MaxCap_fnRecorder) ReturnResults(result1 int) *MoqRegexp_starGenType_MaxCap_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqRegexp_starGenType_MaxCap_doFn
		DoReturnFn MoqRegexp_starGenType_MaxCap_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRegexp_starGenType_MaxCap_fnRecorder) AndDo(fn MoqRegexp_starGenType_MaxCap_doFn) *MoqRegexp_starGenType_MaxCap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRegexp_starGenType_MaxCap_fnRecorder) DoReturnResults(fn MoqRegexp_starGenType_MaxCap_doReturnFn) *MoqRegexp_starGenType_MaxCap_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqRegexp_starGenType_MaxCap_doFn
		DoReturnFn MoqRegexp_starGenType_MaxCap_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRegexp_starGenType_MaxCap_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRegexp_starGenType_MaxCap_resultsByParams
	for n, res := range r.Moq.ResultsByParams_MaxCap {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRegexp_starGenType_MaxCap_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRegexp_starGenType_MaxCap_paramsKey]*MoqRegexp_starGenType_MaxCap_results{},
		}
		r.Moq.ResultsByParams_MaxCap = append(r.Moq.ResultsByParams_MaxCap, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_MaxCap) {
			copy(r.Moq.ResultsByParams_MaxCap[insertAt+1:], r.Moq.ResultsByParams_MaxCap[insertAt:0])
			r.Moq.ResultsByParams_MaxCap[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_MaxCap(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRegexp_starGenType_MaxCap_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRegexp_starGenType_MaxCap_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRegexp_starGenType_MaxCap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqRegexp_starGenType_MaxCap_doFn
				DoReturnFn MoqRegexp_starGenType_MaxCap_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRegexp_starGenType) PrettyParams_MaxCap(params MoqRegexp_starGenType_MaxCap_params) string {
	return fmt.Sprintf("MaxCap()")
}

func (m *MoqRegexp_starGenType) ParamsKey_MaxCap(params MoqRegexp_starGenType_MaxCap_params, anyParams uint64) MoqRegexp_starGenType_MaxCap_paramsKey {
	m.Scene.T.Helper()
	return MoqRegexp_starGenType_MaxCap_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRegexp_starGenType_recorder) CapNames() *MoqRegexp_starGenType_CapNames_fnRecorder {
	return &MoqRegexp_starGenType_CapNames_fnRecorder{
		Params:   MoqRegexp_starGenType_CapNames_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRegexp_starGenType_CapNames_fnRecorder) Any() *MoqRegexp_starGenType_CapNames_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CapNames(r.Params))
		return nil
	}
	return &MoqRegexp_starGenType_CapNames_anyParams{Recorder: r}
}

func (r *MoqRegexp_starGenType_CapNames_fnRecorder) Seq() *MoqRegexp_starGenType_CapNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CapNames(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRegexp_starGenType_CapNames_fnRecorder) NoSeq() *MoqRegexp_starGenType_CapNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CapNames(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRegexp_starGenType_CapNames_fnRecorder) ReturnResults(result1 []string) *MoqRegexp_starGenType_CapNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []string
		}
		Sequence   uint32
		DoFn       MoqRegexp_starGenType_CapNames_doFn
		DoReturnFn MoqRegexp_starGenType_CapNames_doReturnFn
	}{
		Values: &struct {
			Result1 []string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRegexp_starGenType_CapNames_fnRecorder) AndDo(fn MoqRegexp_starGenType_CapNames_doFn) *MoqRegexp_starGenType_CapNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRegexp_starGenType_CapNames_fnRecorder) DoReturnResults(fn MoqRegexp_starGenType_CapNames_doReturnFn) *MoqRegexp_starGenType_CapNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []string
		}
		Sequence   uint32
		DoFn       MoqRegexp_starGenType_CapNames_doFn
		DoReturnFn MoqRegexp_starGenType_CapNames_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRegexp_starGenType_CapNames_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRegexp_starGenType_CapNames_resultsByParams
	for n, res := range r.Moq.ResultsByParams_CapNames {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRegexp_starGenType_CapNames_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRegexp_starGenType_CapNames_paramsKey]*MoqRegexp_starGenType_CapNames_results{},
		}
		r.Moq.ResultsByParams_CapNames = append(r.Moq.ResultsByParams_CapNames, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_CapNames) {
			copy(r.Moq.ResultsByParams_CapNames[insertAt+1:], r.Moq.ResultsByParams_CapNames[insertAt:0])
			r.Moq.ResultsByParams_CapNames[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_CapNames(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRegexp_starGenType_CapNames_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRegexp_starGenType_CapNames_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRegexp_starGenType_CapNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []string
				}
				Sequence   uint32
				DoFn       MoqRegexp_starGenType_CapNames_doFn
				DoReturnFn MoqRegexp_starGenType_CapNames_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRegexp_starGenType) PrettyParams_CapNames(params MoqRegexp_starGenType_CapNames_params) string {
	return fmt.Sprintf("CapNames()")
}

func (m *MoqRegexp_starGenType) ParamsKey_CapNames(params MoqRegexp_starGenType_CapNames_params, anyParams uint64) MoqRegexp_starGenType_CapNames_paramsKey {
	m.Scene.T.Helper()
	return MoqRegexp_starGenType_CapNames_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRegexp_starGenType_recorder) Simplify() *MoqRegexp_starGenType_Simplify_fnRecorder {
	return &MoqRegexp_starGenType_Simplify_fnRecorder{
		Params:   MoqRegexp_starGenType_Simplify_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRegexp_starGenType_Simplify_fnRecorder) Any() *MoqRegexp_starGenType_Simplify_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Simplify(r.Params))
		return nil
	}
	return &MoqRegexp_starGenType_Simplify_anyParams{Recorder: r}
}

func (r *MoqRegexp_starGenType_Simplify_fnRecorder) Seq() *MoqRegexp_starGenType_Simplify_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Simplify(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRegexp_starGenType_Simplify_fnRecorder) NoSeq() *MoqRegexp_starGenType_Simplify_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Simplify(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRegexp_starGenType_Simplify_fnRecorder) ReturnResults(result1 *syntax.Regexp) *MoqRegexp_starGenType_Simplify_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *syntax.Regexp
		}
		Sequence   uint32
		DoFn       MoqRegexp_starGenType_Simplify_doFn
		DoReturnFn MoqRegexp_starGenType_Simplify_doReturnFn
	}{
		Values: &struct {
			Result1 *syntax.Regexp
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRegexp_starGenType_Simplify_fnRecorder) AndDo(fn MoqRegexp_starGenType_Simplify_doFn) *MoqRegexp_starGenType_Simplify_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRegexp_starGenType_Simplify_fnRecorder) DoReturnResults(fn MoqRegexp_starGenType_Simplify_doReturnFn) *MoqRegexp_starGenType_Simplify_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *syntax.Regexp
		}
		Sequence   uint32
		DoFn       MoqRegexp_starGenType_Simplify_doFn
		DoReturnFn MoqRegexp_starGenType_Simplify_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRegexp_starGenType_Simplify_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRegexp_starGenType_Simplify_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Simplify {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRegexp_starGenType_Simplify_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRegexp_starGenType_Simplify_paramsKey]*MoqRegexp_starGenType_Simplify_results{},
		}
		r.Moq.ResultsByParams_Simplify = append(r.Moq.ResultsByParams_Simplify, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Simplify) {
			copy(r.Moq.ResultsByParams_Simplify[insertAt+1:], r.Moq.ResultsByParams_Simplify[insertAt:0])
			r.Moq.ResultsByParams_Simplify[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Simplify(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRegexp_starGenType_Simplify_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRegexp_starGenType_Simplify_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRegexp_starGenType_Simplify_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *syntax.Regexp
				}
				Sequence   uint32
				DoFn       MoqRegexp_starGenType_Simplify_doFn
				DoReturnFn MoqRegexp_starGenType_Simplify_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRegexp_starGenType) PrettyParams_Simplify(params MoqRegexp_starGenType_Simplify_params) string {
	return fmt.Sprintf("Simplify()")
}

func (m *MoqRegexp_starGenType) ParamsKey_Simplify(params MoqRegexp_starGenType_Simplify_params, anyParams uint64) MoqRegexp_starGenType_Simplify_paramsKey {
	m.Scene.T.Helper()
	return MoqRegexp_starGenType_Simplify_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqRegexp_starGenType) Reset() {
	m.ResultsByParams_Equal = nil
	m.ResultsByParams_String = nil
	m.ResultsByParams_MaxCap = nil
	m.ResultsByParams_CapNames = nil
	m.ResultsByParams_Simplify = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqRegexp_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Equal {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Equal(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_MaxCap {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_MaxCap(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_CapNames {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_CapNames(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Simplify {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Simplify(results.Params))
			}
		}
	}
}
