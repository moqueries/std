// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package jpeg

import (
	"fmt"
	"image/jpeg"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that jpeg.Reader is mocked completely
var _ jpeg.Reader = (*MoqReader_mock)(nil)

// MoqReader holds the state of a moq of the Reader type
type MoqReader struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqReader_mock

	ResultsByParams_ReadByte []MoqReader_ReadByte_resultsByParams
	ResultsByParams_Read     []MoqReader_Read_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			ReadByte struct{}
			Read     struct {
				P moq.ParamIndexing
			}
		}
	}
	// MoqReader_mock isolates the mock interface of the Reader type
}

type MoqReader_mock struct {
	Moq *MoqReader
}

// MoqReader_recorder isolates the recorder interface of the Reader type
type MoqReader_recorder struct {
	Moq *MoqReader
}

// MoqReader_ReadByte_params holds the params of the Reader type
type MoqReader_ReadByte_params struct{}

// MoqReader_ReadByte_paramsKey holds the map key params of the Reader type
type MoqReader_ReadByte_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_ReadByte_resultsByParams contains the results for a given set of
// parameters for the Reader type
type MoqReader_ReadByte_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_ReadByte_paramsKey]*MoqReader_ReadByte_results
}

// MoqReader_ReadByte_doFn defines the type of function needed when calling
// AndDo for the Reader type
type MoqReader_ReadByte_doFn func()

// MoqReader_ReadByte_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Reader type
type MoqReader_ReadByte_doReturnFn func() (byte, error)

// MoqReader_ReadByte_results holds the results of the Reader type
type MoqReader_ReadByte_results struct {
	Params  MoqReader_ReadByte_params
	Results []struct {
		Values *struct {
			Result1 byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_ReadByte_doFn
		DoReturnFn MoqReader_ReadByte_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_ReadByte_fnRecorder routes recorded function calls to the
// MoqReader moq
type MoqReader_ReadByte_fnRecorder struct {
	Params    MoqReader_ReadByte_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_ReadByte_results
	Moq       *MoqReader
}

// MoqReader_ReadByte_anyParams isolates the any params functions of the Reader
// type
type MoqReader_ReadByte_anyParams struct {
	Recorder *MoqReader_ReadByte_fnRecorder
}

// MoqReader_Read_params holds the params of the Reader type
type MoqReader_Read_params struct{ P []byte }

// MoqReader_Read_paramsKey holds the map key params of the Reader type
type MoqReader_Read_paramsKey struct {
	Params struct{}
	Hashes struct{ P hash.Hash }
}

// MoqReader_Read_resultsByParams contains the results for a given set of
// parameters for the Reader type
type MoqReader_Read_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_Read_paramsKey]*MoqReader_Read_results
}

// MoqReader_Read_doFn defines the type of function needed when calling AndDo
// for the Reader type
type MoqReader_Read_doFn func(p []byte)

// MoqReader_Read_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Reader type
type MoqReader_Read_doReturnFn func(p []byte) (n int, err error)

// MoqReader_Read_results holds the results of the Reader type
type MoqReader_Read_results struct {
	Params  MoqReader_Read_params
	Results []struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqReader_Read_doFn
		DoReturnFn MoqReader_Read_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_Read_fnRecorder routes recorded function calls to the MoqReader
// moq
type MoqReader_Read_fnRecorder struct {
	Params    MoqReader_Read_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_Read_results
	Moq       *MoqReader
}

// MoqReader_Read_anyParams isolates the any params functions of the Reader
// type
type MoqReader_Read_anyParams struct {
	Recorder *MoqReader_Read_fnRecorder
}

// NewMoqReader creates a new moq of the Reader type
func NewMoqReader(scene *moq.Scene, config *moq.Config) *MoqReader {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqReader{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqReader_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				ReadByte struct{}
				Read     struct {
					P moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			ReadByte struct{}
			Read     struct {
				P moq.ParamIndexing
			}
		}{
			ReadByte: struct{}{},
			Read: struct {
				P moq.ParamIndexing
			}{
				P: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Reader type
func (m *MoqReader) Mock() *MoqReader_mock { return m.Moq }

func (m *MoqReader_mock) ReadByte() (result1 byte, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_ReadByte_params{}
	var results *MoqReader_ReadByte_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadByte {
		paramsKey := m.Moq.ParamsKey_ReadByte(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadByte(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadByte(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadByte(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqReader_mock) Read(p []byte) (n int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_Read_params{
		P: p,
	}
	var results *MoqReader_Read_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Read {
		paramsKey := m.Moq.ParamsKey_Read(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Read(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Read(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Read(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(p)
	}
	return
}

// OnCall returns the recorder implementation of the Reader type
func (m *MoqReader) OnCall() *MoqReader_recorder {
	return &MoqReader_recorder{
		Moq: m,
	}
}

func (m *MoqReader_recorder) ReadByte() *MoqReader_ReadByte_fnRecorder {
	return &MoqReader_ReadByte_fnRecorder{
		Params:   MoqReader_ReadByte_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_ReadByte_fnRecorder) Any() *MoqReader_ReadByte_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadByte(r.Params))
		return nil
	}
	return &MoqReader_ReadByte_anyParams{Recorder: r}
}

func (r *MoqReader_ReadByte_fnRecorder) Seq() *MoqReader_ReadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadByte(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_ReadByte_fnRecorder) NoSeq() *MoqReader_ReadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadByte(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_ReadByte_fnRecorder) ReturnResults(result1 byte, result2 error) *MoqReader_ReadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_ReadByte_doFn
		DoReturnFn MoqReader_ReadByte_doReturnFn
	}{
		Values: &struct {
			Result1 byte
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_ReadByte_fnRecorder) AndDo(fn MoqReader_ReadByte_doFn) *MoqReader_ReadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_ReadByte_fnRecorder) DoReturnResults(fn MoqReader_ReadByte_doReturnFn) *MoqReader_ReadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_ReadByte_doFn
		DoReturnFn MoqReader_ReadByte_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_ReadByte_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_ReadByte_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadByte {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_ReadByte_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_ReadByte_paramsKey]*MoqReader_ReadByte_results{},
		}
		r.Moq.ResultsByParams_ReadByte = append(r.Moq.ResultsByParams_ReadByte, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadByte) {
			copy(r.Moq.ResultsByParams_ReadByte[insertAt+1:], r.Moq.ResultsByParams_ReadByte[insertAt:0])
			r.Moq.ResultsByParams_ReadByte[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadByte(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_ReadByte_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_ReadByte_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_ReadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 byte
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqReader_ReadByte_doFn
				DoReturnFn MoqReader_ReadByte_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader) PrettyParams_ReadByte(params MoqReader_ReadByte_params) string {
	return fmt.Sprintf("ReadByte()")
}

func (m *MoqReader) ParamsKey_ReadByte(params MoqReader_ReadByte_params, anyParams uint64) MoqReader_ReadByte_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_ReadByte_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_recorder) Read(p []byte) *MoqReader_Read_fnRecorder {
	return &MoqReader_Read_fnRecorder{
		Params: MoqReader_Read_params{
			P: p,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_Read_fnRecorder) Any() *MoqReader_Read_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	return &MoqReader_Read_anyParams{Recorder: r}
}

func (a *MoqReader_Read_anyParams) P() *MoqReader_Read_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqReader_Read_fnRecorder) Seq() *MoqReader_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_Read_fnRecorder) NoSeq() *MoqReader_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_Read_fnRecorder) ReturnResults(n int, err error) *MoqReader_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqReader_Read_doFn
		DoReturnFn MoqReader_Read_doReturnFn
	}{
		Values: &struct {
			N   int
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_Read_fnRecorder) AndDo(fn MoqReader_Read_doFn) *MoqReader_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_Read_fnRecorder) DoReturnResults(fn MoqReader_Read_doReturnFn) *MoqReader_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqReader_Read_doFn
		DoReturnFn MoqReader_Read_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_Read_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_Read_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Read {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_Read_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_Read_paramsKey]*MoqReader_Read_results{},
		}
		r.Moq.ResultsByParams_Read = append(r.Moq.ResultsByParams_Read, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Read) {
			copy(r.Moq.ResultsByParams_Read[insertAt+1:], r.Moq.ResultsByParams_Read[insertAt:0])
			r.Moq.ResultsByParams_Read[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Read(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_Read_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_Read_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int
					Err error
				}
				Sequence   uint32
				DoFn       MoqReader_Read_doFn
				DoReturnFn MoqReader_Read_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader) PrettyParams_Read(params MoqReader_Read_params) string {
	return fmt.Sprintf("Read(%#v)", params.P)
}

func (m *MoqReader) ParamsKey_Read(params MoqReader_Read_params, anyParams uint64) MoqReader_Read_paramsKey {
	m.Scene.T.Helper()
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Read.P == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The p parameter of the Read function can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.P)
	}
	return MoqReader_Read_paramsKey{
		Params: struct{}{},
		Hashes: struct{ P hash.Hash }{
			P: pUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqReader) Reset() { m.ResultsByParams_ReadByte = nil; m.ResultsByParams_Read = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqReader) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_ReadByte {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadByte(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Read {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Read(results.Params))
			}
		}
	}
}
