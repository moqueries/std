// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package image

import (
	"fmt"
	"image"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that image.Point_genType is mocked
// completely
var _ Point_genType = (*MoqPoint_genType_mock)(nil)

// Point_genType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Point_genType interface {
	String() string
	Add(q image.Point) image.Point
	Sub(q image.Point) image.Point
	Mul(k int) image.Point
	Div(k int) image.Point
	In(r image.Rectangle) bool
	Mod(r image.Rectangle) image.Point
	Eq(q image.Point) bool
}

// MoqPoint_genType holds the state of a moq of the Point_genType type
type MoqPoint_genType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqPoint_genType_mock

	ResultsByParams_String []MoqPoint_genType_String_resultsByParams
	ResultsByParams_Add    []MoqPoint_genType_Add_resultsByParams
	ResultsByParams_Sub    []MoqPoint_genType_Sub_resultsByParams
	ResultsByParams_Mul    []MoqPoint_genType_Mul_resultsByParams
	ResultsByParams_Div    []MoqPoint_genType_Div_resultsByParams
	ResultsByParams_In     []MoqPoint_genType_In_resultsByParams
	ResultsByParams_Mod    []MoqPoint_genType_Mod_resultsByParams
	ResultsByParams_Eq     []MoqPoint_genType_Eq_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			String struct{}
			Add    struct {
				Q moq.ParamIndexing
			}
			Sub struct {
				Q moq.ParamIndexing
			}
			Mul struct {
				K moq.ParamIndexing
			}
			Div struct {
				K moq.ParamIndexing
			}
			In struct {
				Param1 moq.ParamIndexing
			}
			Mod struct {
				Param1 moq.ParamIndexing
			}
			Eq struct {
				Q moq.ParamIndexing
			}
		}
	}
	// MoqPoint_genType_mock isolates the mock interface of the Point_genType type
}

type MoqPoint_genType_mock struct {
	Moq *MoqPoint_genType
}

// MoqPoint_genType_recorder isolates the recorder interface of the
// Point_genType type
type MoqPoint_genType_recorder struct {
	Moq *MoqPoint_genType
}

// MoqPoint_genType_String_params holds the params of the Point_genType type
type MoqPoint_genType_String_params struct{}

// MoqPoint_genType_String_paramsKey holds the map key params of the
// Point_genType type
type MoqPoint_genType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPoint_genType_String_resultsByParams contains the results for a given set
// of parameters for the Point_genType type
type MoqPoint_genType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPoint_genType_String_paramsKey]*MoqPoint_genType_String_results
}

// MoqPoint_genType_String_doFn defines the type of function needed when
// calling AndDo for the Point_genType type
type MoqPoint_genType_String_doFn func()

// MoqPoint_genType_String_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Point_genType type
type MoqPoint_genType_String_doReturnFn func() string

// MoqPoint_genType_String_results holds the results of the Point_genType type
type MoqPoint_genType_String_results struct {
	Params  MoqPoint_genType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_String_doFn
		DoReturnFn MoqPoint_genType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPoint_genType_String_fnRecorder routes recorded function calls to the
// MoqPoint_genType moq
type MoqPoint_genType_String_fnRecorder struct {
	Params    MoqPoint_genType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPoint_genType_String_results
	Moq       *MoqPoint_genType
}

// MoqPoint_genType_String_anyParams isolates the any params functions of the
// Point_genType type
type MoqPoint_genType_String_anyParams struct {
	Recorder *MoqPoint_genType_String_fnRecorder
}

// MoqPoint_genType_Add_params holds the params of the Point_genType type
type MoqPoint_genType_Add_params struct{ Q image.Point }

// MoqPoint_genType_Add_paramsKey holds the map key params of the Point_genType
// type
type MoqPoint_genType_Add_paramsKey struct {
	Params struct{ Q image.Point }
	Hashes struct{ Q hash.Hash }
}

// MoqPoint_genType_Add_resultsByParams contains the results for a given set of
// parameters for the Point_genType type
type MoqPoint_genType_Add_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPoint_genType_Add_paramsKey]*MoqPoint_genType_Add_results
}

// MoqPoint_genType_Add_doFn defines the type of function needed when calling
// AndDo for the Point_genType type
type MoqPoint_genType_Add_doFn func(q image.Point)

// MoqPoint_genType_Add_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Point_genType type
type MoqPoint_genType_Add_doReturnFn func(q image.Point) image.Point

// MoqPoint_genType_Add_results holds the results of the Point_genType type
type MoqPoint_genType_Add_results struct {
	Params  MoqPoint_genType_Add_params
	Results []struct {
		Values *struct {
			Result1 image.Point
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_Add_doFn
		DoReturnFn MoqPoint_genType_Add_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPoint_genType_Add_fnRecorder routes recorded function calls to the
// MoqPoint_genType moq
type MoqPoint_genType_Add_fnRecorder struct {
	Params    MoqPoint_genType_Add_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPoint_genType_Add_results
	Moq       *MoqPoint_genType
}

// MoqPoint_genType_Add_anyParams isolates the any params functions of the
// Point_genType type
type MoqPoint_genType_Add_anyParams struct {
	Recorder *MoqPoint_genType_Add_fnRecorder
}

// MoqPoint_genType_Sub_params holds the params of the Point_genType type
type MoqPoint_genType_Sub_params struct{ Q image.Point }

// MoqPoint_genType_Sub_paramsKey holds the map key params of the Point_genType
// type
type MoqPoint_genType_Sub_paramsKey struct {
	Params struct{ Q image.Point }
	Hashes struct{ Q hash.Hash }
}

// MoqPoint_genType_Sub_resultsByParams contains the results for a given set of
// parameters for the Point_genType type
type MoqPoint_genType_Sub_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPoint_genType_Sub_paramsKey]*MoqPoint_genType_Sub_results
}

// MoqPoint_genType_Sub_doFn defines the type of function needed when calling
// AndDo for the Point_genType type
type MoqPoint_genType_Sub_doFn func(q image.Point)

// MoqPoint_genType_Sub_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Point_genType type
type MoqPoint_genType_Sub_doReturnFn func(q image.Point) image.Point

// MoqPoint_genType_Sub_results holds the results of the Point_genType type
type MoqPoint_genType_Sub_results struct {
	Params  MoqPoint_genType_Sub_params
	Results []struct {
		Values *struct {
			Result1 image.Point
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_Sub_doFn
		DoReturnFn MoqPoint_genType_Sub_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPoint_genType_Sub_fnRecorder routes recorded function calls to the
// MoqPoint_genType moq
type MoqPoint_genType_Sub_fnRecorder struct {
	Params    MoqPoint_genType_Sub_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPoint_genType_Sub_results
	Moq       *MoqPoint_genType
}

// MoqPoint_genType_Sub_anyParams isolates the any params functions of the
// Point_genType type
type MoqPoint_genType_Sub_anyParams struct {
	Recorder *MoqPoint_genType_Sub_fnRecorder
}

// MoqPoint_genType_Mul_params holds the params of the Point_genType type
type MoqPoint_genType_Mul_params struct{ K int }

// MoqPoint_genType_Mul_paramsKey holds the map key params of the Point_genType
// type
type MoqPoint_genType_Mul_paramsKey struct {
	Params struct{ K int }
	Hashes struct{ K hash.Hash }
}

// MoqPoint_genType_Mul_resultsByParams contains the results for a given set of
// parameters for the Point_genType type
type MoqPoint_genType_Mul_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPoint_genType_Mul_paramsKey]*MoqPoint_genType_Mul_results
}

// MoqPoint_genType_Mul_doFn defines the type of function needed when calling
// AndDo for the Point_genType type
type MoqPoint_genType_Mul_doFn func(k int)

// MoqPoint_genType_Mul_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Point_genType type
type MoqPoint_genType_Mul_doReturnFn func(k int) image.Point

// MoqPoint_genType_Mul_results holds the results of the Point_genType type
type MoqPoint_genType_Mul_results struct {
	Params  MoqPoint_genType_Mul_params
	Results []struct {
		Values *struct {
			Result1 image.Point
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_Mul_doFn
		DoReturnFn MoqPoint_genType_Mul_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPoint_genType_Mul_fnRecorder routes recorded function calls to the
// MoqPoint_genType moq
type MoqPoint_genType_Mul_fnRecorder struct {
	Params    MoqPoint_genType_Mul_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPoint_genType_Mul_results
	Moq       *MoqPoint_genType
}

// MoqPoint_genType_Mul_anyParams isolates the any params functions of the
// Point_genType type
type MoqPoint_genType_Mul_anyParams struct {
	Recorder *MoqPoint_genType_Mul_fnRecorder
}

// MoqPoint_genType_Div_params holds the params of the Point_genType type
type MoqPoint_genType_Div_params struct{ K int }

// MoqPoint_genType_Div_paramsKey holds the map key params of the Point_genType
// type
type MoqPoint_genType_Div_paramsKey struct {
	Params struct{ K int }
	Hashes struct{ K hash.Hash }
}

// MoqPoint_genType_Div_resultsByParams contains the results for a given set of
// parameters for the Point_genType type
type MoqPoint_genType_Div_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPoint_genType_Div_paramsKey]*MoqPoint_genType_Div_results
}

// MoqPoint_genType_Div_doFn defines the type of function needed when calling
// AndDo for the Point_genType type
type MoqPoint_genType_Div_doFn func(k int)

// MoqPoint_genType_Div_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Point_genType type
type MoqPoint_genType_Div_doReturnFn func(k int) image.Point

// MoqPoint_genType_Div_results holds the results of the Point_genType type
type MoqPoint_genType_Div_results struct {
	Params  MoqPoint_genType_Div_params
	Results []struct {
		Values *struct {
			Result1 image.Point
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_Div_doFn
		DoReturnFn MoqPoint_genType_Div_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPoint_genType_Div_fnRecorder routes recorded function calls to the
// MoqPoint_genType moq
type MoqPoint_genType_Div_fnRecorder struct {
	Params    MoqPoint_genType_Div_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPoint_genType_Div_results
	Moq       *MoqPoint_genType
}

// MoqPoint_genType_Div_anyParams isolates the any params functions of the
// Point_genType type
type MoqPoint_genType_Div_anyParams struct {
	Recorder *MoqPoint_genType_Div_fnRecorder
}

// MoqPoint_genType_In_params holds the params of the Point_genType type
type MoqPoint_genType_In_params struct{ Param1 image.Rectangle }

// MoqPoint_genType_In_paramsKey holds the map key params of the Point_genType
// type
type MoqPoint_genType_In_paramsKey struct {
	Params struct{ Param1 image.Rectangle }
	Hashes struct{ Param1 hash.Hash }
}

// MoqPoint_genType_In_resultsByParams contains the results for a given set of
// parameters for the Point_genType type
type MoqPoint_genType_In_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPoint_genType_In_paramsKey]*MoqPoint_genType_In_results
}

// MoqPoint_genType_In_doFn defines the type of function needed when calling
// AndDo for the Point_genType type
type MoqPoint_genType_In_doFn func(r image.Rectangle)

// MoqPoint_genType_In_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Point_genType type
type MoqPoint_genType_In_doReturnFn func(r image.Rectangle) bool

// MoqPoint_genType_In_results holds the results of the Point_genType type
type MoqPoint_genType_In_results struct {
	Params  MoqPoint_genType_In_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_In_doFn
		DoReturnFn MoqPoint_genType_In_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPoint_genType_In_fnRecorder routes recorded function calls to the
// MoqPoint_genType moq
type MoqPoint_genType_In_fnRecorder struct {
	Params    MoqPoint_genType_In_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPoint_genType_In_results
	Moq       *MoqPoint_genType
}

// MoqPoint_genType_In_anyParams isolates the any params functions of the
// Point_genType type
type MoqPoint_genType_In_anyParams struct {
	Recorder *MoqPoint_genType_In_fnRecorder
}

// MoqPoint_genType_Mod_params holds the params of the Point_genType type
type MoqPoint_genType_Mod_params struct{ Param1 image.Rectangle }

// MoqPoint_genType_Mod_paramsKey holds the map key params of the Point_genType
// type
type MoqPoint_genType_Mod_paramsKey struct {
	Params struct{ Param1 image.Rectangle }
	Hashes struct{ Param1 hash.Hash }
}

// MoqPoint_genType_Mod_resultsByParams contains the results for a given set of
// parameters for the Point_genType type
type MoqPoint_genType_Mod_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPoint_genType_Mod_paramsKey]*MoqPoint_genType_Mod_results
}

// MoqPoint_genType_Mod_doFn defines the type of function needed when calling
// AndDo for the Point_genType type
type MoqPoint_genType_Mod_doFn func(r image.Rectangle)

// MoqPoint_genType_Mod_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Point_genType type
type MoqPoint_genType_Mod_doReturnFn func(r image.Rectangle) image.Point

// MoqPoint_genType_Mod_results holds the results of the Point_genType type
type MoqPoint_genType_Mod_results struct {
	Params  MoqPoint_genType_Mod_params
	Results []struct {
		Values *struct {
			Result1 image.Point
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_Mod_doFn
		DoReturnFn MoqPoint_genType_Mod_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPoint_genType_Mod_fnRecorder routes recorded function calls to the
// MoqPoint_genType moq
type MoqPoint_genType_Mod_fnRecorder struct {
	Params    MoqPoint_genType_Mod_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPoint_genType_Mod_results
	Moq       *MoqPoint_genType
}

// MoqPoint_genType_Mod_anyParams isolates the any params functions of the
// Point_genType type
type MoqPoint_genType_Mod_anyParams struct {
	Recorder *MoqPoint_genType_Mod_fnRecorder
}

// MoqPoint_genType_Eq_params holds the params of the Point_genType type
type MoqPoint_genType_Eq_params struct{ Q image.Point }

// MoqPoint_genType_Eq_paramsKey holds the map key params of the Point_genType
// type
type MoqPoint_genType_Eq_paramsKey struct {
	Params struct{ Q image.Point }
	Hashes struct{ Q hash.Hash }
}

// MoqPoint_genType_Eq_resultsByParams contains the results for a given set of
// parameters for the Point_genType type
type MoqPoint_genType_Eq_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPoint_genType_Eq_paramsKey]*MoqPoint_genType_Eq_results
}

// MoqPoint_genType_Eq_doFn defines the type of function needed when calling
// AndDo for the Point_genType type
type MoqPoint_genType_Eq_doFn func(q image.Point)

// MoqPoint_genType_Eq_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Point_genType type
type MoqPoint_genType_Eq_doReturnFn func(q image.Point) bool

// MoqPoint_genType_Eq_results holds the results of the Point_genType type
type MoqPoint_genType_Eq_results struct {
	Params  MoqPoint_genType_Eq_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_Eq_doFn
		DoReturnFn MoqPoint_genType_Eq_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPoint_genType_Eq_fnRecorder routes recorded function calls to the
// MoqPoint_genType moq
type MoqPoint_genType_Eq_fnRecorder struct {
	Params    MoqPoint_genType_Eq_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPoint_genType_Eq_results
	Moq       *MoqPoint_genType
}

// MoqPoint_genType_Eq_anyParams isolates the any params functions of the
// Point_genType type
type MoqPoint_genType_Eq_anyParams struct {
	Recorder *MoqPoint_genType_Eq_fnRecorder
}

// NewMoqPoint_genType creates a new moq of the Point_genType type
func NewMoqPoint_genType(scene *moq.Scene, config *moq.Config) *MoqPoint_genType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqPoint_genType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqPoint_genType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				String struct{}
				Add    struct {
					Q moq.ParamIndexing
				}
				Sub struct {
					Q moq.ParamIndexing
				}
				Mul struct {
					K moq.ParamIndexing
				}
				Div struct {
					K moq.ParamIndexing
				}
				In struct {
					Param1 moq.ParamIndexing
				}
				Mod struct {
					Param1 moq.ParamIndexing
				}
				Eq struct {
					Q moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			String struct{}
			Add    struct {
				Q moq.ParamIndexing
			}
			Sub struct {
				Q moq.ParamIndexing
			}
			Mul struct {
				K moq.ParamIndexing
			}
			Div struct {
				K moq.ParamIndexing
			}
			In struct {
				Param1 moq.ParamIndexing
			}
			Mod struct {
				Param1 moq.ParamIndexing
			}
			Eq struct {
				Q moq.ParamIndexing
			}
		}{
			String: struct{}{},
			Add: struct {
				Q moq.ParamIndexing
			}{
				Q: moq.ParamIndexByValue,
			},
			Sub: struct {
				Q moq.ParamIndexing
			}{
				Q: moq.ParamIndexByValue,
			},
			Mul: struct {
				K moq.ParamIndexing
			}{
				K: moq.ParamIndexByValue,
			},
			Div: struct {
				K moq.ParamIndexing
			}{
				K: moq.ParamIndexByValue,
			},
			In: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			Mod: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			Eq: struct {
				Q moq.ParamIndexing
			}{
				Q: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Point_genType type
func (m *MoqPoint_genType) Mock() *MoqPoint_genType_mock { return m.Moq }

func (m *MoqPoint_genType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqPoint_genType_String_params{}
	var results *MoqPoint_genType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqPoint_genType_mock) Add(q image.Point) (result1 image.Point) {
	m.Moq.Scene.T.Helper()
	params := MoqPoint_genType_Add_params{
		Q: q,
	}
	var results *MoqPoint_genType_Add_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Add {
		paramsKey := m.Moq.ParamsKey_Add(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Add(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Add(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Add(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(q)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(q)
	}
	return
}

func (m *MoqPoint_genType_mock) Sub(q image.Point) (result1 image.Point) {
	m.Moq.Scene.T.Helper()
	params := MoqPoint_genType_Sub_params{
		Q: q,
	}
	var results *MoqPoint_genType_Sub_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Sub {
		paramsKey := m.Moq.ParamsKey_Sub(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Sub(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Sub(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Sub(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(q)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(q)
	}
	return
}

func (m *MoqPoint_genType_mock) Mul(k int) (result1 image.Point) {
	m.Moq.Scene.T.Helper()
	params := MoqPoint_genType_Mul_params{
		K: k,
	}
	var results *MoqPoint_genType_Mul_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Mul {
		paramsKey := m.Moq.ParamsKey_Mul(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Mul(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Mul(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Mul(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(k)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(k)
	}
	return
}

func (m *MoqPoint_genType_mock) Div(k int) (result1 image.Point) {
	m.Moq.Scene.T.Helper()
	params := MoqPoint_genType_Div_params{
		K: k,
	}
	var results *MoqPoint_genType_Div_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Div {
		paramsKey := m.Moq.ParamsKey_Div(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Div(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Div(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Div(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(k)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(k)
	}
	return
}

func (m *MoqPoint_genType_mock) In(param1 image.Rectangle) (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqPoint_genType_In_params{
		Param1: param1,
	}
	var results *MoqPoint_genType_In_results
	for _, resultsByParams := range m.Moq.ResultsByParams_In {
		paramsKey := m.Moq.ParamsKey_In(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_In(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_In(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_In(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqPoint_genType_mock) Mod(param1 image.Rectangle) (result1 image.Point) {
	m.Moq.Scene.T.Helper()
	params := MoqPoint_genType_Mod_params{
		Param1: param1,
	}
	var results *MoqPoint_genType_Mod_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Mod {
		paramsKey := m.Moq.ParamsKey_Mod(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Mod(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Mod(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Mod(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqPoint_genType_mock) Eq(q image.Point) (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqPoint_genType_Eq_params{
		Q: q,
	}
	var results *MoqPoint_genType_Eq_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Eq {
		paramsKey := m.Moq.ParamsKey_Eq(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Eq(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Eq(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Eq(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(q)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(q)
	}
	return
}

// OnCall returns the recorder implementation of the Point_genType type
func (m *MoqPoint_genType) OnCall() *MoqPoint_genType_recorder {
	return &MoqPoint_genType_recorder{
		Moq: m,
	}
}

func (m *MoqPoint_genType_recorder) String() *MoqPoint_genType_String_fnRecorder {
	return &MoqPoint_genType_String_fnRecorder{
		Params:   MoqPoint_genType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPoint_genType_String_fnRecorder) Any() *MoqPoint_genType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqPoint_genType_String_anyParams{Recorder: r}
}

func (r *MoqPoint_genType_String_fnRecorder) Seq() *MoqPoint_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPoint_genType_String_fnRecorder) NoSeq() *MoqPoint_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPoint_genType_String_fnRecorder) ReturnResults(result1 string) *MoqPoint_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_String_doFn
		DoReturnFn MoqPoint_genType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPoint_genType_String_fnRecorder) AndDo(fn MoqPoint_genType_String_doFn) *MoqPoint_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPoint_genType_String_fnRecorder) DoReturnResults(fn MoqPoint_genType_String_doReturnFn) *MoqPoint_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_String_doFn
		DoReturnFn MoqPoint_genType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPoint_genType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPoint_genType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPoint_genType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPoint_genType_String_paramsKey]*MoqPoint_genType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPoint_genType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPoint_genType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPoint_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqPoint_genType_String_doFn
				DoReturnFn MoqPoint_genType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPoint_genType) PrettyParams_String(params MoqPoint_genType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqPoint_genType) ParamsKey_String(params MoqPoint_genType_String_params, anyParams uint64) MoqPoint_genType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqPoint_genType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPoint_genType_recorder) Add(q image.Point) *MoqPoint_genType_Add_fnRecorder {
	return &MoqPoint_genType_Add_fnRecorder{
		Params: MoqPoint_genType_Add_params{
			Q: q,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPoint_genType_Add_fnRecorder) Any() *MoqPoint_genType_Add_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	return &MoqPoint_genType_Add_anyParams{Recorder: r}
}

func (a *MoqPoint_genType_Add_anyParams) Q() *MoqPoint_genType_Add_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPoint_genType_Add_fnRecorder) Seq() *MoqPoint_genType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPoint_genType_Add_fnRecorder) NoSeq() *MoqPoint_genType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPoint_genType_Add_fnRecorder) ReturnResults(result1 image.Point) *MoqPoint_genType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 image.Point
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_Add_doFn
		DoReturnFn MoqPoint_genType_Add_doReturnFn
	}{
		Values: &struct {
			Result1 image.Point
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPoint_genType_Add_fnRecorder) AndDo(fn MoqPoint_genType_Add_doFn) *MoqPoint_genType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPoint_genType_Add_fnRecorder) DoReturnResults(fn MoqPoint_genType_Add_doReturnFn) *MoqPoint_genType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 image.Point
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_Add_doFn
		DoReturnFn MoqPoint_genType_Add_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPoint_genType_Add_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPoint_genType_Add_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Add {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPoint_genType_Add_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPoint_genType_Add_paramsKey]*MoqPoint_genType_Add_results{},
		}
		r.Moq.ResultsByParams_Add = append(r.Moq.ResultsByParams_Add, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Add) {
			copy(r.Moq.ResultsByParams_Add[insertAt+1:], r.Moq.ResultsByParams_Add[insertAt:0])
			r.Moq.ResultsByParams_Add[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Add(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPoint_genType_Add_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPoint_genType_Add_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPoint_genType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 image.Point
				}
				Sequence   uint32
				DoFn       MoqPoint_genType_Add_doFn
				DoReturnFn MoqPoint_genType_Add_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPoint_genType) PrettyParams_Add(params MoqPoint_genType_Add_params) string {
	return fmt.Sprintf("Add(%#v)", params.Q)
}

func (m *MoqPoint_genType) ParamsKey_Add(params MoqPoint_genType_Add_params, anyParams uint64) MoqPoint_genType_Add_paramsKey {
	m.Scene.T.Helper()
	var qUsed image.Point
	var qUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Add.Q == moq.ParamIndexByValue {
			qUsed = params.Q
		} else {
			qUsedHash = hash.DeepHash(params.Q)
		}
	}
	return MoqPoint_genType_Add_paramsKey{
		Params: struct{ Q image.Point }{
			Q: qUsed,
		},
		Hashes: struct{ Q hash.Hash }{
			Q: qUsedHash,
		},
	}
}

func (m *MoqPoint_genType_recorder) Sub(q image.Point) *MoqPoint_genType_Sub_fnRecorder {
	return &MoqPoint_genType_Sub_fnRecorder{
		Params: MoqPoint_genType_Sub_params{
			Q: q,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPoint_genType_Sub_fnRecorder) Any() *MoqPoint_genType_Sub_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sub(r.Params))
		return nil
	}
	return &MoqPoint_genType_Sub_anyParams{Recorder: r}
}

func (a *MoqPoint_genType_Sub_anyParams) Q() *MoqPoint_genType_Sub_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPoint_genType_Sub_fnRecorder) Seq() *MoqPoint_genType_Sub_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sub(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPoint_genType_Sub_fnRecorder) NoSeq() *MoqPoint_genType_Sub_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sub(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPoint_genType_Sub_fnRecorder) ReturnResults(result1 image.Point) *MoqPoint_genType_Sub_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 image.Point
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_Sub_doFn
		DoReturnFn MoqPoint_genType_Sub_doReturnFn
	}{
		Values: &struct {
			Result1 image.Point
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPoint_genType_Sub_fnRecorder) AndDo(fn MoqPoint_genType_Sub_doFn) *MoqPoint_genType_Sub_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPoint_genType_Sub_fnRecorder) DoReturnResults(fn MoqPoint_genType_Sub_doReturnFn) *MoqPoint_genType_Sub_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 image.Point
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_Sub_doFn
		DoReturnFn MoqPoint_genType_Sub_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPoint_genType_Sub_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPoint_genType_Sub_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Sub {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPoint_genType_Sub_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPoint_genType_Sub_paramsKey]*MoqPoint_genType_Sub_results{},
		}
		r.Moq.ResultsByParams_Sub = append(r.Moq.ResultsByParams_Sub, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Sub) {
			copy(r.Moq.ResultsByParams_Sub[insertAt+1:], r.Moq.ResultsByParams_Sub[insertAt:0])
			r.Moq.ResultsByParams_Sub[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Sub(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPoint_genType_Sub_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPoint_genType_Sub_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPoint_genType_Sub_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 image.Point
				}
				Sequence   uint32
				DoFn       MoqPoint_genType_Sub_doFn
				DoReturnFn MoqPoint_genType_Sub_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPoint_genType) PrettyParams_Sub(params MoqPoint_genType_Sub_params) string {
	return fmt.Sprintf("Sub(%#v)", params.Q)
}

func (m *MoqPoint_genType) ParamsKey_Sub(params MoqPoint_genType_Sub_params, anyParams uint64) MoqPoint_genType_Sub_paramsKey {
	m.Scene.T.Helper()
	var qUsed image.Point
	var qUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Sub.Q == moq.ParamIndexByValue {
			qUsed = params.Q
		} else {
			qUsedHash = hash.DeepHash(params.Q)
		}
	}
	return MoqPoint_genType_Sub_paramsKey{
		Params: struct{ Q image.Point }{
			Q: qUsed,
		},
		Hashes: struct{ Q hash.Hash }{
			Q: qUsedHash,
		},
	}
}

func (m *MoqPoint_genType_recorder) Mul(k int) *MoqPoint_genType_Mul_fnRecorder {
	return &MoqPoint_genType_Mul_fnRecorder{
		Params: MoqPoint_genType_Mul_params{
			K: k,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPoint_genType_Mul_fnRecorder) Any() *MoqPoint_genType_Mul_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Mul(r.Params))
		return nil
	}
	return &MoqPoint_genType_Mul_anyParams{Recorder: r}
}

func (a *MoqPoint_genType_Mul_anyParams) K() *MoqPoint_genType_Mul_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPoint_genType_Mul_fnRecorder) Seq() *MoqPoint_genType_Mul_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Mul(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPoint_genType_Mul_fnRecorder) NoSeq() *MoqPoint_genType_Mul_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Mul(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPoint_genType_Mul_fnRecorder) ReturnResults(result1 image.Point) *MoqPoint_genType_Mul_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 image.Point
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_Mul_doFn
		DoReturnFn MoqPoint_genType_Mul_doReturnFn
	}{
		Values: &struct {
			Result1 image.Point
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPoint_genType_Mul_fnRecorder) AndDo(fn MoqPoint_genType_Mul_doFn) *MoqPoint_genType_Mul_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPoint_genType_Mul_fnRecorder) DoReturnResults(fn MoqPoint_genType_Mul_doReturnFn) *MoqPoint_genType_Mul_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 image.Point
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_Mul_doFn
		DoReturnFn MoqPoint_genType_Mul_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPoint_genType_Mul_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPoint_genType_Mul_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Mul {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPoint_genType_Mul_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPoint_genType_Mul_paramsKey]*MoqPoint_genType_Mul_results{},
		}
		r.Moq.ResultsByParams_Mul = append(r.Moq.ResultsByParams_Mul, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Mul) {
			copy(r.Moq.ResultsByParams_Mul[insertAt+1:], r.Moq.ResultsByParams_Mul[insertAt:0])
			r.Moq.ResultsByParams_Mul[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Mul(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPoint_genType_Mul_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPoint_genType_Mul_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPoint_genType_Mul_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 image.Point
				}
				Sequence   uint32
				DoFn       MoqPoint_genType_Mul_doFn
				DoReturnFn MoqPoint_genType_Mul_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPoint_genType) PrettyParams_Mul(params MoqPoint_genType_Mul_params) string {
	return fmt.Sprintf("Mul(%#v)", params.K)
}

func (m *MoqPoint_genType) ParamsKey_Mul(params MoqPoint_genType_Mul_params, anyParams uint64) MoqPoint_genType_Mul_paramsKey {
	m.Scene.T.Helper()
	var kUsed int
	var kUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Mul.K == moq.ParamIndexByValue {
			kUsed = params.K
		} else {
			kUsedHash = hash.DeepHash(params.K)
		}
	}
	return MoqPoint_genType_Mul_paramsKey{
		Params: struct{ K int }{
			K: kUsed,
		},
		Hashes: struct{ K hash.Hash }{
			K: kUsedHash,
		},
	}
}

func (m *MoqPoint_genType_recorder) Div(k int) *MoqPoint_genType_Div_fnRecorder {
	return &MoqPoint_genType_Div_fnRecorder{
		Params: MoqPoint_genType_Div_params{
			K: k,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPoint_genType_Div_fnRecorder) Any() *MoqPoint_genType_Div_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Div(r.Params))
		return nil
	}
	return &MoqPoint_genType_Div_anyParams{Recorder: r}
}

func (a *MoqPoint_genType_Div_anyParams) K() *MoqPoint_genType_Div_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPoint_genType_Div_fnRecorder) Seq() *MoqPoint_genType_Div_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Div(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPoint_genType_Div_fnRecorder) NoSeq() *MoqPoint_genType_Div_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Div(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPoint_genType_Div_fnRecorder) ReturnResults(result1 image.Point) *MoqPoint_genType_Div_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 image.Point
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_Div_doFn
		DoReturnFn MoqPoint_genType_Div_doReturnFn
	}{
		Values: &struct {
			Result1 image.Point
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPoint_genType_Div_fnRecorder) AndDo(fn MoqPoint_genType_Div_doFn) *MoqPoint_genType_Div_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPoint_genType_Div_fnRecorder) DoReturnResults(fn MoqPoint_genType_Div_doReturnFn) *MoqPoint_genType_Div_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 image.Point
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_Div_doFn
		DoReturnFn MoqPoint_genType_Div_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPoint_genType_Div_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPoint_genType_Div_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Div {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPoint_genType_Div_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPoint_genType_Div_paramsKey]*MoqPoint_genType_Div_results{},
		}
		r.Moq.ResultsByParams_Div = append(r.Moq.ResultsByParams_Div, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Div) {
			copy(r.Moq.ResultsByParams_Div[insertAt+1:], r.Moq.ResultsByParams_Div[insertAt:0])
			r.Moq.ResultsByParams_Div[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Div(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPoint_genType_Div_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPoint_genType_Div_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPoint_genType_Div_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 image.Point
				}
				Sequence   uint32
				DoFn       MoqPoint_genType_Div_doFn
				DoReturnFn MoqPoint_genType_Div_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPoint_genType) PrettyParams_Div(params MoqPoint_genType_Div_params) string {
	return fmt.Sprintf("Div(%#v)", params.K)
}

func (m *MoqPoint_genType) ParamsKey_Div(params MoqPoint_genType_Div_params, anyParams uint64) MoqPoint_genType_Div_paramsKey {
	m.Scene.T.Helper()
	var kUsed int
	var kUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Div.K == moq.ParamIndexByValue {
			kUsed = params.K
		} else {
			kUsedHash = hash.DeepHash(params.K)
		}
	}
	return MoqPoint_genType_Div_paramsKey{
		Params: struct{ K int }{
			K: kUsed,
		},
		Hashes: struct{ K hash.Hash }{
			K: kUsedHash,
		},
	}
}

func (m *MoqPoint_genType_recorder) In(param1 image.Rectangle) *MoqPoint_genType_In_fnRecorder {
	return &MoqPoint_genType_In_fnRecorder{
		Params: MoqPoint_genType_In_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPoint_genType_In_fnRecorder) Any() *MoqPoint_genType_In_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_In(r.Params))
		return nil
	}
	return &MoqPoint_genType_In_anyParams{Recorder: r}
}

func (a *MoqPoint_genType_In_anyParams) Param1() *MoqPoint_genType_In_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPoint_genType_In_fnRecorder) Seq() *MoqPoint_genType_In_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_In(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPoint_genType_In_fnRecorder) NoSeq() *MoqPoint_genType_In_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_In(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPoint_genType_In_fnRecorder) ReturnResults(result1 bool) *MoqPoint_genType_In_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_In_doFn
		DoReturnFn MoqPoint_genType_In_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPoint_genType_In_fnRecorder) AndDo(fn MoqPoint_genType_In_doFn) *MoqPoint_genType_In_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPoint_genType_In_fnRecorder) DoReturnResults(fn MoqPoint_genType_In_doReturnFn) *MoqPoint_genType_In_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_In_doFn
		DoReturnFn MoqPoint_genType_In_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPoint_genType_In_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPoint_genType_In_resultsByParams
	for n, res := range r.Moq.ResultsByParams_In {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPoint_genType_In_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPoint_genType_In_paramsKey]*MoqPoint_genType_In_results{},
		}
		r.Moq.ResultsByParams_In = append(r.Moq.ResultsByParams_In, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_In) {
			copy(r.Moq.ResultsByParams_In[insertAt+1:], r.Moq.ResultsByParams_In[insertAt:0])
			r.Moq.ResultsByParams_In[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_In(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPoint_genType_In_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPoint_genType_In_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPoint_genType_In_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqPoint_genType_In_doFn
				DoReturnFn MoqPoint_genType_In_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPoint_genType) PrettyParams_In(params MoqPoint_genType_In_params) string {
	return fmt.Sprintf("In(%#v)", params.Param1)
}

func (m *MoqPoint_genType) ParamsKey_In(params MoqPoint_genType_In_params, anyParams uint64) MoqPoint_genType_In_paramsKey {
	m.Scene.T.Helper()
	var param1Used image.Rectangle
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.In.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqPoint_genType_In_paramsKey{
		Params: struct{ Param1 image.Rectangle }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqPoint_genType_recorder) Mod(param1 image.Rectangle) *MoqPoint_genType_Mod_fnRecorder {
	return &MoqPoint_genType_Mod_fnRecorder{
		Params: MoqPoint_genType_Mod_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPoint_genType_Mod_fnRecorder) Any() *MoqPoint_genType_Mod_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Mod(r.Params))
		return nil
	}
	return &MoqPoint_genType_Mod_anyParams{Recorder: r}
}

func (a *MoqPoint_genType_Mod_anyParams) Param1() *MoqPoint_genType_Mod_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPoint_genType_Mod_fnRecorder) Seq() *MoqPoint_genType_Mod_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Mod(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPoint_genType_Mod_fnRecorder) NoSeq() *MoqPoint_genType_Mod_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Mod(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPoint_genType_Mod_fnRecorder) ReturnResults(result1 image.Point) *MoqPoint_genType_Mod_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 image.Point
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_Mod_doFn
		DoReturnFn MoqPoint_genType_Mod_doReturnFn
	}{
		Values: &struct {
			Result1 image.Point
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPoint_genType_Mod_fnRecorder) AndDo(fn MoqPoint_genType_Mod_doFn) *MoqPoint_genType_Mod_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPoint_genType_Mod_fnRecorder) DoReturnResults(fn MoqPoint_genType_Mod_doReturnFn) *MoqPoint_genType_Mod_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 image.Point
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_Mod_doFn
		DoReturnFn MoqPoint_genType_Mod_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPoint_genType_Mod_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPoint_genType_Mod_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Mod {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPoint_genType_Mod_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPoint_genType_Mod_paramsKey]*MoqPoint_genType_Mod_results{},
		}
		r.Moq.ResultsByParams_Mod = append(r.Moq.ResultsByParams_Mod, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Mod) {
			copy(r.Moq.ResultsByParams_Mod[insertAt+1:], r.Moq.ResultsByParams_Mod[insertAt:0])
			r.Moq.ResultsByParams_Mod[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Mod(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPoint_genType_Mod_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPoint_genType_Mod_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPoint_genType_Mod_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 image.Point
				}
				Sequence   uint32
				DoFn       MoqPoint_genType_Mod_doFn
				DoReturnFn MoqPoint_genType_Mod_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPoint_genType) PrettyParams_Mod(params MoqPoint_genType_Mod_params) string {
	return fmt.Sprintf("Mod(%#v)", params.Param1)
}

func (m *MoqPoint_genType) ParamsKey_Mod(params MoqPoint_genType_Mod_params, anyParams uint64) MoqPoint_genType_Mod_paramsKey {
	m.Scene.T.Helper()
	var param1Used image.Rectangle
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Mod.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqPoint_genType_Mod_paramsKey{
		Params: struct{ Param1 image.Rectangle }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqPoint_genType_recorder) Eq(q image.Point) *MoqPoint_genType_Eq_fnRecorder {
	return &MoqPoint_genType_Eq_fnRecorder{
		Params: MoqPoint_genType_Eq_params{
			Q: q,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPoint_genType_Eq_fnRecorder) Any() *MoqPoint_genType_Eq_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Eq(r.Params))
		return nil
	}
	return &MoqPoint_genType_Eq_anyParams{Recorder: r}
}

func (a *MoqPoint_genType_Eq_anyParams) Q() *MoqPoint_genType_Eq_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPoint_genType_Eq_fnRecorder) Seq() *MoqPoint_genType_Eq_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Eq(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPoint_genType_Eq_fnRecorder) NoSeq() *MoqPoint_genType_Eq_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Eq(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPoint_genType_Eq_fnRecorder) ReturnResults(result1 bool) *MoqPoint_genType_Eq_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_Eq_doFn
		DoReturnFn MoqPoint_genType_Eq_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPoint_genType_Eq_fnRecorder) AndDo(fn MoqPoint_genType_Eq_doFn) *MoqPoint_genType_Eq_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPoint_genType_Eq_fnRecorder) DoReturnResults(fn MoqPoint_genType_Eq_doReturnFn) *MoqPoint_genType_Eq_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPoint_genType_Eq_doFn
		DoReturnFn MoqPoint_genType_Eq_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPoint_genType_Eq_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPoint_genType_Eq_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Eq {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPoint_genType_Eq_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPoint_genType_Eq_paramsKey]*MoqPoint_genType_Eq_results{},
		}
		r.Moq.ResultsByParams_Eq = append(r.Moq.ResultsByParams_Eq, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Eq) {
			copy(r.Moq.ResultsByParams_Eq[insertAt+1:], r.Moq.ResultsByParams_Eq[insertAt:0])
			r.Moq.ResultsByParams_Eq[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Eq(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPoint_genType_Eq_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPoint_genType_Eq_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPoint_genType_Eq_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqPoint_genType_Eq_doFn
				DoReturnFn MoqPoint_genType_Eq_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPoint_genType) PrettyParams_Eq(params MoqPoint_genType_Eq_params) string {
	return fmt.Sprintf("Eq(%#v)", params.Q)
}

func (m *MoqPoint_genType) ParamsKey_Eq(params MoqPoint_genType_Eq_params, anyParams uint64) MoqPoint_genType_Eq_paramsKey {
	m.Scene.T.Helper()
	var qUsed image.Point
	var qUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Eq.Q == moq.ParamIndexByValue {
			qUsed = params.Q
		} else {
			qUsedHash = hash.DeepHash(params.Q)
		}
	}
	return MoqPoint_genType_Eq_paramsKey{
		Params: struct{ Q image.Point }{
			Q: qUsed,
		},
		Hashes: struct{ Q hash.Hash }{
			Q: qUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqPoint_genType) Reset() {
	m.ResultsByParams_String = nil
	m.ResultsByParams_Add = nil
	m.ResultsByParams_Sub = nil
	m.ResultsByParams_Mul = nil
	m.ResultsByParams_Div = nil
	m.ResultsByParams_In = nil
	m.ResultsByParams_Mod = nil
	m.ResultsByParams_Eq = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqPoint_genType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Add {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Add(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Sub {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Sub(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Mul {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Mul(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Div {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Div(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_In {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_In(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Mod {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Mod(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Eq {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Eq(results.Params))
			}
		}
	}
}
