// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package image

import (
	"fmt"
	"image"
	"image/color"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that image.Gray16_starGenType is mocked
// completely
var _ Gray16_starGenType = (*MoqGray16_starGenType_mock)(nil)

// Gray16_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Gray16_starGenType interface {
	ColorModel() color.Model
	Bounds() image.Rectangle
	At(x, y int) color.Color
	RGBA64At(x, y int) color.RGBA64
	Gray16At(x, y int) color.Gray16
	PixOffset(x, y int) int
	Set(x, y int, c color.Color)
	SetRGBA64(x, y int, c color.RGBA64)
	SetGray16(x, y int, c color.Gray16)
	SubImage(r image.Rectangle) image.Image
	Opaque() bool
}

// MoqGray16_starGenType holds the state of a moq of the Gray16_starGenType
// type
type MoqGray16_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqGray16_starGenType_mock

	ResultsByParams_ColorModel []MoqGray16_starGenType_ColorModel_resultsByParams
	ResultsByParams_Bounds     []MoqGray16_starGenType_Bounds_resultsByParams
	ResultsByParams_At         []MoqGray16_starGenType_At_resultsByParams
	ResultsByParams_RGBA64At   []MoqGray16_starGenType_RGBA64At_resultsByParams
	ResultsByParams_Gray16At   []MoqGray16_starGenType_Gray16At_resultsByParams
	ResultsByParams_PixOffset  []MoqGray16_starGenType_PixOffset_resultsByParams
	ResultsByParams_Set        []MoqGray16_starGenType_Set_resultsByParams
	ResultsByParams_SetRGBA64  []MoqGray16_starGenType_SetRGBA64_resultsByParams
	ResultsByParams_SetGray16  []MoqGray16_starGenType_SetGray16_resultsByParams
	ResultsByParams_SubImage   []MoqGray16_starGenType_SubImage_resultsByParams
	ResultsByParams_Opaque     []MoqGray16_starGenType_Opaque_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			ColorModel struct{}
			Bounds     struct{}
			At         struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}
			RGBA64At struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}
			Gray16At struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}
			PixOffset struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}
			Set struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
				C moq.ParamIndexing
			}
			SetRGBA64 struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
				C moq.ParamIndexing
			}
			SetGray16 struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
				C moq.ParamIndexing
			}
			SubImage struct {
				Param1 moq.ParamIndexing
			}
			Opaque struct{}
		}
	}
}

// MoqGray16_starGenType_mock isolates the mock interface of the
// Gray16_starGenType type
type MoqGray16_starGenType_mock struct {
	Moq *MoqGray16_starGenType
}

// MoqGray16_starGenType_recorder isolates the recorder interface of the
// Gray16_starGenType type
type MoqGray16_starGenType_recorder struct {
	Moq *MoqGray16_starGenType
}

// MoqGray16_starGenType_ColorModel_params holds the params of the
// Gray16_starGenType type
type MoqGray16_starGenType_ColorModel_params struct{}

// MoqGray16_starGenType_ColorModel_paramsKey holds the map key params of the
// Gray16_starGenType type
type MoqGray16_starGenType_ColorModel_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqGray16_starGenType_ColorModel_resultsByParams contains the results for a
// given set of parameters for the Gray16_starGenType type
type MoqGray16_starGenType_ColorModel_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqGray16_starGenType_ColorModel_paramsKey]*MoqGray16_starGenType_ColorModel_results
}

// MoqGray16_starGenType_ColorModel_doFn defines the type of function needed
// when calling AndDo for the Gray16_starGenType type
type MoqGray16_starGenType_ColorModel_doFn func()

// MoqGray16_starGenType_ColorModel_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Gray16_starGenType type
type MoqGray16_starGenType_ColorModel_doReturnFn func() color.Model

// MoqGray16_starGenType_ColorModel_results holds the results of the
// Gray16_starGenType type
type MoqGray16_starGenType_ColorModel_results struct {
	Params  MoqGray16_starGenType_ColorModel_params
	Results []struct {
		Values *struct {
			Result1 color.Model
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_ColorModel_doFn
		DoReturnFn MoqGray16_starGenType_ColorModel_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqGray16_starGenType_ColorModel_fnRecorder routes recorded function calls
// to the MoqGray16_starGenType moq
type MoqGray16_starGenType_ColorModel_fnRecorder struct {
	Params    MoqGray16_starGenType_ColorModel_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqGray16_starGenType_ColorModel_results
	Moq       *MoqGray16_starGenType
}

// MoqGray16_starGenType_ColorModel_anyParams isolates the any params functions
// of the Gray16_starGenType type
type MoqGray16_starGenType_ColorModel_anyParams struct {
	Recorder *MoqGray16_starGenType_ColorModel_fnRecorder
}

// MoqGray16_starGenType_Bounds_params holds the params of the
// Gray16_starGenType type
type MoqGray16_starGenType_Bounds_params struct{}

// MoqGray16_starGenType_Bounds_paramsKey holds the map key params of the
// Gray16_starGenType type
type MoqGray16_starGenType_Bounds_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqGray16_starGenType_Bounds_resultsByParams contains the results for a
// given set of parameters for the Gray16_starGenType type
type MoqGray16_starGenType_Bounds_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqGray16_starGenType_Bounds_paramsKey]*MoqGray16_starGenType_Bounds_results
}

// MoqGray16_starGenType_Bounds_doFn defines the type of function needed when
// calling AndDo for the Gray16_starGenType type
type MoqGray16_starGenType_Bounds_doFn func()

// MoqGray16_starGenType_Bounds_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Gray16_starGenType type
type MoqGray16_starGenType_Bounds_doReturnFn func() image.Rectangle

// MoqGray16_starGenType_Bounds_results holds the results of the
// Gray16_starGenType type
type MoqGray16_starGenType_Bounds_results struct {
	Params  MoqGray16_starGenType_Bounds_params
	Results []struct {
		Values *struct {
			Result1 image.Rectangle
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_Bounds_doFn
		DoReturnFn MoqGray16_starGenType_Bounds_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqGray16_starGenType_Bounds_fnRecorder routes recorded function calls to
// the MoqGray16_starGenType moq
type MoqGray16_starGenType_Bounds_fnRecorder struct {
	Params    MoqGray16_starGenType_Bounds_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqGray16_starGenType_Bounds_results
	Moq       *MoqGray16_starGenType
}

// MoqGray16_starGenType_Bounds_anyParams isolates the any params functions of
// the Gray16_starGenType type
type MoqGray16_starGenType_Bounds_anyParams struct {
	Recorder *MoqGray16_starGenType_Bounds_fnRecorder
}

// MoqGray16_starGenType_At_params holds the params of the Gray16_starGenType
// type
type MoqGray16_starGenType_At_params struct{ X, Y int }

// MoqGray16_starGenType_At_paramsKey holds the map key params of the
// Gray16_starGenType type
type MoqGray16_starGenType_At_paramsKey struct {
	Params struct{ X, Y int }
	Hashes struct{ X, Y hash.Hash }
}

// MoqGray16_starGenType_At_resultsByParams contains the results for a given
// set of parameters for the Gray16_starGenType type
type MoqGray16_starGenType_At_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqGray16_starGenType_At_paramsKey]*MoqGray16_starGenType_At_results
}

// MoqGray16_starGenType_At_doFn defines the type of function needed when
// calling AndDo for the Gray16_starGenType type
type MoqGray16_starGenType_At_doFn func(x, y int)

// MoqGray16_starGenType_At_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Gray16_starGenType type
type MoqGray16_starGenType_At_doReturnFn func(x, y int) color.Color

// MoqGray16_starGenType_At_results holds the results of the Gray16_starGenType
// type
type MoqGray16_starGenType_At_results struct {
	Params  MoqGray16_starGenType_At_params
	Results []struct {
		Values *struct {
			Result1 color.Color
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_At_doFn
		DoReturnFn MoqGray16_starGenType_At_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqGray16_starGenType_At_fnRecorder routes recorded function calls to the
// MoqGray16_starGenType moq
type MoqGray16_starGenType_At_fnRecorder struct {
	Params    MoqGray16_starGenType_At_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqGray16_starGenType_At_results
	Moq       *MoqGray16_starGenType
}

// MoqGray16_starGenType_At_anyParams isolates the any params functions of the
// Gray16_starGenType type
type MoqGray16_starGenType_At_anyParams struct {
	Recorder *MoqGray16_starGenType_At_fnRecorder
}

// MoqGray16_starGenType_RGBA64At_params holds the params of the
// Gray16_starGenType type
type MoqGray16_starGenType_RGBA64At_params struct{ X, Y int }

// MoqGray16_starGenType_RGBA64At_paramsKey holds the map key params of the
// Gray16_starGenType type
type MoqGray16_starGenType_RGBA64At_paramsKey struct {
	Params struct{ X, Y int }
	Hashes struct{ X, Y hash.Hash }
}

// MoqGray16_starGenType_RGBA64At_resultsByParams contains the results for a
// given set of parameters for the Gray16_starGenType type
type MoqGray16_starGenType_RGBA64At_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqGray16_starGenType_RGBA64At_paramsKey]*MoqGray16_starGenType_RGBA64At_results
}

// MoqGray16_starGenType_RGBA64At_doFn defines the type of function needed when
// calling AndDo for the Gray16_starGenType type
type MoqGray16_starGenType_RGBA64At_doFn func(x, y int)

// MoqGray16_starGenType_RGBA64At_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Gray16_starGenType type
type MoqGray16_starGenType_RGBA64At_doReturnFn func(x, y int) color.RGBA64

// MoqGray16_starGenType_RGBA64At_results holds the results of the
// Gray16_starGenType type
type MoqGray16_starGenType_RGBA64At_results struct {
	Params  MoqGray16_starGenType_RGBA64At_params
	Results []struct {
		Values *struct {
			Result1 color.RGBA64
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_RGBA64At_doFn
		DoReturnFn MoqGray16_starGenType_RGBA64At_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqGray16_starGenType_RGBA64At_fnRecorder routes recorded function calls to
// the MoqGray16_starGenType moq
type MoqGray16_starGenType_RGBA64At_fnRecorder struct {
	Params    MoqGray16_starGenType_RGBA64At_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqGray16_starGenType_RGBA64At_results
	Moq       *MoqGray16_starGenType
}

// MoqGray16_starGenType_RGBA64At_anyParams isolates the any params functions
// of the Gray16_starGenType type
type MoqGray16_starGenType_RGBA64At_anyParams struct {
	Recorder *MoqGray16_starGenType_RGBA64At_fnRecorder
}

// MoqGray16_starGenType_Gray16At_params holds the params of the
// Gray16_starGenType type
type MoqGray16_starGenType_Gray16At_params struct{ X, Y int }

// MoqGray16_starGenType_Gray16At_paramsKey holds the map key params of the
// Gray16_starGenType type
type MoqGray16_starGenType_Gray16At_paramsKey struct {
	Params struct{ X, Y int }
	Hashes struct{ X, Y hash.Hash }
}

// MoqGray16_starGenType_Gray16At_resultsByParams contains the results for a
// given set of parameters for the Gray16_starGenType type
type MoqGray16_starGenType_Gray16At_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqGray16_starGenType_Gray16At_paramsKey]*MoqGray16_starGenType_Gray16At_results
}

// MoqGray16_starGenType_Gray16At_doFn defines the type of function needed when
// calling AndDo for the Gray16_starGenType type
type MoqGray16_starGenType_Gray16At_doFn func(x, y int)

// MoqGray16_starGenType_Gray16At_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Gray16_starGenType type
type MoqGray16_starGenType_Gray16At_doReturnFn func(x, y int) color.Gray16

// MoqGray16_starGenType_Gray16At_results holds the results of the
// Gray16_starGenType type
type MoqGray16_starGenType_Gray16At_results struct {
	Params  MoqGray16_starGenType_Gray16At_params
	Results []struct {
		Values *struct {
			Result1 color.Gray16
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_Gray16At_doFn
		DoReturnFn MoqGray16_starGenType_Gray16At_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqGray16_starGenType_Gray16At_fnRecorder routes recorded function calls to
// the MoqGray16_starGenType moq
type MoqGray16_starGenType_Gray16At_fnRecorder struct {
	Params    MoqGray16_starGenType_Gray16At_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqGray16_starGenType_Gray16At_results
	Moq       *MoqGray16_starGenType
}

// MoqGray16_starGenType_Gray16At_anyParams isolates the any params functions
// of the Gray16_starGenType type
type MoqGray16_starGenType_Gray16At_anyParams struct {
	Recorder *MoqGray16_starGenType_Gray16At_fnRecorder
}

// MoqGray16_starGenType_PixOffset_params holds the params of the
// Gray16_starGenType type
type MoqGray16_starGenType_PixOffset_params struct{ X, Y int }

// MoqGray16_starGenType_PixOffset_paramsKey holds the map key params of the
// Gray16_starGenType type
type MoqGray16_starGenType_PixOffset_paramsKey struct {
	Params struct{ X, Y int }
	Hashes struct{ X, Y hash.Hash }
}

// MoqGray16_starGenType_PixOffset_resultsByParams contains the results for a
// given set of parameters for the Gray16_starGenType type
type MoqGray16_starGenType_PixOffset_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqGray16_starGenType_PixOffset_paramsKey]*MoqGray16_starGenType_PixOffset_results
}

// MoqGray16_starGenType_PixOffset_doFn defines the type of function needed
// when calling AndDo for the Gray16_starGenType type
type MoqGray16_starGenType_PixOffset_doFn func(x, y int)

// MoqGray16_starGenType_PixOffset_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Gray16_starGenType type
type MoqGray16_starGenType_PixOffset_doReturnFn func(x, y int) int

// MoqGray16_starGenType_PixOffset_results holds the results of the
// Gray16_starGenType type
type MoqGray16_starGenType_PixOffset_results struct {
	Params  MoqGray16_starGenType_PixOffset_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_PixOffset_doFn
		DoReturnFn MoqGray16_starGenType_PixOffset_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqGray16_starGenType_PixOffset_fnRecorder routes recorded function calls to
// the MoqGray16_starGenType moq
type MoqGray16_starGenType_PixOffset_fnRecorder struct {
	Params    MoqGray16_starGenType_PixOffset_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqGray16_starGenType_PixOffset_results
	Moq       *MoqGray16_starGenType
}

// MoqGray16_starGenType_PixOffset_anyParams isolates the any params functions
// of the Gray16_starGenType type
type MoqGray16_starGenType_PixOffset_anyParams struct {
	Recorder *MoqGray16_starGenType_PixOffset_fnRecorder
}

// MoqGray16_starGenType_Set_params holds the params of the Gray16_starGenType
// type
type MoqGray16_starGenType_Set_params struct {
	X, Y int
	C    color.Color
}

// MoqGray16_starGenType_Set_paramsKey holds the map key params of the
// Gray16_starGenType type
type MoqGray16_starGenType_Set_paramsKey struct {
	Params struct {
		X, Y int
		C    color.Color
	}
	Hashes struct {
		X, Y hash.Hash
		C    hash.Hash
	}
}

// MoqGray16_starGenType_Set_resultsByParams contains the results for a given
// set of parameters for the Gray16_starGenType type
type MoqGray16_starGenType_Set_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqGray16_starGenType_Set_paramsKey]*MoqGray16_starGenType_Set_results
}

// MoqGray16_starGenType_Set_doFn defines the type of function needed when
// calling AndDo for the Gray16_starGenType type
type MoqGray16_starGenType_Set_doFn func(x, y int, c color.Color)

// MoqGray16_starGenType_Set_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Gray16_starGenType type
type MoqGray16_starGenType_Set_doReturnFn func(x, y int, c color.Color)

// MoqGray16_starGenType_Set_results holds the results of the
// Gray16_starGenType type
type MoqGray16_starGenType_Set_results struct {
	Params  MoqGray16_starGenType_Set_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_Set_doFn
		DoReturnFn MoqGray16_starGenType_Set_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqGray16_starGenType_Set_fnRecorder routes recorded function calls to the
// MoqGray16_starGenType moq
type MoqGray16_starGenType_Set_fnRecorder struct {
	Params    MoqGray16_starGenType_Set_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqGray16_starGenType_Set_results
	Moq       *MoqGray16_starGenType
}

// MoqGray16_starGenType_Set_anyParams isolates the any params functions of the
// Gray16_starGenType type
type MoqGray16_starGenType_Set_anyParams struct {
	Recorder *MoqGray16_starGenType_Set_fnRecorder
}

// MoqGray16_starGenType_SetRGBA64_params holds the params of the
// Gray16_starGenType type
type MoqGray16_starGenType_SetRGBA64_params struct {
	X, Y int
	C    color.RGBA64
}

// MoqGray16_starGenType_SetRGBA64_paramsKey holds the map key params of the
// Gray16_starGenType type
type MoqGray16_starGenType_SetRGBA64_paramsKey struct {
	Params struct {
		X, Y int
		C    color.RGBA64
	}
	Hashes struct {
		X, Y hash.Hash
		C    hash.Hash
	}
}

// MoqGray16_starGenType_SetRGBA64_resultsByParams contains the results for a
// given set of parameters for the Gray16_starGenType type
type MoqGray16_starGenType_SetRGBA64_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqGray16_starGenType_SetRGBA64_paramsKey]*MoqGray16_starGenType_SetRGBA64_results
}

// MoqGray16_starGenType_SetRGBA64_doFn defines the type of function needed
// when calling AndDo for the Gray16_starGenType type
type MoqGray16_starGenType_SetRGBA64_doFn func(x, y int, c color.RGBA64)

// MoqGray16_starGenType_SetRGBA64_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Gray16_starGenType type
type MoqGray16_starGenType_SetRGBA64_doReturnFn func(x, y int, c color.RGBA64)

// MoqGray16_starGenType_SetRGBA64_results holds the results of the
// Gray16_starGenType type
type MoqGray16_starGenType_SetRGBA64_results struct {
	Params  MoqGray16_starGenType_SetRGBA64_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_SetRGBA64_doFn
		DoReturnFn MoqGray16_starGenType_SetRGBA64_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqGray16_starGenType_SetRGBA64_fnRecorder routes recorded function calls to
// the MoqGray16_starGenType moq
type MoqGray16_starGenType_SetRGBA64_fnRecorder struct {
	Params    MoqGray16_starGenType_SetRGBA64_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqGray16_starGenType_SetRGBA64_results
	Moq       *MoqGray16_starGenType
}

// MoqGray16_starGenType_SetRGBA64_anyParams isolates the any params functions
// of the Gray16_starGenType type
type MoqGray16_starGenType_SetRGBA64_anyParams struct {
	Recorder *MoqGray16_starGenType_SetRGBA64_fnRecorder
}

// MoqGray16_starGenType_SetGray16_params holds the params of the
// Gray16_starGenType type
type MoqGray16_starGenType_SetGray16_params struct {
	X, Y int
	C    color.Gray16
}

// MoqGray16_starGenType_SetGray16_paramsKey holds the map key params of the
// Gray16_starGenType type
type MoqGray16_starGenType_SetGray16_paramsKey struct {
	Params struct {
		X, Y int
		C    color.Gray16
	}
	Hashes struct {
		X, Y hash.Hash
		C    hash.Hash
	}
}

// MoqGray16_starGenType_SetGray16_resultsByParams contains the results for a
// given set of parameters for the Gray16_starGenType type
type MoqGray16_starGenType_SetGray16_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqGray16_starGenType_SetGray16_paramsKey]*MoqGray16_starGenType_SetGray16_results
}

// MoqGray16_starGenType_SetGray16_doFn defines the type of function needed
// when calling AndDo for the Gray16_starGenType type
type MoqGray16_starGenType_SetGray16_doFn func(x, y int, c color.Gray16)

// MoqGray16_starGenType_SetGray16_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Gray16_starGenType type
type MoqGray16_starGenType_SetGray16_doReturnFn func(x, y int, c color.Gray16)

// MoqGray16_starGenType_SetGray16_results holds the results of the
// Gray16_starGenType type
type MoqGray16_starGenType_SetGray16_results struct {
	Params  MoqGray16_starGenType_SetGray16_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_SetGray16_doFn
		DoReturnFn MoqGray16_starGenType_SetGray16_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqGray16_starGenType_SetGray16_fnRecorder routes recorded function calls to
// the MoqGray16_starGenType moq
type MoqGray16_starGenType_SetGray16_fnRecorder struct {
	Params    MoqGray16_starGenType_SetGray16_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqGray16_starGenType_SetGray16_results
	Moq       *MoqGray16_starGenType
}

// MoqGray16_starGenType_SetGray16_anyParams isolates the any params functions
// of the Gray16_starGenType type
type MoqGray16_starGenType_SetGray16_anyParams struct {
	Recorder *MoqGray16_starGenType_SetGray16_fnRecorder
}

// MoqGray16_starGenType_SubImage_params holds the params of the
// Gray16_starGenType type
type MoqGray16_starGenType_SubImage_params struct{ Param1 image.Rectangle }

// MoqGray16_starGenType_SubImage_paramsKey holds the map key params of the
// Gray16_starGenType type
type MoqGray16_starGenType_SubImage_paramsKey struct {
	Params struct{ Param1 image.Rectangle }
	Hashes struct{ Param1 hash.Hash }
}

// MoqGray16_starGenType_SubImage_resultsByParams contains the results for a
// given set of parameters for the Gray16_starGenType type
type MoqGray16_starGenType_SubImage_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqGray16_starGenType_SubImage_paramsKey]*MoqGray16_starGenType_SubImage_results
}

// MoqGray16_starGenType_SubImage_doFn defines the type of function needed when
// calling AndDo for the Gray16_starGenType type
type MoqGray16_starGenType_SubImage_doFn func(r image.Rectangle)

// MoqGray16_starGenType_SubImage_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Gray16_starGenType type
type MoqGray16_starGenType_SubImage_doReturnFn func(r image.Rectangle) image.Image

// MoqGray16_starGenType_SubImage_results holds the results of the
// Gray16_starGenType type
type MoqGray16_starGenType_SubImage_results struct {
	Params  MoqGray16_starGenType_SubImage_params
	Results []struct {
		Values *struct {
			Result1 image.Image
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_SubImage_doFn
		DoReturnFn MoqGray16_starGenType_SubImage_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqGray16_starGenType_SubImage_fnRecorder routes recorded function calls to
// the MoqGray16_starGenType moq
type MoqGray16_starGenType_SubImage_fnRecorder struct {
	Params    MoqGray16_starGenType_SubImage_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqGray16_starGenType_SubImage_results
	Moq       *MoqGray16_starGenType
}

// MoqGray16_starGenType_SubImage_anyParams isolates the any params functions
// of the Gray16_starGenType type
type MoqGray16_starGenType_SubImage_anyParams struct {
	Recorder *MoqGray16_starGenType_SubImage_fnRecorder
}

// MoqGray16_starGenType_Opaque_params holds the params of the
// Gray16_starGenType type
type MoqGray16_starGenType_Opaque_params struct{}

// MoqGray16_starGenType_Opaque_paramsKey holds the map key params of the
// Gray16_starGenType type
type MoqGray16_starGenType_Opaque_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqGray16_starGenType_Opaque_resultsByParams contains the results for a
// given set of parameters for the Gray16_starGenType type
type MoqGray16_starGenType_Opaque_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqGray16_starGenType_Opaque_paramsKey]*MoqGray16_starGenType_Opaque_results
}

// MoqGray16_starGenType_Opaque_doFn defines the type of function needed when
// calling AndDo for the Gray16_starGenType type
type MoqGray16_starGenType_Opaque_doFn func()

// MoqGray16_starGenType_Opaque_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Gray16_starGenType type
type MoqGray16_starGenType_Opaque_doReturnFn func() bool

// MoqGray16_starGenType_Opaque_results holds the results of the
// Gray16_starGenType type
type MoqGray16_starGenType_Opaque_results struct {
	Params  MoqGray16_starGenType_Opaque_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_Opaque_doFn
		DoReturnFn MoqGray16_starGenType_Opaque_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqGray16_starGenType_Opaque_fnRecorder routes recorded function calls to
// the MoqGray16_starGenType moq
type MoqGray16_starGenType_Opaque_fnRecorder struct {
	Params    MoqGray16_starGenType_Opaque_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqGray16_starGenType_Opaque_results
	Moq       *MoqGray16_starGenType
}

// MoqGray16_starGenType_Opaque_anyParams isolates the any params functions of
// the Gray16_starGenType type
type MoqGray16_starGenType_Opaque_anyParams struct {
	Recorder *MoqGray16_starGenType_Opaque_fnRecorder
}

// NewMoqGray16_starGenType creates a new moq of the Gray16_starGenType type
func NewMoqGray16_starGenType(scene *moq.Scene, config *moq.Config) *MoqGray16_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqGray16_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqGray16_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				ColorModel struct{}
				Bounds     struct{}
				At         struct {
					X moq.ParamIndexing
					Y moq.ParamIndexing
				}
				RGBA64At struct {
					X moq.ParamIndexing
					Y moq.ParamIndexing
				}
				Gray16At struct {
					X moq.ParamIndexing
					Y moq.ParamIndexing
				}
				PixOffset struct {
					X moq.ParamIndexing
					Y moq.ParamIndexing
				}
				Set struct {
					X moq.ParamIndexing
					Y moq.ParamIndexing
					C moq.ParamIndexing
				}
				SetRGBA64 struct {
					X moq.ParamIndexing
					Y moq.ParamIndexing
					C moq.ParamIndexing
				}
				SetGray16 struct {
					X moq.ParamIndexing
					Y moq.ParamIndexing
					C moq.ParamIndexing
				}
				SubImage struct {
					Param1 moq.ParamIndexing
				}
				Opaque struct{}
			}
		}{ParameterIndexing: struct {
			ColorModel struct{}
			Bounds     struct{}
			At         struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}
			RGBA64At struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}
			Gray16At struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}
			PixOffset struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}
			Set struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
				C moq.ParamIndexing
			}
			SetRGBA64 struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
				C moq.ParamIndexing
			}
			SetGray16 struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
				C moq.ParamIndexing
			}
			SubImage struct {
				Param1 moq.ParamIndexing
			}
			Opaque struct{}
		}{
			ColorModel: struct{}{},
			Bounds:     struct{}{},
			At: struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}{
				X: moq.ParamIndexByValue,
				Y: moq.ParamIndexByValue,
			},
			RGBA64At: struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}{
				X: moq.ParamIndexByValue,
				Y: moq.ParamIndexByValue,
			},
			Gray16At: struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}{
				X: moq.ParamIndexByValue,
				Y: moq.ParamIndexByValue,
			},
			PixOffset: struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}{
				X: moq.ParamIndexByValue,
				Y: moq.ParamIndexByValue,
			},
			Set: struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
				C moq.ParamIndexing
			}{
				X: moq.ParamIndexByValue,
				Y: moq.ParamIndexByValue,
				C: moq.ParamIndexByHash,
			},
			SetRGBA64: struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
				C moq.ParamIndexing
			}{
				X: moq.ParamIndexByValue,
				Y: moq.ParamIndexByValue,
				C: moq.ParamIndexByValue,
			},
			SetGray16: struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
				C moq.ParamIndexing
			}{
				X: moq.ParamIndexByValue,
				Y: moq.ParamIndexByValue,
				C: moq.ParamIndexByValue,
			},
			SubImage: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			Opaque: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Gray16_starGenType type
func (m *MoqGray16_starGenType) Mock() *MoqGray16_starGenType_mock { return m.Moq }

func (m *MoqGray16_starGenType_mock) ColorModel() (result1 color.Model) {
	m.Moq.Scene.T.Helper()
	params := MoqGray16_starGenType_ColorModel_params{}
	var results *MoqGray16_starGenType_ColorModel_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ColorModel {
		paramsKey := m.Moq.ParamsKey_ColorModel(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ColorModel(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ColorModel(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ColorModel(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqGray16_starGenType_mock) Bounds() (result1 image.Rectangle) {
	m.Moq.Scene.T.Helper()
	params := MoqGray16_starGenType_Bounds_params{}
	var results *MoqGray16_starGenType_Bounds_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Bounds {
		paramsKey := m.Moq.ParamsKey_Bounds(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Bounds(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Bounds(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Bounds(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqGray16_starGenType_mock) At(x, y int) (result1 color.Color) {
	m.Moq.Scene.T.Helper()
	params := MoqGray16_starGenType_At_params{
		X: x,
		Y: y,
	}
	var results *MoqGray16_starGenType_At_results
	for _, resultsByParams := range m.Moq.ResultsByParams_At {
		paramsKey := m.Moq.ParamsKey_At(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_At(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_At(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_At(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x, y)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(x, y)
	}
	return
}

func (m *MoqGray16_starGenType_mock) RGBA64At(x, y int) (result1 color.RGBA64) {
	m.Moq.Scene.T.Helper()
	params := MoqGray16_starGenType_RGBA64At_params{
		X: x,
		Y: y,
	}
	var results *MoqGray16_starGenType_RGBA64At_results
	for _, resultsByParams := range m.Moq.ResultsByParams_RGBA64At {
		paramsKey := m.Moq.ParamsKey_RGBA64At(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_RGBA64At(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_RGBA64At(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_RGBA64At(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x, y)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(x, y)
	}
	return
}

func (m *MoqGray16_starGenType_mock) Gray16At(x, y int) (result1 color.Gray16) {
	m.Moq.Scene.T.Helper()
	params := MoqGray16_starGenType_Gray16At_params{
		X: x,
		Y: y,
	}
	var results *MoqGray16_starGenType_Gray16At_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Gray16At {
		paramsKey := m.Moq.ParamsKey_Gray16At(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Gray16At(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Gray16At(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Gray16At(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x, y)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(x, y)
	}
	return
}

func (m *MoqGray16_starGenType_mock) PixOffset(x, y int) (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqGray16_starGenType_PixOffset_params{
		X: x,
		Y: y,
	}
	var results *MoqGray16_starGenType_PixOffset_results
	for _, resultsByParams := range m.Moq.ResultsByParams_PixOffset {
		paramsKey := m.Moq.ParamsKey_PixOffset(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_PixOffset(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_PixOffset(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_PixOffset(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x, y)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(x, y)
	}
	return
}

func (m *MoqGray16_starGenType_mock) Set(x, y int, c color.Color) {
	m.Moq.Scene.T.Helper()
	params := MoqGray16_starGenType_Set_params{
		X: x,
		Y: y,
		C: c,
	}
	var results *MoqGray16_starGenType_Set_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Set {
		paramsKey := m.Moq.ParamsKey_Set(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Set(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Set(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Set(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x, y, c)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(x, y, c)
	}
	return
}

func (m *MoqGray16_starGenType_mock) SetRGBA64(x, y int, c color.RGBA64) {
	m.Moq.Scene.T.Helper()
	params := MoqGray16_starGenType_SetRGBA64_params{
		X: x,
		Y: y,
		C: c,
	}
	var results *MoqGray16_starGenType_SetRGBA64_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetRGBA64 {
		paramsKey := m.Moq.ParamsKey_SetRGBA64(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetRGBA64(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetRGBA64(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetRGBA64(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x, y, c)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(x, y, c)
	}
	return
}

func (m *MoqGray16_starGenType_mock) SetGray16(x, y int, c color.Gray16) {
	m.Moq.Scene.T.Helper()
	params := MoqGray16_starGenType_SetGray16_params{
		X: x,
		Y: y,
		C: c,
	}
	var results *MoqGray16_starGenType_SetGray16_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetGray16 {
		paramsKey := m.Moq.ParamsKey_SetGray16(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetGray16(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetGray16(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetGray16(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x, y, c)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(x, y, c)
	}
	return
}

func (m *MoqGray16_starGenType_mock) SubImage(param1 image.Rectangle) (result1 image.Image) {
	m.Moq.Scene.T.Helper()
	params := MoqGray16_starGenType_SubImage_params{
		Param1: param1,
	}
	var results *MoqGray16_starGenType_SubImage_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SubImage {
		paramsKey := m.Moq.ParamsKey_SubImage(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SubImage(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SubImage(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SubImage(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqGray16_starGenType_mock) Opaque() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqGray16_starGenType_Opaque_params{}
	var results *MoqGray16_starGenType_Opaque_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Opaque {
		paramsKey := m.Moq.ParamsKey_Opaque(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Opaque(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Opaque(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Opaque(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Gray16_starGenType type
func (m *MoqGray16_starGenType) OnCall() *MoqGray16_starGenType_recorder {
	return &MoqGray16_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqGray16_starGenType_recorder) ColorModel() *MoqGray16_starGenType_ColorModel_fnRecorder {
	return &MoqGray16_starGenType_ColorModel_fnRecorder{
		Params:   MoqGray16_starGenType_ColorModel_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqGray16_starGenType_ColorModel_fnRecorder) Any() *MoqGray16_starGenType_ColorModel_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ColorModel(r.Params))
		return nil
	}
	return &MoqGray16_starGenType_ColorModel_anyParams{Recorder: r}
}

func (r *MoqGray16_starGenType_ColorModel_fnRecorder) Seq() *MoqGray16_starGenType_ColorModel_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ColorModel(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqGray16_starGenType_ColorModel_fnRecorder) NoSeq() *MoqGray16_starGenType_ColorModel_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ColorModel(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqGray16_starGenType_ColorModel_fnRecorder) ReturnResults(result1 color.Model) *MoqGray16_starGenType_ColorModel_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 color.Model
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_ColorModel_doFn
		DoReturnFn MoqGray16_starGenType_ColorModel_doReturnFn
	}{
		Values: &struct {
			Result1 color.Model
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqGray16_starGenType_ColorModel_fnRecorder) AndDo(fn MoqGray16_starGenType_ColorModel_doFn) *MoqGray16_starGenType_ColorModel_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqGray16_starGenType_ColorModel_fnRecorder) DoReturnResults(fn MoqGray16_starGenType_ColorModel_doReturnFn) *MoqGray16_starGenType_ColorModel_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 color.Model
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_ColorModel_doFn
		DoReturnFn MoqGray16_starGenType_ColorModel_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqGray16_starGenType_ColorModel_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqGray16_starGenType_ColorModel_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ColorModel {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqGray16_starGenType_ColorModel_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqGray16_starGenType_ColorModel_paramsKey]*MoqGray16_starGenType_ColorModel_results{},
		}
		r.Moq.ResultsByParams_ColorModel = append(r.Moq.ResultsByParams_ColorModel, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ColorModel) {
			copy(r.Moq.ResultsByParams_ColorModel[insertAt+1:], r.Moq.ResultsByParams_ColorModel[insertAt:0])
			r.Moq.ResultsByParams_ColorModel[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ColorModel(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqGray16_starGenType_ColorModel_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqGray16_starGenType_ColorModel_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqGray16_starGenType_ColorModel_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 color.Model
				}
				Sequence   uint32
				DoFn       MoqGray16_starGenType_ColorModel_doFn
				DoReturnFn MoqGray16_starGenType_ColorModel_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqGray16_starGenType) PrettyParams_ColorModel(params MoqGray16_starGenType_ColorModel_params) string {
	return fmt.Sprintf("ColorModel()")
}

func (m *MoqGray16_starGenType) ParamsKey_ColorModel(params MoqGray16_starGenType_ColorModel_params, anyParams uint64) MoqGray16_starGenType_ColorModel_paramsKey {
	m.Scene.T.Helper()
	return MoqGray16_starGenType_ColorModel_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqGray16_starGenType_recorder) Bounds() *MoqGray16_starGenType_Bounds_fnRecorder {
	return &MoqGray16_starGenType_Bounds_fnRecorder{
		Params:   MoqGray16_starGenType_Bounds_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqGray16_starGenType_Bounds_fnRecorder) Any() *MoqGray16_starGenType_Bounds_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bounds(r.Params))
		return nil
	}
	return &MoqGray16_starGenType_Bounds_anyParams{Recorder: r}
}

func (r *MoqGray16_starGenType_Bounds_fnRecorder) Seq() *MoqGray16_starGenType_Bounds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bounds(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqGray16_starGenType_Bounds_fnRecorder) NoSeq() *MoqGray16_starGenType_Bounds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bounds(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqGray16_starGenType_Bounds_fnRecorder) ReturnResults(result1 image.Rectangle) *MoqGray16_starGenType_Bounds_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 image.Rectangle
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_Bounds_doFn
		DoReturnFn MoqGray16_starGenType_Bounds_doReturnFn
	}{
		Values: &struct {
			Result1 image.Rectangle
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqGray16_starGenType_Bounds_fnRecorder) AndDo(fn MoqGray16_starGenType_Bounds_doFn) *MoqGray16_starGenType_Bounds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqGray16_starGenType_Bounds_fnRecorder) DoReturnResults(fn MoqGray16_starGenType_Bounds_doReturnFn) *MoqGray16_starGenType_Bounds_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 image.Rectangle
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_Bounds_doFn
		DoReturnFn MoqGray16_starGenType_Bounds_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqGray16_starGenType_Bounds_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqGray16_starGenType_Bounds_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Bounds {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqGray16_starGenType_Bounds_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqGray16_starGenType_Bounds_paramsKey]*MoqGray16_starGenType_Bounds_results{},
		}
		r.Moq.ResultsByParams_Bounds = append(r.Moq.ResultsByParams_Bounds, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Bounds) {
			copy(r.Moq.ResultsByParams_Bounds[insertAt+1:], r.Moq.ResultsByParams_Bounds[insertAt:0])
			r.Moq.ResultsByParams_Bounds[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Bounds(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqGray16_starGenType_Bounds_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqGray16_starGenType_Bounds_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqGray16_starGenType_Bounds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 image.Rectangle
				}
				Sequence   uint32
				DoFn       MoqGray16_starGenType_Bounds_doFn
				DoReturnFn MoqGray16_starGenType_Bounds_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqGray16_starGenType) PrettyParams_Bounds(params MoqGray16_starGenType_Bounds_params) string {
	return fmt.Sprintf("Bounds()")
}

func (m *MoqGray16_starGenType) ParamsKey_Bounds(params MoqGray16_starGenType_Bounds_params, anyParams uint64) MoqGray16_starGenType_Bounds_paramsKey {
	m.Scene.T.Helper()
	return MoqGray16_starGenType_Bounds_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqGray16_starGenType_recorder) At(x, y int) *MoqGray16_starGenType_At_fnRecorder {
	return &MoqGray16_starGenType_At_fnRecorder{
		Params: MoqGray16_starGenType_At_params{
			X: x,
			Y: y,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqGray16_starGenType_At_fnRecorder) Any() *MoqGray16_starGenType_At_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_At(r.Params))
		return nil
	}
	return &MoqGray16_starGenType_At_anyParams{Recorder: r}
}

func (a *MoqGray16_starGenType_At_anyParams) X() *MoqGray16_starGenType_At_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqGray16_starGenType_At_anyParams) Y() *MoqGray16_starGenType_At_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqGray16_starGenType_At_fnRecorder) Seq() *MoqGray16_starGenType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_At(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqGray16_starGenType_At_fnRecorder) NoSeq() *MoqGray16_starGenType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_At(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqGray16_starGenType_At_fnRecorder) ReturnResults(result1 color.Color) *MoqGray16_starGenType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 color.Color
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_At_doFn
		DoReturnFn MoqGray16_starGenType_At_doReturnFn
	}{
		Values: &struct {
			Result1 color.Color
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqGray16_starGenType_At_fnRecorder) AndDo(fn MoqGray16_starGenType_At_doFn) *MoqGray16_starGenType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqGray16_starGenType_At_fnRecorder) DoReturnResults(fn MoqGray16_starGenType_At_doReturnFn) *MoqGray16_starGenType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 color.Color
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_At_doFn
		DoReturnFn MoqGray16_starGenType_At_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqGray16_starGenType_At_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqGray16_starGenType_At_resultsByParams
	for n, res := range r.Moq.ResultsByParams_At {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqGray16_starGenType_At_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqGray16_starGenType_At_paramsKey]*MoqGray16_starGenType_At_results{},
		}
		r.Moq.ResultsByParams_At = append(r.Moq.ResultsByParams_At, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_At) {
			copy(r.Moq.ResultsByParams_At[insertAt+1:], r.Moq.ResultsByParams_At[insertAt:0])
			r.Moq.ResultsByParams_At[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_At(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqGray16_starGenType_At_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqGray16_starGenType_At_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqGray16_starGenType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 color.Color
				}
				Sequence   uint32
				DoFn       MoqGray16_starGenType_At_doFn
				DoReturnFn MoqGray16_starGenType_At_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqGray16_starGenType) PrettyParams_At(params MoqGray16_starGenType_At_params) string {
	return fmt.Sprintf("At(%#v, %#v)", params.X, params.Y)
}

func (m *MoqGray16_starGenType) ParamsKey_At(params MoqGray16_starGenType_At_params, anyParams uint64) MoqGray16_starGenType_At_paramsKey {
	m.Scene.T.Helper()
	var xUsed int
	var xUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.At.X == moq.ParamIndexByValue {
			xUsed = params.X
		} else {
			xUsedHash = hash.DeepHash(params.X)
		}
	}
	var yUsed int
	var yUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.At.Y == moq.ParamIndexByValue {
			yUsed = params.Y
		} else {
			yUsedHash = hash.DeepHash(params.Y)
		}
	}
	return MoqGray16_starGenType_At_paramsKey{
		Params: struct{ X, Y int }{
			X: xUsed,
			Y: yUsed,
		},
		Hashes: struct{ X, Y hash.Hash }{
			X: xUsedHash,
			Y: yUsedHash,
		},
	}
}

func (m *MoqGray16_starGenType_recorder) RGBA64At(x, y int) *MoqGray16_starGenType_RGBA64At_fnRecorder {
	return &MoqGray16_starGenType_RGBA64At_fnRecorder{
		Params: MoqGray16_starGenType_RGBA64At_params{
			X: x,
			Y: y,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqGray16_starGenType_RGBA64At_fnRecorder) Any() *MoqGray16_starGenType_RGBA64At_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RGBA64At(r.Params))
		return nil
	}
	return &MoqGray16_starGenType_RGBA64At_anyParams{Recorder: r}
}

func (a *MoqGray16_starGenType_RGBA64At_anyParams) X() *MoqGray16_starGenType_RGBA64At_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqGray16_starGenType_RGBA64At_anyParams) Y() *MoqGray16_starGenType_RGBA64At_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqGray16_starGenType_RGBA64At_fnRecorder) Seq() *MoqGray16_starGenType_RGBA64At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RGBA64At(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqGray16_starGenType_RGBA64At_fnRecorder) NoSeq() *MoqGray16_starGenType_RGBA64At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RGBA64At(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqGray16_starGenType_RGBA64At_fnRecorder) ReturnResults(result1 color.RGBA64) *MoqGray16_starGenType_RGBA64At_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 color.RGBA64
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_RGBA64At_doFn
		DoReturnFn MoqGray16_starGenType_RGBA64At_doReturnFn
	}{
		Values: &struct {
			Result1 color.RGBA64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqGray16_starGenType_RGBA64At_fnRecorder) AndDo(fn MoqGray16_starGenType_RGBA64At_doFn) *MoqGray16_starGenType_RGBA64At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqGray16_starGenType_RGBA64At_fnRecorder) DoReturnResults(fn MoqGray16_starGenType_RGBA64At_doReturnFn) *MoqGray16_starGenType_RGBA64At_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 color.RGBA64
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_RGBA64At_doFn
		DoReturnFn MoqGray16_starGenType_RGBA64At_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqGray16_starGenType_RGBA64At_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqGray16_starGenType_RGBA64At_resultsByParams
	for n, res := range r.Moq.ResultsByParams_RGBA64At {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqGray16_starGenType_RGBA64At_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqGray16_starGenType_RGBA64At_paramsKey]*MoqGray16_starGenType_RGBA64At_results{},
		}
		r.Moq.ResultsByParams_RGBA64At = append(r.Moq.ResultsByParams_RGBA64At, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_RGBA64At) {
			copy(r.Moq.ResultsByParams_RGBA64At[insertAt+1:], r.Moq.ResultsByParams_RGBA64At[insertAt:0])
			r.Moq.ResultsByParams_RGBA64At[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_RGBA64At(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqGray16_starGenType_RGBA64At_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqGray16_starGenType_RGBA64At_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqGray16_starGenType_RGBA64At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 color.RGBA64
				}
				Sequence   uint32
				DoFn       MoqGray16_starGenType_RGBA64At_doFn
				DoReturnFn MoqGray16_starGenType_RGBA64At_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqGray16_starGenType) PrettyParams_RGBA64At(params MoqGray16_starGenType_RGBA64At_params) string {
	return fmt.Sprintf("RGBA64At(%#v, %#v)", params.X, params.Y)
}

func (m *MoqGray16_starGenType) ParamsKey_RGBA64At(params MoqGray16_starGenType_RGBA64At_params, anyParams uint64) MoqGray16_starGenType_RGBA64At_paramsKey {
	m.Scene.T.Helper()
	var xUsed int
	var xUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.RGBA64At.X == moq.ParamIndexByValue {
			xUsed = params.X
		} else {
			xUsedHash = hash.DeepHash(params.X)
		}
	}
	var yUsed int
	var yUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.RGBA64At.Y == moq.ParamIndexByValue {
			yUsed = params.Y
		} else {
			yUsedHash = hash.DeepHash(params.Y)
		}
	}
	return MoqGray16_starGenType_RGBA64At_paramsKey{
		Params: struct{ X, Y int }{
			X: xUsed,
			Y: yUsed,
		},
		Hashes: struct{ X, Y hash.Hash }{
			X: xUsedHash,
			Y: yUsedHash,
		},
	}
}

func (m *MoqGray16_starGenType_recorder) Gray16At(x, y int) *MoqGray16_starGenType_Gray16At_fnRecorder {
	return &MoqGray16_starGenType_Gray16At_fnRecorder{
		Params: MoqGray16_starGenType_Gray16At_params{
			X: x,
			Y: y,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqGray16_starGenType_Gray16At_fnRecorder) Any() *MoqGray16_starGenType_Gray16At_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Gray16At(r.Params))
		return nil
	}
	return &MoqGray16_starGenType_Gray16At_anyParams{Recorder: r}
}

func (a *MoqGray16_starGenType_Gray16At_anyParams) X() *MoqGray16_starGenType_Gray16At_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqGray16_starGenType_Gray16At_anyParams) Y() *MoqGray16_starGenType_Gray16At_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqGray16_starGenType_Gray16At_fnRecorder) Seq() *MoqGray16_starGenType_Gray16At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Gray16At(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqGray16_starGenType_Gray16At_fnRecorder) NoSeq() *MoqGray16_starGenType_Gray16At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Gray16At(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqGray16_starGenType_Gray16At_fnRecorder) ReturnResults(result1 color.Gray16) *MoqGray16_starGenType_Gray16At_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 color.Gray16
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_Gray16At_doFn
		DoReturnFn MoqGray16_starGenType_Gray16At_doReturnFn
	}{
		Values: &struct {
			Result1 color.Gray16
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqGray16_starGenType_Gray16At_fnRecorder) AndDo(fn MoqGray16_starGenType_Gray16At_doFn) *MoqGray16_starGenType_Gray16At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqGray16_starGenType_Gray16At_fnRecorder) DoReturnResults(fn MoqGray16_starGenType_Gray16At_doReturnFn) *MoqGray16_starGenType_Gray16At_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 color.Gray16
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_Gray16At_doFn
		DoReturnFn MoqGray16_starGenType_Gray16At_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqGray16_starGenType_Gray16At_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqGray16_starGenType_Gray16At_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Gray16At {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqGray16_starGenType_Gray16At_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqGray16_starGenType_Gray16At_paramsKey]*MoqGray16_starGenType_Gray16At_results{},
		}
		r.Moq.ResultsByParams_Gray16At = append(r.Moq.ResultsByParams_Gray16At, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Gray16At) {
			copy(r.Moq.ResultsByParams_Gray16At[insertAt+1:], r.Moq.ResultsByParams_Gray16At[insertAt:0])
			r.Moq.ResultsByParams_Gray16At[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Gray16At(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqGray16_starGenType_Gray16At_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqGray16_starGenType_Gray16At_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqGray16_starGenType_Gray16At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 color.Gray16
				}
				Sequence   uint32
				DoFn       MoqGray16_starGenType_Gray16At_doFn
				DoReturnFn MoqGray16_starGenType_Gray16At_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqGray16_starGenType) PrettyParams_Gray16At(params MoqGray16_starGenType_Gray16At_params) string {
	return fmt.Sprintf("Gray16At(%#v, %#v)", params.X, params.Y)
}

func (m *MoqGray16_starGenType) ParamsKey_Gray16At(params MoqGray16_starGenType_Gray16At_params, anyParams uint64) MoqGray16_starGenType_Gray16At_paramsKey {
	m.Scene.T.Helper()
	var xUsed int
	var xUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Gray16At.X == moq.ParamIndexByValue {
			xUsed = params.X
		} else {
			xUsedHash = hash.DeepHash(params.X)
		}
	}
	var yUsed int
	var yUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Gray16At.Y == moq.ParamIndexByValue {
			yUsed = params.Y
		} else {
			yUsedHash = hash.DeepHash(params.Y)
		}
	}
	return MoqGray16_starGenType_Gray16At_paramsKey{
		Params: struct{ X, Y int }{
			X: xUsed,
			Y: yUsed,
		},
		Hashes: struct{ X, Y hash.Hash }{
			X: xUsedHash,
			Y: yUsedHash,
		},
	}
}

func (m *MoqGray16_starGenType_recorder) PixOffset(x, y int) *MoqGray16_starGenType_PixOffset_fnRecorder {
	return &MoqGray16_starGenType_PixOffset_fnRecorder{
		Params: MoqGray16_starGenType_PixOffset_params{
			X: x,
			Y: y,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqGray16_starGenType_PixOffset_fnRecorder) Any() *MoqGray16_starGenType_PixOffset_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PixOffset(r.Params))
		return nil
	}
	return &MoqGray16_starGenType_PixOffset_anyParams{Recorder: r}
}

func (a *MoqGray16_starGenType_PixOffset_anyParams) X() *MoqGray16_starGenType_PixOffset_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqGray16_starGenType_PixOffset_anyParams) Y() *MoqGray16_starGenType_PixOffset_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqGray16_starGenType_PixOffset_fnRecorder) Seq() *MoqGray16_starGenType_PixOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PixOffset(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqGray16_starGenType_PixOffset_fnRecorder) NoSeq() *MoqGray16_starGenType_PixOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PixOffset(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqGray16_starGenType_PixOffset_fnRecorder) ReturnResults(result1 int) *MoqGray16_starGenType_PixOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_PixOffset_doFn
		DoReturnFn MoqGray16_starGenType_PixOffset_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqGray16_starGenType_PixOffset_fnRecorder) AndDo(fn MoqGray16_starGenType_PixOffset_doFn) *MoqGray16_starGenType_PixOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqGray16_starGenType_PixOffset_fnRecorder) DoReturnResults(fn MoqGray16_starGenType_PixOffset_doReturnFn) *MoqGray16_starGenType_PixOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_PixOffset_doFn
		DoReturnFn MoqGray16_starGenType_PixOffset_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqGray16_starGenType_PixOffset_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqGray16_starGenType_PixOffset_resultsByParams
	for n, res := range r.Moq.ResultsByParams_PixOffset {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqGray16_starGenType_PixOffset_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqGray16_starGenType_PixOffset_paramsKey]*MoqGray16_starGenType_PixOffset_results{},
		}
		r.Moq.ResultsByParams_PixOffset = append(r.Moq.ResultsByParams_PixOffset, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_PixOffset) {
			copy(r.Moq.ResultsByParams_PixOffset[insertAt+1:], r.Moq.ResultsByParams_PixOffset[insertAt:0])
			r.Moq.ResultsByParams_PixOffset[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_PixOffset(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqGray16_starGenType_PixOffset_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqGray16_starGenType_PixOffset_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqGray16_starGenType_PixOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqGray16_starGenType_PixOffset_doFn
				DoReturnFn MoqGray16_starGenType_PixOffset_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqGray16_starGenType) PrettyParams_PixOffset(params MoqGray16_starGenType_PixOffset_params) string {
	return fmt.Sprintf("PixOffset(%#v, %#v)", params.X, params.Y)
}

func (m *MoqGray16_starGenType) ParamsKey_PixOffset(params MoqGray16_starGenType_PixOffset_params, anyParams uint64) MoqGray16_starGenType_PixOffset_paramsKey {
	m.Scene.T.Helper()
	var xUsed int
	var xUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.PixOffset.X == moq.ParamIndexByValue {
			xUsed = params.X
		} else {
			xUsedHash = hash.DeepHash(params.X)
		}
	}
	var yUsed int
	var yUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.PixOffset.Y == moq.ParamIndexByValue {
			yUsed = params.Y
		} else {
			yUsedHash = hash.DeepHash(params.Y)
		}
	}
	return MoqGray16_starGenType_PixOffset_paramsKey{
		Params: struct{ X, Y int }{
			X: xUsed,
			Y: yUsed,
		},
		Hashes: struct{ X, Y hash.Hash }{
			X: xUsedHash,
			Y: yUsedHash,
		},
	}
}

func (m *MoqGray16_starGenType_recorder) Set(x, y int, c color.Color) *MoqGray16_starGenType_Set_fnRecorder {
	return &MoqGray16_starGenType_Set_fnRecorder{
		Params: MoqGray16_starGenType_Set_params{
			X: x,
			Y: y,
			C: c,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqGray16_starGenType_Set_fnRecorder) Any() *MoqGray16_starGenType_Set_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	return &MoqGray16_starGenType_Set_anyParams{Recorder: r}
}

func (a *MoqGray16_starGenType_Set_anyParams) X() *MoqGray16_starGenType_Set_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqGray16_starGenType_Set_anyParams) Y() *MoqGray16_starGenType_Set_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqGray16_starGenType_Set_anyParams) C() *MoqGray16_starGenType_Set_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqGray16_starGenType_Set_fnRecorder) Seq() *MoqGray16_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqGray16_starGenType_Set_fnRecorder) NoSeq() *MoqGray16_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqGray16_starGenType_Set_fnRecorder) ReturnResults() *MoqGray16_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_Set_doFn
		DoReturnFn MoqGray16_starGenType_Set_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqGray16_starGenType_Set_fnRecorder) AndDo(fn MoqGray16_starGenType_Set_doFn) *MoqGray16_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqGray16_starGenType_Set_fnRecorder) DoReturnResults(fn MoqGray16_starGenType_Set_doReturnFn) *MoqGray16_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_Set_doFn
		DoReturnFn MoqGray16_starGenType_Set_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqGray16_starGenType_Set_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqGray16_starGenType_Set_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Set {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqGray16_starGenType_Set_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqGray16_starGenType_Set_paramsKey]*MoqGray16_starGenType_Set_results{},
		}
		r.Moq.ResultsByParams_Set = append(r.Moq.ResultsByParams_Set, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Set) {
			copy(r.Moq.ResultsByParams_Set[insertAt+1:], r.Moq.ResultsByParams_Set[insertAt:0])
			r.Moq.ResultsByParams_Set[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Set(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqGray16_starGenType_Set_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqGray16_starGenType_Set_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqGray16_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqGray16_starGenType_Set_doFn
				DoReturnFn MoqGray16_starGenType_Set_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqGray16_starGenType) PrettyParams_Set(params MoqGray16_starGenType_Set_params) string {
	return fmt.Sprintf("Set(%#v, %#v, %#v)", params.X, params.Y, params.C)
}

func (m *MoqGray16_starGenType) ParamsKey_Set(params MoqGray16_starGenType_Set_params, anyParams uint64) MoqGray16_starGenType_Set_paramsKey {
	m.Scene.T.Helper()
	var xUsed int
	var xUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Set.X == moq.ParamIndexByValue {
			xUsed = params.X
		} else {
			xUsedHash = hash.DeepHash(params.X)
		}
	}
	var yUsed int
	var yUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Set.Y == moq.ParamIndexByValue {
			yUsed = params.Y
		} else {
			yUsedHash = hash.DeepHash(params.Y)
		}
	}
	var cUsed color.Color
	var cUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Set.C == moq.ParamIndexByValue {
			cUsed = params.C
		} else {
			cUsedHash = hash.DeepHash(params.C)
		}
	}
	return MoqGray16_starGenType_Set_paramsKey{
		Params: struct {
			X, Y int
			C    color.Color
		}{
			X: xUsed,
			Y: yUsed,
			C: cUsed,
		},
		Hashes: struct {
			X, Y hash.Hash
			C    hash.Hash
		}{
			X: xUsedHash,
			Y: yUsedHash,
			C: cUsedHash,
		},
	}
}

func (m *MoqGray16_starGenType_recorder) SetRGBA64(x, y int, c color.RGBA64) *MoqGray16_starGenType_SetRGBA64_fnRecorder {
	return &MoqGray16_starGenType_SetRGBA64_fnRecorder{
		Params: MoqGray16_starGenType_SetRGBA64_params{
			X: x,
			Y: y,
			C: c,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqGray16_starGenType_SetRGBA64_fnRecorder) Any() *MoqGray16_starGenType_SetRGBA64_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetRGBA64(r.Params))
		return nil
	}
	return &MoqGray16_starGenType_SetRGBA64_anyParams{Recorder: r}
}

func (a *MoqGray16_starGenType_SetRGBA64_anyParams) X() *MoqGray16_starGenType_SetRGBA64_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqGray16_starGenType_SetRGBA64_anyParams) Y() *MoqGray16_starGenType_SetRGBA64_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqGray16_starGenType_SetRGBA64_anyParams) C() *MoqGray16_starGenType_SetRGBA64_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqGray16_starGenType_SetRGBA64_fnRecorder) Seq() *MoqGray16_starGenType_SetRGBA64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetRGBA64(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqGray16_starGenType_SetRGBA64_fnRecorder) NoSeq() *MoqGray16_starGenType_SetRGBA64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetRGBA64(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqGray16_starGenType_SetRGBA64_fnRecorder) ReturnResults() *MoqGray16_starGenType_SetRGBA64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_SetRGBA64_doFn
		DoReturnFn MoqGray16_starGenType_SetRGBA64_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqGray16_starGenType_SetRGBA64_fnRecorder) AndDo(fn MoqGray16_starGenType_SetRGBA64_doFn) *MoqGray16_starGenType_SetRGBA64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqGray16_starGenType_SetRGBA64_fnRecorder) DoReturnResults(fn MoqGray16_starGenType_SetRGBA64_doReturnFn) *MoqGray16_starGenType_SetRGBA64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_SetRGBA64_doFn
		DoReturnFn MoqGray16_starGenType_SetRGBA64_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqGray16_starGenType_SetRGBA64_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqGray16_starGenType_SetRGBA64_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetRGBA64 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqGray16_starGenType_SetRGBA64_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqGray16_starGenType_SetRGBA64_paramsKey]*MoqGray16_starGenType_SetRGBA64_results{},
		}
		r.Moq.ResultsByParams_SetRGBA64 = append(r.Moq.ResultsByParams_SetRGBA64, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetRGBA64) {
			copy(r.Moq.ResultsByParams_SetRGBA64[insertAt+1:], r.Moq.ResultsByParams_SetRGBA64[insertAt:0])
			r.Moq.ResultsByParams_SetRGBA64[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetRGBA64(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqGray16_starGenType_SetRGBA64_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqGray16_starGenType_SetRGBA64_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqGray16_starGenType_SetRGBA64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqGray16_starGenType_SetRGBA64_doFn
				DoReturnFn MoqGray16_starGenType_SetRGBA64_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqGray16_starGenType) PrettyParams_SetRGBA64(params MoqGray16_starGenType_SetRGBA64_params) string {
	return fmt.Sprintf("SetRGBA64(%#v, %#v, %#v)", params.X, params.Y, params.C)
}

func (m *MoqGray16_starGenType) ParamsKey_SetRGBA64(params MoqGray16_starGenType_SetRGBA64_params, anyParams uint64) MoqGray16_starGenType_SetRGBA64_paramsKey {
	m.Scene.T.Helper()
	var xUsed int
	var xUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetRGBA64.X == moq.ParamIndexByValue {
			xUsed = params.X
		} else {
			xUsedHash = hash.DeepHash(params.X)
		}
	}
	var yUsed int
	var yUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.SetRGBA64.Y == moq.ParamIndexByValue {
			yUsed = params.Y
		} else {
			yUsedHash = hash.DeepHash(params.Y)
		}
	}
	var cUsed color.RGBA64
	var cUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.SetRGBA64.C == moq.ParamIndexByValue {
			cUsed = params.C
		} else {
			cUsedHash = hash.DeepHash(params.C)
		}
	}
	return MoqGray16_starGenType_SetRGBA64_paramsKey{
		Params: struct {
			X, Y int
			C    color.RGBA64
		}{
			X: xUsed,
			Y: yUsed,
			C: cUsed,
		},
		Hashes: struct {
			X, Y hash.Hash
			C    hash.Hash
		}{
			X: xUsedHash,
			Y: yUsedHash,
			C: cUsedHash,
		},
	}
}

func (m *MoqGray16_starGenType_recorder) SetGray16(x, y int, c color.Gray16) *MoqGray16_starGenType_SetGray16_fnRecorder {
	return &MoqGray16_starGenType_SetGray16_fnRecorder{
		Params: MoqGray16_starGenType_SetGray16_params{
			X: x,
			Y: y,
			C: c,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqGray16_starGenType_SetGray16_fnRecorder) Any() *MoqGray16_starGenType_SetGray16_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetGray16(r.Params))
		return nil
	}
	return &MoqGray16_starGenType_SetGray16_anyParams{Recorder: r}
}

func (a *MoqGray16_starGenType_SetGray16_anyParams) X() *MoqGray16_starGenType_SetGray16_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqGray16_starGenType_SetGray16_anyParams) Y() *MoqGray16_starGenType_SetGray16_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqGray16_starGenType_SetGray16_anyParams) C() *MoqGray16_starGenType_SetGray16_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqGray16_starGenType_SetGray16_fnRecorder) Seq() *MoqGray16_starGenType_SetGray16_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetGray16(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqGray16_starGenType_SetGray16_fnRecorder) NoSeq() *MoqGray16_starGenType_SetGray16_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetGray16(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqGray16_starGenType_SetGray16_fnRecorder) ReturnResults() *MoqGray16_starGenType_SetGray16_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_SetGray16_doFn
		DoReturnFn MoqGray16_starGenType_SetGray16_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqGray16_starGenType_SetGray16_fnRecorder) AndDo(fn MoqGray16_starGenType_SetGray16_doFn) *MoqGray16_starGenType_SetGray16_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqGray16_starGenType_SetGray16_fnRecorder) DoReturnResults(fn MoqGray16_starGenType_SetGray16_doReturnFn) *MoqGray16_starGenType_SetGray16_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_SetGray16_doFn
		DoReturnFn MoqGray16_starGenType_SetGray16_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqGray16_starGenType_SetGray16_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqGray16_starGenType_SetGray16_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetGray16 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqGray16_starGenType_SetGray16_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqGray16_starGenType_SetGray16_paramsKey]*MoqGray16_starGenType_SetGray16_results{},
		}
		r.Moq.ResultsByParams_SetGray16 = append(r.Moq.ResultsByParams_SetGray16, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetGray16) {
			copy(r.Moq.ResultsByParams_SetGray16[insertAt+1:], r.Moq.ResultsByParams_SetGray16[insertAt:0])
			r.Moq.ResultsByParams_SetGray16[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetGray16(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqGray16_starGenType_SetGray16_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqGray16_starGenType_SetGray16_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqGray16_starGenType_SetGray16_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqGray16_starGenType_SetGray16_doFn
				DoReturnFn MoqGray16_starGenType_SetGray16_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqGray16_starGenType) PrettyParams_SetGray16(params MoqGray16_starGenType_SetGray16_params) string {
	return fmt.Sprintf("SetGray16(%#v, %#v, %#v)", params.X, params.Y, params.C)
}

func (m *MoqGray16_starGenType) ParamsKey_SetGray16(params MoqGray16_starGenType_SetGray16_params, anyParams uint64) MoqGray16_starGenType_SetGray16_paramsKey {
	m.Scene.T.Helper()
	var xUsed int
	var xUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetGray16.X == moq.ParamIndexByValue {
			xUsed = params.X
		} else {
			xUsedHash = hash.DeepHash(params.X)
		}
	}
	var yUsed int
	var yUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.SetGray16.Y == moq.ParamIndexByValue {
			yUsed = params.Y
		} else {
			yUsedHash = hash.DeepHash(params.Y)
		}
	}
	var cUsed color.Gray16
	var cUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.SetGray16.C == moq.ParamIndexByValue {
			cUsed = params.C
		} else {
			cUsedHash = hash.DeepHash(params.C)
		}
	}
	return MoqGray16_starGenType_SetGray16_paramsKey{
		Params: struct {
			X, Y int
			C    color.Gray16
		}{
			X: xUsed,
			Y: yUsed,
			C: cUsed,
		},
		Hashes: struct {
			X, Y hash.Hash
			C    hash.Hash
		}{
			X: xUsedHash,
			Y: yUsedHash,
			C: cUsedHash,
		},
	}
}

func (m *MoqGray16_starGenType_recorder) SubImage(param1 image.Rectangle) *MoqGray16_starGenType_SubImage_fnRecorder {
	return &MoqGray16_starGenType_SubImage_fnRecorder{
		Params: MoqGray16_starGenType_SubImage_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqGray16_starGenType_SubImage_fnRecorder) Any() *MoqGray16_starGenType_SubImage_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SubImage(r.Params))
		return nil
	}
	return &MoqGray16_starGenType_SubImage_anyParams{Recorder: r}
}

func (a *MoqGray16_starGenType_SubImage_anyParams) Param1() *MoqGray16_starGenType_SubImage_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqGray16_starGenType_SubImage_fnRecorder) Seq() *MoqGray16_starGenType_SubImage_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SubImage(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqGray16_starGenType_SubImage_fnRecorder) NoSeq() *MoqGray16_starGenType_SubImage_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SubImage(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqGray16_starGenType_SubImage_fnRecorder) ReturnResults(result1 image.Image) *MoqGray16_starGenType_SubImage_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 image.Image
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_SubImage_doFn
		DoReturnFn MoqGray16_starGenType_SubImage_doReturnFn
	}{
		Values: &struct {
			Result1 image.Image
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqGray16_starGenType_SubImage_fnRecorder) AndDo(fn MoqGray16_starGenType_SubImage_doFn) *MoqGray16_starGenType_SubImage_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqGray16_starGenType_SubImage_fnRecorder) DoReturnResults(fn MoqGray16_starGenType_SubImage_doReturnFn) *MoqGray16_starGenType_SubImage_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 image.Image
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_SubImage_doFn
		DoReturnFn MoqGray16_starGenType_SubImage_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqGray16_starGenType_SubImage_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqGray16_starGenType_SubImage_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SubImage {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqGray16_starGenType_SubImage_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqGray16_starGenType_SubImage_paramsKey]*MoqGray16_starGenType_SubImage_results{},
		}
		r.Moq.ResultsByParams_SubImage = append(r.Moq.ResultsByParams_SubImage, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SubImage) {
			copy(r.Moq.ResultsByParams_SubImage[insertAt+1:], r.Moq.ResultsByParams_SubImage[insertAt:0])
			r.Moq.ResultsByParams_SubImage[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SubImage(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqGray16_starGenType_SubImage_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqGray16_starGenType_SubImage_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqGray16_starGenType_SubImage_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 image.Image
				}
				Sequence   uint32
				DoFn       MoqGray16_starGenType_SubImage_doFn
				DoReturnFn MoqGray16_starGenType_SubImage_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqGray16_starGenType) PrettyParams_SubImage(params MoqGray16_starGenType_SubImage_params) string {
	return fmt.Sprintf("SubImage(%#v)", params.Param1)
}

func (m *MoqGray16_starGenType) ParamsKey_SubImage(params MoqGray16_starGenType_SubImage_params, anyParams uint64) MoqGray16_starGenType_SubImage_paramsKey {
	m.Scene.T.Helper()
	var param1Used image.Rectangle
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SubImage.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqGray16_starGenType_SubImage_paramsKey{
		Params: struct{ Param1 image.Rectangle }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqGray16_starGenType_recorder) Opaque() *MoqGray16_starGenType_Opaque_fnRecorder {
	return &MoqGray16_starGenType_Opaque_fnRecorder{
		Params:   MoqGray16_starGenType_Opaque_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqGray16_starGenType_Opaque_fnRecorder) Any() *MoqGray16_starGenType_Opaque_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Opaque(r.Params))
		return nil
	}
	return &MoqGray16_starGenType_Opaque_anyParams{Recorder: r}
}

func (r *MoqGray16_starGenType_Opaque_fnRecorder) Seq() *MoqGray16_starGenType_Opaque_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Opaque(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqGray16_starGenType_Opaque_fnRecorder) NoSeq() *MoqGray16_starGenType_Opaque_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Opaque(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqGray16_starGenType_Opaque_fnRecorder) ReturnResults(result1 bool) *MoqGray16_starGenType_Opaque_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_Opaque_doFn
		DoReturnFn MoqGray16_starGenType_Opaque_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqGray16_starGenType_Opaque_fnRecorder) AndDo(fn MoqGray16_starGenType_Opaque_doFn) *MoqGray16_starGenType_Opaque_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqGray16_starGenType_Opaque_fnRecorder) DoReturnResults(fn MoqGray16_starGenType_Opaque_doReturnFn) *MoqGray16_starGenType_Opaque_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqGray16_starGenType_Opaque_doFn
		DoReturnFn MoqGray16_starGenType_Opaque_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqGray16_starGenType_Opaque_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqGray16_starGenType_Opaque_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Opaque {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqGray16_starGenType_Opaque_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqGray16_starGenType_Opaque_paramsKey]*MoqGray16_starGenType_Opaque_results{},
		}
		r.Moq.ResultsByParams_Opaque = append(r.Moq.ResultsByParams_Opaque, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Opaque) {
			copy(r.Moq.ResultsByParams_Opaque[insertAt+1:], r.Moq.ResultsByParams_Opaque[insertAt:0])
			r.Moq.ResultsByParams_Opaque[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Opaque(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqGray16_starGenType_Opaque_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqGray16_starGenType_Opaque_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqGray16_starGenType_Opaque_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqGray16_starGenType_Opaque_doFn
				DoReturnFn MoqGray16_starGenType_Opaque_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqGray16_starGenType) PrettyParams_Opaque(params MoqGray16_starGenType_Opaque_params) string {
	return fmt.Sprintf("Opaque()")
}

func (m *MoqGray16_starGenType) ParamsKey_Opaque(params MoqGray16_starGenType_Opaque_params, anyParams uint64) MoqGray16_starGenType_Opaque_paramsKey {
	m.Scene.T.Helper()
	return MoqGray16_starGenType_Opaque_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqGray16_starGenType) Reset() {
	m.ResultsByParams_ColorModel = nil
	m.ResultsByParams_Bounds = nil
	m.ResultsByParams_At = nil
	m.ResultsByParams_RGBA64At = nil
	m.ResultsByParams_Gray16At = nil
	m.ResultsByParams_PixOffset = nil
	m.ResultsByParams_Set = nil
	m.ResultsByParams_SetRGBA64 = nil
	m.ResultsByParams_SetGray16 = nil
	m.ResultsByParams_SubImage = nil
	m.ResultsByParams_Opaque = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqGray16_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_ColorModel {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ColorModel(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Bounds {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Bounds(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_At {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_At(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_RGBA64At {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_RGBA64At(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Gray16At {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Gray16At(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_PixOffset {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_PixOffset(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Set {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Set(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetRGBA64 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetRGBA64(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetGray16 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetGray16(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SubImage {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SubImage(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Opaque {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Opaque(results.Params))
			}
		}
	}
}
