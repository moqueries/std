// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package color

import (
	"fmt"
	"image/color"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that color.Palette_genType is mocked
// completely
var _ Palette_genType = (*MoqPalette_genType_mock)(nil)

// Palette_genType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Palette_genType interface {
	Convert(c color.Color) color.Color
	Index(c color.Color) int
}

// MoqPalette_genType holds the state of a moq of the Palette_genType type
type MoqPalette_genType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqPalette_genType_mock

	ResultsByParams_Convert []MoqPalette_genType_Convert_resultsByParams
	ResultsByParams_Index   []MoqPalette_genType_Index_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Convert struct {
				C moq.ParamIndexing
			}
			Index struct {
				C moq.ParamIndexing
			}
		}
	}
	// MoqPalette_genType_mock isolates the mock interface of the Palette_genType
}

// type
type MoqPalette_genType_mock struct {
	Moq *MoqPalette_genType
}

// MoqPalette_genType_recorder isolates the recorder interface of the
// Palette_genType type
type MoqPalette_genType_recorder struct {
	Moq *MoqPalette_genType
}

// MoqPalette_genType_Convert_params holds the params of the Palette_genType
// type
type MoqPalette_genType_Convert_params struct{ C color.Color }

// MoqPalette_genType_Convert_paramsKey holds the map key params of the
// Palette_genType type
type MoqPalette_genType_Convert_paramsKey struct {
	Params struct{ C color.Color }
	Hashes struct{ C hash.Hash }
}

// MoqPalette_genType_Convert_resultsByParams contains the results for a given
// set of parameters for the Palette_genType type
type MoqPalette_genType_Convert_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPalette_genType_Convert_paramsKey]*MoqPalette_genType_Convert_results
}

// MoqPalette_genType_Convert_doFn defines the type of function needed when
// calling AndDo for the Palette_genType type
type MoqPalette_genType_Convert_doFn func(c color.Color)

// MoqPalette_genType_Convert_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Palette_genType type
type MoqPalette_genType_Convert_doReturnFn func(c color.Color) color.Color

// MoqPalette_genType_Convert_results holds the results of the Palette_genType
// type
type MoqPalette_genType_Convert_results struct {
	Params  MoqPalette_genType_Convert_params
	Results []struct {
		Values *struct {
			Result1 color.Color
		}
		Sequence   uint32
		DoFn       MoqPalette_genType_Convert_doFn
		DoReturnFn MoqPalette_genType_Convert_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPalette_genType_Convert_fnRecorder routes recorded function calls to the
// MoqPalette_genType moq
type MoqPalette_genType_Convert_fnRecorder struct {
	Params    MoqPalette_genType_Convert_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPalette_genType_Convert_results
	Moq       *MoqPalette_genType
}

// MoqPalette_genType_Convert_anyParams isolates the any params functions of
// the Palette_genType type
type MoqPalette_genType_Convert_anyParams struct {
	Recorder *MoqPalette_genType_Convert_fnRecorder
}

// MoqPalette_genType_Index_params holds the params of the Palette_genType type
type MoqPalette_genType_Index_params struct{ C color.Color }

// MoqPalette_genType_Index_paramsKey holds the map key params of the
// Palette_genType type
type MoqPalette_genType_Index_paramsKey struct {
	Params struct{ C color.Color }
	Hashes struct{ C hash.Hash }
}

// MoqPalette_genType_Index_resultsByParams contains the results for a given
// set of parameters for the Palette_genType type
type MoqPalette_genType_Index_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPalette_genType_Index_paramsKey]*MoqPalette_genType_Index_results
}

// MoqPalette_genType_Index_doFn defines the type of function needed when
// calling AndDo for the Palette_genType type
type MoqPalette_genType_Index_doFn func(c color.Color)

// MoqPalette_genType_Index_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Palette_genType type
type MoqPalette_genType_Index_doReturnFn func(c color.Color) int

// MoqPalette_genType_Index_results holds the results of the Palette_genType
// type
type MoqPalette_genType_Index_results struct {
	Params  MoqPalette_genType_Index_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqPalette_genType_Index_doFn
		DoReturnFn MoqPalette_genType_Index_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPalette_genType_Index_fnRecorder routes recorded function calls to the
// MoqPalette_genType moq
type MoqPalette_genType_Index_fnRecorder struct {
	Params    MoqPalette_genType_Index_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPalette_genType_Index_results
	Moq       *MoqPalette_genType
}

// MoqPalette_genType_Index_anyParams isolates the any params functions of the
// Palette_genType type
type MoqPalette_genType_Index_anyParams struct {
	Recorder *MoqPalette_genType_Index_fnRecorder
}

// NewMoqPalette_genType creates a new moq of the Palette_genType type
func NewMoqPalette_genType(scene *moq.Scene, config *moq.Config) *MoqPalette_genType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqPalette_genType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqPalette_genType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Convert struct {
					C moq.ParamIndexing
				}
				Index struct {
					C moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Convert struct {
				C moq.ParamIndexing
			}
			Index struct {
				C moq.ParamIndexing
			}
		}{
			Convert: struct {
				C moq.ParamIndexing
			}{
				C: moq.ParamIndexByHash,
			},
			Index: struct {
				C moq.ParamIndexing
			}{
				C: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Palette_genType type
func (m *MoqPalette_genType) Mock() *MoqPalette_genType_mock { return m.Moq }

func (m *MoqPalette_genType_mock) Convert(c color.Color) (result1 color.Color) {
	m.Moq.Scene.T.Helper()
	params := MoqPalette_genType_Convert_params{
		C: c,
	}
	var results *MoqPalette_genType_Convert_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Convert {
		paramsKey := m.Moq.ParamsKey_Convert(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Convert(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Convert(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Convert(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(c)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(c)
	}
	return
}

func (m *MoqPalette_genType_mock) Index(c color.Color) (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqPalette_genType_Index_params{
		C: c,
	}
	var results *MoqPalette_genType_Index_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Index {
		paramsKey := m.Moq.ParamsKey_Index(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Index(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Index(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Index(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(c)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(c)
	}
	return
}

// OnCall returns the recorder implementation of the Palette_genType type
func (m *MoqPalette_genType) OnCall() *MoqPalette_genType_recorder {
	return &MoqPalette_genType_recorder{
		Moq: m,
	}
}

func (m *MoqPalette_genType_recorder) Convert(c color.Color) *MoqPalette_genType_Convert_fnRecorder {
	return &MoqPalette_genType_Convert_fnRecorder{
		Params: MoqPalette_genType_Convert_params{
			C: c,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPalette_genType_Convert_fnRecorder) Any() *MoqPalette_genType_Convert_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Convert(r.Params))
		return nil
	}
	return &MoqPalette_genType_Convert_anyParams{Recorder: r}
}

func (a *MoqPalette_genType_Convert_anyParams) C() *MoqPalette_genType_Convert_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPalette_genType_Convert_fnRecorder) Seq() *MoqPalette_genType_Convert_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Convert(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPalette_genType_Convert_fnRecorder) NoSeq() *MoqPalette_genType_Convert_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Convert(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPalette_genType_Convert_fnRecorder) ReturnResults(result1 color.Color) *MoqPalette_genType_Convert_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 color.Color
		}
		Sequence   uint32
		DoFn       MoqPalette_genType_Convert_doFn
		DoReturnFn MoqPalette_genType_Convert_doReturnFn
	}{
		Values: &struct {
			Result1 color.Color
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPalette_genType_Convert_fnRecorder) AndDo(fn MoqPalette_genType_Convert_doFn) *MoqPalette_genType_Convert_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPalette_genType_Convert_fnRecorder) DoReturnResults(fn MoqPalette_genType_Convert_doReturnFn) *MoqPalette_genType_Convert_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 color.Color
		}
		Sequence   uint32
		DoFn       MoqPalette_genType_Convert_doFn
		DoReturnFn MoqPalette_genType_Convert_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPalette_genType_Convert_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPalette_genType_Convert_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Convert {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPalette_genType_Convert_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPalette_genType_Convert_paramsKey]*MoqPalette_genType_Convert_results{},
		}
		r.Moq.ResultsByParams_Convert = append(r.Moq.ResultsByParams_Convert, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Convert) {
			copy(r.Moq.ResultsByParams_Convert[insertAt+1:], r.Moq.ResultsByParams_Convert[insertAt:0])
			r.Moq.ResultsByParams_Convert[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Convert(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPalette_genType_Convert_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPalette_genType_Convert_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPalette_genType_Convert_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 color.Color
				}
				Sequence   uint32
				DoFn       MoqPalette_genType_Convert_doFn
				DoReturnFn MoqPalette_genType_Convert_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPalette_genType) PrettyParams_Convert(params MoqPalette_genType_Convert_params) string {
	return fmt.Sprintf("Convert(%#v)", params.C)
}

func (m *MoqPalette_genType) ParamsKey_Convert(params MoqPalette_genType_Convert_params, anyParams uint64) MoqPalette_genType_Convert_paramsKey {
	m.Scene.T.Helper()
	var cUsed color.Color
	var cUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Convert.C == moq.ParamIndexByValue {
			cUsed = params.C
		} else {
			cUsedHash = hash.DeepHash(params.C)
		}
	}
	return MoqPalette_genType_Convert_paramsKey{
		Params: struct{ C color.Color }{
			C: cUsed,
		},
		Hashes: struct{ C hash.Hash }{
			C: cUsedHash,
		},
	}
}

func (m *MoqPalette_genType_recorder) Index(c color.Color) *MoqPalette_genType_Index_fnRecorder {
	return &MoqPalette_genType_Index_fnRecorder{
		Params: MoqPalette_genType_Index_params{
			C: c,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPalette_genType_Index_fnRecorder) Any() *MoqPalette_genType_Index_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Index(r.Params))
		return nil
	}
	return &MoqPalette_genType_Index_anyParams{Recorder: r}
}

func (a *MoqPalette_genType_Index_anyParams) C() *MoqPalette_genType_Index_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPalette_genType_Index_fnRecorder) Seq() *MoqPalette_genType_Index_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Index(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPalette_genType_Index_fnRecorder) NoSeq() *MoqPalette_genType_Index_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Index(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPalette_genType_Index_fnRecorder) ReturnResults(result1 int) *MoqPalette_genType_Index_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqPalette_genType_Index_doFn
		DoReturnFn MoqPalette_genType_Index_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPalette_genType_Index_fnRecorder) AndDo(fn MoqPalette_genType_Index_doFn) *MoqPalette_genType_Index_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPalette_genType_Index_fnRecorder) DoReturnResults(fn MoqPalette_genType_Index_doReturnFn) *MoqPalette_genType_Index_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqPalette_genType_Index_doFn
		DoReturnFn MoqPalette_genType_Index_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPalette_genType_Index_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPalette_genType_Index_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Index {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPalette_genType_Index_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPalette_genType_Index_paramsKey]*MoqPalette_genType_Index_results{},
		}
		r.Moq.ResultsByParams_Index = append(r.Moq.ResultsByParams_Index, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Index) {
			copy(r.Moq.ResultsByParams_Index[insertAt+1:], r.Moq.ResultsByParams_Index[insertAt:0])
			r.Moq.ResultsByParams_Index[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Index(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPalette_genType_Index_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPalette_genType_Index_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPalette_genType_Index_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqPalette_genType_Index_doFn
				DoReturnFn MoqPalette_genType_Index_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPalette_genType) PrettyParams_Index(params MoqPalette_genType_Index_params) string {
	return fmt.Sprintf("Index(%#v)", params.C)
}

func (m *MoqPalette_genType) ParamsKey_Index(params MoqPalette_genType_Index_params, anyParams uint64) MoqPalette_genType_Index_paramsKey {
	m.Scene.T.Helper()
	var cUsed color.Color
	var cUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Index.C == moq.ParamIndexByValue {
			cUsed = params.C
		} else {
			cUsedHash = hash.DeepHash(params.C)
		}
	}
	return MoqPalette_genType_Index_paramsKey{
		Params: struct{ C color.Color }{
			C: cUsed,
		},
		Hashes: struct{ C hash.Hash }{
			C: cUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqPalette_genType) Reset() { m.ResultsByParams_Convert = nil; m.ResultsByParams_Index = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqPalette_genType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Convert {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Convert(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Index {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Index(results.Params))
			}
		}
	}
}
