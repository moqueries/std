// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package image

import (
	"fmt"
	"image"
	"image/color"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that image.NRGBA64_starGenType is
// mocked completely
var _ NRGBA64_starGenType = (*MoqNRGBA64_starGenType_mock)(nil)

// NRGBA64_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type NRGBA64_starGenType interface {
	ColorModel() color.Model
	Bounds() image.Rectangle
	At(x, y int) color.Color
	NRGBA64At(x, y int) color.NRGBA64
	PixOffset(x, y int) int
	Set(x, y int, c color.Color)
	SetNRGBA64(x, y int, c color.NRGBA64)
	SubImage(r image.Rectangle) image.Image
	Opaque() bool
}

// MoqNRGBA64_starGenType holds the state of a moq of the NRGBA64_starGenType
// type
type MoqNRGBA64_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqNRGBA64_starGenType_mock

	ResultsByParams_ColorModel []MoqNRGBA64_starGenType_ColorModel_resultsByParams
	ResultsByParams_Bounds     []MoqNRGBA64_starGenType_Bounds_resultsByParams
	ResultsByParams_At         []MoqNRGBA64_starGenType_At_resultsByParams
	ResultsByParams_NRGBA64At  []MoqNRGBA64_starGenType_NRGBA64At_resultsByParams
	ResultsByParams_PixOffset  []MoqNRGBA64_starGenType_PixOffset_resultsByParams
	ResultsByParams_Set        []MoqNRGBA64_starGenType_Set_resultsByParams
	ResultsByParams_SetNRGBA64 []MoqNRGBA64_starGenType_SetNRGBA64_resultsByParams
	ResultsByParams_SubImage   []MoqNRGBA64_starGenType_SubImage_resultsByParams
	ResultsByParams_Opaque     []MoqNRGBA64_starGenType_Opaque_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			ColorModel struct{}
			Bounds     struct{}
			At         struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}
			NRGBA64At struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}
			PixOffset struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}
			Set struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
				C moq.ParamIndexing
			}
			SetNRGBA64 struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
				C moq.ParamIndexing
			}
			SubImage struct {
				Param1 moq.ParamIndexing
			}
			Opaque struct{}
		}
	}
}

// MoqNRGBA64_starGenType_mock isolates the mock interface of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_mock struct {
	Moq *MoqNRGBA64_starGenType
}

// MoqNRGBA64_starGenType_recorder isolates the recorder interface of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_recorder struct {
	Moq *MoqNRGBA64_starGenType
}

// MoqNRGBA64_starGenType_ColorModel_params holds the params of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_ColorModel_params struct{}

// MoqNRGBA64_starGenType_ColorModel_paramsKey holds the map key params of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_ColorModel_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqNRGBA64_starGenType_ColorModel_resultsByParams contains the results for a
// given set of parameters for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_ColorModel_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqNRGBA64_starGenType_ColorModel_paramsKey]*MoqNRGBA64_starGenType_ColorModel_results
}

// MoqNRGBA64_starGenType_ColorModel_doFn defines the type of function needed
// when calling AndDo for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_ColorModel_doFn func()

// MoqNRGBA64_starGenType_ColorModel_doReturnFn defines the type of function
// needed when calling DoReturnResults for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_ColorModel_doReturnFn func() color.Model

// MoqNRGBA64_starGenType_ColorModel_results holds the results of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_ColorModel_results struct {
	Params  MoqNRGBA64_starGenType_ColorModel_params
	Results []struct {
		Values *struct {
			Result1 color.Model
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_ColorModel_doFn
		DoReturnFn MoqNRGBA64_starGenType_ColorModel_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqNRGBA64_starGenType_ColorModel_fnRecorder routes recorded function calls
// to the MoqNRGBA64_starGenType moq
type MoqNRGBA64_starGenType_ColorModel_fnRecorder struct {
	Params    MoqNRGBA64_starGenType_ColorModel_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqNRGBA64_starGenType_ColorModel_results
	Moq       *MoqNRGBA64_starGenType
}

// MoqNRGBA64_starGenType_ColorModel_anyParams isolates the any params
// functions of the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_ColorModel_anyParams struct {
	Recorder *MoqNRGBA64_starGenType_ColorModel_fnRecorder
}

// MoqNRGBA64_starGenType_Bounds_params holds the params of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Bounds_params struct{}

// MoqNRGBA64_starGenType_Bounds_paramsKey holds the map key params of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Bounds_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqNRGBA64_starGenType_Bounds_resultsByParams contains the results for a
// given set of parameters for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Bounds_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqNRGBA64_starGenType_Bounds_paramsKey]*MoqNRGBA64_starGenType_Bounds_results
}

// MoqNRGBA64_starGenType_Bounds_doFn defines the type of function needed when
// calling AndDo for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Bounds_doFn func()

// MoqNRGBA64_starGenType_Bounds_doReturnFn defines the type of function needed
// when calling DoReturnResults for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Bounds_doReturnFn func() image.Rectangle

// MoqNRGBA64_starGenType_Bounds_results holds the results of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Bounds_results struct {
	Params  MoqNRGBA64_starGenType_Bounds_params
	Results []struct {
		Values *struct {
			Result1 image.Rectangle
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_Bounds_doFn
		DoReturnFn MoqNRGBA64_starGenType_Bounds_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqNRGBA64_starGenType_Bounds_fnRecorder routes recorded function calls to
// the MoqNRGBA64_starGenType moq
type MoqNRGBA64_starGenType_Bounds_fnRecorder struct {
	Params    MoqNRGBA64_starGenType_Bounds_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqNRGBA64_starGenType_Bounds_results
	Moq       *MoqNRGBA64_starGenType
}

// MoqNRGBA64_starGenType_Bounds_anyParams isolates the any params functions of
// the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Bounds_anyParams struct {
	Recorder *MoqNRGBA64_starGenType_Bounds_fnRecorder
}

// MoqNRGBA64_starGenType_At_params holds the params of the NRGBA64_starGenType
// type
type MoqNRGBA64_starGenType_At_params struct{ X, Y int }

// MoqNRGBA64_starGenType_At_paramsKey holds the map key params of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_At_paramsKey struct {
	Params struct{ X, Y int }
	Hashes struct{ X, Y hash.Hash }
}

// MoqNRGBA64_starGenType_At_resultsByParams contains the results for a given
// set of parameters for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_At_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqNRGBA64_starGenType_At_paramsKey]*MoqNRGBA64_starGenType_At_results
}

// MoqNRGBA64_starGenType_At_doFn defines the type of function needed when
// calling AndDo for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_At_doFn func(x, y int)

// MoqNRGBA64_starGenType_At_doReturnFn defines the type of function needed
// when calling DoReturnResults for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_At_doReturnFn func(x, y int) color.Color

// MoqNRGBA64_starGenType_At_results holds the results of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_At_results struct {
	Params  MoqNRGBA64_starGenType_At_params
	Results []struct {
		Values *struct {
			Result1 color.Color
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_At_doFn
		DoReturnFn MoqNRGBA64_starGenType_At_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqNRGBA64_starGenType_At_fnRecorder routes recorded function calls to the
// MoqNRGBA64_starGenType moq
type MoqNRGBA64_starGenType_At_fnRecorder struct {
	Params    MoqNRGBA64_starGenType_At_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqNRGBA64_starGenType_At_results
	Moq       *MoqNRGBA64_starGenType
}

// MoqNRGBA64_starGenType_At_anyParams isolates the any params functions of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_At_anyParams struct {
	Recorder *MoqNRGBA64_starGenType_At_fnRecorder
}

// MoqNRGBA64_starGenType_NRGBA64At_params holds the params of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_NRGBA64At_params struct{ X, Y int }

// MoqNRGBA64_starGenType_NRGBA64At_paramsKey holds the map key params of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_NRGBA64At_paramsKey struct {
	Params struct{ X, Y int }
	Hashes struct{ X, Y hash.Hash }
}

// MoqNRGBA64_starGenType_NRGBA64At_resultsByParams contains the results for a
// given set of parameters for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_NRGBA64At_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqNRGBA64_starGenType_NRGBA64At_paramsKey]*MoqNRGBA64_starGenType_NRGBA64At_results
}

// MoqNRGBA64_starGenType_NRGBA64At_doFn defines the type of function needed
// when calling AndDo for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_NRGBA64At_doFn func(x, y int)

// MoqNRGBA64_starGenType_NRGBA64At_doReturnFn defines the type of function
// needed when calling DoReturnResults for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_NRGBA64At_doReturnFn func(x, y int) color.NRGBA64

// MoqNRGBA64_starGenType_NRGBA64At_results holds the results of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_NRGBA64At_results struct {
	Params  MoqNRGBA64_starGenType_NRGBA64At_params
	Results []struct {
		Values *struct {
			Result1 color.NRGBA64
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_NRGBA64At_doFn
		DoReturnFn MoqNRGBA64_starGenType_NRGBA64At_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqNRGBA64_starGenType_NRGBA64At_fnRecorder routes recorded function calls
// to the MoqNRGBA64_starGenType moq
type MoqNRGBA64_starGenType_NRGBA64At_fnRecorder struct {
	Params    MoqNRGBA64_starGenType_NRGBA64At_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqNRGBA64_starGenType_NRGBA64At_results
	Moq       *MoqNRGBA64_starGenType
}

// MoqNRGBA64_starGenType_NRGBA64At_anyParams isolates the any params functions
// of the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_NRGBA64At_anyParams struct {
	Recorder *MoqNRGBA64_starGenType_NRGBA64At_fnRecorder
}

// MoqNRGBA64_starGenType_PixOffset_params holds the params of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_PixOffset_params struct{ X, Y int }

// MoqNRGBA64_starGenType_PixOffset_paramsKey holds the map key params of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_PixOffset_paramsKey struct {
	Params struct{ X, Y int }
	Hashes struct{ X, Y hash.Hash }
}

// MoqNRGBA64_starGenType_PixOffset_resultsByParams contains the results for a
// given set of parameters for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_PixOffset_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqNRGBA64_starGenType_PixOffset_paramsKey]*MoqNRGBA64_starGenType_PixOffset_results
}

// MoqNRGBA64_starGenType_PixOffset_doFn defines the type of function needed
// when calling AndDo for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_PixOffset_doFn func(x, y int)

// MoqNRGBA64_starGenType_PixOffset_doReturnFn defines the type of function
// needed when calling DoReturnResults for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_PixOffset_doReturnFn func(x, y int) int

// MoqNRGBA64_starGenType_PixOffset_results holds the results of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_PixOffset_results struct {
	Params  MoqNRGBA64_starGenType_PixOffset_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_PixOffset_doFn
		DoReturnFn MoqNRGBA64_starGenType_PixOffset_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqNRGBA64_starGenType_PixOffset_fnRecorder routes recorded function calls
// to the MoqNRGBA64_starGenType moq
type MoqNRGBA64_starGenType_PixOffset_fnRecorder struct {
	Params    MoqNRGBA64_starGenType_PixOffset_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqNRGBA64_starGenType_PixOffset_results
	Moq       *MoqNRGBA64_starGenType
}

// MoqNRGBA64_starGenType_PixOffset_anyParams isolates the any params functions
// of the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_PixOffset_anyParams struct {
	Recorder *MoqNRGBA64_starGenType_PixOffset_fnRecorder
}

// MoqNRGBA64_starGenType_Set_params holds the params of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Set_params struct {
	X, Y int
	C    color.Color
}

// MoqNRGBA64_starGenType_Set_paramsKey holds the map key params of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Set_paramsKey struct {
	Params struct {
		X, Y int
		C    color.Color
	}
	Hashes struct {
		X, Y hash.Hash
		C    hash.Hash
	}
}

// MoqNRGBA64_starGenType_Set_resultsByParams contains the results for a given
// set of parameters for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Set_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqNRGBA64_starGenType_Set_paramsKey]*MoqNRGBA64_starGenType_Set_results
}

// MoqNRGBA64_starGenType_Set_doFn defines the type of function needed when
// calling AndDo for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Set_doFn func(x, y int, c color.Color)

// MoqNRGBA64_starGenType_Set_doReturnFn defines the type of function needed
// when calling DoReturnResults for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Set_doReturnFn func(x, y int, c color.Color)

// MoqNRGBA64_starGenType_Set_results holds the results of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Set_results struct {
	Params  MoqNRGBA64_starGenType_Set_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_Set_doFn
		DoReturnFn MoqNRGBA64_starGenType_Set_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqNRGBA64_starGenType_Set_fnRecorder routes recorded function calls to the
// MoqNRGBA64_starGenType moq
type MoqNRGBA64_starGenType_Set_fnRecorder struct {
	Params    MoqNRGBA64_starGenType_Set_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqNRGBA64_starGenType_Set_results
	Moq       *MoqNRGBA64_starGenType
}

// MoqNRGBA64_starGenType_Set_anyParams isolates the any params functions of
// the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Set_anyParams struct {
	Recorder *MoqNRGBA64_starGenType_Set_fnRecorder
}

// MoqNRGBA64_starGenType_SetNRGBA64_params holds the params of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_SetNRGBA64_params struct {
	X, Y int
	C    color.NRGBA64
}

// MoqNRGBA64_starGenType_SetNRGBA64_paramsKey holds the map key params of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_SetNRGBA64_paramsKey struct {
	Params struct {
		X, Y int
		C    color.NRGBA64
	}
	Hashes struct {
		X, Y hash.Hash
		C    hash.Hash
	}
}

// MoqNRGBA64_starGenType_SetNRGBA64_resultsByParams contains the results for a
// given set of parameters for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_SetNRGBA64_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqNRGBA64_starGenType_SetNRGBA64_paramsKey]*MoqNRGBA64_starGenType_SetNRGBA64_results
}

// MoqNRGBA64_starGenType_SetNRGBA64_doFn defines the type of function needed
// when calling AndDo for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_SetNRGBA64_doFn func(x, y int, c color.NRGBA64)

// MoqNRGBA64_starGenType_SetNRGBA64_doReturnFn defines the type of function
// needed when calling DoReturnResults for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_SetNRGBA64_doReturnFn func(x, y int, c color.NRGBA64)

// MoqNRGBA64_starGenType_SetNRGBA64_results holds the results of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_SetNRGBA64_results struct {
	Params  MoqNRGBA64_starGenType_SetNRGBA64_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_SetNRGBA64_doFn
		DoReturnFn MoqNRGBA64_starGenType_SetNRGBA64_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder routes recorded function calls
// to the MoqNRGBA64_starGenType moq
type MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder struct {
	Params    MoqNRGBA64_starGenType_SetNRGBA64_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqNRGBA64_starGenType_SetNRGBA64_results
	Moq       *MoqNRGBA64_starGenType
}

// MoqNRGBA64_starGenType_SetNRGBA64_anyParams isolates the any params
// functions of the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_SetNRGBA64_anyParams struct {
	Recorder *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder
}

// MoqNRGBA64_starGenType_SubImage_params holds the params of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_SubImage_params struct{ Param1 image.Rectangle }

// MoqNRGBA64_starGenType_SubImage_paramsKey holds the map key params of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_SubImage_paramsKey struct {
	Params struct{ Param1 image.Rectangle }
	Hashes struct{ Param1 hash.Hash }
}

// MoqNRGBA64_starGenType_SubImage_resultsByParams contains the results for a
// given set of parameters for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_SubImage_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqNRGBA64_starGenType_SubImage_paramsKey]*MoqNRGBA64_starGenType_SubImage_results
}

// MoqNRGBA64_starGenType_SubImage_doFn defines the type of function needed
// when calling AndDo for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_SubImage_doFn func(r image.Rectangle)

// MoqNRGBA64_starGenType_SubImage_doReturnFn defines the type of function
// needed when calling DoReturnResults for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_SubImage_doReturnFn func(r image.Rectangle) image.Image

// MoqNRGBA64_starGenType_SubImage_results holds the results of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_SubImage_results struct {
	Params  MoqNRGBA64_starGenType_SubImage_params
	Results []struct {
		Values *struct {
			Result1 image.Image
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_SubImage_doFn
		DoReturnFn MoqNRGBA64_starGenType_SubImage_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqNRGBA64_starGenType_SubImage_fnRecorder routes recorded function calls to
// the MoqNRGBA64_starGenType moq
type MoqNRGBA64_starGenType_SubImage_fnRecorder struct {
	Params    MoqNRGBA64_starGenType_SubImage_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqNRGBA64_starGenType_SubImage_results
	Moq       *MoqNRGBA64_starGenType
}

// MoqNRGBA64_starGenType_SubImage_anyParams isolates the any params functions
// of the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_SubImage_anyParams struct {
	Recorder *MoqNRGBA64_starGenType_SubImage_fnRecorder
}

// MoqNRGBA64_starGenType_Opaque_params holds the params of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Opaque_params struct{}

// MoqNRGBA64_starGenType_Opaque_paramsKey holds the map key params of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Opaque_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqNRGBA64_starGenType_Opaque_resultsByParams contains the results for a
// given set of parameters for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Opaque_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqNRGBA64_starGenType_Opaque_paramsKey]*MoqNRGBA64_starGenType_Opaque_results
}

// MoqNRGBA64_starGenType_Opaque_doFn defines the type of function needed when
// calling AndDo for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Opaque_doFn func()

// MoqNRGBA64_starGenType_Opaque_doReturnFn defines the type of function needed
// when calling DoReturnResults for the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Opaque_doReturnFn func() bool

// MoqNRGBA64_starGenType_Opaque_results holds the results of the
// NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Opaque_results struct {
	Params  MoqNRGBA64_starGenType_Opaque_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_Opaque_doFn
		DoReturnFn MoqNRGBA64_starGenType_Opaque_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqNRGBA64_starGenType_Opaque_fnRecorder routes recorded function calls to
// the MoqNRGBA64_starGenType moq
type MoqNRGBA64_starGenType_Opaque_fnRecorder struct {
	Params    MoqNRGBA64_starGenType_Opaque_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqNRGBA64_starGenType_Opaque_results
	Moq       *MoqNRGBA64_starGenType
}

// MoqNRGBA64_starGenType_Opaque_anyParams isolates the any params functions of
// the NRGBA64_starGenType type
type MoqNRGBA64_starGenType_Opaque_anyParams struct {
	Recorder *MoqNRGBA64_starGenType_Opaque_fnRecorder
}

// NewMoqNRGBA64_starGenType creates a new moq of the NRGBA64_starGenType type
func NewMoqNRGBA64_starGenType(scene *moq.Scene, config *moq.Config) *MoqNRGBA64_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqNRGBA64_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqNRGBA64_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				ColorModel struct{}
				Bounds     struct{}
				At         struct {
					X moq.ParamIndexing
					Y moq.ParamIndexing
				}
				NRGBA64At struct {
					X moq.ParamIndexing
					Y moq.ParamIndexing
				}
				PixOffset struct {
					X moq.ParamIndexing
					Y moq.ParamIndexing
				}
				Set struct {
					X moq.ParamIndexing
					Y moq.ParamIndexing
					C moq.ParamIndexing
				}
				SetNRGBA64 struct {
					X moq.ParamIndexing
					Y moq.ParamIndexing
					C moq.ParamIndexing
				}
				SubImage struct {
					Param1 moq.ParamIndexing
				}
				Opaque struct{}
			}
		}{ParameterIndexing: struct {
			ColorModel struct{}
			Bounds     struct{}
			At         struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}
			NRGBA64At struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}
			PixOffset struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}
			Set struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
				C moq.ParamIndexing
			}
			SetNRGBA64 struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
				C moq.ParamIndexing
			}
			SubImage struct {
				Param1 moq.ParamIndexing
			}
			Opaque struct{}
		}{
			ColorModel: struct{}{},
			Bounds:     struct{}{},
			At: struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}{
				X: moq.ParamIndexByValue,
				Y: moq.ParamIndexByValue,
			},
			NRGBA64At: struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}{
				X: moq.ParamIndexByValue,
				Y: moq.ParamIndexByValue,
			},
			PixOffset: struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}{
				X: moq.ParamIndexByValue,
				Y: moq.ParamIndexByValue,
			},
			Set: struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
				C moq.ParamIndexing
			}{
				X: moq.ParamIndexByValue,
				Y: moq.ParamIndexByValue,
				C: moq.ParamIndexByHash,
			},
			SetNRGBA64: struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
				C moq.ParamIndexing
			}{
				X: moq.ParamIndexByValue,
				Y: moq.ParamIndexByValue,
				C: moq.ParamIndexByValue,
			},
			SubImage: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			Opaque: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the NRGBA64_starGenType type
func (m *MoqNRGBA64_starGenType) Mock() *MoqNRGBA64_starGenType_mock { return m.Moq }

func (m *MoqNRGBA64_starGenType_mock) ColorModel() (result1 color.Model) {
	m.Moq.Scene.T.Helper()
	params := MoqNRGBA64_starGenType_ColorModel_params{}
	var results *MoqNRGBA64_starGenType_ColorModel_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ColorModel {
		paramsKey := m.Moq.ParamsKey_ColorModel(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ColorModel(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ColorModel(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ColorModel(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqNRGBA64_starGenType_mock) Bounds() (result1 image.Rectangle) {
	m.Moq.Scene.T.Helper()
	params := MoqNRGBA64_starGenType_Bounds_params{}
	var results *MoqNRGBA64_starGenType_Bounds_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Bounds {
		paramsKey := m.Moq.ParamsKey_Bounds(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Bounds(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Bounds(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Bounds(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqNRGBA64_starGenType_mock) At(x, y int) (result1 color.Color) {
	m.Moq.Scene.T.Helper()
	params := MoqNRGBA64_starGenType_At_params{
		X: x,
		Y: y,
	}
	var results *MoqNRGBA64_starGenType_At_results
	for _, resultsByParams := range m.Moq.ResultsByParams_At {
		paramsKey := m.Moq.ParamsKey_At(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_At(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_At(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_At(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x, y)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(x, y)
	}
	return
}

func (m *MoqNRGBA64_starGenType_mock) NRGBA64At(x, y int) (result1 color.NRGBA64) {
	m.Moq.Scene.T.Helper()
	params := MoqNRGBA64_starGenType_NRGBA64At_params{
		X: x,
		Y: y,
	}
	var results *MoqNRGBA64_starGenType_NRGBA64At_results
	for _, resultsByParams := range m.Moq.ResultsByParams_NRGBA64At {
		paramsKey := m.Moq.ParamsKey_NRGBA64At(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_NRGBA64At(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_NRGBA64At(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_NRGBA64At(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x, y)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(x, y)
	}
	return
}

func (m *MoqNRGBA64_starGenType_mock) PixOffset(x, y int) (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqNRGBA64_starGenType_PixOffset_params{
		X: x,
		Y: y,
	}
	var results *MoqNRGBA64_starGenType_PixOffset_results
	for _, resultsByParams := range m.Moq.ResultsByParams_PixOffset {
		paramsKey := m.Moq.ParamsKey_PixOffset(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_PixOffset(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_PixOffset(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_PixOffset(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x, y)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(x, y)
	}
	return
}

func (m *MoqNRGBA64_starGenType_mock) Set(x, y int, c color.Color) {
	m.Moq.Scene.T.Helper()
	params := MoqNRGBA64_starGenType_Set_params{
		X: x,
		Y: y,
		C: c,
	}
	var results *MoqNRGBA64_starGenType_Set_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Set {
		paramsKey := m.Moq.ParamsKey_Set(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Set(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Set(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Set(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x, y, c)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(x, y, c)
	}
	return
}

func (m *MoqNRGBA64_starGenType_mock) SetNRGBA64(x, y int, c color.NRGBA64) {
	m.Moq.Scene.T.Helper()
	params := MoqNRGBA64_starGenType_SetNRGBA64_params{
		X: x,
		Y: y,
		C: c,
	}
	var results *MoqNRGBA64_starGenType_SetNRGBA64_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetNRGBA64 {
		paramsKey := m.Moq.ParamsKey_SetNRGBA64(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetNRGBA64(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetNRGBA64(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetNRGBA64(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x, y, c)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(x, y, c)
	}
	return
}

func (m *MoqNRGBA64_starGenType_mock) SubImage(param1 image.Rectangle) (result1 image.Image) {
	m.Moq.Scene.T.Helper()
	params := MoqNRGBA64_starGenType_SubImage_params{
		Param1: param1,
	}
	var results *MoqNRGBA64_starGenType_SubImage_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SubImage {
		paramsKey := m.Moq.ParamsKey_SubImage(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SubImage(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SubImage(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SubImage(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqNRGBA64_starGenType_mock) Opaque() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqNRGBA64_starGenType_Opaque_params{}
	var results *MoqNRGBA64_starGenType_Opaque_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Opaque {
		paramsKey := m.Moq.ParamsKey_Opaque(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Opaque(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Opaque(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Opaque(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the NRGBA64_starGenType type
func (m *MoqNRGBA64_starGenType) OnCall() *MoqNRGBA64_starGenType_recorder {
	return &MoqNRGBA64_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqNRGBA64_starGenType_recorder) ColorModel() *MoqNRGBA64_starGenType_ColorModel_fnRecorder {
	return &MoqNRGBA64_starGenType_ColorModel_fnRecorder{
		Params:   MoqNRGBA64_starGenType_ColorModel_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqNRGBA64_starGenType_ColorModel_fnRecorder) Any() *MoqNRGBA64_starGenType_ColorModel_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ColorModel(r.Params))
		return nil
	}
	return &MoqNRGBA64_starGenType_ColorModel_anyParams{Recorder: r}
}

func (r *MoqNRGBA64_starGenType_ColorModel_fnRecorder) Seq() *MoqNRGBA64_starGenType_ColorModel_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ColorModel(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqNRGBA64_starGenType_ColorModel_fnRecorder) NoSeq() *MoqNRGBA64_starGenType_ColorModel_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ColorModel(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqNRGBA64_starGenType_ColorModel_fnRecorder) ReturnResults(result1 color.Model) *MoqNRGBA64_starGenType_ColorModel_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 color.Model
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_ColorModel_doFn
		DoReturnFn MoqNRGBA64_starGenType_ColorModel_doReturnFn
	}{
		Values: &struct {
			Result1 color.Model
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqNRGBA64_starGenType_ColorModel_fnRecorder) AndDo(fn MoqNRGBA64_starGenType_ColorModel_doFn) *MoqNRGBA64_starGenType_ColorModel_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqNRGBA64_starGenType_ColorModel_fnRecorder) DoReturnResults(fn MoqNRGBA64_starGenType_ColorModel_doReturnFn) *MoqNRGBA64_starGenType_ColorModel_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 color.Model
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_ColorModel_doFn
		DoReturnFn MoqNRGBA64_starGenType_ColorModel_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqNRGBA64_starGenType_ColorModel_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqNRGBA64_starGenType_ColorModel_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ColorModel {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqNRGBA64_starGenType_ColorModel_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqNRGBA64_starGenType_ColorModel_paramsKey]*MoqNRGBA64_starGenType_ColorModel_results{},
		}
		r.Moq.ResultsByParams_ColorModel = append(r.Moq.ResultsByParams_ColorModel, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ColorModel) {
			copy(r.Moq.ResultsByParams_ColorModel[insertAt+1:], r.Moq.ResultsByParams_ColorModel[insertAt:0])
			r.Moq.ResultsByParams_ColorModel[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ColorModel(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqNRGBA64_starGenType_ColorModel_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqNRGBA64_starGenType_ColorModel_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqNRGBA64_starGenType_ColorModel_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 color.Model
				}
				Sequence   uint32
				DoFn       MoqNRGBA64_starGenType_ColorModel_doFn
				DoReturnFn MoqNRGBA64_starGenType_ColorModel_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqNRGBA64_starGenType) PrettyParams_ColorModel(params MoqNRGBA64_starGenType_ColorModel_params) string {
	return fmt.Sprintf("ColorModel()")
}

func (m *MoqNRGBA64_starGenType) ParamsKey_ColorModel(params MoqNRGBA64_starGenType_ColorModel_params, anyParams uint64) MoqNRGBA64_starGenType_ColorModel_paramsKey {
	m.Scene.T.Helper()
	return MoqNRGBA64_starGenType_ColorModel_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqNRGBA64_starGenType_recorder) Bounds() *MoqNRGBA64_starGenType_Bounds_fnRecorder {
	return &MoqNRGBA64_starGenType_Bounds_fnRecorder{
		Params:   MoqNRGBA64_starGenType_Bounds_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqNRGBA64_starGenType_Bounds_fnRecorder) Any() *MoqNRGBA64_starGenType_Bounds_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bounds(r.Params))
		return nil
	}
	return &MoqNRGBA64_starGenType_Bounds_anyParams{Recorder: r}
}

func (r *MoqNRGBA64_starGenType_Bounds_fnRecorder) Seq() *MoqNRGBA64_starGenType_Bounds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bounds(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqNRGBA64_starGenType_Bounds_fnRecorder) NoSeq() *MoqNRGBA64_starGenType_Bounds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bounds(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqNRGBA64_starGenType_Bounds_fnRecorder) ReturnResults(result1 image.Rectangle) *MoqNRGBA64_starGenType_Bounds_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 image.Rectangle
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_Bounds_doFn
		DoReturnFn MoqNRGBA64_starGenType_Bounds_doReturnFn
	}{
		Values: &struct {
			Result1 image.Rectangle
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqNRGBA64_starGenType_Bounds_fnRecorder) AndDo(fn MoqNRGBA64_starGenType_Bounds_doFn) *MoqNRGBA64_starGenType_Bounds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqNRGBA64_starGenType_Bounds_fnRecorder) DoReturnResults(fn MoqNRGBA64_starGenType_Bounds_doReturnFn) *MoqNRGBA64_starGenType_Bounds_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 image.Rectangle
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_Bounds_doFn
		DoReturnFn MoqNRGBA64_starGenType_Bounds_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqNRGBA64_starGenType_Bounds_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqNRGBA64_starGenType_Bounds_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Bounds {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqNRGBA64_starGenType_Bounds_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqNRGBA64_starGenType_Bounds_paramsKey]*MoqNRGBA64_starGenType_Bounds_results{},
		}
		r.Moq.ResultsByParams_Bounds = append(r.Moq.ResultsByParams_Bounds, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Bounds) {
			copy(r.Moq.ResultsByParams_Bounds[insertAt+1:], r.Moq.ResultsByParams_Bounds[insertAt:0])
			r.Moq.ResultsByParams_Bounds[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Bounds(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqNRGBA64_starGenType_Bounds_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqNRGBA64_starGenType_Bounds_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqNRGBA64_starGenType_Bounds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 image.Rectangle
				}
				Sequence   uint32
				DoFn       MoqNRGBA64_starGenType_Bounds_doFn
				DoReturnFn MoqNRGBA64_starGenType_Bounds_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqNRGBA64_starGenType) PrettyParams_Bounds(params MoqNRGBA64_starGenType_Bounds_params) string {
	return fmt.Sprintf("Bounds()")
}

func (m *MoqNRGBA64_starGenType) ParamsKey_Bounds(params MoqNRGBA64_starGenType_Bounds_params, anyParams uint64) MoqNRGBA64_starGenType_Bounds_paramsKey {
	m.Scene.T.Helper()
	return MoqNRGBA64_starGenType_Bounds_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqNRGBA64_starGenType_recorder) At(x, y int) *MoqNRGBA64_starGenType_At_fnRecorder {
	return &MoqNRGBA64_starGenType_At_fnRecorder{
		Params: MoqNRGBA64_starGenType_At_params{
			X: x,
			Y: y,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqNRGBA64_starGenType_At_fnRecorder) Any() *MoqNRGBA64_starGenType_At_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_At(r.Params))
		return nil
	}
	return &MoqNRGBA64_starGenType_At_anyParams{Recorder: r}
}

func (a *MoqNRGBA64_starGenType_At_anyParams) X() *MoqNRGBA64_starGenType_At_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqNRGBA64_starGenType_At_anyParams) Y() *MoqNRGBA64_starGenType_At_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqNRGBA64_starGenType_At_fnRecorder) Seq() *MoqNRGBA64_starGenType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_At(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqNRGBA64_starGenType_At_fnRecorder) NoSeq() *MoqNRGBA64_starGenType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_At(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqNRGBA64_starGenType_At_fnRecorder) ReturnResults(result1 color.Color) *MoqNRGBA64_starGenType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 color.Color
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_At_doFn
		DoReturnFn MoqNRGBA64_starGenType_At_doReturnFn
	}{
		Values: &struct {
			Result1 color.Color
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqNRGBA64_starGenType_At_fnRecorder) AndDo(fn MoqNRGBA64_starGenType_At_doFn) *MoqNRGBA64_starGenType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqNRGBA64_starGenType_At_fnRecorder) DoReturnResults(fn MoqNRGBA64_starGenType_At_doReturnFn) *MoqNRGBA64_starGenType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 color.Color
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_At_doFn
		DoReturnFn MoqNRGBA64_starGenType_At_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqNRGBA64_starGenType_At_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqNRGBA64_starGenType_At_resultsByParams
	for n, res := range r.Moq.ResultsByParams_At {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqNRGBA64_starGenType_At_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqNRGBA64_starGenType_At_paramsKey]*MoqNRGBA64_starGenType_At_results{},
		}
		r.Moq.ResultsByParams_At = append(r.Moq.ResultsByParams_At, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_At) {
			copy(r.Moq.ResultsByParams_At[insertAt+1:], r.Moq.ResultsByParams_At[insertAt:0])
			r.Moq.ResultsByParams_At[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_At(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqNRGBA64_starGenType_At_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqNRGBA64_starGenType_At_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqNRGBA64_starGenType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 color.Color
				}
				Sequence   uint32
				DoFn       MoqNRGBA64_starGenType_At_doFn
				DoReturnFn MoqNRGBA64_starGenType_At_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqNRGBA64_starGenType) PrettyParams_At(params MoqNRGBA64_starGenType_At_params) string {
	return fmt.Sprintf("At(%#v, %#v)", params.X, params.Y)
}

func (m *MoqNRGBA64_starGenType) ParamsKey_At(params MoqNRGBA64_starGenType_At_params, anyParams uint64) MoqNRGBA64_starGenType_At_paramsKey {
	m.Scene.T.Helper()
	var xUsed int
	var xUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.At.X == moq.ParamIndexByValue {
			xUsed = params.X
		} else {
			xUsedHash = hash.DeepHash(params.X)
		}
	}
	var yUsed int
	var yUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.At.Y == moq.ParamIndexByValue {
			yUsed = params.Y
		} else {
			yUsedHash = hash.DeepHash(params.Y)
		}
	}
	return MoqNRGBA64_starGenType_At_paramsKey{
		Params: struct{ X, Y int }{
			X: xUsed,
			Y: yUsed,
		},
		Hashes: struct{ X, Y hash.Hash }{
			X: xUsedHash,
			Y: yUsedHash,
		},
	}
}

func (m *MoqNRGBA64_starGenType_recorder) NRGBA64At(x, y int) *MoqNRGBA64_starGenType_NRGBA64At_fnRecorder {
	return &MoqNRGBA64_starGenType_NRGBA64At_fnRecorder{
		Params: MoqNRGBA64_starGenType_NRGBA64At_params{
			X: x,
			Y: y,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqNRGBA64_starGenType_NRGBA64At_fnRecorder) Any() *MoqNRGBA64_starGenType_NRGBA64At_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NRGBA64At(r.Params))
		return nil
	}
	return &MoqNRGBA64_starGenType_NRGBA64At_anyParams{Recorder: r}
}

func (a *MoqNRGBA64_starGenType_NRGBA64At_anyParams) X() *MoqNRGBA64_starGenType_NRGBA64At_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqNRGBA64_starGenType_NRGBA64At_anyParams) Y() *MoqNRGBA64_starGenType_NRGBA64At_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqNRGBA64_starGenType_NRGBA64At_fnRecorder) Seq() *MoqNRGBA64_starGenType_NRGBA64At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NRGBA64At(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqNRGBA64_starGenType_NRGBA64At_fnRecorder) NoSeq() *MoqNRGBA64_starGenType_NRGBA64At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NRGBA64At(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqNRGBA64_starGenType_NRGBA64At_fnRecorder) ReturnResults(result1 color.NRGBA64) *MoqNRGBA64_starGenType_NRGBA64At_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 color.NRGBA64
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_NRGBA64At_doFn
		DoReturnFn MoqNRGBA64_starGenType_NRGBA64At_doReturnFn
	}{
		Values: &struct {
			Result1 color.NRGBA64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqNRGBA64_starGenType_NRGBA64At_fnRecorder) AndDo(fn MoqNRGBA64_starGenType_NRGBA64At_doFn) *MoqNRGBA64_starGenType_NRGBA64At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqNRGBA64_starGenType_NRGBA64At_fnRecorder) DoReturnResults(fn MoqNRGBA64_starGenType_NRGBA64At_doReturnFn) *MoqNRGBA64_starGenType_NRGBA64At_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 color.NRGBA64
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_NRGBA64At_doFn
		DoReturnFn MoqNRGBA64_starGenType_NRGBA64At_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqNRGBA64_starGenType_NRGBA64At_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqNRGBA64_starGenType_NRGBA64At_resultsByParams
	for n, res := range r.Moq.ResultsByParams_NRGBA64At {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqNRGBA64_starGenType_NRGBA64At_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqNRGBA64_starGenType_NRGBA64At_paramsKey]*MoqNRGBA64_starGenType_NRGBA64At_results{},
		}
		r.Moq.ResultsByParams_NRGBA64At = append(r.Moq.ResultsByParams_NRGBA64At, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_NRGBA64At) {
			copy(r.Moq.ResultsByParams_NRGBA64At[insertAt+1:], r.Moq.ResultsByParams_NRGBA64At[insertAt:0])
			r.Moq.ResultsByParams_NRGBA64At[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_NRGBA64At(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqNRGBA64_starGenType_NRGBA64At_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqNRGBA64_starGenType_NRGBA64At_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqNRGBA64_starGenType_NRGBA64At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 color.NRGBA64
				}
				Sequence   uint32
				DoFn       MoqNRGBA64_starGenType_NRGBA64At_doFn
				DoReturnFn MoqNRGBA64_starGenType_NRGBA64At_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqNRGBA64_starGenType) PrettyParams_NRGBA64At(params MoqNRGBA64_starGenType_NRGBA64At_params) string {
	return fmt.Sprintf("NRGBA64At(%#v, %#v)", params.X, params.Y)
}

func (m *MoqNRGBA64_starGenType) ParamsKey_NRGBA64At(params MoqNRGBA64_starGenType_NRGBA64At_params, anyParams uint64) MoqNRGBA64_starGenType_NRGBA64At_paramsKey {
	m.Scene.T.Helper()
	var xUsed int
	var xUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.NRGBA64At.X == moq.ParamIndexByValue {
			xUsed = params.X
		} else {
			xUsedHash = hash.DeepHash(params.X)
		}
	}
	var yUsed int
	var yUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.NRGBA64At.Y == moq.ParamIndexByValue {
			yUsed = params.Y
		} else {
			yUsedHash = hash.DeepHash(params.Y)
		}
	}
	return MoqNRGBA64_starGenType_NRGBA64At_paramsKey{
		Params: struct{ X, Y int }{
			X: xUsed,
			Y: yUsed,
		},
		Hashes: struct{ X, Y hash.Hash }{
			X: xUsedHash,
			Y: yUsedHash,
		},
	}
}

func (m *MoqNRGBA64_starGenType_recorder) PixOffset(x, y int) *MoqNRGBA64_starGenType_PixOffset_fnRecorder {
	return &MoqNRGBA64_starGenType_PixOffset_fnRecorder{
		Params: MoqNRGBA64_starGenType_PixOffset_params{
			X: x,
			Y: y,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqNRGBA64_starGenType_PixOffset_fnRecorder) Any() *MoqNRGBA64_starGenType_PixOffset_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PixOffset(r.Params))
		return nil
	}
	return &MoqNRGBA64_starGenType_PixOffset_anyParams{Recorder: r}
}

func (a *MoqNRGBA64_starGenType_PixOffset_anyParams) X() *MoqNRGBA64_starGenType_PixOffset_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqNRGBA64_starGenType_PixOffset_anyParams) Y() *MoqNRGBA64_starGenType_PixOffset_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqNRGBA64_starGenType_PixOffset_fnRecorder) Seq() *MoqNRGBA64_starGenType_PixOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PixOffset(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqNRGBA64_starGenType_PixOffset_fnRecorder) NoSeq() *MoqNRGBA64_starGenType_PixOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PixOffset(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqNRGBA64_starGenType_PixOffset_fnRecorder) ReturnResults(result1 int) *MoqNRGBA64_starGenType_PixOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_PixOffset_doFn
		DoReturnFn MoqNRGBA64_starGenType_PixOffset_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqNRGBA64_starGenType_PixOffset_fnRecorder) AndDo(fn MoqNRGBA64_starGenType_PixOffset_doFn) *MoqNRGBA64_starGenType_PixOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqNRGBA64_starGenType_PixOffset_fnRecorder) DoReturnResults(fn MoqNRGBA64_starGenType_PixOffset_doReturnFn) *MoqNRGBA64_starGenType_PixOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_PixOffset_doFn
		DoReturnFn MoqNRGBA64_starGenType_PixOffset_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqNRGBA64_starGenType_PixOffset_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqNRGBA64_starGenType_PixOffset_resultsByParams
	for n, res := range r.Moq.ResultsByParams_PixOffset {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqNRGBA64_starGenType_PixOffset_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqNRGBA64_starGenType_PixOffset_paramsKey]*MoqNRGBA64_starGenType_PixOffset_results{},
		}
		r.Moq.ResultsByParams_PixOffset = append(r.Moq.ResultsByParams_PixOffset, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_PixOffset) {
			copy(r.Moq.ResultsByParams_PixOffset[insertAt+1:], r.Moq.ResultsByParams_PixOffset[insertAt:0])
			r.Moq.ResultsByParams_PixOffset[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_PixOffset(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqNRGBA64_starGenType_PixOffset_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqNRGBA64_starGenType_PixOffset_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqNRGBA64_starGenType_PixOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqNRGBA64_starGenType_PixOffset_doFn
				DoReturnFn MoqNRGBA64_starGenType_PixOffset_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqNRGBA64_starGenType) PrettyParams_PixOffset(params MoqNRGBA64_starGenType_PixOffset_params) string {
	return fmt.Sprintf("PixOffset(%#v, %#v)", params.X, params.Y)
}

func (m *MoqNRGBA64_starGenType) ParamsKey_PixOffset(params MoqNRGBA64_starGenType_PixOffset_params, anyParams uint64) MoqNRGBA64_starGenType_PixOffset_paramsKey {
	m.Scene.T.Helper()
	var xUsed int
	var xUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.PixOffset.X == moq.ParamIndexByValue {
			xUsed = params.X
		} else {
			xUsedHash = hash.DeepHash(params.X)
		}
	}
	var yUsed int
	var yUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.PixOffset.Y == moq.ParamIndexByValue {
			yUsed = params.Y
		} else {
			yUsedHash = hash.DeepHash(params.Y)
		}
	}
	return MoqNRGBA64_starGenType_PixOffset_paramsKey{
		Params: struct{ X, Y int }{
			X: xUsed,
			Y: yUsed,
		},
		Hashes: struct{ X, Y hash.Hash }{
			X: xUsedHash,
			Y: yUsedHash,
		},
	}
}

func (m *MoqNRGBA64_starGenType_recorder) Set(x, y int, c color.Color) *MoqNRGBA64_starGenType_Set_fnRecorder {
	return &MoqNRGBA64_starGenType_Set_fnRecorder{
		Params: MoqNRGBA64_starGenType_Set_params{
			X: x,
			Y: y,
			C: c,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqNRGBA64_starGenType_Set_fnRecorder) Any() *MoqNRGBA64_starGenType_Set_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	return &MoqNRGBA64_starGenType_Set_anyParams{Recorder: r}
}

func (a *MoqNRGBA64_starGenType_Set_anyParams) X() *MoqNRGBA64_starGenType_Set_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqNRGBA64_starGenType_Set_anyParams) Y() *MoqNRGBA64_starGenType_Set_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqNRGBA64_starGenType_Set_anyParams) C() *MoqNRGBA64_starGenType_Set_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqNRGBA64_starGenType_Set_fnRecorder) Seq() *MoqNRGBA64_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqNRGBA64_starGenType_Set_fnRecorder) NoSeq() *MoqNRGBA64_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqNRGBA64_starGenType_Set_fnRecorder) ReturnResults() *MoqNRGBA64_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_Set_doFn
		DoReturnFn MoqNRGBA64_starGenType_Set_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqNRGBA64_starGenType_Set_fnRecorder) AndDo(fn MoqNRGBA64_starGenType_Set_doFn) *MoqNRGBA64_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqNRGBA64_starGenType_Set_fnRecorder) DoReturnResults(fn MoqNRGBA64_starGenType_Set_doReturnFn) *MoqNRGBA64_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_Set_doFn
		DoReturnFn MoqNRGBA64_starGenType_Set_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqNRGBA64_starGenType_Set_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqNRGBA64_starGenType_Set_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Set {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqNRGBA64_starGenType_Set_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqNRGBA64_starGenType_Set_paramsKey]*MoqNRGBA64_starGenType_Set_results{},
		}
		r.Moq.ResultsByParams_Set = append(r.Moq.ResultsByParams_Set, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Set) {
			copy(r.Moq.ResultsByParams_Set[insertAt+1:], r.Moq.ResultsByParams_Set[insertAt:0])
			r.Moq.ResultsByParams_Set[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Set(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqNRGBA64_starGenType_Set_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqNRGBA64_starGenType_Set_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqNRGBA64_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqNRGBA64_starGenType_Set_doFn
				DoReturnFn MoqNRGBA64_starGenType_Set_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqNRGBA64_starGenType) PrettyParams_Set(params MoqNRGBA64_starGenType_Set_params) string {
	return fmt.Sprintf("Set(%#v, %#v, %#v)", params.X, params.Y, params.C)
}

func (m *MoqNRGBA64_starGenType) ParamsKey_Set(params MoqNRGBA64_starGenType_Set_params, anyParams uint64) MoqNRGBA64_starGenType_Set_paramsKey {
	m.Scene.T.Helper()
	var xUsed int
	var xUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Set.X == moq.ParamIndexByValue {
			xUsed = params.X
		} else {
			xUsedHash = hash.DeepHash(params.X)
		}
	}
	var yUsed int
	var yUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Set.Y == moq.ParamIndexByValue {
			yUsed = params.Y
		} else {
			yUsedHash = hash.DeepHash(params.Y)
		}
	}
	var cUsed color.Color
	var cUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Set.C == moq.ParamIndexByValue {
			cUsed = params.C
		} else {
			cUsedHash = hash.DeepHash(params.C)
		}
	}
	return MoqNRGBA64_starGenType_Set_paramsKey{
		Params: struct {
			X, Y int
			C    color.Color
		}{
			X: xUsed,
			Y: yUsed,
			C: cUsed,
		},
		Hashes: struct {
			X, Y hash.Hash
			C    hash.Hash
		}{
			X: xUsedHash,
			Y: yUsedHash,
			C: cUsedHash,
		},
	}
}

func (m *MoqNRGBA64_starGenType_recorder) SetNRGBA64(x, y int, c color.NRGBA64) *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder {
	return &MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder{
		Params: MoqNRGBA64_starGenType_SetNRGBA64_params{
			X: x,
			Y: y,
			C: c,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder) Any() *MoqNRGBA64_starGenType_SetNRGBA64_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetNRGBA64(r.Params))
		return nil
	}
	return &MoqNRGBA64_starGenType_SetNRGBA64_anyParams{Recorder: r}
}

func (a *MoqNRGBA64_starGenType_SetNRGBA64_anyParams) X() *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqNRGBA64_starGenType_SetNRGBA64_anyParams) Y() *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqNRGBA64_starGenType_SetNRGBA64_anyParams) C() *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder) Seq() *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetNRGBA64(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder) NoSeq() *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetNRGBA64(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder) ReturnResults() *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_SetNRGBA64_doFn
		DoReturnFn MoqNRGBA64_starGenType_SetNRGBA64_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder) AndDo(fn MoqNRGBA64_starGenType_SetNRGBA64_doFn) *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder) DoReturnResults(fn MoqNRGBA64_starGenType_SetNRGBA64_doReturnFn) *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_SetNRGBA64_doFn
		DoReturnFn MoqNRGBA64_starGenType_SetNRGBA64_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqNRGBA64_starGenType_SetNRGBA64_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetNRGBA64 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqNRGBA64_starGenType_SetNRGBA64_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqNRGBA64_starGenType_SetNRGBA64_paramsKey]*MoqNRGBA64_starGenType_SetNRGBA64_results{},
		}
		r.Moq.ResultsByParams_SetNRGBA64 = append(r.Moq.ResultsByParams_SetNRGBA64, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetNRGBA64) {
			copy(r.Moq.ResultsByParams_SetNRGBA64[insertAt+1:], r.Moq.ResultsByParams_SetNRGBA64[insertAt:0])
			r.Moq.ResultsByParams_SetNRGBA64[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetNRGBA64(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqNRGBA64_starGenType_SetNRGBA64_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqNRGBA64_starGenType_SetNRGBA64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqNRGBA64_starGenType_SetNRGBA64_doFn
				DoReturnFn MoqNRGBA64_starGenType_SetNRGBA64_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqNRGBA64_starGenType) PrettyParams_SetNRGBA64(params MoqNRGBA64_starGenType_SetNRGBA64_params) string {
	return fmt.Sprintf("SetNRGBA64(%#v, %#v, %#v)", params.X, params.Y, params.C)
}

func (m *MoqNRGBA64_starGenType) ParamsKey_SetNRGBA64(params MoqNRGBA64_starGenType_SetNRGBA64_params, anyParams uint64) MoqNRGBA64_starGenType_SetNRGBA64_paramsKey {
	m.Scene.T.Helper()
	var xUsed int
	var xUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetNRGBA64.X == moq.ParamIndexByValue {
			xUsed = params.X
		} else {
			xUsedHash = hash.DeepHash(params.X)
		}
	}
	var yUsed int
	var yUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.SetNRGBA64.Y == moq.ParamIndexByValue {
			yUsed = params.Y
		} else {
			yUsedHash = hash.DeepHash(params.Y)
		}
	}
	var cUsed color.NRGBA64
	var cUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.SetNRGBA64.C == moq.ParamIndexByValue {
			cUsed = params.C
		} else {
			cUsedHash = hash.DeepHash(params.C)
		}
	}
	return MoqNRGBA64_starGenType_SetNRGBA64_paramsKey{
		Params: struct {
			X, Y int
			C    color.NRGBA64
		}{
			X: xUsed,
			Y: yUsed,
			C: cUsed,
		},
		Hashes: struct {
			X, Y hash.Hash
			C    hash.Hash
		}{
			X: xUsedHash,
			Y: yUsedHash,
			C: cUsedHash,
		},
	}
}

func (m *MoqNRGBA64_starGenType_recorder) SubImage(param1 image.Rectangle) *MoqNRGBA64_starGenType_SubImage_fnRecorder {
	return &MoqNRGBA64_starGenType_SubImage_fnRecorder{
		Params: MoqNRGBA64_starGenType_SubImage_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqNRGBA64_starGenType_SubImage_fnRecorder) Any() *MoqNRGBA64_starGenType_SubImage_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SubImage(r.Params))
		return nil
	}
	return &MoqNRGBA64_starGenType_SubImage_anyParams{Recorder: r}
}

func (a *MoqNRGBA64_starGenType_SubImage_anyParams) Param1() *MoqNRGBA64_starGenType_SubImage_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqNRGBA64_starGenType_SubImage_fnRecorder) Seq() *MoqNRGBA64_starGenType_SubImage_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SubImage(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqNRGBA64_starGenType_SubImage_fnRecorder) NoSeq() *MoqNRGBA64_starGenType_SubImage_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SubImage(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqNRGBA64_starGenType_SubImage_fnRecorder) ReturnResults(result1 image.Image) *MoqNRGBA64_starGenType_SubImage_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 image.Image
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_SubImage_doFn
		DoReturnFn MoqNRGBA64_starGenType_SubImage_doReturnFn
	}{
		Values: &struct {
			Result1 image.Image
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqNRGBA64_starGenType_SubImage_fnRecorder) AndDo(fn MoqNRGBA64_starGenType_SubImage_doFn) *MoqNRGBA64_starGenType_SubImage_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqNRGBA64_starGenType_SubImage_fnRecorder) DoReturnResults(fn MoqNRGBA64_starGenType_SubImage_doReturnFn) *MoqNRGBA64_starGenType_SubImage_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 image.Image
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_SubImage_doFn
		DoReturnFn MoqNRGBA64_starGenType_SubImage_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqNRGBA64_starGenType_SubImage_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqNRGBA64_starGenType_SubImage_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SubImage {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqNRGBA64_starGenType_SubImage_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqNRGBA64_starGenType_SubImage_paramsKey]*MoqNRGBA64_starGenType_SubImage_results{},
		}
		r.Moq.ResultsByParams_SubImage = append(r.Moq.ResultsByParams_SubImage, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SubImage) {
			copy(r.Moq.ResultsByParams_SubImage[insertAt+1:], r.Moq.ResultsByParams_SubImage[insertAt:0])
			r.Moq.ResultsByParams_SubImage[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SubImage(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqNRGBA64_starGenType_SubImage_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqNRGBA64_starGenType_SubImage_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqNRGBA64_starGenType_SubImage_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 image.Image
				}
				Sequence   uint32
				DoFn       MoqNRGBA64_starGenType_SubImage_doFn
				DoReturnFn MoqNRGBA64_starGenType_SubImage_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqNRGBA64_starGenType) PrettyParams_SubImage(params MoqNRGBA64_starGenType_SubImage_params) string {
	return fmt.Sprintf("SubImage(%#v)", params.Param1)
}

func (m *MoqNRGBA64_starGenType) ParamsKey_SubImage(params MoqNRGBA64_starGenType_SubImage_params, anyParams uint64) MoqNRGBA64_starGenType_SubImage_paramsKey {
	m.Scene.T.Helper()
	var param1Used image.Rectangle
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SubImage.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqNRGBA64_starGenType_SubImage_paramsKey{
		Params: struct{ Param1 image.Rectangle }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqNRGBA64_starGenType_recorder) Opaque() *MoqNRGBA64_starGenType_Opaque_fnRecorder {
	return &MoqNRGBA64_starGenType_Opaque_fnRecorder{
		Params:   MoqNRGBA64_starGenType_Opaque_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqNRGBA64_starGenType_Opaque_fnRecorder) Any() *MoqNRGBA64_starGenType_Opaque_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Opaque(r.Params))
		return nil
	}
	return &MoqNRGBA64_starGenType_Opaque_anyParams{Recorder: r}
}

func (r *MoqNRGBA64_starGenType_Opaque_fnRecorder) Seq() *MoqNRGBA64_starGenType_Opaque_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Opaque(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqNRGBA64_starGenType_Opaque_fnRecorder) NoSeq() *MoqNRGBA64_starGenType_Opaque_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Opaque(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqNRGBA64_starGenType_Opaque_fnRecorder) ReturnResults(result1 bool) *MoqNRGBA64_starGenType_Opaque_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_Opaque_doFn
		DoReturnFn MoqNRGBA64_starGenType_Opaque_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqNRGBA64_starGenType_Opaque_fnRecorder) AndDo(fn MoqNRGBA64_starGenType_Opaque_doFn) *MoqNRGBA64_starGenType_Opaque_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqNRGBA64_starGenType_Opaque_fnRecorder) DoReturnResults(fn MoqNRGBA64_starGenType_Opaque_doReturnFn) *MoqNRGBA64_starGenType_Opaque_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqNRGBA64_starGenType_Opaque_doFn
		DoReturnFn MoqNRGBA64_starGenType_Opaque_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqNRGBA64_starGenType_Opaque_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqNRGBA64_starGenType_Opaque_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Opaque {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqNRGBA64_starGenType_Opaque_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqNRGBA64_starGenType_Opaque_paramsKey]*MoqNRGBA64_starGenType_Opaque_results{},
		}
		r.Moq.ResultsByParams_Opaque = append(r.Moq.ResultsByParams_Opaque, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Opaque) {
			copy(r.Moq.ResultsByParams_Opaque[insertAt+1:], r.Moq.ResultsByParams_Opaque[insertAt:0])
			r.Moq.ResultsByParams_Opaque[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Opaque(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqNRGBA64_starGenType_Opaque_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqNRGBA64_starGenType_Opaque_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqNRGBA64_starGenType_Opaque_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqNRGBA64_starGenType_Opaque_doFn
				DoReturnFn MoqNRGBA64_starGenType_Opaque_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqNRGBA64_starGenType) PrettyParams_Opaque(params MoqNRGBA64_starGenType_Opaque_params) string {
	return fmt.Sprintf("Opaque()")
}

func (m *MoqNRGBA64_starGenType) ParamsKey_Opaque(params MoqNRGBA64_starGenType_Opaque_params, anyParams uint64) MoqNRGBA64_starGenType_Opaque_paramsKey {
	m.Scene.T.Helper()
	return MoqNRGBA64_starGenType_Opaque_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqNRGBA64_starGenType) Reset() {
	m.ResultsByParams_ColorModel = nil
	m.ResultsByParams_Bounds = nil
	m.ResultsByParams_At = nil
	m.ResultsByParams_NRGBA64At = nil
	m.ResultsByParams_PixOffset = nil
	m.ResultsByParams_Set = nil
	m.ResultsByParams_SetNRGBA64 = nil
	m.ResultsByParams_SubImage = nil
	m.ResultsByParams_Opaque = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqNRGBA64_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_ColorModel {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ColorModel(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Bounds {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Bounds(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_At {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_At(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_NRGBA64At {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_NRGBA64At(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_PixOffset {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_PixOffset(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Set {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Set(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetNRGBA64 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetNRGBA64(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SubImage {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SubImage(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Opaque {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Opaque(results.Params))
			}
		}
	}
}
