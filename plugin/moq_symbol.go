// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package plugin

import (
	"plugin"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that plugin.Symbol is mocked completely
var _ plugin.Symbol = (*MoqSymbol_mock)(nil)

// MoqSymbol holds the state of a moq of the Symbol type
type MoqSymbol struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqSymbol_mock

	Runtime struct {
		ParameterIndexing struct{}
	}
}

// MoqSymbol_mock isolates the mock interface of the Symbol type
type MoqSymbol_mock struct {
	Moq *MoqSymbol
}

// MoqSymbol_recorder isolates the recorder interface of the Symbol type
type MoqSymbol_recorder struct {
	Moq *MoqSymbol
}

// NewMoqSymbol creates a new moq of the Symbol type
func NewMoqSymbol(scene *moq.Scene, config *moq.Config) *MoqSymbol {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqSymbol{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqSymbol_mock{},

		Runtime: struct {
			ParameterIndexing struct{}
		}{ParameterIndexing: struct{}{}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Symbol type
func (m *MoqSymbol) Mock() *MoqSymbol_mock { return m.Moq }

// OnCall returns the recorder implementation of the Symbol type
func (m *MoqSymbol) OnCall() *MoqSymbol_recorder {
	return &MoqSymbol_recorder{
		Moq: m,
	}
}

// Reset resets the state of the moq
func (m *MoqSymbol) Reset() {}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqSymbol) AssertExpectationsMet() { m.Scene.T.Helper() }
