// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package heap

import (
	"container/heap"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that heap.Interface is mocked
// completely
var _ heap.Interface = (*MoqInterface_mock)(nil)

// MoqInterface holds the state of a moq of the Interface type
type MoqInterface struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqInterface_mock

	ResultsByParams_Len  []MoqInterface_Len_resultsByParams
	ResultsByParams_Less []MoqInterface_Less_resultsByParams
	ResultsByParams_Swap []MoqInterface_Swap_resultsByParams
	ResultsByParams_Push []MoqInterface_Push_resultsByParams
	ResultsByParams_Pop  []MoqInterface_Pop_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Len  struct{}
			Less struct {
				Param1 moq.ParamIndexing
				J      moq.ParamIndexing
			}
			Swap struct {
				Param1 moq.ParamIndexing
				J      moq.ParamIndexing
			}
			Push struct {
				X moq.ParamIndexing
			}
			Pop struct{}
		}
	}
}

// MoqInterface_mock isolates the mock interface of the Interface type
type MoqInterface_mock struct {
	Moq *MoqInterface
}

// MoqInterface_recorder isolates the recorder interface of the Interface type
type MoqInterface_recorder struct {
	Moq *MoqInterface
}

// MoqInterface_Len_params holds the params of the Interface type
type MoqInterface_Len_params struct{}

// MoqInterface_Len_paramsKey holds the map key params of the Interface type
type MoqInterface_Len_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqInterface_Len_resultsByParams contains the results for a given set of
// parameters for the Interface type
type MoqInterface_Len_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqInterface_Len_paramsKey]*MoqInterface_Len_results
}

// MoqInterface_Len_doFn defines the type of function needed when calling AndDo
// for the Interface type
type MoqInterface_Len_doFn func()

// MoqInterface_Len_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Interface type
type MoqInterface_Len_doReturnFn func() int

// MoqInterface_Len_results holds the results of the Interface type
type MoqInterface_Len_results struct {
	Params  MoqInterface_Len_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqInterface_Len_doFn
		DoReturnFn MoqInterface_Len_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqInterface_Len_fnRecorder routes recorded function calls to the
// MoqInterface moq
type MoqInterface_Len_fnRecorder struct {
	Params    MoqInterface_Len_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqInterface_Len_results
	Moq       *MoqInterface
}

// MoqInterface_Len_anyParams isolates the any params functions of the
// Interface type
type MoqInterface_Len_anyParams struct {
	Recorder *MoqInterface_Len_fnRecorder
}

// MoqInterface_Less_params holds the params of the Interface type
type MoqInterface_Less_params struct{ Param1, J int }

// MoqInterface_Less_paramsKey holds the map key params of the Interface type
type MoqInterface_Less_paramsKey struct {
	Params struct{ Param1, J int }
	Hashes struct{ Param1, J hash.Hash }
}

// MoqInterface_Less_resultsByParams contains the results for a given set of
// parameters for the Interface type
type MoqInterface_Less_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqInterface_Less_paramsKey]*MoqInterface_Less_results
}

// MoqInterface_Less_doFn defines the type of function needed when calling
// AndDo for the Interface type
type MoqInterface_Less_doFn func(i, j int)

// MoqInterface_Less_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Interface type
type MoqInterface_Less_doReturnFn func(i, j int) bool

// MoqInterface_Less_results holds the results of the Interface type
type MoqInterface_Less_results struct {
	Params  MoqInterface_Less_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqInterface_Less_doFn
		DoReturnFn MoqInterface_Less_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqInterface_Less_fnRecorder routes recorded function calls to the
// MoqInterface moq
type MoqInterface_Less_fnRecorder struct {
	Params    MoqInterface_Less_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqInterface_Less_results
	Moq       *MoqInterface
}

// MoqInterface_Less_anyParams isolates the any params functions of the
// Interface type
type MoqInterface_Less_anyParams struct {
	Recorder *MoqInterface_Less_fnRecorder
}

// MoqInterface_Swap_params holds the params of the Interface type
type MoqInterface_Swap_params struct{ Param1, J int }

// MoqInterface_Swap_paramsKey holds the map key params of the Interface type
type MoqInterface_Swap_paramsKey struct {
	Params struct{ Param1, J int }
	Hashes struct{ Param1, J hash.Hash }
}

// MoqInterface_Swap_resultsByParams contains the results for a given set of
// parameters for the Interface type
type MoqInterface_Swap_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqInterface_Swap_paramsKey]*MoqInterface_Swap_results
}

// MoqInterface_Swap_doFn defines the type of function needed when calling
// AndDo for the Interface type
type MoqInterface_Swap_doFn func(i, j int)

// MoqInterface_Swap_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Interface type
type MoqInterface_Swap_doReturnFn func(i, j int)

// MoqInterface_Swap_results holds the results of the Interface type
type MoqInterface_Swap_results struct {
	Params  MoqInterface_Swap_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqInterface_Swap_doFn
		DoReturnFn MoqInterface_Swap_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqInterface_Swap_fnRecorder routes recorded function calls to the
// MoqInterface moq
type MoqInterface_Swap_fnRecorder struct {
	Params    MoqInterface_Swap_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqInterface_Swap_results
	Moq       *MoqInterface
}

// MoqInterface_Swap_anyParams isolates the any params functions of the
// Interface type
type MoqInterface_Swap_anyParams struct {
	Recorder *MoqInterface_Swap_fnRecorder
}

// MoqInterface_Push_params holds the params of the Interface type
type MoqInterface_Push_params struct{ X any }

// MoqInterface_Push_paramsKey holds the map key params of the Interface type
type MoqInterface_Push_paramsKey struct {
	Params struct{ X any }
	Hashes struct{ X hash.Hash }
}

// MoqInterface_Push_resultsByParams contains the results for a given set of
// parameters for the Interface type
type MoqInterface_Push_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqInterface_Push_paramsKey]*MoqInterface_Push_results
}

// MoqInterface_Push_doFn defines the type of function needed when calling
// AndDo for the Interface type
type MoqInterface_Push_doFn func(x any)

// MoqInterface_Push_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Interface type
type MoqInterface_Push_doReturnFn func(x any)

// MoqInterface_Push_results holds the results of the Interface type
type MoqInterface_Push_results struct {
	Params  MoqInterface_Push_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqInterface_Push_doFn
		DoReturnFn MoqInterface_Push_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqInterface_Push_fnRecorder routes recorded function calls to the
// MoqInterface moq
type MoqInterface_Push_fnRecorder struct {
	Params    MoqInterface_Push_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqInterface_Push_results
	Moq       *MoqInterface
}

// MoqInterface_Push_anyParams isolates the any params functions of the
// Interface type
type MoqInterface_Push_anyParams struct {
	Recorder *MoqInterface_Push_fnRecorder
}

// MoqInterface_Pop_params holds the params of the Interface type
type MoqInterface_Pop_params struct{}

// MoqInterface_Pop_paramsKey holds the map key params of the Interface type
type MoqInterface_Pop_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqInterface_Pop_resultsByParams contains the results for a given set of
// parameters for the Interface type
type MoqInterface_Pop_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqInterface_Pop_paramsKey]*MoqInterface_Pop_results
}

// MoqInterface_Pop_doFn defines the type of function needed when calling AndDo
// for the Interface type
type MoqInterface_Pop_doFn func()

// MoqInterface_Pop_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Interface type
type MoqInterface_Pop_doReturnFn func() any

// MoqInterface_Pop_results holds the results of the Interface type
type MoqInterface_Pop_results struct {
	Params  MoqInterface_Pop_params
	Results []struct {
		Values *struct {
			Result1 any
		}
		Sequence   uint32
		DoFn       MoqInterface_Pop_doFn
		DoReturnFn MoqInterface_Pop_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqInterface_Pop_fnRecorder routes recorded function calls to the
// MoqInterface moq
type MoqInterface_Pop_fnRecorder struct {
	Params    MoqInterface_Pop_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqInterface_Pop_results
	Moq       *MoqInterface
}

// MoqInterface_Pop_anyParams isolates the any params functions of the
// Interface type
type MoqInterface_Pop_anyParams struct {
	Recorder *MoqInterface_Pop_fnRecorder
}

// NewMoqInterface creates a new moq of the Interface type
func NewMoqInterface(scene *moq.Scene, config *moq.Config) *MoqInterface {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqInterface{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqInterface_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Len  struct{}
				Less struct {
					Param1 moq.ParamIndexing
					J      moq.ParamIndexing
				}
				Swap struct {
					Param1 moq.ParamIndexing
					J      moq.ParamIndexing
				}
				Push struct {
					X moq.ParamIndexing
				}
				Pop struct{}
			}
		}{ParameterIndexing: struct {
			Len  struct{}
			Less struct {
				Param1 moq.ParamIndexing
				J      moq.ParamIndexing
			}
			Swap struct {
				Param1 moq.ParamIndexing
				J      moq.ParamIndexing
			}
			Push struct {
				X moq.ParamIndexing
			}
			Pop struct{}
		}{
			Len: struct{}{},
			Less: struct {
				Param1 moq.ParamIndexing
				J      moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
				J:      moq.ParamIndexByValue,
			},
			Swap: struct {
				Param1 moq.ParamIndexing
				J      moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
				J:      moq.ParamIndexByValue,
			},
			Push: struct {
				X moq.ParamIndexing
			}{
				X: moq.ParamIndexByValue,
			},
			Pop: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Interface type
func (m *MoqInterface) Mock() *MoqInterface_mock { return m.Moq }

func (m *MoqInterface_mock) Len() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqInterface_Len_params{}
	var results *MoqInterface_Len_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Len {
		paramsKey := m.Moq.ParamsKey_Len(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Len(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Len(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Len(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqInterface_mock) Less(param1, j int) (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqInterface_Less_params{
		Param1: param1,
		J:      j,
	}
	var results *MoqInterface_Less_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Less {
		paramsKey := m.Moq.ParamsKey_Less(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Less(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Less(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Less(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1, j)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1, j)
	}
	return
}

func (m *MoqInterface_mock) Swap(param1, j int) {
	m.Moq.Scene.T.Helper()
	params := MoqInterface_Swap_params{
		Param1: param1,
		J:      j,
	}
	var results *MoqInterface_Swap_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Swap {
		paramsKey := m.Moq.ParamsKey_Swap(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Swap(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Swap(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Swap(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1, j)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(param1, j)
	}
	return
}

func (m *MoqInterface_mock) Push(x any) {
	m.Moq.Scene.T.Helper()
	params := MoqInterface_Push_params{
		X: x,
	}
	var results *MoqInterface_Push_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Push {
		paramsKey := m.Moq.ParamsKey_Push(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Push(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Push(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Push(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(x)
	}
	return
}

func (m *MoqInterface_mock) Pop() (result1 any) {
	m.Moq.Scene.T.Helper()
	params := MoqInterface_Pop_params{}
	var results *MoqInterface_Pop_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Pop {
		paramsKey := m.Moq.ParamsKey_Pop(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Pop(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Pop(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Pop(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Interface type
func (m *MoqInterface) OnCall() *MoqInterface_recorder {
	return &MoqInterface_recorder{
		Moq: m,
	}
}

func (m *MoqInterface_recorder) Len() *MoqInterface_Len_fnRecorder {
	return &MoqInterface_Len_fnRecorder{
		Params:   MoqInterface_Len_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqInterface_Len_fnRecorder) Any() *MoqInterface_Len_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Len(r.Params))
		return nil
	}
	return &MoqInterface_Len_anyParams{Recorder: r}
}

func (r *MoqInterface_Len_fnRecorder) Seq() *MoqInterface_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Len(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqInterface_Len_fnRecorder) NoSeq() *MoqInterface_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Len(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqInterface_Len_fnRecorder) ReturnResults(result1 int) *MoqInterface_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqInterface_Len_doFn
		DoReturnFn MoqInterface_Len_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqInterface_Len_fnRecorder) AndDo(fn MoqInterface_Len_doFn) *MoqInterface_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqInterface_Len_fnRecorder) DoReturnResults(fn MoqInterface_Len_doReturnFn) *MoqInterface_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqInterface_Len_doFn
		DoReturnFn MoqInterface_Len_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqInterface_Len_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqInterface_Len_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Len {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqInterface_Len_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqInterface_Len_paramsKey]*MoqInterface_Len_results{},
		}
		r.Moq.ResultsByParams_Len = append(r.Moq.ResultsByParams_Len, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Len) {
			copy(r.Moq.ResultsByParams_Len[insertAt+1:], r.Moq.ResultsByParams_Len[insertAt:0])
			r.Moq.ResultsByParams_Len[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Len(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqInterface_Len_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqInterface_Len_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqInterface_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqInterface_Len_doFn
				DoReturnFn MoqInterface_Len_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqInterface) PrettyParams_Len(params MoqInterface_Len_params) string {
	return fmt.Sprintf("Len()")
}

func (m *MoqInterface) ParamsKey_Len(params MoqInterface_Len_params, anyParams uint64) MoqInterface_Len_paramsKey {
	m.Scene.T.Helper()
	return MoqInterface_Len_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqInterface_recorder) Less(param1, j int) *MoqInterface_Less_fnRecorder {
	return &MoqInterface_Less_fnRecorder{
		Params: MoqInterface_Less_params{
			Param1: param1,
			J:      j,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqInterface_Less_fnRecorder) Any() *MoqInterface_Less_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Less(r.Params))
		return nil
	}
	return &MoqInterface_Less_anyParams{Recorder: r}
}

func (a *MoqInterface_Less_anyParams) Param1() *MoqInterface_Less_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqInterface_Less_anyParams) J() *MoqInterface_Less_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqInterface_Less_fnRecorder) Seq() *MoqInterface_Less_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Less(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqInterface_Less_fnRecorder) NoSeq() *MoqInterface_Less_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Less(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqInterface_Less_fnRecorder) ReturnResults(result1 bool) *MoqInterface_Less_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqInterface_Less_doFn
		DoReturnFn MoqInterface_Less_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqInterface_Less_fnRecorder) AndDo(fn MoqInterface_Less_doFn) *MoqInterface_Less_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqInterface_Less_fnRecorder) DoReturnResults(fn MoqInterface_Less_doReturnFn) *MoqInterface_Less_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqInterface_Less_doFn
		DoReturnFn MoqInterface_Less_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqInterface_Less_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqInterface_Less_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Less {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqInterface_Less_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqInterface_Less_paramsKey]*MoqInterface_Less_results{},
		}
		r.Moq.ResultsByParams_Less = append(r.Moq.ResultsByParams_Less, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Less) {
			copy(r.Moq.ResultsByParams_Less[insertAt+1:], r.Moq.ResultsByParams_Less[insertAt:0])
			r.Moq.ResultsByParams_Less[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Less(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqInterface_Less_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqInterface_Less_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqInterface_Less_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqInterface_Less_doFn
				DoReturnFn MoqInterface_Less_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqInterface) PrettyParams_Less(params MoqInterface_Less_params) string {
	return fmt.Sprintf("Less(%#v, %#v)", params.Param1, params.J)
}

func (m *MoqInterface) ParamsKey_Less(params MoqInterface_Less_params, anyParams uint64) MoqInterface_Less_paramsKey {
	m.Scene.T.Helper()
	var param1Used int
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Less.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	var jUsed int
	var jUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Less.J == moq.ParamIndexByValue {
			jUsed = params.J
		} else {
			jUsedHash = hash.DeepHash(params.J)
		}
	}
	return MoqInterface_Less_paramsKey{
		Params: struct{ Param1, J int }{
			Param1: param1Used,
			J:      jUsed,
		},
		Hashes: struct{ Param1, J hash.Hash }{
			Param1: param1UsedHash,
			J:      jUsedHash,
		},
	}
}

func (m *MoqInterface_recorder) Swap(param1, j int) *MoqInterface_Swap_fnRecorder {
	return &MoqInterface_Swap_fnRecorder{
		Params: MoqInterface_Swap_params{
			Param1: param1,
			J:      j,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqInterface_Swap_fnRecorder) Any() *MoqInterface_Swap_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Swap(r.Params))
		return nil
	}
	return &MoqInterface_Swap_anyParams{Recorder: r}
}

func (a *MoqInterface_Swap_anyParams) Param1() *MoqInterface_Swap_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqInterface_Swap_anyParams) J() *MoqInterface_Swap_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqInterface_Swap_fnRecorder) Seq() *MoqInterface_Swap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Swap(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqInterface_Swap_fnRecorder) NoSeq() *MoqInterface_Swap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Swap(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqInterface_Swap_fnRecorder) ReturnResults() *MoqInterface_Swap_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqInterface_Swap_doFn
		DoReturnFn MoqInterface_Swap_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqInterface_Swap_fnRecorder) AndDo(fn MoqInterface_Swap_doFn) *MoqInterface_Swap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqInterface_Swap_fnRecorder) DoReturnResults(fn MoqInterface_Swap_doReturnFn) *MoqInterface_Swap_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqInterface_Swap_doFn
		DoReturnFn MoqInterface_Swap_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqInterface_Swap_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqInterface_Swap_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Swap {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqInterface_Swap_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqInterface_Swap_paramsKey]*MoqInterface_Swap_results{},
		}
		r.Moq.ResultsByParams_Swap = append(r.Moq.ResultsByParams_Swap, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Swap) {
			copy(r.Moq.ResultsByParams_Swap[insertAt+1:], r.Moq.ResultsByParams_Swap[insertAt:0])
			r.Moq.ResultsByParams_Swap[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Swap(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqInterface_Swap_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqInterface_Swap_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqInterface_Swap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqInterface_Swap_doFn
				DoReturnFn MoqInterface_Swap_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqInterface) PrettyParams_Swap(params MoqInterface_Swap_params) string {
	return fmt.Sprintf("Swap(%#v, %#v)", params.Param1, params.J)
}

func (m *MoqInterface) ParamsKey_Swap(params MoqInterface_Swap_params, anyParams uint64) MoqInterface_Swap_paramsKey {
	m.Scene.T.Helper()
	var param1Used int
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Swap.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	var jUsed int
	var jUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Swap.J == moq.ParamIndexByValue {
			jUsed = params.J
		} else {
			jUsedHash = hash.DeepHash(params.J)
		}
	}
	return MoqInterface_Swap_paramsKey{
		Params: struct{ Param1, J int }{
			Param1: param1Used,
			J:      jUsed,
		},
		Hashes: struct{ Param1, J hash.Hash }{
			Param1: param1UsedHash,
			J:      jUsedHash,
		},
	}
}

func (m *MoqInterface_recorder) Push(x any) *MoqInterface_Push_fnRecorder {
	return &MoqInterface_Push_fnRecorder{
		Params: MoqInterface_Push_params{
			X: x,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqInterface_Push_fnRecorder) Any() *MoqInterface_Push_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Push(r.Params))
		return nil
	}
	return &MoqInterface_Push_anyParams{Recorder: r}
}

func (a *MoqInterface_Push_anyParams) X() *MoqInterface_Push_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqInterface_Push_fnRecorder) Seq() *MoqInterface_Push_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Push(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqInterface_Push_fnRecorder) NoSeq() *MoqInterface_Push_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Push(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqInterface_Push_fnRecorder) ReturnResults() *MoqInterface_Push_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqInterface_Push_doFn
		DoReturnFn MoqInterface_Push_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqInterface_Push_fnRecorder) AndDo(fn MoqInterface_Push_doFn) *MoqInterface_Push_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqInterface_Push_fnRecorder) DoReturnResults(fn MoqInterface_Push_doReturnFn) *MoqInterface_Push_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqInterface_Push_doFn
		DoReturnFn MoqInterface_Push_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqInterface_Push_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqInterface_Push_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Push {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqInterface_Push_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqInterface_Push_paramsKey]*MoqInterface_Push_results{},
		}
		r.Moq.ResultsByParams_Push = append(r.Moq.ResultsByParams_Push, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Push) {
			copy(r.Moq.ResultsByParams_Push[insertAt+1:], r.Moq.ResultsByParams_Push[insertAt:0])
			r.Moq.ResultsByParams_Push[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Push(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqInterface_Push_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqInterface_Push_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqInterface_Push_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqInterface_Push_doFn
				DoReturnFn MoqInterface_Push_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqInterface) PrettyParams_Push(params MoqInterface_Push_params) string {
	return fmt.Sprintf("Push(%#v)", params.X)
}

func (m *MoqInterface) ParamsKey_Push(params MoqInterface_Push_params, anyParams uint64) MoqInterface_Push_paramsKey {
	m.Scene.T.Helper()
	var xUsed any
	var xUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Push.X == moq.ParamIndexByValue {
			xUsed = params.X
		} else {
			xUsedHash = hash.DeepHash(params.X)
		}
	}
	return MoqInterface_Push_paramsKey{
		Params: struct{ X any }{
			X: xUsed,
		},
		Hashes: struct{ X hash.Hash }{
			X: xUsedHash,
		},
	}
}

func (m *MoqInterface_recorder) Pop() *MoqInterface_Pop_fnRecorder {
	return &MoqInterface_Pop_fnRecorder{
		Params:   MoqInterface_Pop_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqInterface_Pop_fnRecorder) Any() *MoqInterface_Pop_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Pop(r.Params))
		return nil
	}
	return &MoqInterface_Pop_anyParams{Recorder: r}
}

func (r *MoqInterface_Pop_fnRecorder) Seq() *MoqInterface_Pop_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Pop(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqInterface_Pop_fnRecorder) NoSeq() *MoqInterface_Pop_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Pop(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqInterface_Pop_fnRecorder) ReturnResults(result1 any) *MoqInterface_Pop_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 any
		}
		Sequence   uint32
		DoFn       MoqInterface_Pop_doFn
		DoReturnFn MoqInterface_Pop_doReturnFn
	}{
		Values: &struct {
			Result1 any
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqInterface_Pop_fnRecorder) AndDo(fn MoqInterface_Pop_doFn) *MoqInterface_Pop_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqInterface_Pop_fnRecorder) DoReturnResults(fn MoqInterface_Pop_doReturnFn) *MoqInterface_Pop_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 any
		}
		Sequence   uint32
		DoFn       MoqInterface_Pop_doFn
		DoReturnFn MoqInterface_Pop_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqInterface_Pop_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqInterface_Pop_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Pop {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqInterface_Pop_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqInterface_Pop_paramsKey]*MoqInterface_Pop_results{},
		}
		r.Moq.ResultsByParams_Pop = append(r.Moq.ResultsByParams_Pop, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Pop) {
			copy(r.Moq.ResultsByParams_Pop[insertAt+1:], r.Moq.ResultsByParams_Pop[insertAt:0])
			r.Moq.ResultsByParams_Pop[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Pop(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqInterface_Pop_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqInterface_Pop_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqInterface_Pop_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 any
				}
				Sequence   uint32
				DoFn       MoqInterface_Pop_doFn
				DoReturnFn MoqInterface_Pop_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqInterface) PrettyParams_Pop(params MoqInterface_Pop_params) string {
	return fmt.Sprintf("Pop()")
}

func (m *MoqInterface) ParamsKey_Pop(params MoqInterface_Pop_params, anyParams uint64) MoqInterface_Pop_paramsKey {
	m.Scene.T.Helper()
	return MoqInterface_Pop_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqInterface) Reset() {
	m.ResultsByParams_Len = nil
	m.ResultsByParams_Less = nil
	m.ResultsByParams_Swap = nil
	m.ResultsByParams_Push = nil
	m.ResultsByParams_Pop = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqInterface) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Len {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Len(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Less {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Less(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Swap {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Swap(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Push {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Push(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Pop {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Pop(results.Params))
			}
		}
	}
}
