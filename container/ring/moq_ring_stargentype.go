// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package ring

import (
	"container/ring"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that ring.Ring_starGenType is mocked
// completely
var _ Ring_starGenType = (*MoqRing_starGenType_mock)(nil)

// Ring_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Ring_starGenType interface {
	Next() *ring.Ring
	Prev() *ring.Ring
	Move(n int) *ring.Ring
	Link(s *ring.Ring) *ring.Ring
	Unlink(n int) *ring.Ring
	Len() int
	Do(f func(any))
}

// MoqRing_starGenType holds the state of a moq of the Ring_starGenType type
type MoqRing_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqRing_starGenType_mock

	ResultsByParams_Next   []MoqRing_starGenType_Next_resultsByParams
	ResultsByParams_Prev   []MoqRing_starGenType_Prev_resultsByParams
	ResultsByParams_Move   []MoqRing_starGenType_Move_resultsByParams
	ResultsByParams_Link   []MoqRing_starGenType_Link_resultsByParams
	ResultsByParams_Unlink []MoqRing_starGenType_Unlink_resultsByParams
	ResultsByParams_Len    []MoqRing_starGenType_Len_resultsByParams
	ResultsByParams_Do     []MoqRing_starGenType_Do_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Next struct{}
			Prev struct{}
			Move struct {
				N moq.ParamIndexing
			}
			Link struct {
				S moq.ParamIndexing
			}
			Unlink struct {
				N moq.ParamIndexing
			}
			Len struct{}
			Do  struct {
				F moq.ParamIndexing
			}
		}
	}
	// MoqRing_starGenType_mock isolates the mock interface of the Ring_starGenType
}

// type
type MoqRing_starGenType_mock struct {
	Moq *MoqRing_starGenType
}

// MoqRing_starGenType_recorder isolates the recorder interface of the
// Ring_starGenType type
type MoqRing_starGenType_recorder struct {
	Moq *MoqRing_starGenType
}

// MoqRing_starGenType_Next_params holds the params of the Ring_starGenType
// type
type MoqRing_starGenType_Next_params struct{}

// MoqRing_starGenType_Next_paramsKey holds the map key params of the
// Ring_starGenType type
type MoqRing_starGenType_Next_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRing_starGenType_Next_resultsByParams contains the results for a given
// set of parameters for the Ring_starGenType type
type MoqRing_starGenType_Next_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRing_starGenType_Next_paramsKey]*MoqRing_starGenType_Next_results
}

// MoqRing_starGenType_Next_doFn defines the type of function needed when
// calling AndDo for the Ring_starGenType type
type MoqRing_starGenType_Next_doFn func()

// MoqRing_starGenType_Next_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Ring_starGenType type
type MoqRing_starGenType_Next_doReturnFn func() *ring.Ring

// MoqRing_starGenType_Next_results holds the results of the Ring_starGenType
// type
type MoqRing_starGenType_Next_results struct {
	Params  MoqRing_starGenType_Next_params
	Results []struct {
		Values *struct {
			Result1 *ring.Ring
		}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Next_doFn
		DoReturnFn MoqRing_starGenType_Next_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRing_starGenType_Next_fnRecorder routes recorded function calls to the
// MoqRing_starGenType moq
type MoqRing_starGenType_Next_fnRecorder struct {
	Params    MoqRing_starGenType_Next_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRing_starGenType_Next_results
	Moq       *MoqRing_starGenType
}

// MoqRing_starGenType_Next_anyParams isolates the any params functions of the
// Ring_starGenType type
type MoqRing_starGenType_Next_anyParams struct {
	Recorder *MoqRing_starGenType_Next_fnRecorder
}

// MoqRing_starGenType_Prev_params holds the params of the Ring_starGenType
// type
type MoqRing_starGenType_Prev_params struct{}

// MoqRing_starGenType_Prev_paramsKey holds the map key params of the
// Ring_starGenType type
type MoqRing_starGenType_Prev_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRing_starGenType_Prev_resultsByParams contains the results for a given
// set of parameters for the Ring_starGenType type
type MoqRing_starGenType_Prev_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRing_starGenType_Prev_paramsKey]*MoqRing_starGenType_Prev_results
}

// MoqRing_starGenType_Prev_doFn defines the type of function needed when
// calling AndDo for the Ring_starGenType type
type MoqRing_starGenType_Prev_doFn func()

// MoqRing_starGenType_Prev_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Ring_starGenType type
type MoqRing_starGenType_Prev_doReturnFn func() *ring.Ring

// MoqRing_starGenType_Prev_results holds the results of the Ring_starGenType
// type
type MoqRing_starGenType_Prev_results struct {
	Params  MoqRing_starGenType_Prev_params
	Results []struct {
		Values *struct {
			Result1 *ring.Ring
		}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Prev_doFn
		DoReturnFn MoqRing_starGenType_Prev_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRing_starGenType_Prev_fnRecorder routes recorded function calls to the
// MoqRing_starGenType moq
type MoqRing_starGenType_Prev_fnRecorder struct {
	Params    MoqRing_starGenType_Prev_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRing_starGenType_Prev_results
	Moq       *MoqRing_starGenType
}

// MoqRing_starGenType_Prev_anyParams isolates the any params functions of the
// Ring_starGenType type
type MoqRing_starGenType_Prev_anyParams struct {
	Recorder *MoqRing_starGenType_Prev_fnRecorder
}

// MoqRing_starGenType_Move_params holds the params of the Ring_starGenType
// type
type MoqRing_starGenType_Move_params struct{ N int }

// MoqRing_starGenType_Move_paramsKey holds the map key params of the
// Ring_starGenType type
type MoqRing_starGenType_Move_paramsKey struct {
	Params struct{ N int }
	Hashes struct{ N hash.Hash }
}

// MoqRing_starGenType_Move_resultsByParams contains the results for a given
// set of parameters for the Ring_starGenType type
type MoqRing_starGenType_Move_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRing_starGenType_Move_paramsKey]*MoqRing_starGenType_Move_results
}

// MoqRing_starGenType_Move_doFn defines the type of function needed when
// calling AndDo for the Ring_starGenType type
type MoqRing_starGenType_Move_doFn func(n int)

// MoqRing_starGenType_Move_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Ring_starGenType type
type MoqRing_starGenType_Move_doReturnFn func(n int) *ring.Ring

// MoqRing_starGenType_Move_results holds the results of the Ring_starGenType
// type
type MoqRing_starGenType_Move_results struct {
	Params  MoqRing_starGenType_Move_params
	Results []struct {
		Values *struct {
			Result1 *ring.Ring
		}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Move_doFn
		DoReturnFn MoqRing_starGenType_Move_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRing_starGenType_Move_fnRecorder routes recorded function calls to the
// MoqRing_starGenType moq
type MoqRing_starGenType_Move_fnRecorder struct {
	Params    MoqRing_starGenType_Move_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRing_starGenType_Move_results
	Moq       *MoqRing_starGenType
}

// MoqRing_starGenType_Move_anyParams isolates the any params functions of the
// Ring_starGenType type
type MoqRing_starGenType_Move_anyParams struct {
	Recorder *MoqRing_starGenType_Move_fnRecorder
}

// MoqRing_starGenType_Link_params holds the params of the Ring_starGenType
// type
type MoqRing_starGenType_Link_params struct{ S *ring.Ring }

// MoqRing_starGenType_Link_paramsKey holds the map key params of the
// Ring_starGenType type
type MoqRing_starGenType_Link_paramsKey struct {
	Params struct{ S *ring.Ring }
	Hashes struct{ S hash.Hash }
}

// MoqRing_starGenType_Link_resultsByParams contains the results for a given
// set of parameters for the Ring_starGenType type
type MoqRing_starGenType_Link_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRing_starGenType_Link_paramsKey]*MoqRing_starGenType_Link_results
}

// MoqRing_starGenType_Link_doFn defines the type of function needed when
// calling AndDo for the Ring_starGenType type
type MoqRing_starGenType_Link_doFn func(s *ring.Ring)

// MoqRing_starGenType_Link_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Ring_starGenType type
type MoqRing_starGenType_Link_doReturnFn func(s *ring.Ring) *ring.Ring

// MoqRing_starGenType_Link_results holds the results of the Ring_starGenType
// type
type MoqRing_starGenType_Link_results struct {
	Params  MoqRing_starGenType_Link_params
	Results []struct {
		Values *struct {
			Result1 *ring.Ring
		}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Link_doFn
		DoReturnFn MoqRing_starGenType_Link_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRing_starGenType_Link_fnRecorder routes recorded function calls to the
// MoqRing_starGenType moq
type MoqRing_starGenType_Link_fnRecorder struct {
	Params    MoqRing_starGenType_Link_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRing_starGenType_Link_results
	Moq       *MoqRing_starGenType
}

// MoqRing_starGenType_Link_anyParams isolates the any params functions of the
// Ring_starGenType type
type MoqRing_starGenType_Link_anyParams struct {
	Recorder *MoqRing_starGenType_Link_fnRecorder
}

// MoqRing_starGenType_Unlink_params holds the params of the Ring_starGenType
// type
type MoqRing_starGenType_Unlink_params struct{ N int }

// MoqRing_starGenType_Unlink_paramsKey holds the map key params of the
// Ring_starGenType type
type MoqRing_starGenType_Unlink_paramsKey struct {
	Params struct{ N int }
	Hashes struct{ N hash.Hash }
}

// MoqRing_starGenType_Unlink_resultsByParams contains the results for a given
// set of parameters for the Ring_starGenType type
type MoqRing_starGenType_Unlink_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRing_starGenType_Unlink_paramsKey]*MoqRing_starGenType_Unlink_results
}

// MoqRing_starGenType_Unlink_doFn defines the type of function needed when
// calling AndDo for the Ring_starGenType type
type MoqRing_starGenType_Unlink_doFn func(n int)

// MoqRing_starGenType_Unlink_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Ring_starGenType type
type MoqRing_starGenType_Unlink_doReturnFn func(n int) *ring.Ring

// MoqRing_starGenType_Unlink_results holds the results of the Ring_starGenType
// type
type MoqRing_starGenType_Unlink_results struct {
	Params  MoqRing_starGenType_Unlink_params
	Results []struct {
		Values *struct {
			Result1 *ring.Ring
		}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Unlink_doFn
		DoReturnFn MoqRing_starGenType_Unlink_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRing_starGenType_Unlink_fnRecorder routes recorded function calls to the
// MoqRing_starGenType moq
type MoqRing_starGenType_Unlink_fnRecorder struct {
	Params    MoqRing_starGenType_Unlink_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRing_starGenType_Unlink_results
	Moq       *MoqRing_starGenType
}

// MoqRing_starGenType_Unlink_anyParams isolates the any params functions of
// the Ring_starGenType type
type MoqRing_starGenType_Unlink_anyParams struct {
	Recorder *MoqRing_starGenType_Unlink_fnRecorder
}

// MoqRing_starGenType_Len_params holds the params of the Ring_starGenType type
type MoqRing_starGenType_Len_params struct{}

// MoqRing_starGenType_Len_paramsKey holds the map key params of the
// Ring_starGenType type
type MoqRing_starGenType_Len_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRing_starGenType_Len_resultsByParams contains the results for a given set
// of parameters for the Ring_starGenType type
type MoqRing_starGenType_Len_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRing_starGenType_Len_paramsKey]*MoqRing_starGenType_Len_results
}

// MoqRing_starGenType_Len_doFn defines the type of function needed when
// calling AndDo for the Ring_starGenType type
type MoqRing_starGenType_Len_doFn func()

// MoqRing_starGenType_Len_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Ring_starGenType type
type MoqRing_starGenType_Len_doReturnFn func() int

// MoqRing_starGenType_Len_results holds the results of the Ring_starGenType
// type
type MoqRing_starGenType_Len_results struct {
	Params  MoqRing_starGenType_Len_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Len_doFn
		DoReturnFn MoqRing_starGenType_Len_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRing_starGenType_Len_fnRecorder routes recorded function calls to the
// MoqRing_starGenType moq
type MoqRing_starGenType_Len_fnRecorder struct {
	Params    MoqRing_starGenType_Len_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRing_starGenType_Len_results
	Moq       *MoqRing_starGenType
}

// MoqRing_starGenType_Len_anyParams isolates the any params functions of the
// Ring_starGenType type
type MoqRing_starGenType_Len_anyParams struct {
	Recorder *MoqRing_starGenType_Len_fnRecorder
}

// MoqRing_starGenType_Do_params holds the params of the Ring_starGenType type
type MoqRing_starGenType_Do_params struct{ F func(any) }

// MoqRing_starGenType_Do_paramsKey holds the map key params of the
// Ring_starGenType type
type MoqRing_starGenType_Do_paramsKey struct {
	Params struct{}
	Hashes struct{ F hash.Hash }
}

// MoqRing_starGenType_Do_resultsByParams contains the results for a given set
// of parameters for the Ring_starGenType type
type MoqRing_starGenType_Do_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRing_starGenType_Do_paramsKey]*MoqRing_starGenType_Do_results
}

// MoqRing_starGenType_Do_doFn defines the type of function needed when calling
// AndDo for the Ring_starGenType type
type MoqRing_starGenType_Do_doFn func(f func(any))

// MoqRing_starGenType_Do_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Ring_starGenType type
type MoqRing_starGenType_Do_doReturnFn func(f func(any))

// MoqRing_starGenType_Do_results holds the results of the Ring_starGenType
// type
type MoqRing_starGenType_Do_results struct {
	Params  MoqRing_starGenType_Do_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Do_doFn
		DoReturnFn MoqRing_starGenType_Do_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRing_starGenType_Do_fnRecorder routes recorded function calls to the
// MoqRing_starGenType moq
type MoqRing_starGenType_Do_fnRecorder struct {
	Params    MoqRing_starGenType_Do_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRing_starGenType_Do_results
	Moq       *MoqRing_starGenType
}

// MoqRing_starGenType_Do_anyParams isolates the any params functions of the
// Ring_starGenType type
type MoqRing_starGenType_Do_anyParams struct {
	Recorder *MoqRing_starGenType_Do_fnRecorder
}

// NewMoqRing_starGenType creates a new moq of the Ring_starGenType type
func NewMoqRing_starGenType(scene *moq.Scene, config *moq.Config) *MoqRing_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqRing_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqRing_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Next struct{}
				Prev struct{}
				Move struct {
					N moq.ParamIndexing
				}
				Link struct {
					S moq.ParamIndexing
				}
				Unlink struct {
					N moq.ParamIndexing
				}
				Len struct{}
				Do  struct {
					F moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Next struct{}
			Prev struct{}
			Move struct {
				N moq.ParamIndexing
			}
			Link struct {
				S moq.ParamIndexing
			}
			Unlink struct {
				N moq.ParamIndexing
			}
			Len struct{}
			Do  struct {
				F moq.ParamIndexing
			}
		}{
			Next: struct{}{},
			Prev: struct{}{},
			Move: struct {
				N moq.ParamIndexing
			}{
				N: moq.ParamIndexByValue,
			},
			Link: struct {
				S moq.ParamIndexing
			}{
				S: moq.ParamIndexByHash,
			},
			Unlink: struct {
				N moq.ParamIndexing
			}{
				N: moq.ParamIndexByValue,
			},
			Len: struct{}{},
			Do: struct {
				F moq.ParamIndexing
			}{
				F: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Ring_starGenType type
func (m *MoqRing_starGenType) Mock() *MoqRing_starGenType_mock { return m.Moq }

func (m *MoqRing_starGenType_mock) Next() (result1 *ring.Ring) {
	m.Moq.Scene.T.Helper()
	params := MoqRing_starGenType_Next_params{}
	var results *MoqRing_starGenType_Next_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Next {
		paramsKey := m.Moq.ParamsKey_Next(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Next(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Next(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Next(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRing_starGenType_mock) Prev() (result1 *ring.Ring) {
	m.Moq.Scene.T.Helper()
	params := MoqRing_starGenType_Prev_params{}
	var results *MoqRing_starGenType_Prev_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Prev {
		paramsKey := m.Moq.ParamsKey_Prev(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Prev(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Prev(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Prev(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRing_starGenType_mock) Move(n int) (result1 *ring.Ring) {
	m.Moq.Scene.T.Helper()
	params := MoqRing_starGenType_Move_params{
		N: n,
	}
	var results *MoqRing_starGenType_Move_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Move {
		paramsKey := m.Moq.ParamsKey_Move(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Move(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Move(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Move(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(n)
	}
	return
}

func (m *MoqRing_starGenType_mock) Link(s *ring.Ring) (result1 *ring.Ring) {
	m.Moq.Scene.T.Helper()
	params := MoqRing_starGenType_Link_params{
		S: s,
	}
	var results *MoqRing_starGenType_Link_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Link {
		paramsKey := m.Moq.ParamsKey_Link(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Link(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Link(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Link(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(s)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(s)
	}
	return
}

func (m *MoqRing_starGenType_mock) Unlink(n int) (result1 *ring.Ring) {
	m.Moq.Scene.T.Helper()
	params := MoqRing_starGenType_Unlink_params{
		N: n,
	}
	var results *MoqRing_starGenType_Unlink_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Unlink {
		paramsKey := m.Moq.ParamsKey_Unlink(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Unlink(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Unlink(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Unlink(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(n)
	}
	return
}

func (m *MoqRing_starGenType_mock) Len() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqRing_starGenType_Len_params{}
	var results *MoqRing_starGenType_Len_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Len {
		paramsKey := m.Moq.ParamsKey_Len(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Len(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Len(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Len(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRing_starGenType_mock) Do(f func(any)) {
	m.Moq.Scene.T.Helper()
	params := MoqRing_starGenType_Do_params{
		F: f,
	}
	var results *MoqRing_starGenType_Do_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Do {
		paramsKey := m.Moq.ParamsKey_Do(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Do(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Do(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Do(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(f)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(f)
	}
	return
}

// OnCall returns the recorder implementation of the Ring_starGenType type
func (m *MoqRing_starGenType) OnCall() *MoqRing_starGenType_recorder {
	return &MoqRing_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqRing_starGenType_recorder) Next() *MoqRing_starGenType_Next_fnRecorder {
	return &MoqRing_starGenType_Next_fnRecorder{
		Params:   MoqRing_starGenType_Next_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRing_starGenType_Next_fnRecorder) Any() *MoqRing_starGenType_Next_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	return &MoqRing_starGenType_Next_anyParams{Recorder: r}
}

func (r *MoqRing_starGenType_Next_fnRecorder) Seq() *MoqRing_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRing_starGenType_Next_fnRecorder) NoSeq() *MoqRing_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRing_starGenType_Next_fnRecorder) ReturnResults(result1 *ring.Ring) *MoqRing_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *ring.Ring
		}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Next_doFn
		DoReturnFn MoqRing_starGenType_Next_doReturnFn
	}{
		Values: &struct {
			Result1 *ring.Ring
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRing_starGenType_Next_fnRecorder) AndDo(fn MoqRing_starGenType_Next_doFn) *MoqRing_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRing_starGenType_Next_fnRecorder) DoReturnResults(fn MoqRing_starGenType_Next_doReturnFn) *MoqRing_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *ring.Ring
		}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Next_doFn
		DoReturnFn MoqRing_starGenType_Next_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRing_starGenType_Next_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRing_starGenType_Next_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Next {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRing_starGenType_Next_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRing_starGenType_Next_paramsKey]*MoqRing_starGenType_Next_results{},
		}
		r.Moq.ResultsByParams_Next = append(r.Moq.ResultsByParams_Next, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Next) {
			copy(r.Moq.ResultsByParams_Next[insertAt+1:], r.Moq.ResultsByParams_Next[insertAt:0])
			r.Moq.ResultsByParams_Next[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Next(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRing_starGenType_Next_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRing_starGenType_Next_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRing_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *ring.Ring
				}
				Sequence   uint32
				DoFn       MoqRing_starGenType_Next_doFn
				DoReturnFn MoqRing_starGenType_Next_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRing_starGenType) PrettyParams_Next(params MoqRing_starGenType_Next_params) string {
	return fmt.Sprintf("Next()")
}

func (m *MoqRing_starGenType) ParamsKey_Next(params MoqRing_starGenType_Next_params, anyParams uint64) MoqRing_starGenType_Next_paramsKey {
	m.Scene.T.Helper()
	return MoqRing_starGenType_Next_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRing_starGenType_recorder) Prev() *MoqRing_starGenType_Prev_fnRecorder {
	return &MoqRing_starGenType_Prev_fnRecorder{
		Params:   MoqRing_starGenType_Prev_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRing_starGenType_Prev_fnRecorder) Any() *MoqRing_starGenType_Prev_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Prev(r.Params))
		return nil
	}
	return &MoqRing_starGenType_Prev_anyParams{Recorder: r}
}

func (r *MoqRing_starGenType_Prev_fnRecorder) Seq() *MoqRing_starGenType_Prev_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Prev(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRing_starGenType_Prev_fnRecorder) NoSeq() *MoqRing_starGenType_Prev_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Prev(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRing_starGenType_Prev_fnRecorder) ReturnResults(result1 *ring.Ring) *MoqRing_starGenType_Prev_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *ring.Ring
		}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Prev_doFn
		DoReturnFn MoqRing_starGenType_Prev_doReturnFn
	}{
		Values: &struct {
			Result1 *ring.Ring
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRing_starGenType_Prev_fnRecorder) AndDo(fn MoqRing_starGenType_Prev_doFn) *MoqRing_starGenType_Prev_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRing_starGenType_Prev_fnRecorder) DoReturnResults(fn MoqRing_starGenType_Prev_doReturnFn) *MoqRing_starGenType_Prev_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *ring.Ring
		}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Prev_doFn
		DoReturnFn MoqRing_starGenType_Prev_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRing_starGenType_Prev_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRing_starGenType_Prev_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Prev {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRing_starGenType_Prev_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRing_starGenType_Prev_paramsKey]*MoqRing_starGenType_Prev_results{},
		}
		r.Moq.ResultsByParams_Prev = append(r.Moq.ResultsByParams_Prev, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Prev) {
			copy(r.Moq.ResultsByParams_Prev[insertAt+1:], r.Moq.ResultsByParams_Prev[insertAt:0])
			r.Moq.ResultsByParams_Prev[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Prev(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRing_starGenType_Prev_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRing_starGenType_Prev_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRing_starGenType_Prev_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *ring.Ring
				}
				Sequence   uint32
				DoFn       MoqRing_starGenType_Prev_doFn
				DoReturnFn MoqRing_starGenType_Prev_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRing_starGenType) PrettyParams_Prev(params MoqRing_starGenType_Prev_params) string {
	return fmt.Sprintf("Prev()")
}

func (m *MoqRing_starGenType) ParamsKey_Prev(params MoqRing_starGenType_Prev_params, anyParams uint64) MoqRing_starGenType_Prev_paramsKey {
	m.Scene.T.Helper()
	return MoqRing_starGenType_Prev_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRing_starGenType_recorder) Move(n int) *MoqRing_starGenType_Move_fnRecorder {
	return &MoqRing_starGenType_Move_fnRecorder{
		Params: MoqRing_starGenType_Move_params{
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRing_starGenType_Move_fnRecorder) Any() *MoqRing_starGenType_Move_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Move(r.Params))
		return nil
	}
	return &MoqRing_starGenType_Move_anyParams{Recorder: r}
}

func (a *MoqRing_starGenType_Move_anyParams) N() *MoqRing_starGenType_Move_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRing_starGenType_Move_fnRecorder) Seq() *MoqRing_starGenType_Move_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Move(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRing_starGenType_Move_fnRecorder) NoSeq() *MoqRing_starGenType_Move_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Move(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRing_starGenType_Move_fnRecorder) ReturnResults(result1 *ring.Ring) *MoqRing_starGenType_Move_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *ring.Ring
		}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Move_doFn
		DoReturnFn MoqRing_starGenType_Move_doReturnFn
	}{
		Values: &struct {
			Result1 *ring.Ring
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRing_starGenType_Move_fnRecorder) AndDo(fn MoqRing_starGenType_Move_doFn) *MoqRing_starGenType_Move_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRing_starGenType_Move_fnRecorder) DoReturnResults(fn MoqRing_starGenType_Move_doReturnFn) *MoqRing_starGenType_Move_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *ring.Ring
		}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Move_doFn
		DoReturnFn MoqRing_starGenType_Move_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRing_starGenType_Move_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRing_starGenType_Move_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Move {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRing_starGenType_Move_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRing_starGenType_Move_paramsKey]*MoqRing_starGenType_Move_results{},
		}
		r.Moq.ResultsByParams_Move = append(r.Moq.ResultsByParams_Move, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Move) {
			copy(r.Moq.ResultsByParams_Move[insertAt+1:], r.Moq.ResultsByParams_Move[insertAt:0])
			r.Moq.ResultsByParams_Move[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Move(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRing_starGenType_Move_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRing_starGenType_Move_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRing_starGenType_Move_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *ring.Ring
				}
				Sequence   uint32
				DoFn       MoqRing_starGenType_Move_doFn
				DoReturnFn MoqRing_starGenType_Move_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRing_starGenType) PrettyParams_Move(params MoqRing_starGenType_Move_params) string {
	return fmt.Sprintf("Move(%#v)", params.N)
}

func (m *MoqRing_starGenType) ParamsKey_Move(params MoqRing_starGenType_Move_params, anyParams uint64) MoqRing_starGenType_Move_paramsKey {
	m.Scene.T.Helper()
	var nUsed int
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Move.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqRing_starGenType_Move_paramsKey{
		Params: struct{ N int }{
			N: nUsed,
		},
		Hashes: struct{ N hash.Hash }{
			N: nUsedHash,
		},
	}
}

func (m *MoqRing_starGenType_recorder) Link(s *ring.Ring) *MoqRing_starGenType_Link_fnRecorder {
	return &MoqRing_starGenType_Link_fnRecorder{
		Params: MoqRing_starGenType_Link_params{
			S: s,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRing_starGenType_Link_fnRecorder) Any() *MoqRing_starGenType_Link_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Link(r.Params))
		return nil
	}
	return &MoqRing_starGenType_Link_anyParams{Recorder: r}
}

func (a *MoqRing_starGenType_Link_anyParams) S() *MoqRing_starGenType_Link_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRing_starGenType_Link_fnRecorder) Seq() *MoqRing_starGenType_Link_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Link(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRing_starGenType_Link_fnRecorder) NoSeq() *MoqRing_starGenType_Link_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Link(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRing_starGenType_Link_fnRecorder) ReturnResults(result1 *ring.Ring) *MoqRing_starGenType_Link_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *ring.Ring
		}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Link_doFn
		DoReturnFn MoqRing_starGenType_Link_doReturnFn
	}{
		Values: &struct {
			Result1 *ring.Ring
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRing_starGenType_Link_fnRecorder) AndDo(fn MoqRing_starGenType_Link_doFn) *MoqRing_starGenType_Link_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRing_starGenType_Link_fnRecorder) DoReturnResults(fn MoqRing_starGenType_Link_doReturnFn) *MoqRing_starGenType_Link_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *ring.Ring
		}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Link_doFn
		DoReturnFn MoqRing_starGenType_Link_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRing_starGenType_Link_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRing_starGenType_Link_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Link {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRing_starGenType_Link_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRing_starGenType_Link_paramsKey]*MoqRing_starGenType_Link_results{},
		}
		r.Moq.ResultsByParams_Link = append(r.Moq.ResultsByParams_Link, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Link) {
			copy(r.Moq.ResultsByParams_Link[insertAt+1:], r.Moq.ResultsByParams_Link[insertAt:0])
			r.Moq.ResultsByParams_Link[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Link(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRing_starGenType_Link_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRing_starGenType_Link_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRing_starGenType_Link_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *ring.Ring
				}
				Sequence   uint32
				DoFn       MoqRing_starGenType_Link_doFn
				DoReturnFn MoqRing_starGenType_Link_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRing_starGenType) PrettyParams_Link(params MoqRing_starGenType_Link_params) string {
	return fmt.Sprintf("Link(%#v)", params.S)
}

func (m *MoqRing_starGenType) ParamsKey_Link(params MoqRing_starGenType_Link_params, anyParams uint64) MoqRing_starGenType_Link_paramsKey {
	m.Scene.T.Helper()
	var sUsed *ring.Ring
	var sUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Link.S == moq.ParamIndexByValue {
			sUsed = params.S
		} else {
			sUsedHash = hash.DeepHash(params.S)
		}
	}
	return MoqRing_starGenType_Link_paramsKey{
		Params: struct{ S *ring.Ring }{
			S: sUsed,
		},
		Hashes: struct{ S hash.Hash }{
			S: sUsedHash,
		},
	}
}

func (m *MoqRing_starGenType_recorder) Unlink(n int) *MoqRing_starGenType_Unlink_fnRecorder {
	return &MoqRing_starGenType_Unlink_fnRecorder{
		Params: MoqRing_starGenType_Unlink_params{
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRing_starGenType_Unlink_fnRecorder) Any() *MoqRing_starGenType_Unlink_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Unlink(r.Params))
		return nil
	}
	return &MoqRing_starGenType_Unlink_anyParams{Recorder: r}
}

func (a *MoqRing_starGenType_Unlink_anyParams) N() *MoqRing_starGenType_Unlink_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRing_starGenType_Unlink_fnRecorder) Seq() *MoqRing_starGenType_Unlink_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Unlink(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRing_starGenType_Unlink_fnRecorder) NoSeq() *MoqRing_starGenType_Unlink_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Unlink(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRing_starGenType_Unlink_fnRecorder) ReturnResults(result1 *ring.Ring) *MoqRing_starGenType_Unlink_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *ring.Ring
		}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Unlink_doFn
		DoReturnFn MoqRing_starGenType_Unlink_doReturnFn
	}{
		Values: &struct {
			Result1 *ring.Ring
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRing_starGenType_Unlink_fnRecorder) AndDo(fn MoqRing_starGenType_Unlink_doFn) *MoqRing_starGenType_Unlink_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRing_starGenType_Unlink_fnRecorder) DoReturnResults(fn MoqRing_starGenType_Unlink_doReturnFn) *MoqRing_starGenType_Unlink_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *ring.Ring
		}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Unlink_doFn
		DoReturnFn MoqRing_starGenType_Unlink_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRing_starGenType_Unlink_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRing_starGenType_Unlink_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Unlink {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRing_starGenType_Unlink_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRing_starGenType_Unlink_paramsKey]*MoqRing_starGenType_Unlink_results{},
		}
		r.Moq.ResultsByParams_Unlink = append(r.Moq.ResultsByParams_Unlink, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Unlink) {
			copy(r.Moq.ResultsByParams_Unlink[insertAt+1:], r.Moq.ResultsByParams_Unlink[insertAt:0])
			r.Moq.ResultsByParams_Unlink[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Unlink(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRing_starGenType_Unlink_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRing_starGenType_Unlink_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRing_starGenType_Unlink_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *ring.Ring
				}
				Sequence   uint32
				DoFn       MoqRing_starGenType_Unlink_doFn
				DoReturnFn MoqRing_starGenType_Unlink_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRing_starGenType) PrettyParams_Unlink(params MoqRing_starGenType_Unlink_params) string {
	return fmt.Sprintf("Unlink(%#v)", params.N)
}

func (m *MoqRing_starGenType) ParamsKey_Unlink(params MoqRing_starGenType_Unlink_params, anyParams uint64) MoqRing_starGenType_Unlink_paramsKey {
	m.Scene.T.Helper()
	var nUsed int
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Unlink.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqRing_starGenType_Unlink_paramsKey{
		Params: struct{ N int }{
			N: nUsed,
		},
		Hashes: struct{ N hash.Hash }{
			N: nUsedHash,
		},
	}
}

func (m *MoqRing_starGenType_recorder) Len() *MoqRing_starGenType_Len_fnRecorder {
	return &MoqRing_starGenType_Len_fnRecorder{
		Params:   MoqRing_starGenType_Len_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRing_starGenType_Len_fnRecorder) Any() *MoqRing_starGenType_Len_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Len(r.Params))
		return nil
	}
	return &MoqRing_starGenType_Len_anyParams{Recorder: r}
}

func (r *MoqRing_starGenType_Len_fnRecorder) Seq() *MoqRing_starGenType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Len(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRing_starGenType_Len_fnRecorder) NoSeq() *MoqRing_starGenType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Len(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRing_starGenType_Len_fnRecorder) ReturnResults(result1 int) *MoqRing_starGenType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Len_doFn
		DoReturnFn MoqRing_starGenType_Len_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRing_starGenType_Len_fnRecorder) AndDo(fn MoqRing_starGenType_Len_doFn) *MoqRing_starGenType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRing_starGenType_Len_fnRecorder) DoReturnResults(fn MoqRing_starGenType_Len_doReturnFn) *MoqRing_starGenType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Len_doFn
		DoReturnFn MoqRing_starGenType_Len_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRing_starGenType_Len_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRing_starGenType_Len_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Len {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRing_starGenType_Len_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRing_starGenType_Len_paramsKey]*MoqRing_starGenType_Len_results{},
		}
		r.Moq.ResultsByParams_Len = append(r.Moq.ResultsByParams_Len, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Len) {
			copy(r.Moq.ResultsByParams_Len[insertAt+1:], r.Moq.ResultsByParams_Len[insertAt:0])
			r.Moq.ResultsByParams_Len[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Len(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRing_starGenType_Len_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRing_starGenType_Len_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRing_starGenType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqRing_starGenType_Len_doFn
				DoReturnFn MoqRing_starGenType_Len_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRing_starGenType) PrettyParams_Len(params MoqRing_starGenType_Len_params) string {
	return fmt.Sprintf("Len()")
}

func (m *MoqRing_starGenType) ParamsKey_Len(params MoqRing_starGenType_Len_params, anyParams uint64) MoqRing_starGenType_Len_paramsKey {
	m.Scene.T.Helper()
	return MoqRing_starGenType_Len_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRing_starGenType_recorder) Do(f func(any)) *MoqRing_starGenType_Do_fnRecorder {
	return &MoqRing_starGenType_Do_fnRecorder{
		Params: MoqRing_starGenType_Do_params{
			F: f,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRing_starGenType_Do_fnRecorder) Any() *MoqRing_starGenType_Do_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Do(r.Params))
		return nil
	}
	return &MoqRing_starGenType_Do_anyParams{Recorder: r}
}

func (a *MoqRing_starGenType_Do_anyParams) F() *MoqRing_starGenType_Do_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRing_starGenType_Do_fnRecorder) Seq() *MoqRing_starGenType_Do_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Do(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRing_starGenType_Do_fnRecorder) NoSeq() *MoqRing_starGenType_Do_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Do(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRing_starGenType_Do_fnRecorder) ReturnResults() *MoqRing_starGenType_Do_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Do_doFn
		DoReturnFn MoqRing_starGenType_Do_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRing_starGenType_Do_fnRecorder) AndDo(fn MoqRing_starGenType_Do_doFn) *MoqRing_starGenType_Do_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRing_starGenType_Do_fnRecorder) DoReturnResults(fn MoqRing_starGenType_Do_doReturnFn) *MoqRing_starGenType_Do_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRing_starGenType_Do_doFn
		DoReturnFn MoqRing_starGenType_Do_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRing_starGenType_Do_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRing_starGenType_Do_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Do {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRing_starGenType_Do_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRing_starGenType_Do_paramsKey]*MoqRing_starGenType_Do_results{},
		}
		r.Moq.ResultsByParams_Do = append(r.Moq.ResultsByParams_Do, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Do) {
			copy(r.Moq.ResultsByParams_Do[insertAt+1:], r.Moq.ResultsByParams_Do[insertAt:0])
			r.Moq.ResultsByParams_Do[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Do(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRing_starGenType_Do_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRing_starGenType_Do_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRing_starGenType_Do_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqRing_starGenType_Do_doFn
				DoReturnFn MoqRing_starGenType_Do_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRing_starGenType) PrettyParams_Do(params MoqRing_starGenType_Do_params) string {
	return fmt.Sprintf("Do(%#v)", moq.FnString(params.F))
}

func (m *MoqRing_starGenType) ParamsKey_Do(params MoqRing_starGenType_Do_params, anyParams uint64) MoqRing_starGenType_Do_paramsKey {
	m.Scene.T.Helper()
	var fUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Do.F == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The f parameter of the Do function can't be indexed by value")
		}
		fUsedHash = hash.DeepHash(params.F)
	}
	return MoqRing_starGenType_Do_paramsKey{
		Params: struct{}{},
		Hashes: struct{ F hash.Hash }{
			F: fUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqRing_starGenType) Reset() {
	m.ResultsByParams_Next = nil
	m.ResultsByParams_Prev = nil
	m.ResultsByParams_Move = nil
	m.ResultsByParams_Link = nil
	m.ResultsByParams_Unlink = nil
	m.ResultsByParams_Len = nil
	m.ResultsByParams_Do = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqRing_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Next {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Next(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Prev {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Prev(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Move {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Move(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Link {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Link(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Unlink {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Unlink(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Len {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Len(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Do {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Do(results.Params))
			}
		}
	}
}
