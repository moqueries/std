// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package rand

import (
	"fmt"
	"math/bits"
	"math/rand"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that rand.Source64 is mocked completely
var _ rand.Source64 = (*MoqSource64_mock)(nil)

// MoqSource64 holds the state of a moq of the Source64 type
type MoqSource64 struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqSource64_mock

	ResultsByParams_Int63  []MoqSource64_Int63_resultsByParams
	ResultsByParams_Seed   []MoqSource64_Seed_resultsByParams
	ResultsByParams_Uint64 []MoqSource64_Uint64_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Int63 struct{}
			Seed  struct {
				Seed moq.ParamIndexing
			}
			Uint64 struct{}
		}
	}
}

// MoqSource64_mock isolates the mock interface of the Source64 type
type MoqSource64_mock struct {
	Moq *MoqSource64
}

// MoqSource64_recorder isolates the recorder interface of the Source64 type
type MoqSource64_recorder struct {
	Moq *MoqSource64
}

// MoqSource64_Int63_params holds the params of the Source64 type
type MoqSource64_Int63_params struct{}

// MoqSource64_Int63_paramsKey holds the map key params of the Source64 type
type MoqSource64_Int63_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSource64_Int63_resultsByParams contains the results for a given set of
// parameters for the Source64 type
type MoqSource64_Int63_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSource64_Int63_paramsKey]*MoqSource64_Int63_results
}

// MoqSource64_Int63_doFn defines the type of function needed when calling
// AndDo for the Source64 type
type MoqSource64_Int63_doFn func()

// MoqSource64_Int63_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Source64 type
type MoqSource64_Int63_doReturnFn func() int64

// MoqSource64_Int63_results holds the results of the Source64 type
type MoqSource64_Int63_results struct {
	Params  MoqSource64_Int63_params
	Results []struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqSource64_Int63_doFn
		DoReturnFn MoqSource64_Int63_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSource64_Int63_fnRecorder routes recorded function calls to the
// MoqSource64 moq
type MoqSource64_Int63_fnRecorder struct {
	Params    MoqSource64_Int63_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSource64_Int63_results
	Moq       *MoqSource64
}

// MoqSource64_Int63_anyParams isolates the any params functions of the
// Source64 type
type MoqSource64_Int63_anyParams struct {
	Recorder *MoqSource64_Int63_fnRecorder
}

// MoqSource64_Seed_params holds the params of the Source64 type
type MoqSource64_Seed_params struct{ Seed int64 }

// MoqSource64_Seed_paramsKey holds the map key params of the Source64 type
type MoqSource64_Seed_paramsKey struct {
	Params struct{ Seed int64 }
	Hashes struct{ Seed hash.Hash }
}

// MoqSource64_Seed_resultsByParams contains the results for a given set of
// parameters for the Source64 type
type MoqSource64_Seed_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSource64_Seed_paramsKey]*MoqSource64_Seed_results
}

// MoqSource64_Seed_doFn defines the type of function needed when calling AndDo
// for the Source64 type
type MoqSource64_Seed_doFn func(seed int64)

// MoqSource64_Seed_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Source64 type
type MoqSource64_Seed_doReturnFn func(seed int64)

// MoqSource64_Seed_results holds the results of the Source64 type
type MoqSource64_Seed_results struct {
	Params  MoqSource64_Seed_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqSource64_Seed_doFn
		DoReturnFn MoqSource64_Seed_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSource64_Seed_fnRecorder routes recorded function calls to the
// MoqSource64 moq
type MoqSource64_Seed_fnRecorder struct {
	Params    MoqSource64_Seed_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSource64_Seed_results
	Moq       *MoqSource64
}

// MoqSource64_Seed_anyParams isolates the any params functions of the Source64
// type
type MoqSource64_Seed_anyParams struct {
	Recorder *MoqSource64_Seed_fnRecorder
}

// MoqSource64_Uint64_params holds the params of the Source64 type
type MoqSource64_Uint64_params struct{}

// MoqSource64_Uint64_paramsKey holds the map key params of the Source64 type
type MoqSource64_Uint64_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqSource64_Uint64_resultsByParams contains the results for a given set of
// parameters for the Source64 type
type MoqSource64_Uint64_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqSource64_Uint64_paramsKey]*MoqSource64_Uint64_results
}

// MoqSource64_Uint64_doFn defines the type of function needed when calling
// AndDo for the Source64 type
type MoqSource64_Uint64_doFn func()

// MoqSource64_Uint64_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Source64 type
type MoqSource64_Uint64_doReturnFn func() uint64

// MoqSource64_Uint64_results holds the results of the Source64 type
type MoqSource64_Uint64_results struct {
	Params  MoqSource64_Uint64_params
	Results []struct {
		Values *struct {
			Result1 uint64
		}
		Sequence   uint32
		DoFn       MoqSource64_Uint64_doFn
		DoReturnFn MoqSource64_Uint64_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqSource64_Uint64_fnRecorder routes recorded function calls to the
// MoqSource64 moq
type MoqSource64_Uint64_fnRecorder struct {
	Params    MoqSource64_Uint64_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqSource64_Uint64_results
	Moq       *MoqSource64
}

// MoqSource64_Uint64_anyParams isolates the any params functions of the
// Source64 type
type MoqSource64_Uint64_anyParams struct {
	Recorder *MoqSource64_Uint64_fnRecorder
}

// NewMoqSource64 creates a new moq of the Source64 type
func NewMoqSource64(scene *moq.Scene, config *moq.Config) *MoqSource64 {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqSource64{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqSource64_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Int63 struct{}
				Seed  struct {
					Seed moq.ParamIndexing
				}
				Uint64 struct{}
			}
		}{ParameterIndexing: struct {
			Int63 struct{}
			Seed  struct {
				Seed moq.ParamIndexing
			}
			Uint64 struct{}
		}{
			Int63: struct{}{},
			Seed: struct {
				Seed moq.ParamIndexing
			}{
				Seed: moq.ParamIndexByValue,
			},
			Uint64: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Source64 type
func (m *MoqSource64) Mock() *MoqSource64_mock { return m.Moq }

func (m *MoqSource64_mock) Int63() (result1 int64) {
	m.Moq.Scene.T.Helper()
	params := MoqSource64_Int63_params{}
	var results *MoqSource64_Int63_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Int63 {
		paramsKey := m.Moq.ParamsKey_Int63(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Int63(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Int63(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Int63(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqSource64_mock) Seed(seed int64) {
	m.Moq.Scene.T.Helper()
	params := MoqSource64_Seed_params{
		Seed: seed,
	}
	var results *MoqSource64_Seed_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Seed {
		paramsKey := m.Moq.ParamsKey_Seed(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Seed(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Seed(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Seed(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(seed)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(seed)
	}
	return
}

func (m *MoqSource64_mock) Uint64() (result1 uint64) {
	m.Moq.Scene.T.Helper()
	params := MoqSource64_Uint64_params{}
	var results *MoqSource64_Uint64_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Uint64 {
		paramsKey := m.Moq.ParamsKey_Uint64(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Uint64(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Uint64(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Uint64(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Source64 type
func (m *MoqSource64) OnCall() *MoqSource64_recorder {
	return &MoqSource64_recorder{
		Moq: m,
	}
}

func (m *MoqSource64_recorder) Int63() *MoqSource64_Int63_fnRecorder {
	return &MoqSource64_Int63_fnRecorder{
		Params:   MoqSource64_Int63_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSource64_Int63_fnRecorder) Any() *MoqSource64_Int63_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int63(r.Params))
		return nil
	}
	return &MoqSource64_Int63_anyParams{Recorder: r}
}

func (r *MoqSource64_Int63_fnRecorder) Seq() *MoqSource64_Int63_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int63(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSource64_Int63_fnRecorder) NoSeq() *MoqSource64_Int63_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int63(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSource64_Int63_fnRecorder) ReturnResults(result1 int64) *MoqSource64_Int63_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqSource64_Int63_doFn
		DoReturnFn MoqSource64_Int63_doReturnFn
	}{
		Values: &struct {
			Result1 int64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSource64_Int63_fnRecorder) AndDo(fn MoqSource64_Int63_doFn) *MoqSource64_Int63_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSource64_Int63_fnRecorder) DoReturnResults(fn MoqSource64_Int63_doReturnFn) *MoqSource64_Int63_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqSource64_Int63_doFn
		DoReturnFn MoqSource64_Int63_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSource64_Int63_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSource64_Int63_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Int63 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSource64_Int63_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSource64_Int63_paramsKey]*MoqSource64_Int63_results{},
		}
		r.Moq.ResultsByParams_Int63 = append(r.Moq.ResultsByParams_Int63, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Int63) {
			copy(r.Moq.ResultsByParams_Int63[insertAt+1:], r.Moq.ResultsByParams_Int63[insertAt:0])
			r.Moq.ResultsByParams_Int63[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Int63(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSource64_Int63_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSource64_Int63_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSource64_Int63_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int64
				}
				Sequence   uint32
				DoFn       MoqSource64_Int63_doFn
				DoReturnFn MoqSource64_Int63_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSource64) PrettyParams_Int63(params MoqSource64_Int63_params) string {
	return fmt.Sprintf("Int63()")
}

func (m *MoqSource64) ParamsKey_Int63(params MoqSource64_Int63_params, anyParams uint64) MoqSource64_Int63_paramsKey {
	m.Scene.T.Helper()
	return MoqSource64_Int63_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqSource64_recorder) Seed(seed int64) *MoqSource64_Seed_fnRecorder {
	return &MoqSource64_Seed_fnRecorder{
		Params: MoqSource64_Seed_params{
			Seed: seed,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSource64_Seed_fnRecorder) Any() *MoqSource64_Seed_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seed(r.Params))
		return nil
	}
	return &MoqSource64_Seed_anyParams{Recorder: r}
}

func (a *MoqSource64_Seed_anyParams) Seed() *MoqSource64_Seed_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqSource64_Seed_fnRecorder) Seq() *MoqSource64_Seed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seed(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSource64_Seed_fnRecorder) NoSeq() *MoqSource64_Seed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seed(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSource64_Seed_fnRecorder) ReturnResults() *MoqSource64_Seed_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqSource64_Seed_doFn
		DoReturnFn MoqSource64_Seed_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSource64_Seed_fnRecorder) AndDo(fn MoqSource64_Seed_doFn) *MoqSource64_Seed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSource64_Seed_fnRecorder) DoReturnResults(fn MoqSource64_Seed_doReturnFn) *MoqSource64_Seed_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqSource64_Seed_doFn
		DoReturnFn MoqSource64_Seed_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSource64_Seed_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSource64_Seed_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Seed {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSource64_Seed_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSource64_Seed_paramsKey]*MoqSource64_Seed_results{},
		}
		r.Moq.ResultsByParams_Seed = append(r.Moq.ResultsByParams_Seed, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Seed) {
			copy(r.Moq.ResultsByParams_Seed[insertAt+1:], r.Moq.ResultsByParams_Seed[insertAt:0])
			r.Moq.ResultsByParams_Seed[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Seed(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSource64_Seed_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSource64_Seed_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSource64_Seed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqSource64_Seed_doFn
				DoReturnFn MoqSource64_Seed_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSource64) PrettyParams_Seed(params MoqSource64_Seed_params) string {
	return fmt.Sprintf("Seed(%#v)", params.Seed)
}

func (m *MoqSource64) ParamsKey_Seed(params MoqSource64_Seed_params, anyParams uint64) MoqSource64_Seed_paramsKey {
	m.Scene.T.Helper()
	var seedUsed int64
	var seedUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Seed.Seed == moq.ParamIndexByValue {
			seedUsed = params.Seed
		} else {
			seedUsedHash = hash.DeepHash(params.Seed)
		}
	}
	return MoqSource64_Seed_paramsKey{
		Params: struct{ Seed int64 }{
			Seed: seedUsed,
		},
		Hashes: struct{ Seed hash.Hash }{
			Seed: seedUsedHash,
		},
	}
}

func (m *MoqSource64_recorder) Uint64() *MoqSource64_Uint64_fnRecorder {
	return &MoqSource64_Uint64_fnRecorder{
		Params:   MoqSource64_Uint64_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqSource64_Uint64_fnRecorder) Any() *MoqSource64_Uint64_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint64(r.Params))
		return nil
	}
	return &MoqSource64_Uint64_anyParams{Recorder: r}
}

func (r *MoqSource64_Uint64_fnRecorder) Seq() *MoqSource64_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint64(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqSource64_Uint64_fnRecorder) NoSeq() *MoqSource64_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint64(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqSource64_Uint64_fnRecorder) ReturnResults(result1 uint64) *MoqSource64_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint64
		}
		Sequence   uint32
		DoFn       MoqSource64_Uint64_doFn
		DoReturnFn MoqSource64_Uint64_doReturnFn
	}{
		Values: &struct {
			Result1 uint64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqSource64_Uint64_fnRecorder) AndDo(fn MoqSource64_Uint64_doFn) *MoqSource64_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqSource64_Uint64_fnRecorder) DoReturnResults(fn MoqSource64_Uint64_doReturnFn) *MoqSource64_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint64
		}
		Sequence   uint32
		DoFn       MoqSource64_Uint64_doFn
		DoReturnFn MoqSource64_Uint64_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqSource64_Uint64_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqSource64_Uint64_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Uint64 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqSource64_Uint64_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqSource64_Uint64_paramsKey]*MoqSource64_Uint64_results{},
		}
		r.Moq.ResultsByParams_Uint64 = append(r.Moq.ResultsByParams_Uint64, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Uint64) {
			copy(r.Moq.ResultsByParams_Uint64[insertAt+1:], r.Moq.ResultsByParams_Uint64[insertAt:0])
			r.Moq.ResultsByParams_Uint64[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Uint64(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqSource64_Uint64_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqSource64_Uint64_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqSource64_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 uint64
				}
				Sequence   uint32
				DoFn       MoqSource64_Uint64_doFn
				DoReturnFn MoqSource64_Uint64_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqSource64) PrettyParams_Uint64(params MoqSource64_Uint64_params) string {
	return fmt.Sprintf("Uint64()")
}

func (m *MoqSource64) ParamsKey_Uint64(params MoqSource64_Uint64_params, anyParams uint64) MoqSource64_Uint64_paramsKey {
	m.Scene.T.Helper()
	return MoqSource64_Uint64_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqSource64) Reset() {
	m.ResultsByParams_Int63 = nil
	m.ResultsByParams_Seed = nil
	m.ResultsByParams_Uint64 = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqSource64) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Int63 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Int63(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Seed {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Seed(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Uint64 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Uint64(results.Params))
			}
		}
	}
}
