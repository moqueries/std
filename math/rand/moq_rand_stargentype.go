// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package rand

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that rand.Rand_starGenType is mocked
// completely
var _ Rand_starGenType = (*MoqRand_starGenType_mock)(nil)

// Rand_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Rand_starGenType interface {
	ExpFloat64() float64
	NormFloat64() float64
	Seed(seed int64)
	Int63() int64
	Uint32() uint32
	Uint64() uint64
	Int31() int32
	Int() int
	Int63n(n int64) int64
	Int31n(n int32) int32
	Intn(n int) int
	Float64() float64
	Float32() float32
	Perm(n int) []int
	Shuffle(n int, swap func(i, j int))
	Read(p []byte) (n int, err error)
}

// MoqRand_starGenType holds the state of a moq of the Rand_starGenType type
type MoqRand_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqRand_starGenType_mock

	ResultsByParams_ExpFloat64  []MoqRand_starGenType_ExpFloat64_resultsByParams
	ResultsByParams_NormFloat64 []MoqRand_starGenType_NormFloat64_resultsByParams
	ResultsByParams_Seed        []MoqRand_starGenType_Seed_resultsByParams
	ResultsByParams_Int63       []MoqRand_starGenType_Int63_resultsByParams
	ResultsByParams_Uint32      []MoqRand_starGenType_Uint32_resultsByParams
	ResultsByParams_Uint64      []MoqRand_starGenType_Uint64_resultsByParams
	ResultsByParams_Int31       []MoqRand_starGenType_Int31_resultsByParams
	ResultsByParams_Int         []MoqRand_starGenType_Int_resultsByParams
	ResultsByParams_Int63n      []MoqRand_starGenType_Int63n_resultsByParams
	ResultsByParams_Int31n      []MoqRand_starGenType_Int31n_resultsByParams
	ResultsByParams_Intn        []MoqRand_starGenType_Intn_resultsByParams
	ResultsByParams_Float64     []MoqRand_starGenType_Float64_resultsByParams
	ResultsByParams_Float32     []MoqRand_starGenType_Float32_resultsByParams
	ResultsByParams_Perm        []MoqRand_starGenType_Perm_resultsByParams
	ResultsByParams_Shuffle     []MoqRand_starGenType_Shuffle_resultsByParams
	ResultsByParams_Read        []MoqRand_starGenType_Read_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			ExpFloat64  struct{}
			NormFloat64 struct{}
			Seed        struct {
				Seed moq.ParamIndexing
			}
			Int63  struct{}
			Uint32 struct{}
			Uint64 struct{}
			Int31  struct{}
			Int    struct{}
			Int63n struct {
				N moq.ParamIndexing
			}
			Int31n struct {
				N moq.ParamIndexing
			}
			Intn struct {
				N moq.ParamIndexing
			}
			Float64 struct{}
			Float32 struct{}
			Perm    struct {
				N moq.ParamIndexing
			}
			Shuffle struct {
				N    moq.ParamIndexing
				Swap moq.ParamIndexing
			}
			Read struct {
				P moq.ParamIndexing
			}
		}
	}
	// MoqRand_starGenType_mock isolates the mock interface of the Rand_starGenType
}

// type
type MoqRand_starGenType_mock struct {
	Moq *MoqRand_starGenType
}

// MoqRand_starGenType_recorder isolates the recorder interface of the
// Rand_starGenType type
type MoqRand_starGenType_recorder struct {
	Moq *MoqRand_starGenType
}

// MoqRand_starGenType_ExpFloat64_params holds the params of the
// Rand_starGenType type
type MoqRand_starGenType_ExpFloat64_params struct{}

// MoqRand_starGenType_ExpFloat64_paramsKey holds the map key params of the
// Rand_starGenType type
type MoqRand_starGenType_ExpFloat64_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRand_starGenType_ExpFloat64_resultsByParams contains the results for a
// given set of parameters for the Rand_starGenType type
type MoqRand_starGenType_ExpFloat64_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRand_starGenType_ExpFloat64_paramsKey]*MoqRand_starGenType_ExpFloat64_results
}

// MoqRand_starGenType_ExpFloat64_doFn defines the type of function needed when
// calling AndDo for the Rand_starGenType type
type MoqRand_starGenType_ExpFloat64_doFn func()

// MoqRand_starGenType_ExpFloat64_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Rand_starGenType type
type MoqRand_starGenType_ExpFloat64_doReturnFn func() float64

// MoqRand_starGenType_ExpFloat64_results holds the results of the
// Rand_starGenType type
type MoqRand_starGenType_ExpFloat64_results struct {
	Params  MoqRand_starGenType_ExpFloat64_params
	Results []struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_ExpFloat64_doFn
		DoReturnFn MoqRand_starGenType_ExpFloat64_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRand_starGenType_ExpFloat64_fnRecorder routes recorded function calls to
// the MoqRand_starGenType moq
type MoqRand_starGenType_ExpFloat64_fnRecorder struct {
	Params    MoqRand_starGenType_ExpFloat64_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRand_starGenType_ExpFloat64_results
	Moq       *MoqRand_starGenType
}

// MoqRand_starGenType_ExpFloat64_anyParams isolates the any params functions
// of the Rand_starGenType type
type MoqRand_starGenType_ExpFloat64_anyParams struct {
	Recorder *MoqRand_starGenType_ExpFloat64_fnRecorder
}

// MoqRand_starGenType_NormFloat64_params holds the params of the
// Rand_starGenType type
type MoqRand_starGenType_NormFloat64_params struct{}

// MoqRand_starGenType_NormFloat64_paramsKey holds the map key params of the
// Rand_starGenType type
type MoqRand_starGenType_NormFloat64_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRand_starGenType_NormFloat64_resultsByParams contains the results for a
// given set of parameters for the Rand_starGenType type
type MoqRand_starGenType_NormFloat64_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRand_starGenType_NormFloat64_paramsKey]*MoqRand_starGenType_NormFloat64_results
}

// MoqRand_starGenType_NormFloat64_doFn defines the type of function needed
// when calling AndDo for the Rand_starGenType type
type MoqRand_starGenType_NormFloat64_doFn func()

// MoqRand_starGenType_NormFloat64_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Rand_starGenType type
type MoqRand_starGenType_NormFloat64_doReturnFn func() float64

// MoqRand_starGenType_NormFloat64_results holds the results of the
// Rand_starGenType type
type MoqRand_starGenType_NormFloat64_results struct {
	Params  MoqRand_starGenType_NormFloat64_params
	Results []struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_NormFloat64_doFn
		DoReturnFn MoqRand_starGenType_NormFloat64_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRand_starGenType_NormFloat64_fnRecorder routes recorded function calls to
// the MoqRand_starGenType moq
type MoqRand_starGenType_NormFloat64_fnRecorder struct {
	Params    MoqRand_starGenType_NormFloat64_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRand_starGenType_NormFloat64_results
	Moq       *MoqRand_starGenType
}

// MoqRand_starGenType_NormFloat64_anyParams isolates the any params functions
// of the Rand_starGenType type
type MoqRand_starGenType_NormFloat64_anyParams struct {
	Recorder *MoqRand_starGenType_NormFloat64_fnRecorder
}

// MoqRand_starGenType_Seed_params holds the params of the Rand_starGenType
// type
type MoqRand_starGenType_Seed_params struct{ Seed int64 }

// MoqRand_starGenType_Seed_paramsKey holds the map key params of the
// Rand_starGenType type
type MoqRand_starGenType_Seed_paramsKey struct {
	Params struct{ Seed int64 }
	Hashes struct{ Seed hash.Hash }
}

// MoqRand_starGenType_Seed_resultsByParams contains the results for a given
// set of parameters for the Rand_starGenType type
type MoqRand_starGenType_Seed_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRand_starGenType_Seed_paramsKey]*MoqRand_starGenType_Seed_results
}

// MoqRand_starGenType_Seed_doFn defines the type of function needed when
// calling AndDo for the Rand_starGenType type
type MoqRand_starGenType_Seed_doFn func(seed int64)

// MoqRand_starGenType_Seed_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Rand_starGenType type
type MoqRand_starGenType_Seed_doReturnFn func(seed int64)

// MoqRand_starGenType_Seed_results holds the results of the Rand_starGenType
// type
type MoqRand_starGenType_Seed_results struct {
	Params  MoqRand_starGenType_Seed_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Seed_doFn
		DoReturnFn MoqRand_starGenType_Seed_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRand_starGenType_Seed_fnRecorder routes recorded function calls to the
// MoqRand_starGenType moq
type MoqRand_starGenType_Seed_fnRecorder struct {
	Params    MoqRand_starGenType_Seed_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRand_starGenType_Seed_results
	Moq       *MoqRand_starGenType
}

// MoqRand_starGenType_Seed_anyParams isolates the any params functions of the
// Rand_starGenType type
type MoqRand_starGenType_Seed_anyParams struct {
	Recorder *MoqRand_starGenType_Seed_fnRecorder
}

// MoqRand_starGenType_Int63_params holds the params of the Rand_starGenType
// type
type MoqRand_starGenType_Int63_params struct{}

// MoqRand_starGenType_Int63_paramsKey holds the map key params of the
// Rand_starGenType type
type MoqRand_starGenType_Int63_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRand_starGenType_Int63_resultsByParams contains the results for a given
// set of parameters for the Rand_starGenType type
type MoqRand_starGenType_Int63_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRand_starGenType_Int63_paramsKey]*MoqRand_starGenType_Int63_results
}

// MoqRand_starGenType_Int63_doFn defines the type of function needed when
// calling AndDo for the Rand_starGenType type
type MoqRand_starGenType_Int63_doFn func()

// MoqRand_starGenType_Int63_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Rand_starGenType type
type MoqRand_starGenType_Int63_doReturnFn func() int64

// MoqRand_starGenType_Int63_results holds the results of the Rand_starGenType
// type
type MoqRand_starGenType_Int63_results struct {
	Params  MoqRand_starGenType_Int63_params
	Results []struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Int63_doFn
		DoReturnFn MoqRand_starGenType_Int63_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRand_starGenType_Int63_fnRecorder routes recorded function calls to the
// MoqRand_starGenType moq
type MoqRand_starGenType_Int63_fnRecorder struct {
	Params    MoqRand_starGenType_Int63_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRand_starGenType_Int63_results
	Moq       *MoqRand_starGenType
}

// MoqRand_starGenType_Int63_anyParams isolates the any params functions of the
// Rand_starGenType type
type MoqRand_starGenType_Int63_anyParams struct {
	Recorder *MoqRand_starGenType_Int63_fnRecorder
}

// MoqRand_starGenType_Uint32_params holds the params of the Rand_starGenType
// type
type MoqRand_starGenType_Uint32_params struct{}

// MoqRand_starGenType_Uint32_paramsKey holds the map key params of the
// Rand_starGenType type
type MoqRand_starGenType_Uint32_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRand_starGenType_Uint32_resultsByParams contains the results for a given
// set of parameters for the Rand_starGenType type
type MoqRand_starGenType_Uint32_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRand_starGenType_Uint32_paramsKey]*MoqRand_starGenType_Uint32_results
}

// MoqRand_starGenType_Uint32_doFn defines the type of function needed when
// calling AndDo for the Rand_starGenType type
type MoqRand_starGenType_Uint32_doFn func()

// MoqRand_starGenType_Uint32_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Rand_starGenType type
type MoqRand_starGenType_Uint32_doReturnFn func() uint32

// MoqRand_starGenType_Uint32_results holds the results of the Rand_starGenType
// type
type MoqRand_starGenType_Uint32_results struct {
	Params  MoqRand_starGenType_Uint32_params
	Results []struct {
		Values *struct {
			Result1 uint32
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Uint32_doFn
		DoReturnFn MoqRand_starGenType_Uint32_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRand_starGenType_Uint32_fnRecorder routes recorded function calls to the
// MoqRand_starGenType moq
type MoqRand_starGenType_Uint32_fnRecorder struct {
	Params    MoqRand_starGenType_Uint32_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRand_starGenType_Uint32_results
	Moq       *MoqRand_starGenType
}

// MoqRand_starGenType_Uint32_anyParams isolates the any params functions of
// the Rand_starGenType type
type MoqRand_starGenType_Uint32_anyParams struct {
	Recorder *MoqRand_starGenType_Uint32_fnRecorder
}

// MoqRand_starGenType_Uint64_params holds the params of the Rand_starGenType
// type
type MoqRand_starGenType_Uint64_params struct{}

// MoqRand_starGenType_Uint64_paramsKey holds the map key params of the
// Rand_starGenType type
type MoqRand_starGenType_Uint64_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRand_starGenType_Uint64_resultsByParams contains the results for a given
// set of parameters for the Rand_starGenType type
type MoqRand_starGenType_Uint64_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRand_starGenType_Uint64_paramsKey]*MoqRand_starGenType_Uint64_results
}

// MoqRand_starGenType_Uint64_doFn defines the type of function needed when
// calling AndDo for the Rand_starGenType type
type MoqRand_starGenType_Uint64_doFn func()

// MoqRand_starGenType_Uint64_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Rand_starGenType type
type MoqRand_starGenType_Uint64_doReturnFn func() uint64

// MoqRand_starGenType_Uint64_results holds the results of the Rand_starGenType
// type
type MoqRand_starGenType_Uint64_results struct {
	Params  MoqRand_starGenType_Uint64_params
	Results []struct {
		Values *struct {
			Result1 uint64
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Uint64_doFn
		DoReturnFn MoqRand_starGenType_Uint64_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRand_starGenType_Uint64_fnRecorder routes recorded function calls to the
// MoqRand_starGenType moq
type MoqRand_starGenType_Uint64_fnRecorder struct {
	Params    MoqRand_starGenType_Uint64_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRand_starGenType_Uint64_results
	Moq       *MoqRand_starGenType
}

// MoqRand_starGenType_Uint64_anyParams isolates the any params functions of
// the Rand_starGenType type
type MoqRand_starGenType_Uint64_anyParams struct {
	Recorder *MoqRand_starGenType_Uint64_fnRecorder
}

// MoqRand_starGenType_Int31_params holds the params of the Rand_starGenType
// type
type MoqRand_starGenType_Int31_params struct{}

// MoqRand_starGenType_Int31_paramsKey holds the map key params of the
// Rand_starGenType type
type MoqRand_starGenType_Int31_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRand_starGenType_Int31_resultsByParams contains the results for a given
// set of parameters for the Rand_starGenType type
type MoqRand_starGenType_Int31_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRand_starGenType_Int31_paramsKey]*MoqRand_starGenType_Int31_results
}

// MoqRand_starGenType_Int31_doFn defines the type of function needed when
// calling AndDo for the Rand_starGenType type
type MoqRand_starGenType_Int31_doFn func()

// MoqRand_starGenType_Int31_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Rand_starGenType type
type MoqRand_starGenType_Int31_doReturnFn func() int32

// MoqRand_starGenType_Int31_results holds the results of the Rand_starGenType
// type
type MoqRand_starGenType_Int31_results struct {
	Params  MoqRand_starGenType_Int31_params
	Results []struct {
		Values *struct {
			Result1 int32
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Int31_doFn
		DoReturnFn MoqRand_starGenType_Int31_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRand_starGenType_Int31_fnRecorder routes recorded function calls to the
// MoqRand_starGenType moq
type MoqRand_starGenType_Int31_fnRecorder struct {
	Params    MoqRand_starGenType_Int31_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRand_starGenType_Int31_results
	Moq       *MoqRand_starGenType
}

// MoqRand_starGenType_Int31_anyParams isolates the any params functions of the
// Rand_starGenType type
type MoqRand_starGenType_Int31_anyParams struct {
	Recorder *MoqRand_starGenType_Int31_fnRecorder
}

// MoqRand_starGenType_Int_params holds the params of the Rand_starGenType type
type MoqRand_starGenType_Int_params struct{}

// MoqRand_starGenType_Int_paramsKey holds the map key params of the
// Rand_starGenType type
type MoqRand_starGenType_Int_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRand_starGenType_Int_resultsByParams contains the results for a given set
// of parameters for the Rand_starGenType type
type MoqRand_starGenType_Int_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRand_starGenType_Int_paramsKey]*MoqRand_starGenType_Int_results
}

// MoqRand_starGenType_Int_doFn defines the type of function needed when
// calling AndDo for the Rand_starGenType type
type MoqRand_starGenType_Int_doFn func()

// MoqRand_starGenType_Int_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Rand_starGenType type
type MoqRand_starGenType_Int_doReturnFn func() int

// MoqRand_starGenType_Int_results holds the results of the Rand_starGenType
// type
type MoqRand_starGenType_Int_results struct {
	Params  MoqRand_starGenType_Int_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Int_doFn
		DoReturnFn MoqRand_starGenType_Int_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRand_starGenType_Int_fnRecorder routes recorded function calls to the
// MoqRand_starGenType moq
type MoqRand_starGenType_Int_fnRecorder struct {
	Params    MoqRand_starGenType_Int_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRand_starGenType_Int_results
	Moq       *MoqRand_starGenType
}

// MoqRand_starGenType_Int_anyParams isolates the any params functions of the
// Rand_starGenType type
type MoqRand_starGenType_Int_anyParams struct {
	Recorder *MoqRand_starGenType_Int_fnRecorder
}

// MoqRand_starGenType_Int63n_params holds the params of the Rand_starGenType
// type
type MoqRand_starGenType_Int63n_params struct{ N int64 }

// MoqRand_starGenType_Int63n_paramsKey holds the map key params of the
// Rand_starGenType type
type MoqRand_starGenType_Int63n_paramsKey struct {
	Params struct{ N int64 }
	Hashes struct{ N hash.Hash }
}

// MoqRand_starGenType_Int63n_resultsByParams contains the results for a given
// set of parameters for the Rand_starGenType type
type MoqRand_starGenType_Int63n_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRand_starGenType_Int63n_paramsKey]*MoqRand_starGenType_Int63n_results
}

// MoqRand_starGenType_Int63n_doFn defines the type of function needed when
// calling AndDo for the Rand_starGenType type
type MoqRand_starGenType_Int63n_doFn func(n int64)

// MoqRand_starGenType_Int63n_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Rand_starGenType type
type MoqRand_starGenType_Int63n_doReturnFn func(n int64) int64

// MoqRand_starGenType_Int63n_results holds the results of the Rand_starGenType
// type
type MoqRand_starGenType_Int63n_results struct {
	Params  MoqRand_starGenType_Int63n_params
	Results []struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Int63n_doFn
		DoReturnFn MoqRand_starGenType_Int63n_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRand_starGenType_Int63n_fnRecorder routes recorded function calls to the
// MoqRand_starGenType moq
type MoqRand_starGenType_Int63n_fnRecorder struct {
	Params    MoqRand_starGenType_Int63n_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRand_starGenType_Int63n_results
	Moq       *MoqRand_starGenType
}

// MoqRand_starGenType_Int63n_anyParams isolates the any params functions of
// the Rand_starGenType type
type MoqRand_starGenType_Int63n_anyParams struct {
	Recorder *MoqRand_starGenType_Int63n_fnRecorder
}

// MoqRand_starGenType_Int31n_params holds the params of the Rand_starGenType
// type
type MoqRand_starGenType_Int31n_params struct{ N int32 }

// MoqRand_starGenType_Int31n_paramsKey holds the map key params of the
// Rand_starGenType type
type MoqRand_starGenType_Int31n_paramsKey struct {
	Params struct{ N int32 }
	Hashes struct{ N hash.Hash }
}

// MoqRand_starGenType_Int31n_resultsByParams contains the results for a given
// set of parameters for the Rand_starGenType type
type MoqRand_starGenType_Int31n_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRand_starGenType_Int31n_paramsKey]*MoqRand_starGenType_Int31n_results
}

// MoqRand_starGenType_Int31n_doFn defines the type of function needed when
// calling AndDo for the Rand_starGenType type
type MoqRand_starGenType_Int31n_doFn func(n int32)

// MoqRand_starGenType_Int31n_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Rand_starGenType type
type MoqRand_starGenType_Int31n_doReturnFn func(n int32) int32

// MoqRand_starGenType_Int31n_results holds the results of the Rand_starGenType
// type
type MoqRand_starGenType_Int31n_results struct {
	Params  MoqRand_starGenType_Int31n_params
	Results []struct {
		Values *struct {
			Result1 int32
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Int31n_doFn
		DoReturnFn MoqRand_starGenType_Int31n_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRand_starGenType_Int31n_fnRecorder routes recorded function calls to the
// MoqRand_starGenType moq
type MoqRand_starGenType_Int31n_fnRecorder struct {
	Params    MoqRand_starGenType_Int31n_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRand_starGenType_Int31n_results
	Moq       *MoqRand_starGenType
}

// MoqRand_starGenType_Int31n_anyParams isolates the any params functions of
// the Rand_starGenType type
type MoqRand_starGenType_Int31n_anyParams struct {
	Recorder *MoqRand_starGenType_Int31n_fnRecorder
}

// MoqRand_starGenType_Intn_params holds the params of the Rand_starGenType
// type
type MoqRand_starGenType_Intn_params struct{ N int }

// MoqRand_starGenType_Intn_paramsKey holds the map key params of the
// Rand_starGenType type
type MoqRand_starGenType_Intn_paramsKey struct {
	Params struct{ N int }
	Hashes struct{ N hash.Hash }
}

// MoqRand_starGenType_Intn_resultsByParams contains the results for a given
// set of parameters for the Rand_starGenType type
type MoqRand_starGenType_Intn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRand_starGenType_Intn_paramsKey]*MoqRand_starGenType_Intn_results
}

// MoqRand_starGenType_Intn_doFn defines the type of function needed when
// calling AndDo for the Rand_starGenType type
type MoqRand_starGenType_Intn_doFn func(n int)

// MoqRand_starGenType_Intn_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Rand_starGenType type
type MoqRand_starGenType_Intn_doReturnFn func(n int) int

// MoqRand_starGenType_Intn_results holds the results of the Rand_starGenType
// type
type MoqRand_starGenType_Intn_results struct {
	Params  MoqRand_starGenType_Intn_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Intn_doFn
		DoReturnFn MoqRand_starGenType_Intn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRand_starGenType_Intn_fnRecorder routes recorded function calls to the
// MoqRand_starGenType moq
type MoqRand_starGenType_Intn_fnRecorder struct {
	Params    MoqRand_starGenType_Intn_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRand_starGenType_Intn_results
	Moq       *MoqRand_starGenType
}

// MoqRand_starGenType_Intn_anyParams isolates the any params functions of the
// Rand_starGenType type
type MoqRand_starGenType_Intn_anyParams struct {
	Recorder *MoqRand_starGenType_Intn_fnRecorder
}

// MoqRand_starGenType_Float64_params holds the params of the Rand_starGenType
// type
type MoqRand_starGenType_Float64_params struct{}

// MoqRand_starGenType_Float64_paramsKey holds the map key params of the
// Rand_starGenType type
type MoqRand_starGenType_Float64_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRand_starGenType_Float64_resultsByParams contains the results for a given
// set of parameters for the Rand_starGenType type
type MoqRand_starGenType_Float64_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRand_starGenType_Float64_paramsKey]*MoqRand_starGenType_Float64_results
}

// MoqRand_starGenType_Float64_doFn defines the type of function needed when
// calling AndDo for the Rand_starGenType type
type MoqRand_starGenType_Float64_doFn func()

// MoqRand_starGenType_Float64_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Rand_starGenType type
type MoqRand_starGenType_Float64_doReturnFn func() float64

// MoqRand_starGenType_Float64_results holds the results of the
// Rand_starGenType type
type MoqRand_starGenType_Float64_results struct {
	Params  MoqRand_starGenType_Float64_params
	Results []struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Float64_doFn
		DoReturnFn MoqRand_starGenType_Float64_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRand_starGenType_Float64_fnRecorder routes recorded function calls to the
// MoqRand_starGenType moq
type MoqRand_starGenType_Float64_fnRecorder struct {
	Params    MoqRand_starGenType_Float64_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRand_starGenType_Float64_results
	Moq       *MoqRand_starGenType
}

// MoqRand_starGenType_Float64_anyParams isolates the any params functions of
// the Rand_starGenType type
type MoqRand_starGenType_Float64_anyParams struct {
	Recorder *MoqRand_starGenType_Float64_fnRecorder
}

// MoqRand_starGenType_Float32_params holds the params of the Rand_starGenType
// type
type MoqRand_starGenType_Float32_params struct{}

// MoqRand_starGenType_Float32_paramsKey holds the map key params of the
// Rand_starGenType type
type MoqRand_starGenType_Float32_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRand_starGenType_Float32_resultsByParams contains the results for a given
// set of parameters for the Rand_starGenType type
type MoqRand_starGenType_Float32_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRand_starGenType_Float32_paramsKey]*MoqRand_starGenType_Float32_results
}

// MoqRand_starGenType_Float32_doFn defines the type of function needed when
// calling AndDo for the Rand_starGenType type
type MoqRand_starGenType_Float32_doFn func()

// MoqRand_starGenType_Float32_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Rand_starGenType type
type MoqRand_starGenType_Float32_doReturnFn func() float32

// MoqRand_starGenType_Float32_results holds the results of the
// Rand_starGenType type
type MoqRand_starGenType_Float32_results struct {
	Params  MoqRand_starGenType_Float32_params
	Results []struct {
		Values *struct {
			Result1 float32
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Float32_doFn
		DoReturnFn MoqRand_starGenType_Float32_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRand_starGenType_Float32_fnRecorder routes recorded function calls to the
// MoqRand_starGenType moq
type MoqRand_starGenType_Float32_fnRecorder struct {
	Params    MoqRand_starGenType_Float32_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRand_starGenType_Float32_results
	Moq       *MoqRand_starGenType
}

// MoqRand_starGenType_Float32_anyParams isolates the any params functions of
// the Rand_starGenType type
type MoqRand_starGenType_Float32_anyParams struct {
	Recorder *MoqRand_starGenType_Float32_fnRecorder
}

// MoqRand_starGenType_Perm_params holds the params of the Rand_starGenType
// type
type MoqRand_starGenType_Perm_params struct{ N int }

// MoqRand_starGenType_Perm_paramsKey holds the map key params of the
// Rand_starGenType type
type MoqRand_starGenType_Perm_paramsKey struct {
	Params struct{ N int }
	Hashes struct{ N hash.Hash }
}

// MoqRand_starGenType_Perm_resultsByParams contains the results for a given
// set of parameters for the Rand_starGenType type
type MoqRand_starGenType_Perm_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRand_starGenType_Perm_paramsKey]*MoqRand_starGenType_Perm_results
}

// MoqRand_starGenType_Perm_doFn defines the type of function needed when
// calling AndDo for the Rand_starGenType type
type MoqRand_starGenType_Perm_doFn func(n int)

// MoqRand_starGenType_Perm_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Rand_starGenType type
type MoqRand_starGenType_Perm_doReturnFn func(n int) []int

// MoqRand_starGenType_Perm_results holds the results of the Rand_starGenType
// type
type MoqRand_starGenType_Perm_results struct {
	Params  MoqRand_starGenType_Perm_params
	Results []struct {
		Values *struct {
			Result1 []int
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Perm_doFn
		DoReturnFn MoqRand_starGenType_Perm_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRand_starGenType_Perm_fnRecorder routes recorded function calls to the
// MoqRand_starGenType moq
type MoqRand_starGenType_Perm_fnRecorder struct {
	Params    MoqRand_starGenType_Perm_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRand_starGenType_Perm_results
	Moq       *MoqRand_starGenType
}

// MoqRand_starGenType_Perm_anyParams isolates the any params functions of the
// Rand_starGenType type
type MoqRand_starGenType_Perm_anyParams struct {
	Recorder *MoqRand_starGenType_Perm_fnRecorder
}

// MoqRand_starGenType_Shuffle_params holds the params of the Rand_starGenType
// type
type MoqRand_starGenType_Shuffle_params struct {
	N    int
	Swap func(i, j int)
}

// MoqRand_starGenType_Shuffle_paramsKey holds the map key params of the
// Rand_starGenType type
type MoqRand_starGenType_Shuffle_paramsKey struct {
	Params struct{ N int }
	Hashes struct {
		N    hash.Hash
		Swap hash.Hash
	}
}

// MoqRand_starGenType_Shuffle_resultsByParams contains the results for a given
// set of parameters for the Rand_starGenType type
type MoqRand_starGenType_Shuffle_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRand_starGenType_Shuffle_paramsKey]*MoqRand_starGenType_Shuffle_results
}

// MoqRand_starGenType_Shuffle_doFn defines the type of function needed when
// calling AndDo for the Rand_starGenType type
type MoqRand_starGenType_Shuffle_doFn func(n int, swap func(i, j int))

// MoqRand_starGenType_Shuffle_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Rand_starGenType type
type MoqRand_starGenType_Shuffle_doReturnFn func(n int, swap func(i, j int))

// MoqRand_starGenType_Shuffle_results holds the results of the
// Rand_starGenType type
type MoqRand_starGenType_Shuffle_results struct {
	Params  MoqRand_starGenType_Shuffle_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Shuffle_doFn
		DoReturnFn MoqRand_starGenType_Shuffle_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRand_starGenType_Shuffle_fnRecorder routes recorded function calls to the
// MoqRand_starGenType moq
type MoqRand_starGenType_Shuffle_fnRecorder struct {
	Params    MoqRand_starGenType_Shuffle_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRand_starGenType_Shuffle_results
	Moq       *MoqRand_starGenType
}

// MoqRand_starGenType_Shuffle_anyParams isolates the any params functions of
// the Rand_starGenType type
type MoqRand_starGenType_Shuffle_anyParams struct {
	Recorder *MoqRand_starGenType_Shuffle_fnRecorder
}

// MoqRand_starGenType_Read_params holds the params of the Rand_starGenType
// type
type MoqRand_starGenType_Read_params struct{ P []byte }

// MoqRand_starGenType_Read_paramsKey holds the map key params of the
// Rand_starGenType type
type MoqRand_starGenType_Read_paramsKey struct {
	Params struct{}
	Hashes struct{ P hash.Hash }
}

// MoqRand_starGenType_Read_resultsByParams contains the results for a given
// set of parameters for the Rand_starGenType type
type MoqRand_starGenType_Read_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRand_starGenType_Read_paramsKey]*MoqRand_starGenType_Read_results
}

// MoqRand_starGenType_Read_doFn defines the type of function needed when
// calling AndDo for the Rand_starGenType type
type MoqRand_starGenType_Read_doFn func(p []byte)

// MoqRand_starGenType_Read_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Rand_starGenType type
type MoqRand_starGenType_Read_doReturnFn func(p []byte) (n int, err error)

// MoqRand_starGenType_Read_results holds the results of the Rand_starGenType
// type
type MoqRand_starGenType_Read_results struct {
	Params  MoqRand_starGenType_Read_params
	Results []struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Read_doFn
		DoReturnFn MoqRand_starGenType_Read_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRand_starGenType_Read_fnRecorder routes recorded function calls to the
// MoqRand_starGenType moq
type MoqRand_starGenType_Read_fnRecorder struct {
	Params    MoqRand_starGenType_Read_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRand_starGenType_Read_results
	Moq       *MoqRand_starGenType
}

// MoqRand_starGenType_Read_anyParams isolates the any params functions of the
// Rand_starGenType type
type MoqRand_starGenType_Read_anyParams struct {
	Recorder *MoqRand_starGenType_Read_fnRecorder
}

// NewMoqRand_starGenType creates a new moq of the Rand_starGenType type
func NewMoqRand_starGenType(scene *moq.Scene, config *moq.Config) *MoqRand_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqRand_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqRand_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				ExpFloat64  struct{}
				NormFloat64 struct{}
				Seed        struct {
					Seed moq.ParamIndexing
				}
				Int63  struct{}
				Uint32 struct{}
				Uint64 struct{}
				Int31  struct{}
				Int    struct{}
				Int63n struct {
					N moq.ParamIndexing
				}
				Int31n struct {
					N moq.ParamIndexing
				}
				Intn struct {
					N moq.ParamIndexing
				}
				Float64 struct{}
				Float32 struct{}
				Perm    struct {
					N moq.ParamIndexing
				}
				Shuffle struct {
					N    moq.ParamIndexing
					Swap moq.ParamIndexing
				}
				Read struct {
					P moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			ExpFloat64  struct{}
			NormFloat64 struct{}
			Seed        struct {
				Seed moq.ParamIndexing
			}
			Int63  struct{}
			Uint32 struct{}
			Uint64 struct{}
			Int31  struct{}
			Int    struct{}
			Int63n struct {
				N moq.ParamIndexing
			}
			Int31n struct {
				N moq.ParamIndexing
			}
			Intn struct {
				N moq.ParamIndexing
			}
			Float64 struct{}
			Float32 struct{}
			Perm    struct {
				N moq.ParamIndexing
			}
			Shuffle struct {
				N    moq.ParamIndexing
				Swap moq.ParamIndexing
			}
			Read struct {
				P moq.ParamIndexing
			}
		}{
			ExpFloat64:  struct{}{},
			NormFloat64: struct{}{},
			Seed: struct {
				Seed moq.ParamIndexing
			}{
				Seed: moq.ParamIndexByValue,
			},
			Int63:  struct{}{},
			Uint32: struct{}{},
			Uint64: struct{}{},
			Int31:  struct{}{},
			Int:    struct{}{},
			Int63n: struct {
				N moq.ParamIndexing
			}{
				N: moq.ParamIndexByValue,
			},
			Int31n: struct {
				N moq.ParamIndexing
			}{
				N: moq.ParamIndexByValue,
			},
			Intn: struct {
				N moq.ParamIndexing
			}{
				N: moq.ParamIndexByValue,
			},
			Float64: struct{}{},
			Float32: struct{}{},
			Perm: struct {
				N moq.ParamIndexing
			}{
				N: moq.ParamIndexByValue,
			},
			Shuffle: struct {
				N    moq.ParamIndexing
				Swap moq.ParamIndexing
			}{
				N:    moq.ParamIndexByValue,
				Swap: moq.ParamIndexByHash,
			},
			Read: struct {
				P moq.ParamIndexing
			}{
				P: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Rand_starGenType type
func (m *MoqRand_starGenType) Mock() *MoqRand_starGenType_mock { return m.Moq }

func (m *MoqRand_starGenType_mock) ExpFloat64() (result1 float64) {
	m.Moq.Scene.T.Helper()
	params := MoqRand_starGenType_ExpFloat64_params{}
	var results *MoqRand_starGenType_ExpFloat64_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ExpFloat64 {
		paramsKey := m.Moq.ParamsKey_ExpFloat64(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ExpFloat64(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ExpFloat64(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ExpFloat64(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRand_starGenType_mock) NormFloat64() (result1 float64) {
	m.Moq.Scene.T.Helper()
	params := MoqRand_starGenType_NormFloat64_params{}
	var results *MoqRand_starGenType_NormFloat64_results
	for _, resultsByParams := range m.Moq.ResultsByParams_NormFloat64 {
		paramsKey := m.Moq.ParamsKey_NormFloat64(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_NormFloat64(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_NormFloat64(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_NormFloat64(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRand_starGenType_mock) Seed(seed int64) {
	m.Moq.Scene.T.Helper()
	params := MoqRand_starGenType_Seed_params{
		Seed: seed,
	}
	var results *MoqRand_starGenType_Seed_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Seed {
		paramsKey := m.Moq.ParamsKey_Seed(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Seed(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Seed(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Seed(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(seed)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(seed)
	}
	return
}

func (m *MoqRand_starGenType_mock) Int63() (result1 int64) {
	m.Moq.Scene.T.Helper()
	params := MoqRand_starGenType_Int63_params{}
	var results *MoqRand_starGenType_Int63_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Int63 {
		paramsKey := m.Moq.ParamsKey_Int63(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Int63(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Int63(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Int63(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRand_starGenType_mock) Uint32() (result1 uint32) {
	m.Moq.Scene.T.Helper()
	params := MoqRand_starGenType_Uint32_params{}
	var results *MoqRand_starGenType_Uint32_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Uint32 {
		paramsKey := m.Moq.ParamsKey_Uint32(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Uint32(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Uint32(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Uint32(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRand_starGenType_mock) Uint64() (result1 uint64) {
	m.Moq.Scene.T.Helper()
	params := MoqRand_starGenType_Uint64_params{}
	var results *MoqRand_starGenType_Uint64_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Uint64 {
		paramsKey := m.Moq.ParamsKey_Uint64(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Uint64(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Uint64(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Uint64(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRand_starGenType_mock) Int31() (result1 int32) {
	m.Moq.Scene.T.Helper()
	params := MoqRand_starGenType_Int31_params{}
	var results *MoqRand_starGenType_Int31_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Int31 {
		paramsKey := m.Moq.ParamsKey_Int31(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Int31(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Int31(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Int31(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRand_starGenType_mock) Int() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqRand_starGenType_Int_params{}
	var results *MoqRand_starGenType_Int_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Int {
		paramsKey := m.Moq.ParamsKey_Int(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Int(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Int(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Int(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRand_starGenType_mock) Int63n(n int64) (result1 int64) {
	m.Moq.Scene.T.Helper()
	params := MoqRand_starGenType_Int63n_params{
		N: n,
	}
	var results *MoqRand_starGenType_Int63n_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Int63n {
		paramsKey := m.Moq.ParamsKey_Int63n(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Int63n(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Int63n(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Int63n(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(n)
	}
	return
}

func (m *MoqRand_starGenType_mock) Int31n(n int32) (result1 int32) {
	m.Moq.Scene.T.Helper()
	params := MoqRand_starGenType_Int31n_params{
		N: n,
	}
	var results *MoqRand_starGenType_Int31n_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Int31n {
		paramsKey := m.Moq.ParamsKey_Int31n(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Int31n(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Int31n(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Int31n(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(n)
	}
	return
}

func (m *MoqRand_starGenType_mock) Intn(n int) (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqRand_starGenType_Intn_params{
		N: n,
	}
	var results *MoqRand_starGenType_Intn_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Intn {
		paramsKey := m.Moq.ParamsKey_Intn(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Intn(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Intn(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Intn(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(n)
	}
	return
}

func (m *MoqRand_starGenType_mock) Float64() (result1 float64) {
	m.Moq.Scene.T.Helper()
	params := MoqRand_starGenType_Float64_params{}
	var results *MoqRand_starGenType_Float64_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Float64 {
		paramsKey := m.Moq.ParamsKey_Float64(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Float64(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Float64(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Float64(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRand_starGenType_mock) Float32() (result1 float32) {
	m.Moq.Scene.T.Helper()
	params := MoqRand_starGenType_Float32_params{}
	var results *MoqRand_starGenType_Float32_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Float32 {
		paramsKey := m.Moq.ParamsKey_Float32(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Float32(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Float32(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Float32(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRand_starGenType_mock) Perm(n int) (result1 []int) {
	m.Moq.Scene.T.Helper()
	params := MoqRand_starGenType_Perm_params{
		N: n,
	}
	var results *MoqRand_starGenType_Perm_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Perm {
		paramsKey := m.Moq.ParamsKey_Perm(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Perm(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Perm(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Perm(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(n)
	}
	return
}

func (m *MoqRand_starGenType_mock) Shuffle(n int, swap func(i, j int)) {
	m.Moq.Scene.T.Helper()
	params := MoqRand_starGenType_Shuffle_params{
		N:    n,
		Swap: swap,
	}
	var results *MoqRand_starGenType_Shuffle_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Shuffle {
		paramsKey := m.Moq.ParamsKey_Shuffle(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Shuffle(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Shuffle(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Shuffle(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n, swap)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(n, swap)
	}
	return
}

func (m *MoqRand_starGenType_mock) Read(p []byte) (n int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqRand_starGenType_Read_params{
		P: p,
	}
	var results *MoqRand_starGenType_Read_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Read {
		paramsKey := m.Moq.ParamsKey_Read(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Read(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Read(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Read(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(p)
	}
	return
}

// OnCall returns the recorder implementation of the Rand_starGenType type
func (m *MoqRand_starGenType) OnCall() *MoqRand_starGenType_recorder {
	return &MoqRand_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqRand_starGenType_recorder) ExpFloat64() *MoqRand_starGenType_ExpFloat64_fnRecorder {
	return &MoqRand_starGenType_ExpFloat64_fnRecorder{
		Params:   MoqRand_starGenType_ExpFloat64_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRand_starGenType_ExpFloat64_fnRecorder) Any() *MoqRand_starGenType_ExpFloat64_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExpFloat64(r.Params))
		return nil
	}
	return &MoqRand_starGenType_ExpFloat64_anyParams{Recorder: r}
}

func (r *MoqRand_starGenType_ExpFloat64_fnRecorder) Seq() *MoqRand_starGenType_ExpFloat64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExpFloat64(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRand_starGenType_ExpFloat64_fnRecorder) NoSeq() *MoqRand_starGenType_ExpFloat64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ExpFloat64(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRand_starGenType_ExpFloat64_fnRecorder) ReturnResults(result1 float64) *MoqRand_starGenType_ExpFloat64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_ExpFloat64_doFn
		DoReturnFn MoqRand_starGenType_ExpFloat64_doReturnFn
	}{
		Values: &struct {
			Result1 float64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRand_starGenType_ExpFloat64_fnRecorder) AndDo(fn MoqRand_starGenType_ExpFloat64_doFn) *MoqRand_starGenType_ExpFloat64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRand_starGenType_ExpFloat64_fnRecorder) DoReturnResults(fn MoqRand_starGenType_ExpFloat64_doReturnFn) *MoqRand_starGenType_ExpFloat64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_ExpFloat64_doFn
		DoReturnFn MoqRand_starGenType_ExpFloat64_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRand_starGenType_ExpFloat64_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRand_starGenType_ExpFloat64_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ExpFloat64 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRand_starGenType_ExpFloat64_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRand_starGenType_ExpFloat64_paramsKey]*MoqRand_starGenType_ExpFloat64_results{},
		}
		r.Moq.ResultsByParams_ExpFloat64 = append(r.Moq.ResultsByParams_ExpFloat64, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ExpFloat64) {
			copy(r.Moq.ResultsByParams_ExpFloat64[insertAt+1:], r.Moq.ResultsByParams_ExpFloat64[insertAt:0])
			r.Moq.ResultsByParams_ExpFloat64[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ExpFloat64(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRand_starGenType_ExpFloat64_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRand_starGenType_ExpFloat64_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRand_starGenType_ExpFloat64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 float64
				}
				Sequence   uint32
				DoFn       MoqRand_starGenType_ExpFloat64_doFn
				DoReturnFn MoqRand_starGenType_ExpFloat64_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRand_starGenType) PrettyParams_ExpFloat64(params MoqRand_starGenType_ExpFloat64_params) string {
	return fmt.Sprintf("ExpFloat64()")
}

func (m *MoqRand_starGenType) ParamsKey_ExpFloat64(params MoqRand_starGenType_ExpFloat64_params, anyParams uint64) MoqRand_starGenType_ExpFloat64_paramsKey {
	m.Scene.T.Helper()
	return MoqRand_starGenType_ExpFloat64_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRand_starGenType_recorder) NormFloat64() *MoqRand_starGenType_NormFloat64_fnRecorder {
	return &MoqRand_starGenType_NormFloat64_fnRecorder{
		Params:   MoqRand_starGenType_NormFloat64_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRand_starGenType_NormFloat64_fnRecorder) Any() *MoqRand_starGenType_NormFloat64_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NormFloat64(r.Params))
		return nil
	}
	return &MoqRand_starGenType_NormFloat64_anyParams{Recorder: r}
}

func (r *MoqRand_starGenType_NormFloat64_fnRecorder) Seq() *MoqRand_starGenType_NormFloat64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NormFloat64(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRand_starGenType_NormFloat64_fnRecorder) NoSeq() *MoqRand_starGenType_NormFloat64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NormFloat64(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRand_starGenType_NormFloat64_fnRecorder) ReturnResults(result1 float64) *MoqRand_starGenType_NormFloat64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_NormFloat64_doFn
		DoReturnFn MoqRand_starGenType_NormFloat64_doReturnFn
	}{
		Values: &struct {
			Result1 float64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRand_starGenType_NormFloat64_fnRecorder) AndDo(fn MoqRand_starGenType_NormFloat64_doFn) *MoqRand_starGenType_NormFloat64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRand_starGenType_NormFloat64_fnRecorder) DoReturnResults(fn MoqRand_starGenType_NormFloat64_doReturnFn) *MoqRand_starGenType_NormFloat64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_NormFloat64_doFn
		DoReturnFn MoqRand_starGenType_NormFloat64_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRand_starGenType_NormFloat64_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRand_starGenType_NormFloat64_resultsByParams
	for n, res := range r.Moq.ResultsByParams_NormFloat64 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRand_starGenType_NormFloat64_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRand_starGenType_NormFloat64_paramsKey]*MoqRand_starGenType_NormFloat64_results{},
		}
		r.Moq.ResultsByParams_NormFloat64 = append(r.Moq.ResultsByParams_NormFloat64, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_NormFloat64) {
			copy(r.Moq.ResultsByParams_NormFloat64[insertAt+1:], r.Moq.ResultsByParams_NormFloat64[insertAt:0])
			r.Moq.ResultsByParams_NormFloat64[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_NormFloat64(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRand_starGenType_NormFloat64_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRand_starGenType_NormFloat64_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRand_starGenType_NormFloat64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 float64
				}
				Sequence   uint32
				DoFn       MoqRand_starGenType_NormFloat64_doFn
				DoReturnFn MoqRand_starGenType_NormFloat64_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRand_starGenType) PrettyParams_NormFloat64(params MoqRand_starGenType_NormFloat64_params) string {
	return fmt.Sprintf("NormFloat64()")
}

func (m *MoqRand_starGenType) ParamsKey_NormFloat64(params MoqRand_starGenType_NormFloat64_params, anyParams uint64) MoqRand_starGenType_NormFloat64_paramsKey {
	m.Scene.T.Helper()
	return MoqRand_starGenType_NormFloat64_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRand_starGenType_recorder) Seed(seed int64) *MoqRand_starGenType_Seed_fnRecorder {
	return &MoqRand_starGenType_Seed_fnRecorder{
		Params: MoqRand_starGenType_Seed_params{
			Seed: seed,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRand_starGenType_Seed_fnRecorder) Any() *MoqRand_starGenType_Seed_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seed(r.Params))
		return nil
	}
	return &MoqRand_starGenType_Seed_anyParams{Recorder: r}
}

func (a *MoqRand_starGenType_Seed_anyParams) Seed() *MoqRand_starGenType_Seed_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRand_starGenType_Seed_fnRecorder) Seq() *MoqRand_starGenType_Seed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seed(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRand_starGenType_Seed_fnRecorder) NoSeq() *MoqRand_starGenType_Seed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seed(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRand_starGenType_Seed_fnRecorder) ReturnResults() *MoqRand_starGenType_Seed_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Seed_doFn
		DoReturnFn MoqRand_starGenType_Seed_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRand_starGenType_Seed_fnRecorder) AndDo(fn MoqRand_starGenType_Seed_doFn) *MoqRand_starGenType_Seed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRand_starGenType_Seed_fnRecorder) DoReturnResults(fn MoqRand_starGenType_Seed_doReturnFn) *MoqRand_starGenType_Seed_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Seed_doFn
		DoReturnFn MoqRand_starGenType_Seed_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRand_starGenType_Seed_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRand_starGenType_Seed_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Seed {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRand_starGenType_Seed_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRand_starGenType_Seed_paramsKey]*MoqRand_starGenType_Seed_results{},
		}
		r.Moq.ResultsByParams_Seed = append(r.Moq.ResultsByParams_Seed, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Seed) {
			copy(r.Moq.ResultsByParams_Seed[insertAt+1:], r.Moq.ResultsByParams_Seed[insertAt:0])
			r.Moq.ResultsByParams_Seed[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Seed(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRand_starGenType_Seed_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRand_starGenType_Seed_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRand_starGenType_Seed_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqRand_starGenType_Seed_doFn
				DoReturnFn MoqRand_starGenType_Seed_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRand_starGenType) PrettyParams_Seed(params MoqRand_starGenType_Seed_params) string {
	return fmt.Sprintf("Seed(%#v)", params.Seed)
}

func (m *MoqRand_starGenType) ParamsKey_Seed(params MoqRand_starGenType_Seed_params, anyParams uint64) MoqRand_starGenType_Seed_paramsKey {
	m.Scene.T.Helper()
	var seedUsed int64
	var seedUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Seed.Seed == moq.ParamIndexByValue {
			seedUsed = params.Seed
		} else {
			seedUsedHash = hash.DeepHash(params.Seed)
		}
	}
	return MoqRand_starGenType_Seed_paramsKey{
		Params: struct{ Seed int64 }{
			Seed: seedUsed,
		},
		Hashes: struct{ Seed hash.Hash }{
			Seed: seedUsedHash,
		},
	}
}

func (m *MoqRand_starGenType_recorder) Int63() *MoqRand_starGenType_Int63_fnRecorder {
	return &MoqRand_starGenType_Int63_fnRecorder{
		Params:   MoqRand_starGenType_Int63_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRand_starGenType_Int63_fnRecorder) Any() *MoqRand_starGenType_Int63_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int63(r.Params))
		return nil
	}
	return &MoqRand_starGenType_Int63_anyParams{Recorder: r}
}

func (r *MoqRand_starGenType_Int63_fnRecorder) Seq() *MoqRand_starGenType_Int63_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int63(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRand_starGenType_Int63_fnRecorder) NoSeq() *MoqRand_starGenType_Int63_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int63(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRand_starGenType_Int63_fnRecorder) ReturnResults(result1 int64) *MoqRand_starGenType_Int63_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Int63_doFn
		DoReturnFn MoqRand_starGenType_Int63_doReturnFn
	}{
		Values: &struct {
			Result1 int64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRand_starGenType_Int63_fnRecorder) AndDo(fn MoqRand_starGenType_Int63_doFn) *MoqRand_starGenType_Int63_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRand_starGenType_Int63_fnRecorder) DoReturnResults(fn MoqRand_starGenType_Int63_doReturnFn) *MoqRand_starGenType_Int63_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Int63_doFn
		DoReturnFn MoqRand_starGenType_Int63_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRand_starGenType_Int63_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRand_starGenType_Int63_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Int63 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRand_starGenType_Int63_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRand_starGenType_Int63_paramsKey]*MoqRand_starGenType_Int63_results{},
		}
		r.Moq.ResultsByParams_Int63 = append(r.Moq.ResultsByParams_Int63, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Int63) {
			copy(r.Moq.ResultsByParams_Int63[insertAt+1:], r.Moq.ResultsByParams_Int63[insertAt:0])
			r.Moq.ResultsByParams_Int63[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Int63(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRand_starGenType_Int63_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRand_starGenType_Int63_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRand_starGenType_Int63_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int64
				}
				Sequence   uint32
				DoFn       MoqRand_starGenType_Int63_doFn
				DoReturnFn MoqRand_starGenType_Int63_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRand_starGenType) PrettyParams_Int63(params MoqRand_starGenType_Int63_params) string {
	return fmt.Sprintf("Int63()")
}

func (m *MoqRand_starGenType) ParamsKey_Int63(params MoqRand_starGenType_Int63_params, anyParams uint64) MoqRand_starGenType_Int63_paramsKey {
	m.Scene.T.Helper()
	return MoqRand_starGenType_Int63_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRand_starGenType_recorder) Uint32() *MoqRand_starGenType_Uint32_fnRecorder {
	return &MoqRand_starGenType_Uint32_fnRecorder{
		Params:   MoqRand_starGenType_Uint32_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRand_starGenType_Uint32_fnRecorder) Any() *MoqRand_starGenType_Uint32_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint32(r.Params))
		return nil
	}
	return &MoqRand_starGenType_Uint32_anyParams{Recorder: r}
}

func (r *MoqRand_starGenType_Uint32_fnRecorder) Seq() *MoqRand_starGenType_Uint32_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint32(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRand_starGenType_Uint32_fnRecorder) NoSeq() *MoqRand_starGenType_Uint32_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint32(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRand_starGenType_Uint32_fnRecorder) ReturnResults(result1 uint32) *MoqRand_starGenType_Uint32_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint32
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Uint32_doFn
		DoReturnFn MoqRand_starGenType_Uint32_doReturnFn
	}{
		Values: &struct {
			Result1 uint32
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRand_starGenType_Uint32_fnRecorder) AndDo(fn MoqRand_starGenType_Uint32_doFn) *MoqRand_starGenType_Uint32_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRand_starGenType_Uint32_fnRecorder) DoReturnResults(fn MoqRand_starGenType_Uint32_doReturnFn) *MoqRand_starGenType_Uint32_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint32
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Uint32_doFn
		DoReturnFn MoqRand_starGenType_Uint32_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRand_starGenType_Uint32_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRand_starGenType_Uint32_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Uint32 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRand_starGenType_Uint32_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRand_starGenType_Uint32_paramsKey]*MoqRand_starGenType_Uint32_results{},
		}
		r.Moq.ResultsByParams_Uint32 = append(r.Moq.ResultsByParams_Uint32, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Uint32) {
			copy(r.Moq.ResultsByParams_Uint32[insertAt+1:], r.Moq.ResultsByParams_Uint32[insertAt:0])
			r.Moq.ResultsByParams_Uint32[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Uint32(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRand_starGenType_Uint32_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRand_starGenType_Uint32_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRand_starGenType_Uint32_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 uint32
				}
				Sequence   uint32
				DoFn       MoqRand_starGenType_Uint32_doFn
				DoReturnFn MoqRand_starGenType_Uint32_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRand_starGenType) PrettyParams_Uint32(params MoqRand_starGenType_Uint32_params) string {
	return fmt.Sprintf("Uint32()")
}

func (m *MoqRand_starGenType) ParamsKey_Uint32(params MoqRand_starGenType_Uint32_params, anyParams uint64) MoqRand_starGenType_Uint32_paramsKey {
	m.Scene.T.Helper()
	return MoqRand_starGenType_Uint32_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRand_starGenType_recorder) Uint64() *MoqRand_starGenType_Uint64_fnRecorder {
	return &MoqRand_starGenType_Uint64_fnRecorder{
		Params:   MoqRand_starGenType_Uint64_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRand_starGenType_Uint64_fnRecorder) Any() *MoqRand_starGenType_Uint64_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint64(r.Params))
		return nil
	}
	return &MoqRand_starGenType_Uint64_anyParams{Recorder: r}
}

func (r *MoqRand_starGenType_Uint64_fnRecorder) Seq() *MoqRand_starGenType_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint64(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRand_starGenType_Uint64_fnRecorder) NoSeq() *MoqRand_starGenType_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint64(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRand_starGenType_Uint64_fnRecorder) ReturnResults(result1 uint64) *MoqRand_starGenType_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint64
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Uint64_doFn
		DoReturnFn MoqRand_starGenType_Uint64_doReturnFn
	}{
		Values: &struct {
			Result1 uint64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRand_starGenType_Uint64_fnRecorder) AndDo(fn MoqRand_starGenType_Uint64_doFn) *MoqRand_starGenType_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRand_starGenType_Uint64_fnRecorder) DoReturnResults(fn MoqRand_starGenType_Uint64_doReturnFn) *MoqRand_starGenType_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint64
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Uint64_doFn
		DoReturnFn MoqRand_starGenType_Uint64_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRand_starGenType_Uint64_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRand_starGenType_Uint64_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Uint64 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRand_starGenType_Uint64_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRand_starGenType_Uint64_paramsKey]*MoqRand_starGenType_Uint64_results{},
		}
		r.Moq.ResultsByParams_Uint64 = append(r.Moq.ResultsByParams_Uint64, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Uint64) {
			copy(r.Moq.ResultsByParams_Uint64[insertAt+1:], r.Moq.ResultsByParams_Uint64[insertAt:0])
			r.Moq.ResultsByParams_Uint64[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Uint64(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRand_starGenType_Uint64_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRand_starGenType_Uint64_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRand_starGenType_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 uint64
				}
				Sequence   uint32
				DoFn       MoqRand_starGenType_Uint64_doFn
				DoReturnFn MoqRand_starGenType_Uint64_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRand_starGenType) PrettyParams_Uint64(params MoqRand_starGenType_Uint64_params) string {
	return fmt.Sprintf("Uint64()")
}

func (m *MoqRand_starGenType) ParamsKey_Uint64(params MoqRand_starGenType_Uint64_params, anyParams uint64) MoqRand_starGenType_Uint64_paramsKey {
	m.Scene.T.Helper()
	return MoqRand_starGenType_Uint64_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRand_starGenType_recorder) Int31() *MoqRand_starGenType_Int31_fnRecorder {
	return &MoqRand_starGenType_Int31_fnRecorder{
		Params:   MoqRand_starGenType_Int31_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRand_starGenType_Int31_fnRecorder) Any() *MoqRand_starGenType_Int31_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int31(r.Params))
		return nil
	}
	return &MoqRand_starGenType_Int31_anyParams{Recorder: r}
}

func (r *MoqRand_starGenType_Int31_fnRecorder) Seq() *MoqRand_starGenType_Int31_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int31(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRand_starGenType_Int31_fnRecorder) NoSeq() *MoqRand_starGenType_Int31_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int31(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRand_starGenType_Int31_fnRecorder) ReturnResults(result1 int32) *MoqRand_starGenType_Int31_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int32
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Int31_doFn
		DoReturnFn MoqRand_starGenType_Int31_doReturnFn
	}{
		Values: &struct {
			Result1 int32
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRand_starGenType_Int31_fnRecorder) AndDo(fn MoqRand_starGenType_Int31_doFn) *MoqRand_starGenType_Int31_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRand_starGenType_Int31_fnRecorder) DoReturnResults(fn MoqRand_starGenType_Int31_doReturnFn) *MoqRand_starGenType_Int31_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int32
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Int31_doFn
		DoReturnFn MoqRand_starGenType_Int31_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRand_starGenType_Int31_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRand_starGenType_Int31_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Int31 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRand_starGenType_Int31_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRand_starGenType_Int31_paramsKey]*MoqRand_starGenType_Int31_results{},
		}
		r.Moq.ResultsByParams_Int31 = append(r.Moq.ResultsByParams_Int31, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Int31) {
			copy(r.Moq.ResultsByParams_Int31[insertAt+1:], r.Moq.ResultsByParams_Int31[insertAt:0])
			r.Moq.ResultsByParams_Int31[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Int31(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRand_starGenType_Int31_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRand_starGenType_Int31_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRand_starGenType_Int31_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int32
				}
				Sequence   uint32
				DoFn       MoqRand_starGenType_Int31_doFn
				DoReturnFn MoqRand_starGenType_Int31_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRand_starGenType) PrettyParams_Int31(params MoqRand_starGenType_Int31_params) string {
	return fmt.Sprintf("Int31()")
}

func (m *MoqRand_starGenType) ParamsKey_Int31(params MoqRand_starGenType_Int31_params, anyParams uint64) MoqRand_starGenType_Int31_paramsKey {
	m.Scene.T.Helper()
	return MoqRand_starGenType_Int31_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRand_starGenType_recorder) Int() *MoqRand_starGenType_Int_fnRecorder {
	return &MoqRand_starGenType_Int_fnRecorder{
		Params:   MoqRand_starGenType_Int_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRand_starGenType_Int_fnRecorder) Any() *MoqRand_starGenType_Int_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int(r.Params))
		return nil
	}
	return &MoqRand_starGenType_Int_anyParams{Recorder: r}
}

func (r *MoqRand_starGenType_Int_fnRecorder) Seq() *MoqRand_starGenType_Int_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRand_starGenType_Int_fnRecorder) NoSeq() *MoqRand_starGenType_Int_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRand_starGenType_Int_fnRecorder) ReturnResults(result1 int) *MoqRand_starGenType_Int_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Int_doFn
		DoReturnFn MoqRand_starGenType_Int_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRand_starGenType_Int_fnRecorder) AndDo(fn MoqRand_starGenType_Int_doFn) *MoqRand_starGenType_Int_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRand_starGenType_Int_fnRecorder) DoReturnResults(fn MoqRand_starGenType_Int_doReturnFn) *MoqRand_starGenType_Int_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Int_doFn
		DoReturnFn MoqRand_starGenType_Int_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRand_starGenType_Int_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRand_starGenType_Int_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Int {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRand_starGenType_Int_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRand_starGenType_Int_paramsKey]*MoqRand_starGenType_Int_results{},
		}
		r.Moq.ResultsByParams_Int = append(r.Moq.ResultsByParams_Int, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Int) {
			copy(r.Moq.ResultsByParams_Int[insertAt+1:], r.Moq.ResultsByParams_Int[insertAt:0])
			r.Moq.ResultsByParams_Int[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Int(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRand_starGenType_Int_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRand_starGenType_Int_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRand_starGenType_Int_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqRand_starGenType_Int_doFn
				DoReturnFn MoqRand_starGenType_Int_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRand_starGenType) PrettyParams_Int(params MoqRand_starGenType_Int_params) string {
	return fmt.Sprintf("Int()")
}

func (m *MoqRand_starGenType) ParamsKey_Int(params MoqRand_starGenType_Int_params, anyParams uint64) MoqRand_starGenType_Int_paramsKey {
	m.Scene.T.Helper()
	return MoqRand_starGenType_Int_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRand_starGenType_recorder) Int63n(n int64) *MoqRand_starGenType_Int63n_fnRecorder {
	return &MoqRand_starGenType_Int63n_fnRecorder{
		Params: MoqRand_starGenType_Int63n_params{
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRand_starGenType_Int63n_fnRecorder) Any() *MoqRand_starGenType_Int63n_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int63n(r.Params))
		return nil
	}
	return &MoqRand_starGenType_Int63n_anyParams{Recorder: r}
}

func (a *MoqRand_starGenType_Int63n_anyParams) N() *MoqRand_starGenType_Int63n_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRand_starGenType_Int63n_fnRecorder) Seq() *MoqRand_starGenType_Int63n_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int63n(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRand_starGenType_Int63n_fnRecorder) NoSeq() *MoqRand_starGenType_Int63n_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int63n(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRand_starGenType_Int63n_fnRecorder) ReturnResults(result1 int64) *MoqRand_starGenType_Int63n_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Int63n_doFn
		DoReturnFn MoqRand_starGenType_Int63n_doReturnFn
	}{
		Values: &struct {
			Result1 int64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRand_starGenType_Int63n_fnRecorder) AndDo(fn MoqRand_starGenType_Int63n_doFn) *MoqRand_starGenType_Int63n_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRand_starGenType_Int63n_fnRecorder) DoReturnResults(fn MoqRand_starGenType_Int63n_doReturnFn) *MoqRand_starGenType_Int63n_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Int63n_doFn
		DoReturnFn MoqRand_starGenType_Int63n_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRand_starGenType_Int63n_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRand_starGenType_Int63n_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Int63n {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRand_starGenType_Int63n_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRand_starGenType_Int63n_paramsKey]*MoqRand_starGenType_Int63n_results{},
		}
		r.Moq.ResultsByParams_Int63n = append(r.Moq.ResultsByParams_Int63n, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Int63n) {
			copy(r.Moq.ResultsByParams_Int63n[insertAt+1:], r.Moq.ResultsByParams_Int63n[insertAt:0])
			r.Moq.ResultsByParams_Int63n[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Int63n(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRand_starGenType_Int63n_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRand_starGenType_Int63n_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRand_starGenType_Int63n_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int64
				}
				Sequence   uint32
				DoFn       MoqRand_starGenType_Int63n_doFn
				DoReturnFn MoqRand_starGenType_Int63n_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRand_starGenType) PrettyParams_Int63n(params MoqRand_starGenType_Int63n_params) string {
	return fmt.Sprintf("Int63n(%#v)", params.N)
}

func (m *MoqRand_starGenType) ParamsKey_Int63n(params MoqRand_starGenType_Int63n_params, anyParams uint64) MoqRand_starGenType_Int63n_paramsKey {
	m.Scene.T.Helper()
	var nUsed int64
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Int63n.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqRand_starGenType_Int63n_paramsKey{
		Params: struct{ N int64 }{
			N: nUsed,
		},
		Hashes: struct{ N hash.Hash }{
			N: nUsedHash,
		},
	}
}

func (m *MoqRand_starGenType_recorder) Int31n(n int32) *MoqRand_starGenType_Int31n_fnRecorder {
	return &MoqRand_starGenType_Int31n_fnRecorder{
		Params: MoqRand_starGenType_Int31n_params{
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRand_starGenType_Int31n_fnRecorder) Any() *MoqRand_starGenType_Int31n_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int31n(r.Params))
		return nil
	}
	return &MoqRand_starGenType_Int31n_anyParams{Recorder: r}
}

func (a *MoqRand_starGenType_Int31n_anyParams) N() *MoqRand_starGenType_Int31n_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRand_starGenType_Int31n_fnRecorder) Seq() *MoqRand_starGenType_Int31n_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int31n(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRand_starGenType_Int31n_fnRecorder) NoSeq() *MoqRand_starGenType_Int31n_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Int31n(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRand_starGenType_Int31n_fnRecorder) ReturnResults(result1 int32) *MoqRand_starGenType_Int31n_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int32
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Int31n_doFn
		DoReturnFn MoqRand_starGenType_Int31n_doReturnFn
	}{
		Values: &struct {
			Result1 int32
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRand_starGenType_Int31n_fnRecorder) AndDo(fn MoqRand_starGenType_Int31n_doFn) *MoqRand_starGenType_Int31n_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRand_starGenType_Int31n_fnRecorder) DoReturnResults(fn MoqRand_starGenType_Int31n_doReturnFn) *MoqRand_starGenType_Int31n_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int32
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Int31n_doFn
		DoReturnFn MoqRand_starGenType_Int31n_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRand_starGenType_Int31n_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRand_starGenType_Int31n_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Int31n {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRand_starGenType_Int31n_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRand_starGenType_Int31n_paramsKey]*MoqRand_starGenType_Int31n_results{},
		}
		r.Moq.ResultsByParams_Int31n = append(r.Moq.ResultsByParams_Int31n, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Int31n) {
			copy(r.Moq.ResultsByParams_Int31n[insertAt+1:], r.Moq.ResultsByParams_Int31n[insertAt:0])
			r.Moq.ResultsByParams_Int31n[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Int31n(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRand_starGenType_Int31n_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRand_starGenType_Int31n_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRand_starGenType_Int31n_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int32
				}
				Sequence   uint32
				DoFn       MoqRand_starGenType_Int31n_doFn
				DoReturnFn MoqRand_starGenType_Int31n_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRand_starGenType) PrettyParams_Int31n(params MoqRand_starGenType_Int31n_params) string {
	return fmt.Sprintf("Int31n(%#v)", params.N)
}

func (m *MoqRand_starGenType) ParamsKey_Int31n(params MoqRand_starGenType_Int31n_params, anyParams uint64) MoqRand_starGenType_Int31n_paramsKey {
	m.Scene.T.Helper()
	var nUsed int32
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Int31n.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqRand_starGenType_Int31n_paramsKey{
		Params: struct{ N int32 }{
			N: nUsed,
		},
		Hashes: struct{ N hash.Hash }{
			N: nUsedHash,
		},
	}
}

func (m *MoqRand_starGenType_recorder) Intn(n int) *MoqRand_starGenType_Intn_fnRecorder {
	return &MoqRand_starGenType_Intn_fnRecorder{
		Params: MoqRand_starGenType_Intn_params{
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRand_starGenType_Intn_fnRecorder) Any() *MoqRand_starGenType_Intn_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Intn(r.Params))
		return nil
	}
	return &MoqRand_starGenType_Intn_anyParams{Recorder: r}
}

func (a *MoqRand_starGenType_Intn_anyParams) N() *MoqRand_starGenType_Intn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRand_starGenType_Intn_fnRecorder) Seq() *MoqRand_starGenType_Intn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Intn(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRand_starGenType_Intn_fnRecorder) NoSeq() *MoqRand_starGenType_Intn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Intn(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRand_starGenType_Intn_fnRecorder) ReturnResults(result1 int) *MoqRand_starGenType_Intn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Intn_doFn
		DoReturnFn MoqRand_starGenType_Intn_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRand_starGenType_Intn_fnRecorder) AndDo(fn MoqRand_starGenType_Intn_doFn) *MoqRand_starGenType_Intn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRand_starGenType_Intn_fnRecorder) DoReturnResults(fn MoqRand_starGenType_Intn_doReturnFn) *MoqRand_starGenType_Intn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Intn_doFn
		DoReturnFn MoqRand_starGenType_Intn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRand_starGenType_Intn_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRand_starGenType_Intn_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Intn {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRand_starGenType_Intn_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRand_starGenType_Intn_paramsKey]*MoqRand_starGenType_Intn_results{},
		}
		r.Moq.ResultsByParams_Intn = append(r.Moq.ResultsByParams_Intn, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Intn) {
			copy(r.Moq.ResultsByParams_Intn[insertAt+1:], r.Moq.ResultsByParams_Intn[insertAt:0])
			r.Moq.ResultsByParams_Intn[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Intn(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRand_starGenType_Intn_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRand_starGenType_Intn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRand_starGenType_Intn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqRand_starGenType_Intn_doFn
				DoReturnFn MoqRand_starGenType_Intn_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRand_starGenType) PrettyParams_Intn(params MoqRand_starGenType_Intn_params) string {
	return fmt.Sprintf("Intn(%#v)", params.N)
}

func (m *MoqRand_starGenType) ParamsKey_Intn(params MoqRand_starGenType_Intn_params, anyParams uint64) MoqRand_starGenType_Intn_paramsKey {
	m.Scene.T.Helper()
	var nUsed int
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Intn.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqRand_starGenType_Intn_paramsKey{
		Params: struct{ N int }{
			N: nUsed,
		},
		Hashes: struct{ N hash.Hash }{
			N: nUsedHash,
		},
	}
}

func (m *MoqRand_starGenType_recorder) Float64() *MoqRand_starGenType_Float64_fnRecorder {
	return &MoqRand_starGenType_Float64_fnRecorder{
		Params:   MoqRand_starGenType_Float64_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRand_starGenType_Float64_fnRecorder) Any() *MoqRand_starGenType_Float64_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Float64(r.Params))
		return nil
	}
	return &MoqRand_starGenType_Float64_anyParams{Recorder: r}
}

func (r *MoqRand_starGenType_Float64_fnRecorder) Seq() *MoqRand_starGenType_Float64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Float64(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRand_starGenType_Float64_fnRecorder) NoSeq() *MoqRand_starGenType_Float64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Float64(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRand_starGenType_Float64_fnRecorder) ReturnResults(result1 float64) *MoqRand_starGenType_Float64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Float64_doFn
		DoReturnFn MoqRand_starGenType_Float64_doReturnFn
	}{
		Values: &struct {
			Result1 float64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRand_starGenType_Float64_fnRecorder) AndDo(fn MoqRand_starGenType_Float64_doFn) *MoqRand_starGenType_Float64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRand_starGenType_Float64_fnRecorder) DoReturnResults(fn MoqRand_starGenType_Float64_doReturnFn) *MoqRand_starGenType_Float64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Float64_doFn
		DoReturnFn MoqRand_starGenType_Float64_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRand_starGenType_Float64_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRand_starGenType_Float64_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Float64 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRand_starGenType_Float64_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRand_starGenType_Float64_paramsKey]*MoqRand_starGenType_Float64_results{},
		}
		r.Moq.ResultsByParams_Float64 = append(r.Moq.ResultsByParams_Float64, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Float64) {
			copy(r.Moq.ResultsByParams_Float64[insertAt+1:], r.Moq.ResultsByParams_Float64[insertAt:0])
			r.Moq.ResultsByParams_Float64[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Float64(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRand_starGenType_Float64_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRand_starGenType_Float64_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRand_starGenType_Float64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 float64
				}
				Sequence   uint32
				DoFn       MoqRand_starGenType_Float64_doFn
				DoReturnFn MoqRand_starGenType_Float64_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRand_starGenType) PrettyParams_Float64(params MoqRand_starGenType_Float64_params) string {
	return fmt.Sprintf("Float64()")
}

func (m *MoqRand_starGenType) ParamsKey_Float64(params MoqRand_starGenType_Float64_params, anyParams uint64) MoqRand_starGenType_Float64_paramsKey {
	m.Scene.T.Helper()
	return MoqRand_starGenType_Float64_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRand_starGenType_recorder) Float32() *MoqRand_starGenType_Float32_fnRecorder {
	return &MoqRand_starGenType_Float32_fnRecorder{
		Params:   MoqRand_starGenType_Float32_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRand_starGenType_Float32_fnRecorder) Any() *MoqRand_starGenType_Float32_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Float32(r.Params))
		return nil
	}
	return &MoqRand_starGenType_Float32_anyParams{Recorder: r}
}

func (r *MoqRand_starGenType_Float32_fnRecorder) Seq() *MoqRand_starGenType_Float32_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Float32(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRand_starGenType_Float32_fnRecorder) NoSeq() *MoqRand_starGenType_Float32_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Float32(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRand_starGenType_Float32_fnRecorder) ReturnResults(result1 float32) *MoqRand_starGenType_Float32_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 float32
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Float32_doFn
		DoReturnFn MoqRand_starGenType_Float32_doReturnFn
	}{
		Values: &struct {
			Result1 float32
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRand_starGenType_Float32_fnRecorder) AndDo(fn MoqRand_starGenType_Float32_doFn) *MoqRand_starGenType_Float32_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRand_starGenType_Float32_fnRecorder) DoReturnResults(fn MoqRand_starGenType_Float32_doReturnFn) *MoqRand_starGenType_Float32_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 float32
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Float32_doFn
		DoReturnFn MoqRand_starGenType_Float32_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRand_starGenType_Float32_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRand_starGenType_Float32_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Float32 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRand_starGenType_Float32_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRand_starGenType_Float32_paramsKey]*MoqRand_starGenType_Float32_results{},
		}
		r.Moq.ResultsByParams_Float32 = append(r.Moq.ResultsByParams_Float32, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Float32) {
			copy(r.Moq.ResultsByParams_Float32[insertAt+1:], r.Moq.ResultsByParams_Float32[insertAt:0])
			r.Moq.ResultsByParams_Float32[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Float32(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRand_starGenType_Float32_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRand_starGenType_Float32_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRand_starGenType_Float32_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 float32
				}
				Sequence   uint32
				DoFn       MoqRand_starGenType_Float32_doFn
				DoReturnFn MoqRand_starGenType_Float32_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRand_starGenType) PrettyParams_Float32(params MoqRand_starGenType_Float32_params) string {
	return fmt.Sprintf("Float32()")
}

func (m *MoqRand_starGenType) ParamsKey_Float32(params MoqRand_starGenType_Float32_params, anyParams uint64) MoqRand_starGenType_Float32_paramsKey {
	m.Scene.T.Helper()
	return MoqRand_starGenType_Float32_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRand_starGenType_recorder) Perm(n int) *MoqRand_starGenType_Perm_fnRecorder {
	return &MoqRand_starGenType_Perm_fnRecorder{
		Params: MoqRand_starGenType_Perm_params{
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRand_starGenType_Perm_fnRecorder) Any() *MoqRand_starGenType_Perm_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Perm(r.Params))
		return nil
	}
	return &MoqRand_starGenType_Perm_anyParams{Recorder: r}
}

func (a *MoqRand_starGenType_Perm_anyParams) N() *MoqRand_starGenType_Perm_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRand_starGenType_Perm_fnRecorder) Seq() *MoqRand_starGenType_Perm_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Perm(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRand_starGenType_Perm_fnRecorder) NoSeq() *MoqRand_starGenType_Perm_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Perm(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRand_starGenType_Perm_fnRecorder) ReturnResults(result1 []int) *MoqRand_starGenType_Perm_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []int
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Perm_doFn
		DoReturnFn MoqRand_starGenType_Perm_doReturnFn
	}{
		Values: &struct {
			Result1 []int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRand_starGenType_Perm_fnRecorder) AndDo(fn MoqRand_starGenType_Perm_doFn) *MoqRand_starGenType_Perm_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRand_starGenType_Perm_fnRecorder) DoReturnResults(fn MoqRand_starGenType_Perm_doReturnFn) *MoqRand_starGenType_Perm_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []int
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Perm_doFn
		DoReturnFn MoqRand_starGenType_Perm_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRand_starGenType_Perm_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRand_starGenType_Perm_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Perm {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRand_starGenType_Perm_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRand_starGenType_Perm_paramsKey]*MoqRand_starGenType_Perm_results{},
		}
		r.Moq.ResultsByParams_Perm = append(r.Moq.ResultsByParams_Perm, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Perm) {
			copy(r.Moq.ResultsByParams_Perm[insertAt+1:], r.Moq.ResultsByParams_Perm[insertAt:0])
			r.Moq.ResultsByParams_Perm[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Perm(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRand_starGenType_Perm_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRand_starGenType_Perm_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRand_starGenType_Perm_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []int
				}
				Sequence   uint32
				DoFn       MoqRand_starGenType_Perm_doFn
				DoReturnFn MoqRand_starGenType_Perm_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRand_starGenType) PrettyParams_Perm(params MoqRand_starGenType_Perm_params) string {
	return fmt.Sprintf("Perm(%#v)", params.N)
}

func (m *MoqRand_starGenType) ParamsKey_Perm(params MoqRand_starGenType_Perm_params, anyParams uint64) MoqRand_starGenType_Perm_paramsKey {
	m.Scene.T.Helper()
	var nUsed int
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Perm.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqRand_starGenType_Perm_paramsKey{
		Params: struct{ N int }{
			N: nUsed,
		},
		Hashes: struct{ N hash.Hash }{
			N: nUsedHash,
		},
	}
}

func (m *MoqRand_starGenType_recorder) Shuffle(n int, swap func(i, j int)) *MoqRand_starGenType_Shuffle_fnRecorder {
	return &MoqRand_starGenType_Shuffle_fnRecorder{
		Params: MoqRand_starGenType_Shuffle_params{
			N:    n,
			Swap: swap,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRand_starGenType_Shuffle_fnRecorder) Any() *MoqRand_starGenType_Shuffle_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Shuffle(r.Params))
		return nil
	}
	return &MoqRand_starGenType_Shuffle_anyParams{Recorder: r}
}

func (a *MoqRand_starGenType_Shuffle_anyParams) N() *MoqRand_starGenType_Shuffle_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqRand_starGenType_Shuffle_anyParams) Swap() *MoqRand_starGenType_Shuffle_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqRand_starGenType_Shuffle_fnRecorder) Seq() *MoqRand_starGenType_Shuffle_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Shuffle(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRand_starGenType_Shuffle_fnRecorder) NoSeq() *MoqRand_starGenType_Shuffle_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Shuffle(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRand_starGenType_Shuffle_fnRecorder) ReturnResults() *MoqRand_starGenType_Shuffle_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Shuffle_doFn
		DoReturnFn MoqRand_starGenType_Shuffle_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRand_starGenType_Shuffle_fnRecorder) AndDo(fn MoqRand_starGenType_Shuffle_doFn) *MoqRand_starGenType_Shuffle_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRand_starGenType_Shuffle_fnRecorder) DoReturnResults(fn MoqRand_starGenType_Shuffle_doReturnFn) *MoqRand_starGenType_Shuffle_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Shuffle_doFn
		DoReturnFn MoqRand_starGenType_Shuffle_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRand_starGenType_Shuffle_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRand_starGenType_Shuffle_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Shuffle {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRand_starGenType_Shuffle_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRand_starGenType_Shuffle_paramsKey]*MoqRand_starGenType_Shuffle_results{},
		}
		r.Moq.ResultsByParams_Shuffle = append(r.Moq.ResultsByParams_Shuffle, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Shuffle) {
			copy(r.Moq.ResultsByParams_Shuffle[insertAt+1:], r.Moq.ResultsByParams_Shuffle[insertAt:0])
			r.Moq.ResultsByParams_Shuffle[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Shuffle(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRand_starGenType_Shuffle_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRand_starGenType_Shuffle_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRand_starGenType_Shuffle_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqRand_starGenType_Shuffle_doFn
				DoReturnFn MoqRand_starGenType_Shuffle_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRand_starGenType) PrettyParams_Shuffle(params MoqRand_starGenType_Shuffle_params) string {
	return fmt.Sprintf("Shuffle(%#v, %#v)", params.N, moq.FnString(params.Swap))
}

func (m *MoqRand_starGenType) ParamsKey_Shuffle(params MoqRand_starGenType_Shuffle_params, anyParams uint64) MoqRand_starGenType_Shuffle_paramsKey {
	m.Scene.T.Helper()
	var nUsed int
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Shuffle.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	var swapUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Shuffle.Swap == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The swap parameter of the Shuffle function can't be indexed by value")
		}
		swapUsedHash = hash.DeepHash(params.Swap)
	}
	return MoqRand_starGenType_Shuffle_paramsKey{
		Params: struct{ N int }{
			N: nUsed,
		},
		Hashes: struct {
			N    hash.Hash
			Swap hash.Hash
		}{
			N:    nUsedHash,
			Swap: swapUsedHash,
		},
	}
}

func (m *MoqRand_starGenType_recorder) Read(p []byte) *MoqRand_starGenType_Read_fnRecorder {
	return &MoqRand_starGenType_Read_fnRecorder{
		Params: MoqRand_starGenType_Read_params{
			P: p,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRand_starGenType_Read_fnRecorder) Any() *MoqRand_starGenType_Read_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	return &MoqRand_starGenType_Read_anyParams{Recorder: r}
}

func (a *MoqRand_starGenType_Read_anyParams) P() *MoqRand_starGenType_Read_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRand_starGenType_Read_fnRecorder) Seq() *MoqRand_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRand_starGenType_Read_fnRecorder) NoSeq() *MoqRand_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRand_starGenType_Read_fnRecorder) ReturnResults(n int, err error) *MoqRand_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Read_doFn
		DoReturnFn MoqRand_starGenType_Read_doReturnFn
	}{
		Values: &struct {
			N   int
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRand_starGenType_Read_fnRecorder) AndDo(fn MoqRand_starGenType_Read_doFn) *MoqRand_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRand_starGenType_Read_fnRecorder) DoReturnResults(fn MoqRand_starGenType_Read_doReturnFn) *MoqRand_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqRand_starGenType_Read_doFn
		DoReturnFn MoqRand_starGenType_Read_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRand_starGenType_Read_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRand_starGenType_Read_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Read {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRand_starGenType_Read_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRand_starGenType_Read_paramsKey]*MoqRand_starGenType_Read_results{},
		}
		r.Moq.ResultsByParams_Read = append(r.Moq.ResultsByParams_Read, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Read) {
			copy(r.Moq.ResultsByParams_Read[insertAt+1:], r.Moq.ResultsByParams_Read[insertAt:0])
			r.Moq.ResultsByParams_Read[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Read(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRand_starGenType_Read_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRand_starGenType_Read_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRand_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int
					Err error
				}
				Sequence   uint32
				DoFn       MoqRand_starGenType_Read_doFn
				DoReturnFn MoqRand_starGenType_Read_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRand_starGenType) PrettyParams_Read(params MoqRand_starGenType_Read_params) string {
	return fmt.Sprintf("Read(%#v)", params.P)
}

func (m *MoqRand_starGenType) ParamsKey_Read(params MoqRand_starGenType_Read_params, anyParams uint64) MoqRand_starGenType_Read_paramsKey {
	m.Scene.T.Helper()
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Read.P == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The p parameter of the Read function can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.P)
	}
	return MoqRand_starGenType_Read_paramsKey{
		Params: struct{}{},
		Hashes: struct{ P hash.Hash }{
			P: pUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqRand_starGenType) Reset() {
	m.ResultsByParams_ExpFloat64 = nil
	m.ResultsByParams_NormFloat64 = nil
	m.ResultsByParams_Seed = nil
	m.ResultsByParams_Int63 = nil
	m.ResultsByParams_Uint32 = nil
	m.ResultsByParams_Uint64 = nil
	m.ResultsByParams_Int31 = nil
	m.ResultsByParams_Int = nil
	m.ResultsByParams_Int63n = nil
	m.ResultsByParams_Int31n = nil
	m.ResultsByParams_Intn = nil
	m.ResultsByParams_Float64 = nil
	m.ResultsByParams_Float32 = nil
	m.ResultsByParams_Perm = nil
	m.ResultsByParams_Shuffle = nil
	m.ResultsByParams_Read = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqRand_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_ExpFloat64 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ExpFloat64(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_NormFloat64 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_NormFloat64(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Seed {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Seed(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Int63 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Int63(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Uint32 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Uint32(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Uint64 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Uint64(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Int31 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Int31(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Int {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Int(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Int63n {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Int63n(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Int31n {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Int31n(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Intn {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Intn(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Float64 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Float64(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Float32 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Float32(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Perm {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Perm(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Shuffle {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Shuffle(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Read {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Read(results.Params))
			}
		}
	}
}
