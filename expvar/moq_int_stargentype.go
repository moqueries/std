// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package expvar

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that expvar.Int_starGenType is mocked
// completely
var _ Int_starGenType = (*MoqInt_starGenType_mock)(nil)

// Int_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Int_starGenType interface {
	Value() int64
	String() string
	Add(delta int64)
	Set(value int64)
}

// MoqInt_starGenType holds the state of a moq of the Int_starGenType type
type MoqInt_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqInt_starGenType_mock

	ResultsByParams_Value  []MoqInt_starGenType_Value_resultsByParams
	ResultsByParams_String []MoqInt_starGenType_String_resultsByParams
	ResultsByParams_Add    []MoqInt_starGenType_Add_resultsByParams
	ResultsByParams_Set    []MoqInt_starGenType_Set_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Value  struct{}
			String struct{}
			Add    struct {
				Delta moq.ParamIndexing
			}
			Set struct {
				Value moq.ParamIndexing
			}
		}
	}
	// MoqInt_starGenType_mock isolates the mock interface of the Int_starGenType
}

// type
type MoqInt_starGenType_mock struct {
	Moq *MoqInt_starGenType
}

// MoqInt_starGenType_recorder isolates the recorder interface of the
// Int_starGenType type
type MoqInt_starGenType_recorder struct {
	Moq *MoqInt_starGenType
}

// MoqInt_starGenType_Value_params holds the params of the Int_starGenType type
type MoqInt_starGenType_Value_params struct{}

// MoqInt_starGenType_Value_paramsKey holds the map key params of the
// Int_starGenType type
type MoqInt_starGenType_Value_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqInt_starGenType_Value_resultsByParams contains the results for a given
// set of parameters for the Int_starGenType type
type MoqInt_starGenType_Value_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqInt_starGenType_Value_paramsKey]*MoqInt_starGenType_Value_results
}

// MoqInt_starGenType_Value_doFn defines the type of function needed when
// calling AndDo for the Int_starGenType type
type MoqInt_starGenType_Value_doFn func()

// MoqInt_starGenType_Value_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Int_starGenType type
type MoqInt_starGenType_Value_doReturnFn func() int64

// MoqInt_starGenType_Value_results holds the results of the Int_starGenType
// type
type MoqInt_starGenType_Value_results struct {
	Params  MoqInt_starGenType_Value_params
	Results []struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqInt_starGenType_Value_doFn
		DoReturnFn MoqInt_starGenType_Value_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqInt_starGenType_Value_fnRecorder routes recorded function calls to the
// MoqInt_starGenType moq
type MoqInt_starGenType_Value_fnRecorder struct {
	Params    MoqInt_starGenType_Value_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqInt_starGenType_Value_results
	Moq       *MoqInt_starGenType
}

// MoqInt_starGenType_Value_anyParams isolates the any params functions of the
// Int_starGenType type
type MoqInt_starGenType_Value_anyParams struct {
	Recorder *MoqInt_starGenType_Value_fnRecorder
}

// MoqInt_starGenType_String_params holds the params of the Int_starGenType
// type
type MoqInt_starGenType_String_params struct{}

// MoqInt_starGenType_String_paramsKey holds the map key params of the
// Int_starGenType type
type MoqInt_starGenType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqInt_starGenType_String_resultsByParams contains the results for a given
// set of parameters for the Int_starGenType type
type MoqInt_starGenType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqInt_starGenType_String_paramsKey]*MoqInt_starGenType_String_results
}

// MoqInt_starGenType_String_doFn defines the type of function needed when
// calling AndDo for the Int_starGenType type
type MoqInt_starGenType_String_doFn func()

// MoqInt_starGenType_String_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Int_starGenType type
type MoqInt_starGenType_String_doReturnFn func() string

// MoqInt_starGenType_String_results holds the results of the Int_starGenType
// type
type MoqInt_starGenType_String_results struct {
	Params  MoqInt_starGenType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqInt_starGenType_String_doFn
		DoReturnFn MoqInt_starGenType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqInt_starGenType_String_fnRecorder routes recorded function calls to the
// MoqInt_starGenType moq
type MoqInt_starGenType_String_fnRecorder struct {
	Params    MoqInt_starGenType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqInt_starGenType_String_results
	Moq       *MoqInt_starGenType
}

// MoqInt_starGenType_String_anyParams isolates the any params functions of the
// Int_starGenType type
type MoqInt_starGenType_String_anyParams struct {
	Recorder *MoqInt_starGenType_String_fnRecorder
}

// MoqInt_starGenType_Add_params holds the params of the Int_starGenType type
type MoqInt_starGenType_Add_params struct{ Delta int64 }

// MoqInt_starGenType_Add_paramsKey holds the map key params of the
// Int_starGenType type
type MoqInt_starGenType_Add_paramsKey struct {
	Params struct{ Delta int64 }
	Hashes struct{ Delta hash.Hash }
}

// MoqInt_starGenType_Add_resultsByParams contains the results for a given set
// of parameters for the Int_starGenType type
type MoqInt_starGenType_Add_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqInt_starGenType_Add_paramsKey]*MoqInt_starGenType_Add_results
}

// MoqInt_starGenType_Add_doFn defines the type of function needed when calling
// AndDo for the Int_starGenType type
type MoqInt_starGenType_Add_doFn func(delta int64)

// MoqInt_starGenType_Add_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Int_starGenType type
type MoqInt_starGenType_Add_doReturnFn func(delta int64)

// MoqInt_starGenType_Add_results holds the results of the Int_starGenType type
type MoqInt_starGenType_Add_results struct {
	Params  MoqInt_starGenType_Add_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqInt_starGenType_Add_doFn
		DoReturnFn MoqInt_starGenType_Add_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqInt_starGenType_Add_fnRecorder routes recorded function calls to the
// MoqInt_starGenType moq
type MoqInt_starGenType_Add_fnRecorder struct {
	Params    MoqInt_starGenType_Add_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqInt_starGenType_Add_results
	Moq       *MoqInt_starGenType
}

// MoqInt_starGenType_Add_anyParams isolates the any params functions of the
// Int_starGenType type
type MoqInt_starGenType_Add_anyParams struct {
	Recorder *MoqInt_starGenType_Add_fnRecorder
}

// MoqInt_starGenType_Set_params holds the params of the Int_starGenType type
type MoqInt_starGenType_Set_params struct{ Value int64 }

// MoqInt_starGenType_Set_paramsKey holds the map key params of the
// Int_starGenType type
type MoqInt_starGenType_Set_paramsKey struct {
	Params struct{ Value int64 }
	Hashes struct{ Value hash.Hash }
}

// MoqInt_starGenType_Set_resultsByParams contains the results for a given set
// of parameters for the Int_starGenType type
type MoqInt_starGenType_Set_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqInt_starGenType_Set_paramsKey]*MoqInt_starGenType_Set_results
}

// MoqInt_starGenType_Set_doFn defines the type of function needed when calling
// AndDo for the Int_starGenType type
type MoqInt_starGenType_Set_doFn func(value int64)

// MoqInt_starGenType_Set_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Int_starGenType type
type MoqInt_starGenType_Set_doReturnFn func(value int64)

// MoqInt_starGenType_Set_results holds the results of the Int_starGenType type
type MoqInt_starGenType_Set_results struct {
	Params  MoqInt_starGenType_Set_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqInt_starGenType_Set_doFn
		DoReturnFn MoqInt_starGenType_Set_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqInt_starGenType_Set_fnRecorder routes recorded function calls to the
// MoqInt_starGenType moq
type MoqInt_starGenType_Set_fnRecorder struct {
	Params    MoqInt_starGenType_Set_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqInt_starGenType_Set_results
	Moq       *MoqInt_starGenType
}

// MoqInt_starGenType_Set_anyParams isolates the any params functions of the
// Int_starGenType type
type MoqInt_starGenType_Set_anyParams struct {
	Recorder *MoqInt_starGenType_Set_fnRecorder
}

// NewMoqInt_starGenType creates a new moq of the Int_starGenType type
func NewMoqInt_starGenType(scene *moq.Scene, config *moq.Config) *MoqInt_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqInt_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqInt_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Value  struct{}
				String struct{}
				Add    struct {
					Delta moq.ParamIndexing
				}
				Set struct {
					Value moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Value  struct{}
			String struct{}
			Add    struct {
				Delta moq.ParamIndexing
			}
			Set struct {
				Value moq.ParamIndexing
			}
		}{
			Value:  struct{}{},
			String: struct{}{},
			Add: struct {
				Delta moq.ParamIndexing
			}{
				Delta: moq.ParamIndexByValue,
			},
			Set: struct {
				Value moq.ParamIndexing
			}{
				Value: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Int_starGenType type
func (m *MoqInt_starGenType) Mock() *MoqInt_starGenType_mock { return m.Moq }

func (m *MoqInt_starGenType_mock) Value() (result1 int64) {
	m.Moq.Scene.T.Helper()
	params := MoqInt_starGenType_Value_params{}
	var results *MoqInt_starGenType_Value_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Value {
		paramsKey := m.Moq.ParamsKey_Value(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Value(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Value(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Value(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqInt_starGenType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqInt_starGenType_String_params{}
	var results *MoqInt_starGenType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqInt_starGenType_mock) Add(delta int64) {
	m.Moq.Scene.T.Helper()
	params := MoqInt_starGenType_Add_params{
		Delta: delta,
	}
	var results *MoqInt_starGenType_Add_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Add {
		paramsKey := m.Moq.ParamsKey_Add(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Add(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Add(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Add(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(delta)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(delta)
	}
	return
}

func (m *MoqInt_starGenType_mock) Set(value int64) {
	m.Moq.Scene.T.Helper()
	params := MoqInt_starGenType_Set_params{
		Value: value,
	}
	var results *MoqInt_starGenType_Set_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Set {
		paramsKey := m.Moq.ParamsKey_Set(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Set(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Set(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Set(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(value)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(value)
	}
	return
}

// OnCall returns the recorder implementation of the Int_starGenType type
func (m *MoqInt_starGenType) OnCall() *MoqInt_starGenType_recorder {
	return &MoqInt_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqInt_starGenType_recorder) Value() *MoqInt_starGenType_Value_fnRecorder {
	return &MoqInt_starGenType_Value_fnRecorder{
		Params:   MoqInt_starGenType_Value_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqInt_starGenType_Value_fnRecorder) Any() *MoqInt_starGenType_Value_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Value(r.Params))
		return nil
	}
	return &MoqInt_starGenType_Value_anyParams{Recorder: r}
}

func (r *MoqInt_starGenType_Value_fnRecorder) Seq() *MoqInt_starGenType_Value_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Value(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqInt_starGenType_Value_fnRecorder) NoSeq() *MoqInt_starGenType_Value_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Value(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqInt_starGenType_Value_fnRecorder) ReturnResults(result1 int64) *MoqInt_starGenType_Value_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqInt_starGenType_Value_doFn
		DoReturnFn MoqInt_starGenType_Value_doReturnFn
	}{
		Values: &struct {
			Result1 int64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqInt_starGenType_Value_fnRecorder) AndDo(fn MoqInt_starGenType_Value_doFn) *MoqInt_starGenType_Value_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqInt_starGenType_Value_fnRecorder) DoReturnResults(fn MoqInt_starGenType_Value_doReturnFn) *MoqInt_starGenType_Value_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqInt_starGenType_Value_doFn
		DoReturnFn MoqInt_starGenType_Value_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqInt_starGenType_Value_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqInt_starGenType_Value_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Value {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqInt_starGenType_Value_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqInt_starGenType_Value_paramsKey]*MoqInt_starGenType_Value_results{},
		}
		r.Moq.ResultsByParams_Value = append(r.Moq.ResultsByParams_Value, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Value) {
			copy(r.Moq.ResultsByParams_Value[insertAt+1:], r.Moq.ResultsByParams_Value[insertAt:0])
			r.Moq.ResultsByParams_Value[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Value(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqInt_starGenType_Value_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqInt_starGenType_Value_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqInt_starGenType_Value_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int64
				}
				Sequence   uint32
				DoFn       MoqInt_starGenType_Value_doFn
				DoReturnFn MoqInt_starGenType_Value_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqInt_starGenType) PrettyParams_Value(params MoqInt_starGenType_Value_params) string {
	return fmt.Sprintf("Value()")
}

func (m *MoqInt_starGenType) ParamsKey_Value(params MoqInt_starGenType_Value_params, anyParams uint64) MoqInt_starGenType_Value_paramsKey {
	m.Scene.T.Helper()
	return MoqInt_starGenType_Value_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqInt_starGenType_recorder) String() *MoqInt_starGenType_String_fnRecorder {
	return &MoqInt_starGenType_String_fnRecorder{
		Params:   MoqInt_starGenType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqInt_starGenType_String_fnRecorder) Any() *MoqInt_starGenType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqInt_starGenType_String_anyParams{Recorder: r}
}

func (r *MoqInt_starGenType_String_fnRecorder) Seq() *MoqInt_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqInt_starGenType_String_fnRecorder) NoSeq() *MoqInt_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqInt_starGenType_String_fnRecorder) ReturnResults(result1 string) *MoqInt_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqInt_starGenType_String_doFn
		DoReturnFn MoqInt_starGenType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqInt_starGenType_String_fnRecorder) AndDo(fn MoqInt_starGenType_String_doFn) *MoqInt_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqInt_starGenType_String_fnRecorder) DoReturnResults(fn MoqInt_starGenType_String_doReturnFn) *MoqInt_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqInt_starGenType_String_doFn
		DoReturnFn MoqInt_starGenType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqInt_starGenType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqInt_starGenType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqInt_starGenType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqInt_starGenType_String_paramsKey]*MoqInt_starGenType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqInt_starGenType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqInt_starGenType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqInt_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqInt_starGenType_String_doFn
				DoReturnFn MoqInt_starGenType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqInt_starGenType) PrettyParams_String(params MoqInt_starGenType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqInt_starGenType) ParamsKey_String(params MoqInt_starGenType_String_params, anyParams uint64) MoqInt_starGenType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqInt_starGenType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqInt_starGenType_recorder) Add(delta int64) *MoqInt_starGenType_Add_fnRecorder {
	return &MoqInt_starGenType_Add_fnRecorder{
		Params: MoqInt_starGenType_Add_params{
			Delta: delta,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqInt_starGenType_Add_fnRecorder) Any() *MoqInt_starGenType_Add_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	return &MoqInt_starGenType_Add_anyParams{Recorder: r}
}

func (a *MoqInt_starGenType_Add_anyParams) Delta() *MoqInt_starGenType_Add_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqInt_starGenType_Add_fnRecorder) Seq() *MoqInt_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqInt_starGenType_Add_fnRecorder) NoSeq() *MoqInt_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqInt_starGenType_Add_fnRecorder) ReturnResults() *MoqInt_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqInt_starGenType_Add_doFn
		DoReturnFn MoqInt_starGenType_Add_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqInt_starGenType_Add_fnRecorder) AndDo(fn MoqInt_starGenType_Add_doFn) *MoqInt_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqInt_starGenType_Add_fnRecorder) DoReturnResults(fn MoqInt_starGenType_Add_doReturnFn) *MoqInt_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqInt_starGenType_Add_doFn
		DoReturnFn MoqInt_starGenType_Add_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqInt_starGenType_Add_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqInt_starGenType_Add_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Add {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqInt_starGenType_Add_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqInt_starGenType_Add_paramsKey]*MoqInt_starGenType_Add_results{},
		}
		r.Moq.ResultsByParams_Add = append(r.Moq.ResultsByParams_Add, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Add) {
			copy(r.Moq.ResultsByParams_Add[insertAt+1:], r.Moq.ResultsByParams_Add[insertAt:0])
			r.Moq.ResultsByParams_Add[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Add(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqInt_starGenType_Add_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqInt_starGenType_Add_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqInt_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqInt_starGenType_Add_doFn
				DoReturnFn MoqInt_starGenType_Add_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqInt_starGenType) PrettyParams_Add(params MoqInt_starGenType_Add_params) string {
	return fmt.Sprintf("Add(%#v)", params.Delta)
}

func (m *MoqInt_starGenType) ParamsKey_Add(params MoqInt_starGenType_Add_params, anyParams uint64) MoqInt_starGenType_Add_paramsKey {
	m.Scene.T.Helper()
	var deltaUsed int64
	var deltaUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Add.Delta == moq.ParamIndexByValue {
			deltaUsed = params.Delta
		} else {
			deltaUsedHash = hash.DeepHash(params.Delta)
		}
	}
	return MoqInt_starGenType_Add_paramsKey{
		Params: struct{ Delta int64 }{
			Delta: deltaUsed,
		},
		Hashes: struct{ Delta hash.Hash }{
			Delta: deltaUsedHash,
		},
	}
}

func (m *MoqInt_starGenType_recorder) Set(value int64) *MoqInt_starGenType_Set_fnRecorder {
	return &MoqInt_starGenType_Set_fnRecorder{
		Params: MoqInt_starGenType_Set_params{
			Value: value,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqInt_starGenType_Set_fnRecorder) Any() *MoqInt_starGenType_Set_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	return &MoqInt_starGenType_Set_anyParams{Recorder: r}
}

func (a *MoqInt_starGenType_Set_anyParams) Value() *MoqInt_starGenType_Set_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqInt_starGenType_Set_fnRecorder) Seq() *MoqInt_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqInt_starGenType_Set_fnRecorder) NoSeq() *MoqInt_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqInt_starGenType_Set_fnRecorder) ReturnResults() *MoqInt_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqInt_starGenType_Set_doFn
		DoReturnFn MoqInt_starGenType_Set_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqInt_starGenType_Set_fnRecorder) AndDo(fn MoqInt_starGenType_Set_doFn) *MoqInt_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqInt_starGenType_Set_fnRecorder) DoReturnResults(fn MoqInt_starGenType_Set_doReturnFn) *MoqInt_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqInt_starGenType_Set_doFn
		DoReturnFn MoqInt_starGenType_Set_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqInt_starGenType_Set_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqInt_starGenType_Set_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Set {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqInt_starGenType_Set_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqInt_starGenType_Set_paramsKey]*MoqInt_starGenType_Set_results{},
		}
		r.Moq.ResultsByParams_Set = append(r.Moq.ResultsByParams_Set, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Set) {
			copy(r.Moq.ResultsByParams_Set[insertAt+1:], r.Moq.ResultsByParams_Set[insertAt:0])
			r.Moq.ResultsByParams_Set[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Set(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqInt_starGenType_Set_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqInt_starGenType_Set_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqInt_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqInt_starGenType_Set_doFn
				DoReturnFn MoqInt_starGenType_Set_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqInt_starGenType) PrettyParams_Set(params MoqInt_starGenType_Set_params) string {
	return fmt.Sprintf("Set(%#v)", params.Value)
}

func (m *MoqInt_starGenType) ParamsKey_Set(params MoqInt_starGenType_Set_params, anyParams uint64) MoqInt_starGenType_Set_paramsKey {
	m.Scene.T.Helper()
	var valueUsed int64
	var valueUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Set.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	return MoqInt_starGenType_Set_paramsKey{
		Params: struct{ Value int64 }{
			Value: valueUsed,
		},
		Hashes: struct{ Value hash.Hash }{
			Value: valueUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqInt_starGenType) Reset() {
	m.ResultsByParams_Value = nil
	m.ResultsByParams_String = nil
	m.ResultsByParams_Add = nil
	m.ResultsByParams_Set = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqInt_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Value {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Value(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Add {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Add(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Set {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Set(results.Params))
			}
		}
	}
}
