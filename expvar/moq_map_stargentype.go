// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package expvar

import (
	"expvar"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that expvar.Map_starGenType is mocked
// completely
var _ Map_starGenType = (*MoqMap_starGenType_mock)(nil)

// Map_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Map_starGenType interface {
	String() string
	Init() *expvar.Map
	Get(key string) expvar.Var
	Set(key string, av expvar.Var)
	Add(key string, delta int64)
	AddFloat(key string, delta float64)
	Delete(key string)
	Do(f func(expvar.KeyValue))
}

// MoqMap_starGenType holds the state of a moq of the Map_starGenType type
type MoqMap_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqMap_starGenType_mock

	ResultsByParams_String   []MoqMap_starGenType_String_resultsByParams
	ResultsByParams_Init     []MoqMap_starGenType_Init_resultsByParams
	ResultsByParams_Get      []MoqMap_starGenType_Get_resultsByParams
	ResultsByParams_Set      []MoqMap_starGenType_Set_resultsByParams
	ResultsByParams_Add      []MoqMap_starGenType_Add_resultsByParams
	ResultsByParams_AddFloat []MoqMap_starGenType_AddFloat_resultsByParams
	ResultsByParams_Delete   []MoqMap_starGenType_Delete_resultsByParams
	ResultsByParams_Do       []MoqMap_starGenType_Do_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			String struct{}
			Init   struct{}
			Get    struct {
				Key moq.ParamIndexing
			}
			Set struct {
				Key moq.ParamIndexing
				Av  moq.ParamIndexing
			}
			Add struct {
				Key   moq.ParamIndexing
				Delta moq.ParamIndexing
			}
			AddFloat struct {
				Key   moq.ParamIndexing
				Delta moq.ParamIndexing
			}
			Delete struct {
				Key moq.ParamIndexing
			}
			Do struct {
				F moq.ParamIndexing
			}
		}
	}
	// MoqMap_starGenType_mock isolates the mock interface of the Map_starGenType
}

// type
type MoqMap_starGenType_mock struct {
	Moq *MoqMap_starGenType
}

// MoqMap_starGenType_recorder isolates the recorder interface of the
// Map_starGenType type
type MoqMap_starGenType_recorder struct {
	Moq *MoqMap_starGenType
}

// MoqMap_starGenType_String_params holds the params of the Map_starGenType
// type
type MoqMap_starGenType_String_params struct{}

// MoqMap_starGenType_String_paramsKey holds the map key params of the
// Map_starGenType type
type MoqMap_starGenType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqMap_starGenType_String_resultsByParams contains the results for a given
// set of parameters for the Map_starGenType type
type MoqMap_starGenType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMap_starGenType_String_paramsKey]*MoqMap_starGenType_String_results
}

// MoqMap_starGenType_String_doFn defines the type of function needed when
// calling AndDo for the Map_starGenType type
type MoqMap_starGenType_String_doFn func()

// MoqMap_starGenType_String_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Map_starGenType type
type MoqMap_starGenType_String_doReturnFn func() string

// MoqMap_starGenType_String_results holds the results of the Map_starGenType
// type
type MoqMap_starGenType_String_results struct {
	Params  MoqMap_starGenType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqMap_starGenType_String_doFn
		DoReturnFn MoqMap_starGenType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMap_starGenType_String_fnRecorder routes recorded function calls to the
// MoqMap_starGenType moq
type MoqMap_starGenType_String_fnRecorder struct {
	Params    MoqMap_starGenType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMap_starGenType_String_results
	Moq       *MoqMap_starGenType
}

// MoqMap_starGenType_String_anyParams isolates the any params functions of the
// Map_starGenType type
type MoqMap_starGenType_String_anyParams struct {
	Recorder *MoqMap_starGenType_String_fnRecorder
}

// MoqMap_starGenType_Init_params holds the params of the Map_starGenType type
type MoqMap_starGenType_Init_params struct{}

// MoqMap_starGenType_Init_paramsKey holds the map key params of the
// Map_starGenType type
type MoqMap_starGenType_Init_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqMap_starGenType_Init_resultsByParams contains the results for a given set
// of parameters for the Map_starGenType type
type MoqMap_starGenType_Init_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMap_starGenType_Init_paramsKey]*MoqMap_starGenType_Init_results
}

// MoqMap_starGenType_Init_doFn defines the type of function needed when
// calling AndDo for the Map_starGenType type
type MoqMap_starGenType_Init_doFn func()

// MoqMap_starGenType_Init_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Map_starGenType type
type MoqMap_starGenType_Init_doReturnFn func() *expvar.Map

// MoqMap_starGenType_Init_results holds the results of the Map_starGenType
// type
type MoqMap_starGenType_Init_results struct {
	Params  MoqMap_starGenType_Init_params
	Results []struct {
		Values *struct {
			Result1 *expvar.Map
		}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Init_doFn
		DoReturnFn MoqMap_starGenType_Init_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMap_starGenType_Init_fnRecorder routes recorded function calls to the
// MoqMap_starGenType moq
type MoqMap_starGenType_Init_fnRecorder struct {
	Params    MoqMap_starGenType_Init_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMap_starGenType_Init_results
	Moq       *MoqMap_starGenType
}

// MoqMap_starGenType_Init_anyParams isolates the any params functions of the
// Map_starGenType type
type MoqMap_starGenType_Init_anyParams struct {
	Recorder *MoqMap_starGenType_Init_fnRecorder
}

// MoqMap_starGenType_Get_params holds the params of the Map_starGenType type
type MoqMap_starGenType_Get_params struct{ Key string }

// MoqMap_starGenType_Get_paramsKey holds the map key params of the
// Map_starGenType type
type MoqMap_starGenType_Get_paramsKey struct {
	Params struct{ Key string }
	Hashes struct{ Key hash.Hash }
}

// MoqMap_starGenType_Get_resultsByParams contains the results for a given set
// of parameters for the Map_starGenType type
type MoqMap_starGenType_Get_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMap_starGenType_Get_paramsKey]*MoqMap_starGenType_Get_results
}

// MoqMap_starGenType_Get_doFn defines the type of function needed when calling
// AndDo for the Map_starGenType type
type MoqMap_starGenType_Get_doFn func(key string)

// MoqMap_starGenType_Get_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Map_starGenType type
type MoqMap_starGenType_Get_doReturnFn func(key string) expvar.Var

// MoqMap_starGenType_Get_results holds the results of the Map_starGenType type
type MoqMap_starGenType_Get_results struct {
	Params  MoqMap_starGenType_Get_params
	Results []struct {
		Values *struct {
			Result1 expvar.Var
		}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Get_doFn
		DoReturnFn MoqMap_starGenType_Get_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMap_starGenType_Get_fnRecorder routes recorded function calls to the
// MoqMap_starGenType moq
type MoqMap_starGenType_Get_fnRecorder struct {
	Params    MoqMap_starGenType_Get_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMap_starGenType_Get_results
	Moq       *MoqMap_starGenType
}

// MoqMap_starGenType_Get_anyParams isolates the any params functions of the
// Map_starGenType type
type MoqMap_starGenType_Get_anyParams struct {
	Recorder *MoqMap_starGenType_Get_fnRecorder
}

// MoqMap_starGenType_Set_params holds the params of the Map_starGenType type
type MoqMap_starGenType_Set_params struct {
	Key string
	Av  expvar.Var
}

// MoqMap_starGenType_Set_paramsKey holds the map key params of the
// Map_starGenType type
type MoqMap_starGenType_Set_paramsKey struct {
	Params struct {
		Key string
		Av  expvar.Var
	}
	Hashes struct {
		Key hash.Hash
		Av  hash.Hash
	}
}

// MoqMap_starGenType_Set_resultsByParams contains the results for a given set
// of parameters for the Map_starGenType type
type MoqMap_starGenType_Set_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMap_starGenType_Set_paramsKey]*MoqMap_starGenType_Set_results
}

// MoqMap_starGenType_Set_doFn defines the type of function needed when calling
// AndDo for the Map_starGenType type
type MoqMap_starGenType_Set_doFn func(key string, av expvar.Var)

// MoqMap_starGenType_Set_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Map_starGenType type
type MoqMap_starGenType_Set_doReturnFn func(key string, av expvar.Var)

// MoqMap_starGenType_Set_results holds the results of the Map_starGenType type
type MoqMap_starGenType_Set_results struct {
	Params  MoqMap_starGenType_Set_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Set_doFn
		DoReturnFn MoqMap_starGenType_Set_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMap_starGenType_Set_fnRecorder routes recorded function calls to the
// MoqMap_starGenType moq
type MoqMap_starGenType_Set_fnRecorder struct {
	Params    MoqMap_starGenType_Set_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMap_starGenType_Set_results
	Moq       *MoqMap_starGenType
}

// MoqMap_starGenType_Set_anyParams isolates the any params functions of the
// Map_starGenType type
type MoqMap_starGenType_Set_anyParams struct {
	Recorder *MoqMap_starGenType_Set_fnRecorder
}

// MoqMap_starGenType_Add_params holds the params of the Map_starGenType type
type MoqMap_starGenType_Add_params struct {
	Key   string
	Delta int64
}

// MoqMap_starGenType_Add_paramsKey holds the map key params of the
// Map_starGenType type
type MoqMap_starGenType_Add_paramsKey struct {
	Params struct {
		Key   string
		Delta int64
	}
	Hashes struct {
		Key   hash.Hash
		Delta hash.Hash
	}
}

// MoqMap_starGenType_Add_resultsByParams contains the results for a given set
// of parameters for the Map_starGenType type
type MoqMap_starGenType_Add_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMap_starGenType_Add_paramsKey]*MoqMap_starGenType_Add_results
}

// MoqMap_starGenType_Add_doFn defines the type of function needed when calling
// AndDo for the Map_starGenType type
type MoqMap_starGenType_Add_doFn func(key string, delta int64)

// MoqMap_starGenType_Add_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Map_starGenType type
type MoqMap_starGenType_Add_doReturnFn func(key string, delta int64)

// MoqMap_starGenType_Add_results holds the results of the Map_starGenType type
type MoqMap_starGenType_Add_results struct {
	Params  MoqMap_starGenType_Add_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Add_doFn
		DoReturnFn MoqMap_starGenType_Add_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMap_starGenType_Add_fnRecorder routes recorded function calls to the
// MoqMap_starGenType moq
type MoqMap_starGenType_Add_fnRecorder struct {
	Params    MoqMap_starGenType_Add_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMap_starGenType_Add_results
	Moq       *MoqMap_starGenType
}

// MoqMap_starGenType_Add_anyParams isolates the any params functions of the
// Map_starGenType type
type MoqMap_starGenType_Add_anyParams struct {
	Recorder *MoqMap_starGenType_Add_fnRecorder
}

// MoqMap_starGenType_AddFloat_params holds the params of the Map_starGenType
// type
type MoqMap_starGenType_AddFloat_params struct {
	Key   string
	Delta float64
}

// MoqMap_starGenType_AddFloat_paramsKey holds the map key params of the
// Map_starGenType type
type MoqMap_starGenType_AddFloat_paramsKey struct {
	Params struct {
		Key   string
		Delta float64
	}
	Hashes struct {
		Key   hash.Hash
		Delta hash.Hash
	}
}

// MoqMap_starGenType_AddFloat_resultsByParams contains the results for a given
// set of parameters for the Map_starGenType type
type MoqMap_starGenType_AddFloat_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMap_starGenType_AddFloat_paramsKey]*MoqMap_starGenType_AddFloat_results
}

// MoqMap_starGenType_AddFloat_doFn defines the type of function needed when
// calling AndDo for the Map_starGenType type
type MoqMap_starGenType_AddFloat_doFn func(key string, delta float64)

// MoqMap_starGenType_AddFloat_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Map_starGenType type
type MoqMap_starGenType_AddFloat_doReturnFn func(key string, delta float64)

// MoqMap_starGenType_AddFloat_results holds the results of the Map_starGenType
// type
type MoqMap_starGenType_AddFloat_results struct {
	Params  MoqMap_starGenType_AddFloat_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_AddFloat_doFn
		DoReturnFn MoqMap_starGenType_AddFloat_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMap_starGenType_AddFloat_fnRecorder routes recorded function calls to the
// MoqMap_starGenType moq
type MoqMap_starGenType_AddFloat_fnRecorder struct {
	Params    MoqMap_starGenType_AddFloat_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMap_starGenType_AddFloat_results
	Moq       *MoqMap_starGenType
}

// MoqMap_starGenType_AddFloat_anyParams isolates the any params functions of
// the Map_starGenType type
type MoqMap_starGenType_AddFloat_anyParams struct {
	Recorder *MoqMap_starGenType_AddFloat_fnRecorder
}

// MoqMap_starGenType_Delete_params holds the params of the Map_starGenType
// type
type MoqMap_starGenType_Delete_params struct{ Key string }

// MoqMap_starGenType_Delete_paramsKey holds the map key params of the
// Map_starGenType type
type MoqMap_starGenType_Delete_paramsKey struct {
	Params struct{ Key string }
	Hashes struct{ Key hash.Hash }
}

// MoqMap_starGenType_Delete_resultsByParams contains the results for a given
// set of parameters for the Map_starGenType type
type MoqMap_starGenType_Delete_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMap_starGenType_Delete_paramsKey]*MoqMap_starGenType_Delete_results
}

// MoqMap_starGenType_Delete_doFn defines the type of function needed when
// calling AndDo for the Map_starGenType type
type MoqMap_starGenType_Delete_doFn func(key string)

// MoqMap_starGenType_Delete_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Map_starGenType type
type MoqMap_starGenType_Delete_doReturnFn func(key string)

// MoqMap_starGenType_Delete_results holds the results of the Map_starGenType
// type
type MoqMap_starGenType_Delete_results struct {
	Params  MoqMap_starGenType_Delete_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Delete_doFn
		DoReturnFn MoqMap_starGenType_Delete_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMap_starGenType_Delete_fnRecorder routes recorded function calls to the
// MoqMap_starGenType moq
type MoqMap_starGenType_Delete_fnRecorder struct {
	Params    MoqMap_starGenType_Delete_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMap_starGenType_Delete_results
	Moq       *MoqMap_starGenType
}

// MoqMap_starGenType_Delete_anyParams isolates the any params functions of the
// Map_starGenType type
type MoqMap_starGenType_Delete_anyParams struct {
	Recorder *MoqMap_starGenType_Delete_fnRecorder
}

// MoqMap_starGenType_Do_params holds the params of the Map_starGenType type
type MoqMap_starGenType_Do_params struct{ F func(expvar.KeyValue) }

// MoqMap_starGenType_Do_paramsKey holds the map key params of the
// Map_starGenType type
type MoqMap_starGenType_Do_paramsKey struct {
	Params struct{}
	Hashes struct{ F hash.Hash }
}

// MoqMap_starGenType_Do_resultsByParams contains the results for a given set
// of parameters for the Map_starGenType type
type MoqMap_starGenType_Do_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMap_starGenType_Do_paramsKey]*MoqMap_starGenType_Do_results
}

// MoqMap_starGenType_Do_doFn defines the type of function needed when calling
// AndDo for the Map_starGenType type
type MoqMap_starGenType_Do_doFn func(f func(expvar.KeyValue))

// MoqMap_starGenType_Do_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Map_starGenType type
type MoqMap_starGenType_Do_doReturnFn func(f func(expvar.KeyValue))

// MoqMap_starGenType_Do_results holds the results of the Map_starGenType type
type MoqMap_starGenType_Do_results struct {
	Params  MoqMap_starGenType_Do_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Do_doFn
		DoReturnFn MoqMap_starGenType_Do_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMap_starGenType_Do_fnRecorder routes recorded function calls to the
// MoqMap_starGenType moq
type MoqMap_starGenType_Do_fnRecorder struct {
	Params    MoqMap_starGenType_Do_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMap_starGenType_Do_results
	Moq       *MoqMap_starGenType
}

// MoqMap_starGenType_Do_anyParams isolates the any params functions of the
// Map_starGenType type
type MoqMap_starGenType_Do_anyParams struct {
	Recorder *MoqMap_starGenType_Do_fnRecorder
}

// NewMoqMap_starGenType creates a new moq of the Map_starGenType type
func NewMoqMap_starGenType(scene *moq.Scene, config *moq.Config) *MoqMap_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqMap_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqMap_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				String struct{}
				Init   struct{}
				Get    struct {
					Key moq.ParamIndexing
				}
				Set struct {
					Key moq.ParamIndexing
					Av  moq.ParamIndexing
				}
				Add struct {
					Key   moq.ParamIndexing
					Delta moq.ParamIndexing
				}
				AddFloat struct {
					Key   moq.ParamIndexing
					Delta moq.ParamIndexing
				}
				Delete struct {
					Key moq.ParamIndexing
				}
				Do struct {
					F moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			String struct{}
			Init   struct{}
			Get    struct {
				Key moq.ParamIndexing
			}
			Set struct {
				Key moq.ParamIndexing
				Av  moq.ParamIndexing
			}
			Add struct {
				Key   moq.ParamIndexing
				Delta moq.ParamIndexing
			}
			AddFloat struct {
				Key   moq.ParamIndexing
				Delta moq.ParamIndexing
			}
			Delete struct {
				Key moq.ParamIndexing
			}
			Do struct {
				F moq.ParamIndexing
			}
		}{
			String: struct{}{},
			Init:   struct{}{},
			Get: struct {
				Key moq.ParamIndexing
			}{
				Key: moq.ParamIndexByValue,
			},
			Set: struct {
				Key moq.ParamIndexing
				Av  moq.ParamIndexing
			}{
				Key: moq.ParamIndexByValue,
				Av:  moq.ParamIndexByHash,
			},
			Add: struct {
				Key   moq.ParamIndexing
				Delta moq.ParamIndexing
			}{
				Key:   moq.ParamIndexByValue,
				Delta: moq.ParamIndexByValue,
			},
			AddFloat: struct {
				Key   moq.ParamIndexing
				Delta moq.ParamIndexing
			}{
				Key:   moq.ParamIndexByValue,
				Delta: moq.ParamIndexByValue,
			},
			Delete: struct {
				Key moq.ParamIndexing
			}{
				Key: moq.ParamIndexByValue,
			},
			Do: struct {
				F moq.ParamIndexing
			}{
				F: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Map_starGenType type
func (m *MoqMap_starGenType) Mock() *MoqMap_starGenType_mock { return m.Moq }

func (m *MoqMap_starGenType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqMap_starGenType_String_params{}
	var results *MoqMap_starGenType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqMap_starGenType_mock) Init() (result1 *expvar.Map) {
	m.Moq.Scene.T.Helper()
	params := MoqMap_starGenType_Init_params{}
	var results *MoqMap_starGenType_Init_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Init {
		paramsKey := m.Moq.ParamsKey_Init(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Init(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Init(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Init(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqMap_starGenType_mock) Get(key string) (result1 expvar.Var) {
	m.Moq.Scene.T.Helper()
	params := MoqMap_starGenType_Get_params{
		Key: key,
	}
	var results *MoqMap_starGenType_Get_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Get {
		paramsKey := m.Moq.ParamsKey_Get(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Get(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Get(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Get(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(key)
	}
	return
}

func (m *MoqMap_starGenType_mock) Set(key string, av expvar.Var) {
	m.Moq.Scene.T.Helper()
	params := MoqMap_starGenType_Set_params{
		Key: key,
		Av:  av,
	}
	var results *MoqMap_starGenType_Set_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Set {
		paramsKey := m.Moq.ParamsKey_Set(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Set(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Set(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Set(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key, av)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(key, av)
	}
	return
}

func (m *MoqMap_starGenType_mock) Add(key string, delta int64) {
	m.Moq.Scene.T.Helper()
	params := MoqMap_starGenType_Add_params{
		Key:   key,
		Delta: delta,
	}
	var results *MoqMap_starGenType_Add_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Add {
		paramsKey := m.Moq.ParamsKey_Add(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Add(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Add(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Add(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key, delta)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(key, delta)
	}
	return
}

func (m *MoqMap_starGenType_mock) AddFloat(key string, delta float64) {
	m.Moq.Scene.T.Helper()
	params := MoqMap_starGenType_AddFloat_params{
		Key:   key,
		Delta: delta,
	}
	var results *MoqMap_starGenType_AddFloat_results
	for _, resultsByParams := range m.Moq.ResultsByParams_AddFloat {
		paramsKey := m.Moq.ParamsKey_AddFloat(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_AddFloat(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_AddFloat(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_AddFloat(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key, delta)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(key, delta)
	}
	return
}

func (m *MoqMap_starGenType_mock) Delete(key string) {
	m.Moq.Scene.T.Helper()
	params := MoqMap_starGenType_Delete_params{
		Key: key,
	}
	var results *MoqMap_starGenType_Delete_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Delete {
		paramsKey := m.Moq.ParamsKey_Delete(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Delete(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Delete(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Delete(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(key)
	}
	return
}

func (m *MoqMap_starGenType_mock) Do(f func(expvar.KeyValue)) {
	m.Moq.Scene.T.Helper()
	params := MoqMap_starGenType_Do_params{
		F: f,
	}
	var results *MoqMap_starGenType_Do_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Do {
		paramsKey := m.Moq.ParamsKey_Do(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Do(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Do(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Do(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(f)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(f)
	}
	return
}

// OnCall returns the recorder implementation of the Map_starGenType type
func (m *MoqMap_starGenType) OnCall() *MoqMap_starGenType_recorder {
	return &MoqMap_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqMap_starGenType_recorder) String() *MoqMap_starGenType_String_fnRecorder {
	return &MoqMap_starGenType_String_fnRecorder{
		Params:   MoqMap_starGenType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMap_starGenType_String_fnRecorder) Any() *MoqMap_starGenType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqMap_starGenType_String_anyParams{Recorder: r}
}

func (r *MoqMap_starGenType_String_fnRecorder) Seq() *MoqMap_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMap_starGenType_String_fnRecorder) NoSeq() *MoqMap_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMap_starGenType_String_fnRecorder) ReturnResults(result1 string) *MoqMap_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqMap_starGenType_String_doFn
		DoReturnFn MoqMap_starGenType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMap_starGenType_String_fnRecorder) AndDo(fn MoqMap_starGenType_String_doFn) *MoqMap_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMap_starGenType_String_fnRecorder) DoReturnResults(fn MoqMap_starGenType_String_doReturnFn) *MoqMap_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqMap_starGenType_String_doFn
		DoReturnFn MoqMap_starGenType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMap_starGenType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMap_starGenType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMap_starGenType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMap_starGenType_String_paramsKey]*MoqMap_starGenType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMap_starGenType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMap_starGenType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMap_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqMap_starGenType_String_doFn
				DoReturnFn MoqMap_starGenType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMap_starGenType) PrettyParams_String(params MoqMap_starGenType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqMap_starGenType) ParamsKey_String(params MoqMap_starGenType_String_params, anyParams uint64) MoqMap_starGenType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqMap_starGenType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqMap_starGenType_recorder) Init() *MoqMap_starGenType_Init_fnRecorder {
	return &MoqMap_starGenType_Init_fnRecorder{
		Params:   MoqMap_starGenType_Init_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMap_starGenType_Init_fnRecorder) Any() *MoqMap_starGenType_Init_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Init(r.Params))
		return nil
	}
	return &MoqMap_starGenType_Init_anyParams{Recorder: r}
}

func (r *MoqMap_starGenType_Init_fnRecorder) Seq() *MoqMap_starGenType_Init_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Init(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMap_starGenType_Init_fnRecorder) NoSeq() *MoqMap_starGenType_Init_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Init(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMap_starGenType_Init_fnRecorder) ReturnResults(result1 *expvar.Map) *MoqMap_starGenType_Init_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *expvar.Map
		}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Init_doFn
		DoReturnFn MoqMap_starGenType_Init_doReturnFn
	}{
		Values: &struct {
			Result1 *expvar.Map
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMap_starGenType_Init_fnRecorder) AndDo(fn MoqMap_starGenType_Init_doFn) *MoqMap_starGenType_Init_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMap_starGenType_Init_fnRecorder) DoReturnResults(fn MoqMap_starGenType_Init_doReturnFn) *MoqMap_starGenType_Init_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *expvar.Map
		}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Init_doFn
		DoReturnFn MoqMap_starGenType_Init_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMap_starGenType_Init_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMap_starGenType_Init_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Init {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMap_starGenType_Init_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMap_starGenType_Init_paramsKey]*MoqMap_starGenType_Init_results{},
		}
		r.Moq.ResultsByParams_Init = append(r.Moq.ResultsByParams_Init, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Init) {
			copy(r.Moq.ResultsByParams_Init[insertAt+1:], r.Moq.ResultsByParams_Init[insertAt:0])
			r.Moq.ResultsByParams_Init[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Init(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMap_starGenType_Init_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMap_starGenType_Init_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMap_starGenType_Init_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *expvar.Map
				}
				Sequence   uint32
				DoFn       MoqMap_starGenType_Init_doFn
				DoReturnFn MoqMap_starGenType_Init_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMap_starGenType) PrettyParams_Init(params MoqMap_starGenType_Init_params) string {
	return fmt.Sprintf("Init()")
}

func (m *MoqMap_starGenType) ParamsKey_Init(params MoqMap_starGenType_Init_params, anyParams uint64) MoqMap_starGenType_Init_paramsKey {
	m.Scene.T.Helper()
	return MoqMap_starGenType_Init_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqMap_starGenType_recorder) Get(key string) *MoqMap_starGenType_Get_fnRecorder {
	return &MoqMap_starGenType_Get_fnRecorder{
		Params: MoqMap_starGenType_Get_params{
			Key: key,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMap_starGenType_Get_fnRecorder) Any() *MoqMap_starGenType_Get_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Get(r.Params))
		return nil
	}
	return &MoqMap_starGenType_Get_anyParams{Recorder: r}
}

func (a *MoqMap_starGenType_Get_anyParams) Key() *MoqMap_starGenType_Get_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqMap_starGenType_Get_fnRecorder) Seq() *MoqMap_starGenType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Get(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMap_starGenType_Get_fnRecorder) NoSeq() *MoqMap_starGenType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Get(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMap_starGenType_Get_fnRecorder) ReturnResults(result1 expvar.Var) *MoqMap_starGenType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 expvar.Var
		}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Get_doFn
		DoReturnFn MoqMap_starGenType_Get_doReturnFn
	}{
		Values: &struct {
			Result1 expvar.Var
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMap_starGenType_Get_fnRecorder) AndDo(fn MoqMap_starGenType_Get_doFn) *MoqMap_starGenType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMap_starGenType_Get_fnRecorder) DoReturnResults(fn MoqMap_starGenType_Get_doReturnFn) *MoqMap_starGenType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 expvar.Var
		}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Get_doFn
		DoReturnFn MoqMap_starGenType_Get_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMap_starGenType_Get_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMap_starGenType_Get_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Get {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMap_starGenType_Get_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMap_starGenType_Get_paramsKey]*MoqMap_starGenType_Get_results{},
		}
		r.Moq.ResultsByParams_Get = append(r.Moq.ResultsByParams_Get, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Get) {
			copy(r.Moq.ResultsByParams_Get[insertAt+1:], r.Moq.ResultsByParams_Get[insertAt:0])
			r.Moq.ResultsByParams_Get[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Get(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMap_starGenType_Get_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMap_starGenType_Get_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMap_starGenType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 expvar.Var
				}
				Sequence   uint32
				DoFn       MoqMap_starGenType_Get_doFn
				DoReturnFn MoqMap_starGenType_Get_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMap_starGenType) PrettyParams_Get(params MoqMap_starGenType_Get_params) string {
	return fmt.Sprintf("Get(%#v)", params.Key)
}

func (m *MoqMap_starGenType) ParamsKey_Get(params MoqMap_starGenType_Get_params, anyParams uint64) MoqMap_starGenType_Get_paramsKey {
	m.Scene.T.Helper()
	var keyUsed string
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Get.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	return MoqMap_starGenType_Get_paramsKey{
		Params: struct{ Key string }{
			Key: keyUsed,
		},
		Hashes: struct{ Key hash.Hash }{
			Key: keyUsedHash,
		},
	}
}

func (m *MoqMap_starGenType_recorder) Set(key string, av expvar.Var) *MoqMap_starGenType_Set_fnRecorder {
	return &MoqMap_starGenType_Set_fnRecorder{
		Params: MoqMap_starGenType_Set_params{
			Key: key,
			Av:  av,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMap_starGenType_Set_fnRecorder) Any() *MoqMap_starGenType_Set_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	return &MoqMap_starGenType_Set_anyParams{Recorder: r}
}

func (a *MoqMap_starGenType_Set_anyParams) Key() *MoqMap_starGenType_Set_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqMap_starGenType_Set_anyParams) Av() *MoqMap_starGenType_Set_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqMap_starGenType_Set_fnRecorder) Seq() *MoqMap_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMap_starGenType_Set_fnRecorder) NoSeq() *MoqMap_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMap_starGenType_Set_fnRecorder) ReturnResults() *MoqMap_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Set_doFn
		DoReturnFn MoqMap_starGenType_Set_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMap_starGenType_Set_fnRecorder) AndDo(fn MoqMap_starGenType_Set_doFn) *MoqMap_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMap_starGenType_Set_fnRecorder) DoReturnResults(fn MoqMap_starGenType_Set_doReturnFn) *MoqMap_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Set_doFn
		DoReturnFn MoqMap_starGenType_Set_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMap_starGenType_Set_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMap_starGenType_Set_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Set {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMap_starGenType_Set_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMap_starGenType_Set_paramsKey]*MoqMap_starGenType_Set_results{},
		}
		r.Moq.ResultsByParams_Set = append(r.Moq.ResultsByParams_Set, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Set) {
			copy(r.Moq.ResultsByParams_Set[insertAt+1:], r.Moq.ResultsByParams_Set[insertAt:0])
			r.Moq.ResultsByParams_Set[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Set(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMap_starGenType_Set_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMap_starGenType_Set_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMap_starGenType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqMap_starGenType_Set_doFn
				DoReturnFn MoqMap_starGenType_Set_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMap_starGenType) PrettyParams_Set(params MoqMap_starGenType_Set_params) string {
	return fmt.Sprintf("Set(%#v, %#v)", params.Key, params.Av)
}

func (m *MoqMap_starGenType) ParamsKey_Set(params MoqMap_starGenType_Set_params, anyParams uint64) MoqMap_starGenType_Set_paramsKey {
	m.Scene.T.Helper()
	var keyUsed string
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Set.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	var avUsed expvar.Var
	var avUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Set.Av == moq.ParamIndexByValue {
			avUsed = params.Av
		} else {
			avUsedHash = hash.DeepHash(params.Av)
		}
	}
	return MoqMap_starGenType_Set_paramsKey{
		Params: struct {
			Key string
			Av  expvar.Var
		}{
			Key: keyUsed,
			Av:  avUsed,
		},
		Hashes: struct {
			Key hash.Hash
			Av  hash.Hash
		}{
			Key: keyUsedHash,
			Av:  avUsedHash,
		},
	}
}

func (m *MoqMap_starGenType_recorder) Add(key string, delta int64) *MoqMap_starGenType_Add_fnRecorder {
	return &MoqMap_starGenType_Add_fnRecorder{
		Params: MoqMap_starGenType_Add_params{
			Key:   key,
			Delta: delta,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMap_starGenType_Add_fnRecorder) Any() *MoqMap_starGenType_Add_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	return &MoqMap_starGenType_Add_anyParams{Recorder: r}
}

func (a *MoqMap_starGenType_Add_anyParams) Key() *MoqMap_starGenType_Add_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqMap_starGenType_Add_anyParams) Delta() *MoqMap_starGenType_Add_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqMap_starGenType_Add_fnRecorder) Seq() *MoqMap_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMap_starGenType_Add_fnRecorder) NoSeq() *MoqMap_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMap_starGenType_Add_fnRecorder) ReturnResults() *MoqMap_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Add_doFn
		DoReturnFn MoqMap_starGenType_Add_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMap_starGenType_Add_fnRecorder) AndDo(fn MoqMap_starGenType_Add_doFn) *MoqMap_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMap_starGenType_Add_fnRecorder) DoReturnResults(fn MoqMap_starGenType_Add_doReturnFn) *MoqMap_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Add_doFn
		DoReturnFn MoqMap_starGenType_Add_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMap_starGenType_Add_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMap_starGenType_Add_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Add {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMap_starGenType_Add_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMap_starGenType_Add_paramsKey]*MoqMap_starGenType_Add_results{},
		}
		r.Moq.ResultsByParams_Add = append(r.Moq.ResultsByParams_Add, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Add) {
			copy(r.Moq.ResultsByParams_Add[insertAt+1:], r.Moq.ResultsByParams_Add[insertAt:0])
			r.Moq.ResultsByParams_Add[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Add(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMap_starGenType_Add_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMap_starGenType_Add_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMap_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqMap_starGenType_Add_doFn
				DoReturnFn MoqMap_starGenType_Add_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMap_starGenType) PrettyParams_Add(params MoqMap_starGenType_Add_params) string {
	return fmt.Sprintf("Add(%#v, %#v)", params.Key, params.Delta)
}

func (m *MoqMap_starGenType) ParamsKey_Add(params MoqMap_starGenType_Add_params, anyParams uint64) MoqMap_starGenType_Add_paramsKey {
	m.Scene.T.Helper()
	var keyUsed string
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Add.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	var deltaUsed int64
	var deltaUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Add.Delta == moq.ParamIndexByValue {
			deltaUsed = params.Delta
		} else {
			deltaUsedHash = hash.DeepHash(params.Delta)
		}
	}
	return MoqMap_starGenType_Add_paramsKey{
		Params: struct {
			Key   string
			Delta int64
		}{
			Key:   keyUsed,
			Delta: deltaUsed,
		},
		Hashes: struct {
			Key   hash.Hash
			Delta hash.Hash
		}{
			Key:   keyUsedHash,
			Delta: deltaUsedHash,
		},
	}
}

func (m *MoqMap_starGenType_recorder) AddFloat(key string, delta float64) *MoqMap_starGenType_AddFloat_fnRecorder {
	return &MoqMap_starGenType_AddFloat_fnRecorder{
		Params: MoqMap_starGenType_AddFloat_params{
			Key:   key,
			Delta: delta,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMap_starGenType_AddFloat_fnRecorder) Any() *MoqMap_starGenType_AddFloat_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AddFloat(r.Params))
		return nil
	}
	return &MoqMap_starGenType_AddFloat_anyParams{Recorder: r}
}

func (a *MoqMap_starGenType_AddFloat_anyParams) Key() *MoqMap_starGenType_AddFloat_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqMap_starGenType_AddFloat_anyParams) Delta() *MoqMap_starGenType_AddFloat_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqMap_starGenType_AddFloat_fnRecorder) Seq() *MoqMap_starGenType_AddFloat_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AddFloat(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMap_starGenType_AddFloat_fnRecorder) NoSeq() *MoqMap_starGenType_AddFloat_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AddFloat(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMap_starGenType_AddFloat_fnRecorder) ReturnResults() *MoqMap_starGenType_AddFloat_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_AddFloat_doFn
		DoReturnFn MoqMap_starGenType_AddFloat_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMap_starGenType_AddFloat_fnRecorder) AndDo(fn MoqMap_starGenType_AddFloat_doFn) *MoqMap_starGenType_AddFloat_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMap_starGenType_AddFloat_fnRecorder) DoReturnResults(fn MoqMap_starGenType_AddFloat_doReturnFn) *MoqMap_starGenType_AddFloat_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_AddFloat_doFn
		DoReturnFn MoqMap_starGenType_AddFloat_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMap_starGenType_AddFloat_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMap_starGenType_AddFloat_resultsByParams
	for n, res := range r.Moq.ResultsByParams_AddFloat {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMap_starGenType_AddFloat_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMap_starGenType_AddFloat_paramsKey]*MoqMap_starGenType_AddFloat_results{},
		}
		r.Moq.ResultsByParams_AddFloat = append(r.Moq.ResultsByParams_AddFloat, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_AddFloat) {
			copy(r.Moq.ResultsByParams_AddFloat[insertAt+1:], r.Moq.ResultsByParams_AddFloat[insertAt:0])
			r.Moq.ResultsByParams_AddFloat[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_AddFloat(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMap_starGenType_AddFloat_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMap_starGenType_AddFloat_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMap_starGenType_AddFloat_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqMap_starGenType_AddFloat_doFn
				DoReturnFn MoqMap_starGenType_AddFloat_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMap_starGenType) PrettyParams_AddFloat(params MoqMap_starGenType_AddFloat_params) string {
	return fmt.Sprintf("AddFloat(%#v, %#v)", params.Key, params.Delta)
}

func (m *MoqMap_starGenType) ParamsKey_AddFloat(params MoqMap_starGenType_AddFloat_params, anyParams uint64) MoqMap_starGenType_AddFloat_paramsKey {
	m.Scene.T.Helper()
	var keyUsed string
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.AddFloat.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	var deltaUsed float64
	var deltaUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.AddFloat.Delta == moq.ParamIndexByValue {
			deltaUsed = params.Delta
		} else {
			deltaUsedHash = hash.DeepHash(params.Delta)
		}
	}
	return MoqMap_starGenType_AddFloat_paramsKey{
		Params: struct {
			Key   string
			Delta float64
		}{
			Key:   keyUsed,
			Delta: deltaUsed,
		},
		Hashes: struct {
			Key   hash.Hash
			Delta hash.Hash
		}{
			Key:   keyUsedHash,
			Delta: deltaUsedHash,
		},
	}
}

func (m *MoqMap_starGenType_recorder) Delete(key string) *MoqMap_starGenType_Delete_fnRecorder {
	return &MoqMap_starGenType_Delete_fnRecorder{
		Params: MoqMap_starGenType_Delete_params{
			Key: key,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMap_starGenType_Delete_fnRecorder) Any() *MoqMap_starGenType_Delete_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Delete(r.Params))
		return nil
	}
	return &MoqMap_starGenType_Delete_anyParams{Recorder: r}
}

func (a *MoqMap_starGenType_Delete_anyParams) Key() *MoqMap_starGenType_Delete_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqMap_starGenType_Delete_fnRecorder) Seq() *MoqMap_starGenType_Delete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Delete(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMap_starGenType_Delete_fnRecorder) NoSeq() *MoqMap_starGenType_Delete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Delete(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMap_starGenType_Delete_fnRecorder) ReturnResults() *MoqMap_starGenType_Delete_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Delete_doFn
		DoReturnFn MoqMap_starGenType_Delete_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMap_starGenType_Delete_fnRecorder) AndDo(fn MoqMap_starGenType_Delete_doFn) *MoqMap_starGenType_Delete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMap_starGenType_Delete_fnRecorder) DoReturnResults(fn MoqMap_starGenType_Delete_doReturnFn) *MoqMap_starGenType_Delete_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Delete_doFn
		DoReturnFn MoqMap_starGenType_Delete_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMap_starGenType_Delete_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMap_starGenType_Delete_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Delete {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMap_starGenType_Delete_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMap_starGenType_Delete_paramsKey]*MoqMap_starGenType_Delete_results{},
		}
		r.Moq.ResultsByParams_Delete = append(r.Moq.ResultsByParams_Delete, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Delete) {
			copy(r.Moq.ResultsByParams_Delete[insertAt+1:], r.Moq.ResultsByParams_Delete[insertAt:0])
			r.Moq.ResultsByParams_Delete[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Delete(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMap_starGenType_Delete_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMap_starGenType_Delete_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMap_starGenType_Delete_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqMap_starGenType_Delete_doFn
				DoReturnFn MoqMap_starGenType_Delete_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMap_starGenType) PrettyParams_Delete(params MoqMap_starGenType_Delete_params) string {
	return fmt.Sprintf("Delete(%#v)", params.Key)
}

func (m *MoqMap_starGenType) ParamsKey_Delete(params MoqMap_starGenType_Delete_params, anyParams uint64) MoqMap_starGenType_Delete_paramsKey {
	m.Scene.T.Helper()
	var keyUsed string
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Delete.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	return MoqMap_starGenType_Delete_paramsKey{
		Params: struct{ Key string }{
			Key: keyUsed,
		},
		Hashes: struct{ Key hash.Hash }{
			Key: keyUsedHash,
		},
	}
}

func (m *MoqMap_starGenType_recorder) Do(f func(expvar.KeyValue)) *MoqMap_starGenType_Do_fnRecorder {
	return &MoqMap_starGenType_Do_fnRecorder{
		Params: MoqMap_starGenType_Do_params{
			F: f,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMap_starGenType_Do_fnRecorder) Any() *MoqMap_starGenType_Do_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Do(r.Params))
		return nil
	}
	return &MoqMap_starGenType_Do_anyParams{Recorder: r}
}

func (a *MoqMap_starGenType_Do_anyParams) F() *MoqMap_starGenType_Do_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqMap_starGenType_Do_fnRecorder) Seq() *MoqMap_starGenType_Do_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Do(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMap_starGenType_Do_fnRecorder) NoSeq() *MoqMap_starGenType_Do_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Do(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMap_starGenType_Do_fnRecorder) ReturnResults() *MoqMap_starGenType_Do_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Do_doFn
		DoReturnFn MoqMap_starGenType_Do_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMap_starGenType_Do_fnRecorder) AndDo(fn MoqMap_starGenType_Do_doFn) *MoqMap_starGenType_Do_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMap_starGenType_Do_fnRecorder) DoReturnResults(fn MoqMap_starGenType_Do_doReturnFn) *MoqMap_starGenType_Do_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMap_starGenType_Do_doFn
		DoReturnFn MoqMap_starGenType_Do_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMap_starGenType_Do_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMap_starGenType_Do_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Do {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMap_starGenType_Do_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMap_starGenType_Do_paramsKey]*MoqMap_starGenType_Do_results{},
		}
		r.Moq.ResultsByParams_Do = append(r.Moq.ResultsByParams_Do, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Do) {
			copy(r.Moq.ResultsByParams_Do[insertAt+1:], r.Moq.ResultsByParams_Do[insertAt:0])
			r.Moq.ResultsByParams_Do[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Do(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMap_starGenType_Do_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMap_starGenType_Do_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMap_starGenType_Do_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqMap_starGenType_Do_doFn
				DoReturnFn MoqMap_starGenType_Do_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMap_starGenType) PrettyParams_Do(params MoqMap_starGenType_Do_params) string {
	return fmt.Sprintf("Do(%#v)", moq.FnString(params.F))
}

func (m *MoqMap_starGenType) ParamsKey_Do(params MoqMap_starGenType_Do_params, anyParams uint64) MoqMap_starGenType_Do_paramsKey {
	m.Scene.T.Helper()
	var fUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Do.F == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The f parameter of the Do function can't be indexed by value")
		}
		fUsedHash = hash.DeepHash(params.F)
	}
	return MoqMap_starGenType_Do_paramsKey{
		Params: struct{}{},
		Hashes: struct{ F hash.Hash }{
			F: fUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqMap_starGenType) Reset() {
	m.ResultsByParams_String = nil
	m.ResultsByParams_Init = nil
	m.ResultsByParams_Get = nil
	m.ResultsByParams_Set = nil
	m.ResultsByParams_Add = nil
	m.ResultsByParams_AddFloat = nil
	m.ResultsByParams_Delete = nil
	m.ResultsByParams_Do = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqMap_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Init {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Init(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Get {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Get(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Set {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Set(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Add {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Add(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_AddFloat {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_AddFloat(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Delete {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Delete(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Do {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Do(results.Params))
			}
		}
	}
}
