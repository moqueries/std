// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package fmt

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that fmt.Formatter is mocked completely
var _ fmt.Formatter = (*MoqFormatter_mock)(nil)

// MoqFormatter holds the state of a moq of the Formatter type
type MoqFormatter struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqFormatter_mock

	ResultsByParams_Format []MoqFormatter_Format_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Format struct {
				F moq.ParamIndexing
				C moq.ParamIndexing
			}
		}
	}
	// MoqFormatter_mock isolates the mock interface of the Formatter type
}

type MoqFormatter_mock struct {
	Moq *MoqFormatter
}

// MoqFormatter_recorder isolates the recorder interface of the Formatter type
type MoqFormatter_recorder struct {
	Moq *MoqFormatter
}

// MoqFormatter_Format_params holds the params of the Formatter type
type MoqFormatter_Format_params struct {
	F fmt.State
	C rune
}

// MoqFormatter_Format_paramsKey holds the map key params of the Formatter type
type MoqFormatter_Format_paramsKey struct {
	Params struct {
		F fmt.State
		C rune
	}
	Hashes struct {
		F hash.Hash
		C hash.Hash
	}
}

// MoqFormatter_Format_resultsByParams contains the results for a given set of
// parameters for the Formatter type
type MoqFormatter_Format_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFormatter_Format_paramsKey]*MoqFormatter_Format_results
}

// MoqFormatter_Format_doFn defines the type of function needed when calling
// AndDo for the Formatter type
type MoqFormatter_Format_doFn func(f fmt.State, c rune)

// MoqFormatter_Format_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Formatter type
type MoqFormatter_Format_doReturnFn func(f fmt.State, c rune)

// MoqFormatter_Format_results holds the results of the Formatter type
type MoqFormatter_Format_results struct {
	Params  MoqFormatter_Format_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFormatter_Format_doFn
		DoReturnFn MoqFormatter_Format_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFormatter_Format_fnRecorder routes recorded function calls to the
// MoqFormatter moq
type MoqFormatter_Format_fnRecorder struct {
	Params    MoqFormatter_Format_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFormatter_Format_results
	Moq       *MoqFormatter
}

// MoqFormatter_Format_anyParams isolates the any params functions of the
// Formatter type
type MoqFormatter_Format_anyParams struct {
	Recorder *MoqFormatter_Format_fnRecorder
}

// NewMoqFormatter creates a new moq of the Formatter type
func NewMoqFormatter(scene *moq.Scene, config *moq.Config) *MoqFormatter {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqFormatter{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqFormatter_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Format struct {
					F moq.ParamIndexing
					C moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Format struct {
				F moq.ParamIndexing
				C moq.ParamIndexing
			}
		}{
			Format: struct {
				F moq.ParamIndexing
				C moq.ParamIndexing
			}{
				F: moq.ParamIndexByHash,
				C: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Formatter type
func (m *MoqFormatter) Mock() *MoqFormatter_mock { return m.Moq }

func (m *MoqFormatter_mock) Format(f fmt.State, c rune) {
	m.Moq.Scene.T.Helper()
	params := MoqFormatter_Format_params{
		F: f,
		C: c,
	}
	var results *MoqFormatter_Format_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Format {
		paramsKey := m.Moq.ParamsKey_Format(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Format(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Format(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Format(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(f, c)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(f, c)
	}
	return
}

// OnCall returns the recorder implementation of the Formatter type
func (m *MoqFormatter) OnCall() *MoqFormatter_recorder {
	return &MoqFormatter_recorder{
		Moq: m,
	}
}

func (m *MoqFormatter_recorder) Format(f fmt.State, c rune) *MoqFormatter_Format_fnRecorder {
	return &MoqFormatter_Format_fnRecorder{
		Params: MoqFormatter_Format_params{
			F: f,
			C: c,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFormatter_Format_fnRecorder) Any() *MoqFormatter_Format_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Format(r.Params))
		return nil
	}
	return &MoqFormatter_Format_anyParams{Recorder: r}
}

func (a *MoqFormatter_Format_anyParams) F() *MoqFormatter_Format_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqFormatter_Format_anyParams) C() *MoqFormatter_Format_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqFormatter_Format_fnRecorder) Seq() *MoqFormatter_Format_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Format(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFormatter_Format_fnRecorder) NoSeq() *MoqFormatter_Format_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Format(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFormatter_Format_fnRecorder) ReturnResults() *MoqFormatter_Format_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFormatter_Format_doFn
		DoReturnFn MoqFormatter_Format_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFormatter_Format_fnRecorder) AndDo(fn MoqFormatter_Format_doFn) *MoqFormatter_Format_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFormatter_Format_fnRecorder) DoReturnResults(fn MoqFormatter_Format_doReturnFn) *MoqFormatter_Format_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFormatter_Format_doFn
		DoReturnFn MoqFormatter_Format_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFormatter_Format_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFormatter_Format_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Format {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFormatter_Format_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFormatter_Format_paramsKey]*MoqFormatter_Format_results{},
		}
		r.Moq.ResultsByParams_Format = append(r.Moq.ResultsByParams_Format, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Format) {
			copy(r.Moq.ResultsByParams_Format[insertAt+1:], r.Moq.ResultsByParams_Format[insertAt:0])
			r.Moq.ResultsByParams_Format[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Format(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFormatter_Format_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFormatter_Format_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFormatter_Format_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFormatter_Format_doFn
				DoReturnFn MoqFormatter_Format_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFormatter) PrettyParams_Format(params MoqFormatter_Format_params) string {
	return fmt.Sprintf("Format(%#v, %#v)", params.F, params.C)
}

func (m *MoqFormatter) ParamsKey_Format(params MoqFormatter_Format_params, anyParams uint64) MoqFormatter_Format_paramsKey {
	m.Scene.T.Helper()
	var fUsed fmt.State
	var fUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Format.F == moq.ParamIndexByValue {
			fUsed = params.F
		} else {
			fUsedHash = hash.DeepHash(params.F)
		}
	}
	var cUsed rune
	var cUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Format.C == moq.ParamIndexByValue {
			cUsed = params.C
		} else {
			cUsedHash = hash.DeepHash(params.C)
		}
	}
	return MoqFormatter_Format_paramsKey{
		Params: struct {
			F fmt.State
			C rune
		}{
			F: fUsed,
			C: cUsed,
		},
		Hashes: struct {
			F hash.Hash
			C hash.Hash
		}{
			F: fUsedHash,
			C: cUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqFormatter) Reset() { m.ResultsByParams_Format = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqFormatter) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Format {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Format(results.Params))
			}
		}
	}
}
