// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package fmt

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that fmt.State is mocked completely
var _ fmt.State = (*MoqState_mock)(nil)

// MoqState holds the state of a moq of the State type
type MoqState struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqState_mock

	ResultsByParams_Write     []MoqState_Write_resultsByParams
	ResultsByParams_Width     []MoqState_Width_resultsByParams
	ResultsByParams_Precision []MoqState_Precision_resultsByParams
	ResultsByParams_Flag      []MoqState_Flag_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Write struct {
				B moq.ParamIndexing
			}
			Width     struct{}
			Precision struct{}
			Flag      struct {
				C moq.ParamIndexing
			}
		}
	}
	// MoqState_mock isolates the mock interface of the State type
}

type MoqState_mock struct {
	Moq *MoqState
}

// MoqState_recorder isolates the recorder interface of the State type
type MoqState_recorder struct {
	Moq *MoqState
}

// MoqState_Write_params holds the params of the State type
type MoqState_Write_params struct{ B []byte }

// MoqState_Write_paramsKey holds the map key params of the State type
type MoqState_Write_paramsKey struct {
	Params struct{}
	Hashes struct{ B hash.Hash }
}

// MoqState_Write_resultsByParams contains the results for a given set of
// parameters for the State type
type MoqState_Write_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqState_Write_paramsKey]*MoqState_Write_results
}

// MoqState_Write_doFn defines the type of function needed when calling AndDo
// for the State type
type MoqState_Write_doFn func(b []byte)

// MoqState_Write_doReturnFn defines the type of function needed when calling
// DoReturnResults for the State type
type MoqState_Write_doReturnFn func(b []byte) (n int, err error)

// MoqState_Write_results holds the results of the State type
type MoqState_Write_results struct {
	Params  MoqState_Write_params
	Results []struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqState_Write_doFn
		DoReturnFn MoqState_Write_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqState_Write_fnRecorder routes recorded function calls to the MoqState moq
type MoqState_Write_fnRecorder struct {
	Params    MoqState_Write_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqState_Write_results
	Moq       *MoqState
}

// MoqState_Write_anyParams isolates the any params functions of the State type
type MoqState_Write_anyParams struct {
	Recorder *MoqState_Write_fnRecorder
}

// MoqState_Width_params holds the params of the State type
type MoqState_Width_params struct{}

// MoqState_Width_paramsKey holds the map key params of the State type
type MoqState_Width_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqState_Width_resultsByParams contains the results for a given set of
// parameters for the State type
type MoqState_Width_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqState_Width_paramsKey]*MoqState_Width_results
}

// MoqState_Width_doFn defines the type of function needed when calling AndDo
// for the State type
type MoqState_Width_doFn func()

// MoqState_Width_doReturnFn defines the type of function needed when calling
// DoReturnResults for the State type
type MoqState_Width_doReturnFn func() (wid int, ok bool)

// MoqState_Width_results holds the results of the State type
type MoqState_Width_results struct {
	Params  MoqState_Width_params
	Results []struct {
		Values *struct {
			Wid int
			Ok  bool
		}
		Sequence   uint32
		DoFn       MoqState_Width_doFn
		DoReturnFn MoqState_Width_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqState_Width_fnRecorder routes recorded function calls to the MoqState moq
type MoqState_Width_fnRecorder struct {
	Params    MoqState_Width_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqState_Width_results
	Moq       *MoqState
}

// MoqState_Width_anyParams isolates the any params functions of the State type
type MoqState_Width_anyParams struct {
	Recorder *MoqState_Width_fnRecorder
}

// MoqState_Precision_params holds the params of the State type
type MoqState_Precision_params struct{}

// MoqState_Precision_paramsKey holds the map key params of the State type
type MoqState_Precision_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqState_Precision_resultsByParams contains the results for a given set of
// parameters for the State type
type MoqState_Precision_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqState_Precision_paramsKey]*MoqState_Precision_results
}

// MoqState_Precision_doFn defines the type of function needed when calling
// AndDo for the State type
type MoqState_Precision_doFn func()

// MoqState_Precision_doReturnFn defines the type of function needed when
// calling DoReturnResults for the State type
type MoqState_Precision_doReturnFn func() (prec int, ok bool)

// MoqState_Precision_results holds the results of the State type
type MoqState_Precision_results struct {
	Params  MoqState_Precision_params
	Results []struct {
		Values *struct {
			Prec int
			Ok   bool
		}
		Sequence   uint32
		DoFn       MoqState_Precision_doFn
		DoReturnFn MoqState_Precision_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqState_Precision_fnRecorder routes recorded function calls to the MoqState
// moq
type MoqState_Precision_fnRecorder struct {
	Params    MoqState_Precision_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqState_Precision_results
	Moq       *MoqState
}

// MoqState_Precision_anyParams isolates the any params functions of the State
// type
type MoqState_Precision_anyParams struct {
	Recorder *MoqState_Precision_fnRecorder
}

// MoqState_Flag_params holds the params of the State type
type MoqState_Flag_params struct{ C int }

// MoqState_Flag_paramsKey holds the map key params of the State type
type MoqState_Flag_paramsKey struct {
	Params struct{ C int }
	Hashes struct{ C hash.Hash }
}

// MoqState_Flag_resultsByParams contains the results for a given set of
// parameters for the State type
type MoqState_Flag_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqState_Flag_paramsKey]*MoqState_Flag_results
}

// MoqState_Flag_doFn defines the type of function needed when calling AndDo
// for the State type
type MoqState_Flag_doFn func(c int)

// MoqState_Flag_doReturnFn defines the type of function needed when calling
// DoReturnResults for the State type
type MoqState_Flag_doReturnFn func(c int) bool

// MoqState_Flag_results holds the results of the State type
type MoqState_Flag_results struct {
	Params  MoqState_Flag_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqState_Flag_doFn
		DoReturnFn MoqState_Flag_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqState_Flag_fnRecorder routes recorded function calls to the MoqState moq
type MoqState_Flag_fnRecorder struct {
	Params    MoqState_Flag_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqState_Flag_results
	Moq       *MoqState
}

// MoqState_Flag_anyParams isolates the any params functions of the State type
type MoqState_Flag_anyParams struct {
	Recorder *MoqState_Flag_fnRecorder
}

// NewMoqState creates a new moq of the State type
func NewMoqState(scene *moq.Scene, config *moq.Config) *MoqState {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqState{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqState_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Write struct {
					B moq.ParamIndexing
				}
				Width     struct{}
				Precision struct{}
				Flag      struct {
					C moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Write struct {
				B moq.ParamIndexing
			}
			Width     struct{}
			Precision struct{}
			Flag      struct {
				C moq.ParamIndexing
			}
		}{
			Write: struct {
				B moq.ParamIndexing
			}{
				B: moq.ParamIndexByHash,
			},
			Width:     struct{}{},
			Precision: struct{}{},
			Flag: struct {
				C moq.ParamIndexing
			}{
				C: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the State type
func (m *MoqState) Mock() *MoqState_mock { return m.Moq }

func (m *MoqState_mock) Write(b []byte) (n int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqState_Write_params{
		B: b,
	}
	var results *MoqState_Write_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Write {
		paramsKey := m.Moq.ParamsKey_Write(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Write(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Write(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Write(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(b)
	}
	return
}

func (m *MoqState_mock) Width() (wid int, ok bool) {
	m.Moq.Scene.T.Helper()
	params := MoqState_Width_params{}
	var results *MoqState_Width_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Width {
		paramsKey := m.Moq.ParamsKey_Width(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Width(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Width(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Width(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		wid = result.Values.Wid
		ok = result.Values.Ok
	}
	if result.DoReturnFn != nil {
		wid, ok = result.DoReturnFn()
	}
	return
}

func (m *MoqState_mock) Precision() (prec int, ok bool) {
	m.Moq.Scene.T.Helper()
	params := MoqState_Precision_params{}
	var results *MoqState_Precision_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Precision {
		paramsKey := m.Moq.ParamsKey_Precision(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Precision(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Precision(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Precision(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		prec = result.Values.Prec
		ok = result.Values.Ok
	}
	if result.DoReturnFn != nil {
		prec, ok = result.DoReturnFn()
	}
	return
}

func (m *MoqState_mock) Flag(c int) (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqState_Flag_params{
		C: c,
	}
	var results *MoqState_Flag_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Flag {
		paramsKey := m.Moq.ParamsKey_Flag(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Flag(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Flag(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Flag(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(c)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(c)
	}
	return
}

// OnCall returns the recorder implementation of the State type
func (m *MoqState) OnCall() *MoqState_recorder {
	return &MoqState_recorder{
		Moq: m,
	}
}

func (m *MoqState_recorder) Write(b []byte) *MoqState_Write_fnRecorder {
	return &MoqState_Write_fnRecorder{
		Params: MoqState_Write_params{
			B: b,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqState_Write_fnRecorder) Any() *MoqState_Write_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	return &MoqState_Write_anyParams{Recorder: r}
}

func (a *MoqState_Write_anyParams) B() *MoqState_Write_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqState_Write_fnRecorder) Seq() *MoqState_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqState_Write_fnRecorder) NoSeq() *MoqState_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqState_Write_fnRecorder) ReturnResults(n int, err error) *MoqState_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqState_Write_doFn
		DoReturnFn MoqState_Write_doReturnFn
	}{
		Values: &struct {
			N   int
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqState_Write_fnRecorder) AndDo(fn MoqState_Write_doFn) *MoqState_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqState_Write_fnRecorder) DoReturnResults(fn MoqState_Write_doReturnFn) *MoqState_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqState_Write_doFn
		DoReturnFn MoqState_Write_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqState_Write_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqState_Write_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Write {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqState_Write_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqState_Write_paramsKey]*MoqState_Write_results{},
		}
		r.Moq.ResultsByParams_Write = append(r.Moq.ResultsByParams_Write, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Write) {
			copy(r.Moq.ResultsByParams_Write[insertAt+1:], r.Moq.ResultsByParams_Write[insertAt:0])
			r.Moq.ResultsByParams_Write[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Write(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqState_Write_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqState_Write_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqState_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int
					Err error
				}
				Sequence   uint32
				DoFn       MoqState_Write_doFn
				DoReturnFn MoqState_Write_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqState) PrettyParams_Write(params MoqState_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.B)
}

func (m *MoqState) ParamsKey_Write(params MoqState_Write_params, anyParams uint64) MoqState_Write_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Write.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the Write function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	return MoqState_Write_paramsKey{
		Params: struct{}{},
		Hashes: struct{ B hash.Hash }{
			B: bUsedHash,
		},
	}
}

func (m *MoqState_recorder) Width() *MoqState_Width_fnRecorder {
	return &MoqState_Width_fnRecorder{
		Params:   MoqState_Width_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqState_Width_fnRecorder) Any() *MoqState_Width_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Width(r.Params))
		return nil
	}
	return &MoqState_Width_anyParams{Recorder: r}
}

func (r *MoqState_Width_fnRecorder) Seq() *MoqState_Width_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Width(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqState_Width_fnRecorder) NoSeq() *MoqState_Width_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Width(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqState_Width_fnRecorder) ReturnResults(wid int, ok bool) *MoqState_Width_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Wid int
			Ok  bool
		}
		Sequence   uint32
		DoFn       MoqState_Width_doFn
		DoReturnFn MoqState_Width_doReturnFn
	}{
		Values: &struct {
			Wid int
			Ok  bool
		}{
			Wid: wid,
			Ok:  ok,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqState_Width_fnRecorder) AndDo(fn MoqState_Width_doFn) *MoqState_Width_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqState_Width_fnRecorder) DoReturnResults(fn MoqState_Width_doReturnFn) *MoqState_Width_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Wid int
			Ok  bool
		}
		Sequence   uint32
		DoFn       MoqState_Width_doFn
		DoReturnFn MoqState_Width_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqState_Width_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqState_Width_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Width {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqState_Width_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqState_Width_paramsKey]*MoqState_Width_results{},
		}
		r.Moq.ResultsByParams_Width = append(r.Moq.ResultsByParams_Width, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Width) {
			copy(r.Moq.ResultsByParams_Width[insertAt+1:], r.Moq.ResultsByParams_Width[insertAt:0])
			r.Moq.ResultsByParams_Width[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Width(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqState_Width_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqState_Width_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqState_Width_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Wid int
					Ok  bool
				}
				Sequence   uint32
				DoFn       MoqState_Width_doFn
				DoReturnFn MoqState_Width_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqState) PrettyParams_Width(params MoqState_Width_params) string {
	return fmt.Sprintf("Width()")
}

func (m *MoqState) ParamsKey_Width(params MoqState_Width_params, anyParams uint64) MoqState_Width_paramsKey {
	m.Scene.T.Helper()
	return MoqState_Width_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqState_recorder) Precision() *MoqState_Precision_fnRecorder {
	return &MoqState_Precision_fnRecorder{
		Params:   MoqState_Precision_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqState_Precision_fnRecorder) Any() *MoqState_Precision_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Precision(r.Params))
		return nil
	}
	return &MoqState_Precision_anyParams{Recorder: r}
}

func (r *MoqState_Precision_fnRecorder) Seq() *MoqState_Precision_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Precision(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqState_Precision_fnRecorder) NoSeq() *MoqState_Precision_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Precision(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqState_Precision_fnRecorder) ReturnResults(prec int, ok bool) *MoqState_Precision_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Prec int
			Ok   bool
		}
		Sequence   uint32
		DoFn       MoqState_Precision_doFn
		DoReturnFn MoqState_Precision_doReturnFn
	}{
		Values: &struct {
			Prec int
			Ok   bool
		}{
			Prec: prec,
			Ok:   ok,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqState_Precision_fnRecorder) AndDo(fn MoqState_Precision_doFn) *MoqState_Precision_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqState_Precision_fnRecorder) DoReturnResults(fn MoqState_Precision_doReturnFn) *MoqState_Precision_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Prec int
			Ok   bool
		}
		Sequence   uint32
		DoFn       MoqState_Precision_doFn
		DoReturnFn MoqState_Precision_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqState_Precision_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqState_Precision_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Precision {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqState_Precision_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqState_Precision_paramsKey]*MoqState_Precision_results{},
		}
		r.Moq.ResultsByParams_Precision = append(r.Moq.ResultsByParams_Precision, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Precision) {
			copy(r.Moq.ResultsByParams_Precision[insertAt+1:], r.Moq.ResultsByParams_Precision[insertAt:0])
			r.Moq.ResultsByParams_Precision[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Precision(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqState_Precision_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqState_Precision_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqState_Precision_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Prec int
					Ok   bool
				}
				Sequence   uint32
				DoFn       MoqState_Precision_doFn
				DoReturnFn MoqState_Precision_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqState) PrettyParams_Precision(params MoqState_Precision_params) string {
	return fmt.Sprintf("Precision()")
}

func (m *MoqState) ParamsKey_Precision(params MoqState_Precision_params, anyParams uint64) MoqState_Precision_paramsKey {
	m.Scene.T.Helper()
	return MoqState_Precision_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqState_recorder) Flag(c int) *MoqState_Flag_fnRecorder {
	return &MoqState_Flag_fnRecorder{
		Params: MoqState_Flag_params{
			C: c,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqState_Flag_fnRecorder) Any() *MoqState_Flag_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Flag(r.Params))
		return nil
	}
	return &MoqState_Flag_anyParams{Recorder: r}
}

func (a *MoqState_Flag_anyParams) C() *MoqState_Flag_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqState_Flag_fnRecorder) Seq() *MoqState_Flag_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Flag(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqState_Flag_fnRecorder) NoSeq() *MoqState_Flag_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Flag(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqState_Flag_fnRecorder) ReturnResults(result1 bool) *MoqState_Flag_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqState_Flag_doFn
		DoReturnFn MoqState_Flag_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqState_Flag_fnRecorder) AndDo(fn MoqState_Flag_doFn) *MoqState_Flag_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqState_Flag_fnRecorder) DoReturnResults(fn MoqState_Flag_doReturnFn) *MoqState_Flag_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqState_Flag_doFn
		DoReturnFn MoqState_Flag_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqState_Flag_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqState_Flag_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Flag {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqState_Flag_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqState_Flag_paramsKey]*MoqState_Flag_results{},
		}
		r.Moq.ResultsByParams_Flag = append(r.Moq.ResultsByParams_Flag, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Flag) {
			copy(r.Moq.ResultsByParams_Flag[insertAt+1:], r.Moq.ResultsByParams_Flag[insertAt:0])
			r.Moq.ResultsByParams_Flag[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Flag(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqState_Flag_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqState_Flag_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqState_Flag_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqState_Flag_doFn
				DoReturnFn MoqState_Flag_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqState) PrettyParams_Flag(params MoqState_Flag_params) string {
	return fmt.Sprintf("Flag(%#v)", params.C)
}

func (m *MoqState) ParamsKey_Flag(params MoqState_Flag_params, anyParams uint64) MoqState_Flag_paramsKey {
	m.Scene.T.Helper()
	var cUsed int
	var cUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Flag.C == moq.ParamIndexByValue {
			cUsed = params.C
		} else {
			cUsedHash = hash.DeepHash(params.C)
		}
	}
	return MoqState_Flag_paramsKey{
		Params: struct{ C int }{
			C: cUsed,
		},
		Hashes: struct{ C hash.Hash }{
			C: cUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqState) Reset() {
	m.ResultsByParams_Write = nil
	m.ResultsByParams_Width = nil
	m.ResultsByParams_Precision = nil
	m.ResultsByParams_Flag = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqState) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Write {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Write(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Width {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Width(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Precision {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Precision(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Flag {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Flag(results.Params))
			}
		}
	}
}
