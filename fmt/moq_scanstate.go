// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package fmt

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that fmt.ScanState is mocked completely
var _ fmt.ScanState = (*MoqScanState_mock)(nil)

// MoqScanState holds the state of a moq of the ScanState type
type MoqScanState struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqScanState_mock

	ResultsByParams_ReadRune   []MoqScanState_ReadRune_resultsByParams
	ResultsByParams_UnreadRune []MoqScanState_UnreadRune_resultsByParams
	ResultsByParams_SkipSpace  []MoqScanState_SkipSpace_resultsByParams
	ResultsByParams_Token      []MoqScanState_Token_resultsByParams
	ResultsByParams_Width      []MoqScanState_Width_resultsByParams
	ResultsByParams_Read       []MoqScanState_Read_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			ReadRune   struct{}
			UnreadRune struct{}
			SkipSpace  struct{}
			Token      struct {
				SkipSpace moq.ParamIndexing
				F         moq.ParamIndexing
			}
			Width struct{}
			Read  struct {
				Buf moq.ParamIndexing
			}
		}
	}
	// MoqScanState_mock isolates the mock interface of the ScanState type
}

type MoqScanState_mock struct {
	Moq *MoqScanState
}

// MoqScanState_recorder isolates the recorder interface of the ScanState type
type MoqScanState_recorder struct {
	Moq *MoqScanState
}

// MoqScanState_ReadRune_params holds the params of the ScanState type
type MoqScanState_ReadRune_params struct{}

// MoqScanState_ReadRune_paramsKey holds the map key params of the ScanState
// type
type MoqScanState_ReadRune_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqScanState_ReadRune_resultsByParams contains the results for a given set
// of parameters for the ScanState type
type MoqScanState_ReadRune_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScanState_ReadRune_paramsKey]*MoqScanState_ReadRune_results
}

// MoqScanState_ReadRune_doFn defines the type of function needed when calling
// AndDo for the ScanState type
type MoqScanState_ReadRune_doFn func()

// MoqScanState_ReadRune_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ScanState type
type MoqScanState_ReadRune_doReturnFn func() (r rune, size int, err error)

// MoqScanState_ReadRune_results holds the results of the ScanState type
type MoqScanState_ReadRune_results struct {
	Params  MoqScanState_ReadRune_params
	Results []struct {
		Values *struct {
			Result1 rune
			Size    int
			Err     error
		}
		Sequence   uint32
		DoFn       MoqScanState_ReadRune_doFn
		DoReturnFn MoqScanState_ReadRune_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScanState_ReadRune_fnRecorder routes recorded function calls to the
// MoqScanState moq
type MoqScanState_ReadRune_fnRecorder struct {
	Params    MoqScanState_ReadRune_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScanState_ReadRune_results
	Moq       *MoqScanState
}

// MoqScanState_ReadRune_anyParams isolates the any params functions of the
// ScanState type
type MoqScanState_ReadRune_anyParams struct {
	Recorder *MoqScanState_ReadRune_fnRecorder
}

// MoqScanState_UnreadRune_params holds the params of the ScanState type
type MoqScanState_UnreadRune_params struct{}

// MoqScanState_UnreadRune_paramsKey holds the map key params of the ScanState
// type
type MoqScanState_UnreadRune_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqScanState_UnreadRune_resultsByParams contains the results for a given set
// of parameters for the ScanState type
type MoqScanState_UnreadRune_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScanState_UnreadRune_paramsKey]*MoqScanState_UnreadRune_results
}

// MoqScanState_UnreadRune_doFn defines the type of function needed when
// calling AndDo for the ScanState type
type MoqScanState_UnreadRune_doFn func()

// MoqScanState_UnreadRune_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ScanState type
type MoqScanState_UnreadRune_doReturnFn func() error

// MoqScanState_UnreadRune_results holds the results of the ScanState type
type MoqScanState_UnreadRune_results struct {
	Params  MoqScanState_UnreadRune_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqScanState_UnreadRune_doFn
		DoReturnFn MoqScanState_UnreadRune_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScanState_UnreadRune_fnRecorder routes recorded function calls to the
// MoqScanState moq
type MoqScanState_UnreadRune_fnRecorder struct {
	Params    MoqScanState_UnreadRune_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScanState_UnreadRune_results
	Moq       *MoqScanState
}

// MoqScanState_UnreadRune_anyParams isolates the any params functions of the
// ScanState type
type MoqScanState_UnreadRune_anyParams struct {
	Recorder *MoqScanState_UnreadRune_fnRecorder
}

// MoqScanState_SkipSpace_params holds the params of the ScanState type
type MoqScanState_SkipSpace_params struct{}

// MoqScanState_SkipSpace_paramsKey holds the map key params of the ScanState
// type
type MoqScanState_SkipSpace_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqScanState_SkipSpace_resultsByParams contains the results for a given set
// of parameters for the ScanState type
type MoqScanState_SkipSpace_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScanState_SkipSpace_paramsKey]*MoqScanState_SkipSpace_results
}

// MoqScanState_SkipSpace_doFn defines the type of function needed when calling
// AndDo for the ScanState type
type MoqScanState_SkipSpace_doFn func()

// MoqScanState_SkipSpace_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ScanState type
type MoqScanState_SkipSpace_doReturnFn func()

// MoqScanState_SkipSpace_results holds the results of the ScanState type
type MoqScanState_SkipSpace_results struct {
	Params  MoqScanState_SkipSpace_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqScanState_SkipSpace_doFn
		DoReturnFn MoqScanState_SkipSpace_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScanState_SkipSpace_fnRecorder routes recorded function calls to the
// MoqScanState moq
type MoqScanState_SkipSpace_fnRecorder struct {
	Params    MoqScanState_SkipSpace_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScanState_SkipSpace_results
	Moq       *MoqScanState
}

// MoqScanState_SkipSpace_anyParams isolates the any params functions of the
// ScanState type
type MoqScanState_SkipSpace_anyParams struct {
	Recorder *MoqScanState_SkipSpace_fnRecorder
}

// MoqScanState_Token_params holds the params of the ScanState type
type MoqScanState_Token_params struct {
	SkipSpace bool
	F         func(rune) bool
}

// MoqScanState_Token_paramsKey holds the map key params of the ScanState type
type MoqScanState_Token_paramsKey struct {
	Params struct{ SkipSpace bool }
	Hashes struct {
		SkipSpace hash.Hash
		F         hash.Hash
	}
}

// MoqScanState_Token_resultsByParams contains the results for a given set of
// parameters for the ScanState type
type MoqScanState_Token_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScanState_Token_paramsKey]*MoqScanState_Token_results
}

// MoqScanState_Token_doFn defines the type of function needed when calling
// AndDo for the ScanState type
type MoqScanState_Token_doFn func(skipSpace bool, f func(rune) bool)

// MoqScanState_Token_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ScanState type
type MoqScanState_Token_doReturnFn func(skipSpace bool, f func(rune) bool) (token []byte, err error)

// MoqScanState_Token_results holds the results of the ScanState type
type MoqScanState_Token_results struct {
	Params  MoqScanState_Token_params
	Results []struct {
		Values *struct {
			Token []byte
			Err   error
		}
		Sequence   uint32
		DoFn       MoqScanState_Token_doFn
		DoReturnFn MoqScanState_Token_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScanState_Token_fnRecorder routes recorded function calls to the
// MoqScanState moq
type MoqScanState_Token_fnRecorder struct {
	Params    MoqScanState_Token_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScanState_Token_results
	Moq       *MoqScanState
}

// MoqScanState_Token_anyParams isolates the any params functions of the
// ScanState type
type MoqScanState_Token_anyParams struct {
	Recorder *MoqScanState_Token_fnRecorder
}

// MoqScanState_Width_params holds the params of the ScanState type
type MoqScanState_Width_params struct{}

// MoqScanState_Width_paramsKey holds the map key params of the ScanState type
type MoqScanState_Width_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqScanState_Width_resultsByParams contains the results for a given set of
// parameters for the ScanState type
type MoqScanState_Width_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScanState_Width_paramsKey]*MoqScanState_Width_results
}

// MoqScanState_Width_doFn defines the type of function needed when calling
// AndDo for the ScanState type
type MoqScanState_Width_doFn func()

// MoqScanState_Width_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ScanState type
type MoqScanState_Width_doReturnFn func() (wid int, ok bool)

// MoqScanState_Width_results holds the results of the ScanState type
type MoqScanState_Width_results struct {
	Params  MoqScanState_Width_params
	Results []struct {
		Values *struct {
			Wid int
			Ok  bool
		}
		Sequence   uint32
		DoFn       MoqScanState_Width_doFn
		DoReturnFn MoqScanState_Width_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScanState_Width_fnRecorder routes recorded function calls to the
// MoqScanState moq
type MoqScanState_Width_fnRecorder struct {
	Params    MoqScanState_Width_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScanState_Width_results
	Moq       *MoqScanState
}

// MoqScanState_Width_anyParams isolates the any params functions of the
// ScanState type
type MoqScanState_Width_anyParams struct {
	Recorder *MoqScanState_Width_fnRecorder
}

// MoqScanState_Read_params holds the params of the ScanState type
type MoqScanState_Read_params struct{ Buf []byte }

// MoqScanState_Read_paramsKey holds the map key params of the ScanState type
type MoqScanState_Read_paramsKey struct {
	Params struct{}
	Hashes struct{ Buf hash.Hash }
}

// MoqScanState_Read_resultsByParams contains the results for a given set of
// parameters for the ScanState type
type MoqScanState_Read_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScanState_Read_paramsKey]*MoqScanState_Read_results
}

// MoqScanState_Read_doFn defines the type of function needed when calling
// AndDo for the ScanState type
type MoqScanState_Read_doFn func(buf []byte)

// MoqScanState_Read_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ScanState type
type MoqScanState_Read_doReturnFn func(buf []byte) (n int, err error)

// MoqScanState_Read_results holds the results of the ScanState type
type MoqScanState_Read_results struct {
	Params  MoqScanState_Read_params
	Results []struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqScanState_Read_doFn
		DoReturnFn MoqScanState_Read_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScanState_Read_fnRecorder routes recorded function calls to the
// MoqScanState moq
type MoqScanState_Read_fnRecorder struct {
	Params    MoqScanState_Read_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScanState_Read_results
	Moq       *MoqScanState
}

// MoqScanState_Read_anyParams isolates the any params functions of the
// ScanState type
type MoqScanState_Read_anyParams struct {
	Recorder *MoqScanState_Read_fnRecorder
}

// NewMoqScanState creates a new moq of the ScanState type
func NewMoqScanState(scene *moq.Scene, config *moq.Config) *MoqScanState {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqScanState{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqScanState_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				ReadRune   struct{}
				UnreadRune struct{}
				SkipSpace  struct{}
				Token      struct {
					SkipSpace moq.ParamIndexing
					F         moq.ParamIndexing
				}
				Width struct{}
				Read  struct {
					Buf moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			ReadRune   struct{}
			UnreadRune struct{}
			SkipSpace  struct{}
			Token      struct {
				SkipSpace moq.ParamIndexing
				F         moq.ParamIndexing
			}
			Width struct{}
			Read  struct {
				Buf moq.ParamIndexing
			}
		}{
			ReadRune:   struct{}{},
			UnreadRune: struct{}{},
			SkipSpace:  struct{}{},
			Token: struct {
				SkipSpace moq.ParamIndexing
				F         moq.ParamIndexing
			}{
				SkipSpace: moq.ParamIndexByValue,
				F:         moq.ParamIndexByHash,
			},
			Width: struct{}{},
			Read: struct {
				Buf moq.ParamIndexing
			}{
				Buf: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the ScanState type
func (m *MoqScanState) Mock() *MoqScanState_mock { return m.Moq }

func (m *MoqScanState_mock) ReadRune() (result1 rune, size int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqScanState_ReadRune_params{}
	var results *MoqScanState_ReadRune_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadRune {
		paramsKey := m.Moq.ParamsKey_ReadRune(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadRune(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadRune(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadRune(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		size = result.Values.Size
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		result1, size, err = result.DoReturnFn()
	}
	return
}

func (m *MoqScanState_mock) UnreadRune() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqScanState_UnreadRune_params{}
	var results *MoqScanState_UnreadRune_results
	for _, resultsByParams := range m.Moq.ResultsByParams_UnreadRune {
		paramsKey := m.Moq.ParamsKey_UnreadRune(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_UnreadRune(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_UnreadRune(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_UnreadRune(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqScanState_mock) SkipSpace() {
	m.Moq.Scene.T.Helper()
	params := MoqScanState_SkipSpace_params{}
	var results *MoqScanState_SkipSpace_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SkipSpace {
		paramsKey := m.Moq.ParamsKey_SkipSpace(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SkipSpace(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SkipSpace(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SkipSpace(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqScanState_mock) Token(skipSpace bool, f func(rune) bool) (token []byte, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqScanState_Token_params{
		SkipSpace: skipSpace,
		F:         f,
	}
	var results *MoqScanState_Token_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Token {
		paramsKey := m.Moq.ParamsKey_Token(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Token(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Token(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Token(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(skipSpace, f)
	}

	if result.Values != nil {
		token = result.Values.Token
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		token, err = result.DoReturnFn(skipSpace, f)
	}
	return
}

func (m *MoqScanState_mock) Width() (wid int, ok bool) {
	m.Moq.Scene.T.Helper()
	params := MoqScanState_Width_params{}
	var results *MoqScanState_Width_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Width {
		paramsKey := m.Moq.ParamsKey_Width(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Width(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Width(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Width(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		wid = result.Values.Wid
		ok = result.Values.Ok
	}
	if result.DoReturnFn != nil {
		wid, ok = result.DoReturnFn()
	}
	return
}

func (m *MoqScanState_mock) Read(buf []byte) (n int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqScanState_Read_params{
		Buf: buf,
	}
	var results *MoqScanState_Read_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Read {
		paramsKey := m.Moq.ParamsKey_Read(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Read(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Read(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Read(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(buf)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(buf)
	}
	return
}

// OnCall returns the recorder implementation of the ScanState type
func (m *MoqScanState) OnCall() *MoqScanState_recorder {
	return &MoqScanState_recorder{
		Moq: m,
	}
}

func (m *MoqScanState_recorder) ReadRune() *MoqScanState_ReadRune_fnRecorder {
	return &MoqScanState_ReadRune_fnRecorder{
		Params:   MoqScanState_ReadRune_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScanState_ReadRune_fnRecorder) Any() *MoqScanState_ReadRune_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadRune(r.Params))
		return nil
	}
	return &MoqScanState_ReadRune_anyParams{Recorder: r}
}

func (r *MoqScanState_ReadRune_fnRecorder) Seq() *MoqScanState_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadRune(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScanState_ReadRune_fnRecorder) NoSeq() *MoqScanState_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadRune(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScanState_ReadRune_fnRecorder) ReturnResults(result1 rune, size int, err error) *MoqScanState_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 rune
			Size    int
			Err     error
		}
		Sequence   uint32
		DoFn       MoqScanState_ReadRune_doFn
		DoReturnFn MoqScanState_ReadRune_doReturnFn
	}{
		Values: &struct {
			Result1 rune
			Size    int
			Err     error
		}{
			Result1: result1,
			Size:    size,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScanState_ReadRune_fnRecorder) AndDo(fn MoqScanState_ReadRune_doFn) *MoqScanState_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScanState_ReadRune_fnRecorder) DoReturnResults(fn MoqScanState_ReadRune_doReturnFn) *MoqScanState_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 rune
			Size    int
			Err     error
		}
		Sequence   uint32
		DoFn       MoqScanState_ReadRune_doFn
		DoReturnFn MoqScanState_ReadRune_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScanState_ReadRune_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScanState_ReadRune_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadRune {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScanState_ReadRune_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScanState_ReadRune_paramsKey]*MoqScanState_ReadRune_results{},
		}
		r.Moq.ResultsByParams_ReadRune = append(r.Moq.ResultsByParams_ReadRune, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadRune) {
			copy(r.Moq.ResultsByParams_ReadRune[insertAt+1:], r.Moq.ResultsByParams_ReadRune[insertAt:0])
			r.Moq.ResultsByParams_ReadRune[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadRune(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScanState_ReadRune_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScanState_ReadRune_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScanState_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 rune
					Size    int
					Err     error
				}
				Sequence   uint32
				DoFn       MoqScanState_ReadRune_doFn
				DoReturnFn MoqScanState_ReadRune_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScanState) PrettyParams_ReadRune(params MoqScanState_ReadRune_params) string {
	return fmt.Sprintf("ReadRune()")
}

func (m *MoqScanState) ParamsKey_ReadRune(params MoqScanState_ReadRune_params, anyParams uint64) MoqScanState_ReadRune_paramsKey {
	m.Scene.T.Helper()
	return MoqScanState_ReadRune_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqScanState_recorder) UnreadRune() *MoqScanState_UnreadRune_fnRecorder {
	return &MoqScanState_UnreadRune_fnRecorder{
		Params:   MoqScanState_UnreadRune_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScanState_UnreadRune_fnRecorder) Any() *MoqScanState_UnreadRune_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnreadRune(r.Params))
		return nil
	}
	return &MoqScanState_UnreadRune_anyParams{Recorder: r}
}

func (r *MoqScanState_UnreadRune_fnRecorder) Seq() *MoqScanState_UnreadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnreadRune(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScanState_UnreadRune_fnRecorder) NoSeq() *MoqScanState_UnreadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnreadRune(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScanState_UnreadRune_fnRecorder) ReturnResults(result1 error) *MoqScanState_UnreadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqScanState_UnreadRune_doFn
		DoReturnFn MoqScanState_UnreadRune_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScanState_UnreadRune_fnRecorder) AndDo(fn MoqScanState_UnreadRune_doFn) *MoqScanState_UnreadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScanState_UnreadRune_fnRecorder) DoReturnResults(fn MoqScanState_UnreadRune_doReturnFn) *MoqScanState_UnreadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqScanState_UnreadRune_doFn
		DoReturnFn MoqScanState_UnreadRune_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScanState_UnreadRune_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScanState_UnreadRune_resultsByParams
	for n, res := range r.Moq.ResultsByParams_UnreadRune {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScanState_UnreadRune_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScanState_UnreadRune_paramsKey]*MoqScanState_UnreadRune_results{},
		}
		r.Moq.ResultsByParams_UnreadRune = append(r.Moq.ResultsByParams_UnreadRune, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_UnreadRune) {
			copy(r.Moq.ResultsByParams_UnreadRune[insertAt+1:], r.Moq.ResultsByParams_UnreadRune[insertAt:0])
			r.Moq.ResultsByParams_UnreadRune[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_UnreadRune(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScanState_UnreadRune_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScanState_UnreadRune_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScanState_UnreadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqScanState_UnreadRune_doFn
				DoReturnFn MoqScanState_UnreadRune_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScanState) PrettyParams_UnreadRune(params MoqScanState_UnreadRune_params) string {
	return fmt.Sprintf("UnreadRune()")
}

func (m *MoqScanState) ParamsKey_UnreadRune(params MoqScanState_UnreadRune_params, anyParams uint64) MoqScanState_UnreadRune_paramsKey {
	m.Scene.T.Helper()
	return MoqScanState_UnreadRune_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqScanState_recorder) SkipSpace() *MoqScanState_SkipSpace_fnRecorder {
	return &MoqScanState_SkipSpace_fnRecorder{
		Params:   MoqScanState_SkipSpace_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScanState_SkipSpace_fnRecorder) Any() *MoqScanState_SkipSpace_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SkipSpace(r.Params))
		return nil
	}
	return &MoqScanState_SkipSpace_anyParams{Recorder: r}
}

func (r *MoqScanState_SkipSpace_fnRecorder) Seq() *MoqScanState_SkipSpace_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SkipSpace(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScanState_SkipSpace_fnRecorder) NoSeq() *MoqScanState_SkipSpace_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SkipSpace(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScanState_SkipSpace_fnRecorder) ReturnResults() *MoqScanState_SkipSpace_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqScanState_SkipSpace_doFn
		DoReturnFn MoqScanState_SkipSpace_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScanState_SkipSpace_fnRecorder) AndDo(fn MoqScanState_SkipSpace_doFn) *MoqScanState_SkipSpace_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScanState_SkipSpace_fnRecorder) DoReturnResults(fn MoqScanState_SkipSpace_doReturnFn) *MoqScanState_SkipSpace_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqScanState_SkipSpace_doFn
		DoReturnFn MoqScanState_SkipSpace_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScanState_SkipSpace_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScanState_SkipSpace_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SkipSpace {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScanState_SkipSpace_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScanState_SkipSpace_paramsKey]*MoqScanState_SkipSpace_results{},
		}
		r.Moq.ResultsByParams_SkipSpace = append(r.Moq.ResultsByParams_SkipSpace, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SkipSpace) {
			copy(r.Moq.ResultsByParams_SkipSpace[insertAt+1:], r.Moq.ResultsByParams_SkipSpace[insertAt:0])
			r.Moq.ResultsByParams_SkipSpace[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SkipSpace(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScanState_SkipSpace_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScanState_SkipSpace_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScanState_SkipSpace_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqScanState_SkipSpace_doFn
				DoReturnFn MoqScanState_SkipSpace_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScanState) PrettyParams_SkipSpace(params MoqScanState_SkipSpace_params) string {
	return fmt.Sprintf("SkipSpace()")
}

func (m *MoqScanState) ParamsKey_SkipSpace(params MoqScanState_SkipSpace_params, anyParams uint64) MoqScanState_SkipSpace_paramsKey {
	m.Scene.T.Helper()
	return MoqScanState_SkipSpace_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqScanState_recorder) Token(skipSpace bool, f func(rune) bool) *MoqScanState_Token_fnRecorder {
	return &MoqScanState_Token_fnRecorder{
		Params: MoqScanState_Token_params{
			SkipSpace: skipSpace,
			F:         f,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScanState_Token_fnRecorder) Any() *MoqScanState_Token_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Token(r.Params))
		return nil
	}
	return &MoqScanState_Token_anyParams{Recorder: r}
}

func (a *MoqScanState_Token_anyParams) SkipSpace() *MoqScanState_Token_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqScanState_Token_anyParams) F() *MoqScanState_Token_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqScanState_Token_fnRecorder) Seq() *MoqScanState_Token_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Token(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScanState_Token_fnRecorder) NoSeq() *MoqScanState_Token_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Token(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScanState_Token_fnRecorder) ReturnResults(token []byte, err error) *MoqScanState_Token_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Token []byte
			Err   error
		}
		Sequence   uint32
		DoFn       MoqScanState_Token_doFn
		DoReturnFn MoqScanState_Token_doReturnFn
	}{
		Values: &struct {
			Token []byte
			Err   error
		}{
			Token: token,
			Err:   err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScanState_Token_fnRecorder) AndDo(fn MoqScanState_Token_doFn) *MoqScanState_Token_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScanState_Token_fnRecorder) DoReturnResults(fn MoqScanState_Token_doReturnFn) *MoqScanState_Token_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Token []byte
			Err   error
		}
		Sequence   uint32
		DoFn       MoqScanState_Token_doFn
		DoReturnFn MoqScanState_Token_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScanState_Token_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScanState_Token_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Token {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScanState_Token_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScanState_Token_paramsKey]*MoqScanState_Token_results{},
		}
		r.Moq.ResultsByParams_Token = append(r.Moq.ResultsByParams_Token, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Token) {
			copy(r.Moq.ResultsByParams_Token[insertAt+1:], r.Moq.ResultsByParams_Token[insertAt:0])
			r.Moq.ResultsByParams_Token[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Token(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScanState_Token_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScanState_Token_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScanState_Token_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Token []byte
					Err   error
				}
				Sequence   uint32
				DoFn       MoqScanState_Token_doFn
				DoReturnFn MoqScanState_Token_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScanState) PrettyParams_Token(params MoqScanState_Token_params) string {
	return fmt.Sprintf("Token(%#v, %#v)", params.SkipSpace, params.F)
}

func (m *MoqScanState) ParamsKey_Token(params MoqScanState_Token_params, anyParams uint64) MoqScanState_Token_paramsKey {
	m.Scene.T.Helper()
	var skipSpaceUsed bool
	var skipSpaceUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Token.SkipSpace == moq.ParamIndexByValue {
			skipSpaceUsed = params.SkipSpace
		} else {
			skipSpaceUsedHash = hash.DeepHash(params.SkipSpace)
		}
	}
	var fUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Token.F == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The f parameter of the Token function can't be indexed by value")
		}
		fUsedHash = hash.DeepHash(params.F)
	}
	return MoqScanState_Token_paramsKey{
		Params: struct{ SkipSpace bool }{
			SkipSpace: skipSpaceUsed,
		},
		Hashes: struct {
			SkipSpace hash.Hash
			F         hash.Hash
		}{
			SkipSpace: skipSpaceUsedHash,
			F:         fUsedHash,
		},
	}
}

func (m *MoqScanState_recorder) Width() *MoqScanState_Width_fnRecorder {
	return &MoqScanState_Width_fnRecorder{
		Params:   MoqScanState_Width_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScanState_Width_fnRecorder) Any() *MoqScanState_Width_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Width(r.Params))
		return nil
	}
	return &MoqScanState_Width_anyParams{Recorder: r}
}

func (r *MoqScanState_Width_fnRecorder) Seq() *MoqScanState_Width_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Width(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScanState_Width_fnRecorder) NoSeq() *MoqScanState_Width_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Width(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScanState_Width_fnRecorder) ReturnResults(wid int, ok bool) *MoqScanState_Width_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Wid int
			Ok  bool
		}
		Sequence   uint32
		DoFn       MoqScanState_Width_doFn
		DoReturnFn MoqScanState_Width_doReturnFn
	}{
		Values: &struct {
			Wid int
			Ok  bool
		}{
			Wid: wid,
			Ok:  ok,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScanState_Width_fnRecorder) AndDo(fn MoqScanState_Width_doFn) *MoqScanState_Width_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScanState_Width_fnRecorder) DoReturnResults(fn MoqScanState_Width_doReturnFn) *MoqScanState_Width_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Wid int
			Ok  bool
		}
		Sequence   uint32
		DoFn       MoqScanState_Width_doFn
		DoReturnFn MoqScanState_Width_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScanState_Width_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScanState_Width_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Width {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScanState_Width_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScanState_Width_paramsKey]*MoqScanState_Width_results{},
		}
		r.Moq.ResultsByParams_Width = append(r.Moq.ResultsByParams_Width, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Width) {
			copy(r.Moq.ResultsByParams_Width[insertAt+1:], r.Moq.ResultsByParams_Width[insertAt:0])
			r.Moq.ResultsByParams_Width[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Width(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScanState_Width_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScanState_Width_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScanState_Width_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Wid int
					Ok  bool
				}
				Sequence   uint32
				DoFn       MoqScanState_Width_doFn
				DoReturnFn MoqScanState_Width_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScanState) PrettyParams_Width(params MoqScanState_Width_params) string {
	return fmt.Sprintf("Width()")
}

func (m *MoqScanState) ParamsKey_Width(params MoqScanState_Width_params, anyParams uint64) MoqScanState_Width_paramsKey {
	m.Scene.T.Helper()
	return MoqScanState_Width_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqScanState_recorder) Read(buf []byte) *MoqScanState_Read_fnRecorder {
	return &MoqScanState_Read_fnRecorder{
		Params: MoqScanState_Read_params{
			Buf: buf,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScanState_Read_fnRecorder) Any() *MoqScanState_Read_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	return &MoqScanState_Read_anyParams{Recorder: r}
}

func (a *MoqScanState_Read_anyParams) Buf() *MoqScanState_Read_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqScanState_Read_fnRecorder) Seq() *MoqScanState_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScanState_Read_fnRecorder) NoSeq() *MoqScanState_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScanState_Read_fnRecorder) ReturnResults(n int, err error) *MoqScanState_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqScanState_Read_doFn
		DoReturnFn MoqScanState_Read_doReturnFn
	}{
		Values: &struct {
			N   int
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScanState_Read_fnRecorder) AndDo(fn MoqScanState_Read_doFn) *MoqScanState_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScanState_Read_fnRecorder) DoReturnResults(fn MoqScanState_Read_doReturnFn) *MoqScanState_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqScanState_Read_doFn
		DoReturnFn MoqScanState_Read_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScanState_Read_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScanState_Read_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Read {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScanState_Read_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScanState_Read_paramsKey]*MoqScanState_Read_results{},
		}
		r.Moq.ResultsByParams_Read = append(r.Moq.ResultsByParams_Read, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Read) {
			copy(r.Moq.ResultsByParams_Read[insertAt+1:], r.Moq.ResultsByParams_Read[insertAt:0])
			r.Moq.ResultsByParams_Read[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Read(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScanState_Read_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScanState_Read_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScanState_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int
					Err error
				}
				Sequence   uint32
				DoFn       MoqScanState_Read_doFn
				DoReturnFn MoqScanState_Read_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScanState) PrettyParams_Read(params MoqScanState_Read_params) string {
	return fmt.Sprintf("Read(%#v)", params.Buf)
}

func (m *MoqScanState) ParamsKey_Read(params MoqScanState_Read_params, anyParams uint64) MoqScanState_Read_paramsKey {
	m.Scene.T.Helper()
	var bufUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Read.Buf == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The buf parameter of the Read function can't be indexed by value")
		}
		bufUsedHash = hash.DeepHash(params.Buf)
	}
	return MoqScanState_Read_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Buf hash.Hash }{
			Buf: bufUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqScanState) Reset() {
	m.ResultsByParams_ReadRune = nil
	m.ResultsByParams_UnreadRune = nil
	m.ResultsByParams_SkipSpace = nil
	m.ResultsByParams_Token = nil
	m.ResultsByParams_Width = nil
	m.ResultsByParams_Read = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqScanState) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_ReadRune {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadRune(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_UnreadRune {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_UnreadRune(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SkipSpace {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SkipSpace(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Token {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Token(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Width {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Width(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Read {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Read(results.Params))
			}
		}
	}
}
