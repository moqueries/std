// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package rpc

import (
	"fmt"
	"math/bits"
	"net/rpc"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that rpc.Client_starGenType is mocked
// completely
var _ Client_starGenType = (*MoqClient_starGenType_mock)(nil)

// Client_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Client_starGenType interface {
	Close() error
	Go(serviceMethod string, args interface{}, reply interface{}, done chan *rpc.Call) *rpc.Call
	Call(serviceMethod string, args interface{}, reply interface{}) error
}

// MoqClient_starGenType holds the state of a moq of the Client_starGenType
// type
type MoqClient_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqClient_starGenType_mock

	ResultsByParams_Close []MoqClient_starGenType_Close_resultsByParams
	ResultsByParams_Go    []MoqClient_starGenType_Go_resultsByParams
	ResultsByParams_Call  []MoqClient_starGenType_Call_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Close struct{}
			Go    struct {
				ServiceMethod moq.ParamIndexing
				Args          moq.ParamIndexing
				Reply         moq.ParamIndexing
				Done          moq.ParamIndexing
			}
			Call struct {
				ServiceMethod moq.ParamIndexing
				Args          moq.ParamIndexing
				Reply         moq.ParamIndexing
			}
		}
	}
	// MoqClient_starGenType_mock isolates the mock interface of the
}

// Client_starGenType type
type MoqClient_starGenType_mock struct {
	Moq *MoqClient_starGenType
}

// MoqClient_starGenType_recorder isolates the recorder interface of the
// Client_starGenType type
type MoqClient_starGenType_recorder struct {
	Moq *MoqClient_starGenType
}

// MoqClient_starGenType_Close_params holds the params of the
// Client_starGenType type
type MoqClient_starGenType_Close_params struct{}

// MoqClient_starGenType_Close_paramsKey holds the map key params of the
// Client_starGenType type
type MoqClient_starGenType_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqClient_starGenType_Close_resultsByParams contains the results for a given
// set of parameters for the Client_starGenType type
type MoqClient_starGenType_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqClient_starGenType_Close_paramsKey]*MoqClient_starGenType_Close_results
}

// MoqClient_starGenType_Close_doFn defines the type of function needed when
// calling AndDo for the Client_starGenType type
type MoqClient_starGenType_Close_doFn func()

// MoqClient_starGenType_Close_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Client_starGenType type
type MoqClient_starGenType_Close_doReturnFn func() error

// MoqClient_starGenType_Close_results holds the results of the
// Client_starGenType type
type MoqClient_starGenType_Close_results struct {
	Params  MoqClient_starGenType_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Close_doFn
		DoReturnFn MoqClient_starGenType_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqClient_starGenType_Close_fnRecorder routes recorded function calls to the
// MoqClient_starGenType moq
type MoqClient_starGenType_Close_fnRecorder struct {
	Params    MoqClient_starGenType_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqClient_starGenType_Close_results
	Moq       *MoqClient_starGenType
}

// MoqClient_starGenType_Close_anyParams isolates the any params functions of
// the Client_starGenType type
type MoqClient_starGenType_Close_anyParams struct {
	Recorder *MoqClient_starGenType_Close_fnRecorder
}

// MoqClient_starGenType_Go_params holds the params of the Client_starGenType
// type
type MoqClient_starGenType_Go_params struct {
	ServiceMethod string
	Args          interface{}
	Reply         interface{}
	Done          chan *rpc.Call
}

// MoqClient_starGenType_Go_paramsKey holds the map key params of the
// Client_starGenType type
type MoqClient_starGenType_Go_paramsKey struct {
	Params struct {
		ServiceMethod string
		Args          interface{}
		Reply         interface{}
		Done          chan *rpc.Call
	}
	Hashes struct {
		ServiceMethod hash.Hash
		Args          hash.Hash
		Reply         hash.Hash
		Done          hash.Hash
	}
}

// MoqClient_starGenType_Go_resultsByParams contains the results for a given
// set of parameters for the Client_starGenType type
type MoqClient_starGenType_Go_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqClient_starGenType_Go_paramsKey]*MoqClient_starGenType_Go_results
}

// MoqClient_starGenType_Go_doFn defines the type of function needed when
// calling AndDo for the Client_starGenType type
type MoqClient_starGenType_Go_doFn func(serviceMethod string, args interface{}, reply interface{}, done chan *rpc.Call)

// MoqClient_starGenType_Go_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Client_starGenType type
type MoqClient_starGenType_Go_doReturnFn func(serviceMethod string, args interface{}, reply interface{}, done chan *rpc.Call) *rpc.Call

// MoqClient_starGenType_Go_results holds the results of the Client_starGenType
// type
type MoqClient_starGenType_Go_results struct {
	Params  MoqClient_starGenType_Go_params
	Results []struct {
		Values *struct {
			Result1 *rpc.Call
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Go_doFn
		DoReturnFn MoqClient_starGenType_Go_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqClient_starGenType_Go_fnRecorder routes recorded function calls to the
// MoqClient_starGenType moq
type MoqClient_starGenType_Go_fnRecorder struct {
	Params    MoqClient_starGenType_Go_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqClient_starGenType_Go_results
	Moq       *MoqClient_starGenType
}

// MoqClient_starGenType_Go_anyParams isolates the any params functions of the
// Client_starGenType type
type MoqClient_starGenType_Go_anyParams struct {
	Recorder *MoqClient_starGenType_Go_fnRecorder
}

// MoqClient_starGenType_Call_params holds the params of the Client_starGenType
// type
type MoqClient_starGenType_Call_params struct {
	ServiceMethod string
	Args          interface{}
	Reply         interface{}
}

// MoqClient_starGenType_Call_paramsKey holds the map key params of the
// Client_starGenType type
type MoqClient_starGenType_Call_paramsKey struct {
	Params struct {
		ServiceMethod string
		Args          interface{}
		Reply         interface{}
	}
	Hashes struct {
		ServiceMethod hash.Hash
		Args          hash.Hash
		Reply         hash.Hash
	}
}

// MoqClient_starGenType_Call_resultsByParams contains the results for a given
// set of parameters for the Client_starGenType type
type MoqClient_starGenType_Call_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqClient_starGenType_Call_paramsKey]*MoqClient_starGenType_Call_results
}

// MoqClient_starGenType_Call_doFn defines the type of function needed when
// calling AndDo for the Client_starGenType type
type MoqClient_starGenType_Call_doFn func(serviceMethod string, args interface{}, reply interface{})

// MoqClient_starGenType_Call_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Client_starGenType type
type MoqClient_starGenType_Call_doReturnFn func(serviceMethod string, args interface{}, reply interface{}) error

// MoqClient_starGenType_Call_results holds the results of the
// Client_starGenType type
type MoqClient_starGenType_Call_results struct {
	Params  MoqClient_starGenType_Call_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Call_doFn
		DoReturnFn MoqClient_starGenType_Call_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqClient_starGenType_Call_fnRecorder routes recorded function calls to the
// MoqClient_starGenType moq
type MoqClient_starGenType_Call_fnRecorder struct {
	Params    MoqClient_starGenType_Call_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqClient_starGenType_Call_results
	Moq       *MoqClient_starGenType
}

// MoqClient_starGenType_Call_anyParams isolates the any params functions of
// the Client_starGenType type
type MoqClient_starGenType_Call_anyParams struct {
	Recorder *MoqClient_starGenType_Call_fnRecorder
}

// NewMoqClient_starGenType creates a new moq of the Client_starGenType type
func NewMoqClient_starGenType(scene *moq.Scene, config *moq.Config) *MoqClient_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqClient_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqClient_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Close struct{}
				Go    struct {
					ServiceMethod moq.ParamIndexing
					Args          moq.ParamIndexing
					Reply         moq.ParamIndexing
					Done          moq.ParamIndexing
				}
				Call struct {
					ServiceMethod moq.ParamIndexing
					Args          moq.ParamIndexing
					Reply         moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Close struct{}
			Go    struct {
				ServiceMethod moq.ParamIndexing
				Args          moq.ParamIndexing
				Reply         moq.ParamIndexing
				Done          moq.ParamIndexing
			}
			Call struct {
				ServiceMethod moq.ParamIndexing
				Args          moq.ParamIndexing
				Reply         moq.ParamIndexing
			}
		}{
			Close: struct{}{},
			Go: struct {
				ServiceMethod moq.ParamIndexing
				Args          moq.ParamIndexing
				Reply         moq.ParamIndexing
				Done          moq.ParamIndexing
			}{
				ServiceMethod: moq.ParamIndexByValue,
				Args:          moq.ParamIndexByHash,
				Reply:         moq.ParamIndexByHash,
				Done:          moq.ParamIndexByValue,
			},
			Call: struct {
				ServiceMethod moq.ParamIndexing
				Args          moq.ParamIndexing
				Reply         moq.ParamIndexing
			}{
				ServiceMethod: moq.ParamIndexByValue,
				Args:          moq.ParamIndexByHash,
				Reply:         moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Client_starGenType type
func (m *MoqClient_starGenType) Mock() *MoqClient_starGenType_mock { return m.Moq }

func (m *MoqClient_starGenType_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqClient_starGenType_Close_params{}
	var results *MoqClient_starGenType_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqClient_starGenType_mock) Go(serviceMethod string, args interface{}, reply interface{}, done chan *rpc.Call) (result1 *rpc.Call) {
	m.Moq.Scene.T.Helper()
	params := MoqClient_starGenType_Go_params{
		ServiceMethod: serviceMethod,
		Args:          args,
		Reply:         reply,
		Done:          done,
	}
	var results *MoqClient_starGenType_Go_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Go {
		paramsKey := m.Moq.ParamsKey_Go(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Go(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Go(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Go(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(serviceMethod, args, reply, done)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(serviceMethod, args, reply, done)
	}
	return
}

func (m *MoqClient_starGenType_mock) Call(serviceMethod string, args interface{}, reply interface{}) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqClient_starGenType_Call_params{
		ServiceMethod: serviceMethod,
		Args:          args,
		Reply:         reply,
	}
	var results *MoqClient_starGenType_Call_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Call {
		paramsKey := m.Moq.ParamsKey_Call(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Call(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Call(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Call(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(serviceMethod, args, reply)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(serviceMethod, args, reply)
	}
	return
}

// OnCall returns the recorder implementation of the Client_starGenType type
func (m *MoqClient_starGenType) OnCall() *MoqClient_starGenType_recorder {
	return &MoqClient_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqClient_starGenType_recorder) Close() *MoqClient_starGenType_Close_fnRecorder {
	return &MoqClient_starGenType_Close_fnRecorder{
		Params:   MoqClient_starGenType_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqClient_starGenType_Close_fnRecorder) Any() *MoqClient_starGenType_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqClient_starGenType_Close_anyParams{Recorder: r}
}

func (r *MoqClient_starGenType_Close_fnRecorder) Seq() *MoqClient_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqClient_starGenType_Close_fnRecorder) NoSeq() *MoqClient_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqClient_starGenType_Close_fnRecorder) ReturnResults(result1 error) *MoqClient_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Close_doFn
		DoReturnFn MoqClient_starGenType_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqClient_starGenType_Close_fnRecorder) AndDo(fn MoqClient_starGenType_Close_doFn) *MoqClient_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqClient_starGenType_Close_fnRecorder) DoReturnResults(fn MoqClient_starGenType_Close_doReturnFn) *MoqClient_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Close_doFn
		DoReturnFn MoqClient_starGenType_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqClient_starGenType_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqClient_starGenType_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqClient_starGenType_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqClient_starGenType_Close_paramsKey]*MoqClient_starGenType_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqClient_starGenType_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqClient_starGenType_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqClient_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqClient_starGenType_Close_doFn
				DoReturnFn MoqClient_starGenType_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqClient_starGenType) PrettyParams_Close(params MoqClient_starGenType_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqClient_starGenType) ParamsKey_Close(params MoqClient_starGenType_Close_params, anyParams uint64) MoqClient_starGenType_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqClient_starGenType_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqClient_starGenType_recorder) Go(serviceMethod string, args interface{}, reply interface{}, done chan *rpc.Call) *MoqClient_starGenType_Go_fnRecorder {
	return &MoqClient_starGenType_Go_fnRecorder{
		Params: MoqClient_starGenType_Go_params{
			ServiceMethod: serviceMethod,
			Args:          args,
			Reply:         reply,
			Done:          done,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqClient_starGenType_Go_fnRecorder) Any() *MoqClient_starGenType_Go_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Go(r.Params))
		return nil
	}
	return &MoqClient_starGenType_Go_anyParams{Recorder: r}
}

func (a *MoqClient_starGenType_Go_anyParams) ServiceMethod() *MoqClient_starGenType_Go_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqClient_starGenType_Go_anyParams) Args() *MoqClient_starGenType_Go_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqClient_starGenType_Go_anyParams) Reply() *MoqClient_starGenType_Go_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (a *MoqClient_starGenType_Go_anyParams) Done() *MoqClient_starGenType_Go_fnRecorder {
	a.Recorder.AnyParams |= 1 << 3
	return a.Recorder
}

func (r *MoqClient_starGenType_Go_fnRecorder) Seq() *MoqClient_starGenType_Go_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Go(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqClient_starGenType_Go_fnRecorder) NoSeq() *MoqClient_starGenType_Go_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Go(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqClient_starGenType_Go_fnRecorder) ReturnResults(result1 *rpc.Call) *MoqClient_starGenType_Go_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *rpc.Call
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Go_doFn
		DoReturnFn MoqClient_starGenType_Go_doReturnFn
	}{
		Values: &struct {
			Result1 *rpc.Call
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqClient_starGenType_Go_fnRecorder) AndDo(fn MoqClient_starGenType_Go_doFn) *MoqClient_starGenType_Go_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqClient_starGenType_Go_fnRecorder) DoReturnResults(fn MoqClient_starGenType_Go_doReturnFn) *MoqClient_starGenType_Go_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *rpc.Call
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Go_doFn
		DoReturnFn MoqClient_starGenType_Go_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqClient_starGenType_Go_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqClient_starGenType_Go_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Go {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqClient_starGenType_Go_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqClient_starGenType_Go_paramsKey]*MoqClient_starGenType_Go_results{},
		}
		r.Moq.ResultsByParams_Go = append(r.Moq.ResultsByParams_Go, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Go) {
			copy(r.Moq.ResultsByParams_Go[insertAt+1:], r.Moq.ResultsByParams_Go[insertAt:0])
			r.Moq.ResultsByParams_Go[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Go(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqClient_starGenType_Go_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqClient_starGenType_Go_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqClient_starGenType_Go_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *rpc.Call
				}
				Sequence   uint32
				DoFn       MoqClient_starGenType_Go_doFn
				DoReturnFn MoqClient_starGenType_Go_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqClient_starGenType) PrettyParams_Go(params MoqClient_starGenType_Go_params) string {
	return fmt.Sprintf("Go(%#v, %#v, %#v, %#v)", params.ServiceMethod, params.Args, params.Reply, params.Done)
}

func (m *MoqClient_starGenType) ParamsKey_Go(params MoqClient_starGenType_Go_params, anyParams uint64) MoqClient_starGenType_Go_paramsKey {
	m.Scene.T.Helper()
	var serviceMethodUsed string
	var serviceMethodUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Go.ServiceMethod == moq.ParamIndexByValue {
			serviceMethodUsed = params.ServiceMethod
		} else {
			serviceMethodUsedHash = hash.DeepHash(params.ServiceMethod)
		}
	}
	var argsUsed interface{}
	var argsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Go.Args == moq.ParamIndexByValue {
			argsUsed = params.Args
		} else {
			argsUsedHash = hash.DeepHash(params.Args)
		}
	}
	var replyUsed interface{}
	var replyUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Go.Reply == moq.ParamIndexByValue {
			replyUsed = params.Reply
		} else {
			replyUsedHash = hash.DeepHash(params.Reply)
		}
	}
	var doneUsed chan *rpc.Call
	var doneUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.Runtime.ParameterIndexing.Go.Done == moq.ParamIndexByValue {
			doneUsed = params.Done
		} else {
			doneUsedHash = hash.DeepHash(params.Done)
		}
	}
	return MoqClient_starGenType_Go_paramsKey{
		Params: struct {
			ServiceMethod string
			Args          interface{}
			Reply         interface{}
			Done          chan *rpc.Call
		}{
			ServiceMethod: serviceMethodUsed,
			Args:          argsUsed,
			Reply:         replyUsed,
			Done:          doneUsed,
		},
		Hashes: struct {
			ServiceMethod hash.Hash
			Args          hash.Hash
			Reply         hash.Hash
			Done          hash.Hash
		}{
			ServiceMethod: serviceMethodUsedHash,
			Args:          argsUsedHash,
			Reply:         replyUsedHash,
			Done:          doneUsedHash,
		},
	}
}

func (m *MoqClient_starGenType_recorder) Call(serviceMethod string, args interface{}, reply interface{}) *MoqClient_starGenType_Call_fnRecorder {
	return &MoqClient_starGenType_Call_fnRecorder{
		Params: MoqClient_starGenType_Call_params{
			ServiceMethod: serviceMethod,
			Args:          args,
			Reply:         reply,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqClient_starGenType_Call_fnRecorder) Any() *MoqClient_starGenType_Call_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Call(r.Params))
		return nil
	}
	return &MoqClient_starGenType_Call_anyParams{Recorder: r}
}

func (a *MoqClient_starGenType_Call_anyParams) ServiceMethod() *MoqClient_starGenType_Call_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqClient_starGenType_Call_anyParams) Args() *MoqClient_starGenType_Call_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqClient_starGenType_Call_anyParams) Reply() *MoqClient_starGenType_Call_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqClient_starGenType_Call_fnRecorder) Seq() *MoqClient_starGenType_Call_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Call(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqClient_starGenType_Call_fnRecorder) NoSeq() *MoqClient_starGenType_Call_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Call(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqClient_starGenType_Call_fnRecorder) ReturnResults(result1 error) *MoqClient_starGenType_Call_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Call_doFn
		DoReturnFn MoqClient_starGenType_Call_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqClient_starGenType_Call_fnRecorder) AndDo(fn MoqClient_starGenType_Call_doFn) *MoqClient_starGenType_Call_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqClient_starGenType_Call_fnRecorder) DoReturnResults(fn MoqClient_starGenType_Call_doReturnFn) *MoqClient_starGenType_Call_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Call_doFn
		DoReturnFn MoqClient_starGenType_Call_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqClient_starGenType_Call_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqClient_starGenType_Call_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Call {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqClient_starGenType_Call_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqClient_starGenType_Call_paramsKey]*MoqClient_starGenType_Call_results{},
		}
		r.Moq.ResultsByParams_Call = append(r.Moq.ResultsByParams_Call, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Call) {
			copy(r.Moq.ResultsByParams_Call[insertAt+1:], r.Moq.ResultsByParams_Call[insertAt:0])
			r.Moq.ResultsByParams_Call[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Call(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqClient_starGenType_Call_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqClient_starGenType_Call_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqClient_starGenType_Call_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqClient_starGenType_Call_doFn
				DoReturnFn MoqClient_starGenType_Call_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqClient_starGenType) PrettyParams_Call(params MoqClient_starGenType_Call_params) string {
	return fmt.Sprintf("Call(%#v, %#v, %#v)", params.ServiceMethod, params.Args, params.Reply)
}

func (m *MoqClient_starGenType) ParamsKey_Call(params MoqClient_starGenType_Call_params, anyParams uint64) MoqClient_starGenType_Call_paramsKey {
	m.Scene.T.Helper()
	var serviceMethodUsed string
	var serviceMethodUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Call.ServiceMethod == moq.ParamIndexByValue {
			serviceMethodUsed = params.ServiceMethod
		} else {
			serviceMethodUsedHash = hash.DeepHash(params.ServiceMethod)
		}
	}
	var argsUsed interface{}
	var argsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Call.Args == moq.ParamIndexByValue {
			argsUsed = params.Args
		} else {
			argsUsedHash = hash.DeepHash(params.Args)
		}
	}
	var replyUsed interface{}
	var replyUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Call.Reply == moq.ParamIndexByValue {
			replyUsed = params.Reply
		} else {
			replyUsedHash = hash.DeepHash(params.Reply)
		}
	}
	return MoqClient_starGenType_Call_paramsKey{
		Params: struct {
			ServiceMethod string
			Args          interface{}
			Reply         interface{}
		}{
			ServiceMethod: serviceMethodUsed,
			Args:          argsUsed,
			Reply:         replyUsed,
		},
		Hashes: struct {
			ServiceMethod hash.Hash
			Args          hash.Hash
			Reply         hash.Hash
		}{
			ServiceMethod: serviceMethodUsedHash,
			Args:          argsUsedHash,
			Reply:         replyUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqClient_starGenType) Reset() {
	m.ResultsByParams_Close = nil
	m.ResultsByParams_Go = nil
	m.ResultsByParams_Call = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqClient_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Go {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Go(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Call {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Call(results.Params))
			}
		}
	}
}
