// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package rpc

import (
	"fmt"
	"math/bits"
	"net/rpc"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that rpc.ServerCodec is mocked
// completely
var _ rpc.ServerCodec = (*MoqServerCodec_mock)(nil)

// MoqServerCodec holds the state of a moq of the ServerCodec type
type MoqServerCodec struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqServerCodec_mock

	ResultsByParams_ReadRequestHeader []MoqServerCodec_ReadRequestHeader_resultsByParams
	ResultsByParams_ReadRequestBody   []MoqServerCodec_ReadRequestBody_resultsByParams
	ResultsByParams_WriteResponse     []MoqServerCodec_WriteResponse_resultsByParams
	ResultsByParams_Close             []MoqServerCodec_Close_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			ReadRequestHeader struct {
				Param1 moq.ParamIndexing
			}
			ReadRequestBody struct {
				Param1 moq.ParamIndexing
			}
			WriteResponse struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}
			Close struct{}
		}
	}
}

// MoqServerCodec_mock isolates the mock interface of the ServerCodec type
type MoqServerCodec_mock struct {
	Moq *MoqServerCodec
}

// MoqServerCodec_recorder isolates the recorder interface of the ServerCodec
// type
type MoqServerCodec_recorder struct {
	Moq *MoqServerCodec
}

// MoqServerCodec_ReadRequestHeader_params holds the params of the ServerCodec
// type
type MoqServerCodec_ReadRequestHeader_params struct{ Param1 *rpc.Request }

// MoqServerCodec_ReadRequestHeader_paramsKey holds the map key params of the
// ServerCodec type
type MoqServerCodec_ReadRequestHeader_paramsKey struct {
	Params struct{ Param1 *rpc.Request }
	Hashes struct{ Param1 hash.Hash }
}

// MoqServerCodec_ReadRequestHeader_resultsByParams contains the results for a
// given set of parameters for the ServerCodec type
type MoqServerCodec_ReadRequestHeader_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServerCodec_ReadRequestHeader_paramsKey]*MoqServerCodec_ReadRequestHeader_results
}

// MoqServerCodec_ReadRequestHeader_doFn defines the type of function needed
// when calling AndDo for the ServerCodec type
type MoqServerCodec_ReadRequestHeader_doFn func(*rpc.Request)

// MoqServerCodec_ReadRequestHeader_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ServerCodec type
type MoqServerCodec_ReadRequestHeader_doReturnFn func(*rpc.Request) error

// MoqServerCodec_ReadRequestHeader_results holds the results of the
// ServerCodec type
type MoqServerCodec_ReadRequestHeader_results struct {
	Params  MoqServerCodec_ReadRequestHeader_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServerCodec_ReadRequestHeader_doFn
		DoReturnFn MoqServerCodec_ReadRequestHeader_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServerCodec_ReadRequestHeader_fnRecorder routes recorded function calls
// to the MoqServerCodec moq
type MoqServerCodec_ReadRequestHeader_fnRecorder struct {
	Params    MoqServerCodec_ReadRequestHeader_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServerCodec_ReadRequestHeader_results
	Moq       *MoqServerCodec
}

// MoqServerCodec_ReadRequestHeader_anyParams isolates the any params functions
// of the ServerCodec type
type MoqServerCodec_ReadRequestHeader_anyParams struct {
	Recorder *MoqServerCodec_ReadRequestHeader_fnRecorder
}

// MoqServerCodec_ReadRequestBody_params holds the params of the ServerCodec
// type
type MoqServerCodec_ReadRequestBody_params struct{ Param1 interface{} }

// MoqServerCodec_ReadRequestBody_paramsKey holds the map key params of the
// ServerCodec type
type MoqServerCodec_ReadRequestBody_paramsKey struct {
	Params struct{ Param1 interface{} }
	Hashes struct{ Param1 hash.Hash }
}

// MoqServerCodec_ReadRequestBody_resultsByParams contains the results for a
// given set of parameters for the ServerCodec type
type MoqServerCodec_ReadRequestBody_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServerCodec_ReadRequestBody_paramsKey]*MoqServerCodec_ReadRequestBody_results
}

// MoqServerCodec_ReadRequestBody_doFn defines the type of function needed when
// calling AndDo for the ServerCodec type
type MoqServerCodec_ReadRequestBody_doFn func(interface{})

// MoqServerCodec_ReadRequestBody_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ServerCodec type
type MoqServerCodec_ReadRequestBody_doReturnFn func(interface{}) error

// MoqServerCodec_ReadRequestBody_results holds the results of the ServerCodec
// type
type MoqServerCodec_ReadRequestBody_results struct {
	Params  MoqServerCodec_ReadRequestBody_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServerCodec_ReadRequestBody_doFn
		DoReturnFn MoqServerCodec_ReadRequestBody_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServerCodec_ReadRequestBody_fnRecorder routes recorded function calls to
// the MoqServerCodec moq
type MoqServerCodec_ReadRequestBody_fnRecorder struct {
	Params    MoqServerCodec_ReadRequestBody_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServerCodec_ReadRequestBody_results
	Moq       *MoqServerCodec
}

// MoqServerCodec_ReadRequestBody_anyParams isolates the any params functions
// of the ServerCodec type
type MoqServerCodec_ReadRequestBody_anyParams struct {
	Recorder *MoqServerCodec_ReadRequestBody_fnRecorder
}

// MoqServerCodec_WriteResponse_params holds the params of the ServerCodec type
type MoqServerCodec_WriteResponse_params struct {
	Param1 *rpc.Response
	Param2 interface{}
}

// MoqServerCodec_WriteResponse_paramsKey holds the map key params of the
// ServerCodec type
type MoqServerCodec_WriteResponse_paramsKey struct {
	Params struct {
		Param1 *rpc.Response
		Param2 interface{}
	}
	Hashes struct {
		Param1 hash.Hash
		Param2 hash.Hash
	}
}

// MoqServerCodec_WriteResponse_resultsByParams contains the results for a
// given set of parameters for the ServerCodec type
type MoqServerCodec_WriteResponse_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServerCodec_WriteResponse_paramsKey]*MoqServerCodec_WriteResponse_results
}

// MoqServerCodec_WriteResponse_doFn defines the type of function needed when
// calling AndDo for the ServerCodec type
type MoqServerCodec_WriteResponse_doFn func(*rpc.Response, interface{})

// MoqServerCodec_WriteResponse_doReturnFn defines the type of function needed
// when calling DoReturnResults for the ServerCodec type
type MoqServerCodec_WriteResponse_doReturnFn func(*rpc.Response, interface{}) error

// MoqServerCodec_WriteResponse_results holds the results of the ServerCodec
// type
type MoqServerCodec_WriteResponse_results struct {
	Params  MoqServerCodec_WriteResponse_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServerCodec_WriteResponse_doFn
		DoReturnFn MoqServerCodec_WriteResponse_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServerCodec_WriteResponse_fnRecorder routes recorded function calls to
// the MoqServerCodec moq
type MoqServerCodec_WriteResponse_fnRecorder struct {
	Params    MoqServerCodec_WriteResponse_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServerCodec_WriteResponse_results
	Moq       *MoqServerCodec
}

// MoqServerCodec_WriteResponse_anyParams isolates the any params functions of
// the ServerCodec type
type MoqServerCodec_WriteResponse_anyParams struct {
	Recorder *MoqServerCodec_WriteResponse_fnRecorder
}

// MoqServerCodec_Close_params holds the params of the ServerCodec type
type MoqServerCodec_Close_params struct{}

// MoqServerCodec_Close_paramsKey holds the map key params of the ServerCodec
// type
type MoqServerCodec_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqServerCodec_Close_resultsByParams contains the results for a given set of
// parameters for the ServerCodec type
type MoqServerCodec_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServerCodec_Close_paramsKey]*MoqServerCodec_Close_results
}

// MoqServerCodec_Close_doFn defines the type of function needed when calling
// AndDo for the ServerCodec type
type MoqServerCodec_Close_doFn func()

// MoqServerCodec_Close_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ServerCodec type
type MoqServerCodec_Close_doReturnFn func() error

// MoqServerCodec_Close_results holds the results of the ServerCodec type
type MoqServerCodec_Close_results struct {
	Params  MoqServerCodec_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServerCodec_Close_doFn
		DoReturnFn MoqServerCodec_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServerCodec_Close_fnRecorder routes recorded function calls to the
// MoqServerCodec moq
type MoqServerCodec_Close_fnRecorder struct {
	Params    MoqServerCodec_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServerCodec_Close_results
	Moq       *MoqServerCodec
}

// MoqServerCodec_Close_anyParams isolates the any params functions of the
// ServerCodec type
type MoqServerCodec_Close_anyParams struct {
	Recorder *MoqServerCodec_Close_fnRecorder
}

// NewMoqServerCodec creates a new moq of the ServerCodec type
func NewMoqServerCodec(scene *moq.Scene, config *moq.Config) *MoqServerCodec {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqServerCodec{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqServerCodec_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				ReadRequestHeader struct {
					Param1 moq.ParamIndexing
				}
				ReadRequestBody struct {
					Param1 moq.ParamIndexing
				}
				WriteResponse struct {
					Param1 moq.ParamIndexing
					Param2 moq.ParamIndexing
				}
				Close struct{}
			}
		}{ParameterIndexing: struct {
			ReadRequestHeader struct {
				Param1 moq.ParamIndexing
			}
			ReadRequestBody struct {
				Param1 moq.ParamIndexing
			}
			WriteResponse struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}
			Close struct{}
		}{
			ReadRequestHeader: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
			},
			ReadRequestBody: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
			},
			WriteResponse: struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
				Param2: moq.ParamIndexByHash,
			},
			Close: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the ServerCodec type
func (m *MoqServerCodec) Mock() *MoqServerCodec_mock { return m.Moq }

func (m *MoqServerCodec_mock) ReadRequestHeader(param1 *rpc.Request) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqServerCodec_ReadRequestHeader_params{
		Param1: param1,
	}
	var results *MoqServerCodec_ReadRequestHeader_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadRequestHeader {
		paramsKey := m.Moq.ParamsKey_ReadRequestHeader(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadRequestHeader(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadRequestHeader(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadRequestHeader(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqServerCodec_mock) ReadRequestBody(param1 interface{}) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqServerCodec_ReadRequestBody_params{
		Param1: param1,
	}
	var results *MoqServerCodec_ReadRequestBody_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadRequestBody {
		paramsKey := m.Moq.ParamsKey_ReadRequestBody(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadRequestBody(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadRequestBody(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadRequestBody(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqServerCodec_mock) WriteResponse(param1 *rpc.Response, param2 interface{}) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqServerCodec_WriteResponse_params{
		Param1: param1,
		Param2: param2,
	}
	var results *MoqServerCodec_WriteResponse_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteResponse {
		paramsKey := m.Moq.ParamsKey_WriteResponse(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteResponse(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteResponse(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteResponse(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1, param2)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1, param2)
	}
	return
}

func (m *MoqServerCodec_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqServerCodec_Close_params{}
	var results *MoqServerCodec_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the ServerCodec type
func (m *MoqServerCodec) OnCall() *MoqServerCodec_recorder {
	return &MoqServerCodec_recorder{
		Moq: m,
	}
}

func (m *MoqServerCodec_recorder) ReadRequestHeader(param1 *rpc.Request) *MoqServerCodec_ReadRequestHeader_fnRecorder {
	return &MoqServerCodec_ReadRequestHeader_fnRecorder{
		Params: MoqServerCodec_ReadRequestHeader_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServerCodec_ReadRequestHeader_fnRecorder) Any() *MoqServerCodec_ReadRequestHeader_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadRequestHeader(r.Params))
		return nil
	}
	return &MoqServerCodec_ReadRequestHeader_anyParams{Recorder: r}
}

func (a *MoqServerCodec_ReadRequestHeader_anyParams) Param1() *MoqServerCodec_ReadRequestHeader_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqServerCodec_ReadRequestHeader_fnRecorder) Seq() *MoqServerCodec_ReadRequestHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadRequestHeader(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServerCodec_ReadRequestHeader_fnRecorder) NoSeq() *MoqServerCodec_ReadRequestHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadRequestHeader(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServerCodec_ReadRequestHeader_fnRecorder) ReturnResults(result1 error) *MoqServerCodec_ReadRequestHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServerCodec_ReadRequestHeader_doFn
		DoReturnFn MoqServerCodec_ReadRequestHeader_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServerCodec_ReadRequestHeader_fnRecorder) AndDo(fn MoqServerCodec_ReadRequestHeader_doFn) *MoqServerCodec_ReadRequestHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServerCodec_ReadRequestHeader_fnRecorder) DoReturnResults(fn MoqServerCodec_ReadRequestHeader_doReturnFn) *MoqServerCodec_ReadRequestHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServerCodec_ReadRequestHeader_doFn
		DoReturnFn MoqServerCodec_ReadRequestHeader_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServerCodec_ReadRequestHeader_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServerCodec_ReadRequestHeader_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadRequestHeader {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServerCodec_ReadRequestHeader_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServerCodec_ReadRequestHeader_paramsKey]*MoqServerCodec_ReadRequestHeader_results{},
		}
		r.Moq.ResultsByParams_ReadRequestHeader = append(r.Moq.ResultsByParams_ReadRequestHeader, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadRequestHeader) {
			copy(r.Moq.ResultsByParams_ReadRequestHeader[insertAt+1:], r.Moq.ResultsByParams_ReadRequestHeader[insertAt:0])
			r.Moq.ResultsByParams_ReadRequestHeader[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadRequestHeader(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServerCodec_ReadRequestHeader_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServerCodec_ReadRequestHeader_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServerCodec_ReadRequestHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqServerCodec_ReadRequestHeader_doFn
				DoReturnFn MoqServerCodec_ReadRequestHeader_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServerCodec) PrettyParams_ReadRequestHeader(params MoqServerCodec_ReadRequestHeader_params) string {
	return fmt.Sprintf("ReadRequestHeader(%#v)", params.Param1)
}

func (m *MoqServerCodec) ParamsKey_ReadRequestHeader(params MoqServerCodec_ReadRequestHeader_params, anyParams uint64) MoqServerCodec_ReadRequestHeader_paramsKey {
	m.Scene.T.Helper()
	var param1Used *rpc.Request
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadRequestHeader.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqServerCodec_ReadRequestHeader_paramsKey{
		Params: struct{ Param1 *rpc.Request }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqServerCodec_recorder) ReadRequestBody(param1 interface{}) *MoqServerCodec_ReadRequestBody_fnRecorder {
	return &MoqServerCodec_ReadRequestBody_fnRecorder{
		Params: MoqServerCodec_ReadRequestBody_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServerCodec_ReadRequestBody_fnRecorder) Any() *MoqServerCodec_ReadRequestBody_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadRequestBody(r.Params))
		return nil
	}
	return &MoqServerCodec_ReadRequestBody_anyParams{Recorder: r}
}

func (a *MoqServerCodec_ReadRequestBody_anyParams) Param1() *MoqServerCodec_ReadRequestBody_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqServerCodec_ReadRequestBody_fnRecorder) Seq() *MoqServerCodec_ReadRequestBody_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadRequestBody(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServerCodec_ReadRequestBody_fnRecorder) NoSeq() *MoqServerCodec_ReadRequestBody_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadRequestBody(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServerCodec_ReadRequestBody_fnRecorder) ReturnResults(result1 error) *MoqServerCodec_ReadRequestBody_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServerCodec_ReadRequestBody_doFn
		DoReturnFn MoqServerCodec_ReadRequestBody_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServerCodec_ReadRequestBody_fnRecorder) AndDo(fn MoqServerCodec_ReadRequestBody_doFn) *MoqServerCodec_ReadRequestBody_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServerCodec_ReadRequestBody_fnRecorder) DoReturnResults(fn MoqServerCodec_ReadRequestBody_doReturnFn) *MoqServerCodec_ReadRequestBody_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServerCodec_ReadRequestBody_doFn
		DoReturnFn MoqServerCodec_ReadRequestBody_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServerCodec_ReadRequestBody_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServerCodec_ReadRequestBody_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadRequestBody {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServerCodec_ReadRequestBody_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServerCodec_ReadRequestBody_paramsKey]*MoqServerCodec_ReadRequestBody_results{},
		}
		r.Moq.ResultsByParams_ReadRequestBody = append(r.Moq.ResultsByParams_ReadRequestBody, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadRequestBody) {
			copy(r.Moq.ResultsByParams_ReadRequestBody[insertAt+1:], r.Moq.ResultsByParams_ReadRequestBody[insertAt:0])
			r.Moq.ResultsByParams_ReadRequestBody[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadRequestBody(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServerCodec_ReadRequestBody_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServerCodec_ReadRequestBody_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServerCodec_ReadRequestBody_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqServerCodec_ReadRequestBody_doFn
				DoReturnFn MoqServerCodec_ReadRequestBody_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServerCodec) PrettyParams_ReadRequestBody(params MoqServerCodec_ReadRequestBody_params) string {
	return fmt.Sprintf("ReadRequestBody(%#v)", params.Param1)
}

func (m *MoqServerCodec) ParamsKey_ReadRequestBody(params MoqServerCodec_ReadRequestBody_params, anyParams uint64) MoqServerCodec_ReadRequestBody_paramsKey {
	m.Scene.T.Helper()
	var param1Used interface{}
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadRequestBody.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqServerCodec_ReadRequestBody_paramsKey{
		Params: struct{ Param1 interface{} }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqServerCodec_recorder) WriteResponse(param1 *rpc.Response, param2 interface{}) *MoqServerCodec_WriteResponse_fnRecorder {
	return &MoqServerCodec_WriteResponse_fnRecorder{
		Params: MoqServerCodec_WriteResponse_params{
			Param1: param1,
			Param2: param2,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServerCodec_WriteResponse_fnRecorder) Any() *MoqServerCodec_WriteResponse_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteResponse(r.Params))
		return nil
	}
	return &MoqServerCodec_WriteResponse_anyParams{Recorder: r}
}

func (a *MoqServerCodec_WriteResponse_anyParams) Param1() *MoqServerCodec_WriteResponse_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqServerCodec_WriteResponse_anyParams) Param2() *MoqServerCodec_WriteResponse_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqServerCodec_WriteResponse_fnRecorder) Seq() *MoqServerCodec_WriteResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteResponse(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServerCodec_WriteResponse_fnRecorder) NoSeq() *MoqServerCodec_WriteResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteResponse(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServerCodec_WriteResponse_fnRecorder) ReturnResults(result1 error) *MoqServerCodec_WriteResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServerCodec_WriteResponse_doFn
		DoReturnFn MoqServerCodec_WriteResponse_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServerCodec_WriteResponse_fnRecorder) AndDo(fn MoqServerCodec_WriteResponse_doFn) *MoqServerCodec_WriteResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServerCodec_WriteResponse_fnRecorder) DoReturnResults(fn MoqServerCodec_WriteResponse_doReturnFn) *MoqServerCodec_WriteResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServerCodec_WriteResponse_doFn
		DoReturnFn MoqServerCodec_WriteResponse_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServerCodec_WriteResponse_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServerCodec_WriteResponse_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteResponse {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServerCodec_WriteResponse_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServerCodec_WriteResponse_paramsKey]*MoqServerCodec_WriteResponse_results{},
		}
		r.Moq.ResultsByParams_WriteResponse = append(r.Moq.ResultsByParams_WriteResponse, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteResponse) {
			copy(r.Moq.ResultsByParams_WriteResponse[insertAt+1:], r.Moq.ResultsByParams_WriteResponse[insertAt:0])
			r.Moq.ResultsByParams_WriteResponse[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteResponse(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServerCodec_WriteResponse_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServerCodec_WriteResponse_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServerCodec_WriteResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqServerCodec_WriteResponse_doFn
				DoReturnFn MoqServerCodec_WriteResponse_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServerCodec) PrettyParams_WriteResponse(params MoqServerCodec_WriteResponse_params) string {
	return fmt.Sprintf("WriteResponse(%#v, %#v)", params.Param1, params.Param2)
}

func (m *MoqServerCodec) ParamsKey_WriteResponse(params MoqServerCodec_WriteResponse_params, anyParams uint64) MoqServerCodec_WriteResponse_paramsKey {
	m.Scene.T.Helper()
	var param1Used *rpc.Response
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteResponse.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	var param2Used interface{}
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.WriteResponse.Param2 == moq.ParamIndexByValue {
			param2Used = params.Param2
		} else {
			param2UsedHash = hash.DeepHash(params.Param2)
		}
	}
	return MoqServerCodec_WriteResponse_paramsKey{
		Params: struct {
			Param1 *rpc.Response
			Param2 interface{}
		}{
			Param1: param1Used,
			Param2: param2Used,
		},
		Hashes: struct {
			Param1 hash.Hash
			Param2 hash.Hash
		}{
			Param1: param1UsedHash,
			Param2: param2UsedHash,
		},
	}
}

func (m *MoqServerCodec_recorder) Close() *MoqServerCodec_Close_fnRecorder {
	return &MoqServerCodec_Close_fnRecorder{
		Params:   MoqServerCodec_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServerCodec_Close_fnRecorder) Any() *MoqServerCodec_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqServerCodec_Close_anyParams{Recorder: r}
}

func (r *MoqServerCodec_Close_fnRecorder) Seq() *MoqServerCodec_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServerCodec_Close_fnRecorder) NoSeq() *MoqServerCodec_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServerCodec_Close_fnRecorder) ReturnResults(result1 error) *MoqServerCodec_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServerCodec_Close_doFn
		DoReturnFn MoqServerCodec_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServerCodec_Close_fnRecorder) AndDo(fn MoqServerCodec_Close_doFn) *MoqServerCodec_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServerCodec_Close_fnRecorder) DoReturnResults(fn MoqServerCodec_Close_doReturnFn) *MoqServerCodec_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServerCodec_Close_doFn
		DoReturnFn MoqServerCodec_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServerCodec_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServerCodec_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServerCodec_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServerCodec_Close_paramsKey]*MoqServerCodec_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServerCodec_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServerCodec_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServerCodec_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqServerCodec_Close_doFn
				DoReturnFn MoqServerCodec_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServerCodec) PrettyParams_Close(params MoqServerCodec_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqServerCodec) ParamsKey_Close(params MoqServerCodec_Close_params, anyParams uint64) MoqServerCodec_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqServerCodec_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqServerCodec) Reset() {
	m.ResultsByParams_ReadRequestHeader = nil
	m.ResultsByParams_ReadRequestBody = nil
	m.ResultsByParams_WriteResponse = nil
	m.ResultsByParams_Close = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqServerCodec) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_ReadRequestHeader {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadRequestHeader(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadRequestBody {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadRequestBody(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteResponse {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteResponse(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
}
