// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package rpc

import (
	"fmt"
	"math/bits"
	"net/rpc"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that rpc.ClientCodec is mocked
// completely
var _ rpc.ClientCodec = (*MoqClientCodec_mock)(nil)

// MoqClientCodec holds the state of a moq of the ClientCodec type
type MoqClientCodec struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqClientCodec_mock

	ResultsByParams_WriteRequest       []MoqClientCodec_WriteRequest_resultsByParams
	ResultsByParams_ReadResponseHeader []MoqClientCodec_ReadResponseHeader_resultsByParams
	ResultsByParams_ReadResponseBody   []MoqClientCodec_ReadResponseBody_resultsByParams
	ResultsByParams_Close              []MoqClientCodec_Close_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			WriteRequest struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}
			ReadResponseHeader struct {
				Param1 moq.ParamIndexing
			}
			ReadResponseBody struct {
				Param1 moq.ParamIndexing
			}
			Close struct{}
		}
	}
}

// MoqClientCodec_mock isolates the mock interface of the ClientCodec type
type MoqClientCodec_mock struct {
	Moq *MoqClientCodec
}

// MoqClientCodec_recorder isolates the recorder interface of the ClientCodec
// type
type MoqClientCodec_recorder struct {
	Moq *MoqClientCodec
}

// MoqClientCodec_WriteRequest_params holds the params of the ClientCodec type
type MoqClientCodec_WriteRequest_params struct {
	Param1 *rpc.Request
	Param2 any
}

// MoqClientCodec_WriteRequest_paramsKey holds the map key params of the
// ClientCodec type
type MoqClientCodec_WriteRequest_paramsKey struct {
	Params struct {
		Param1 *rpc.Request
		Param2 any
	}
	Hashes struct {
		Param1 hash.Hash
		Param2 hash.Hash
	}
}

// MoqClientCodec_WriteRequest_resultsByParams contains the results for a given
// set of parameters for the ClientCodec type
type MoqClientCodec_WriteRequest_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqClientCodec_WriteRequest_paramsKey]*MoqClientCodec_WriteRequest_results
}

// MoqClientCodec_WriteRequest_doFn defines the type of function needed when
// calling AndDo for the ClientCodec type
type MoqClientCodec_WriteRequest_doFn func(*rpc.Request, any)

// MoqClientCodec_WriteRequest_doReturnFn defines the type of function needed
// when calling DoReturnResults for the ClientCodec type
type MoqClientCodec_WriteRequest_doReturnFn func(*rpc.Request, any) error

// MoqClientCodec_WriteRequest_results holds the results of the ClientCodec
// type
type MoqClientCodec_WriteRequest_results struct {
	Params  MoqClientCodec_WriteRequest_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqClientCodec_WriteRequest_doFn
		DoReturnFn MoqClientCodec_WriteRequest_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqClientCodec_WriteRequest_fnRecorder routes recorded function calls to the
// MoqClientCodec moq
type MoqClientCodec_WriteRequest_fnRecorder struct {
	Params    MoqClientCodec_WriteRequest_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqClientCodec_WriteRequest_results
	Moq       *MoqClientCodec
}

// MoqClientCodec_WriteRequest_anyParams isolates the any params functions of
// the ClientCodec type
type MoqClientCodec_WriteRequest_anyParams struct {
	Recorder *MoqClientCodec_WriteRequest_fnRecorder
}

// MoqClientCodec_ReadResponseHeader_params holds the params of the ClientCodec
// type
type MoqClientCodec_ReadResponseHeader_params struct{ Param1 *rpc.Response }

// MoqClientCodec_ReadResponseHeader_paramsKey holds the map key params of the
// ClientCodec type
type MoqClientCodec_ReadResponseHeader_paramsKey struct {
	Params struct{ Param1 *rpc.Response }
	Hashes struct{ Param1 hash.Hash }
}

// MoqClientCodec_ReadResponseHeader_resultsByParams contains the results for a
// given set of parameters for the ClientCodec type
type MoqClientCodec_ReadResponseHeader_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqClientCodec_ReadResponseHeader_paramsKey]*MoqClientCodec_ReadResponseHeader_results
}

// MoqClientCodec_ReadResponseHeader_doFn defines the type of function needed
// when calling AndDo for the ClientCodec type
type MoqClientCodec_ReadResponseHeader_doFn func(*rpc.Response)

// MoqClientCodec_ReadResponseHeader_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ClientCodec type
type MoqClientCodec_ReadResponseHeader_doReturnFn func(*rpc.Response) error

// MoqClientCodec_ReadResponseHeader_results holds the results of the
// ClientCodec type
type MoqClientCodec_ReadResponseHeader_results struct {
	Params  MoqClientCodec_ReadResponseHeader_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqClientCodec_ReadResponseHeader_doFn
		DoReturnFn MoqClientCodec_ReadResponseHeader_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqClientCodec_ReadResponseHeader_fnRecorder routes recorded function calls
// to the MoqClientCodec moq
type MoqClientCodec_ReadResponseHeader_fnRecorder struct {
	Params    MoqClientCodec_ReadResponseHeader_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqClientCodec_ReadResponseHeader_results
	Moq       *MoqClientCodec
}

// MoqClientCodec_ReadResponseHeader_anyParams isolates the any params
// functions of the ClientCodec type
type MoqClientCodec_ReadResponseHeader_anyParams struct {
	Recorder *MoqClientCodec_ReadResponseHeader_fnRecorder
}

// MoqClientCodec_ReadResponseBody_params holds the params of the ClientCodec
// type
type MoqClientCodec_ReadResponseBody_params struct{ Param1 any }

// MoqClientCodec_ReadResponseBody_paramsKey holds the map key params of the
// ClientCodec type
type MoqClientCodec_ReadResponseBody_paramsKey struct {
	Params struct{ Param1 any }
	Hashes struct{ Param1 hash.Hash }
}

// MoqClientCodec_ReadResponseBody_resultsByParams contains the results for a
// given set of parameters for the ClientCodec type
type MoqClientCodec_ReadResponseBody_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqClientCodec_ReadResponseBody_paramsKey]*MoqClientCodec_ReadResponseBody_results
}

// MoqClientCodec_ReadResponseBody_doFn defines the type of function needed
// when calling AndDo for the ClientCodec type
type MoqClientCodec_ReadResponseBody_doFn func(any)

// MoqClientCodec_ReadResponseBody_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ClientCodec type
type MoqClientCodec_ReadResponseBody_doReturnFn func(any) error

// MoqClientCodec_ReadResponseBody_results holds the results of the ClientCodec
// type
type MoqClientCodec_ReadResponseBody_results struct {
	Params  MoqClientCodec_ReadResponseBody_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqClientCodec_ReadResponseBody_doFn
		DoReturnFn MoqClientCodec_ReadResponseBody_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqClientCodec_ReadResponseBody_fnRecorder routes recorded function calls to
// the MoqClientCodec moq
type MoqClientCodec_ReadResponseBody_fnRecorder struct {
	Params    MoqClientCodec_ReadResponseBody_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqClientCodec_ReadResponseBody_results
	Moq       *MoqClientCodec
}

// MoqClientCodec_ReadResponseBody_anyParams isolates the any params functions
// of the ClientCodec type
type MoqClientCodec_ReadResponseBody_anyParams struct {
	Recorder *MoqClientCodec_ReadResponseBody_fnRecorder
}

// MoqClientCodec_Close_params holds the params of the ClientCodec type
type MoqClientCodec_Close_params struct{}

// MoqClientCodec_Close_paramsKey holds the map key params of the ClientCodec
// type
type MoqClientCodec_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqClientCodec_Close_resultsByParams contains the results for a given set of
// parameters for the ClientCodec type
type MoqClientCodec_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqClientCodec_Close_paramsKey]*MoqClientCodec_Close_results
}

// MoqClientCodec_Close_doFn defines the type of function needed when calling
// AndDo for the ClientCodec type
type MoqClientCodec_Close_doFn func()

// MoqClientCodec_Close_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ClientCodec type
type MoqClientCodec_Close_doReturnFn func() error

// MoqClientCodec_Close_results holds the results of the ClientCodec type
type MoqClientCodec_Close_results struct {
	Params  MoqClientCodec_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqClientCodec_Close_doFn
		DoReturnFn MoqClientCodec_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqClientCodec_Close_fnRecorder routes recorded function calls to the
// MoqClientCodec moq
type MoqClientCodec_Close_fnRecorder struct {
	Params    MoqClientCodec_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqClientCodec_Close_results
	Moq       *MoqClientCodec
}

// MoqClientCodec_Close_anyParams isolates the any params functions of the
// ClientCodec type
type MoqClientCodec_Close_anyParams struct {
	Recorder *MoqClientCodec_Close_fnRecorder
}

// NewMoqClientCodec creates a new moq of the ClientCodec type
func NewMoqClientCodec(scene *moq.Scene, config *moq.Config) *MoqClientCodec {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqClientCodec{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqClientCodec_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				WriteRequest struct {
					Param1 moq.ParamIndexing
					Param2 moq.ParamIndexing
				}
				ReadResponseHeader struct {
					Param1 moq.ParamIndexing
				}
				ReadResponseBody struct {
					Param1 moq.ParamIndexing
				}
				Close struct{}
			}
		}{ParameterIndexing: struct {
			WriteRequest struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}
			ReadResponseHeader struct {
				Param1 moq.ParamIndexing
			}
			ReadResponseBody struct {
				Param1 moq.ParamIndexing
			}
			Close struct{}
		}{
			WriteRequest: struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
				Param2: moq.ParamIndexByValue,
			},
			ReadResponseHeader: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
			},
			ReadResponseBody: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			Close: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the ClientCodec type
func (m *MoqClientCodec) Mock() *MoqClientCodec_mock { return m.Moq }

func (m *MoqClientCodec_mock) WriteRequest(param1 *rpc.Request, param2 any) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqClientCodec_WriteRequest_params{
		Param1: param1,
		Param2: param2,
	}
	var results *MoqClientCodec_WriteRequest_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteRequest {
		paramsKey := m.Moq.ParamsKey_WriteRequest(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteRequest(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteRequest(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteRequest(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1, param2)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1, param2)
	}
	return
}

func (m *MoqClientCodec_mock) ReadResponseHeader(param1 *rpc.Response) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqClientCodec_ReadResponseHeader_params{
		Param1: param1,
	}
	var results *MoqClientCodec_ReadResponseHeader_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadResponseHeader {
		paramsKey := m.Moq.ParamsKey_ReadResponseHeader(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadResponseHeader(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadResponseHeader(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadResponseHeader(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqClientCodec_mock) ReadResponseBody(param1 any) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqClientCodec_ReadResponseBody_params{
		Param1: param1,
	}
	var results *MoqClientCodec_ReadResponseBody_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadResponseBody {
		paramsKey := m.Moq.ParamsKey_ReadResponseBody(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadResponseBody(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadResponseBody(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadResponseBody(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqClientCodec_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqClientCodec_Close_params{}
	var results *MoqClientCodec_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the ClientCodec type
func (m *MoqClientCodec) OnCall() *MoqClientCodec_recorder {
	return &MoqClientCodec_recorder{
		Moq: m,
	}
}

func (m *MoqClientCodec_recorder) WriteRequest(param1 *rpc.Request, param2 any) *MoqClientCodec_WriteRequest_fnRecorder {
	return &MoqClientCodec_WriteRequest_fnRecorder{
		Params: MoqClientCodec_WriteRequest_params{
			Param1: param1,
			Param2: param2,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqClientCodec_WriteRequest_fnRecorder) Any() *MoqClientCodec_WriteRequest_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteRequest(r.Params))
		return nil
	}
	return &MoqClientCodec_WriteRequest_anyParams{Recorder: r}
}

func (a *MoqClientCodec_WriteRequest_anyParams) Param1() *MoqClientCodec_WriteRequest_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqClientCodec_WriteRequest_anyParams) Param2() *MoqClientCodec_WriteRequest_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqClientCodec_WriteRequest_fnRecorder) Seq() *MoqClientCodec_WriteRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteRequest(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqClientCodec_WriteRequest_fnRecorder) NoSeq() *MoqClientCodec_WriteRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteRequest(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqClientCodec_WriteRequest_fnRecorder) ReturnResults(result1 error) *MoqClientCodec_WriteRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqClientCodec_WriteRequest_doFn
		DoReturnFn MoqClientCodec_WriteRequest_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqClientCodec_WriteRequest_fnRecorder) AndDo(fn MoqClientCodec_WriteRequest_doFn) *MoqClientCodec_WriteRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqClientCodec_WriteRequest_fnRecorder) DoReturnResults(fn MoqClientCodec_WriteRequest_doReturnFn) *MoqClientCodec_WriteRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqClientCodec_WriteRequest_doFn
		DoReturnFn MoqClientCodec_WriteRequest_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqClientCodec_WriteRequest_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqClientCodec_WriteRequest_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteRequest {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqClientCodec_WriteRequest_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqClientCodec_WriteRequest_paramsKey]*MoqClientCodec_WriteRequest_results{},
		}
		r.Moq.ResultsByParams_WriteRequest = append(r.Moq.ResultsByParams_WriteRequest, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteRequest) {
			copy(r.Moq.ResultsByParams_WriteRequest[insertAt+1:], r.Moq.ResultsByParams_WriteRequest[insertAt:0])
			r.Moq.ResultsByParams_WriteRequest[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteRequest(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqClientCodec_WriteRequest_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqClientCodec_WriteRequest_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqClientCodec_WriteRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqClientCodec_WriteRequest_doFn
				DoReturnFn MoqClientCodec_WriteRequest_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqClientCodec) PrettyParams_WriteRequest(params MoqClientCodec_WriteRequest_params) string {
	return fmt.Sprintf("WriteRequest(%#v, %#v)", params.Param1, params.Param2)
}

func (m *MoqClientCodec) ParamsKey_WriteRequest(params MoqClientCodec_WriteRequest_params, anyParams uint64) MoqClientCodec_WriteRequest_paramsKey {
	m.Scene.T.Helper()
	var param1Used *rpc.Request
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteRequest.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	var param2Used any
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.WriteRequest.Param2 == moq.ParamIndexByValue {
			param2Used = params.Param2
		} else {
			param2UsedHash = hash.DeepHash(params.Param2)
		}
	}
	return MoqClientCodec_WriteRequest_paramsKey{
		Params: struct {
			Param1 *rpc.Request
			Param2 any
		}{
			Param1: param1Used,
			Param2: param2Used,
		},
		Hashes: struct {
			Param1 hash.Hash
			Param2 hash.Hash
		}{
			Param1: param1UsedHash,
			Param2: param2UsedHash,
		},
	}
}

func (m *MoqClientCodec_recorder) ReadResponseHeader(param1 *rpc.Response) *MoqClientCodec_ReadResponseHeader_fnRecorder {
	return &MoqClientCodec_ReadResponseHeader_fnRecorder{
		Params: MoqClientCodec_ReadResponseHeader_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqClientCodec_ReadResponseHeader_fnRecorder) Any() *MoqClientCodec_ReadResponseHeader_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadResponseHeader(r.Params))
		return nil
	}
	return &MoqClientCodec_ReadResponseHeader_anyParams{Recorder: r}
}

func (a *MoqClientCodec_ReadResponseHeader_anyParams) Param1() *MoqClientCodec_ReadResponseHeader_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqClientCodec_ReadResponseHeader_fnRecorder) Seq() *MoqClientCodec_ReadResponseHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadResponseHeader(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqClientCodec_ReadResponseHeader_fnRecorder) NoSeq() *MoqClientCodec_ReadResponseHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadResponseHeader(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqClientCodec_ReadResponseHeader_fnRecorder) ReturnResults(result1 error) *MoqClientCodec_ReadResponseHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqClientCodec_ReadResponseHeader_doFn
		DoReturnFn MoqClientCodec_ReadResponseHeader_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqClientCodec_ReadResponseHeader_fnRecorder) AndDo(fn MoqClientCodec_ReadResponseHeader_doFn) *MoqClientCodec_ReadResponseHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqClientCodec_ReadResponseHeader_fnRecorder) DoReturnResults(fn MoqClientCodec_ReadResponseHeader_doReturnFn) *MoqClientCodec_ReadResponseHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqClientCodec_ReadResponseHeader_doFn
		DoReturnFn MoqClientCodec_ReadResponseHeader_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqClientCodec_ReadResponseHeader_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqClientCodec_ReadResponseHeader_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadResponseHeader {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqClientCodec_ReadResponseHeader_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqClientCodec_ReadResponseHeader_paramsKey]*MoqClientCodec_ReadResponseHeader_results{},
		}
		r.Moq.ResultsByParams_ReadResponseHeader = append(r.Moq.ResultsByParams_ReadResponseHeader, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadResponseHeader) {
			copy(r.Moq.ResultsByParams_ReadResponseHeader[insertAt+1:], r.Moq.ResultsByParams_ReadResponseHeader[insertAt:0])
			r.Moq.ResultsByParams_ReadResponseHeader[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadResponseHeader(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqClientCodec_ReadResponseHeader_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqClientCodec_ReadResponseHeader_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqClientCodec_ReadResponseHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqClientCodec_ReadResponseHeader_doFn
				DoReturnFn MoqClientCodec_ReadResponseHeader_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqClientCodec) PrettyParams_ReadResponseHeader(params MoqClientCodec_ReadResponseHeader_params) string {
	return fmt.Sprintf("ReadResponseHeader(%#v)", params.Param1)
}

func (m *MoqClientCodec) ParamsKey_ReadResponseHeader(params MoqClientCodec_ReadResponseHeader_params, anyParams uint64) MoqClientCodec_ReadResponseHeader_paramsKey {
	m.Scene.T.Helper()
	var param1Used *rpc.Response
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadResponseHeader.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqClientCodec_ReadResponseHeader_paramsKey{
		Params: struct{ Param1 *rpc.Response }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqClientCodec_recorder) ReadResponseBody(param1 any) *MoqClientCodec_ReadResponseBody_fnRecorder {
	return &MoqClientCodec_ReadResponseBody_fnRecorder{
		Params: MoqClientCodec_ReadResponseBody_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqClientCodec_ReadResponseBody_fnRecorder) Any() *MoqClientCodec_ReadResponseBody_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadResponseBody(r.Params))
		return nil
	}
	return &MoqClientCodec_ReadResponseBody_anyParams{Recorder: r}
}

func (a *MoqClientCodec_ReadResponseBody_anyParams) Param1() *MoqClientCodec_ReadResponseBody_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqClientCodec_ReadResponseBody_fnRecorder) Seq() *MoqClientCodec_ReadResponseBody_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadResponseBody(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqClientCodec_ReadResponseBody_fnRecorder) NoSeq() *MoqClientCodec_ReadResponseBody_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadResponseBody(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqClientCodec_ReadResponseBody_fnRecorder) ReturnResults(result1 error) *MoqClientCodec_ReadResponseBody_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqClientCodec_ReadResponseBody_doFn
		DoReturnFn MoqClientCodec_ReadResponseBody_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqClientCodec_ReadResponseBody_fnRecorder) AndDo(fn MoqClientCodec_ReadResponseBody_doFn) *MoqClientCodec_ReadResponseBody_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqClientCodec_ReadResponseBody_fnRecorder) DoReturnResults(fn MoqClientCodec_ReadResponseBody_doReturnFn) *MoqClientCodec_ReadResponseBody_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqClientCodec_ReadResponseBody_doFn
		DoReturnFn MoqClientCodec_ReadResponseBody_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqClientCodec_ReadResponseBody_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqClientCodec_ReadResponseBody_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadResponseBody {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqClientCodec_ReadResponseBody_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqClientCodec_ReadResponseBody_paramsKey]*MoqClientCodec_ReadResponseBody_results{},
		}
		r.Moq.ResultsByParams_ReadResponseBody = append(r.Moq.ResultsByParams_ReadResponseBody, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadResponseBody) {
			copy(r.Moq.ResultsByParams_ReadResponseBody[insertAt+1:], r.Moq.ResultsByParams_ReadResponseBody[insertAt:0])
			r.Moq.ResultsByParams_ReadResponseBody[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadResponseBody(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqClientCodec_ReadResponseBody_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqClientCodec_ReadResponseBody_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqClientCodec_ReadResponseBody_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqClientCodec_ReadResponseBody_doFn
				DoReturnFn MoqClientCodec_ReadResponseBody_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqClientCodec) PrettyParams_ReadResponseBody(params MoqClientCodec_ReadResponseBody_params) string {
	return fmt.Sprintf("ReadResponseBody(%#v)", params.Param1)
}

func (m *MoqClientCodec) ParamsKey_ReadResponseBody(params MoqClientCodec_ReadResponseBody_params, anyParams uint64) MoqClientCodec_ReadResponseBody_paramsKey {
	m.Scene.T.Helper()
	var param1Used any
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadResponseBody.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqClientCodec_ReadResponseBody_paramsKey{
		Params: struct{ Param1 any }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqClientCodec_recorder) Close() *MoqClientCodec_Close_fnRecorder {
	return &MoqClientCodec_Close_fnRecorder{
		Params:   MoqClientCodec_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqClientCodec_Close_fnRecorder) Any() *MoqClientCodec_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqClientCodec_Close_anyParams{Recorder: r}
}

func (r *MoqClientCodec_Close_fnRecorder) Seq() *MoqClientCodec_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqClientCodec_Close_fnRecorder) NoSeq() *MoqClientCodec_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqClientCodec_Close_fnRecorder) ReturnResults(result1 error) *MoqClientCodec_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqClientCodec_Close_doFn
		DoReturnFn MoqClientCodec_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqClientCodec_Close_fnRecorder) AndDo(fn MoqClientCodec_Close_doFn) *MoqClientCodec_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqClientCodec_Close_fnRecorder) DoReturnResults(fn MoqClientCodec_Close_doReturnFn) *MoqClientCodec_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqClientCodec_Close_doFn
		DoReturnFn MoqClientCodec_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqClientCodec_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqClientCodec_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqClientCodec_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqClientCodec_Close_paramsKey]*MoqClientCodec_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqClientCodec_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqClientCodec_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqClientCodec_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqClientCodec_Close_doFn
				DoReturnFn MoqClientCodec_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqClientCodec) PrettyParams_Close(params MoqClientCodec_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqClientCodec) ParamsKey_Close(params MoqClientCodec_Close_params, anyParams uint64) MoqClientCodec_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqClientCodec_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqClientCodec) Reset() {
	m.ResultsByParams_WriteRequest = nil
	m.ResultsByParams_ReadResponseHeader = nil
	m.ResultsByParams_ReadResponseBody = nil
	m.ResultsByParams_Close = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqClientCodec) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_WriteRequest {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteRequest(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadResponseHeader {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadResponseHeader(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadResponseBody {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadResponseBody(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
}
