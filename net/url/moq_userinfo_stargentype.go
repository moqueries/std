// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package url

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that url.Userinfo_starGenType is mocked
// completely
var _ Userinfo_starGenType = (*MoqUserinfo_starGenType_mock)(nil)

// Userinfo_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Userinfo_starGenType interface {
	Username() string
	Password() (string, bool)
	String() string
}

// MoqUserinfo_starGenType holds the state of a moq of the Userinfo_starGenType
// type
type MoqUserinfo_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqUserinfo_starGenType_mock

	ResultsByParams_Username []MoqUserinfo_starGenType_Username_resultsByParams
	ResultsByParams_Password []MoqUserinfo_starGenType_Password_resultsByParams
	ResultsByParams_String   []MoqUserinfo_starGenType_String_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Username struct{}
			Password struct{}
			String   struct{}
		}
	}
}

// MoqUserinfo_starGenType_mock isolates the mock interface of the
// Userinfo_starGenType type
type MoqUserinfo_starGenType_mock struct {
	Moq *MoqUserinfo_starGenType
}

// MoqUserinfo_starGenType_recorder isolates the recorder interface of the
// Userinfo_starGenType type
type MoqUserinfo_starGenType_recorder struct {
	Moq *MoqUserinfo_starGenType
}

// MoqUserinfo_starGenType_Username_params holds the params of the
// Userinfo_starGenType type
type MoqUserinfo_starGenType_Username_params struct{}

// MoqUserinfo_starGenType_Username_paramsKey holds the map key params of the
// Userinfo_starGenType type
type MoqUserinfo_starGenType_Username_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqUserinfo_starGenType_Username_resultsByParams contains the results for a
// given set of parameters for the Userinfo_starGenType type
type MoqUserinfo_starGenType_Username_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUserinfo_starGenType_Username_paramsKey]*MoqUserinfo_starGenType_Username_results
}

// MoqUserinfo_starGenType_Username_doFn defines the type of function needed
// when calling AndDo for the Userinfo_starGenType type
type MoqUserinfo_starGenType_Username_doFn func()

// MoqUserinfo_starGenType_Username_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Userinfo_starGenType type
type MoqUserinfo_starGenType_Username_doReturnFn func() string

// MoqUserinfo_starGenType_Username_results holds the results of the
// Userinfo_starGenType type
type MoqUserinfo_starGenType_Username_results struct {
	Params  MoqUserinfo_starGenType_Username_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqUserinfo_starGenType_Username_doFn
		DoReturnFn MoqUserinfo_starGenType_Username_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUserinfo_starGenType_Username_fnRecorder routes recorded function calls
// to the MoqUserinfo_starGenType moq
type MoqUserinfo_starGenType_Username_fnRecorder struct {
	Params    MoqUserinfo_starGenType_Username_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUserinfo_starGenType_Username_results
	Moq       *MoqUserinfo_starGenType
}

// MoqUserinfo_starGenType_Username_anyParams isolates the any params functions
// of the Userinfo_starGenType type
type MoqUserinfo_starGenType_Username_anyParams struct {
	Recorder *MoqUserinfo_starGenType_Username_fnRecorder
}

// MoqUserinfo_starGenType_Password_params holds the params of the
// Userinfo_starGenType type
type MoqUserinfo_starGenType_Password_params struct{}

// MoqUserinfo_starGenType_Password_paramsKey holds the map key params of the
// Userinfo_starGenType type
type MoqUserinfo_starGenType_Password_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqUserinfo_starGenType_Password_resultsByParams contains the results for a
// given set of parameters for the Userinfo_starGenType type
type MoqUserinfo_starGenType_Password_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUserinfo_starGenType_Password_paramsKey]*MoqUserinfo_starGenType_Password_results
}

// MoqUserinfo_starGenType_Password_doFn defines the type of function needed
// when calling AndDo for the Userinfo_starGenType type
type MoqUserinfo_starGenType_Password_doFn func()

// MoqUserinfo_starGenType_Password_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Userinfo_starGenType type
type MoqUserinfo_starGenType_Password_doReturnFn func() (string, bool)

// MoqUserinfo_starGenType_Password_results holds the results of the
// Userinfo_starGenType type
type MoqUserinfo_starGenType_Password_results struct {
	Params  MoqUserinfo_starGenType_Password_params
	Results []struct {
		Values *struct {
			Result1 string
			Result2 bool
		}
		Sequence   uint32
		DoFn       MoqUserinfo_starGenType_Password_doFn
		DoReturnFn MoqUserinfo_starGenType_Password_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUserinfo_starGenType_Password_fnRecorder routes recorded function calls
// to the MoqUserinfo_starGenType moq
type MoqUserinfo_starGenType_Password_fnRecorder struct {
	Params    MoqUserinfo_starGenType_Password_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUserinfo_starGenType_Password_results
	Moq       *MoqUserinfo_starGenType
}

// MoqUserinfo_starGenType_Password_anyParams isolates the any params functions
// of the Userinfo_starGenType type
type MoqUserinfo_starGenType_Password_anyParams struct {
	Recorder *MoqUserinfo_starGenType_Password_fnRecorder
}

// MoqUserinfo_starGenType_String_params holds the params of the
// Userinfo_starGenType type
type MoqUserinfo_starGenType_String_params struct{}

// MoqUserinfo_starGenType_String_paramsKey holds the map key params of the
// Userinfo_starGenType type
type MoqUserinfo_starGenType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqUserinfo_starGenType_String_resultsByParams contains the results for a
// given set of parameters for the Userinfo_starGenType type
type MoqUserinfo_starGenType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUserinfo_starGenType_String_paramsKey]*MoqUserinfo_starGenType_String_results
}

// MoqUserinfo_starGenType_String_doFn defines the type of function needed when
// calling AndDo for the Userinfo_starGenType type
type MoqUserinfo_starGenType_String_doFn func()

// MoqUserinfo_starGenType_String_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Userinfo_starGenType type
type MoqUserinfo_starGenType_String_doReturnFn func() string

// MoqUserinfo_starGenType_String_results holds the results of the
// Userinfo_starGenType type
type MoqUserinfo_starGenType_String_results struct {
	Params  MoqUserinfo_starGenType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqUserinfo_starGenType_String_doFn
		DoReturnFn MoqUserinfo_starGenType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUserinfo_starGenType_String_fnRecorder routes recorded function calls to
// the MoqUserinfo_starGenType moq
type MoqUserinfo_starGenType_String_fnRecorder struct {
	Params    MoqUserinfo_starGenType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUserinfo_starGenType_String_results
	Moq       *MoqUserinfo_starGenType
}

// MoqUserinfo_starGenType_String_anyParams isolates the any params functions
// of the Userinfo_starGenType type
type MoqUserinfo_starGenType_String_anyParams struct {
	Recorder *MoqUserinfo_starGenType_String_fnRecorder
}

// NewMoqUserinfo_starGenType creates a new moq of the Userinfo_starGenType
// type
func NewMoqUserinfo_starGenType(scene *moq.Scene, config *moq.Config) *MoqUserinfo_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqUserinfo_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqUserinfo_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Username struct{}
				Password struct{}
				String   struct{}
			}
		}{ParameterIndexing: struct {
			Username struct{}
			Password struct{}
			String   struct{}
		}{
			Username: struct{}{},
			Password: struct{}{},
			String:   struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Userinfo_starGenType type
func (m *MoqUserinfo_starGenType) Mock() *MoqUserinfo_starGenType_mock { return m.Moq }

func (m *MoqUserinfo_starGenType_mock) Username() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqUserinfo_starGenType_Username_params{}
	var results *MoqUserinfo_starGenType_Username_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Username {
		paramsKey := m.Moq.ParamsKey_Username(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Username(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Username(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Username(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqUserinfo_starGenType_mock) Password() (result1 string, result2 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqUserinfo_starGenType_Password_params{}
	var results *MoqUserinfo_starGenType_Password_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Password {
		paramsKey := m.Moq.ParamsKey_Password(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Password(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Password(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Password(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqUserinfo_starGenType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqUserinfo_starGenType_String_params{}
	var results *MoqUserinfo_starGenType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Userinfo_starGenType type
func (m *MoqUserinfo_starGenType) OnCall() *MoqUserinfo_starGenType_recorder {
	return &MoqUserinfo_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqUserinfo_starGenType_recorder) Username() *MoqUserinfo_starGenType_Username_fnRecorder {
	return &MoqUserinfo_starGenType_Username_fnRecorder{
		Params:   MoqUserinfo_starGenType_Username_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUserinfo_starGenType_Username_fnRecorder) Any() *MoqUserinfo_starGenType_Username_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Username(r.Params))
		return nil
	}
	return &MoqUserinfo_starGenType_Username_anyParams{Recorder: r}
}

func (r *MoqUserinfo_starGenType_Username_fnRecorder) Seq() *MoqUserinfo_starGenType_Username_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Username(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUserinfo_starGenType_Username_fnRecorder) NoSeq() *MoqUserinfo_starGenType_Username_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Username(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUserinfo_starGenType_Username_fnRecorder) ReturnResults(result1 string) *MoqUserinfo_starGenType_Username_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqUserinfo_starGenType_Username_doFn
		DoReturnFn MoqUserinfo_starGenType_Username_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUserinfo_starGenType_Username_fnRecorder) AndDo(fn MoqUserinfo_starGenType_Username_doFn) *MoqUserinfo_starGenType_Username_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUserinfo_starGenType_Username_fnRecorder) DoReturnResults(fn MoqUserinfo_starGenType_Username_doReturnFn) *MoqUserinfo_starGenType_Username_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqUserinfo_starGenType_Username_doFn
		DoReturnFn MoqUserinfo_starGenType_Username_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUserinfo_starGenType_Username_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUserinfo_starGenType_Username_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Username {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUserinfo_starGenType_Username_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUserinfo_starGenType_Username_paramsKey]*MoqUserinfo_starGenType_Username_results{},
		}
		r.Moq.ResultsByParams_Username = append(r.Moq.ResultsByParams_Username, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Username) {
			copy(r.Moq.ResultsByParams_Username[insertAt+1:], r.Moq.ResultsByParams_Username[insertAt:0])
			r.Moq.ResultsByParams_Username[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Username(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUserinfo_starGenType_Username_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUserinfo_starGenType_Username_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUserinfo_starGenType_Username_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqUserinfo_starGenType_Username_doFn
				DoReturnFn MoqUserinfo_starGenType_Username_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUserinfo_starGenType) PrettyParams_Username(params MoqUserinfo_starGenType_Username_params) string {
	return fmt.Sprintf("Username()")
}

func (m *MoqUserinfo_starGenType) ParamsKey_Username(params MoqUserinfo_starGenType_Username_params, anyParams uint64) MoqUserinfo_starGenType_Username_paramsKey {
	m.Scene.T.Helper()
	return MoqUserinfo_starGenType_Username_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqUserinfo_starGenType_recorder) Password() *MoqUserinfo_starGenType_Password_fnRecorder {
	return &MoqUserinfo_starGenType_Password_fnRecorder{
		Params:   MoqUserinfo_starGenType_Password_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUserinfo_starGenType_Password_fnRecorder) Any() *MoqUserinfo_starGenType_Password_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Password(r.Params))
		return nil
	}
	return &MoqUserinfo_starGenType_Password_anyParams{Recorder: r}
}

func (r *MoqUserinfo_starGenType_Password_fnRecorder) Seq() *MoqUserinfo_starGenType_Password_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Password(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUserinfo_starGenType_Password_fnRecorder) NoSeq() *MoqUserinfo_starGenType_Password_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Password(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUserinfo_starGenType_Password_fnRecorder) ReturnResults(result1 string, result2 bool) *MoqUserinfo_starGenType_Password_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
			Result2 bool
		}
		Sequence   uint32
		DoFn       MoqUserinfo_starGenType_Password_doFn
		DoReturnFn MoqUserinfo_starGenType_Password_doReturnFn
	}{
		Values: &struct {
			Result1 string
			Result2 bool
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUserinfo_starGenType_Password_fnRecorder) AndDo(fn MoqUserinfo_starGenType_Password_doFn) *MoqUserinfo_starGenType_Password_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUserinfo_starGenType_Password_fnRecorder) DoReturnResults(fn MoqUserinfo_starGenType_Password_doReturnFn) *MoqUserinfo_starGenType_Password_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
			Result2 bool
		}
		Sequence   uint32
		DoFn       MoqUserinfo_starGenType_Password_doFn
		DoReturnFn MoqUserinfo_starGenType_Password_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUserinfo_starGenType_Password_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUserinfo_starGenType_Password_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Password {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUserinfo_starGenType_Password_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUserinfo_starGenType_Password_paramsKey]*MoqUserinfo_starGenType_Password_results{},
		}
		r.Moq.ResultsByParams_Password = append(r.Moq.ResultsByParams_Password, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Password) {
			copy(r.Moq.ResultsByParams_Password[insertAt+1:], r.Moq.ResultsByParams_Password[insertAt:0])
			r.Moq.ResultsByParams_Password[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Password(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUserinfo_starGenType_Password_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUserinfo_starGenType_Password_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUserinfo_starGenType_Password_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
					Result2 bool
				}
				Sequence   uint32
				DoFn       MoqUserinfo_starGenType_Password_doFn
				DoReturnFn MoqUserinfo_starGenType_Password_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUserinfo_starGenType) PrettyParams_Password(params MoqUserinfo_starGenType_Password_params) string {
	return fmt.Sprintf("Password()")
}

func (m *MoqUserinfo_starGenType) ParamsKey_Password(params MoqUserinfo_starGenType_Password_params, anyParams uint64) MoqUserinfo_starGenType_Password_paramsKey {
	m.Scene.T.Helper()
	return MoqUserinfo_starGenType_Password_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqUserinfo_starGenType_recorder) String() *MoqUserinfo_starGenType_String_fnRecorder {
	return &MoqUserinfo_starGenType_String_fnRecorder{
		Params:   MoqUserinfo_starGenType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUserinfo_starGenType_String_fnRecorder) Any() *MoqUserinfo_starGenType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqUserinfo_starGenType_String_anyParams{Recorder: r}
}

func (r *MoqUserinfo_starGenType_String_fnRecorder) Seq() *MoqUserinfo_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUserinfo_starGenType_String_fnRecorder) NoSeq() *MoqUserinfo_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUserinfo_starGenType_String_fnRecorder) ReturnResults(result1 string) *MoqUserinfo_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqUserinfo_starGenType_String_doFn
		DoReturnFn MoqUserinfo_starGenType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUserinfo_starGenType_String_fnRecorder) AndDo(fn MoqUserinfo_starGenType_String_doFn) *MoqUserinfo_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUserinfo_starGenType_String_fnRecorder) DoReturnResults(fn MoqUserinfo_starGenType_String_doReturnFn) *MoqUserinfo_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqUserinfo_starGenType_String_doFn
		DoReturnFn MoqUserinfo_starGenType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUserinfo_starGenType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUserinfo_starGenType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUserinfo_starGenType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUserinfo_starGenType_String_paramsKey]*MoqUserinfo_starGenType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUserinfo_starGenType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUserinfo_starGenType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUserinfo_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqUserinfo_starGenType_String_doFn
				DoReturnFn MoqUserinfo_starGenType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUserinfo_starGenType) PrettyParams_String(params MoqUserinfo_starGenType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqUserinfo_starGenType) ParamsKey_String(params MoqUserinfo_starGenType_String_params, anyParams uint64) MoqUserinfo_starGenType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqUserinfo_starGenType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqUserinfo_starGenType) Reset() {
	m.ResultsByParams_Username = nil
	m.ResultsByParams_Password = nil
	m.ResultsByParams_String = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqUserinfo_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Username {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Username(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Password {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Password(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
}
