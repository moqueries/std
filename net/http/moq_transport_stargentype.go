// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package http

import (
	"fmt"
	"math/bits"
	"net/http"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that http.Transport_starGenType is
// mocked completely
var _ Transport_starGenType = (*MoqTransport_starGenType_mock)(nil)

// Transport_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Transport_starGenType interface {
	RoundTrip(req *http.Request) (*http.Response, error)
	Clone() *http.Transport
	RegisterProtocol(scheme string, rt http.RoundTripper)
	CloseIdleConnections()
	CancelRequest(req *http.Request)
}

// MoqTransport_starGenType holds the state of a moq of the
// Transport_starGenType type
type MoqTransport_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqTransport_starGenType_mock

	ResultsByParams_RoundTrip            []MoqTransport_starGenType_RoundTrip_resultsByParams
	ResultsByParams_Clone                []MoqTransport_starGenType_Clone_resultsByParams
	ResultsByParams_RegisterProtocol     []MoqTransport_starGenType_RegisterProtocol_resultsByParams
	ResultsByParams_CloseIdleConnections []MoqTransport_starGenType_CloseIdleConnections_resultsByParams
	ResultsByParams_CancelRequest        []MoqTransport_starGenType_CancelRequest_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			RoundTrip struct {
				Req moq.ParamIndexing
			}
			Clone            struct{}
			RegisterProtocol struct {
				Scheme moq.ParamIndexing
				Rt     moq.ParamIndexing
			}
			CloseIdleConnections struct{}
			CancelRequest        struct {
				Req moq.ParamIndexing
			}
		}
	}
	// MoqTransport_starGenType_mock isolates the mock interface of the
}

// Transport_starGenType type
type MoqTransport_starGenType_mock struct {
	Moq *MoqTransport_starGenType
}

// MoqTransport_starGenType_recorder isolates the recorder interface of the
// Transport_starGenType type
type MoqTransport_starGenType_recorder struct {
	Moq *MoqTransport_starGenType
}

// MoqTransport_starGenType_RoundTrip_params holds the params of the
// Transport_starGenType type
type MoqTransport_starGenType_RoundTrip_params struct{ Req *http.Request }

// MoqTransport_starGenType_RoundTrip_paramsKey holds the map key params of the
// Transport_starGenType type
type MoqTransport_starGenType_RoundTrip_paramsKey struct {
	Params struct{ Req *http.Request }
	Hashes struct{ Req hash.Hash }
}

// MoqTransport_starGenType_RoundTrip_resultsByParams contains the results for
// a given set of parameters for the Transport_starGenType type
type MoqTransport_starGenType_RoundTrip_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTransport_starGenType_RoundTrip_paramsKey]*MoqTransport_starGenType_RoundTrip_results
}

// MoqTransport_starGenType_RoundTrip_doFn defines the type of function needed
// when calling AndDo for the Transport_starGenType type
type MoqTransport_starGenType_RoundTrip_doFn func(req *http.Request)

// MoqTransport_starGenType_RoundTrip_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Transport_starGenType type
type MoqTransport_starGenType_RoundTrip_doReturnFn func(req *http.Request) (*http.Response, error)

// MoqTransport_starGenType_RoundTrip_results holds the results of the
// Transport_starGenType type
type MoqTransport_starGenType_RoundTrip_results struct {
	Params  MoqTransport_starGenType_RoundTrip_params
	Results []struct {
		Values *struct {
			Result1 *http.Response
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTransport_starGenType_RoundTrip_doFn
		DoReturnFn MoqTransport_starGenType_RoundTrip_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTransport_starGenType_RoundTrip_fnRecorder routes recorded function calls
// to the MoqTransport_starGenType moq
type MoqTransport_starGenType_RoundTrip_fnRecorder struct {
	Params    MoqTransport_starGenType_RoundTrip_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTransport_starGenType_RoundTrip_results
	Moq       *MoqTransport_starGenType
}

// MoqTransport_starGenType_RoundTrip_anyParams isolates the any params
// functions of the Transport_starGenType type
type MoqTransport_starGenType_RoundTrip_anyParams struct {
	Recorder *MoqTransport_starGenType_RoundTrip_fnRecorder
}

// MoqTransport_starGenType_Clone_params holds the params of the
// Transport_starGenType type
type MoqTransport_starGenType_Clone_params struct{}

// MoqTransport_starGenType_Clone_paramsKey holds the map key params of the
// Transport_starGenType type
type MoqTransport_starGenType_Clone_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTransport_starGenType_Clone_resultsByParams contains the results for a
// given set of parameters for the Transport_starGenType type
type MoqTransport_starGenType_Clone_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTransport_starGenType_Clone_paramsKey]*MoqTransport_starGenType_Clone_results
}

// MoqTransport_starGenType_Clone_doFn defines the type of function needed when
// calling AndDo for the Transport_starGenType type
type MoqTransport_starGenType_Clone_doFn func()

// MoqTransport_starGenType_Clone_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Transport_starGenType type
type MoqTransport_starGenType_Clone_doReturnFn func() *http.Transport

// MoqTransport_starGenType_Clone_results holds the results of the
// Transport_starGenType type
type MoqTransport_starGenType_Clone_results struct {
	Params  MoqTransport_starGenType_Clone_params
	Results []struct {
		Values *struct {
			Result1 *http.Transport
		}
		Sequence   uint32
		DoFn       MoqTransport_starGenType_Clone_doFn
		DoReturnFn MoqTransport_starGenType_Clone_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTransport_starGenType_Clone_fnRecorder routes recorded function calls to
// the MoqTransport_starGenType moq
type MoqTransport_starGenType_Clone_fnRecorder struct {
	Params    MoqTransport_starGenType_Clone_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTransport_starGenType_Clone_results
	Moq       *MoqTransport_starGenType
}

// MoqTransport_starGenType_Clone_anyParams isolates the any params functions
// of the Transport_starGenType type
type MoqTransport_starGenType_Clone_anyParams struct {
	Recorder *MoqTransport_starGenType_Clone_fnRecorder
}

// MoqTransport_starGenType_RegisterProtocol_params holds the params of the
// Transport_starGenType type
type MoqTransport_starGenType_RegisterProtocol_params struct {
	Scheme string
	Rt     http.RoundTripper
}

// MoqTransport_starGenType_RegisterProtocol_paramsKey holds the map key params
// of the Transport_starGenType type
type MoqTransport_starGenType_RegisterProtocol_paramsKey struct {
	Params struct {
		Scheme string
		Rt     http.RoundTripper
	}
	Hashes struct {
		Scheme hash.Hash
		Rt     hash.Hash
	}
}

// MoqTransport_starGenType_RegisterProtocol_resultsByParams contains the
// results for a given set of parameters for the Transport_starGenType type
type MoqTransport_starGenType_RegisterProtocol_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTransport_starGenType_RegisterProtocol_paramsKey]*MoqTransport_starGenType_RegisterProtocol_results
}

// MoqTransport_starGenType_RegisterProtocol_doFn defines the type of function
// needed when calling AndDo for the Transport_starGenType type
type MoqTransport_starGenType_RegisterProtocol_doFn func(scheme string, rt http.RoundTripper)

// MoqTransport_starGenType_RegisterProtocol_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Transport_starGenType
// type
type MoqTransport_starGenType_RegisterProtocol_doReturnFn func(scheme string, rt http.RoundTripper)

// MoqTransport_starGenType_RegisterProtocol_results holds the results of the
// Transport_starGenType type
type MoqTransport_starGenType_RegisterProtocol_results struct {
	Params  MoqTransport_starGenType_RegisterProtocol_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqTransport_starGenType_RegisterProtocol_doFn
		DoReturnFn MoqTransport_starGenType_RegisterProtocol_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTransport_starGenType_RegisterProtocol_fnRecorder routes recorded
// function calls to the MoqTransport_starGenType moq
type MoqTransport_starGenType_RegisterProtocol_fnRecorder struct {
	Params    MoqTransport_starGenType_RegisterProtocol_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTransport_starGenType_RegisterProtocol_results
	Moq       *MoqTransport_starGenType
}

// MoqTransport_starGenType_RegisterProtocol_anyParams isolates the any params
// functions of the Transport_starGenType type
type MoqTransport_starGenType_RegisterProtocol_anyParams struct {
	Recorder *MoqTransport_starGenType_RegisterProtocol_fnRecorder
}

// MoqTransport_starGenType_CloseIdleConnections_params holds the params of the
// Transport_starGenType type
type MoqTransport_starGenType_CloseIdleConnections_params struct{}

// MoqTransport_starGenType_CloseIdleConnections_paramsKey holds the map key
// params of the Transport_starGenType type
type MoqTransport_starGenType_CloseIdleConnections_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTransport_starGenType_CloseIdleConnections_resultsByParams contains the
// results for a given set of parameters for the Transport_starGenType type
type MoqTransport_starGenType_CloseIdleConnections_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTransport_starGenType_CloseIdleConnections_paramsKey]*MoqTransport_starGenType_CloseIdleConnections_results
}

// MoqTransport_starGenType_CloseIdleConnections_doFn defines the type of
// function needed when calling AndDo for the Transport_starGenType type
type MoqTransport_starGenType_CloseIdleConnections_doFn func()

// MoqTransport_starGenType_CloseIdleConnections_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Transport_starGenType
// type
type MoqTransport_starGenType_CloseIdleConnections_doReturnFn func()

// MoqTransport_starGenType_CloseIdleConnections_results holds the results of
// the Transport_starGenType type
type MoqTransport_starGenType_CloseIdleConnections_results struct {
	Params  MoqTransport_starGenType_CloseIdleConnections_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqTransport_starGenType_CloseIdleConnections_doFn
		DoReturnFn MoqTransport_starGenType_CloseIdleConnections_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTransport_starGenType_CloseIdleConnections_fnRecorder routes recorded
// function calls to the MoqTransport_starGenType moq
type MoqTransport_starGenType_CloseIdleConnections_fnRecorder struct {
	Params    MoqTransport_starGenType_CloseIdleConnections_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTransport_starGenType_CloseIdleConnections_results
	Moq       *MoqTransport_starGenType
}

// MoqTransport_starGenType_CloseIdleConnections_anyParams isolates the any
// params functions of the Transport_starGenType type
type MoqTransport_starGenType_CloseIdleConnections_anyParams struct {
	Recorder *MoqTransport_starGenType_CloseIdleConnections_fnRecorder
}

// MoqTransport_starGenType_CancelRequest_params holds the params of the
// Transport_starGenType type
type MoqTransport_starGenType_CancelRequest_params struct{ Req *http.Request }

// MoqTransport_starGenType_CancelRequest_paramsKey holds the map key params of
// the Transport_starGenType type
type MoqTransport_starGenType_CancelRequest_paramsKey struct {
	Params struct{ Req *http.Request }
	Hashes struct{ Req hash.Hash }
}

// MoqTransport_starGenType_CancelRequest_resultsByParams contains the results
// for a given set of parameters for the Transport_starGenType type
type MoqTransport_starGenType_CancelRequest_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTransport_starGenType_CancelRequest_paramsKey]*MoqTransport_starGenType_CancelRequest_results
}

// MoqTransport_starGenType_CancelRequest_doFn defines the type of function
// needed when calling AndDo for the Transport_starGenType type
type MoqTransport_starGenType_CancelRequest_doFn func(req *http.Request)

// MoqTransport_starGenType_CancelRequest_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Transport_starGenType
// type
type MoqTransport_starGenType_CancelRequest_doReturnFn func(req *http.Request)

// MoqTransport_starGenType_CancelRequest_results holds the results of the
// Transport_starGenType type
type MoqTransport_starGenType_CancelRequest_results struct {
	Params  MoqTransport_starGenType_CancelRequest_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqTransport_starGenType_CancelRequest_doFn
		DoReturnFn MoqTransport_starGenType_CancelRequest_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTransport_starGenType_CancelRequest_fnRecorder routes recorded function
// calls to the MoqTransport_starGenType moq
type MoqTransport_starGenType_CancelRequest_fnRecorder struct {
	Params    MoqTransport_starGenType_CancelRequest_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTransport_starGenType_CancelRequest_results
	Moq       *MoqTransport_starGenType
}

// MoqTransport_starGenType_CancelRequest_anyParams isolates the any params
// functions of the Transport_starGenType type
type MoqTransport_starGenType_CancelRequest_anyParams struct {
	Recorder *MoqTransport_starGenType_CancelRequest_fnRecorder
}

// NewMoqTransport_starGenType creates a new moq of the Transport_starGenType
// type
func NewMoqTransport_starGenType(scene *moq.Scene, config *moq.Config) *MoqTransport_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqTransport_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqTransport_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				RoundTrip struct {
					Req moq.ParamIndexing
				}
				Clone            struct{}
				RegisterProtocol struct {
					Scheme moq.ParamIndexing
					Rt     moq.ParamIndexing
				}
				CloseIdleConnections struct{}
				CancelRequest        struct {
					Req moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			RoundTrip struct {
				Req moq.ParamIndexing
			}
			Clone            struct{}
			RegisterProtocol struct {
				Scheme moq.ParamIndexing
				Rt     moq.ParamIndexing
			}
			CloseIdleConnections struct{}
			CancelRequest        struct {
				Req moq.ParamIndexing
			}
		}{
			RoundTrip: struct {
				Req moq.ParamIndexing
			}{
				Req: moq.ParamIndexByHash,
			},
			Clone: struct{}{},
			RegisterProtocol: struct {
				Scheme moq.ParamIndexing
				Rt     moq.ParamIndexing
			}{
				Scheme: moq.ParamIndexByValue,
				Rt:     moq.ParamIndexByHash,
			},
			CloseIdleConnections: struct{}{},
			CancelRequest: struct {
				Req moq.ParamIndexing
			}{
				Req: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Transport_starGenType type
func (m *MoqTransport_starGenType) Mock() *MoqTransport_starGenType_mock { return m.Moq }

func (m *MoqTransport_starGenType_mock) RoundTrip(req *http.Request) (result1 *http.Response, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqTransport_starGenType_RoundTrip_params{
		Req: req,
	}
	var results *MoqTransport_starGenType_RoundTrip_results
	for _, resultsByParams := range m.Moq.ResultsByParams_RoundTrip {
		paramsKey := m.Moq.ParamsKey_RoundTrip(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_RoundTrip(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_RoundTrip(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_RoundTrip(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(req)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(req)
	}
	return
}

func (m *MoqTransport_starGenType_mock) Clone() (result1 *http.Transport) {
	m.Moq.Scene.T.Helper()
	params := MoqTransport_starGenType_Clone_params{}
	var results *MoqTransport_starGenType_Clone_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Clone {
		paramsKey := m.Moq.ParamsKey_Clone(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Clone(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Clone(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Clone(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqTransport_starGenType_mock) RegisterProtocol(scheme string, rt http.RoundTripper) {
	m.Moq.Scene.T.Helper()
	params := MoqTransport_starGenType_RegisterProtocol_params{
		Scheme: scheme,
		Rt:     rt,
	}
	var results *MoqTransport_starGenType_RegisterProtocol_results
	for _, resultsByParams := range m.Moq.ResultsByParams_RegisterProtocol {
		paramsKey := m.Moq.ParamsKey_RegisterProtocol(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_RegisterProtocol(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_RegisterProtocol(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_RegisterProtocol(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(scheme, rt)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(scheme, rt)
	}
	return
}

func (m *MoqTransport_starGenType_mock) CloseIdleConnections() {
	m.Moq.Scene.T.Helper()
	params := MoqTransport_starGenType_CloseIdleConnections_params{}
	var results *MoqTransport_starGenType_CloseIdleConnections_results
	for _, resultsByParams := range m.Moq.ResultsByParams_CloseIdleConnections {
		paramsKey := m.Moq.ParamsKey_CloseIdleConnections(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_CloseIdleConnections(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_CloseIdleConnections(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_CloseIdleConnections(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqTransport_starGenType_mock) CancelRequest(req *http.Request) {
	m.Moq.Scene.T.Helper()
	params := MoqTransport_starGenType_CancelRequest_params{
		Req: req,
	}
	var results *MoqTransport_starGenType_CancelRequest_results
	for _, resultsByParams := range m.Moq.ResultsByParams_CancelRequest {
		paramsKey := m.Moq.ParamsKey_CancelRequest(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_CancelRequest(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_CancelRequest(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_CancelRequest(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(req)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(req)
	}
	return
}

// OnCall returns the recorder implementation of the Transport_starGenType type
func (m *MoqTransport_starGenType) OnCall() *MoqTransport_starGenType_recorder {
	return &MoqTransport_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqTransport_starGenType_recorder) RoundTrip(req *http.Request) *MoqTransport_starGenType_RoundTrip_fnRecorder {
	return &MoqTransport_starGenType_RoundTrip_fnRecorder{
		Params: MoqTransport_starGenType_RoundTrip_params{
			Req: req,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTransport_starGenType_RoundTrip_fnRecorder) Any() *MoqTransport_starGenType_RoundTrip_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RoundTrip(r.Params))
		return nil
	}
	return &MoqTransport_starGenType_RoundTrip_anyParams{Recorder: r}
}

func (a *MoqTransport_starGenType_RoundTrip_anyParams) Req() *MoqTransport_starGenType_RoundTrip_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqTransport_starGenType_RoundTrip_fnRecorder) Seq() *MoqTransport_starGenType_RoundTrip_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RoundTrip(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTransport_starGenType_RoundTrip_fnRecorder) NoSeq() *MoqTransport_starGenType_RoundTrip_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RoundTrip(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTransport_starGenType_RoundTrip_fnRecorder) ReturnResults(result1 *http.Response, result2 error) *MoqTransport_starGenType_RoundTrip_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *http.Response
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTransport_starGenType_RoundTrip_doFn
		DoReturnFn MoqTransport_starGenType_RoundTrip_doReturnFn
	}{
		Values: &struct {
			Result1 *http.Response
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTransport_starGenType_RoundTrip_fnRecorder) AndDo(fn MoqTransport_starGenType_RoundTrip_doFn) *MoqTransport_starGenType_RoundTrip_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTransport_starGenType_RoundTrip_fnRecorder) DoReturnResults(fn MoqTransport_starGenType_RoundTrip_doReturnFn) *MoqTransport_starGenType_RoundTrip_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *http.Response
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTransport_starGenType_RoundTrip_doFn
		DoReturnFn MoqTransport_starGenType_RoundTrip_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTransport_starGenType_RoundTrip_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTransport_starGenType_RoundTrip_resultsByParams
	for n, res := range r.Moq.ResultsByParams_RoundTrip {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTransport_starGenType_RoundTrip_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTransport_starGenType_RoundTrip_paramsKey]*MoqTransport_starGenType_RoundTrip_results{},
		}
		r.Moq.ResultsByParams_RoundTrip = append(r.Moq.ResultsByParams_RoundTrip, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_RoundTrip) {
			copy(r.Moq.ResultsByParams_RoundTrip[insertAt+1:], r.Moq.ResultsByParams_RoundTrip[insertAt:0])
			r.Moq.ResultsByParams_RoundTrip[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_RoundTrip(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTransport_starGenType_RoundTrip_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTransport_starGenType_RoundTrip_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTransport_starGenType_RoundTrip_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *http.Response
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqTransport_starGenType_RoundTrip_doFn
				DoReturnFn MoqTransport_starGenType_RoundTrip_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTransport_starGenType) PrettyParams_RoundTrip(params MoqTransport_starGenType_RoundTrip_params) string {
	return fmt.Sprintf("RoundTrip(%#v)", params.Req)
}

func (m *MoqTransport_starGenType) ParamsKey_RoundTrip(params MoqTransport_starGenType_RoundTrip_params, anyParams uint64) MoqTransport_starGenType_RoundTrip_paramsKey {
	m.Scene.T.Helper()
	var reqUsed *http.Request
	var reqUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.RoundTrip.Req == moq.ParamIndexByValue {
			reqUsed = params.Req
		} else {
			reqUsedHash = hash.DeepHash(params.Req)
		}
	}
	return MoqTransport_starGenType_RoundTrip_paramsKey{
		Params: struct{ Req *http.Request }{
			Req: reqUsed,
		},
		Hashes: struct{ Req hash.Hash }{
			Req: reqUsedHash,
		},
	}
}

func (m *MoqTransport_starGenType_recorder) Clone() *MoqTransport_starGenType_Clone_fnRecorder {
	return &MoqTransport_starGenType_Clone_fnRecorder{
		Params:   MoqTransport_starGenType_Clone_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTransport_starGenType_Clone_fnRecorder) Any() *MoqTransport_starGenType_Clone_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Clone(r.Params))
		return nil
	}
	return &MoqTransport_starGenType_Clone_anyParams{Recorder: r}
}

func (r *MoqTransport_starGenType_Clone_fnRecorder) Seq() *MoqTransport_starGenType_Clone_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Clone(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTransport_starGenType_Clone_fnRecorder) NoSeq() *MoqTransport_starGenType_Clone_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Clone(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTransport_starGenType_Clone_fnRecorder) ReturnResults(result1 *http.Transport) *MoqTransport_starGenType_Clone_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *http.Transport
		}
		Sequence   uint32
		DoFn       MoqTransport_starGenType_Clone_doFn
		DoReturnFn MoqTransport_starGenType_Clone_doReturnFn
	}{
		Values: &struct {
			Result1 *http.Transport
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTransport_starGenType_Clone_fnRecorder) AndDo(fn MoqTransport_starGenType_Clone_doFn) *MoqTransport_starGenType_Clone_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTransport_starGenType_Clone_fnRecorder) DoReturnResults(fn MoqTransport_starGenType_Clone_doReturnFn) *MoqTransport_starGenType_Clone_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *http.Transport
		}
		Sequence   uint32
		DoFn       MoqTransport_starGenType_Clone_doFn
		DoReturnFn MoqTransport_starGenType_Clone_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTransport_starGenType_Clone_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTransport_starGenType_Clone_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Clone {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTransport_starGenType_Clone_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTransport_starGenType_Clone_paramsKey]*MoqTransport_starGenType_Clone_results{},
		}
		r.Moq.ResultsByParams_Clone = append(r.Moq.ResultsByParams_Clone, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Clone) {
			copy(r.Moq.ResultsByParams_Clone[insertAt+1:], r.Moq.ResultsByParams_Clone[insertAt:0])
			r.Moq.ResultsByParams_Clone[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Clone(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTransport_starGenType_Clone_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTransport_starGenType_Clone_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTransport_starGenType_Clone_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *http.Transport
				}
				Sequence   uint32
				DoFn       MoqTransport_starGenType_Clone_doFn
				DoReturnFn MoqTransport_starGenType_Clone_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTransport_starGenType) PrettyParams_Clone(params MoqTransport_starGenType_Clone_params) string {
	return fmt.Sprintf("Clone()")
}

func (m *MoqTransport_starGenType) ParamsKey_Clone(params MoqTransport_starGenType_Clone_params, anyParams uint64) MoqTransport_starGenType_Clone_paramsKey {
	m.Scene.T.Helper()
	return MoqTransport_starGenType_Clone_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTransport_starGenType_recorder) RegisterProtocol(scheme string, rt http.RoundTripper) *MoqTransport_starGenType_RegisterProtocol_fnRecorder {
	return &MoqTransport_starGenType_RegisterProtocol_fnRecorder{
		Params: MoqTransport_starGenType_RegisterProtocol_params{
			Scheme: scheme,
			Rt:     rt,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTransport_starGenType_RegisterProtocol_fnRecorder) Any() *MoqTransport_starGenType_RegisterProtocol_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RegisterProtocol(r.Params))
		return nil
	}
	return &MoqTransport_starGenType_RegisterProtocol_anyParams{Recorder: r}
}

func (a *MoqTransport_starGenType_RegisterProtocol_anyParams) Scheme() *MoqTransport_starGenType_RegisterProtocol_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqTransport_starGenType_RegisterProtocol_anyParams) Rt() *MoqTransport_starGenType_RegisterProtocol_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqTransport_starGenType_RegisterProtocol_fnRecorder) Seq() *MoqTransport_starGenType_RegisterProtocol_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RegisterProtocol(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTransport_starGenType_RegisterProtocol_fnRecorder) NoSeq() *MoqTransport_starGenType_RegisterProtocol_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RegisterProtocol(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTransport_starGenType_RegisterProtocol_fnRecorder) ReturnResults() *MoqTransport_starGenType_RegisterProtocol_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqTransport_starGenType_RegisterProtocol_doFn
		DoReturnFn MoqTransport_starGenType_RegisterProtocol_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTransport_starGenType_RegisterProtocol_fnRecorder) AndDo(fn MoqTransport_starGenType_RegisterProtocol_doFn) *MoqTransport_starGenType_RegisterProtocol_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTransport_starGenType_RegisterProtocol_fnRecorder) DoReturnResults(fn MoqTransport_starGenType_RegisterProtocol_doReturnFn) *MoqTransport_starGenType_RegisterProtocol_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqTransport_starGenType_RegisterProtocol_doFn
		DoReturnFn MoqTransport_starGenType_RegisterProtocol_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTransport_starGenType_RegisterProtocol_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTransport_starGenType_RegisterProtocol_resultsByParams
	for n, res := range r.Moq.ResultsByParams_RegisterProtocol {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTransport_starGenType_RegisterProtocol_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTransport_starGenType_RegisterProtocol_paramsKey]*MoqTransport_starGenType_RegisterProtocol_results{},
		}
		r.Moq.ResultsByParams_RegisterProtocol = append(r.Moq.ResultsByParams_RegisterProtocol, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_RegisterProtocol) {
			copy(r.Moq.ResultsByParams_RegisterProtocol[insertAt+1:], r.Moq.ResultsByParams_RegisterProtocol[insertAt:0])
			r.Moq.ResultsByParams_RegisterProtocol[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_RegisterProtocol(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTransport_starGenType_RegisterProtocol_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTransport_starGenType_RegisterProtocol_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTransport_starGenType_RegisterProtocol_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqTransport_starGenType_RegisterProtocol_doFn
				DoReturnFn MoqTransport_starGenType_RegisterProtocol_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTransport_starGenType) PrettyParams_RegisterProtocol(params MoqTransport_starGenType_RegisterProtocol_params) string {
	return fmt.Sprintf("RegisterProtocol(%#v, %#v)", params.Scheme, params.Rt)
}

func (m *MoqTransport_starGenType) ParamsKey_RegisterProtocol(params MoqTransport_starGenType_RegisterProtocol_params, anyParams uint64) MoqTransport_starGenType_RegisterProtocol_paramsKey {
	m.Scene.T.Helper()
	var schemeUsed string
	var schemeUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.RegisterProtocol.Scheme == moq.ParamIndexByValue {
			schemeUsed = params.Scheme
		} else {
			schemeUsedHash = hash.DeepHash(params.Scheme)
		}
	}
	var rtUsed http.RoundTripper
	var rtUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.RegisterProtocol.Rt == moq.ParamIndexByValue {
			rtUsed = params.Rt
		} else {
			rtUsedHash = hash.DeepHash(params.Rt)
		}
	}
	return MoqTransport_starGenType_RegisterProtocol_paramsKey{
		Params: struct {
			Scheme string
			Rt     http.RoundTripper
		}{
			Scheme: schemeUsed,
			Rt:     rtUsed,
		},
		Hashes: struct {
			Scheme hash.Hash
			Rt     hash.Hash
		}{
			Scheme: schemeUsedHash,
			Rt:     rtUsedHash,
		},
	}
}

func (m *MoqTransport_starGenType_recorder) CloseIdleConnections() *MoqTransport_starGenType_CloseIdleConnections_fnRecorder {
	return &MoqTransport_starGenType_CloseIdleConnections_fnRecorder{
		Params:   MoqTransport_starGenType_CloseIdleConnections_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTransport_starGenType_CloseIdleConnections_fnRecorder) Any() *MoqTransport_starGenType_CloseIdleConnections_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CloseIdleConnections(r.Params))
		return nil
	}
	return &MoqTransport_starGenType_CloseIdleConnections_anyParams{Recorder: r}
}

func (r *MoqTransport_starGenType_CloseIdleConnections_fnRecorder) Seq() *MoqTransport_starGenType_CloseIdleConnections_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CloseIdleConnections(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTransport_starGenType_CloseIdleConnections_fnRecorder) NoSeq() *MoqTransport_starGenType_CloseIdleConnections_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CloseIdleConnections(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTransport_starGenType_CloseIdleConnections_fnRecorder) ReturnResults() *MoqTransport_starGenType_CloseIdleConnections_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqTransport_starGenType_CloseIdleConnections_doFn
		DoReturnFn MoqTransport_starGenType_CloseIdleConnections_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTransport_starGenType_CloseIdleConnections_fnRecorder) AndDo(fn MoqTransport_starGenType_CloseIdleConnections_doFn) *MoqTransport_starGenType_CloseIdleConnections_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTransport_starGenType_CloseIdleConnections_fnRecorder) DoReturnResults(fn MoqTransport_starGenType_CloseIdleConnections_doReturnFn) *MoqTransport_starGenType_CloseIdleConnections_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqTransport_starGenType_CloseIdleConnections_doFn
		DoReturnFn MoqTransport_starGenType_CloseIdleConnections_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTransport_starGenType_CloseIdleConnections_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTransport_starGenType_CloseIdleConnections_resultsByParams
	for n, res := range r.Moq.ResultsByParams_CloseIdleConnections {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTransport_starGenType_CloseIdleConnections_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTransport_starGenType_CloseIdleConnections_paramsKey]*MoqTransport_starGenType_CloseIdleConnections_results{},
		}
		r.Moq.ResultsByParams_CloseIdleConnections = append(r.Moq.ResultsByParams_CloseIdleConnections, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_CloseIdleConnections) {
			copy(r.Moq.ResultsByParams_CloseIdleConnections[insertAt+1:], r.Moq.ResultsByParams_CloseIdleConnections[insertAt:0])
			r.Moq.ResultsByParams_CloseIdleConnections[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_CloseIdleConnections(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTransport_starGenType_CloseIdleConnections_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTransport_starGenType_CloseIdleConnections_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTransport_starGenType_CloseIdleConnections_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqTransport_starGenType_CloseIdleConnections_doFn
				DoReturnFn MoqTransport_starGenType_CloseIdleConnections_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTransport_starGenType) PrettyParams_CloseIdleConnections(params MoqTransport_starGenType_CloseIdleConnections_params) string {
	return fmt.Sprintf("CloseIdleConnections()")
}

func (m *MoqTransport_starGenType) ParamsKey_CloseIdleConnections(params MoqTransport_starGenType_CloseIdleConnections_params, anyParams uint64) MoqTransport_starGenType_CloseIdleConnections_paramsKey {
	m.Scene.T.Helper()
	return MoqTransport_starGenType_CloseIdleConnections_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTransport_starGenType_recorder) CancelRequest(req *http.Request) *MoqTransport_starGenType_CancelRequest_fnRecorder {
	return &MoqTransport_starGenType_CancelRequest_fnRecorder{
		Params: MoqTransport_starGenType_CancelRequest_params{
			Req: req,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTransport_starGenType_CancelRequest_fnRecorder) Any() *MoqTransport_starGenType_CancelRequest_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CancelRequest(r.Params))
		return nil
	}
	return &MoqTransport_starGenType_CancelRequest_anyParams{Recorder: r}
}

func (a *MoqTransport_starGenType_CancelRequest_anyParams) Req() *MoqTransport_starGenType_CancelRequest_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqTransport_starGenType_CancelRequest_fnRecorder) Seq() *MoqTransport_starGenType_CancelRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CancelRequest(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTransport_starGenType_CancelRequest_fnRecorder) NoSeq() *MoqTransport_starGenType_CancelRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CancelRequest(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTransport_starGenType_CancelRequest_fnRecorder) ReturnResults() *MoqTransport_starGenType_CancelRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqTransport_starGenType_CancelRequest_doFn
		DoReturnFn MoqTransport_starGenType_CancelRequest_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTransport_starGenType_CancelRequest_fnRecorder) AndDo(fn MoqTransport_starGenType_CancelRequest_doFn) *MoqTransport_starGenType_CancelRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTransport_starGenType_CancelRequest_fnRecorder) DoReturnResults(fn MoqTransport_starGenType_CancelRequest_doReturnFn) *MoqTransport_starGenType_CancelRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqTransport_starGenType_CancelRequest_doFn
		DoReturnFn MoqTransport_starGenType_CancelRequest_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTransport_starGenType_CancelRequest_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTransport_starGenType_CancelRequest_resultsByParams
	for n, res := range r.Moq.ResultsByParams_CancelRequest {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTransport_starGenType_CancelRequest_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTransport_starGenType_CancelRequest_paramsKey]*MoqTransport_starGenType_CancelRequest_results{},
		}
		r.Moq.ResultsByParams_CancelRequest = append(r.Moq.ResultsByParams_CancelRequest, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_CancelRequest) {
			copy(r.Moq.ResultsByParams_CancelRequest[insertAt+1:], r.Moq.ResultsByParams_CancelRequest[insertAt:0])
			r.Moq.ResultsByParams_CancelRequest[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_CancelRequest(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTransport_starGenType_CancelRequest_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTransport_starGenType_CancelRequest_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTransport_starGenType_CancelRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqTransport_starGenType_CancelRequest_doFn
				DoReturnFn MoqTransport_starGenType_CancelRequest_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTransport_starGenType) PrettyParams_CancelRequest(params MoqTransport_starGenType_CancelRequest_params) string {
	return fmt.Sprintf("CancelRequest(%#v)", params.Req)
}

func (m *MoqTransport_starGenType) ParamsKey_CancelRequest(params MoqTransport_starGenType_CancelRequest_params, anyParams uint64) MoqTransport_starGenType_CancelRequest_paramsKey {
	m.Scene.T.Helper()
	var reqUsed *http.Request
	var reqUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.CancelRequest.Req == moq.ParamIndexByValue {
			reqUsed = params.Req
		} else {
			reqUsedHash = hash.DeepHash(params.Req)
		}
	}
	return MoqTransport_starGenType_CancelRequest_paramsKey{
		Params: struct{ Req *http.Request }{
			Req: reqUsed,
		},
		Hashes: struct{ Req hash.Hash }{
			Req: reqUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqTransport_starGenType) Reset() {
	m.ResultsByParams_RoundTrip = nil
	m.ResultsByParams_Clone = nil
	m.ResultsByParams_RegisterProtocol = nil
	m.ResultsByParams_CloseIdleConnections = nil
	m.ResultsByParams_CancelRequest = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqTransport_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_RoundTrip {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_RoundTrip(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Clone {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Clone(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_RegisterProtocol {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_RegisterProtocol(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_CloseIdleConnections {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_CloseIdleConnections(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_CancelRequest {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_CancelRequest(results.Params))
			}
		}
	}
}
