// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package http

import (
	"context"
	"fmt"
	"math/bits"
	"net"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that http.Server_starGenType is mocked
// completely
var _ Server_starGenType = (*MoqServer_starGenType_mock)(nil)

// Server_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Server_starGenType interface {
	Close() error
	Shutdown(ctx context.Context) error
	RegisterOnShutdown(f func())
	ListenAndServe() error
	Serve(l net.Listener) error
	ServeTLS(l net.Listener, certFile, keyFile string) error
	SetKeepAlivesEnabled(v bool)
	ListenAndServeTLS(certFile, keyFile string) error
}

// MoqServer_starGenType holds the state of a moq of the Server_starGenType
// type
type MoqServer_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqServer_starGenType_mock

	ResultsByParams_Close                []MoqServer_starGenType_Close_resultsByParams
	ResultsByParams_Shutdown             []MoqServer_starGenType_Shutdown_resultsByParams
	ResultsByParams_RegisterOnShutdown   []MoqServer_starGenType_RegisterOnShutdown_resultsByParams
	ResultsByParams_ListenAndServe       []MoqServer_starGenType_ListenAndServe_resultsByParams
	ResultsByParams_Serve                []MoqServer_starGenType_Serve_resultsByParams
	ResultsByParams_ServeTLS             []MoqServer_starGenType_ServeTLS_resultsByParams
	ResultsByParams_SetKeepAlivesEnabled []MoqServer_starGenType_SetKeepAlivesEnabled_resultsByParams
	ResultsByParams_ListenAndServeTLS    []MoqServer_starGenType_ListenAndServeTLS_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Close    struct{}
			Shutdown struct {
				Ctx moq.ParamIndexing
			}
			RegisterOnShutdown struct {
				F moq.ParamIndexing
			}
			ListenAndServe struct{}
			Serve          struct {
				L moq.ParamIndexing
			}
			ServeTLS struct {
				L        moq.ParamIndexing
				CertFile moq.ParamIndexing
				KeyFile  moq.ParamIndexing
			}
			SetKeepAlivesEnabled struct {
				V moq.ParamIndexing
			}
			ListenAndServeTLS struct {
				CertFile moq.ParamIndexing
				KeyFile  moq.ParamIndexing
			}
		}
	}
	// MoqServer_starGenType_mock isolates the mock interface of the
}

// Server_starGenType type
type MoqServer_starGenType_mock struct {
	Moq *MoqServer_starGenType
}

// MoqServer_starGenType_recorder isolates the recorder interface of the
// Server_starGenType type
type MoqServer_starGenType_recorder struct {
	Moq *MoqServer_starGenType
}

// MoqServer_starGenType_Close_params holds the params of the
// Server_starGenType type
type MoqServer_starGenType_Close_params struct{}

// MoqServer_starGenType_Close_paramsKey holds the map key params of the
// Server_starGenType type
type MoqServer_starGenType_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqServer_starGenType_Close_resultsByParams contains the results for a given
// set of parameters for the Server_starGenType type
type MoqServer_starGenType_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServer_starGenType_Close_paramsKey]*MoqServer_starGenType_Close_results
}

// MoqServer_starGenType_Close_doFn defines the type of function needed when
// calling AndDo for the Server_starGenType type
type MoqServer_starGenType_Close_doFn func()

// MoqServer_starGenType_Close_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Server_starGenType type
type MoqServer_starGenType_Close_doReturnFn func() error

// MoqServer_starGenType_Close_results holds the results of the
// Server_starGenType type
type MoqServer_starGenType_Close_results struct {
	Params  MoqServer_starGenType_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Close_doFn
		DoReturnFn MoqServer_starGenType_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServer_starGenType_Close_fnRecorder routes recorded function calls to the
// MoqServer_starGenType moq
type MoqServer_starGenType_Close_fnRecorder struct {
	Params    MoqServer_starGenType_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServer_starGenType_Close_results
	Moq       *MoqServer_starGenType
}

// MoqServer_starGenType_Close_anyParams isolates the any params functions of
// the Server_starGenType type
type MoqServer_starGenType_Close_anyParams struct {
	Recorder *MoqServer_starGenType_Close_fnRecorder
}

// MoqServer_starGenType_Shutdown_params holds the params of the
// Server_starGenType type
type MoqServer_starGenType_Shutdown_params struct{ Ctx context.Context }

// MoqServer_starGenType_Shutdown_paramsKey holds the map key params of the
// Server_starGenType type
type MoqServer_starGenType_Shutdown_paramsKey struct {
	Params struct{ Ctx context.Context }
	Hashes struct{ Ctx hash.Hash }
}

// MoqServer_starGenType_Shutdown_resultsByParams contains the results for a
// given set of parameters for the Server_starGenType type
type MoqServer_starGenType_Shutdown_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServer_starGenType_Shutdown_paramsKey]*MoqServer_starGenType_Shutdown_results
}

// MoqServer_starGenType_Shutdown_doFn defines the type of function needed when
// calling AndDo for the Server_starGenType type
type MoqServer_starGenType_Shutdown_doFn func(ctx context.Context)

// MoqServer_starGenType_Shutdown_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Server_starGenType type
type MoqServer_starGenType_Shutdown_doReturnFn func(ctx context.Context) error

// MoqServer_starGenType_Shutdown_results holds the results of the
// Server_starGenType type
type MoqServer_starGenType_Shutdown_results struct {
	Params  MoqServer_starGenType_Shutdown_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Shutdown_doFn
		DoReturnFn MoqServer_starGenType_Shutdown_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServer_starGenType_Shutdown_fnRecorder routes recorded function calls to
// the MoqServer_starGenType moq
type MoqServer_starGenType_Shutdown_fnRecorder struct {
	Params    MoqServer_starGenType_Shutdown_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServer_starGenType_Shutdown_results
	Moq       *MoqServer_starGenType
}

// MoqServer_starGenType_Shutdown_anyParams isolates the any params functions
// of the Server_starGenType type
type MoqServer_starGenType_Shutdown_anyParams struct {
	Recorder *MoqServer_starGenType_Shutdown_fnRecorder
}

// MoqServer_starGenType_RegisterOnShutdown_params holds the params of the
// Server_starGenType type
type MoqServer_starGenType_RegisterOnShutdown_params struct{ F func() }

// MoqServer_starGenType_RegisterOnShutdown_paramsKey holds the map key params
// of the Server_starGenType type
type MoqServer_starGenType_RegisterOnShutdown_paramsKey struct {
	Params struct{}
	Hashes struct{ F hash.Hash }
}

// MoqServer_starGenType_RegisterOnShutdown_resultsByParams contains the
// results for a given set of parameters for the Server_starGenType type
type MoqServer_starGenType_RegisterOnShutdown_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServer_starGenType_RegisterOnShutdown_paramsKey]*MoqServer_starGenType_RegisterOnShutdown_results
}

// MoqServer_starGenType_RegisterOnShutdown_doFn defines the type of function
// needed when calling AndDo for the Server_starGenType type
type MoqServer_starGenType_RegisterOnShutdown_doFn func(f func())

// MoqServer_starGenType_RegisterOnShutdown_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Server_starGenType type
type MoqServer_starGenType_RegisterOnShutdown_doReturnFn func(f func())

// MoqServer_starGenType_RegisterOnShutdown_results holds the results of the
// Server_starGenType type
type MoqServer_starGenType_RegisterOnShutdown_results struct {
	Params  MoqServer_starGenType_RegisterOnShutdown_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServer_starGenType_RegisterOnShutdown_doFn
		DoReturnFn MoqServer_starGenType_RegisterOnShutdown_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServer_starGenType_RegisterOnShutdown_fnRecorder routes recorded function
// calls to the MoqServer_starGenType moq
type MoqServer_starGenType_RegisterOnShutdown_fnRecorder struct {
	Params    MoqServer_starGenType_RegisterOnShutdown_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServer_starGenType_RegisterOnShutdown_results
	Moq       *MoqServer_starGenType
}

// MoqServer_starGenType_RegisterOnShutdown_anyParams isolates the any params
// functions of the Server_starGenType type
type MoqServer_starGenType_RegisterOnShutdown_anyParams struct {
	Recorder *MoqServer_starGenType_RegisterOnShutdown_fnRecorder
}

// MoqServer_starGenType_ListenAndServe_params holds the params of the
// Server_starGenType type
type MoqServer_starGenType_ListenAndServe_params struct{}

// MoqServer_starGenType_ListenAndServe_paramsKey holds the map key params of
// the Server_starGenType type
type MoqServer_starGenType_ListenAndServe_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqServer_starGenType_ListenAndServe_resultsByParams contains the results
// for a given set of parameters for the Server_starGenType type
type MoqServer_starGenType_ListenAndServe_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServer_starGenType_ListenAndServe_paramsKey]*MoqServer_starGenType_ListenAndServe_results
}

// MoqServer_starGenType_ListenAndServe_doFn defines the type of function
// needed when calling AndDo for the Server_starGenType type
type MoqServer_starGenType_ListenAndServe_doFn func()

// MoqServer_starGenType_ListenAndServe_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Server_starGenType type
type MoqServer_starGenType_ListenAndServe_doReturnFn func() error

// MoqServer_starGenType_ListenAndServe_results holds the results of the
// Server_starGenType type
type MoqServer_starGenType_ListenAndServe_results struct {
	Params  MoqServer_starGenType_ListenAndServe_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_ListenAndServe_doFn
		DoReturnFn MoqServer_starGenType_ListenAndServe_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServer_starGenType_ListenAndServe_fnRecorder routes recorded function
// calls to the MoqServer_starGenType moq
type MoqServer_starGenType_ListenAndServe_fnRecorder struct {
	Params    MoqServer_starGenType_ListenAndServe_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServer_starGenType_ListenAndServe_results
	Moq       *MoqServer_starGenType
}

// MoqServer_starGenType_ListenAndServe_anyParams isolates the any params
// functions of the Server_starGenType type
type MoqServer_starGenType_ListenAndServe_anyParams struct {
	Recorder *MoqServer_starGenType_ListenAndServe_fnRecorder
}

// MoqServer_starGenType_Serve_params holds the params of the
// Server_starGenType type
type MoqServer_starGenType_Serve_params struct{ L net.Listener }

// MoqServer_starGenType_Serve_paramsKey holds the map key params of the
// Server_starGenType type
type MoqServer_starGenType_Serve_paramsKey struct {
	Params struct{ L net.Listener }
	Hashes struct{ L hash.Hash }
}

// MoqServer_starGenType_Serve_resultsByParams contains the results for a given
// set of parameters for the Server_starGenType type
type MoqServer_starGenType_Serve_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServer_starGenType_Serve_paramsKey]*MoqServer_starGenType_Serve_results
}

// MoqServer_starGenType_Serve_doFn defines the type of function needed when
// calling AndDo for the Server_starGenType type
type MoqServer_starGenType_Serve_doFn func(l net.Listener)

// MoqServer_starGenType_Serve_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Server_starGenType type
type MoqServer_starGenType_Serve_doReturnFn func(l net.Listener) error

// MoqServer_starGenType_Serve_results holds the results of the
// Server_starGenType type
type MoqServer_starGenType_Serve_results struct {
	Params  MoqServer_starGenType_Serve_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Serve_doFn
		DoReturnFn MoqServer_starGenType_Serve_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServer_starGenType_Serve_fnRecorder routes recorded function calls to the
// MoqServer_starGenType moq
type MoqServer_starGenType_Serve_fnRecorder struct {
	Params    MoqServer_starGenType_Serve_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServer_starGenType_Serve_results
	Moq       *MoqServer_starGenType
}

// MoqServer_starGenType_Serve_anyParams isolates the any params functions of
// the Server_starGenType type
type MoqServer_starGenType_Serve_anyParams struct {
	Recorder *MoqServer_starGenType_Serve_fnRecorder
}

// MoqServer_starGenType_ServeTLS_params holds the params of the
// Server_starGenType type
type MoqServer_starGenType_ServeTLS_params struct {
	L                 net.Listener
	CertFile, KeyFile string
}

// MoqServer_starGenType_ServeTLS_paramsKey holds the map key params of the
// Server_starGenType type
type MoqServer_starGenType_ServeTLS_paramsKey struct {
	Params struct {
		L                 net.Listener
		CertFile, KeyFile string
	}
	Hashes struct {
		L                 hash.Hash
		CertFile, KeyFile hash.Hash
	}
}

// MoqServer_starGenType_ServeTLS_resultsByParams contains the results for a
// given set of parameters for the Server_starGenType type
type MoqServer_starGenType_ServeTLS_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServer_starGenType_ServeTLS_paramsKey]*MoqServer_starGenType_ServeTLS_results
}

// MoqServer_starGenType_ServeTLS_doFn defines the type of function needed when
// calling AndDo for the Server_starGenType type
type MoqServer_starGenType_ServeTLS_doFn func(l net.Listener, certFile, keyFile string)

// MoqServer_starGenType_ServeTLS_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Server_starGenType type
type MoqServer_starGenType_ServeTLS_doReturnFn func(l net.Listener, certFile, keyFile string) error

// MoqServer_starGenType_ServeTLS_results holds the results of the
// Server_starGenType type
type MoqServer_starGenType_ServeTLS_results struct {
	Params  MoqServer_starGenType_ServeTLS_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_ServeTLS_doFn
		DoReturnFn MoqServer_starGenType_ServeTLS_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServer_starGenType_ServeTLS_fnRecorder routes recorded function calls to
// the MoqServer_starGenType moq
type MoqServer_starGenType_ServeTLS_fnRecorder struct {
	Params    MoqServer_starGenType_ServeTLS_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServer_starGenType_ServeTLS_results
	Moq       *MoqServer_starGenType
}

// MoqServer_starGenType_ServeTLS_anyParams isolates the any params functions
// of the Server_starGenType type
type MoqServer_starGenType_ServeTLS_anyParams struct {
	Recorder *MoqServer_starGenType_ServeTLS_fnRecorder
}

// MoqServer_starGenType_SetKeepAlivesEnabled_params holds the params of the
// Server_starGenType type
type MoqServer_starGenType_SetKeepAlivesEnabled_params struct{ V bool }

// MoqServer_starGenType_SetKeepAlivesEnabled_paramsKey holds the map key
// params of the Server_starGenType type
type MoqServer_starGenType_SetKeepAlivesEnabled_paramsKey struct {
	Params struct{ V bool }
	Hashes struct{ V hash.Hash }
}

// MoqServer_starGenType_SetKeepAlivesEnabled_resultsByParams contains the
// results for a given set of parameters for the Server_starGenType type
type MoqServer_starGenType_SetKeepAlivesEnabled_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServer_starGenType_SetKeepAlivesEnabled_paramsKey]*MoqServer_starGenType_SetKeepAlivesEnabled_results
}

// MoqServer_starGenType_SetKeepAlivesEnabled_doFn defines the type of function
// needed when calling AndDo for the Server_starGenType type
type MoqServer_starGenType_SetKeepAlivesEnabled_doFn func(v bool)

// MoqServer_starGenType_SetKeepAlivesEnabled_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Server_starGenType type
type MoqServer_starGenType_SetKeepAlivesEnabled_doReturnFn func(v bool)

// MoqServer_starGenType_SetKeepAlivesEnabled_results holds the results of the
// Server_starGenType type
type MoqServer_starGenType_SetKeepAlivesEnabled_results struct {
	Params  MoqServer_starGenType_SetKeepAlivesEnabled_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServer_starGenType_SetKeepAlivesEnabled_doFn
		DoReturnFn MoqServer_starGenType_SetKeepAlivesEnabled_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder routes recorded
// function calls to the MoqServer_starGenType moq
type MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder struct {
	Params    MoqServer_starGenType_SetKeepAlivesEnabled_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServer_starGenType_SetKeepAlivesEnabled_results
	Moq       *MoqServer_starGenType
}

// MoqServer_starGenType_SetKeepAlivesEnabled_anyParams isolates the any params
// functions of the Server_starGenType type
type MoqServer_starGenType_SetKeepAlivesEnabled_anyParams struct {
	Recorder *MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder
}

// MoqServer_starGenType_ListenAndServeTLS_params holds the params of the
// Server_starGenType type
type MoqServer_starGenType_ListenAndServeTLS_params struct{ CertFile, KeyFile string }

// MoqServer_starGenType_ListenAndServeTLS_paramsKey holds the map key params
// of the Server_starGenType type
type MoqServer_starGenType_ListenAndServeTLS_paramsKey struct {
	Params struct{ CertFile, KeyFile string }
	Hashes struct{ CertFile, KeyFile hash.Hash }
}

// MoqServer_starGenType_ListenAndServeTLS_resultsByParams contains the results
// for a given set of parameters for the Server_starGenType type
type MoqServer_starGenType_ListenAndServeTLS_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServer_starGenType_ListenAndServeTLS_paramsKey]*MoqServer_starGenType_ListenAndServeTLS_results
}

// MoqServer_starGenType_ListenAndServeTLS_doFn defines the type of function
// needed when calling AndDo for the Server_starGenType type
type MoqServer_starGenType_ListenAndServeTLS_doFn func(certFile, keyFile string)

// MoqServer_starGenType_ListenAndServeTLS_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Server_starGenType type
type MoqServer_starGenType_ListenAndServeTLS_doReturnFn func(certFile, keyFile string) error

// MoqServer_starGenType_ListenAndServeTLS_results holds the results of the
// Server_starGenType type
type MoqServer_starGenType_ListenAndServeTLS_results struct {
	Params  MoqServer_starGenType_ListenAndServeTLS_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_ListenAndServeTLS_doFn
		DoReturnFn MoqServer_starGenType_ListenAndServeTLS_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServer_starGenType_ListenAndServeTLS_fnRecorder routes recorded function
// calls to the MoqServer_starGenType moq
type MoqServer_starGenType_ListenAndServeTLS_fnRecorder struct {
	Params    MoqServer_starGenType_ListenAndServeTLS_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServer_starGenType_ListenAndServeTLS_results
	Moq       *MoqServer_starGenType
}

// MoqServer_starGenType_ListenAndServeTLS_anyParams isolates the any params
// functions of the Server_starGenType type
type MoqServer_starGenType_ListenAndServeTLS_anyParams struct {
	Recorder *MoqServer_starGenType_ListenAndServeTLS_fnRecorder
}

// NewMoqServer_starGenType creates a new moq of the Server_starGenType type
func NewMoqServer_starGenType(scene *moq.Scene, config *moq.Config) *MoqServer_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqServer_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqServer_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Close    struct{}
				Shutdown struct {
					Ctx moq.ParamIndexing
				}
				RegisterOnShutdown struct {
					F moq.ParamIndexing
				}
				ListenAndServe struct{}
				Serve          struct {
					L moq.ParamIndexing
				}
				ServeTLS struct {
					L        moq.ParamIndexing
					CertFile moq.ParamIndexing
					KeyFile  moq.ParamIndexing
				}
				SetKeepAlivesEnabled struct {
					V moq.ParamIndexing
				}
				ListenAndServeTLS struct {
					CertFile moq.ParamIndexing
					KeyFile  moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Close    struct{}
			Shutdown struct {
				Ctx moq.ParamIndexing
			}
			RegisterOnShutdown struct {
				F moq.ParamIndexing
			}
			ListenAndServe struct{}
			Serve          struct {
				L moq.ParamIndexing
			}
			ServeTLS struct {
				L        moq.ParamIndexing
				CertFile moq.ParamIndexing
				KeyFile  moq.ParamIndexing
			}
			SetKeepAlivesEnabled struct {
				V moq.ParamIndexing
			}
			ListenAndServeTLS struct {
				CertFile moq.ParamIndexing
				KeyFile  moq.ParamIndexing
			}
		}{
			Close: struct{}{},
			Shutdown: struct {
				Ctx moq.ParamIndexing
			}{
				Ctx: moq.ParamIndexByHash,
			},
			RegisterOnShutdown: struct {
				F moq.ParamIndexing
			}{
				F: moq.ParamIndexByHash,
			},
			ListenAndServe: struct{}{},
			Serve: struct {
				L moq.ParamIndexing
			}{
				L: moq.ParamIndexByHash,
			},
			ServeTLS: struct {
				L        moq.ParamIndexing
				CertFile moq.ParamIndexing
				KeyFile  moq.ParamIndexing
			}{
				L:        moq.ParamIndexByHash,
				CertFile: moq.ParamIndexByValue,
				KeyFile:  moq.ParamIndexByValue,
			},
			SetKeepAlivesEnabled: struct {
				V moq.ParamIndexing
			}{
				V: moq.ParamIndexByValue,
			},
			ListenAndServeTLS: struct {
				CertFile moq.ParamIndexing
				KeyFile  moq.ParamIndexing
			}{
				CertFile: moq.ParamIndexByValue,
				KeyFile:  moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Server_starGenType type
func (m *MoqServer_starGenType) Mock() *MoqServer_starGenType_mock { return m.Moq }

func (m *MoqServer_starGenType_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqServer_starGenType_Close_params{}
	var results *MoqServer_starGenType_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqServer_starGenType_mock) Shutdown(ctx context.Context) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqServer_starGenType_Shutdown_params{
		Ctx: ctx,
	}
	var results *MoqServer_starGenType_Shutdown_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Shutdown {
		paramsKey := m.Moq.ParamsKey_Shutdown(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Shutdown(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Shutdown(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Shutdown(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(ctx)
	}
	return
}

func (m *MoqServer_starGenType_mock) RegisterOnShutdown(f func()) {
	m.Moq.Scene.T.Helper()
	params := MoqServer_starGenType_RegisterOnShutdown_params{
		F: f,
	}
	var results *MoqServer_starGenType_RegisterOnShutdown_results
	for _, resultsByParams := range m.Moq.ResultsByParams_RegisterOnShutdown {
		paramsKey := m.Moq.ParamsKey_RegisterOnShutdown(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_RegisterOnShutdown(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_RegisterOnShutdown(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_RegisterOnShutdown(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(f)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(f)
	}
	return
}

func (m *MoqServer_starGenType_mock) ListenAndServe() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqServer_starGenType_ListenAndServe_params{}
	var results *MoqServer_starGenType_ListenAndServe_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ListenAndServe {
		paramsKey := m.Moq.ParamsKey_ListenAndServe(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ListenAndServe(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ListenAndServe(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ListenAndServe(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqServer_starGenType_mock) Serve(l net.Listener) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqServer_starGenType_Serve_params{
		L: l,
	}
	var results *MoqServer_starGenType_Serve_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Serve {
		paramsKey := m.Moq.ParamsKey_Serve(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Serve(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Serve(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Serve(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(l)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(l)
	}
	return
}

func (m *MoqServer_starGenType_mock) ServeTLS(l net.Listener, certFile, keyFile string) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqServer_starGenType_ServeTLS_params{
		L:        l,
		CertFile: certFile,
		KeyFile:  keyFile,
	}
	var results *MoqServer_starGenType_ServeTLS_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ServeTLS {
		paramsKey := m.Moq.ParamsKey_ServeTLS(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ServeTLS(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ServeTLS(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ServeTLS(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(l, certFile, keyFile)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(l, certFile, keyFile)
	}
	return
}

func (m *MoqServer_starGenType_mock) SetKeepAlivesEnabled(v bool) {
	m.Moq.Scene.T.Helper()
	params := MoqServer_starGenType_SetKeepAlivesEnabled_params{
		V: v,
	}
	var results *MoqServer_starGenType_SetKeepAlivesEnabled_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetKeepAlivesEnabled {
		paramsKey := m.Moq.ParamsKey_SetKeepAlivesEnabled(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetKeepAlivesEnabled(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetKeepAlivesEnabled(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetKeepAlivesEnabled(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(v)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(v)
	}
	return
}

func (m *MoqServer_starGenType_mock) ListenAndServeTLS(certFile, keyFile string) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqServer_starGenType_ListenAndServeTLS_params{
		CertFile: certFile,
		KeyFile:  keyFile,
	}
	var results *MoqServer_starGenType_ListenAndServeTLS_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ListenAndServeTLS {
		paramsKey := m.Moq.ParamsKey_ListenAndServeTLS(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ListenAndServeTLS(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ListenAndServeTLS(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ListenAndServeTLS(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(certFile, keyFile)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(certFile, keyFile)
	}
	return
}

// OnCall returns the recorder implementation of the Server_starGenType type
func (m *MoqServer_starGenType) OnCall() *MoqServer_starGenType_recorder {
	return &MoqServer_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqServer_starGenType_recorder) Close() *MoqServer_starGenType_Close_fnRecorder {
	return &MoqServer_starGenType_Close_fnRecorder{
		Params:   MoqServer_starGenType_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServer_starGenType_Close_fnRecorder) Any() *MoqServer_starGenType_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqServer_starGenType_Close_anyParams{Recorder: r}
}

func (r *MoqServer_starGenType_Close_fnRecorder) Seq() *MoqServer_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServer_starGenType_Close_fnRecorder) NoSeq() *MoqServer_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServer_starGenType_Close_fnRecorder) ReturnResults(result1 error) *MoqServer_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Close_doFn
		DoReturnFn MoqServer_starGenType_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServer_starGenType_Close_fnRecorder) AndDo(fn MoqServer_starGenType_Close_doFn) *MoqServer_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServer_starGenType_Close_fnRecorder) DoReturnResults(fn MoqServer_starGenType_Close_doReturnFn) *MoqServer_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Close_doFn
		DoReturnFn MoqServer_starGenType_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServer_starGenType_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServer_starGenType_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServer_starGenType_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServer_starGenType_Close_paramsKey]*MoqServer_starGenType_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServer_starGenType_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServer_starGenType_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServer_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqServer_starGenType_Close_doFn
				DoReturnFn MoqServer_starGenType_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServer_starGenType) PrettyParams_Close(params MoqServer_starGenType_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqServer_starGenType) ParamsKey_Close(params MoqServer_starGenType_Close_params, anyParams uint64) MoqServer_starGenType_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqServer_starGenType_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqServer_starGenType_recorder) Shutdown(ctx context.Context) *MoqServer_starGenType_Shutdown_fnRecorder {
	return &MoqServer_starGenType_Shutdown_fnRecorder{
		Params: MoqServer_starGenType_Shutdown_params{
			Ctx: ctx,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServer_starGenType_Shutdown_fnRecorder) Any() *MoqServer_starGenType_Shutdown_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Shutdown(r.Params))
		return nil
	}
	return &MoqServer_starGenType_Shutdown_anyParams{Recorder: r}
}

func (a *MoqServer_starGenType_Shutdown_anyParams) Ctx() *MoqServer_starGenType_Shutdown_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqServer_starGenType_Shutdown_fnRecorder) Seq() *MoqServer_starGenType_Shutdown_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Shutdown(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServer_starGenType_Shutdown_fnRecorder) NoSeq() *MoqServer_starGenType_Shutdown_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Shutdown(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServer_starGenType_Shutdown_fnRecorder) ReturnResults(result1 error) *MoqServer_starGenType_Shutdown_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Shutdown_doFn
		DoReturnFn MoqServer_starGenType_Shutdown_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServer_starGenType_Shutdown_fnRecorder) AndDo(fn MoqServer_starGenType_Shutdown_doFn) *MoqServer_starGenType_Shutdown_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServer_starGenType_Shutdown_fnRecorder) DoReturnResults(fn MoqServer_starGenType_Shutdown_doReturnFn) *MoqServer_starGenType_Shutdown_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Shutdown_doFn
		DoReturnFn MoqServer_starGenType_Shutdown_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServer_starGenType_Shutdown_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServer_starGenType_Shutdown_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Shutdown {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServer_starGenType_Shutdown_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServer_starGenType_Shutdown_paramsKey]*MoqServer_starGenType_Shutdown_results{},
		}
		r.Moq.ResultsByParams_Shutdown = append(r.Moq.ResultsByParams_Shutdown, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Shutdown) {
			copy(r.Moq.ResultsByParams_Shutdown[insertAt+1:], r.Moq.ResultsByParams_Shutdown[insertAt:0])
			r.Moq.ResultsByParams_Shutdown[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Shutdown(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServer_starGenType_Shutdown_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServer_starGenType_Shutdown_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServer_starGenType_Shutdown_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqServer_starGenType_Shutdown_doFn
				DoReturnFn MoqServer_starGenType_Shutdown_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServer_starGenType) PrettyParams_Shutdown(params MoqServer_starGenType_Shutdown_params) string {
	return fmt.Sprintf("Shutdown(%#v)", params.Ctx)
}

func (m *MoqServer_starGenType) ParamsKey_Shutdown(params MoqServer_starGenType_Shutdown_params, anyParams uint64) MoqServer_starGenType_Shutdown_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Shutdown.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	return MoqServer_starGenType_Shutdown_paramsKey{
		Params: struct{ Ctx context.Context }{
			Ctx: ctxUsed,
		},
		Hashes: struct{ Ctx hash.Hash }{
			Ctx: ctxUsedHash,
		},
	}
}

func (m *MoqServer_starGenType_recorder) RegisterOnShutdown(f func()) *MoqServer_starGenType_RegisterOnShutdown_fnRecorder {
	return &MoqServer_starGenType_RegisterOnShutdown_fnRecorder{
		Params: MoqServer_starGenType_RegisterOnShutdown_params{
			F: f,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServer_starGenType_RegisterOnShutdown_fnRecorder) Any() *MoqServer_starGenType_RegisterOnShutdown_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RegisterOnShutdown(r.Params))
		return nil
	}
	return &MoqServer_starGenType_RegisterOnShutdown_anyParams{Recorder: r}
}

func (a *MoqServer_starGenType_RegisterOnShutdown_anyParams) F() *MoqServer_starGenType_RegisterOnShutdown_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqServer_starGenType_RegisterOnShutdown_fnRecorder) Seq() *MoqServer_starGenType_RegisterOnShutdown_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RegisterOnShutdown(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServer_starGenType_RegisterOnShutdown_fnRecorder) NoSeq() *MoqServer_starGenType_RegisterOnShutdown_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RegisterOnShutdown(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServer_starGenType_RegisterOnShutdown_fnRecorder) ReturnResults() *MoqServer_starGenType_RegisterOnShutdown_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServer_starGenType_RegisterOnShutdown_doFn
		DoReturnFn MoqServer_starGenType_RegisterOnShutdown_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServer_starGenType_RegisterOnShutdown_fnRecorder) AndDo(fn MoqServer_starGenType_RegisterOnShutdown_doFn) *MoqServer_starGenType_RegisterOnShutdown_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServer_starGenType_RegisterOnShutdown_fnRecorder) DoReturnResults(fn MoqServer_starGenType_RegisterOnShutdown_doReturnFn) *MoqServer_starGenType_RegisterOnShutdown_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServer_starGenType_RegisterOnShutdown_doFn
		DoReturnFn MoqServer_starGenType_RegisterOnShutdown_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServer_starGenType_RegisterOnShutdown_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServer_starGenType_RegisterOnShutdown_resultsByParams
	for n, res := range r.Moq.ResultsByParams_RegisterOnShutdown {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServer_starGenType_RegisterOnShutdown_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServer_starGenType_RegisterOnShutdown_paramsKey]*MoqServer_starGenType_RegisterOnShutdown_results{},
		}
		r.Moq.ResultsByParams_RegisterOnShutdown = append(r.Moq.ResultsByParams_RegisterOnShutdown, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_RegisterOnShutdown) {
			copy(r.Moq.ResultsByParams_RegisterOnShutdown[insertAt+1:], r.Moq.ResultsByParams_RegisterOnShutdown[insertAt:0])
			r.Moq.ResultsByParams_RegisterOnShutdown[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_RegisterOnShutdown(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServer_starGenType_RegisterOnShutdown_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServer_starGenType_RegisterOnShutdown_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServer_starGenType_RegisterOnShutdown_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqServer_starGenType_RegisterOnShutdown_doFn
				DoReturnFn MoqServer_starGenType_RegisterOnShutdown_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServer_starGenType) PrettyParams_RegisterOnShutdown(params MoqServer_starGenType_RegisterOnShutdown_params) string {
	return fmt.Sprintf("RegisterOnShutdown(%#v)", moq.FnString(params.F))
}

func (m *MoqServer_starGenType) ParamsKey_RegisterOnShutdown(params MoqServer_starGenType_RegisterOnShutdown_params, anyParams uint64) MoqServer_starGenType_RegisterOnShutdown_paramsKey {
	m.Scene.T.Helper()
	var fUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.RegisterOnShutdown.F == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The f parameter of the RegisterOnShutdown function can't be indexed by value")
		}
		fUsedHash = hash.DeepHash(params.F)
	}
	return MoqServer_starGenType_RegisterOnShutdown_paramsKey{
		Params: struct{}{},
		Hashes: struct{ F hash.Hash }{
			F: fUsedHash,
		},
	}
}

func (m *MoqServer_starGenType_recorder) ListenAndServe() *MoqServer_starGenType_ListenAndServe_fnRecorder {
	return &MoqServer_starGenType_ListenAndServe_fnRecorder{
		Params:   MoqServer_starGenType_ListenAndServe_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServer_starGenType_ListenAndServe_fnRecorder) Any() *MoqServer_starGenType_ListenAndServe_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ListenAndServe(r.Params))
		return nil
	}
	return &MoqServer_starGenType_ListenAndServe_anyParams{Recorder: r}
}

func (r *MoqServer_starGenType_ListenAndServe_fnRecorder) Seq() *MoqServer_starGenType_ListenAndServe_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ListenAndServe(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServer_starGenType_ListenAndServe_fnRecorder) NoSeq() *MoqServer_starGenType_ListenAndServe_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ListenAndServe(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServer_starGenType_ListenAndServe_fnRecorder) ReturnResults(result1 error) *MoqServer_starGenType_ListenAndServe_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_ListenAndServe_doFn
		DoReturnFn MoqServer_starGenType_ListenAndServe_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServer_starGenType_ListenAndServe_fnRecorder) AndDo(fn MoqServer_starGenType_ListenAndServe_doFn) *MoqServer_starGenType_ListenAndServe_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServer_starGenType_ListenAndServe_fnRecorder) DoReturnResults(fn MoqServer_starGenType_ListenAndServe_doReturnFn) *MoqServer_starGenType_ListenAndServe_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_ListenAndServe_doFn
		DoReturnFn MoqServer_starGenType_ListenAndServe_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServer_starGenType_ListenAndServe_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServer_starGenType_ListenAndServe_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ListenAndServe {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServer_starGenType_ListenAndServe_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServer_starGenType_ListenAndServe_paramsKey]*MoqServer_starGenType_ListenAndServe_results{},
		}
		r.Moq.ResultsByParams_ListenAndServe = append(r.Moq.ResultsByParams_ListenAndServe, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ListenAndServe) {
			copy(r.Moq.ResultsByParams_ListenAndServe[insertAt+1:], r.Moq.ResultsByParams_ListenAndServe[insertAt:0])
			r.Moq.ResultsByParams_ListenAndServe[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ListenAndServe(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServer_starGenType_ListenAndServe_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServer_starGenType_ListenAndServe_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServer_starGenType_ListenAndServe_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqServer_starGenType_ListenAndServe_doFn
				DoReturnFn MoqServer_starGenType_ListenAndServe_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServer_starGenType) PrettyParams_ListenAndServe(params MoqServer_starGenType_ListenAndServe_params) string {
	return fmt.Sprintf("ListenAndServe()")
}

func (m *MoqServer_starGenType) ParamsKey_ListenAndServe(params MoqServer_starGenType_ListenAndServe_params, anyParams uint64) MoqServer_starGenType_ListenAndServe_paramsKey {
	m.Scene.T.Helper()
	return MoqServer_starGenType_ListenAndServe_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqServer_starGenType_recorder) Serve(l net.Listener) *MoqServer_starGenType_Serve_fnRecorder {
	return &MoqServer_starGenType_Serve_fnRecorder{
		Params: MoqServer_starGenType_Serve_params{
			L: l,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServer_starGenType_Serve_fnRecorder) Any() *MoqServer_starGenType_Serve_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Serve(r.Params))
		return nil
	}
	return &MoqServer_starGenType_Serve_anyParams{Recorder: r}
}

func (a *MoqServer_starGenType_Serve_anyParams) L() *MoqServer_starGenType_Serve_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqServer_starGenType_Serve_fnRecorder) Seq() *MoqServer_starGenType_Serve_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Serve(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServer_starGenType_Serve_fnRecorder) NoSeq() *MoqServer_starGenType_Serve_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Serve(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServer_starGenType_Serve_fnRecorder) ReturnResults(result1 error) *MoqServer_starGenType_Serve_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Serve_doFn
		DoReturnFn MoqServer_starGenType_Serve_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServer_starGenType_Serve_fnRecorder) AndDo(fn MoqServer_starGenType_Serve_doFn) *MoqServer_starGenType_Serve_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServer_starGenType_Serve_fnRecorder) DoReturnResults(fn MoqServer_starGenType_Serve_doReturnFn) *MoqServer_starGenType_Serve_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Serve_doFn
		DoReturnFn MoqServer_starGenType_Serve_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServer_starGenType_Serve_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServer_starGenType_Serve_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Serve {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServer_starGenType_Serve_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServer_starGenType_Serve_paramsKey]*MoqServer_starGenType_Serve_results{},
		}
		r.Moq.ResultsByParams_Serve = append(r.Moq.ResultsByParams_Serve, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Serve) {
			copy(r.Moq.ResultsByParams_Serve[insertAt+1:], r.Moq.ResultsByParams_Serve[insertAt:0])
			r.Moq.ResultsByParams_Serve[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Serve(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServer_starGenType_Serve_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServer_starGenType_Serve_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServer_starGenType_Serve_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqServer_starGenType_Serve_doFn
				DoReturnFn MoqServer_starGenType_Serve_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServer_starGenType) PrettyParams_Serve(params MoqServer_starGenType_Serve_params) string {
	return fmt.Sprintf("Serve(%#v)", params.L)
}

func (m *MoqServer_starGenType) ParamsKey_Serve(params MoqServer_starGenType_Serve_params, anyParams uint64) MoqServer_starGenType_Serve_paramsKey {
	m.Scene.T.Helper()
	var lUsed net.Listener
	var lUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Serve.L == moq.ParamIndexByValue {
			lUsed = params.L
		} else {
			lUsedHash = hash.DeepHash(params.L)
		}
	}
	return MoqServer_starGenType_Serve_paramsKey{
		Params: struct{ L net.Listener }{
			L: lUsed,
		},
		Hashes: struct{ L hash.Hash }{
			L: lUsedHash,
		},
	}
}

func (m *MoqServer_starGenType_recorder) ServeTLS(l net.Listener, certFile, keyFile string) *MoqServer_starGenType_ServeTLS_fnRecorder {
	return &MoqServer_starGenType_ServeTLS_fnRecorder{
		Params: MoqServer_starGenType_ServeTLS_params{
			L:        l,
			CertFile: certFile,
			KeyFile:  keyFile,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServer_starGenType_ServeTLS_fnRecorder) Any() *MoqServer_starGenType_ServeTLS_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ServeTLS(r.Params))
		return nil
	}
	return &MoqServer_starGenType_ServeTLS_anyParams{Recorder: r}
}

func (a *MoqServer_starGenType_ServeTLS_anyParams) L() *MoqServer_starGenType_ServeTLS_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqServer_starGenType_ServeTLS_anyParams) CertFile() *MoqServer_starGenType_ServeTLS_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqServer_starGenType_ServeTLS_anyParams) KeyFile() *MoqServer_starGenType_ServeTLS_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqServer_starGenType_ServeTLS_fnRecorder) Seq() *MoqServer_starGenType_ServeTLS_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ServeTLS(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServer_starGenType_ServeTLS_fnRecorder) NoSeq() *MoqServer_starGenType_ServeTLS_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ServeTLS(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServer_starGenType_ServeTLS_fnRecorder) ReturnResults(result1 error) *MoqServer_starGenType_ServeTLS_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_ServeTLS_doFn
		DoReturnFn MoqServer_starGenType_ServeTLS_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServer_starGenType_ServeTLS_fnRecorder) AndDo(fn MoqServer_starGenType_ServeTLS_doFn) *MoqServer_starGenType_ServeTLS_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServer_starGenType_ServeTLS_fnRecorder) DoReturnResults(fn MoqServer_starGenType_ServeTLS_doReturnFn) *MoqServer_starGenType_ServeTLS_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_ServeTLS_doFn
		DoReturnFn MoqServer_starGenType_ServeTLS_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServer_starGenType_ServeTLS_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServer_starGenType_ServeTLS_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ServeTLS {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServer_starGenType_ServeTLS_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServer_starGenType_ServeTLS_paramsKey]*MoqServer_starGenType_ServeTLS_results{},
		}
		r.Moq.ResultsByParams_ServeTLS = append(r.Moq.ResultsByParams_ServeTLS, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ServeTLS) {
			copy(r.Moq.ResultsByParams_ServeTLS[insertAt+1:], r.Moq.ResultsByParams_ServeTLS[insertAt:0])
			r.Moq.ResultsByParams_ServeTLS[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ServeTLS(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServer_starGenType_ServeTLS_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServer_starGenType_ServeTLS_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServer_starGenType_ServeTLS_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqServer_starGenType_ServeTLS_doFn
				DoReturnFn MoqServer_starGenType_ServeTLS_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServer_starGenType) PrettyParams_ServeTLS(params MoqServer_starGenType_ServeTLS_params) string {
	return fmt.Sprintf("ServeTLS(%#v, %#v, %#v)", params.L, params.CertFile, params.KeyFile)
}

func (m *MoqServer_starGenType) ParamsKey_ServeTLS(params MoqServer_starGenType_ServeTLS_params, anyParams uint64) MoqServer_starGenType_ServeTLS_paramsKey {
	m.Scene.T.Helper()
	var lUsed net.Listener
	var lUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ServeTLS.L == moq.ParamIndexByValue {
			lUsed = params.L
		} else {
			lUsedHash = hash.DeepHash(params.L)
		}
	}
	var certFileUsed string
	var certFileUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.ServeTLS.CertFile == moq.ParamIndexByValue {
			certFileUsed = params.CertFile
		} else {
			certFileUsedHash = hash.DeepHash(params.CertFile)
		}
	}
	var keyFileUsed string
	var keyFileUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.ServeTLS.KeyFile == moq.ParamIndexByValue {
			keyFileUsed = params.KeyFile
		} else {
			keyFileUsedHash = hash.DeepHash(params.KeyFile)
		}
	}
	return MoqServer_starGenType_ServeTLS_paramsKey{
		Params: struct {
			L                 net.Listener
			CertFile, KeyFile string
		}{
			L:        lUsed,
			CertFile: certFileUsed,
			KeyFile:  keyFileUsed,
		},
		Hashes: struct {
			L                 hash.Hash
			CertFile, KeyFile hash.Hash
		}{
			L:        lUsedHash,
			CertFile: certFileUsedHash,
			KeyFile:  keyFileUsedHash,
		},
	}
}

func (m *MoqServer_starGenType_recorder) SetKeepAlivesEnabled(v bool) *MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder {
	return &MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder{
		Params: MoqServer_starGenType_SetKeepAlivesEnabled_params{
			V: v,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder) Any() *MoqServer_starGenType_SetKeepAlivesEnabled_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetKeepAlivesEnabled(r.Params))
		return nil
	}
	return &MoqServer_starGenType_SetKeepAlivesEnabled_anyParams{Recorder: r}
}

func (a *MoqServer_starGenType_SetKeepAlivesEnabled_anyParams) V() *MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder) Seq() *MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetKeepAlivesEnabled(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder) NoSeq() *MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetKeepAlivesEnabled(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder) ReturnResults() *MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServer_starGenType_SetKeepAlivesEnabled_doFn
		DoReturnFn MoqServer_starGenType_SetKeepAlivesEnabled_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder) AndDo(fn MoqServer_starGenType_SetKeepAlivesEnabled_doFn) *MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder) DoReturnResults(fn MoqServer_starGenType_SetKeepAlivesEnabled_doReturnFn) *MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServer_starGenType_SetKeepAlivesEnabled_doFn
		DoReturnFn MoqServer_starGenType_SetKeepAlivesEnabled_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServer_starGenType_SetKeepAlivesEnabled_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetKeepAlivesEnabled {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServer_starGenType_SetKeepAlivesEnabled_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServer_starGenType_SetKeepAlivesEnabled_paramsKey]*MoqServer_starGenType_SetKeepAlivesEnabled_results{},
		}
		r.Moq.ResultsByParams_SetKeepAlivesEnabled = append(r.Moq.ResultsByParams_SetKeepAlivesEnabled, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetKeepAlivesEnabled) {
			copy(r.Moq.ResultsByParams_SetKeepAlivesEnabled[insertAt+1:], r.Moq.ResultsByParams_SetKeepAlivesEnabled[insertAt:0])
			r.Moq.ResultsByParams_SetKeepAlivesEnabled[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetKeepAlivesEnabled(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServer_starGenType_SetKeepAlivesEnabled_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServer_starGenType_SetKeepAlivesEnabled_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqServer_starGenType_SetKeepAlivesEnabled_doFn
				DoReturnFn MoqServer_starGenType_SetKeepAlivesEnabled_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServer_starGenType) PrettyParams_SetKeepAlivesEnabled(params MoqServer_starGenType_SetKeepAlivesEnabled_params) string {
	return fmt.Sprintf("SetKeepAlivesEnabled(%#v)", params.V)
}

func (m *MoqServer_starGenType) ParamsKey_SetKeepAlivesEnabled(params MoqServer_starGenType_SetKeepAlivesEnabled_params, anyParams uint64) MoqServer_starGenType_SetKeepAlivesEnabled_paramsKey {
	m.Scene.T.Helper()
	var vUsed bool
	var vUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetKeepAlivesEnabled.V == moq.ParamIndexByValue {
			vUsed = params.V
		} else {
			vUsedHash = hash.DeepHash(params.V)
		}
	}
	return MoqServer_starGenType_SetKeepAlivesEnabled_paramsKey{
		Params: struct{ V bool }{
			V: vUsed,
		},
		Hashes: struct{ V hash.Hash }{
			V: vUsedHash,
		},
	}
}

func (m *MoqServer_starGenType_recorder) ListenAndServeTLS(certFile, keyFile string) *MoqServer_starGenType_ListenAndServeTLS_fnRecorder {
	return &MoqServer_starGenType_ListenAndServeTLS_fnRecorder{
		Params: MoqServer_starGenType_ListenAndServeTLS_params{
			CertFile: certFile,
			KeyFile:  keyFile,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServer_starGenType_ListenAndServeTLS_fnRecorder) Any() *MoqServer_starGenType_ListenAndServeTLS_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ListenAndServeTLS(r.Params))
		return nil
	}
	return &MoqServer_starGenType_ListenAndServeTLS_anyParams{Recorder: r}
}

func (a *MoqServer_starGenType_ListenAndServeTLS_anyParams) CertFile() *MoqServer_starGenType_ListenAndServeTLS_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqServer_starGenType_ListenAndServeTLS_anyParams) KeyFile() *MoqServer_starGenType_ListenAndServeTLS_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqServer_starGenType_ListenAndServeTLS_fnRecorder) Seq() *MoqServer_starGenType_ListenAndServeTLS_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ListenAndServeTLS(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServer_starGenType_ListenAndServeTLS_fnRecorder) NoSeq() *MoqServer_starGenType_ListenAndServeTLS_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ListenAndServeTLS(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServer_starGenType_ListenAndServeTLS_fnRecorder) ReturnResults(result1 error) *MoqServer_starGenType_ListenAndServeTLS_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_ListenAndServeTLS_doFn
		DoReturnFn MoqServer_starGenType_ListenAndServeTLS_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServer_starGenType_ListenAndServeTLS_fnRecorder) AndDo(fn MoqServer_starGenType_ListenAndServeTLS_doFn) *MoqServer_starGenType_ListenAndServeTLS_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServer_starGenType_ListenAndServeTLS_fnRecorder) DoReturnResults(fn MoqServer_starGenType_ListenAndServeTLS_doReturnFn) *MoqServer_starGenType_ListenAndServeTLS_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_ListenAndServeTLS_doFn
		DoReturnFn MoqServer_starGenType_ListenAndServeTLS_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServer_starGenType_ListenAndServeTLS_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServer_starGenType_ListenAndServeTLS_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ListenAndServeTLS {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServer_starGenType_ListenAndServeTLS_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServer_starGenType_ListenAndServeTLS_paramsKey]*MoqServer_starGenType_ListenAndServeTLS_results{},
		}
		r.Moq.ResultsByParams_ListenAndServeTLS = append(r.Moq.ResultsByParams_ListenAndServeTLS, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ListenAndServeTLS) {
			copy(r.Moq.ResultsByParams_ListenAndServeTLS[insertAt+1:], r.Moq.ResultsByParams_ListenAndServeTLS[insertAt:0])
			r.Moq.ResultsByParams_ListenAndServeTLS[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ListenAndServeTLS(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServer_starGenType_ListenAndServeTLS_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServer_starGenType_ListenAndServeTLS_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServer_starGenType_ListenAndServeTLS_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqServer_starGenType_ListenAndServeTLS_doFn
				DoReturnFn MoqServer_starGenType_ListenAndServeTLS_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServer_starGenType) PrettyParams_ListenAndServeTLS(params MoqServer_starGenType_ListenAndServeTLS_params) string {
	return fmt.Sprintf("ListenAndServeTLS(%#v, %#v)", params.CertFile, params.KeyFile)
}

func (m *MoqServer_starGenType) ParamsKey_ListenAndServeTLS(params MoqServer_starGenType_ListenAndServeTLS_params, anyParams uint64) MoqServer_starGenType_ListenAndServeTLS_paramsKey {
	m.Scene.T.Helper()
	var certFileUsed string
	var certFileUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ListenAndServeTLS.CertFile == moq.ParamIndexByValue {
			certFileUsed = params.CertFile
		} else {
			certFileUsedHash = hash.DeepHash(params.CertFile)
		}
	}
	var keyFileUsed string
	var keyFileUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.ListenAndServeTLS.KeyFile == moq.ParamIndexByValue {
			keyFileUsed = params.KeyFile
		} else {
			keyFileUsedHash = hash.DeepHash(params.KeyFile)
		}
	}
	return MoqServer_starGenType_ListenAndServeTLS_paramsKey{
		Params: struct{ CertFile, KeyFile string }{
			CertFile: certFileUsed,
			KeyFile:  keyFileUsed,
		},
		Hashes: struct{ CertFile, KeyFile hash.Hash }{
			CertFile: certFileUsedHash,
			KeyFile:  keyFileUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqServer_starGenType) Reset() {
	m.ResultsByParams_Close = nil
	m.ResultsByParams_Shutdown = nil
	m.ResultsByParams_RegisterOnShutdown = nil
	m.ResultsByParams_ListenAndServe = nil
	m.ResultsByParams_Serve = nil
	m.ResultsByParams_ServeTLS = nil
	m.ResultsByParams_SetKeepAlivesEnabled = nil
	m.ResultsByParams_ListenAndServeTLS = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqServer_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Shutdown {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Shutdown(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_RegisterOnShutdown {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_RegisterOnShutdown(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ListenAndServe {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ListenAndServe(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Serve {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Serve(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ServeTLS {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ServeTLS(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetKeepAlivesEnabled {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetKeepAlivesEnabled(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ListenAndServeTLS {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ListenAndServeTLS(results.Params))
			}
		}
	}
}
