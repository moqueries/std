// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package http

import (
	"context"
	"fmt"
	"io"
	"math/bits"
	"mime/multipart"
	"net/http"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that http.Request_starGenType is mocked
// completely
var _ Request_starGenType = (*MoqRequest_starGenType_mock)(nil)

// Request_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Request_starGenType interface {
	Context() context.Context
	WithContext(ctx context.Context) *http.Request
	Clone(ctx context.Context) *http.Request
	ProtoAtLeast(major, minor int) bool
	UserAgent() string
	Cookies() []*http.Cookie
	Cookie(name string) (*http.Cookie, error)
	AddCookie(c *http.Cookie)
	Referer() string
	MultipartReader() (*multipart.Reader, error)
	Write(w io.Writer) error
	WriteProxy(w io.Writer) error
	BasicAuth() (username, password string, ok bool)
	SetBasicAuth(username, password string)
	ParseForm() error
	ParseMultipartForm(maxMemory int64) error
	FormValue(key string) string
	PostFormValue(key string) string
	FormFile(key string) (multipart.File, *multipart.FileHeader, error)
}

// MoqRequest_starGenType holds the state of a moq of the Request_starGenType
// type
type MoqRequest_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqRequest_starGenType_mock

	ResultsByParams_Context            []MoqRequest_starGenType_Context_resultsByParams
	ResultsByParams_WithContext        []MoqRequest_starGenType_WithContext_resultsByParams
	ResultsByParams_Clone              []MoqRequest_starGenType_Clone_resultsByParams
	ResultsByParams_ProtoAtLeast       []MoqRequest_starGenType_ProtoAtLeast_resultsByParams
	ResultsByParams_UserAgent          []MoqRequest_starGenType_UserAgent_resultsByParams
	ResultsByParams_Cookies            []MoqRequest_starGenType_Cookies_resultsByParams
	ResultsByParams_Cookie             []MoqRequest_starGenType_Cookie_resultsByParams
	ResultsByParams_AddCookie          []MoqRequest_starGenType_AddCookie_resultsByParams
	ResultsByParams_Referer            []MoqRequest_starGenType_Referer_resultsByParams
	ResultsByParams_MultipartReader    []MoqRequest_starGenType_MultipartReader_resultsByParams
	ResultsByParams_Write              []MoqRequest_starGenType_Write_resultsByParams
	ResultsByParams_WriteProxy         []MoqRequest_starGenType_WriteProxy_resultsByParams
	ResultsByParams_BasicAuth          []MoqRequest_starGenType_BasicAuth_resultsByParams
	ResultsByParams_SetBasicAuth       []MoqRequest_starGenType_SetBasicAuth_resultsByParams
	ResultsByParams_ParseForm          []MoqRequest_starGenType_ParseForm_resultsByParams
	ResultsByParams_ParseMultipartForm []MoqRequest_starGenType_ParseMultipartForm_resultsByParams
	ResultsByParams_FormValue          []MoqRequest_starGenType_FormValue_resultsByParams
	ResultsByParams_PostFormValue      []MoqRequest_starGenType_PostFormValue_resultsByParams
	ResultsByParams_FormFile           []MoqRequest_starGenType_FormFile_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Context     struct{}
			WithContext struct {
				Ctx moq.ParamIndexing
			}
			Clone struct {
				Ctx moq.ParamIndexing
			}
			ProtoAtLeast struct {
				Major moq.ParamIndexing
				Minor moq.ParamIndexing
			}
			UserAgent struct{}
			Cookies   struct{}
			Cookie    struct {
				Name moq.ParamIndexing
			}
			AddCookie struct {
				C moq.ParamIndexing
			}
			Referer         struct{}
			MultipartReader struct{}
			Write           struct {
				W moq.ParamIndexing
			}
			WriteProxy struct {
				W moq.ParamIndexing
			}
			BasicAuth    struct{}
			SetBasicAuth struct {
				Username moq.ParamIndexing
				Password moq.ParamIndexing
			}
			ParseForm          struct{}
			ParseMultipartForm struct {
				MaxMemory moq.ParamIndexing
			}
			FormValue struct {
				Key moq.ParamIndexing
			}
			PostFormValue struct {
				Key moq.ParamIndexing
			}
			FormFile struct {
				Key moq.ParamIndexing
			}
		}
	}
	// MoqRequest_starGenType_mock isolates the mock interface of the
}

// Request_starGenType type
type MoqRequest_starGenType_mock struct {
	Moq *MoqRequest_starGenType
}

// MoqRequest_starGenType_recorder isolates the recorder interface of the
// Request_starGenType type
type MoqRequest_starGenType_recorder struct {
	Moq *MoqRequest_starGenType
}

// MoqRequest_starGenType_Context_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_Context_params struct{}

// MoqRequest_starGenType_Context_paramsKey holds the map key params of the
// Request_starGenType type
type MoqRequest_starGenType_Context_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRequest_starGenType_Context_resultsByParams contains the results for a
// given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_Context_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_Context_paramsKey]*MoqRequest_starGenType_Context_results
}

// MoqRequest_starGenType_Context_doFn defines the type of function needed when
// calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_Context_doFn func()

// MoqRequest_starGenType_Context_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Request_starGenType type
type MoqRequest_starGenType_Context_doReturnFn func() context.Context

// MoqRequest_starGenType_Context_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_Context_results struct {
	Params  MoqRequest_starGenType_Context_params
	Results []struct {
		Values *struct {
			Result1 context.Context
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_Context_doFn
		DoReturnFn MoqRequest_starGenType_Context_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_Context_fnRecorder routes recorded function calls to
// the MoqRequest_starGenType moq
type MoqRequest_starGenType_Context_fnRecorder struct {
	Params    MoqRequest_starGenType_Context_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_Context_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_Context_anyParams isolates the any params functions
// of the Request_starGenType type
type MoqRequest_starGenType_Context_anyParams struct {
	Recorder *MoqRequest_starGenType_Context_fnRecorder
}

// MoqRequest_starGenType_WithContext_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_WithContext_params struct{ Ctx context.Context }

// MoqRequest_starGenType_WithContext_paramsKey holds the map key params of the
// Request_starGenType type
type MoqRequest_starGenType_WithContext_paramsKey struct {
	Params struct{ Ctx context.Context }
	Hashes struct{ Ctx hash.Hash }
}

// MoqRequest_starGenType_WithContext_resultsByParams contains the results for
// a given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_WithContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_WithContext_paramsKey]*MoqRequest_starGenType_WithContext_results
}

// MoqRequest_starGenType_WithContext_doFn defines the type of function needed
// when calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_WithContext_doFn func(ctx context.Context)

// MoqRequest_starGenType_WithContext_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Request_starGenType type
type MoqRequest_starGenType_WithContext_doReturnFn func(ctx context.Context) *http.Request

// MoqRequest_starGenType_WithContext_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_WithContext_results struct {
	Params  MoqRequest_starGenType_WithContext_params
	Results []struct {
		Values *struct {
			Result1 *http.Request
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_WithContext_doFn
		DoReturnFn MoqRequest_starGenType_WithContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_WithContext_fnRecorder routes recorded function calls
// to the MoqRequest_starGenType moq
type MoqRequest_starGenType_WithContext_fnRecorder struct {
	Params    MoqRequest_starGenType_WithContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_WithContext_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_WithContext_anyParams isolates the any params
// functions of the Request_starGenType type
type MoqRequest_starGenType_WithContext_anyParams struct {
	Recorder *MoqRequest_starGenType_WithContext_fnRecorder
}

// MoqRequest_starGenType_Clone_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_Clone_params struct{ Ctx context.Context }

// MoqRequest_starGenType_Clone_paramsKey holds the map key params of the
// Request_starGenType type
type MoqRequest_starGenType_Clone_paramsKey struct {
	Params struct{ Ctx context.Context }
	Hashes struct{ Ctx hash.Hash }
}

// MoqRequest_starGenType_Clone_resultsByParams contains the results for a
// given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_Clone_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_Clone_paramsKey]*MoqRequest_starGenType_Clone_results
}

// MoqRequest_starGenType_Clone_doFn defines the type of function needed when
// calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_Clone_doFn func(ctx context.Context)

// MoqRequest_starGenType_Clone_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Request_starGenType type
type MoqRequest_starGenType_Clone_doReturnFn func(ctx context.Context) *http.Request

// MoqRequest_starGenType_Clone_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_Clone_results struct {
	Params  MoqRequest_starGenType_Clone_params
	Results []struct {
		Values *struct {
			Result1 *http.Request
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_Clone_doFn
		DoReturnFn MoqRequest_starGenType_Clone_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_Clone_fnRecorder routes recorded function calls to
// the MoqRequest_starGenType moq
type MoqRequest_starGenType_Clone_fnRecorder struct {
	Params    MoqRequest_starGenType_Clone_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_Clone_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_Clone_anyParams isolates the any params functions of
// the Request_starGenType type
type MoqRequest_starGenType_Clone_anyParams struct {
	Recorder *MoqRequest_starGenType_Clone_fnRecorder
}

// MoqRequest_starGenType_ProtoAtLeast_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_ProtoAtLeast_params struct{ Major, Minor int }

// MoqRequest_starGenType_ProtoAtLeast_paramsKey holds the map key params of
// the Request_starGenType type
type MoqRequest_starGenType_ProtoAtLeast_paramsKey struct {
	Params struct{ Major, Minor int }
	Hashes struct{ Major, Minor hash.Hash }
}

// MoqRequest_starGenType_ProtoAtLeast_resultsByParams contains the results for
// a given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_ProtoAtLeast_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_ProtoAtLeast_paramsKey]*MoqRequest_starGenType_ProtoAtLeast_results
}

// MoqRequest_starGenType_ProtoAtLeast_doFn defines the type of function needed
// when calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_ProtoAtLeast_doFn func(major, minor int)

// MoqRequest_starGenType_ProtoAtLeast_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Request_starGenType type
type MoqRequest_starGenType_ProtoAtLeast_doReturnFn func(major, minor int) bool

// MoqRequest_starGenType_ProtoAtLeast_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_ProtoAtLeast_results struct {
	Params  MoqRequest_starGenType_ProtoAtLeast_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_ProtoAtLeast_doFn
		DoReturnFn MoqRequest_starGenType_ProtoAtLeast_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_ProtoAtLeast_fnRecorder routes recorded function
// calls to the MoqRequest_starGenType moq
type MoqRequest_starGenType_ProtoAtLeast_fnRecorder struct {
	Params    MoqRequest_starGenType_ProtoAtLeast_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_ProtoAtLeast_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_ProtoAtLeast_anyParams isolates the any params
// functions of the Request_starGenType type
type MoqRequest_starGenType_ProtoAtLeast_anyParams struct {
	Recorder *MoqRequest_starGenType_ProtoAtLeast_fnRecorder
}

// MoqRequest_starGenType_UserAgent_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_UserAgent_params struct{}

// MoqRequest_starGenType_UserAgent_paramsKey holds the map key params of the
// Request_starGenType type
type MoqRequest_starGenType_UserAgent_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRequest_starGenType_UserAgent_resultsByParams contains the results for a
// given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_UserAgent_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_UserAgent_paramsKey]*MoqRequest_starGenType_UserAgent_results
}

// MoqRequest_starGenType_UserAgent_doFn defines the type of function needed
// when calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_UserAgent_doFn func()

// MoqRequest_starGenType_UserAgent_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Request_starGenType type
type MoqRequest_starGenType_UserAgent_doReturnFn func() string

// MoqRequest_starGenType_UserAgent_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_UserAgent_results struct {
	Params  MoqRequest_starGenType_UserAgent_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_UserAgent_doFn
		DoReturnFn MoqRequest_starGenType_UserAgent_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_UserAgent_fnRecorder routes recorded function calls
// to the MoqRequest_starGenType moq
type MoqRequest_starGenType_UserAgent_fnRecorder struct {
	Params    MoqRequest_starGenType_UserAgent_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_UserAgent_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_UserAgent_anyParams isolates the any params functions
// of the Request_starGenType type
type MoqRequest_starGenType_UserAgent_anyParams struct {
	Recorder *MoqRequest_starGenType_UserAgent_fnRecorder
}

// MoqRequest_starGenType_Cookies_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_Cookies_params struct{}

// MoqRequest_starGenType_Cookies_paramsKey holds the map key params of the
// Request_starGenType type
type MoqRequest_starGenType_Cookies_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRequest_starGenType_Cookies_resultsByParams contains the results for a
// given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_Cookies_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_Cookies_paramsKey]*MoqRequest_starGenType_Cookies_results
}

// MoqRequest_starGenType_Cookies_doFn defines the type of function needed when
// calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_Cookies_doFn func()

// MoqRequest_starGenType_Cookies_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Request_starGenType type
type MoqRequest_starGenType_Cookies_doReturnFn func() []*http.Cookie

// MoqRequest_starGenType_Cookies_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_Cookies_results struct {
	Params  MoqRequest_starGenType_Cookies_params
	Results []struct {
		Values *struct {
			Result1 []*http.Cookie
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_Cookies_doFn
		DoReturnFn MoqRequest_starGenType_Cookies_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_Cookies_fnRecorder routes recorded function calls to
// the MoqRequest_starGenType moq
type MoqRequest_starGenType_Cookies_fnRecorder struct {
	Params    MoqRequest_starGenType_Cookies_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_Cookies_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_Cookies_anyParams isolates the any params functions
// of the Request_starGenType type
type MoqRequest_starGenType_Cookies_anyParams struct {
	Recorder *MoqRequest_starGenType_Cookies_fnRecorder
}

// MoqRequest_starGenType_Cookie_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_Cookie_params struct{ Name string }

// MoqRequest_starGenType_Cookie_paramsKey holds the map key params of the
// Request_starGenType type
type MoqRequest_starGenType_Cookie_paramsKey struct {
	Params struct{ Name string }
	Hashes struct{ Name hash.Hash }
}

// MoqRequest_starGenType_Cookie_resultsByParams contains the results for a
// given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_Cookie_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_Cookie_paramsKey]*MoqRequest_starGenType_Cookie_results
}

// MoqRequest_starGenType_Cookie_doFn defines the type of function needed when
// calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_Cookie_doFn func(name string)

// MoqRequest_starGenType_Cookie_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Request_starGenType type
type MoqRequest_starGenType_Cookie_doReturnFn func(name string) (*http.Cookie, error)

// MoqRequest_starGenType_Cookie_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_Cookie_results struct {
	Params  MoqRequest_starGenType_Cookie_params
	Results []struct {
		Values *struct {
			Result1 *http.Cookie
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_Cookie_doFn
		DoReturnFn MoqRequest_starGenType_Cookie_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_Cookie_fnRecorder routes recorded function calls to
// the MoqRequest_starGenType moq
type MoqRequest_starGenType_Cookie_fnRecorder struct {
	Params    MoqRequest_starGenType_Cookie_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_Cookie_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_Cookie_anyParams isolates the any params functions of
// the Request_starGenType type
type MoqRequest_starGenType_Cookie_anyParams struct {
	Recorder *MoqRequest_starGenType_Cookie_fnRecorder
}

// MoqRequest_starGenType_AddCookie_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_AddCookie_params struct{ C *http.Cookie }

// MoqRequest_starGenType_AddCookie_paramsKey holds the map key params of the
// Request_starGenType type
type MoqRequest_starGenType_AddCookie_paramsKey struct {
	Params struct{ C *http.Cookie }
	Hashes struct{ C hash.Hash }
}

// MoqRequest_starGenType_AddCookie_resultsByParams contains the results for a
// given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_AddCookie_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_AddCookie_paramsKey]*MoqRequest_starGenType_AddCookie_results
}

// MoqRequest_starGenType_AddCookie_doFn defines the type of function needed
// when calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_AddCookie_doFn func(c *http.Cookie)

// MoqRequest_starGenType_AddCookie_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Request_starGenType type
type MoqRequest_starGenType_AddCookie_doReturnFn func(c *http.Cookie)

// MoqRequest_starGenType_AddCookie_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_AddCookie_results struct {
	Params  MoqRequest_starGenType_AddCookie_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_AddCookie_doFn
		DoReturnFn MoqRequest_starGenType_AddCookie_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_AddCookie_fnRecorder routes recorded function calls
// to the MoqRequest_starGenType moq
type MoqRequest_starGenType_AddCookie_fnRecorder struct {
	Params    MoqRequest_starGenType_AddCookie_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_AddCookie_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_AddCookie_anyParams isolates the any params functions
// of the Request_starGenType type
type MoqRequest_starGenType_AddCookie_anyParams struct {
	Recorder *MoqRequest_starGenType_AddCookie_fnRecorder
}

// MoqRequest_starGenType_Referer_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_Referer_params struct{}

// MoqRequest_starGenType_Referer_paramsKey holds the map key params of the
// Request_starGenType type
type MoqRequest_starGenType_Referer_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRequest_starGenType_Referer_resultsByParams contains the results for a
// given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_Referer_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_Referer_paramsKey]*MoqRequest_starGenType_Referer_results
}

// MoqRequest_starGenType_Referer_doFn defines the type of function needed when
// calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_Referer_doFn func()

// MoqRequest_starGenType_Referer_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Request_starGenType type
type MoqRequest_starGenType_Referer_doReturnFn func() string

// MoqRequest_starGenType_Referer_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_Referer_results struct {
	Params  MoqRequest_starGenType_Referer_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_Referer_doFn
		DoReturnFn MoqRequest_starGenType_Referer_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_Referer_fnRecorder routes recorded function calls to
// the MoqRequest_starGenType moq
type MoqRequest_starGenType_Referer_fnRecorder struct {
	Params    MoqRequest_starGenType_Referer_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_Referer_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_Referer_anyParams isolates the any params functions
// of the Request_starGenType type
type MoqRequest_starGenType_Referer_anyParams struct {
	Recorder *MoqRequest_starGenType_Referer_fnRecorder
}

// MoqRequest_starGenType_MultipartReader_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_MultipartReader_params struct{}

// MoqRequest_starGenType_MultipartReader_paramsKey holds the map key params of
// the Request_starGenType type
type MoqRequest_starGenType_MultipartReader_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRequest_starGenType_MultipartReader_resultsByParams contains the results
// for a given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_MultipartReader_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_MultipartReader_paramsKey]*MoqRequest_starGenType_MultipartReader_results
}

// MoqRequest_starGenType_MultipartReader_doFn defines the type of function
// needed when calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_MultipartReader_doFn func()

// MoqRequest_starGenType_MultipartReader_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Request_starGenType
// type
type MoqRequest_starGenType_MultipartReader_doReturnFn func() (*multipart.Reader, error)

// MoqRequest_starGenType_MultipartReader_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_MultipartReader_results struct {
	Params  MoqRequest_starGenType_MultipartReader_params
	Results []struct {
		Values *struct {
			Result1 *multipart.Reader
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_MultipartReader_doFn
		DoReturnFn MoqRequest_starGenType_MultipartReader_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_MultipartReader_fnRecorder routes recorded function
// calls to the MoqRequest_starGenType moq
type MoqRequest_starGenType_MultipartReader_fnRecorder struct {
	Params    MoqRequest_starGenType_MultipartReader_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_MultipartReader_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_MultipartReader_anyParams isolates the any params
// functions of the Request_starGenType type
type MoqRequest_starGenType_MultipartReader_anyParams struct {
	Recorder *MoqRequest_starGenType_MultipartReader_fnRecorder
}

// MoqRequest_starGenType_Write_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_Write_params struct{ W io.Writer }

// MoqRequest_starGenType_Write_paramsKey holds the map key params of the
// Request_starGenType type
type MoqRequest_starGenType_Write_paramsKey struct {
	Params struct{ W io.Writer }
	Hashes struct{ W hash.Hash }
}

// MoqRequest_starGenType_Write_resultsByParams contains the results for a
// given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_Write_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_Write_paramsKey]*MoqRequest_starGenType_Write_results
}

// MoqRequest_starGenType_Write_doFn defines the type of function needed when
// calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_Write_doFn func(w io.Writer)

// MoqRequest_starGenType_Write_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Request_starGenType type
type MoqRequest_starGenType_Write_doReturnFn func(w io.Writer) error

// MoqRequest_starGenType_Write_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_Write_results struct {
	Params  MoqRequest_starGenType_Write_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_Write_doFn
		DoReturnFn MoqRequest_starGenType_Write_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_Write_fnRecorder routes recorded function calls to
// the MoqRequest_starGenType moq
type MoqRequest_starGenType_Write_fnRecorder struct {
	Params    MoqRequest_starGenType_Write_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_Write_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_Write_anyParams isolates the any params functions of
// the Request_starGenType type
type MoqRequest_starGenType_Write_anyParams struct {
	Recorder *MoqRequest_starGenType_Write_fnRecorder
}

// MoqRequest_starGenType_WriteProxy_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_WriteProxy_params struct{ W io.Writer }

// MoqRequest_starGenType_WriteProxy_paramsKey holds the map key params of the
// Request_starGenType type
type MoqRequest_starGenType_WriteProxy_paramsKey struct {
	Params struct{ W io.Writer }
	Hashes struct{ W hash.Hash }
}

// MoqRequest_starGenType_WriteProxy_resultsByParams contains the results for a
// given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_WriteProxy_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_WriteProxy_paramsKey]*MoqRequest_starGenType_WriteProxy_results
}

// MoqRequest_starGenType_WriteProxy_doFn defines the type of function needed
// when calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_WriteProxy_doFn func(w io.Writer)

// MoqRequest_starGenType_WriteProxy_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Request_starGenType type
type MoqRequest_starGenType_WriteProxy_doReturnFn func(w io.Writer) error

// MoqRequest_starGenType_WriteProxy_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_WriteProxy_results struct {
	Params  MoqRequest_starGenType_WriteProxy_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_WriteProxy_doFn
		DoReturnFn MoqRequest_starGenType_WriteProxy_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_WriteProxy_fnRecorder routes recorded function calls
// to the MoqRequest_starGenType moq
type MoqRequest_starGenType_WriteProxy_fnRecorder struct {
	Params    MoqRequest_starGenType_WriteProxy_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_WriteProxy_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_WriteProxy_anyParams isolates the any params
// functions of the Request_starGenType type
type MoqRequest_starGenType_WriteProxy_anyParams struct {
	Recorder *MoqRequest_starGenType_WriteProxy_fnRecorder
}

// MoqRequest_starGenType_BasicAuth_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_BasicAuth_params struct{}

// MoqRequest_starGenType_BasicAuth_paramsKey holds the map key params of the
// Request_starGenType type
type MoqRequest_starGenType_BasicAuth_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRequest_starGenType_BasicAuth_resultsByParams contains the results for a
// given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_BasicAuth_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_BasicAuth_paramsKey]*MoqRequest_starGenType_BasicAuth_results
}

// MoqRequest_starGenType_BasicAuth_doFn defines the type of function needed
// when calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_BasicAuth_doFn func()

// MoqRequest_starGenType_BasicAuth_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Request_starGenType type
type MoqRequest_starGenType_BasicAuth_doReturnFn func() (username, password string, ok bool)

// MoqRequest_starGenType_BasicAuth_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_BasicAuth_results struct {
	Params  MoqRequest_starGenType_BasicAuth_params
	Results []struct {
		Values *struct {
			Username, Password string
			Ok                 bool
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_BasicAuth_doFn
		DoReturnFn MoqRequest_starGenType_BasicAuth_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_BasicAuth_fnRecorder routes recorded function calls
// to the MoqRequest_starGenType moq
type MoqRequest_starGenType_BasicAuth_fnRecorder struct {
	Params    MoqRequest_starGenType_BasicAuth_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_BasicAuth_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_BasicAuth_anyParams isolates the any params functions
// of the Request_starGenType type
type MoqRequest_starGenType_BasicAuth_anyParams struct {
	Recorder *MoqRequest_starGenType_BasicAuth_fnRecorder
}

// MoqRequest_starGenType_SetBasicAuth_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_SetBasicAuth_params struct{ Username, Password string }

// MoqRequest_starGenType_SetBasicAuth_paramsKey holds the map key params of
// the Request_starGenType type
type MoqRequest_starGenType_SetBasicAuth_paramsKey struct {
	Params struct{ Username, Password string }
	Hashes struct{ Username, Password hash.Hash }
}

// MoqRequest_starGenType_SetBasicAuth_resultsByParams contains the results for
// a given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_SetBasicAuth_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_SetBasicAuth_paramsKey]*MoqRequest_starGenType_SetBasicAuth_results
}

// MoqRequest_starGenType_SetBasicAuth_doFn defines the type of function needed
// when calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_SetBasicAuth_doFn func(username, password string)

// MoqRequest_starGenType_SetBasicAuth_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Request_starGenType type
type MoqRequest_starGenType_SetBasicAuth_doReturnFn func(username, password string)

// MoqRequest_starGenType_SetBasicAuth_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_SetBasicAuth_results struct {
	Params  MoqRequest_starGenType_SetBasicAuth_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_SetBasicAuth_doFn
		DoReturnFn MoqRequest_starGenType_SetBasicAuth_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_SetBasicAuth_fnRecorder routes recorded function
// calls to the MoqRequest_starGenType moq
type MoqRequest_starGenType_SetBasicAuth_fnRecorder struct {
	Params    MoqRequest_starGenType_SetBasicAuth_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_SetBasicAuth_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_SetBasicAuth_anyParams isolates the any params
// functions of the Request_starGenType type
type MoqRequest_starGenType_SetBasicAuth_anyParams struct {
	Recorder *MoqRequest_starGenType_SetBasicAuth_fnRecorder
}

// MoqRequest_starGenType_ParseForm_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_ParseForm_params struct{}

// MoqRequest_starGenType_ParseForm_paramsKey holds the map key params of the
// Request_starGenType type
type MoqRequest_starGenType_ParseForm_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqRequest_starGenType_ParseForm_resultsByParams contains the results for a
// given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_ParseForm_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_ParseForm_paramsKey]*MoqRequest_starGenType_ParseForm_results
}

// MoqRequest_starGenType_ParseForm_doFn defines the type of function needed
// when calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_ParseForm_doFn func()

// MoqRequest_starGenType_ParseForm_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Request_starGenType type
type MoqRequest_starGenType_ParseForm_doReturnFn func() error

// MoqRequest_starGenType_ParseForm_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_ParseForm_results struct {
	Params  MoqRequest_starGenType_ParseForm_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_ParseForm_doFn
		DoReturnFn MoqRequest_starGenType_ParseForm_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_ParseForm_fnRecorder routes recorded function calls
// to the MoqRequest_starGenType moq
type MoqRequest_starGenType_ParseForm_fnRecorder struct {
	Params    MoqRequest_starGenType_ParseForm_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_ParseForm_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_ParseForm_anyParams isolates the any params functions
// of the Request_starGenType type
type MoqRequest_starGenType_ParseForm_anyParams struct {
	Recorder *MoqRequest_starGenType_ParseForm_fnRecorder
}

// MoqRequest_starGenType_ParseMultipartForm_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_ParseMultipartForm_params struct{ MaxMemory int64 }

// MoqRequest_starGenType_ParseMultipartForm_paramsKey holds the map key params
// of the Request_starGenType type
type MoqRequest_starGenType_ParseMultipartForm_paramsKey struct {
	Params struct{ MaxMemory int64 }
	Hashes struct{ MaxMemory hash.Hash }
}

// MoqRequest_starGenType_ParseMultipartForm_resultsByParams contains the
// results for a given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_ParseMultipartForm_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_ParseMultipartForm_paramsKey]*MoqRequest_starGenType_ParseMultipartForm_results
}

// MoqRequest_starGenType_ParseMultipartForm_doFn defines the type of function
// needed when calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_ParseMultipartForm_doFn func(maxMemory int64)

// MoqRequest_starGenType_ParseMultipartForm_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Request_starGenType
// type
type MoqRequest_starGenType_ParseMultipartForm_doReturnFn func(maxMemory int64) error

// MoqRequest_starGenType_ParseMultipartForm_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_ParseMultipartForm_results struct {
	Params  MoqRequest_starGenType_ParseMultipartForm_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_ParseMultipartForm_doFn
		DoReturnFn MoqRequest_starGenType_ParseMultipartForm_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_ParseMultipartForm_fnRecorder routes recorded
// function calls to the MoqRequest_starGenType moq
type MoqRequest_starGenType_ParseMultipartForm_fnRecorder struct {
	Params    MoqRequest_starGenType_ParseMultipartForm_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_ParseMultipartForm_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_ParseMultipartForm_anyParams isolates the any params
// functions of the Request_starGenType type
type MoqRequest_starGenType_ParseMultipartForm_anyParams struct {
	Recorder *MoqRequest_starGenType_ParseMultipartForm_fnRecorder
}

// MoqRequest_starGenType_FormValue_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_FormValue_params struct{ Key string }

// MoqRequest_starGenType_FormValue_paramsKey holds the map key params of the
// Request_starGenType type
type MoqRequest_starGenType_FormValue_paramsKey struct {
	Params struct{ Key string }
	Hashes struct{ Key hash.Hash }
}

// MoqRequest_starGenType_FormValue_resultsByParams contains the results for a
// given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_FormValue_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_FormValue_paramsKey]*MoqRequest_starGenType_FormValue_results
}

// MoqRequest_starGenType_FormValue_doFn defines the type of function needed
// when calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_FormValue_doFn func(key string)

// MoqRequest_starGenType_FormValue_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Request_starGenType type
type MoqRequest_starGenType_FormValue_doReturnFn func(key string) string

// MoqRequest_starGenType_FormValue_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_FormValue_results struct {
	Params  MoqRequest_starGenType_FormValue_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_FormValue_doFn
		DoReturnFn MoqRequest_starGenType_FormValue_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_FormValue_fnRecorder routes recorded function calls
// to the MoqRequest_starGenType moq
type MoqRequest_starGenType_FormValue_fnRecorder struct {
	Params    MoqRequest_starGenType_FormValue_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_FormValue_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_FormValue_anyParams isolates the any params functions
// of the Request_starGenType type
type MoqRequest_starGenType_FormValue_anyParams struct {
	Recorder *MoqRequest_starGenType_FormValue_fnRecorder
}

// MoqRequest_starGenType_PostFormValue_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_PostFormValue_params struct{ Key string }

// MoqRequest_starGenType_PostFormValue_paramsKey holds the map key params of
// the Request_starGenType type
type MoqRequest_starGenType_PostFormValue_paramsKey struct {
	Params struct{ Key string }
	Hashes struct{ Key hash.Hash }
}

// MoqRequest_starGenType_PostFormValue_resultsByParams contains the results
// for a given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_PostFormValue_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_PostFormValue_paramsKey]*MoqRequest_starGenType_PostFormValue_results
}

// MoqRequest_starGenType_PostFormValue_doFn defines the type of function
// needed when calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_PostFormValue_doFn func(key string)

// MoqRequest_starGenType_PostFormValue_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Request_starGenType type
type MoqRequest_starGenType_PostFormValue_doReturnFn func(key string) string

// MoqRequest_starGenType_PostFormValue_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_PostFormValue_results struct {
	Params  MoqRequest_starGenType_PostFormValue_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_PostFormValue_doFn
		DoReturnFn MoqRequest_starGenType_PostFormValue_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_PostFormValue_fnRecorder routes recorded function
// calls to the MoqRequest_starGenType moq
type MoqRequest_starGenType_PostFormValue_fnRecorder struct {
	Params    MoqRequest_starGenType_PostFormValue_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_PostFormValue_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_PostFormValue_anyParams isolates the any params
// functions of the Request_starGenType type
type MoqRequest_starGenType_PostFormValue_anyParams struct {
	Recorder *MoqRequest_starGenType_PostFormValue_fnRecorder
}

// MoqRequest_starGenType_FormFile_params holds the params of the
// Request_starGenType type
type MoqRequest_starGenType_FormFile_params struct{ Key string }

// MoqRequest_starGenType_FormFile_paramsKey holds the map key params of the
// Request_starGenType type
type MoqRequest_starGenType_FormFile_paramsKey struct {
	Params struct{ Key string }
	Hashes struct{ Key hash.Hash }
}

// MoqRequest_starGenType_FormFile_resultsByParams contains the results for a
// given set of parameters for the Request_starGenType type
type MoqRequest_starGenType_FormFile_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRequest_starGenType_FormFile_paramsKey]*MoqRequest_starGenType_FormFile_results
}

// MoqRequest_starGenType_FormFile_doFn defines the type of function needed
// when calling AndDo for the Request_starGenType type
type MoqRequest_starGenType_FormFile_doFn func(key string)

// MoqRequest_starGenType_FormFile_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Request_starGenType type
type MoqRequest_starGenType_FormFile_doReturnFn func(key string) (multipart.File, *multipart.FileHeader, error)

// MoqRequest_starGenType_FormFile_results holds the results of the
// Request_starGenType type
type MoqRequest_starGenType_FormFile_results struct {
	Params  MoqRequest_starGenType_FormFile_params
	Results []struct {
		Values *struct {
			Result1 multipart.File
			Result2 *multipart.FileHeader
			Result3 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_FormFile_doFn
		DoReturnFn MoqRequest_starGenType_FormFile_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRequest_starGenType_FormFile_fnRecorder routes recorded function calls to
// the MoqRequest_starGenType moq
type MoqRequest_starGenType_FormFile_fnRecorder struct {
	Params    MoqRequest_starGenType_FormFile_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRequest_starGenType_FormFile_results
	Moq       *MoqRequest_starGenType
}

// MoqRequest_starGenType_FormFile_anyParams isolates the any params functions
// of the Request_starGenType type
type MoqRequest_starGenType_FormFile_anyParams struct {
	Recorder *MoqRequest_starGenType_FormFile_fnRecorder
}

// NewMoqRequest_starGenType creates a new moq of the Request_starGenType type
func NewMoqRequest_starGenType(scene *moq.Scene, config *moq.Config) *MoqRequest_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqRequest_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqRequest_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Context     struct{}
				WithContext struct {
					Ctx moq.ParamIndexing
				}
				Clone struct {
					Ctx moq.ParamIndexing
				}
				ProtoAtLeast struct {
					Major moq.ParamIndexing
					Minor moq.ParamIndexing
				}
				UserAgent struct{}
				Cookies   struct{}
				Cookie    struct {
					Name moq.ParamIndexing
				}
				AddCookie struct {
					C moq.ParamIndexing
				}
				Referer         struct{}
				MultipartReader struct{}
				Write           struct {
					W moq.ParamIndexing
				}
				WriteProxy struct {
					W moq.ParamIndexing
				}
				BasicAuth    struct{}
				SetBasicAuth struct {
					Username moq.ParamIndexing
					Password moq.ParamIndexing
				}
				ParseForm          struct{}
				ParseMultipartForm struct {
					MaxMemory moq.ParamIndexing
				}
				FormValue struct {
					Key moq.ParamIndexing
				}
				PostFormValue struct {
					Key moq.ParamIndexing
				}
				FormFile struct {
					Key moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Context     struct{}
			WithContext struct {
				Ctx moq.ParamIndexing
			}
			Clone struct {
				Ctx moq.ParamIndexing
			}
			ProtoAtLeast struct {
				Major moq.ParamIndexing
				Minor moq.ParamIndexing
			}
			UserAgent struct{}
			Cookies   struct{}
			Cookie    struct {
				Name moq.ParamIndexing
			}
			AddCookie struct {
				C moq.ParamIndexing
			}
			Referer         struct{}
			MultipartReader struct{}
			Write           struct {
				W moq.ParamIndexing
			}
			WriteProxy struct {
				W moq.ParamIndexing
			}
			BasicAuth    struct{}
			SetBasicAuth struct {
				Username moq.ParamIndexing
				Password moq.ParamIndexing
			}
			ParseForm          struct{}
			ParseMultipartForm struct {
				MaxMemory moq.ParamIndexing
			}
			FormValue struct {
				Key moq.ParamIndexing
			}
			PostFormValue struct {
				Key moq.ParamIndexing
			}
			FormFile struct {
				Key moq.ParamIndexing
			}
		}{
			Context: struct{}{},
			WithContext: struct {
				Ctx moq.ParamIndexing
			}{
				Ctx: moq.ParamIndexByHash,
			},
			Clone: struct {
				Ctx moq.ParamIndexing
			}{
				Ctx: moq.ParamIndexByHash,
			},
			ProtoAtLeast: struct {
				Major moq.ParamIndexing
				Minor moq.ParamIndexing
			}{
				Major: moq.ParamIndexByValue,
				Minor: moq.ParamIndexByValue,
			},
			UserAgent: struct{}{},
			Cookies:   struct{}{},
			Cookie: struct {
				Name moq.ParamIndexing
			}{
				Name: moq.ParamIndexByValue,
			},
			AddCookie: struct {
				C moq.ParamIndexing
			}{
				C: moq.ParamIndexByHash,
			},
			Referer:         struct{}{},
			MultipartReader: struct{}{},
			Write: struct {
				W moq.ParamIndexing
			}{
				W: moq.ParamIndexByHash,
			},
			WriteProxy: struct {
				W moq.ParamIndexing
			}{
				W: moq.ParamIndexByHash,
			},
			BasicAuth: struct{}{},
			SetBasicAuth: struct {
				Username moq.ParamIndexing
				Password moq.ParamIndexing
			}{
				Username: moq.ParamIndexByValue,
				Password: moq.ParamIndexByValue,
			},
			ParseForm: struct{}{},
			ParseMultipartForm: struct {
				MaxMemory moq.ParamIndexing
			}{
				MaxMemory: moq.ParamIndexByValue,
			},
			FormValue: struct {
				Key moq.ParamIndexing
			}{
				Key: moq.ParamIndexByValue,
			},
			PostFormValue: struct {
				Key moq.ParamIndexing
			}{
				Key: moq.ParamIndexByValue,
			},
			FormFile: struct {
				Key moq.ParamIndexing
			}{
				Key: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Request_starGenType type
func (m *MoqRequest_starGenType) Mock() *MoqRequest_starGenType_mock { return m.Moq }

func (m *MoqRequest_starGenType_mock) Context() (result1 context.Context) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_Context_params{}
	var results *MoqRequest_starGenType_Context_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Context {
		paramsKey := m.Moq.ParamsKey_Context(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Context(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Context(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Context(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRequest_starGenType_mock) WithContext(ctx context.Context) (result1 *http.Request) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_WithContext_params{
		Ctx: ctx,
	}
	var results *MoqRequest_starGenType_WithContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WithContext {
		paramsKey := m.Moq.ParamsKey_WithContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WithContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WithContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WithContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(ctx)
	}
	return
}

func (m *MoqRequest_starGenType_mock) Clone(ctx context.Context) (result1 *http.Request) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_Clone_params{
		Ctx: ctx,
	}
	var results *MoqRequest_starGenType_Clone_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Clone {
		paramsKey := m.Moq.ParamsKey_Clone(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Clone(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Clone(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Clone(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(ctx)
	}
	return
}

func (m *MoqRequest_starGenType_mock) ProtoAtLeast(major, minor int) (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_ProtoAtLeast_params{
		Major: major,
		Minor: minor,
	}
	var results *MoqRequest_starGenType_ProtoAtLeast_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ProtoAtLeast {
		paramsKey := m.Moq.ParamsKey_ProtoAtLeast(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ProtoAtLeast(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ProtoAtLeast(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ProtoAtLeast(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(major, minor)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(major, minor)
	}
	return
}

func (m *MoqRequest_starGenType_mock) UserAgent() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_UserAgent_params{}
	var results *MoqRequest_starGenType_UserAgent_results
	for _, resultsByParams := range m.Moq.ResultsByParams_UserAgent {
		paramsKey := m.Moq.ParamsKey_UserAgent(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_UserAgent(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_UserAgent(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_UserAgent(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRequest_starGenType_mock) Cookies() (result1 []*http.Cookie) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_Cookies_params{}
	var results *MoqRequest_starGenType_Cookies_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Cookies {
		paramsKey := m.Moq.ParamsKey_Cookies(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Cookies(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Cookies(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Cookies(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRequest_starGenType_mock) Cookie(name string) (result1 *http.Cookie, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_Cookie_params{
		Name: name,
	}
	var results *MoqRequest_starGenType_Cookie_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Cookie {
		paramsKey := m.Moq.ParamsKey_Cookie(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Cookie(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Cookie(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Cookie(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(name)
	}
	return
}

func (m *MoqRequest_starGenType_mock) AddCookie(c *http.Cookie) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_AddCookie_params{
		C: c,
	}
	var results *MoqRequest_starGenType_AddCookie_results
	for _, resultsByParams := range m.Moq.ResultsByParams_AddCookie {
		paramsKey := m.Moq.ParamsKey_AddCookie(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_AddCookie(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_AddCookie(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_AddCookie(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(c)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(c)
	}
	return
}

func (m *MoqRequest_starGenType_mock) Referer() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_Referer_params{}
	var results *MoqRequest_starGenType_Referer_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Referer {
		paramsKey := m.Moq.ParamsKey_Referer(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Referer(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Referer(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Referer(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRequest_starGenType_mock) MultipartReader() (result1 *multipart.Reader, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_MultipartReader_params{}
	var results *MoqRequest_starGenType_MultipartReader_results
	for _, resultsByParams := range m.Moq.ResultsByParams_MultipartReader {
		paramsKey := m.Moq.ParamsKey_MultipartReader(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_MultipartReader(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_MultipartReader(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_MultipartReader(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqRequest_starGenType_mock) Write(w io.Writer) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_Write_params{
		W: w,
	}
	var results *MoqRequest_starGenType_Write_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Write {
		paramsKey := m.Moq.ParamsKey_Write(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Write(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Write(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Write(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(w)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(w)
	}
	return
}

func (m *MoqRequest_starGenType_mock) WriteProxy(w io.Writer) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_WriteProxy_params{
		W: w,
	}
	var results *MoqRequest_starGenType_WriteProxy_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteProxy {
		paramsKey := m.Moq.ParamsKey_WriteProxy(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteProxy(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteProxy(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteProxy(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(w)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(w)
	}
	return
}

func (m *MoqRequest_starGenType_mock) BasicAuth() (username, password string, ok bool) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_BasicAuth_params{}
	var results *MoqRequest_starGenType_BasicAuth_results
	for _, resultsByParams := range m.Moq.ResultsByParams_BasicAuth {
		paramsKey := m.Moq.ParamsKey_BasicAuth(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_BasicAuth(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_BasicAuth(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_BasicAuth(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		username = result.Values.Username
		password = result.Values.Password
		ok = result.Values.Ok
	}
	if result.DoReturnFn != nil {
		username, password, ok = result.DoReturnFn()
	}
	return
}

func (m *MoqRequest_starGenType_mock) SetBasicAuth(username, password string) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_SetBasicAuth_params{
		Username: username,
		Password: password,
	}
	var results *MoqRequest_starGenType_SetBasicAuth_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetBasicAuth {
		paramsKey := m.Moq.ParamsKey_SetBasicAuth(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetBasicAuth(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetBasicAuth(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetBasicAuth(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(username, password)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(username, password)
	}
	return
}

func (m *MoqRequest_starGenType_mock) ParseForm() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_ParseForm_params{}
	var results *MoqRequest_starGenType_ParseForm_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ParseForm {
		paramsKey := m.Moq.ParamsKey_ParseForm(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ParseForm(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ParseForm(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ParseForm(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqRequest_starGenType_mock) ParseMultipartForm(maxMemory int64) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_ParseMultipartForm_params{
		MaxMemory: maxMemory,
	}
	var results *MoqRequest_starGenType_ParseMultipartForm_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ParseMultipartForm {
		paramsKey := m.Moq.ParamsKey_ParseMultipartForm(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ParseMultipartForm(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ParseMultipartForm(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ParseMultipartForm(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(maxMemory)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(maxMemory)
	}
	return
}

func (m *MoqRequest_starGenType_mock) FormValue(key string) (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_FormValue_params{
		Key: key,
	}
	var results *MoqRequest_starGenType_FormValue_results
	for _, resultsByParams := range m.Moq.ResultsByParams_FormValue {
		paramsKey := m.Moq.ParamsKey_FormValue(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_FormValue(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_FormValue(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_FormValue(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(key)
	}
	return
}

func (m *MoqRequest_starGenType_mock) PostFormValue(key string) (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_PostFormValue_params{
		Key: key,
	}
	var results *MoqRequest_starGenType_PostFormValue_results
	for _, resultsByParams := range m.Moq.ResultsByParams_PostFormValue {
		paramsKey := m.Moq.ParamsKey_PostFormValue(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_PostFormValue(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_PostFormValue(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_PostFormValue(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(key)
	}
	return
}

func (m *MoqRequest_starGenType_mock) FormFile(key string) (result1 multipart.File, result2 *multipart.FileHeader, result3 error) {
	m.Moq.Scene.T.Helper()
	params := MoqRequest_starGenType_FormFile_params{
		Key: key,
	}
	var results *MoqRequest_starGenType_FormFile_results
	for _, resultsByParams := range m.Moq.ResultsByParams_FormFile {
		paramsKey := m.Moq.ParamsKey_FormFile(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_FormFile(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_FormFile(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_FormFile(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
		result3 = result.Values.Result3
	}
	if result.DoReturnFn != nil {
		result1, result2, result3 = result.DoReturnFn(key)
	}
	return
}

// OnCall returns the recorder implementation of the Request_starGenType type
func (m *MoqRequest_starGenType) OnCall() *MoqRequest_starGenType_recorder {
	return &MoqRequest_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqRequest_starGenType_recorder) Context() *MoqRequest_starGenType_Context_fnRecorder {
	return &MoqRequest_starGenType_Context_fnRecorder{
		Params:   MoqRequest_starGenType_Context_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_Context_fnRecorder) Any() *MoqRequest_starGenType_Context_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Context(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_Context_anyParams{Recorder: r}
}

func (r *MoqRequest_starGenType_Context_fnRecorder) Seq() *MoqRequest_starGenType_Context_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Context(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_Context_fnRecorder) NoSeq() *MoqRequest_starGenType_Context_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Context(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_Context_fnRecorder) ReturnResults(result1 context.Context) *MoqRequest_starGenType_Context_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 context.Context
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_Context_doFn
		DoReturnFn MoqRequest_starGenType_Context_doReturnFn
	}{
		Values: &struct {
			Result1 context.Context
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_Context_fnRecorder) AndDo(fn MoqRequest_starGenType_Context_doFn) *MoqRequest_starGenType_Context_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_Context_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_Context_doReturnFn) *MoqRequest_starGenType_Context_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 context.Context
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_Context_doFn
		DoReturnFn MoqRequest_starGenType_Context_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_Context_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_Context_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Context {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_Context_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_Context_paramsKey]*MoqRequest_starGenType_Context_results{},
		}
		r.Moq.ResultsByParams_Context = append(r.Moq.ResultsByParams_Context, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Context) {
			copy(r.Moq.ResultsByParams_Context[insertAt+1:], r.Moq.ResultsByParams_Context[insertAt:0])
			r.Moq.ResultsByParams_Context[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Context(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_Context_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_Context_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_Context_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 context.Context
				}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_Context_doFn
				DoReturnFn MoqRequest_starGenType_Context_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_Context(params MoqRequest_starGenType_Context_params) string {
	return fmt.Sprintf("Context()")
}

func (m *MoqRequest_starGenType) ParamsKey_Context(params MoqRequest_starGenType_Context_params, anyParams uint64) MoqRequest_starGenType_Context_paramsKey {
	m.Scene.T.Helper()
	return MoqRequest_starGenType_Context_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRequest_starGenType_recorder) WithContext(ctx context.Context) *MoqRequest_starGenType_WithContext_fnRecorder {
	return &MoqRequest_starGenType_WithContext_fnRecorder{
		Params: MoqRequest_starGenType_WithContext_params{
			Ctx: ctx,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_WithContext_fnRecorder) Any() *MoqRequest_starGenType_WithContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WithContext(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_WithContext_anyParams{Recorder: r}
}

func (a *MoqRequest_starGenType_WithContext_anyParams) Ctx() *MoqRequest_starGenType_WithContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRequest_starGenType_WithContext_fnRecorder) Seq() *MoqRequest_starGenType_WithContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WithContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_WithContext_fnRecorder) NoSeq() *MoqRequest_starGenType_WithContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WithContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_WithContext_fnRecorder) ReturnResults(result1 *http.Request) *MoqRequest_starGenType_WithContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *http.Request
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_WithContext_doFn
		DoReturnFn MoqRequest_starGenType_WithContext_doReturnFn
	}{
		Values: &struct {
			Result1 *http.Request
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_WithContext_fnRecorder) AndDo(fn MoqRequest_starGenType_WithContext_doFn) *MoqRequest_starGenType_WithContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_WithContext_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_WithContext_doReturnFn) *MoqRequest_starGenType_WithContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *http.Request
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_WithContext_doFn
		DoReturnFn MoqRequest_starGenType_WithContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_WithContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_WithContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WithContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_WithContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_WithContext_paramsKey]*MoqRequest_starGenType_WithContext_results{},
		}
		r.Moq.ResultsByParams_WithContext = append(r.Moq.ResultsByParams_WithContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WithContext) {
			copy(r.Moq.ResultsByParams_WithContext[insertAt+1:], r.Moq.ResultsByParams_WithContext[insertAt:0])
			r.Moq.ResultsByParams_WithContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WithContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_WithContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_WithContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_WithContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *http.Request
				}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_WithContext_doFn
				DoReturnFn MoqRequest_starGenType_WithContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_WithContext(params MoqRequest_starGenType_WithContext_params) string {
	return fmt.Sprintf("WithContext(%#v)", params.Ctx)
}

func (m *MoqRequest_starGenType) ParamsKey_WithContext(params MoqRequest_starGenType_WithContext_params, anyParams uint64) MoqRequest_starGenType_WithContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WithContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	return MoqRequest_starGenType_WithContext_paramsKey{
		Params: struct{ Ctx context.Context }{
			Ctx: ctxUsed,
		},
		Hashes: struct{ Ctx hash.Hash }{
			Ctx: ctxUsedHash,
		},
	}
}

func (m *MoqRequest_starGenType_recorder) Clone(ctx context.Context) *MoqRequest_starGenType_Clone_fnRecorder {
	return &MoqRequest_starGenType_Clone_fnRecorder{
		Params: MoqRequest_starGenType_Clone_params{
			Ctx: ctx,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_Clone_fnRecorder) Any() *MoqRequest_starGenType_Clone_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Clone(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_Clone_anyParams{Recorder: r}
}

func (a *MoqRequest_starGenType_Clone_anyParams) Ctx() *MoqRequest_starGenType_Clone_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRequest_starGenType_Clone_fnRecorder) Seq() *MoqRequest_starGenType_Clone_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Clone(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_Clone_fnRecorder) NoSeq() *MoqRequest_starGenType_Clone_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Clone(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_Clone_fnRecorder) ReturnResults(result1 *http.Request) *MoqRequest_starGenType_Clone_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *http.Request
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_Clone_doFn
		DoReturnFn MoqRequest_starGenType_Clone_doReturnFn
	}{
		Values: &struct {
			Result1 *http.Request
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_Clone_fnRecorder) AndDo(fn MoqRequest_starGenType_Clone_doFn) *MoqRequest_starGenType_Clone_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_Clone_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_Clone_doReturnFn) *MoqRequest_starGenType_Clone_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *http.Request
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_Clone_doFn
		DoReturnFn MoqRequest_starGenType_Clone_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_Clone_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_Clone_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Clone {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_Clone_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_Clone_paramsKey]*MoqRequest_starGenType_Clone_results{},
		}
		r.Moq.ResultsByParams_Clone = append(r.Moq.ResultsByParams_Clone, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Clone) {
			copy(r.Moq.ResultsByParams_Clone[insertAt+1:], r.Moq.ResultsByParams_Clone[insertAt:0])
			r.Moq.ResultsByParams_Clone[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Clone(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_Clone_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_Clone_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_Clone_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *http.Request
				}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_Clone_doFn
				DoReturnFn MoqRequest_starGenType_Clone_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_Clone(params MoqRequest_starGenType_Clone_params) string {
	return fmt.Sprintf("Clone(%#v)", params.Ctx)
}

func (m *MoqRequest_starGenType) ParamsKey_Clone(params MoqRequest_starGenType_Clone_params, anyParams uint64) MoqRequest_starGenType_Clone_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Clone.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	return MoqRequest_starGenType_Clone_paramsKey{
		Params: struct{ Ctx context.Context }{
			Ctx: ctxUsed,
		},
		Hashes: struct{ Ctx hash.Hash }{
			Ctx: ctxUsedHash,
		},
	}
}

func (m *MoqRequest_starGenType_recorder) ProtoAtLeast(major, minor int) *MoqRequest_starGenType_ProtoAtLeast_fnRecorder {
	return &MoqRequest_starGenType_ProtoAtLeast_fnRecorder{
		Params: MoqRequest_starGenType_ProtoAtLeast_params{
			Major: major,
			Minor: minor,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_ProtoAtLeast_fnRecorder) Any() *MoqRequest_starGenType_ProtoAtLeast_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ProtoAtLeast(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_ProtoAtLeast_anyParams{Recorder: r}
}

func (a *MoqRequest_starGenType_ProtoAtLeast_anyParams) Major() *MoqRequest_starGenType_ProtoAtLeast_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqRequest_starGenType_ProtoAtLeast_anyParams) Minor() *MoqRequest_starGenType_ProtoAtLeast_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqRequest_starGenType_ProtoAtLeast_fnRecorder) Seq() *MoqRequest_starGenType_ProtoAtLeast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ProtoAtLeast(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_ProtoAtLeast_fnRecorder) NoSeq() *MoqRequest_starGenType_ProtoAtLeast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ProtoAtLeast(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_ProtoAtLeast_fnRecorder) ReturnResults(result1 bool) *MoqRequest_starGenType_ProtoAtLeast_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_ProtoAtLeast_doFn
		DoReturnFn MoqRequest_starGenType_ProtoAtLeast_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_ProtoAtLeast_fnRecorder) AndDo(fn MoqRequest_starGenType_ProtoAtLeast_doFn) *MoqRequest_starGenType_ProtoAtLeast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_ProtoAtLeast_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_ProtoAtLeast_doReturnFn) *MoqRequest_starGenType_ProtoAtLeast_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_ProtoAtLeast_doFn
		DoReturnFn MoqRequest_starGenType_ProtoAtLeast_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_ProtoAtLeast_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_ProtoAtLeast_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ProtoAtLeast {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_ProtoAtLeast_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_ProtoAtLeast_paramsKey]*MoqRequest_starGenType_ProtoAtLeast_results{},
		}
		r.Moq.ResultsByParams_ProtoAtLeast = append(r.Moq.ResultsByParams_ProtoAtLeast, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ProtoAtLeast) {
			copy(r.Moq.ResultsByParams_ProtoAtLeast[insertAt+1:], r.Moq.ResultsByParams_ProtoAtLeast[insertAt:0])
			r.Moq.ResultsByParams_ProtoAtLeast[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ProtoAtLeast(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_ProtoAtLeast_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_ProtoAtLeast_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_ProtoAtLeast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_ProtoAtLeast_doFn
				DoReturnFn MoqRequest_starGenType_ProtoAtLeast_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_ProtoAtLeast(params MoqRequest_starGenType_ProtoAtLeast_params) string {
	return fmt.Sprintf("ProtoAtLeast(%#v, %#v)", params.Major, params.Minor)
}

func (m *MoqRequest_starGenType) ParamsKey_ProtoAtLeast(params MoqRequest_starGenType_ProtoAtLeast_params, anyParams uint64) MoqRequest_starGenType_ProtoAtLeast_paramsKey {
	m.Scene.T.Helper()
	var majorUsed int
	var majorUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ProtoAtLeast.Major == moq.ParamIndexByValue {
			majorUsed = params.Major
		} else {
			majorUsedHash = hash.DeepHash(params.Major)
		}
	}
	var minorUsed int
	var minorUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.ProtoAtLeast.Minor == moq.ParamIndexByValue {
			minorUsed = params.Minor
		} else {
			minorUsedHash = hash.DeepHash(params.Minor)
		}
	}
	return MoqRequest_starGenType_ProtoAtLeast_paramsKey{
		Params: struct{ Major, Minor int }{
			Major: majorUsed,
			Minor: minorUsed,
		},
		Hashes: struct{ Major, Minor hash.Hash }{
			Major: majorUsedHash,
			Minor: minorUsedHash,
		},
	}
}

func (m *MoqRequest_starGenType_recorder) UserAgent() *MoqRequest_starGenType_UserAgent_fnRecorder {
	return &MoqRequest_starGenType_UserAgent_fnRecorder{
		Params:   MoqRequest_starGenType_UserAgent_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_UserAgent_fnRecorder) Any() *MoqRequest_starGenType_UserAgent_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UserAgent(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_UserAgent_anyParams{Recorder: r}
}

func (r *MoqRequest_starGenType_UserAgent_fnRecorder) Seq() *MoqRequest_starGenType_UserAgent_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UserAgent(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_UserAgent_fnRecorder) NoSeq() *MoqRequest_starGenType_UserAgent_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UserAgent(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_UserAgent_fnRecorder) ReturnResults(result1 string) *MoqRequest_starGenType_UserAgent_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_UserAgent_doFn
		DoReturnFn MoqRequest_starGenType_UserAgent_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_UserAgent_fnRecorder) AndDo(fn MoqRequest_starGenType_UserAgent_doFn) *MoqRequest_starGenType_UserAgent_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_UserAgent_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_UserAgent_doReturnFn) *MoqRequest_starGenType_UserAgent_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_UserAgent_doFn
		DoReturnFn MoqRequest_starGenType_UserAgent_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_UserAgent_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_UserAgent_resultsByParams
	for n, res := range r.Moq.ResultsByParams_UserAgent {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_UserAgent_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_UserAgent_paramsKey]*MoqRequest_starGenType_UserAgent_results{},
		}
		r.Moq.ResultsByParams_UserAgent = append(r.Moq.ResultsByParams_UserAgent, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_UserAgent) {
			copy(r.Moq.ResultsByParams_UserAgent[insertAt+1:], r.Moq.ResultsByParams_UserAgent[insertAt:0])
			r.Moq.ResultsByParams_UserAgent[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_UserAgent(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_UserAgent_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_UserAgent_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_UserAgent_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_UserAgent_doFn
				DoReturnFn MoqRequest_starGenType_UserAgent_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_UserAgent(params MoqRequest_starGenType_UserAgent_params) string {
	return fmt.Sprintf("UserAgent()")
}

func (m *MoqRequest_starGenType) ParamsKey_UserAgent(params MoqRequest_starGenType_UserAgent_params, anyParams uint64) MoqRequest_starGenType_UserAgent_paramsKey {
	m.Scene.T.Helper()
	return MoqRequest_starGenType_UserAgent_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRequest_starGenType_recorder) Cookies() *MoqRequest_starGenType_Cookies_fnRecorder {
	return &MoqRequest_starGenType_Cookies_fnRecorder{
		Params:   MoqRequest_starGenType_Cookies_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_Cookies_fnRecorder) Any() *MoqRequest_starGenType_Cookies_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Cookies(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_Cookies_anyParams{Recorder: r}
}

func (r *MoqRequest_starGenType_Cookies_fnRecorder) Seq() *MoqRequest_starGenType_Cookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Cookies(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_Cookies_fnRecorder) NoSeq() *MoqRequest_starGenType_Cookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Cookies(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_Cookies_fnRecorder) ReturnResults(result1 []*http.Cookie) *MoqRequest_starGenType_Cookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []*http.Cookie
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_Cookies_doFn
		DoReturnFn MoqRequest_starGenType_Cookies_doReturnFn
	}{
		Values: &struct {
			Result1 []*http.Cookie
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_Cookies_fnRecorder) AndDo(fn MoqRequest_starGenType_Cookies_doFn) *MoqRequest_starGenType_Cookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_Cookies_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_Cookies_doReturnFn) *MoqRequest_starGenType_Cookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []*http.Cookie
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_Cookies_doFn
		DoReturnFn MoqRequest_starGenType_Cookies_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_Cookies_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_Cookies_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Cookies {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_Cookies_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_Cookies_paramsKey]*MoqRequest_starGenType_Cookies_results{},
		}
		r.Moq.ResultsByParams_Cookies = append(r.Moq.ResultsByParams_Cookies, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Cookies) {
			copy(r.Moq.ResultsByParams_Cookies[insertAt+1:], r.Moq.ResultsByParams_Cookies[insertAt:0])
			r.Moq.ResultsByParams_Cookies[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Cookies(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_Cookies_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_Cookies_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_Cookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []*http.Cookie
				}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_Cookies_doFn
				DoReturnFn MoqRequest_starGenType_Cookies_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_Cookies(params MoqRequest_starGenType_Cookies_params) string {
	return fmt.Sprintf("Cookies()")
}

func (m *MoqRequest_starGenType) ParamsKey_Cookies(params MoqRequest_starGenType_Cookies_params, anyParams uint64) MoqRequest_starGenType_Cookies_paramsKey {
	m.Scene.T.Helper()
	return MoqRequest_starGenType_Cookies_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRequest_starGenType_recorder) Cookie(name string) *MoqRequest_starGenType_Cookie_fnRecorder {
	return &MoqRequest_starGenType_Cookie_fnRecorder{
		Params: MoqRequest_starGenType_Cookie_params{
			Name: name,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_Cookie_fnRecorder) Any() *MoqRequest_starGenType_Cookie_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Cookie(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_Cookie_anyParams{Recorder: r}
}

func (a *MoqRequest_starGenType_Cookie_anyParams) Name() *MoqRequest_starGenType_Cookie_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRequest_starGenType_Cookie_fnRecorder) Seq() *MoqRequest_starGenType_Cookie_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Cookie(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_Cookie_fnRecorder) NoSeq() *MoqRequest_starGenType_Cookie_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Cookie(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_Cookie_fnRecorder) ReturnResults(result1 *http.Cookie, result2 error) *MoqRequest_starGenType_Cookie_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *http.Cookie
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_Cookie_doFn
		DoReturnFn MoqRequest_starGenType_Cookie_doReturnFn
	}{
		Values: &struct {
			Result1 *http.Cookie
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_Cookie_fnRecorder) AndDo(fn MoqRequest_starGenType_Cookie_doFn) *MoqRequest_starGenType_Cookie_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_Cookie_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_Cookie_doReturnFn) *MoqRequest_starGenType_Cookie_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *http.Cookie
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_Cookie_doFn
		DoReturnFn MoqRequest_starGenType_Cookie_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_Cookie_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_Cookie_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Cookie {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_Cookie_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_Cookie_paramsKey]*MoqRequest_starGenType_Cookie_results{},
		}
		r.Moq.ResultsByParams_Cookie = append(r.Moq.ResultsByParams_Cookie, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Cookie) {
			copy(r.Moq.ResultsByParams_Cookie[insertAt+1:], r.Moq.ResultsByParams_Cookie[insertAt:0])
			r.Moq.ResultsByParams_Cookie[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Cookie(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_Cookie_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_Cookie_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_Cookie_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *http.Cookie
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_Cookie_doFn
				DoReturnFn MoqRequest_starGenType_Cookie_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_Cookie(params MoqRequest_starGenType_Cookie_params) string {
	return fmt.Sprintf("Cookie(%#v)", params.Name)
}

func (m *MoqRequest_starGenType) ParamsKey_Cookie(params MoqRequest_starGenType_Cookie_params, anyParams uint64) MoqRequest_starGenType_Cookie_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Cookie.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	return MoqRequest_starGenType_Cookie_paramsKey{
		Params: struct{ Name string }{
			Name: nameUsed,
		},
		Hashes: struct{ Name hash.Hash }{
			Name: nameUsedHash,
		},
	}
}

func (m *MoqRequest_starGenType_recorder) AddCookie(c *http.Cookie) *MoqRequest_starGenType_AddCookie_fnRecorder {
	return &MoqRequest_starGenType_AddCookie_fnRecorder{
		Params: MoqRequest_starGenType_AddCookie_params{
			C: c,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_AddCookie_fnRecorder) Any() *MoqRequest_starGenType_AddCookie_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AddCookie(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_AddCookie_anyParams{Recorder: r}
}

func (a *MoqRequest_starGenType_AddCookie_anyParams) C() *MoqRequest_starGenType_AddCookie_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRequest_starGenType_AddCookie_fnRecorder) Seq() *MoqRequest_starGenType_AddCookie_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AddCookie(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_AddCookie_fnRecorder) NoSeq() *MoqRequest_starGenType_AddCookie_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AddCookie(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_AddCookie_fnRecorder) ReturnResults() *MoqRequest_starGenType_AddCookie_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_AddCookie_doFn
		DoReturnFn MoqRequest_starGenType_AddCookie_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_AddCookie_fnRecorder) AndDo(fn MoqRequest_starGenType_AddCookie_doFn) *MoqRequest_starGenType_AddCookie_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_AddCookie_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_AddCookie_doReturnFn) *MoqRequest_starGenType_AddCookie_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_AddCookie_doFn
		DoReturnFn MoqRequest_starGenType_AddCookie_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_AddCookie_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_AddCookie_resultsByParams
	for n, res := range r.Moq.ResultsByParams_AddCookie {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_AddCookie_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_AddCookie_paramsKey]*MoqRequest_starGenType_AddCookie_results{},
		}
		r.Moq.ResultsByParams_AddCookie = append(r.Moq.ResultsByParams_AddCookie, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_AddCookie) {
			copy(r.Moq.ResultsByParams_AddCookie[insertAt+1:], r.Moq.ResultsByParams_AddCookie[insertAt:0])
			r.Moq.ResultsByParams_AddCookie[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_AddCookie(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_AddCookie_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_AddCookie_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_AddCookie_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_AddCookie_doFn
				DoReturnFn MoqRequest_starGenType_AddCookie_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_AddCookie(params MoqRequest_starGenType_AddCookie_params) string {
	return fmt.Sprintf("AddCookie(%#v)", params.C)
}

func (m *MoqRequest_starGenType) ParamsKey_AddCookie(params MoqRequest_starGenType_AddCookie_params, anyParams uint64) MoqRequest_starGenType_AddCookie_paramsKey {
	m.Scene.T.Helper()
	var cUsed *http.Cookie
	var cUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.AddCookie.C == moq.ParamIndexByValue {
			cUsed = params.C
		} else {
			cUsedHash = hash.DeepHash(params.C)
		}
	}
	return MoqRequest_starGenType_AddCookie_paramsKey{
		Params: struct{ C *http.Cookie }{
			C: cUsed,
		},
		Hashes: struct{ C hash.Hash }{
			C: cUsedHash,
		},
	}
}

func (m *MoqRequest_starGenType_recorder) Referer() *MoqRequest_starGenType_Referer_fnRecorder {
	return &MoqRequest_starGenType_Referer_fnRecorder{
		Params:   MoqRequest_starGenType_Referer_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_Referer_fnRecorder) Any() *MoqRequest_starGenType_Referer_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Referer(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_Referer_anyParams{Recorder: r}
}

func (r *MoqRequest_starGenType_Referer_fnRecorder) Seq() *MoqRequest_starGenType_Referer_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Referer(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_Referer_fnRecorder) NoSeq() *MoqRequest_starGenType_Referer_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Referer(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_Referer_fnRecorder) ReturnResults(result1 string) *MoqRequest_starGenType_Referer_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_Referer_doFn
		DoReturnFn MoqRequest_starGenType_Referer_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_Referer_fnRecorder) AndDo(fn MoqRequest_starGenType_Referer_doFn) *MoqRequest_starGenType_Referer_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_Referer_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_Referer_doReturnFn) *MoqRequest_starGenType_Referer_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_Referer_doFn
		DoReturnFn MoqRequest_starGenType_Referer_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_Referer_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_Referer_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Referer {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_Referer_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_Referer_paramsKey]*MoqRequest_starGenType_Referer_results{},
		}
		r.Moq.ResultsByParams_Referer = append(r.Moq.ResultsByParams_Referer, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Referer) {
			copy(r.Moq.ResultsByParams_Referer[insertAt+1:], r.Moq.ResultsByParams_Referer[insertAt:0])
			r.Moq.ResultsByParams_Referer[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Referer(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_Referer_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_Referer_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_Referer_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_Referer_doFn
				DoReturnFn MoqRequest_starGenType_Referer_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_Referer(params MoqRequest_starGenType_Referer_params) string {
	return fmt.Sprintf("Referer()")
}

func (m *MoqRequest_starGenType) ParamsKey_Referer(params MoqRequest_starGenType_Referer_params, anyParams uint64) MoqRequest_starGenType_Referer_paramsKey {
	m.Scene.T.Helper()
	return MoqRequest_starGenType_Referer_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRequest_starGenType_recorder) MultipartReader() *MoqRequest_starGenType_MultipartReader_fnRecorder {
	return &MoqRequest_starGenType_MultipartReader_fnRecorder{
		Params:   MoqRequest_starGenType_MultipartReader_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_MultipartReader_fnRecorder) Any() *MoqRequest_starGenType_MultipartReader_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MultipartReader(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_MultipartReader_anyParams{Recorder: r}
}

func (r *MoqRequest_starGenType_MultipartReader_fnRecorder) Seq() *MoqRequest_starGenType_MultipartReader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MultipartReader(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_MultipartReader_fnRecorder) NoSeq() *MoqRequest_starGenType_MultipartReader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MultipartReader(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_MultipartReader_fnRecorder) ReturnResults(result1 *multipart.Reader, result2 error) *MoqRequest_starGenType_MultipartReader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *multipart.Reader
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_MultipartReader_doFn
		DoReturnFn MoqRequest_starGenType_MultipartReader_doReturnFn
	}{
		Values: &struct {
			Result1 *multipart.Reader
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_MultipartReader_fnRecorder) AndDo(fn MoqRequest_starGenType_MultipartReader_doFn) *MoqRequest_starGenType_MultipartReader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_MultipartReader_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_MultipartReader_doReturnFn) *MoqRequest_starGenType_MultipartReader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *multipart.Reader
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_MultipartReader_doFn
		DoReturnFn MoqRequest_starGenType_MultipartReader_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_MultipartReader_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_MultipartReader_resultsByParams
	for n, res := range r.Moq.ResultsByParams_MultipartReader {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_MultipartReader_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_MultipartReader_paramsKey]*MoqRequest_starGenType_MultipartReader_results{},
		}
		r.Moq.ResultsByParams_MultipartReader = append(r.Moq.ResultsByParams_MultipartReader, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_MultipartReader) {
			copy(r.Moq.ResultsByParams_MultipartReader[insertAt+1:], r.Moq.ResultsByParams_MultipartReader[insertAt:0])
			r.Moq.ResultsByParams_MultipartReader[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_MultipartReader(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_MultipartReader_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_MultipartReader_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_MultipartReader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *multipart.Reader
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_MultipartReader_doFn
				DoReturnFn MoqRequest_starGenType_MultipartReader_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_MultipartReader(params MoqRequest_starGenType_MultipartReader_params) string {
	return fmt.Sprintf("MultipartReader()")
}

func (m *MoqRequest_starGenType) ParamsKey_MultipartReader(params MoqRequest_starGenType_MultipartReader_params, anyParams uint64) MoqRequest_starGenType_MultipartReader_paramsKey {
	m.Scene.T.Helper()
	return MoqRequest_starGenType_MultipartReader_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRequest_starGenType_recorder) Write(w io.Writer) *MoqRequest_starGenType_Write_fnRecorder {
	return &MoqRequest_starGenType_Write_fnRecorder{
		Params: MoqRequest_starGenType_Write_params{
			W: w,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_Write_fnRecorder) Any() *MoqRequest_starGenType_Write_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_Write_anyParams{Recorder: r}
}

func (a *MoqRequest_starGenType_Write_anyParams) W() *MoqRequest_starGenType_Write_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRequest_starGenType_Write_fnRecorder) Seq() *MoqRequest_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_Write_fnRecorder) NoSeq() *MoqRequest_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_Write_fnRecorder) ReturnResults(result1 error) *MoqRequest_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_Write_doFn
		DoReturnFn MoqRequest_starGenType_Write_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_Write_fnRecorder) AndDo(fn MoqRequest_starGenType_Write_doFn) *MoqRequest_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_Write_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_Write_doReturnFn) *MoqRequest_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_Write_doFn
		DoReturnFn MoqRequest_starGenType_Write_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_Write_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_Write_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Write {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_Write_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_Write_paramsKey]*MoqRequest_starGenType_Write_results{},
		}
		r.Moq.ResultsByParams_Write = append(r.Moq.ResultsByParams_Write, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Write) {
			copy(r.Moq.ResultsByParams_Write[insertAt+1:], r.Moq.ResultsByParams_Write[insertAt:0])
			r.Moq.ResultsByParams_Write[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Write(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_Write_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_Write_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_Write_doFn
				DoReturnFn MoqRequest_starGenType_Write_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_Write(params MoqRequest_starGenType_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.W)
}

func (m *MoqRequest_starGenType) ParamsKey_Write(params MoqRequest_starGenType_Write_params, anyParams uint64) MoqRequest_starGenType_Write_paramsKey {
	m.Scene.T.Helper()
	var wUsed io.Writer
	var wUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Write.W == moq.ParamIndexByValue {
			wUsed = params.W
		} else {
			wUsedHash = hash.DeepHash(params.W)
		}
	}
	return MoqRequest_starGenType_Write_paramsKey{
		Params: struct{ W io.Writer }{
			W: wUsed,
		},
		Hashes: struct{ W hash.Hash }{
			W: wUsedHash,
		},
	}
}

func (m *MoqRequest_starGenType_recorder) WriteProxy(w io.Writer) *MoqRequest_starGenType_WriteProxy_fnRecorder {
	return &MoqRequest_starGenType_WriteProxy_fnRecorder{
		Params: MoqRequest_starGenType_WriteProxy_params{
			W: w,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_WriteProxy_fnRecorder) Any() *MoqRequest_starGenType_WriteProxy_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteProxy(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_WriteProxy_anyParams{Recorder: r}
}

func (a *MoqRequest_starGenType_WriteProxy_anyParams) W() *MoqRequest_starGenType_WriteProxy_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRequest_starGenType_WriteProxy_fnRecorder) Seq() *MoqRequest_starGenType_WriteProxy_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteProxy(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_WriteProxy_fnRecorder) NoSeq() *MoqRequest_starGenType_WriteProxy_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteProxy(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_WriteProxy_fnRecorder) ReturnResults(result1 error) *MoqRequest_starGenType_WriteProxy_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_WriteProxy_doFn
		DoReturnFn MoqRequest_starGenType_WriteProxy_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_WriteProxy_fnRecorder) AndDo(fn MoqRequest_starGenType_WriteProxy_doFn) *MoqRequest_starGenType_WriteProxy_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_WriteProxy_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_WriteProxy_doReturnFn) *MoqRequest_starGenType_WriteProxy_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_WriteProxy_doFn
		DoReturnFn MoqRequest_starGenType_WriteProxy_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_WriteProxy_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_WriteProxy_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteProxy {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_WriteProxy_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_WriteProxy_paramsKey]*MoqRequest_starGenType_WriteProxy_results{},
		}
		r.Moq.ResultsByParams_WriteProxy = append(r.Moq.ResultsByParams_WriteProxy, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteProxy) {
			copy(r.Moq.ResultsByParams_WriteProxy[insertAt+1:], r.Moq.ResultsByParams_WriteProxy[insertAt:0])
			r.Moq.ResultsByParams_WriteProxy[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteProxy(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_WriteProxy_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_WriteProxy_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_WriteProxy_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_WriteProxy_doFn
				DoReturnFn MoqRequest_starGenType_WriteProxy_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_WriteProxy(params MoqRequest_starGenType_WriteProxy_params) string {
	return fmt.Sprintf("WriteProxy(%#v)", params.W)
}

func (m *MoqRequest_starGenType) ParamsKey_WriteProxy(params MoqRequest_starGenType_WriteProxy_params, anyParams uint64) MoqRequest_starGenType_WriteProxy_paramsKey {
	m.Scene.T.Helper()
	var wUsed io.Writer
	var wUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteProxy.W == moq.ParamIndexByValue {
			wUsed = params.W
		} else {
			wUsedHash = hash.DeepHash(params.W)
		}
	}
	return MoqRequest_starGenType_WriteProxy_paramsKey{
		Params: struct{ W io.Writer }{
			W: wUsed,
		},
		Hashes: struct{ W hash.Hash }{
			W: wUsedHash,
		},
	}
}

func (m *MoqRequest_starGenType_recorder) BasicAuth() *MoqRequest_starGenType_BasicAuth_fnRecorder {
	return &MoqRequest_starGenType_BasicAuth_fnRecorder{
		Params:   MoqRequest_starGenType_BasicAuth_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_BasicAuth_fnRecorder) Any() *MoqRequest_starGenType_BasicAuth_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BasicAuth(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_BasicAuth_anyParams{Recorder: r}
}

func (r *MoqRequest_starGenType_BasicAuth_fnRecorder) Seq() *MoqRequest_starGenType_BasicAuth_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BasicAuth(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_BasicAuth_fnRecorder) NoSeq() *MoqRequest_starGenType_BasicAuth_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BasicAuth(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_BasicAuth_fnRecorder) ReturnResults(username, password string, ok bool) *MoqRequest_starGenType_BasicAuth_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Username, Password string
			Ok                 bool
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_BasicAuth_doFn
		DoReturnFn MoqRequest_starGenType_BasicAuth_doReturnFn
	}{
		Values: &struct {
			Username, Password string
			Ok                 bool
		}{
			Username: username,
			Password: password,
			Ok:       ok,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_BasicAuth_fnRecorder) AndDo(fn MoqRequest_starGenType_BasicAuth_doFn) *MoqRequest_starGenType_BasicAuth_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_BasicAuth_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_BasicAuth_doReturnFn) *MoqRequest_starGenType_BasicAuth_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Username, Password string
			Ok                 bool
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_BasicAuth_doFn
		DoReturnFn MoqRequest_starGenType_BasicAuth_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_BasicAuth_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_BasicAuth_resultsByParams
	for n, res := range r.Moq.ResultsByParams_BasicAuth {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_BasicAuth_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_BasicAuth_paramsKey]*MoqRequest_starGenType_BasicAuth_results{},
		}
		r.Moq.ResultsByParams_BasicAuth = append(r.Moq.ResultsByParams_BasicAuth, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_BasicAuth) {
			copy(r.Moq.ResultsByParams_BasicAuth[insertAt+1:], r.Moq.ResultsByParams_BasicAuth[insertAt:0])
			r.Moq.ResultsByParams_BasicAuth[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_BasicAuth(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_BasicAuth_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_BasicAuth_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_BasicAuth_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Username, Password string
					Ok                 bool
				}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_BasicAuth_doFn
				DoReturnFn MoqRequest_starGenType_BasicAuth_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_BasicAuth(params MoqRequest_starGenType_BasicAuth_params) string {
	return fmt.Sprintf("BasicAuth()")
}

func (m *MoqRequest_starGenType) ParamsKey_BasicAuth(params MoqRequest_starGenType_BasicAuth_params, anyParams uint64) MoqRequest_starGenType_BasicAuth_paramsKey {
	m.Scene.T.Helper()
	return MoqRequest_starGenType_BasicAuth_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRequest_starGenType_recorder) SetBasicAuth(username, password string) *MoqRequest_starGenType_SetBasicAuth_fnRecorder {
	return &MoqRequest_starGenType_SetBasicAuth_fnRecorder{
		Params: MoqRequest_starGenType_SetBasicAuth_params{
			Username: username,
			Password: password,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_SetBasicAuth_fnRecorder) Any() *MoqRequest_starGenType_SetBasicAuth_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetBasicAuth(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_SetBasicAuth_anyParams{Recorder: r}
}

func (a *MoqRequest_starGenType_SetBasicAuth_anyParams) Username() *MoqRequest_starGenType_SetBasicAuth_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqRequest_starGenType_SetBasicAuth_anyParams) Password() *MoqRequest_starGenType_SetBasicAuth_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqRequest_starGenType_SetBasicAuth_fnRecorder) Seq() *MoqRequest_starGenType_SetBasicAuth_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetBasicAuth(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_SetBasicAuth_fnRecorder) NoSeq() *MoqRequest_starGenType_SetBasicAuth_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetBasicAuth(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_SetBasicAuth_fnRecorder) ReturnResults() *MoqRequest_starGenType_SetBasicAuth_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_SetBasicAuth_doFn
		DoReturnFn MoqRequest_starGenType_SetBasicAuth_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_SetBasicAuth_fnRecorder) AndDo(fn MoqRequest_starGenType_SetBasicAuth_doFn) *MoqRequest_starGenType_SetBasicAuth_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_SetBasicAuth_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_SetBasicAuth_doReturnFn) *MoqRequest_starGenType_SetBasicAuth_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_SetBasicAuth_doFn
		DoReturnFn MoqRequest_starGenType_SetBasicAuth_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_SetBasicAuth_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_SetBasicAuth_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetBasicAuth {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_SetBasicAuth_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_SetBasicAuth_paramsKey]*MoqRequest_starGenType_SetBasicAuth_results{},
		}
		r.Moq.ResultsByParams_SetBasicAuth = append(r.Moq.ResultsByParams_SetBasicAuth, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetBasicAuth) {
			copy(r.Moq.ResultsByParams_SetBasicAuth[insertAt+1:], r.Moq.ResultsByParams_SetBasicAuth[insertAt:0])
			r.Moq.ResultsByParams_SetBasicAuth[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetBasicAuth(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_SetBasicAuth_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_SetBasicAuth_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_SetBasicAuth_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_SetBasicAuth_doFn
				DoReturnFn MoqRequest_starGenType_SetBasicAuth_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_SetBasicAuth(params MoqRequest_starGenType_SetBasicAuth_params) string {
	return fmt.Sprintf("SetBasicAuth(%#v, %#v)", params.Username, params.Password)
}

func (m *MoqRequest_starGenType) ParamsKey_SetBasicAuth(params MoqRequest_starGenType_SetBasicAuth_params, anyParams uint64) MoqRequest_starGenType_SetBasicAuth_paramsKey {
	m.Scene.T.Helper()
	var usernameUsed string
	var usernameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetBasicAuth.Username == moq.ParamIndexByValue {
			usernameUsed = params.Username
		} else {
			usernameUsedHash = hash.DeepHash(params.Username)
		}
	}
	var passwordUsed string
	var passwordUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.SetBasicAuth.Password == moq.ParamIndexByValue {
			passwordUsed = params.Password
		} else {
			passwordUsedHash = hash.DeepHash(params.Password)
		}
	}
	return MoqRequest_starGenType_SetBasicAuth_paramsKey{
		Params: struct{ Username, Password string }{
			Username: usernameUsed,
			Password: passwordUsed,
		},
		Hashes: struct{ Username, Password hash.Hash }{
			Username: usernameUsedHash,
			Password: passwordUsedHash,
		},
	}
}

func (m *MoqRequest_starGenType_recorder) ParseForm() *MoqRequest_starGenType_ParseForm_fnRecorder {
	return &MoqRequest_starGenType_ParseForm_fnRecorder{
		Params:   MoqRequest_starGenType_ParseForm_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_ParseForm_fnRecorder) Any() *MoqRequest_starGenType_ParseForm_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ParseForm(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_ParseForm_anyParams{Recorder: r}
}

func (r *MoqRequest_starGenType_ParseForm_fnRecorder) Seq() *MoqRequest_starGenType_ParseForm_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ParseForm(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_ParseForm_fnRecorder) NoSeq() *MoqRequest_starGenType_ParseForm_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ParseForm(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_ParseForm_fnRecorder) ReturnResults(result1 error) *MoqRequest_starGenType_ParseForm_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_ParseForm_doFn
		DoReturnFn MoqRequest_starGenType_ParseForm_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_ParseForm_fnRecorder) AndDo(fn MoqRequest_starGenType_ParseForm_doFn) *MoqRequest_starGenType_ParseForm_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_ParseForm_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_ParseForm_doReturnFn) *MoqRequest_starGenType_ParseForm_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_ParseForm_doFn
		DoReturnFn MoqRequest_starGenType_ParseForm_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_ParseForm_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_ParseForm_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ParseForm {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_ParseForm_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_ParseForm_paramsKey]*MoqRequest_starGenType_ParseForm_results{},
		}
		r.Moq.ResultsByParams_ParseForm = append(r.Moq.ResultsByParams_ParseForm, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ParseForm) {
			copy(r.Moq.ResultsByParams_ParseForm[insertAt+1:], r.Moq.ResultsByParams_ParseForm[insertAt:0])
			r.Moq.ResultsByParams_ParseForm[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ParseForm(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_ParseForm_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_ParseForm_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_ParseForm_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_ParseForm_doFn
				DoReturnFn MoqRequest_starGenType_ParseForm_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_ParseForm(params MoqRequest_starGenType_ParseForm_params) string {
	return fmt.Sprintf("ParseForm()")
}

func (m *MoqRequest_starGenType) ParamsKey_ParseForm(params MoqRequest_starGenType_ParseForm_params, anyParams uint64) MoqRequest_starGenType_ParseForm_paramsKey {
	m.Scene.T.Helper()
	return MoqRequest_starGenType_ParseForm_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqRequest_starGenType_recorder) ParseMultipartForm(maxMemory int64) *MoqRequest_starGenType_ParseMultipartForm_fnRecorder {
	return &MoqRequest_starGenType_ParseMultipartForm_fnRecorder{
		Params: MoqRequest_starGenType_ParseMultipartForm_params{
			MaxMemory: maxMemory,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_ParseMultipartForm_fnRecorder) Any() *MoqRequest_starGenType_ParseMultipartForm_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ParseMultipartForm(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_ParseMultipartForm_anyParams{Recorder: r}
}

func (a *MoqRequest_starGenType_ParseMultipartForm_anyParams) MaxMemory() *MoqRequest_starGenType_ParseMultipartForm_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRequest_starGenType_ParseMultipartForm_fnRecorder) Seq() *MoqRequest_starGenType_ParseMultipartForm_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ParseMultipartForm(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_ParseMultipartForm_fnRecorder) NoSeq() *MoqRequest_starGenType_ParseMultipartForm_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ParseMultipartForm(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_ParseMultipartForm_fnRecorder) ReturnResults(result1 error) *MoqRequest_starGenType_ParseMultipartForm_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_ParseMultipartForm_doFn
		DoReturnFn MoqRequest_starGenType_ParseMultipartForm_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_ParseMultipartForm_fnRecorder) AndDo(fn MoqRequest_starGenType_ParseMultipartForm_doFn) *MoqRequest_starGenType_ParseMultipartForm_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_ParseMultipartForm_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_ParseMultipartForm_doReturnFn) *MoqRequest_starGenType_ParseMultipartForm_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_ParseMultipartForm_doFn
		DoReturnFn MoqRequest_starGenType_ParseMultipartForm_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_ParseMultipartForm_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_ParseMultipartForm_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ParseMultipartForm {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_ParseMultipartForm_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_ParseMultipartForm_paramsKey]*MoqRequest_starGenType_ParseMultipartForm_results{},
		}
		r.Moq.ResultsByParams_ParseMultipartForm = append(r.Moq.ResultsByParams_ParseMultipartForm, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ParseMultipartForm) {
			copy(r.Moq.ResultsByParams_ParseMultipartForm[insertAt+1:], r.Moq.ResultsByParams_ParseMultipartForm[insertAt:0])
			r.Moq.ResultsByParams_ParseMultipartForm[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ParseMultipartForm(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_ParseMultipartForm_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_ParseMultipartForm_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_ParseMultipartForm_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_ParseMultipartForm_doFn
				DoReturnFn MoqRequest_starGenType_ParseMultipartForm_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_ParseMultipartForm(params MoqRequest_starGenType_ParseMultipartForm_params) string {
	return fmt.Sprintf("ParseMultipartForm(%#v)", params.MaxMemory)
}

func (m *MoqRequest_starGenType) ParamsKey_ParseMultipartForm(params MoqRequest_starGenType_ParseMultipartForm_params, anyParams uint64) MoqRequest_starGenType_ParseMultipartForm_paramsKey {
	m.Scene.T.Helper()
	var maxMemoryUsed int64
	var maxMemoryUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ParseMultipartForm.MaxMemory == moq.ParamIndexByValue {
			maxMemoryUsed = params.MaxMemory
		} else {
			maxMemoryUsedHash = hash.DeepHash(params.MaxMemory)
		}
	}
	return MoqRequest_starGenType_ParseMultipartForm_paramsKey{
		Params: struct{ MaxMemory int64 }{
			MaxMemory: maxMemoryUsed,
		},
		Hashes: struct{ MaxMemory hash.Hash }{
			MaxMemory: maxMemoryUsedHash,
		},
	}
}

func (m *MoqRequest_starGenType_recorder) FormValue(key string) *MoqRequest_starGenType_FormValue_fnRecorder {
	return &MoqRequest_starGenType_FormValue_fnRecorder{
		Params: MoqRequest_starGenType_FormValue_params{
			Key: key,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_FormValue_fnRecorder) Any() *MoqRequest_starGenType_FormValue_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FormValue(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_FormValue_anyParams{Recorder: r}
}

func (a *MoqRequest_starGenType_FormValue_anyParams) Key() *MoqRequest_starGenType_FormValue_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRequest_starGenType_FormValue_fnRecorder) Seq() *MoqRequest_starGenType_FormValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FormValue(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_FormValue_fnRecorder) NoSeq() *MoqRequest_starGenType_FormValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FormValue(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_FormValue_fnRecorder) ReturnResults(result1 string) *MoqRequest_starGenType_FormValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_FormValue_doFn
		DoReturnFn MoqRequest_starGenType_FormValue_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_FormValue_fnRecorder) AndDo(fn MoqRequest_starGenType_FormValue_doFn) *MoqRequest_starGenType_FormValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_FormValue_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_FormValue_doReturnFn) *MoqRequest_starGenType_FormValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_FormValue_doFn
		DoReturnFn MoqRequest_starGenType_FormValue_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_FormValue_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_FormValue_resultsByParams
	for n, res := range r.Moq.ResultsByParams_FormValue {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_FormValue_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_FormValue_paramsKey]*MoqRequest_starGenType_FormValue_results{},
		}
		r.Moq.ResultsByParams_FormValue = append(r.Moq.ResultsByParams_FormValue, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_FormValue) {
			copy(r.Moq.ResultsByParams_FormValue[insertAt+1:], r.Moq.ResultsByParams_FormValue[insertAt:0])
			r.Moq.ResultsByParams_FormValue[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_FormValue(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_FormValue_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_FormValue_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_FormValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_FormValue_doFn
				DoReturnFn MoqRequest_starGenType_FormValue_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_FormValue(params MoqRequest_starGenType_FormValue_params) string {
	return fmt.Sprintf("FormValue(%#v)", params.Key)
}

func (m *MoqRequest_starGenType) ParamsKey_FormValue(params MoqRequest_starGenType_FormValue_params, anyParams uint64) MoqRequest_starGenType_FormValue_paramsKey {
	m.Scene.T.Helper()
	var keyUsed string
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.FormValue.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	return MoqRequest_starGenType_FormValue_paramsKey{
		Params: struct{ Key string }{
			Key: keyUsed,
		},
		Hashes: struct{ Key hash.Hash }{
			Key: keyUsedHash,
		},
	}
}

func (m *MoqRequest_starGenType_recorder) PostFormValue(key string) *MoqRequest_starGenType_PostFormValue_fnRecorder {
	return &MoqRequest_starGenType_PostFormValue_fnRecorder{
		Params: MoqRequest_starGenType_PostFormValue_params{
			Key: key,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_PostFormValue_fnRecorder) Any() *MoqRequest_starGenType_PostFormValue_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PostFormValue(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_PostFormValue_anyParams{Recorder: r}
}

func (a *MoqRequest_starGenType_PostFormValue_anyParams) Key() *MoqRequest_starGenType_PostFormValue_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRequest_starGenType_PostFormValue_fnRecorder) Seq() *MoqRequest_starGenType_PostFormValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PostFormValue(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_PostFormValue_fnRecorder) NoSeq() *MoqRequest_starGenType_PostFormValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PostFormValue(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_PostFormValue_fnRecorder) ReturnResults(result1 string) *MoqRequest_starGenType_PostFormValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_PostFormValue_doFn
		DoReturnFn MoqRequest_starGenType_PostFormValue_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_PostFormValue_fnRecorder) AndDo(fn MoqRequest_starGenType_PostFormValue_doFn) *MoqRequest_starGenType_PostFormValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_PostFormValue_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_PostFormValue_doReturnFn) *MoqRequest_starGenType_PostFormValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_PostFormValue_doFn
		DoReturnFn MoqRequest_starGenType_PostFormValue_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_PostFormValue_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_PostFormValue_resultsByParams
	for n, res := range r.Moq.ResultsByParams_PostFormValue {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_PostFormValue_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_PostFormValue_paramsKey]*MoqRequest_starGenType_PostFormValue_results{},
		}
		r.Moq.ResultsByParams_PostFormValue = append(r.Moq.ResultsByParams_PostFormValue, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_PostFormValue) {
			copy(r.Moq.ResultsByParams_PostFormValue[insertAt+1:], r.Moq.ResultsByParams_PostFormValue[insertAt:0])
			r.Moq.ResultsByParams_PostFormValue[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_PostFormValue(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_PostFormValue_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_PostFormValue_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_PostFormValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_PostFormValue_doFn
				DoReturnFn MoqRequest_starGenType_PostFormValue_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_PostFormValue(params MoqRequest_starGenType_PostFormValue_params) string {
	return fmt.Sprintf("PostFormValue(%#v)", params.Key)
}

func (m *MoqRequest_starGenType) ParamsKey_PostFormValue(params MoqRequest_starGenType_PostFormValue_params, anyParams uint64) MoqRequest_starGenType_PostFormValue_paramsKey {
	m.Scene.T.Helper()
	var keyUsed string
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.PostFormValue.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	return MoqRequest_starGenType_PostFormValue_paramsKey{
		Params: struct{ Key string }{
			Key: keyUsed,
		},
		Hashes: struct{ Key hash.Hash }{
			Key: keyUsedHash,
		},
	}
}

func (m *MoqRequest_starGenType_recorder) FormFile(key string) *MoqRequest_starGenType_FormFile_fnRecorder {
	return &MoqRequest_starGenType_FormFile_fnRecorder{
		Params: MoqRequest_starGenType_FormFile_params{
			Key: key,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqRequest_starGenType_FormFile_fnRecorder) Any() *MoqRequest_starGenType_FormFile_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FormFile(r.Params))
		return nil
	}
	return &MoqRequest_starGenType_FormFile_anyParams{Recorder: r}
}

func (a *MoqRequest_starGenType_FormFile_anyParams) Key() *MoqRequest_starGenType_FormFile_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqRequest_starGenType_FormFile_fnRecorder) Seq() *MoqRequest_starGenType_FormFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FormFile(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRequest_starGenType_FormFile_fnRecorder) NoSeq() *MoqRequest_starGenType_FormFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FormFile(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRequest_starGenType_FormFile_fnRecorder) ReturnResults(result1 multipart.File, result2 *multipart.FileHeader, result3 error) *MoqRequest_starGenType_FormFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 multipart.File
			Result2 *multipart.FileHeader
			Result3 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_FormFile_doFn
		DoReturnFn MoqRequest_starGenType_FormFile_doReturnFn
	}{
		Values: &struct {
			Result1 multipart.File
			Result2 *multipart.FileHeader
			Result3 error
		}{
			Result1: result1,
			Result2: result2,
			Result3: result3,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRequest_starGenType_FormFile_fnRecorder) AndDo(fn MoqRequest_starGenType_FormFile_doFn) *MoqRequest_starGenType_FormFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRequest_starGenType_FormFile_fnRecorder) DoReturnResults(fn MoqRequest_starGenType_FormFile_doReturnFn) *MoqRequest_starGenType_FormFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 multipart.File
			Result2 *multipart.FileHeader
			Result3 error
		}
		Sequence   uint32
		DoFn       MoqRequest_starGenType_FormFile_doFn
		DoReturnFn MoqRequest_starGenType_FormFile_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRequest_starGenType_FormFile_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRequest_starGenType_FormFile_resultsByParams
	for n, res := range r.Moq.ResultsByParams_FormFile {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRequest_starGenType_FormFile_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRequest_starGenType_FormFile_paramsKey]*MoqRequest_starGenType_FormFile_results{},
		}
		r.Moq.ResultsByParams_FormFile = append(r.Moq.ResultsByParams_FormFile, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_FormFile) {
			copy(r.Moq.ResultsByParams_FormFile[insertAt+1:], r.Moq.ResultsByParams_FormFile[insertAt:0])
			r.Moq.ResultsByParams_FormFile[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_FormFile(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRequest_starGenType_FormFile_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRequest_starGenType_FormFile_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRequest_starGenType_FormFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 multipart.File
					Result2 *multipart.FileHeader
					Result3 error
				}
				Sequence   uint32
				DoFn       MoqRequest_starGenType_FormFile_doFn
				DoReturnFn MoqRequest_starGenType_FormFile_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRequest_starGenType) PrettyParams_FormFile(params MoqRequest_starGenType_FormFile_params) string {
	return fmt.Sprintf("FormFile(%#v)", params.Key)
}

func (m *MoqRequest_starGenType) ParamsKey_FormFile(params MoqRequest_starGenType_FormFile_params, anyParams uint64) MoqRequest_starGenType_FormFile_paramsKey {
	m.Scene.T.Helper()
	var keyUsed string
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.FormFile.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	return MoqRequest_starGenType_FormFile_paramsKey{
		Params: struct{ Key string }{
			Key: keyUsed,
		},
		Hashes: struct{ Key hash.Hash }{
			Key: keyUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqRequest_starGenType) Reset() {
	m.ResultsByParams_Context = nil
	m.ResultsByParams_WithContext = nil
	m.ResultsByParams_Clone = nil
	m.ResultsByParams_ProtoAtLeast = nil
	m.ResultsByParams_UserAgent = nil
	m.ResultsByParams_Cookies = nil
	m.ResultsByParams_Cookie = nil
	m.ResultsByParams_AddCookie = nil
	m.ResultsByParams_Referer = nil
	m.ResultsByParams_MultipartReader = nil
	m.ResultsByParams_Write = nil
	m.ResultsByParams_WriteProxy = nil
	m.ResultsByParams_BasicAuth = nil
	m.ResultsByParams_SetBasicAuth = nil
	m.ResultsByParams_ParseForm = nil
	m.ResultsByParams_ParseMultipartForm = nil
	m.ResultsByParams_FormValue = nil
	m.ResultsByParams_PostFormValue = nil
	m.ResultsByParams_FormFile = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqRequest_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Context {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Context(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WithContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WithContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Clone {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Clone(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ProtoAtLeast {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ProtoAtLeast(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_UserAgent {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_UserAgent(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Cookies {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Cookies(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Cookie {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Cookie(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_AddCookie {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_AddCookie(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Referer {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Referer(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_MultipartReader {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_MultipartReader(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Write {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Write(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteProxy {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteProxy(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_BasicAuth {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_BasicAuth(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetBasicAuth {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetBasicAuth(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ParseForm {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ParseForm(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ParseMultipartForm {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ParseMultipartForm(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_FormValue {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_FormValue(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_PostFormValue {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_PostFormValue(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_FormFile {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_FormFile(results.Params))
			}
		}
	}
}
