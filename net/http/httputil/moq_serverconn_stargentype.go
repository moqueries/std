// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package httputil

import (
	"bufio"
	"fmt"
	"math/bits"
	"net"
	"net/http"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that httputil.ServerConn_starGenType is
// mocked completely
var _ ServerConn_starGenType = (*MoqServerConn_starGenType_mock)(nil)

// ServerConn_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type ServerConn_starGenType interface {
	Hijack() (net.Conn, *bufio.Reader)
	Close() error
	Read() (*http.Request, error)
	Pending() int
	Write(req *http.Request, resp *http.Response) error
}

// MoqServerConn_starGenType holds the state of a moq of the
// ServerConn_starGenType type
type MoqServerConn_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqServerConn_starGenType_mock

	ResultsByParams_Hijack  []MoqServerConn_starGenType_Hijack_resultsByParams
	ResultsByParams_Close   []MoqServerConn_starGenType_Close_resultsByParams
	ResultsByParams_Read    []MoqServerConn_starGenType_Read_resultsByParams
	ResultsByParams_Pending []MoqServerConn_starGenType_Pending_resultsByParams
	ResultsByParams_Write   []MoqServerConn_starGenType_Write_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Hijack  struct{}
			Close   struct{}
			Read    struct{}
			Pending struct{}
			Write   struct {
				Req  moq.ParamIndexing
				Resp moq.ParamIndexing
			}
		}
	}
	// MoqServerConn_starGenType_mock isolates the mock interface of the
}

// ServerConn_starGenType type
type MoqServerConn_starGenType_mock struct {
	Moq *MoqServerConn_starGenType
}

// MoqServerConn_starGenType_recorder isolates the recorder interface of the
// ServerConn_starGenType type
type MoqServerConn_starGenType_recorder struct {
	Moq *MoqServerConn_starGenType
}

// MoqServerConn_starGenType_Hijack_params holds the params of the
// ServerConn_starGenType type
type MoqServerConn_starGenType_Hijack_params struct{}

// MoqServerConn_starGenType_Hijack_paramsKey holds the map key params of the
// ServerConn_starGenType type
type MoqServerConn_starGenType_Hijack_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqServerConn_starGenType_Hijack_resultsByParams contains the results for a
// given set of parameters for the ServerConn_starGenType type
type MoqServerConn_starGenType_Hijack_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServerConn_starGenType_Hijack_paramsKey]*MoqServerConn_starGenType_Hijack_results
}

// MoqServerConn_starGenType_Hijack_doFn defines the type of function needed
// when calling AndDo for the ServerConn_starGenType type
type MoqServerConn_starGenType_Hijack_doFn func()

// MoqServerConn_starGenType_Hijack_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ServerConn_starGenType type
type MoqServerConn_starGenType_Hijack_doReturnFn func() (net.Conn, *bufio.Reader)

// MoqServerConn_starGenType_Hijack_results holds the results of the
// ServerConn_starGenType type
type MoqServerConn_starGenType_Hijack_results struct {
	Params  MoqServerConn_starGenType_Hijack_params
	Results []struct {
		Values *struct {
			Result1 net.Conn
			Result2 *bufio.Reader
		}
		Sequence   uint32
		DoFn       MoqServerConn_starGenType_Hijack_doFn
		DoReturnFn MoqServerConn_starGenType_Hijack_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServerConn_starGenType_Hijack_fnRecorder routes recorded function calls
// to the MoqServerConn_starGenType moq
type MoqServerConn_starGenType_Hijack_fnRecorder struct {
	Params    MoqServerConn_starGenType_Hijack_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServerConn_starGenType_Hijack_results
	Moq       *MoqServerConn_starGenType
}

// MoqServerConn_starGenType_Hijack_anyParams isolates the any params functions
// of the ServerConn_starGenType type
type MoqServerConn_starGenType_Hijack_anyParams struct {
	Recorder *MoqServerConn_starGenType_Hijack_fnRecorder
}

// MoqServerConn_starGenType_Close_params holds the params of the
// ServerConn_starGenType type
type MoqServerConn_starGenType_Close_params struct{}

// MoqServerConn_starGenType_Close_paramsKey holds the map key params of the
// ServerConn_starGenType type
type MoqServerConn_starGenType_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqServerConn_starGenType_Close_resultsByParams contains the results for a
// given set of parameters for the ServerConn_starGenType type
type MoqServerConn_starGenType_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServerConn_starGenType_Close_paramsKey]*MoqServerConn_starGenType_Close_results
}

// MoqServerConn_starGenType_Close_doFn defines the type of function needed
// when calling AndDo for the ServerConn_starGenType type
type MoqServerConn_starGenType_Close_doFn func()

// MoqServerConn_starGenType_Close_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ServerConn_starGenType type
type MoqServerConn_starGenType_Close_doReturnFn func() error

// MoqServerConn_starGenType_Close_results holds the results of the
// ServerConn_starGenType type
type MoqServerConn_starGenType_Close_results struct {
	Params  MoqServerConn_starGenType_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServerConn_starGenType_Close_doFn
		DoReturnFn MoqServerConn_starGenType_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServerConn_starGenType_Close_fnRecorder routes recorded function calls to
// the MoqServerConn_starGenType moq
type MoqServerConn_starGenType_Close_fnRecorder struct {
	Params    MoqServerConn_starGenType_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServerConn_starGenType_Close_results
	Moq       *MoqServerConn_starGenType
}

// MoqServerConn_starGenType_Close_anyParams isolates the any params functions
// of the ServerConn_starGenType type
type MoqServerConn_starGenType_Close_anyParams struct {
	Recorder *MoqServerConn_starGenType_Close_fnRecorder
}

// MoqServerConn_starGenType_Read_params holds the params of the
// ServerConn_starGenType type
type MoqServerConn_starGenType_Read_params struct{}

// MoqServerConn_starGenType_Read_paramsKey holds the map key params of the
// ServerConn_starGenType type
type MoqServerConn_starGenType_Read_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqServerConn_starGenType_Read_resultsByParams contains the results for a
// given set of parameters for the ServerConn_starGenType type
type MoqServerConn_starGenType_Read_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServerConn_starGenType_Read_paramsKey]*MoqServerConn_starGenType_Read_results
}

// MoqServerConn_starGenType_Read_doFn defines the type of function needed when
// calling AndDo for the ServerConn_starGenType type
type MoqServerConn_starGenType_Read_doFn func()

// MoqServerConn_starGenType_Read_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ServerConn_starGenType type
type MoqServerConn_starGenType_Read_doReturnFn func() (*http.Request, error)

// MoqServerConn_starGenType_Read_results holds the results of the
// ServerConn_starGenType type
type MoqServerConn_starGenType_Read_results struct {
	Params  MoqServerConn_starGenType_Read_params
	Results []struct {
		Values *struct {
			Result1 *http.Request
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqServerConn_starGenType_Read_doFn
		DoReturnFn MoqServerConn_starGenType_Read_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServerConn_starGenType_Read_fnRecorder routes recorded function calls to
// the MoqServerConn_starGenType moq
type MoqServerConn_starGenType_Read_fnRecorder struct {
	Params    MoqServerConn_starGenType_Read_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServerConn_starGenType_Read_results
	Moq       *MoqServerConn_starGenType
}

// MoqServerConn_starGenType_Read_anyParams isolates the any params functions
// of the ServerConn_starGenType type
type MoqServerConn_starGenType_Read_anyParams struct {
	Recorder *MoqServerConn_starGenType_Read_fnRecorder
}

// MoqServerConn_starGenType_Pending_params holds the params of the
// ServerConn_starGenType type
type MoqServerConn_starGenType_Pending_params struct{}

// MoqServerConn_starGenType_Pending_paramsKey holds the map key params of the
// ServerConn_starGenType type
type MoqServerConn_starGenType_Pending_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqServerConn_starGenType_Pending_resultsByParams contains the results for a
// given set of parameters for the ServerConn_starGenType type
type MoqServerConn_starGenType_Pending_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServerConn_starGenType_Pending_paramsKey]*MoqServerConn_starGenType_Pending_results
}

// MoqServerConn_starGenType_Pending_doFn defines the type of function needed
// when calling AndDo for the ServerConn_starGenType type
type MoqServerConn_starGenType_Pending_doFn func()

// MoqServerConn_starGenType_Pending_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ServerConn_starGenType type
type MoqServerConn_starGenType_Pending_doReturnFn func() int

// MoqServerConn_starGenType_Pending_results holds the results of the
// ServerConn_starGenType type
type MoqServerConn_starGenType_Pending_results struct {
	Params  MoqServerConn_starGenType_Pending_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqServerConn_starGenType_Pending_doFn
		DoReturnFn MoqServerConn_starGenType_Pending_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServerConn_starGenType_Pending_fnRecorder routes recorded function calls
// to the MoqServerConn_starGenType moq
type MoqServerConn_starGenType_Pending_fnRecorder struct {
	Params    MoqServerConn_starGenType_Pending_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServerConn_starGenType_Pending_results
	Moq       *MoqServerConn_starGenType
}

// MoqServerConn_starGenType_Pending_anyParams isolates the any params
// functions of the ServerConn_starGenType type
type MoqServerConn_starGenType_Pending_anyParams struct {
	Recorder *MoqServerConn_starGenType_Pending_fnRecorder
}

// MoqServerConn_starGenType_Write_params holds the params of the
// ServerConn_starGenType type
type MoqServerConn_starGenType_Write_params struct {
	Req  *http.Request
	Resp *http.Response
}

// MoqServerConn_starGenType_Write_paramsKey holds the map key params of the
// ServerConn_starGenType type
type MoqServerConn_starGenType_Write_paramsKey struct {
	Params struct {
		Req  *http.Request
		Resp *http.Response
	}
	Hashes struct {
		Req  hash.Hash
		Resp hash.Hash
	}
}

// MoqServerConn_starGenType_Write_resultsByParams contains the results for a
// given set of parameters for the ServerConn_starGenType type
type MoqServerConn_starGenType_Write_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServerConn_starGenType_Write_paramsKey]*MoqServerConn_starGenType_Write_results
}

// MoqServerConn_starGenType_Write_doFn defines the type of function needed
// when calling AndDo for the ServerConn_starGenType type
type MoqServerConn_starGenType_Write_doFn func(req *http.Request, resp *http.Response)

// MoqServerConn_starGenType_Write_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ServerConn_starGenType type
type MoqServerConn_starGenType_Write_doReturnFn func(req *http.Request, resp *http.Response) error

// MoqServerConn_starGenType_Write_results holds the results of the
// ServerConn_starGenType type
type MoqServerConn_starGenType_Write_results struct {
	Params  MoqServerConn_starGenType_Write_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServerConn_starGenType_Write_doFn
		DoReturnFn MoqServerConn_starGenType_Write_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServerConn_starGenType_Write_fnRecorder routes recorded function calls to
// the MoqServerConn_starGenType moq
type MoqServerConn_starGenType_Write_fnRecorder struct {
	Params    MoqServerConn_starGenType_Write_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServerConn_starGenType_Write_results
	Moq       *MoqServerConn_starGenType
}

// MoqServerConn_starGenType_Write_anyParams isolates the any params functions
// of the ServerConn_starGenType type
type MoqServerConn_starGenType_Write_anyParams struct {
	Recorder *MoqServerConn_starGenType_Write_fnRecorder
}

// NewMoqServerConn_starGenType creates a new moq of the ServerConn_starGenType
// type
func NewMoqServerConn_starGenType(scene *moq.Scene, config *moq.Config) *MoqServerConn_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqServerConn_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqServerConn_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Hijack  struct{}
				Close   struct{}
				Read    struct{}
				Pending struct{}
				Write   struct {
					Req  moq.ParamIndexing
					Resp moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Hijack  struct{}
			Close   struct{}
			Read    struct{}
			Pending struct{}
			Write   struct {
				Req  moq.ParamIndexing
				Resp moq.ParamIndexing
			}
		}{
			Hijack:  struct{}{},
			Close:   struct{}{},
			Read:    struct{}{},
			Pending: struct{}{},
			Write: struct {
				Req  moq.ParamIndexing
				Resp moq.ParamIndexing
			}{
				Req:  moq.ParamIndexByHash,
				Resp: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the ServerConn_starGenType type
func (m *MoqServerConn_starGenType) Mock() *MoqServerConn_starGenType_mock { return m.Moq }

func (m *MoqServerConn_starGenType_mock) Hijack() (result1 net.Conn, result2 *bufio.Reader) {
	m.Moq.Scene.T.Helper()
	params := MoqServerConn_starGenType_Hijack_params{}
	var results *MoqServerConn_starGenType_Hijack_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Hijack {
		paramsKey := m.Moq.ParamsKey_Hijack(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Hijack(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Hijack(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Hijack(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqServerConn_starGenType_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqServerConn_starGenType_Close_params{}
	var results *MoqServerConn_starGenType_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqServerConn_starGenType_mock) Read() (result1 *http.Request, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqServerConn_starGenType_Read_params{}
	var results *MoqServerConn_starGenType_Read_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Read {
		paramsKey := m.Moq.ParamsKey_Read(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Read(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Read(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Read(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqServerConn_starGenType_mock) Pending() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqServerConn_starGenType_Pending_params{}
	var results *MoqServerConn_starGenType_Pending_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Pending {
		paramsKey := m.Moq.ParamsKey_Pending(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Pending(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Pending(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Pending(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqServerConn_starGenType_mock) Write(req *http.Request, resp *http.Response) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqServerConn_starGenType_Write_params{
		Req:  req,
		Resp: resp,
	}
	var results *MoqServerConn_starGenType_Write_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Write {
		paramsKey := m.Moq.ParamsKey_Write(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Write(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Write(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Write(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(req, resp)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(req, resp)
	}
	return
}

// OnCall returns the recorder implementation of the ServerConn_starGenType
// type
func (m *MoqServerConn_starGenType) OnCall() *MoqServerConn_starGenType_recorder {
	return &MoqServerConn_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqServerConn_starGenType_recorder) Hijack() *MoqServerConn_starGenType_Hijack_fnRecorder {
	return &MoqServerConn_starGenType_Hijack_fnRecorder{
		Params:   MoqServerConn_starGenType_Hijack_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServerConn_starGenType_Hijack_fnRecorder) Any() *MoqServerConn_starGenType_Hijack_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Hijack(r.Params))
		return nil
	}
	return &MoqServerConn_starGenType_Hijack_anyParams{Recorder: r}
}

func (r *MoqServerConn_starGenType_Hijack_fnRecorder) Seq() *MoqServerConn_starGenType_Hijack_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Hijack(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServerConn_starGenType_Hijack_fnRecorder) NoSeq() *MoqServerConn_starGenType_Hijack_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Hijack(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServerConn_starGenType_Hijack_fnRecorder) ReturnResults(result1 net.Conn, result2 *bufio.Reader) *MoqServerConn_starGenType_Hijack_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.Conn
			Result2 *bufio.Reader
		}
		Sequence   uint32
		DoFn       MoqServerConn_starGenType_Hijack_doFn
		DoReturnFn MoqServerConn_starGenType_Hijack_doReturnFn
	}{
		Values: &struct {
			Result1 net.Conn
			Result2 *bufio.Reader
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServerConn_starGenType_Hijack_fnRecorder) AndDo(fn MoqServerConn_starGenType_Hijack_doFn) *MoqServerConn_starGenType_Hijack_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServerConn_starGenType_Hijack_fnRecorder) DoReturnResults(fn MoqServerConn_starGenType_Hijack_doReturnFn) *MoqServerConn_starGenType_Hijack_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.Conn
			Result2 *bufio.Reader
		}
		Sequence   uint32
		DoFn       MoqServerConn_starGenType_Hijack_doFn
		DoReturnFn MoqServerConn_starGenType_Hijack_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServerConn_starGenType_Hijack_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServerConn_starGenType_Hijack_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Hijack {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServerConn_starGenType_Hijack_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServerConn_starGenType_Hijack_paramsKey]*MoqServerConn_starGenType_Hijack_results{},
		}
		r.Moq.ResultsByParams_Hijack = append(r.Moq.ResultsByParams_Hijack, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Hijack) {
			copy(r.Moq.ResultsByParams_Hijack[insertAt+1:], r.Moq.ResultsByParams_Hijack[insertAt:0])
			r.Moq.ResultsByParams_Hijack[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Hijack(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServerConn_starGenType_Hijack_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServerConn_starGenType_Hijack_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServerConn_starGenType_Hijack_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 net.Conn
					Result2 *bufio.Reader
				}
				Sequence   uint32
				DoFn       MoqServerConn_starGenType_Hijack_doFn
				DoReturnFn MoqServerConn_starGenType_Hijack_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServerConn_starGenType) PrettyParams_Hijack(params MoqServerConn_starGenType_Hijack_params) string {
	return fmt.Sprintf("Hijack()")
}

func (m *MoqServerConn_starGenType) ParamsKey_Hijack(params MoqServerConn_starGenType_Hijack_params, anyParams uint64) MoqServerConn_starGenType_Hijack_paramsKey {
	m.Scene.T.Helper()
	return MoqServerConn_starGenType_Hijack_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqServerConn_starGenType_recorder) Close() *MoqServerConn_starGenType_Close_fnRecorder {
	return &MoqServerConn_starGenType_Close_fnRecorder{
		Params:   MoqServerConn_starGenType_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServerConn_starGenType_Close_fnRecorder) Any() *MoqServerConn_starGenType_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqServerConn_starGenType_Close_anyParams{Recorder: r}
}

func (r *MoqServerConn_starGenType_Close_fnRecorder) Seq() *MoqServerConn_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServerConn_starGenType_Close_fnRecorder) NoSeq() *MoqServerConn_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServerConn_starGenType_Close_fnRecorder) ReturnResults(result1 error) *MoqServerConn_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServerConn_starGenType_Close_doFn
		DoReturnFn MoqServerConn_starGenType_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServerConn_starGenType_Close_fnRecorder) AndDo(fn MoqServerConn_starGenType_Close_doFn) *MoqServerConn_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServerConn_starGenType_Close_fnRecorder) DoReturnResults(fn MoqServerConn_starGenType_Close_doReturnFn) *MoqServerConn_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServerConn_starGenType_Close_doFn
		DoReturnFn MoqServerConn_starGenType_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServerConn_starGenType_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServerConn_starGenType_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServerConn_starGenType_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServerConn_starGenType_Close_paramsKey]*MoqServerConn_starGenType_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServerConn_starGenType_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServerConn_starGenType_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServerConn_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqServerConn_starGenType_Close_doFn
				DoReturnFn MoqServerConn_starGenType_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServerConn_starGenType) PrettyParams_Close(params MoqServerConn_starGenType_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqServerConn_starGenType) ParamsKey_Close(params MoqServerConn_starGenType_Close_params, anyParams uint64) MoqServerConn_starGenType_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqServerConn_starGenType_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqServerConn_starGenType_recorder) Read() *MoqServerConn_starGenType_Read_fnRecorder {
	return &MoqServerConn_starGenType_Read_fnRecorder{
		Params:   MoqServerConn_starGenType_Read_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServerConn_starGenType_Read_fnRecorder) Any() *MoqServerConn_starGenType_Read_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	return &MoqServerConn_starGenType_Read_anyParams{Recorder: r}
}

func (r *MoqServerConn_starGenType_Read_fnRecorder) Seq() *MoqServerConn_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServerConn_starGenType_Read_fnRecorder) NoSeq() *MoqServerConn_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServerConn_starGenType_Read_fnRecorder) ReturnResults(result1 *http.Request, result2 error) *MoqServerConn_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *http.Request
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqServerConn_starGenType_Read_doFn
		DoReturnFn MoqServerConn_starGenType_Read_doReturnFn
	}{
		Values: &struct {
			Result1 *http.Request
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServerConn_starGenType_Read_fnRecorder) AndDo(fn MoqServerConn_starGenType_Read_doFn) *MoqServerConn_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServerConn_starGenType_Read_fnRecorder) DoReturnResults(fn MoqServerConn_starGenType_Read_doReturnFn) *MoqServerConn_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *http.Request
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqServerConn_starGenType_Read_doFn
		DoReturnFn MoqServerConn_starGenType_Read_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServerConn_starGenType_Read_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServerConn_starGenType_Read_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Read {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServerConn_starGenType_Read_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServerConn_starGenType_Read_paramsKey]*MoqServerConn_starGenType_Read_results{},
		}
		r.Moq.ResultsByParams_Read = append(r.Moq.ResultsByParams_Read, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Read) {
			copy(r.Moq.ResultsByParams_Read[insertAt+1:], r.Moq.ResultsByParams_Read[insertAt:0])
			r.Moq.ResultsByParams_Read[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Read(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServerConn_starGenType_Read_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServerConn_starGenType_Read_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServerConn_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *http.Request
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqServerConn_starGenType_Read_doFn
				DoReturnFn MoqServerConn_starGenType_Read_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServerConn_starGenType) PrettyParams_Read(params MoqServerConn_starGenType_Read_params) string {
	return fmt.Sprintf("Read()")
}

func (m *MoqServerConn_starGenType) ParamsKey_Read(params MoqServerConn_starGenType_Read_params, anyParams uint64) MoqServerConn_starGenType_Read_paramsKey {
	m.Scene.T.Helper()
	return MoqServerConn_starGenType_Read_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqServerConn_starGenType_recorder) Pending() *MoqServerConn_starGenType_Pending_fnRecorder {
	return &MoqServerConn_starGenType_Pending_fnRecorder{
		Params:   MoqServerConn_starGenType_Pending_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServerConn_starGenType_Pending_fnRecorder) Any() *MoqServerConn_starGenType_Pending_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Pending(r.Params))
		return nil
	}
	return &MoqServerConn_starGenType_Pending_anyParams{Recorder: r}
}

func (r *MoqServerConn_starGenType_Pending_fnRecorder) Seq() *MoqServerConn_starGenType_Pending_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Pending(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServerConn_starGenType_Pending_fnRecorder) NoSeq() *MoqServerConn_starGenType_Pending_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Pending(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServerConn_starGenType_Pending_fnRecorder) ReturnResults(result1 int) *MoqServerConn_starGenType_Pending_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqServerConn_starGenType_Pending_doFn
		DoReturnFn MoqServerConn_starGenType_Pending_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServerConn_starGenType_Pending_fnRecorder) AndDo(fn MoqServerConn_starGenType_Pending_doFn) *MoqServerConn_starGenType_Pending_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServerConn_starGenType_Pending_fnRecorder) DoReturnResults(fn MoqServerConn_starGenType_Pending_doReturnFn) *MoqServerConn_starGenType_Pending_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqServerConn_starGenType_Pending_doFn
		DoReturnFn MoqServerConn_starGenType_Pending_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServerConn_starGenType_Pending_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServerConn_starGenType_Pending_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Pending {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServerConn_starGenType_Pending_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServerConn_starGenType_Pending_paramsKey]*MoqServerConn_starGenType_Pending_results{},
		}
		r.Moq.ResultsByParams_Pending = append(r.Moq.ResultsByParams_Pending, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Pending) {
			copy(r.Moq.ResultsByParams_Pending[insertAt+1:], r.Moq.ResultsByParams_Pending[insertAt:0])
			r.Moq.ResultsByParams_Pending[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Pending(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServerConn_starGenType_Pending_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServerConn_starGenType_Pending_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServerConn_starGenType_Pending_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqServerConn_starGenType_Pending_doFn
				DoReturnFn MoqServerConn_starGenType_Pending_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServerConn_starGenType) PrettyParams_Pending(params MoqServerConn_starGenType_Pending_params) string {
	return fmt.Sprintf("Pending()")
}

func (m *MoqServerConn_starGenType) ParamsKey_Pending(params MoqServerConn_starGenType_Pending_params, anyParams uint64) MoqServerConn_starGenType_Pending_paramsKey {
	m.Scene.T.Helper()
	return MoqServerConn_starGenType_Pending_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqServerConn_starGenType_recorder) Write(req *http.Request, resp *http.Response) *MoqServerConn_starGenType_Write_fnRecorder {
	return &MoqServerConn_starGenType_Write_fnRecorder{
		Params: MoqServerConn_starGenType_Write_params{
			Req:  req,
			Resp: resp,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServerConn_starGenType_Write_fnRecorder) Any() *MoqServerConn_starGenType_Write_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	return &MoqServerConn_starGenType_Write_anyParams{Recorder: r}
}

func (a *MoqServerConn_starGenType_Write_anyParams) Req() *MoqServerConn_starGenType_Write_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqServerConn_starGenType_Write_anyParams) Resp() *MoqServerConn_starGenType_Write_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqServerConn_starGenType_Write_fnRecorder) Seq() *MoqServerConn_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServerConn_starGenType_Write_fnRecorder) NoSeq() *MoqServerConn_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServerConn_starGenType_Write_fnRecorder) ReturnResults(result1 error) *MoqServerConn_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServerConn_starGenType_Write_doFn
		DoReturnFn MoqServerConn_starGenType_Write_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServerConn_starGenType_Write_fnRecorder) AndDo(fn MoqServerConn_starGenType_Write_doFn) *MoqServerConn_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServerConn_starGenType_Write_fnRecorder) DoReturnResults(fn MoqServerConn_starGenType_Write_doReturnFn) *MoqServerConn_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqServerConn_starGenType_Write_doFn
		DoReturnFn MoqServerConn_starGenType_Write_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServerConn_starGenType_Write_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServerConn_starGenType_Write_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Write {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServerConn_starGenType_Write_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServerConn_starGenType_Write_paramsKey]*MoqServerConn_starGenType_Write_results{},
		}
		r.Moq.ResultsByParams_Write = append(r.Moq.ResultsByParams_Write, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Write) {
			copy(r.Moq.ResultsByParams_Write[insertAt+1:], r.Moq.ResultsByParams_Write[insertAt:0])
			r.Moq.ResultsByParams_Write[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Write(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServerConn_starGenType_Write_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServerConn_starGenType_Write_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServerConn_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqServerConn_starGenType_Write_doFn
				DoReturnFn MoqServerConn_starGenType_Write_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServerConn_starGenType) PrettyParams_Write(params MoqServerConn_starGenType_Write_params) string {
	return fmt.Sprintf("Write(%#v, %#v)", params.Req, params.Resp)
}

func (m *MoqServerConn_starGenType) ParamsKey_Write(params MoqServerConn_starGenType_Write_params, anyParams uint64) MoqServerConn_starGenType_Write_paramsKey {
	m.Scene.T.Helper()
	var reqUsed *http.Request
	var reqUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Write.Req == moq.ParamIndexByValue {
			reqUsed = params.Req
		} else {
			reqUsedHash = hash.DeepHash(params.Req)
		}
	}
	var respUsed *http.Response
	var respUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Write.Resp == moq.ParamIndexByValue {
			respUsed = params.Resp
		} else {
			respUsedHash = hash.DeepHash(params.Resp)
		}
	}
	return MoqServerConn_starGenType_Write_paramsKey{
		Params: struct {
			Req  *http.Request
			Resp *http.Response
		}{
			Req:  reqUsed,
			Resp: respUsed,
		},
		Hashes: struct {
			Req  hash.Hash
			Resp hash.Hash
		}{
			Req:  reqUsedHash,
			Resp: respUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqServerConn_starGenType) Reset() {
	m.ResultsByParams_Hijack = nil
	m.ResultsByParams_Close = nil
	m.ResultsByParams_Read = nil
	m.ResultsByParams_Pending = nil
	m.ResultsByParams_Write = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqServerConn_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Hijack {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Hijack(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Read {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Read(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Pending {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Pending(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Write {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Write(results.Params))
			}
		}
	}
}
