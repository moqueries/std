// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package httptest

import (
	"fmt"
	"math/bits"
	"net/http"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that
// httptest.ResponseRecorder_starGenType is mocked completely
var _ ResponseRecorder_starGenType = (*MoqResponseRecorder_starGenType_mock)(nil)

// ResponseRecorder_starGenType is the fabricated implementation type of this
// mock (emitted when mocking a collections of methods directly and not from an
// interface type)
type ResponseRecorder_starGenType interface {
	Header() http.Header
	Write(buf []byte) (int, error)
	WriteString(str string) (int, error)
	WriteHeader(code int)
	Flush()
	Result() *http.Response
}

// MoqResponseRecorder_starGenType holds the state of a moq of the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqResponseRecorder_starGenType_mock

	ResultsByParams_Header      []MoqResponseRecorder_starGenType_Header_resultsByParams
	ResultsByParams_Write       []MoqResponseRecorder_starGenType_Write_resultsByParams
	ResultsByParams_WriteString []MoqResponseRecorder_starGenType_WriteString_resultsByParams
	ResultsByParams_WriteHeader []MoqResponseRecorder_starGenType_WriteHeader_resultsByParams
	ResultsByParams_Flush       []MoqResponseRecorder_starGenType_Flush_resultsByParams
	ResultsByParams_Result      []MoqResponseRecorder_starGenType_Result_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Header struct{}
			Write  struct {
				Buf moq.ParamIndexing
			}
			WriteString struct {
				Str moq.ParamIndexing
			}
			WriteHeader struct {
				Code moq.ParamIndexing
			}
			Flush  struct{}
			Result struct{}
		}
	}
}

// MoqResponseRecorder_starGenType_mock isolates the mock interface of the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_mock struct {
	Moq *MoqResponseRecorder_starGenType
}

// MoqResponseRecorder_starGenType_recorder isolates the recorder interface of
// the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_recorder struct {
	Moq *MoqResponseRecorder_starGenType
}

// MoqResponseRecorder_starGenType_Header_params holds the params of the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Header_params struct{}

// MoqResponseRecorder_starGenType_Header_paramsKey holds the map key params of
// the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Header_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqResponseRecorder_starGenType_Header_resultsByParams contains the results
// for a given set of parameters for the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Header_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqResponseRecorder_starGenType_Header_paramsKey]*MoqResponseRecorder_starGenType_Header_results
}

// MoqResponseRecorder_starGenType_Header_doFn defines the type of function
// needed when calling AndDo for the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Header_doFn func()

// MoqResponseRecorder_starGenType_Header_doReturnFn defines the type of
// function needed when calling DoReturnResults for the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Header_doReturnFn func() http.Header

// MoqResponseRecorder_starGenType_Header_results holds the results of the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Header_results struct {
	Params  MoqResponseRecorder_starGenType_Header_params
	Results []struct {
		Values *struct {
			Result1 http.Header
		}
		Sequence   uint32
		DoFn       MoqResponseRecorder_starGenType_Header_doFn
		DoReturnFn MoqResponseRecorder_starGenType_Header_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqResponseRecorder_starGenType_Header_fnRecorder routes recorded function
// calls to the MoqResponseRecorder_starGenType moq
type MoqResponseRecorder_starGenType_Header_fnRecorder struct {
	Params    MoqResponseRecorder_starGenType_Header_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqResponseRecorder_starGenType_Header_results
	Moq       *MoqResponseRecorder_starGenType
}

// MoqResponseRecorder_starGenType_Header_anyParams isolates the any params
// functions of the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Header_anyParams struct {
	Recorder *MoqResponseRecorder_starGenType_Header_fnRecorder
}

// MoqResponseRecorder_starGenType_Write_params holds the params of the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Write_params struct{ Buf []byte }

// MoqResponseRecorder_starGenType_Write_paramsKey holds the map key params of
// the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Write_paramsKey struct {
	Params struct{}
	Hashes struct{ Buf hash.Hash }
}

// MoqResponseRecorder_starGenType_Write_resultsByParams contains the results
// for a given set of parameters for the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Write_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqResponseRecorder_starGenType_Write_paramsKey]*MoqResponseRecorder_starGenType_Write_results
}

// MoqResponseRecorder_starGenType_Write_doFn defines the type of function
// needed when calling AndDo for the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Write_doFn func(buf []byte)

// MoqResponseRecorder_starGenType_Write_doReturnFn defines the type of
// function needed when calling DoReturnResults for the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Write_doReturnFn func(buf []byte) (int, error)

// MoqResponseRecorder_starGenType_Write_results holds the results of the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Write_results struct {
	Params  MoqResponseRecorder_starGenType_Write_params
	Results []struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqResponseRecorder_starGenType_Write_doFn
		DoReturnFn MoqResponseRecorder_starGenType_Write_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqResponseRecorder_starGenType_Write_fnRecorder routes recorded function
// calls to the MoqResponseRecorder_starGenType moq
type MoqResponseRecorder_starGenType_Write_fnRecorder struct {
	Params    MoqResponseRecorder_starGenType_Write_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqResponseRecorder_starGenType_Write_results
	Moq       *MoqResponseRecorder_starGenType
}

// MoqResponseRecorder_starGenType_Write_anyParams isolates the any params
// functions of the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Write_anyParams struct {
	Recorder *MoqResponseRecorder_starGenType_Write_fnRecorder
}

// MoqResponseRecorder_starGenType_WriteString_params holds the params of the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_WriteString_params struct{ Str string }

// MoqResponseRecorder_starGenType_WriteString_paramsKey holds the map key
// params of the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_WriteString_paramsKey struct {
	Params struct{ Str string }
	Hashes struct{ Str hash.Hash }
}

// MoqResponseRecorder_starGenType_WriteString_resultsByParams contains the
// results for a given set of parameters for the ResponseRecorder_starGenType
// type
type MoqResponseRecorder_starGenType_WriteString_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqResponseRecorder_starGenType_WriteString_paramsKey]*MoqResponseRecorder_starGenType_WriteString_results
}

// MoqResponseRecorder_starGenType_WriteString_doFn defines the type of
// function needed when calling AndDo for the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_WriteString_doFn func(str string)

// MoqResponseRecorder_starGenType_WriteString_doReturnFn defines the type of
// function needed when calling DoReturnResults for the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_WriteString_doReturnFn func(str string) (int, error)

// MoqResponseRecorder_starGenType_WriteString_results holds the results of the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_WriteString_results struct {
	Params  MoqResponseRecorder_starGenType_WriteString_params
	Results []struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqResponseRecorder_starGenType_WriteString_doFn
		DoReturnFn MoqResponseRecorder_starGenType_WriteString_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqResponseRecorder_starGenType_WriteString_fnRecorder routes recorded
// function calls to the MoqResponseRecorder_starGenType moq
type MoqResponseRecorder_starGenType_WriteString_fnRecorder struct {
	Params    MoqResponseRecorder_starGenType_WriteString_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqResponseRecorder_starGenType_WriteString_results
	Moq       *MoqResponseRecorder_starGenType
}

// MoqResponseRecorder_starGenType_WriteString_anyParams isolates the any
// params functions of the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_WriteString_anyParams struct {
	Recorder *MoqResponseRecorder_starGenType_WriteString_fnRecorder
}

// MoqResponseRecorder_starGenType_WriteHeader_params holds the params of the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_WriteHeader_params struct{ Code int }

// MoqResponseRecorder_starGenType_WriteHeader_paramsKey holds the map key
// params of the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_WriteHeader_paramsKey struct {
	Params struct{ Code int }
	Hashes struct{ Code hash.Hash }
}

// MoqResponseRecorder_starGenType_WriteHeader_resultsByParams contains the
// results for a given set of parameters for the ResponseRecorder_starGenType
// type
type MoqResponseRecorder_starGenType_WriteHeader_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqResponseRecorder_starGenType_WriteHeader_paramsKey]*MoqResponseRecorder_starGenType_WriteHeader_results
}

// MoqResponseRecorder_starGenType_WriteHeader_doFn defines the type of
// function needed when calling AndDo for the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_WriteHeader_doFn func(code int)

// MoqResponseRecorder_starGenType_WriteHeader_doReturnFn defines the type of
// function needed when calling DoReturnResults for the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_WriteHeader_doReturnFn func(code int)

// MoqResponseRecorder_starGenType_WriteHeader_results holds the results of the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_WriteHeader_results struct {
	Params  MoqResponseRecorder_starGenType_WriteHeader_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqResponseRecorder_starGenType_WriteHeader_doFn
		DoReturnFn MoqResponseRecorder_starGenType_WriteHeader_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqResponseRecorder_starGenType_WriteHeader_fnRecorder routes recorded
// function calls to the MoqResponseRecorder_starGenType moq
type MoqResponseRecorder_starGenType_WriteHeader_fnRecorder struct {
	Params    MoqResponseRecorder_starGenType_WriteHeader_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqResponseRecorder_starGenType_WriteHeader_results
	Moq       *MoqResponseRecorder_starGenType
}

// MoqResponseRecorder_starGenType_WriteHeader_anyParams isolates the any
// params functions of the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_WriteHeader_anyParams struct {
	Recorder *MoqResponseRecorder_starGenType_WriteHeader_fnRecorder
}

// MoqResponseRecorder_starGenType_Flush_params holds the params of the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Flush_params struct{}

// MoqResponseRecorder_starGenType_Flush_paramsKey holds the map key params of
// the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Flush_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqResponseRecorder_starGenType_Flush_resultsByParams contains the results
// for a given set of parameters for the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Flush_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqResponseRecorder_starGenType_Flush_paramsKey]*MoqResponseRecorder_starGenType_Flush_results
}

// MoqResponseRecorder_starGenType_Flush_doFn defines the type of function
// needed when calling AndDo for the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Flush_doFn func()

// MoqResponseRecorder_starGenType_Flush_doReturnFn defines the type of
// function needed when calling DoReturnResults for the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Flush_doReturnFn func()

// MoqResponseRecorder_starGenType_Flush_results holds the results of the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Flush_results struct {
	Params  MoqResponseRecorder_starGenType_Flush_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqResponseRecorder_starGenType_Flush_doFn
		DoReturnFn MoqResponseRecorder_starGenType_Flush_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqResponseRecorder_starGenType_Flush_fnRecorder routes recorded function
// calls to the MoqResponseRecorder_starGenType moq
type MoqResponseRecorder_starGenType_Flush_fnRecorder struct {
	Params    MoqResponseRecorder_starGenType_Flush_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqResponseRecorder_starGenType_Flush_results
	Moq       *MoqResponseRecorder_starGenType
}

// MoqResponseRecorder_starGenType_Flush_anyParams isolates the any params
// functions of the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Flush_anyParams struct {
	Recorder *MoqResponseRecorder_starGenType_Flush_fnRecorder
}

// MoqResponseRecorder_starGenType_Result_params holds the params of the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Result_params struct{}

// MoqResponseRecorder_starGenType_Result_paramsKey holds the map key params of
// the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Result_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqResponseRecorder_starGenType_Result_resultsByParams contains the results
// for a given set of parameters for the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Result_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqResponseRecorder_starGenType_Result_paramsKey]*MoqResponseRecorder_starGenType_Result_results
}

// MoqResponseRecorder_starGenType_Result_doFn defines the type of function
// needed when calling AndDo for the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Result_doFn func()

// MoqResponseRecorder_starGenType_Result_doReturnFn defines the type of
// function needed when calling DoReturnResults for the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Result_doReturnFn func() *http.Response

// MoqResponseRecorder_starGenType_Result_results holds the results of the
// ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Result_results struct {
	Params  MoqResponseRecorder_starGenType_Result_params
	Results []struct {
		Values *struct {
			Result1 *http.Response
		}
		Sequence   uint32
		DoFn       MoqResponseRecorder_starGenType_Result_doFn
		DoReturnFn MoqResponseRecorder_starGenType_Result_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqResponseRecorder_starGenType_Result_fnRecorder routes recorded function
// calls to the MoqResponseRecorder_starGenType moq
type MoqResponseRecorder_starGenType_Result_fnRecorder struct {
	Params    MoqResponseRecorder_starGenType_Result_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqResponseRecorder_starGenType_Result_results
	Moq       *MoqResponseRecorder_starGenType
}

// MoqResponseRecorder_starGenType_Result_anyParams isolates the any params
// functions of the ResponseRecorder_starGenType type
type MoqResponseRecorder_starGenType_Result_anyParams struct {
	Recorder *MoqResponseRecorder_starGenType_Result_fnRecorder
}

// NewMoqResponseRecorder_starGenType creates a new moq of the
// ResponseRecorder_starGenType type
func NewMoqResponseRecorder_starGenType(scene *moq.Scene, config *moq.Config) *MoqResponseRecorder_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqResponseRecorder_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqResponseRecorder_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Header struct{}
				Write  struct {
					Buf moq.ParamIndexing
				}
				WriteString struct {
					Str moq.ParamIndexing
				}
				WriteHeader struct {
					Code moq.ParamIndexing
				}
				Flush  struct{}
				Result struct{}
			}
		}{ParameterIndexing: struct {
			Header struct{}
			Write  struct {
				Buf moq.ParamIndexing
			}
			WriteString struct {
				Str moq.ParamIndexing
			}
			WriteHeader struct {
				Code moq.ParamIndexing
			}
			Flush  struct{}
			Result struct{}
		}{
			Header: struct{}{},
			Write: struct {
				Buf moq.ParamIndexing
			}{
				Buf: moq.ParamIndexByHash,
			},
			WriteString: struct {
				Str moq.ParamIndexing
			}{
				Str: moq.ParamIndexByValue,
			},
			WriteHeader: struct {
				Code moq.ParamIndexing
			}{
				Code: moq.ParamIndexByValue,
			},
			Flush:  struct{}{},
			Result: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the ResponseRecorder_starGenType
// type
func (m *MoqResponseRecorder_starGenType) Mock() *MoqResponseRecorder_starGenType_mock { return m.Moq }

func (m *MoqResponseRecorder_starGenType_mock) Header() (result1 http.Header) {
	m.Moq.Scene.T.Helper()
	params := MoqResponseRecorder_starGenType_Header_params{}
	var results *MoqResponseRecorder_starGenType_Header_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Header {
		paramsKey := m.Moq.ParamsKey_Header(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Header(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Header(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Header(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqResponseRecorder_starGenType_mock) Write(buf []byte) (result1 int, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqResponseRecorder_starGenType_Write_params{
		Buf: buf,
	}
	var results *MoqResponseRecorder_starGenType_Write_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Write {
		paramsKey := m.Moq.ParamsKey_Write(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Write(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Write(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Write(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(buf)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(buf)
	}
	return
}

func (m *MoqResponseRecorder_starGenType_mock) WriteString(str string) (result1 int, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqResponseRecorder_starGenType_WriteString_params{
		Str: str,
	}
	var results *MoqResponseRecorder_starGenType_WriteString_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteString {
		paramsKey := m.Moq.ParamsKey_WriteString(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteString(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteString(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteString(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(str)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(str)
	}
	return
}

func (m *MoqResponseRecorder_starGenType_mock) WriteHeader(code int) {
	m.Moq.Scene.T.Helper()
	params := MoqResponseRecorder_starGenType_WriteHeader_params{
		Code: code,
	}
	var results *MoqResponseRecorder_starGenType_WriteHeader_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteHeader {
		paramsKey := m.Moq.ParamsKey_WriteHeader(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteHeader(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteHeader(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteHeader(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(code)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(code)
	}
	return
}

func (m *MoqResponseRecorder_starGenType_mock) Flush() {
	m.Moq.Scene.T.Helper()
	params := MoqResponseRecorder_starGenType_Flush_params{}
	var results *MoqResponseRecorder_starGenType_Flush_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Flush {
		paramsKey := m.Moq.ParamsKey_Flush(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Flush(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Flush(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Flush(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqResponseRecorder_starGenType_mock) Result() (result1 *http.Response) {
	m.Moq.Scene.T.Helper()
	params := MoqResponseRecorder_starGenType_Result_params{}
	var results *MoqResponseRecorder_starGenType_Result_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Result {
		paramsKey := m.Moq.ParamsKey_Result(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Result(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Result(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Result(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the
// ResponseRecorder_starGenType type
func (m *MoqResponseRecorder_starGenType) OnCall() *MoqResponseRecorder_starGenType_recorder {
	return &MoqResponseRecorder_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqResponseRecorder_starGenType_recorder) Header() *MoqResponseRecorder_starGenType_Header_fnRecorder {
	return &MoqResponseRecorder_starGenType_Header_fnRecorder{
		Params:   MoqResponseRecorder_starGenType_Header_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqResponseRecorder_starGenType_Header_fnRecorder) Any() *MoqResponseRecorder_starGenType_Header_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Header(r.Params))
		return nil
	}
	return &MoqResponseRecorder_starGenType_Header_anyParams{Recorder: r}
}

func (r *MoqResponseRecorder_starGenType_Header_fnRecorder) Seq() *MoqResponseRecorder_starGenType_Header_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Header(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqResponseRecorder_starGenType_Header_fnRecorder) NoSeq() *MoqResponseRecorder_starGenType_Header_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Header(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqResponseRecorder_starGenType_Header_fnRecorder) ReturnResults(result1 http.Header) *MoqResponseRecorder_starGenType_Header_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 http.Header
		}
		Sequence   uint32
		DoFn       MoqResponseRecorder_starGenType_Header_doFn
		DoReturnFn MoqResponseRecorder_starGenType_Header_doReturnFn
	}{
		Values: &struct {
			Result1 http.Header
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqResponseRecorder_starGenType_Header_fnRecorder) AndDo(fn MoqResponseRecorder_starGenType_Header_doFn) *MoqResponseRecorder_starGenType_Header_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqResponseRecorder_starGenType_Header_fnRecorder) DoReturnResults(fn MoqResponseRecorder_starGenType_Header_doReturnFn) *MoqResponseRecorder_starGenType_Header_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 http.Header
		}
		Sequence   uint32
		DoFn       MoqResponseRecorder_starGenType_Header_doFn
		DoReturnFn MoqResponseRecorder_starGenType_Header_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqResponseRecorder_starGenType_Header_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqResponseRecorder_starGenType_Header_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Header {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqResponseRecorder_starGenType_Header_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqResponseRecorder_starGenType_Header_paramsKey]*MoqResponseRecorder_starGenType_Header_results{},
		}
		r.Moq.ResultsByParams_Header = append(r.Moq.ResultsByParams_Header, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Header) {
			copy(r.Moq.ResultsByParams_Header[insertAt+1:], r.Moq.ResultsByParams_Header[insertAt:0])
			r.Moq.ResultsByParams_Header[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Header(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqResponseRecorder_starGenType_Header_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqResponseRecorder_starGenType_Header_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqResponseRecorder_starGenType_Header_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 http.Header
				}
				Sequence   uint32
				DoFn       MoqResponseRecorder_starGenType_Header_doFn
				DoReturnFn MoqResponseRecorder_starGenType_Header_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqResponseRecorder_starGenType) PrettyParams_Header(params MoqResponseRecorder_starGenType_Header_params) string {
	return fmt.Sprintf("Header()")
}

func (m *MoqResponseRecorder_starGenType) ParamsKey_Header(params MoqResponseRecorder_starGenType_Header_params, anyParams uint64) MoqResponseRecorder_starGenType_Header_paramsKey {
	m.Scene.T.Helper()
	return MoqResponseRecorder_starGenType_Header_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqResponseRecorder_starGenType_recorder) Write(buf []byte) *MoqResponseRecorder_starGenType_Write_fnRecorder {
	return &MoqResponseRecorder_starGenType_Write_fnRecorder{
		Params: MoqResponseRecorder_starGenType_Write_params{
			Buf: buf,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqResponseRecorder_starGenType_Write_fnRecorder) Any() *MoqResponseRecorder_starGenType_Write_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	return &MoqResponseRecorder_starGenType_Write_anyParams{Recorder: r}
}

func (a *MoqResponseRecorder_starGenType_Write_anyParams) Buf() *MoqResponseRecorder_starGenType_Write_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqResponseRecorder_starGenType_Write_fnRecorder) Seq() *MoqResponseRecorder_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqResponseRecorder_starGenType_Write_fnRecorder) NoSeq() *MoqResponseRecorder_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqResponseRecorder_starGenType_Write_fnRecorder) ReturnResults(result1 int, result2 error) *MoqResponseRecorder_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqResponseRecorder_starGenType_Write_doFn
		DoReturnFn MoqResponseRecorder_starGenType_Write_doReturnFn
	}{
		Values: &struct {
			Result1 int
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqResponseRecorder_starGenType_Write_fnRecorder) AndDo(fn MoqResponseRecorder_starGenType_Write_doFn) *MoqResponseRecorder_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqResponseRecorder_starGenType_Write_fnRecorder) DoReturnResults(fn MoqResponseRecorder_starGenType_Write_doReturnFn) *MoqResponseRecorder_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqResponseRecorder_starGenType_Write_doFn
		DoReturnFn MoqResponseRecorder_starGenType_Write_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqResponseRecorder_starGenType_Write_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqResponseRecorder_starGenType_Write_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Write {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqResponseRecorder_starGenType_Write_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqResponseRecorder_starGenType_Write_paramsKey]*MoqResponseRecorder_starGenType_Write_results{},
		}
		r.Moq.ResultsByParams_Write = append(r.Moq.ResultsByParams_Write, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Write) {
			copy(r.Moq.ResultsByParams_Write[insertAt+1:], r.Moq.ResultsByParams_Write[insertAt:0])
			r.Moq.ResultsByParams_Write[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Write(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqResponseRecorder_starGenType_Write_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqResponseRecorder_starGenType_Write_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqResponseRecorder_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqResponseRecorder_starGenType_Write_doFn
				DoReturnFn MoqResponseRecorder_starGenType_Write_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqResponseRecorder_starGenType) PrettyParams_Write(params MoqResponseRecorder_starGenType_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.Buf)
}

func (m *MoqResponseRecorder_starGenType) ParamsKey_Write(params MoqResponseRecorder_starGenType_Write_params, anyParams uint64) MoqResponseRecorder_starGenType_Write_paramsKey {
	m.Scene.T.Helper()
	var bufUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Write.Buf == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The buf parameter of the Write function can't be indexed by value")
		}
		bufUsedHash = hash.DeepHash(params.Buf)
	}
	return MoqResponseRecorder_starGenType_Write_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Buf hash.Hash }{
			Buf: bufUsedHash,
		},
	}
}

func (m *MoqResponseRecorder_starGenType_recorder) WriteString(str string) *MoqResponseRecorder_starGenType_WriteString_fnRecorder {
	return &MoqResponseRecorder_starGenType_WriteString_fnRecorder{
		Params: MoqResponseRecorder_starGenType_WriteString_params{
			Str: str,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqResponseRecorder_starGenType_WriteString_fnRecorder) Any() *MoqResponseRecorder_starGenType_WriteString_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteString(r.Params))
		return nil
	}
	return &MoqResponseRecorder_starGenType_WriteString_anyParams{Recorder: r}
}

func (a *MoqResponseRecorder_starGenType_WriteString_anyParams) Str() *MoqResponseRecorder_starGenType_WriteString_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqResponseRecorder_starGenType_WriteString_fnRecorder) Seq() *MoqResponseRecorder_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteString(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqResponseRecorder_starGenType_WriteString_fnRecorder) NoSeq() *MoqResponseRecorder_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteString(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqResponseRecorder_starGenType_WriteString_fnRecorder) ReturnResults(result1 int, result2 error) *MoqResponseRecorder_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqResponseRecorder_starGenType_WriteString_doFn
		DoReturnFn MoqResponseRecorder_starGenType_WriteString_doReturnFn
	}{
		Values: &struct {
			Result1 int
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqResponseRecorder_starGenType_WriteString_fnRecorder) AndDo(fn MoqResponseRecorder_starGenType_WriteString_doFn) *MoqResponseRecorder_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqResponseRecorder_starGenType_WriteString_fnRecorder) DoReturnResults(fn MoqResponseRecorder_starGenType_WriteString_doReturnFn) *MoqResponseRecorder_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqResponseRecorder_starGenType_WriteString_doFn
		DoReturnFn MoqResponseRecorder_starGenType_WriteString_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqResponseRecorder_starGenType_WriteString_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqResponseRecorder_starGenType_WriteString_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteString {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqResponseRecorder_starGenType_WriteString_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqResponseRecorder_starGenType_WriteString_paramsKey]*MoqResponseRecorder_starGenType_WriteString_results{},
		}
		r.Moq.ResultsByParams_WriteString = append(r.Moq.ResultsByParams_WriteString, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteString) {
			copy(r.Moq.ResultsByParams_WriteString[insertAt+1:], r.Moq.ResultsByParams_WriteString[insertAt:0])
			r.Moq.ResultsByParams_WriteString[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteString(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqResponseRecorder_starGenType_WriteString_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqResponseRecorder_starGenType_WriteString_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqResponseRecorder_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqResponseRecorder_starGenType_WriteString_doFn
				DoReturnFn MoqResponseRecorder_starGenType_WriteString_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqResponseRecorder_starGenType) PrettyParams_WriteString(params MoqResponseRecorder_starGenType_WriteString_params) string {
	return fmt.Sprintf("WriteString(%#v)", params.Str)
}

func (m *MoqResponseRecorder_starGenType) ParamsKey_WriteString(params MoqResponseRecorder_starGenType_WriteString_params, anyParams uint64) MoqResponseRecorder_starGenType_WriteString_paramsKey {
	m.Scene.T.Helper()
	var strUsed string
	var strUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteString.Str == moq.ParamIndexByValue {
			strUsed = params.Str
		} else {
			strUsedHash = hash.DeepHash(params.Str)
		}
	}
	return MoqResponseRecorder_starGenType_WriteString_paramsKey{
		Params: struct{ Str string }{
			Str: strUsed,
		},
		Hashes: struct{ Str hash.Hash }{
			Str: strUsedHash,
		},
	}
}

func (m *MoqResponseRecorder_starGenType_recorder) WriteHeader(code int) *MoqResponseRecorder_starGenType_WriteHeader_fnRecorder {
	return &MoqResponseRecorder_starGenType_WriteHeader_fnRecorder{
		Params: MoqResponseRecorder_starGenType_WriteHeader_params{
			Code: code,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqResponseRecorder_starGenType_WriteHeader_fnRecorder) Any() *MoqResponseRecorder_starGenType_WriteHeader_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteHeader(r.Params))
		return nil
	}
	return &MoqResponseRecorder_starGenType_WriteHeader_anyParams{Recorder: r}
}

func (a *MoqResponseRecorder_starGenType_WriteHeader_anyParams) Code() *MoqResponseRecorder_starGenType_WriteHeader_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqResponseRecorder_starGenType_WriteHeader_fnRecorder) Seq() *MoqResponseRecorder_starGenType_WriteHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteHeader(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqResponseRecorder_starGenType_WriteHeader_fnRecorder) NoSeq() *MoqResponseRecorder_starGenType_WriteHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteHeader(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqResponseRecorder_starGenType_WriteHeader_fnRecorder) ReturnResults() *MoqResponseRecorder_starGenType_WriteHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqResponseRecorder_starGenType_WriteHeader_doFn
		DoReturnFn MoqResponseRecorder_starGenType_WriteHeader_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqResponseRecorder_starGenType_WriteHeader_fnRecorder) AndDo(fn MoqResponseRecorder_starGenType_WriteHeader_doFn) *MoqResponseRecorder_starGenType_WriteHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqResponseRecorder_starGenType_WriteHeader_fnRecorder) DoReturnResults(fn MoqResponseRecorder_starGenType_WriteHeader_doReturnFn) *MoqResponseRecorder_starGenType_WriteHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqResponseRecorder_starGenType_WriteHeader_doFn
		DoReturnFn MoqResponseRecorder_starGenType_WriteHeader_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqResponseRecorder_starGenType_WriteHeader_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqResponseRecorder_starGenType_WriteHeader_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteHeader {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqResponseRecorder_starGenType_WriteHeader_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqResponseRecorder_starGenType_WriteHeader_paramsKey]*MoqResponseRecorder_starGenType_WriteHeader_results{},
		}
		r.Moq.ResultsByParams_WriteHeader = append(r.Moq.ResultsByParams_WriteHeader, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteHeader) {
			copy(r.Moq.ResultsByParams_WriteHeader[insertAt+1:], r.Moq.ResultsByParams_WriteHeader[insertAt:0])
			r.Moq.ResultsByParams_WriteHeader[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteHeader(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqResponseRecorder_starGenType_WriteHeader_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqResponseRecorder_starGenType_WriteHeader_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqResponseRecorder_starGenType_WriteHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqResponseRecorder_starGenType_WriteHeader_doFn
				DoReturnFn MoqResponseRecorder_starGenType_WriteHeader_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqResponseRecorder_starGenType) PrettyParams_WriteHeader(params MoqResponseRecorder_starGenType_WriteHeader_params) string {
	return fmt.Sprintf("WriteHeader(%#v)", params.Code)
}

func (m *MoqResponseRecorder_starGenType) ParamsKey_WriteHeader(params MoqResponseRecorder_starGenType_WriteHeader_params, anyParams uint64) MoqResponseRecorder_starGenType_WriteHeader_paramsKey {
	m.Scene.T.Helper()
	var codeUsed int
	var codeUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteHeader.Code == moq.ParamIndexByValue {
			codeUsed = params.Code
		} else {
			codeUsedHash = hash.DeepHash(params.Code)
		}
	}
	return MoqResponseRecorder_starGenType_WriteHeader_paramsKey{
		Params: struct{ Code int }{
			Code: codeUsed,
		},
		Hashes: struct{ Code hash.Hash }{
			Code: codeUsedHash,
		},
	}
}

func (m *MoqResponseRecorder_starGenType_recorder) Flush() *MoqResponseRecorder_starGenType_Flush_fnRecorder {
	return &MoqResponseRecorder_starGenType_Flush_fnRecorder{
		Params:   MoqResponseRecorder_starGenType_Flush_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqResponseRecorder_starGenType_Flush_fnRecorder) Any() *MoqResponseRecorder_starGenType_Flush_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Flush(r.Params))
		return nil
	}
	return &MoqResponseRecorder_starGenType_Flush_anyParams{Recorder: r}
}

func (r *MoqResponseRecorder_starGenType_Flush_fnRecorder) Seq() *MoqResponseRecorder_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Flush(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqResponseRecorder_starGenType_Flush_fnRecorder) NoSeq() *MoqResponseRecorder_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Flush(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqResponseRecorder_starGenType_Flush_fnRecorder) ReturnResults() *MoqResponseRecorder_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqResponseRecorder_starGenType_Flush_doFn
		DoReturnFn MoqResponseRecorder_starGenType_Flush_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqResponseRecorder_starGenType_Flush_fnRecorder) AndDo(fn MoqResponseRecorder_starGenType_Flush_doFn) *MoqResponseRecorder_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqResponseRecorder_starGenType_Flush_fnRecorder) DoReturnResults(fn MoqResponseRecorder_starGenType_Flush_doReturnFn) *MoqResponseRecorder_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqResponseRecorder_starGenType_Flush_doFn
		DoReturnFn MoqResponseRecorder_starGenType_Flush_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqResponseRecorder_starGenType_Flush_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqResponseRecorder_starGenType_Flush_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Flush {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqResponseRecorder_starGenType_Flush_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqResponseRecorder_starGenType_Flush_paramsKey]*MoqResponseRecorder_starGenType_Flush_results{},
		}
		r.Moq.ResultsByParams_Flush = append(r.Moq.ResultsByParams_Flush, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Flush) {
			copy(r.Moq.ResultsByParams_Flush[insertAt+1:], r.Moq.ResultsByParams_Flush[insertAt:0])
			r.Moq.ResultsByParams_Flush[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Flush(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqResponseRecorder_starGenType_Flush_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqResponseRecorder_starGenType_Flush_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqResponseRecorder_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqResponseRecorder_starGenType_Flush_doFn
				DoReturnFn MoqResponseRecorder_starGenType_Flush_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqResponseRecorder_starGenType) PrettyParams_Flush(params MoqResponseRecorder_starGenType_Flush_params) string {
	return fmt.Sprintf("Flush()")
}

func (m *MoqResponseRecorder_starGenType) ParamsKey_Flush(params MoqResponseRecorder_starGenType_Flush_params, anyParams uint64) MoqResponseRecorder_starGenType_Flush_paramsKey {
	m.Scene.T.Helper()
	return MoqResponseRecorder_starGenType_Flush_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqResponseRecorder_starGenType_recorder) Result() *MoqResponseRecorder_starGenType_Result_fnRecorder {
	return &MoqResponseRecorder_starGenType_Result_fnRecorder{
		Params:   MoqResponseRecorder_starGenType_Result_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqResponseRecorder_starGenType_Result_fnRecorder) Any() *MoqResponseRecorder_starGenType_Result_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Result(r.Params))
		return nil
	}
	return &MoqResponseRecorder_starGenType_Result_anyParams{Recorder: r}
}

func (r *MoqResponseRecorder_starGenType_Result_fnRecorder) Seq() *MoqResponseRecorder_starGenType_Result_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Result(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqResponseRecorder_starGenType_Result_fnRecorder) NoSeq() *MoqResponseRecorder_starGenType_Result_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Result(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqResponseRecorder_starGenType_Result_fnRecorder) ReturnResults(result1 *http.Response) *MoqResponseRecorder_starGenType_Result_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *http.Response
		}
		Sequence   uint32
		DoFn       MoqResponseRecorder_starGenType_Result_doFn
		DoReturnFn MoqResponseRecorder_starGenType_Result_doReturnFn
	}{
		Values: &struct {
			Result1 *http.Response
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqResponseRecorder_starGenType_Result_fnRecorder) AndDo(fn MoqResponseRecorder_starGenType_Result_doFn) *MoqResponseRecorder_starGenType_Result_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqResponseRecorder_starGenType_Result_fnRecorder) DoReturnResults(fn MoqResponseRecorder_starGenType_Result_doReturnFn) *MoqResponseRecorder_starGenType_Result_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *http.Response
		}
		Sequence   uint32
		DoFn       MoqResponseRecorder_starGenType_Result_doFn
		DoReturnFn MoqResponseRecorder_starGenType_Result_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqResponseRecorder_starGenType_Result_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqResponseRecorder_starGenType_Result_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Result {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqResponseRecorder_starGenType_Result_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqResponseRecorder_starGenType_Result_paramsKey]*MoqResponseRecorder_starGenType_Result_results{},
		}
		r.Moq.ResultsByParams_Result = append(r.Moq.ResultsByParams_Result, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Result) {
			copy(r.Moq.ResultsByParams_Result[insertAt+1:], r.Moq.ResultsByParams_Result[insertAt:0])
			r.Moq.ResultsByParams_Result[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Result(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqResponseRecorder_starGenType_Result_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqResponseRecorder_starGenType_Result_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqResponseRecorder_starGenType_Result_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *http.Response
				}
				Sequence   uint32
				DoFn       MoqResponseRecorder_starGenType_Result_doFn
				DoReturnFn MoqResponseRecorder_starGenType_Result_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqResponseRecorder_starGenType) PrettyParams_Result(params MoqResponseRecorder_starGenType_Result_params) string {
	return fmt.Sprintf("Result()")
}

func (m *MoqResponseRecorder_starGenType) ParamsKey_Result(params MoqResponseRecorder_starGenType_Result_params, anyParams uint64) MoqResponseRecorder_starGenType_Result_paramsKey {
	m.Scene.T.Helper()
	return MoqResponseRecorder_starGenType_Result_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqResponseRecorder_starGenType) Reset() {
	m.ResultsByParams_Header = nil
	m.ResultsByParams_Write = nil
	m.ResultsByParams_WriteString = nil
	m.ResultsByParams_WriteHeader = nil
	m.ResultsByParams_Flush = nil
	m.ResultsByParams_Result = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqResponseRecorder_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Header {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Header(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Write {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Write(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteString {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteString(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteHeader {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteHeader(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Flush {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Flush(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Result {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Result(results.Params))
			}
		}
	}
}
