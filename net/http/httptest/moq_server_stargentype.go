// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package httptest

import (
	"crypto/x509"
	"fmt"
	"math/bits"
	"net/http"
	"sync/atomic"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that httptest.Server_starGenType is
// mocked completely
var _ Server_starGenType = (*MoqServer_starGenType_mock)(nil)

// Server_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Server_starGenType interface {
	Start()
	StartTLS()
	Close()
	CloseClientConnections()
	Certificate() *x509.Certificate
	Client() *http.Client
}

// MoqServer_starGenType holds the state of a moq of the Server_starGenType
// type
type MoqServer_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqServer_starGenType_mock

	ResultsByParams_Start                  []MoqServer_starGenType_Start_resultsByParams
	ResultsByParams_StartTLS               []MoqServer_starGenType_StartTLS_resultsByParams
	ResultsByParams_Close                  []MoqServer_starGenType_Close_resultsByParams
	ResultsByParams_CloseClientConnections []MoqServer_starGenType_CloseClientConnections_resultsByParams
	ResultsByParams_Certificate            []MoqServer_starGenType_Certificate_resultsByParams
	ResultsByParams_Client                 []MoqServer_starGenType_Client_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Start                  struct{}
			StartTLS               struct{}
			Close                  struct{}
			CloseClientConnections struct{}
			Certificate            struct{}
			Client                 struct{}
		}
	}
}

// MoqServer_starGenType_mock isolates the mock interface of the
// Server_starGenType type
type MoqServer_starGenType_mock struct {
	Moq *MoqServer_starGenType
}

// MoqServer_starGenType_recorder isolates the recorder interface of the
// Server_starGenType type
type MoqServer_starGenType_recorder struct {
	Moq *MoqServer_starGenType
}

// MoqServer_starGenType_Start_params holds the params of the
// Server_starGenType type
type MoqServer_starGenType_Start_params struct{}

// MoqServer_starGenType_Start_paramsKey holds the map key params of the
// Server_starGenType type
type MoqServer_starGenType_Start_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqServer_starGenType_Start_resultsByParams contains the results for a given
// set of parameters for the Server_starGenType type
type MoqServer_starGenType_Start_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServer_starGenType_Start_paramsKey]*MoqServer_starGenType_Start_results
}

// MoqServer_starGenType_Start_doFn defines the type of function needed when
// calling AndDo for the Server_starGenType type
type MoqServer_starGenType_Start_doFn func()

// MoqServer_starGenType_Start_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Server_starGenType type
type MoqServer_starGenType_Start_doReturnFn func()

// MoqServer_starGenType_Start_results holds the results of the
// Server_starGenType type
type MoqServer_starGenType_Start_results struct {
	Params  MoqServer_starGenType_Start_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Start_doFn
		DoReturnFn MoqServer_starGenType_Start_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServer_starGenType_Start_fnRecorder routes recorded function calls to the
// MoqServer_starGenType moq
type MoqServer_starGenType_Start_fnRecorder struct {
	Params    MoqServer_starGenType_Start_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServer_starGenType_Start_results
	Moq       *MoqServer_starGenType
}

// MoqServer_starGenType_Start_anyParams isolates the any params functions of
// the Server_starGenType type
type MoqServer_starGenType_Start_anyParams struct {
	Recorder *MoqServer_starGenType_Start_fnRecorder
}

// MoqServer_starGenType_StartTLS_params holds the params of the
// Server_starGenType type
type MoqServer_starGenType_StartTLS_params struct{}

// MoqServer_starGenType_StartTLS_paramsKey holds the map key params of the
// Server_starGenType type
type MoqServer_starGenType_StartTLS_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqServer_starGenType_StartTLS_resultsByParams contains the results for a
// given set of parameters for the Server_starGenType type
type MoqServer_starGenType_StartTLS_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServer_starGenType_StartTLS_paramsKey]*MoqServer_starGenType_StartTLS_results
}

// MoqServer_starGenType_StartTLS_doFn defines the type of function needed when
// calling AndDo for the Server_starGenType type
type MoqServer_starGenType_StartTLS_doFn func()

// MoqServer_starGenType_StartTLS_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Server_starGenType type
type MoqServer_starGenType_StartTLS_doReturnFn func()

// MoqServer_starGenType_StartTLS_results holds the results of the
// Server_starGenType type
type MoqServer_starGenType_StartTLS_results struct {
	Params  MoqServer_starGenType_StartTLS_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServer_starGenType_StartTLS_doFn
		DoReturnFn MoqServer_starGenType_StartTLS_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServer_starGenType_StartTLS_fnRecorder routes recorded function calls to
// the MoqServer_starGenType moq
type MoqServer_starGenType_StartTLS_fnRecorder struct {
	Params    MoqServer_starGenType_StartTLS_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServer_starGenType_StartTLS_results
	Moq       *MoqServer_starGenType
}

// MoqServer_starGenType_StartTLS_anyParams isolates the any params functions
// of the Server_starGenType type
type MoqServer_starGenType_StartTLS_anyParams struct {
	Recorder *MoqServer_starGenType_StartTLS_fnRecorder
}

// MoqServer_starGenType_Close_params holds the params of the
// Server_starGenType type
type MoqServer_starGenType_Close_params struct{}

// MoqServer_starGenType_Close_paramsKey holds the map key params of the
// Server_starGenType type
type MoqServer_starGenType_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqServer_starGenType_Close_resultsByParams contains the results for a given
// set of parameters for the Server_starGenType type
type MoqServer_starGenType_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServer_starGenType_Close_paramsKey]*MoqServer_starGenType_Close_results
}

// MoqServer_starGenType_Close_doFn defines the type of function needed when
// calling AndDo for the Server_starGenType type
type MoqServer_starGenType_Close_doFn func()

// MoqServer_starGenType_Close_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Server_starGenType type
type MoqServer_starGenType_Close_doReturnFn func()

// MoqServer_starGenType_Close_results holds the results of the
// Server_starGenType type
type MoqServer_starGenType_Close_results struct {
	Params  MoqServer_starGenType_Close_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Close_doFn
		DoReturnFn MoqServer_starGenType_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServer_starGenType_Close_fnRecorder routes recorded function calls to the
// MoqServer_starGenType moq
type MoqServer_starGenType_Close_fnRecorder struct {
	Params    MoqServer_starGenType_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServer_starGenType_Close_results
	Moq       *MoqServer_starGenType
}

// MoqServer_starGenType_Close_anyParams isolates the any params functions of
// the Server_starGenType type
type MoqServer_starGenType_Close_anyParams struct {
	Recorder *MoqServer_starGenType_Close_fnRecorder
}

// MoqServer_starGenType_CloseClientConnections_params holds the params of the
// Server_starGenType type
type MoqServer_starGenType_CloseClientConnections_params struct{}

// MoqServer_starGenType_CloseClientConnections_paramsKey holds the map key
// params of the Server_starGenType type
type MoqServer_starGenType_CloseClientConnections_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqServer_starGenType_CloseClientConnections_resultsByParams contains the
// results for a given set of parameters for the Server_starGenType type
type MoqServer_starGenType_CloseClientConnections_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServer_starGenType_CloseClientConnections_paramsKey]*MoqServer_starGenType_CloseClientConnections_results
}

// MoqServer_starGenType_CloseClientConnections_doFn defines the type of
// function needed when calling AndDo for the Server_starGenType type
type MoqServer_starGenType_CloseClientConnections_doFn func()

// MoqServer_starGenType_CloseClientConnections_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Server_starGenType type
type MoqServer_starGenType_CloseClientConnections_doReturnFn func()

// MoqServer_starGenType_CloseClientConnections_results holds the results of
// the Server_starGenType type
type MoqServer_starGenType_CloseClientConnections_results struct {
	Params  MoqServer_starGenType_CloseClientConnections_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServer_starGenType_CloseClientConnections_doFn
		DoReturnFn MoqServer_starGenType_CloseClientConnections_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServer_starGenType_CloseClientConnections_fnRecorder routes recorded
// function calls to the MoqServer_starGenType moq
type MoqServer_starGenType_CloseClientConnections_fnRecorder struct {
	Params    MoqServer_starGenType_CloseClientConnections_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServer_starGenType_CloseClientConnections_results
	Moq       *MoqServer_starGenType
}

// MoqServer_starGenType_CloseClientConnections_anyParams isolates the any
// params functions of the Server_starGenType type
type MoqServer_starGenType_CloseClientConnections_anyParams struct {
	Recorder *MoqServer_starGenType_CloseClientConnections_fnRecorder
}

// MoqServer_starGenType_Certificate_params holds the params of the
// Server_starGenType type
type MoqServer_starGenType_Certificate_params struct{}

// MoqServer_starGenType_Certificate_paramsKey holds the map key params of the
// Server_starGenType type
type MoqServer_starGenType_Certificate_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqServer_starGenType_Certificate_resultsByParams contains the results for a
// given set of parameters for the Server_starGenType type
type MoqServer_starGenType_Certificate_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServer_starGenType_Certificate_paramsKey]*MoqServer_starGenType_Certificate_results
}

// MoqServer_starGenType_Certificate_doFn defines the type of function needed
// when calling AndDo for the Server_starGenType type
type MoqServer_starGenType_Certificate_doFn func()

// MoqServer_starGenType_Certificate_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Server_starGenType type
type MoqServer_starGenType_Certificate_doReturnFn func() *x509.Certificate

// MoqServer_starGenType_Certificate_results holds the results of the
// Server_starGenType type
type MoqServer_starGenType_Certificate_results struct {
	Params  MoqServer_starGenType_Certificate_params
	Results []struct {
		Values *struct {
			Result1 *x509.Certificate
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Certificate_doFn
		DoReturnFn MoqServer_starGenType_Certificate_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServer_starGenType_Certificate_fnRecorder routes recorded function calls
// to the MoqServer_starGenType moq
type MoqServer_starGenType_Certificate_fnRecorder struct {
	Params    MoqServer_starGenType_Certificate_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServer_starGenType_Certificate_results
	Moq       *MoqServer_starGenType
}

// MoqServer_starGenType_Certificate_anyParams isolates the any params
// functions of the Server_starGenType type
type MoqServer_starGenType_Certificate_anyParams struct {
	Recorder *MoqServer_starGenType_Certificate_fnRecorder
}

// MoqServer_starGenType_Client_params holds the params of the
// Server_starGenType type
type MoqServer_starGenType_Client_params struct{}

// MoqServer_starGenType_Client_paramsKey holds the map key params of the
// Server_starGenType type
type MoqServer_starGenType_Client_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqServer_starGenType_Client_resultsByParams contains the results for a
// given set of parameters for the Server_starGenType type
type MoqServer_starGenType_Client_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServer_starGenType_Client_paramsKey]*MoqServer_starGenType_Client_results
}

// MoqServer_starGenType_Client_doFn defines the type of function needed when
// calling AndDo for the Server_starGenType type
type MoqServer_starGenType_Client_doFn func()

// MoqServer_starGenType_Client_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Server_starGenType type
type MoqServer_starGenType_Client_doReturnFn func() *http.Client

// MoqServer_starGenType_Client_results holds the results of the
// Server_starGenType type
type MoqServer_starGenType_Client_results struct {
	Params  MoqServer_starGenType_Client_params
	Results []struct {
		Values *struct {
			Result1 *http.Client
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Client_doFn
		DoReturnFn MoqServer_starGenType_Client_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServer_starGenType_Client_fnRecorder routes recorded function calls to
// the MoqServer_starGenType moq
type MoqServer_starGenType_Client_fnRecorder struct {
	Params    MoqServer_starGenType_Client_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServer_starGenType_Client_results
	Moq       *MoqServer_starGenType
}

// MoqServer_starGenType_Client_anyParams isolates the any params functions of
// the Server_starGenType type
type MoqServer_starGenType_Client_anyParams struct {
	Recorder *MoqServer_starGenType_Client_fnRecorder
}

// NewMoqServer_starGenType creates a new moq of the Server_starGenType type
func NewMoqServer_starGenType(scene *moq.Scene, config *moq.Config) *MoqServer_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqServer_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqServer_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Start                  struct{}
				StartTLS               struct{}
				Close                  struct{}
				CloseClientConnections struct{}
				Certificate            struct{}
				Client                 struct{}
			}
		}{ParameterIndexing: struct {
			Start                  struct{}
			StartTLS               struct{}
			Close                  struct{}
			CloseClientConnections struct{}
			Certificate            struct{}
			Client                 struct{}
		}{
			Start:                  struct{}{},
			StartTLS:               struct{}{},
			Close:                  struct{}{},
			CloseClientConnections: struct{}{},
			Certificate:            struct{}{},
			Client:                 struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Server_starGenType type
func (m *MoqServer_starGenType) Mock() *MoqServer_starGenType_mock { return m.Moq }

func (m *MoqServer_starGenType_mock) Start() {
	m.Moq.Scene.T.Helper()
	params := MoqServer_starGenType_Start_params{}
	var results *MoqServer_starGenType_Start_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Start {
		paramsKey := m.Moq.ParamsKey_Start(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Start(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Start(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Start(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqServer_starGenType_mock) StartTLS() {
	m.Moq.Scene.T.Helper()
	params := MoqServer_starGenType_StartTLS_params{}
	var results *MoqServer_starGenType_StartTLS_results
	for _, resultsByParams := range m.Moq.ResultsByParams_StartTLS {
		paramsKey := m.Moq.ParamsKey_StartTLS(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_StartTLS(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_StartTLS(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_StartTLS(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqServer_starGenType_mock) Close() {
	m.Moq.Scene.T.Helper()
	params := MoqServer_starGenType_Close_params{}
	var results *MoqServer_starGenType_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqServer_starGenType_mock) CloseClientConnections() {
	m.Moq.Scene.T.Helper()
	params := MoqServer_starGenType_CloseClientConnections_params{}
	var results *MoqServer_starGenType_CloseClientConnections_results
	for _, resultsByParams := range m.Moq.ResultsByParams_CloseClientConnections {
		paramsKey := m.Moq.ParamsKey_CloseClientConnections(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_CloseClientConnections(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_CloseClientConnections(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_CloseClientConnections(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqServer_starGenType_mock) Certificate() (result1 *x509.Certificate) {
	m.Moq.Scene.T.Helper()
	params := MoqServer_starGenType_Certificate_params{}
	var results *MoqServer_starGenType_Certificate_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Certificate {
		paramsKey := m.Moq.ParamsKey_Certificate(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Certificate(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Certificate(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Certificate(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqServer_starGenType_mock) Client() (result1 *http.Client) {
	m.Moq.Scene.T.Helper()
	params := MoqServer_starGenType_Client_params{}
	var results *MoqServer_starGenType_Client_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Client {
		paramsKey := m.Moq.ParamsKey_Client(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Client(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Client(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Client(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Server_starGenType type
func (m *MoqServer_starGenType) OnCall() *MoqServer_starGenType_recorder {
	return &MoqServer_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqServer_starGenType_recorder) Start() *MoqServer_starGenType_Start_fnRecorder {
	return &MoqServer_starGenType_Start_fnRecorder{
		Params:   MoqServer_starGenType_Start_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServer_starGenType_Start_fnRecorder) Any() *MoqServer_starGenType_Start_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Start(r.Params))
		return nil
	}
	return &MoqServer_starGenType_Start_anyParams{Recorder: r}
}

func (r *MoqServer_starGenType_Start_fnRecorder) Seq() *MoqServer_starGenType_Start_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Start(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServer_starGenType_Start_fnRecorder) NoSeq() *MoqServer_starGenType_Start_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Start(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServer_starGenType_Start_fnRecorder) ReturnResults() *MoqServer_starGenType_Start_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Start_doFn
		DoReturnFn MoqServer_starGenType_Start_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServer_starGenType_Start_fnRecorder) AndDo(fn MoqServer_starGenType_Start_doFn) *MoqServer_starGenType_Start_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServer_starGenType_Start_fnRecorder) DoReturnResults(fn MoqServer_starGenType_Start_doReturnFn) *MoqServer_starGenType_Start_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Start_doFn
		DoReturnFn MoqServer_starGenType_Start_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServer_starGenType_Start_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServer_starGenType_Start_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Start {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServer_starGenType_Start_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServer_starGenType_Start_paramsKey]*MoqServer_starGenType_Start_results{},
		}
		r.Moq.ResultsByParams_Start = append(r.Moq.ResultsByParams_Start, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Start) {
			copy(r.Moq.ResultsByParams_Start[insertAt+1:], r.Moq.ResultsByParams_Start[insertAt:0])
			r.Moq.ResultsByParams_Start[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Start(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServer_starGenType_Start_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServer_starGenType_Start_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServer_starGenType_Start_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqServer_starGenType_Start_doFn
				DoReturnFn MoqServer_starGenType_Start_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServer_starGenType) PrettyParams_Start(params MoqServer_starGenType_Start_params) string {
	return fmt.Sprintf("Start()")
}

func (m *MoqServer_starGenType) ParamsKey_Start(params MoqServer_starGenType_Start_params, anyParams uint64) MoqServer_starGenType_Start_paramsKey {
	m.Scene.T.Helper()
	return MoqServer_starGenType_Start_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqServer_starGenType_recorder) StartTLS() *MoqServer_starGenType_StartTLS_fnRecorder {
	return &MoqServer_starGenType_StartTLS_fnRecorder{
		Params:   MoqServer_starGenType_StartTLS_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServer_starGenType_StartTLS_fnRecorder) Any() *MoqServer_starGenType_StartTLS_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StartTLS(r.Params))
		return nil
	}
	return &MoqServer_starGenType_StartTLS_anyParams{Recorder: r}
}

func (r *MoqServer_starGenType_StartTLS_fnRecorder) Seq() *MoqServer_starGenType_StartTLS_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StartTLS(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServer_starGenType_StartTLS_fnRecorder) NoSeq() *MoqServer_starGenType_StartTLS_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StartTLS(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServer_starGenType_StartTLS_fnRecorder) ReturnResults() *MoqServer_starGenType_StartTLS_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServer_starGenType_StartTLS_doFn
		DoReturnFn MoqServer_starGenType_StartTLS_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServer_starGenType_StartTLS_fnRecorder) AndDo(fn MoqServer_starGenType_StartTLS_doFn) *MoqServer_starGenType_StartTLS_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServer_starGenType_StartTLS_fnRecorder) DoReturnResults(fn MoqServer_starGenType_StartTLS_doReturnFn) *MoqServer_starGenType_StartTLS_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServer_starGenType_StartTLS_doFn
		DoReturnFn MoqServer_starGenType_StartTLS_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServer_starGenType_StartTLS_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServer_starGenType_StartTLS_resultsByParams
	for n, res := range r.Moq.ResultsByParams_StartTLS {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServer_starGenType_StartTLS_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServer_starGenType_StartTLS_paramsKey]*MoqServer_starGenType_StartTLS_results{},
		}
		r.Moq.ResultsByParams_StartTLS = append(r.Moq.ResultsByParams_StartTLS, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_StartTLS) {
			copy(r.Moq.ResultsByParams_StartTLS[insertAt+1:], r.Moq.ResultsByParams_StartTLS[insertAt:0])
			r.Moq.ResultsByParams_StartTLS[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_StartTLS(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServer_starGenType_StartTLS_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServer_starGenType_StartTLS_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServer_starGenType_StartTLS_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqServer_starGenType_StartTLS_doFn
				DoReturnFn MoqServer_starGenType_StartTLS_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServer_starGenType) PrettyParams_StartTLS(params MoqServer_starGenType_StartTLS_params) string {
	return fmt.Sprintf("StartTLS()")
}

func (m *MoqServer_starGenType) ParamsKey_StartTLS(params MoqServer_starGenType_StartTLS_params, anyParams uint64) MoqServer_starGenType_StartTLS_paramsKey {
	m.Scene.T.Helper()
	return MoqServer_starGenType_StartTLS_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqServer_starGenType_recorder) Close() *MoqServer_starGenType_Close_fnRecorder {
	return &MoqServer_starGenType_Close_fnRecorder{
		Params:   MoqServer_starGenType_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServer_starGenType_Close_fnRecorder) Any() *MoqServer_starGenType_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqServer_starGenType_Close_anyParams{Recorder: r}
}

func (r *MoqServer_starGenType_Close_fnRecorder) Seq() *MoqServer_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServer_starGenType_Close_fnRecorder) NoSeq() *MoqServer_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServer_starGenType_Close_fnRecorder) ReturnResults() *MoqServer_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Close_doFn
		DoReturnFn MoqServer_starGenType_Close_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServer_starGenType_Close_fnRecorder) AndDo(fn MoqServer_starGenType_Close_doFn) *MoqServer_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServer_starGenType_Close_fnRecorder) DoReturnResults(fn MoqServer_starGenType_Close_doReturnFn) *MoqServer_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Close_doFn
		DoReturnFn MoqServer_starGenType_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServer_starGenType_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServer_starGenType_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServer_starGenType_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServer_starGenType_Close_paramsKey]*MoqServer_starGenType_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServer_starGenType_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServer_starGenType_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServer_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqServer_starGenType_Close_doFn
				DoReturnFn MoqServer_starGenType_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServer_starGenType) PrettyParams_Close(params MoqServer_starGenType_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqServer_starGenType) ParamsKey_Close(params MoqServer_starGenType_Close_params, anyParams uint64) MoqServer_starGenType_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqServer_starGenType_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqServer_starGenType_recorder) CloseClientConnections() *MoqServer_starGenType_CloseClientConnections_fnRecorder {
	return &MoqServer_starGenType_CloseClientConnections_fnRecorder{
		Params:   MoqServer_starGenType_CloseClientConnections_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServer_starGenType_CloseClientConnections_fnRecorder) Any() *MoqServer_starGenType_CloseClientConnections_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CloseClientConnections(r.Params))
		return nil
	}
	return &MoqServer_starGenType_CloseClientConnections_anyParams{Recorder: r}
}

func (r *MoqServer_starGenType_CloseClientConnections_fnRecorder) Seq() *MoqServer_starGenType_CloseClientConnections_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CloseClientConnections(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServer_starGenType_CloseClientConnections_fnRecorder) NoSeq() *MoqServer_starGenType_CloseClientConnections_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CloseClientConnections(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServer_starGenType_CloseClientConnections_fnRecorder) ReturnResults() *MoqServer_starGenType_CloseClientConnections_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServer_starGenType_CloseClientConnections_doFn
		DoReturnFn MoqServer_starGenType_CloseClientConnections_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServer_starGenType_CloseClientConnections_fnRecorder) AndDo(fn MoqServer_starGenType_CloseClientConnections_doFn) *MoqServer_starGenType_CloseClientConnections_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServer_starGenType_CloseClientConnections_fnRecorder) DoReturnResults(fn MoqServer_starGenType_CloseClientConnections_doReturnFn) *MoqServer_starGenType_CloseClientConnections_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServer_starGenType_CloseClientConnections_doFn
		DoReturnFn MoqServer_starGenType_CloseClientConnections_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServer_starGenType_CloseClientConnections_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServer_starGenType_CloseClientConnections_resultsByParams
	for n, res := range r.Moq.ResultsByParams_CloseClientConnections {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServer_starGenType_CloseClientConnections_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServer_starGenType_CloseClientConnections_paramsKey]*MoqServer_starGenType_CloseClientConnections_results{},
		}
		r.Moq.ResultsByParams_CloseClientConnections = append(r.Moq.ResultsByParams_CloseClientConnections, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_CloseClientConnections) {
			copy(r.Moq.ResultsByParams_CloseClientConnections[insertAt+1:], r.Moq.ResultsByParams_CloseClientConnections[insertAt:0])
			r.Moq.ResultsByParams_CloseClientConnections[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_CloseClientConnections(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServer_starGenType_CloseClientConnections_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServer_starGenType_CloseClientConnections_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServer_starGenType_CloseClientConnections_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqServer_starGenType_CloseClientConnections_doFn
				DoReturnFn MoqServer_starGenType_CloseClientConnections_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServer_starGenType) PrettyParams_CloseClientConnections(params MoqServer_starGenType_CloseClientConnections_params) string {
	return fmt.Sprintf("CloseClientConnections()")
}

func (m *MoqServer_starGenType) ParamsKey_CloseClientConnections(params MoqServer_starGenType_CloseClientConnections_params, anyParams uint64) MoqServer_starGenType_CloseClientConnections_paramsKey {
	m.Scene.T.Helper()
	return MoqServer_starGenType_CloseClientConnections_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqServer_starGenType_recorder) Certificate() *MoqServer_starGenType_Certificate_fnRecorder {
	return &MoqServer_starGenType_Certificate_fnRecorder{
		Params:   MoqServer_starGenType_Certificate_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServer_starGenType_Certificate_fnRecorder) Any() *MoqServer_starGenType_Certificate_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Certificate(r.Params))
		return nil
	}
	return &MoqServer_starGenType_Certificate_anyParams{Recorder: r}
}

func (r *MoqServer_starGenType_Certificate_fnRecorder) Seq() *MoqServer_starGenType_Certificate_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Certificate(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServer_starGenType_Certificate_fnRecorder) NoSeq() *MoqServer_starGenType_Certificate_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Certificate(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServer_starGenType_Certificate_fnRecorder) ReturnResults(result1 *x509.Certificate) *MoqServer_starGenType_Certificate_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *x509.Certificate
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Certificate_doFn
		DoReturnFn MoqServer_starGenType_Certificate_doReturnFn
	}{
		Values: &struct {
			Result1 *x509.Certificate
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServer_starGenType_Certificate_fnRecorder) AndDo(fn MoqServer_starGenType_Certificate_doFn) *MoqServer_starGenType_Certificate_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServer_starGenType_Certificate_fnRecorder) DoReturnResults(fn MoqServer_starGenType_Certificate_doReturnFn) *MoqServer_starGenType_Certificate_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *x509.Certificate
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Certificate_doFn
		DoReturnFn MoqServer_starGenType_Certificate_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServer_starGenType_Certificate_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServer_starGenType_Certificate_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Certificate {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServer_starGenType_Certificate_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServer_starGenType_Certificate_paramsKey]*MoqServer_starGenType_Certificate_results{},
		}
		r.Moq.ResultsByParams_Certificate = append(r.Moq.ResultsByParams_Certificate, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Certificate) {
			copy(r.Moq.ResultsByParams_Certificate[insertAt+1:], r.Moq.ResultsByParams_Certificate[insertAt:0])
			r.Moq.ResultsByParams_Certificate[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Certificate(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServer_starGenType_Certificate_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServer_starGenType_Certificate_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServer_starGenType_Certificate_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *x509.Certificate
				}
				Sequence   uint32
				DoFn       MoqServer_starGenType_Certificate_doFn
				DoReturnFn MoqServer_starGenType_Certificate_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServer_starGenType) PrettyParams_Certificate(params MoqServer_starGenType_Certificate_params) string {
	return fmt.Sprintf("Certificate()")
}

func (m *MoqServer_starGenType) ParamsKey_Certificate(params MoqServer_starGenType_Certificate_params, anyParams uint64) MoqServer_starGenType_Certificate_paramsKey {
	m.Scene.T.Helper()
	return MoqServer_starGenType_Certificate_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqServer_starGenType_recorder) Client() *MoqServer_starGenType_Client_fnRecorder {
	return &MoqServer_starGenType_Client_fnRecorder{
		Params:   MoqServer_starGenType_Client_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServer_starGenType_Client_fnRecorder) Any() *MoqServer_starGenType_Client_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Client(r.Params))
		return nil
	}
	return &MoqServer_starGenType_Client_anyParams{Recorder: r}
}

func (r *MoqServer_starGenType_Client_fnRecorder) Seq() *MoqServer_starGenType_Client_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Client(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServer_starGenType_Client_fnRecorder) NoSeq() *MoqServer_starGenType_Client_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Client(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServer_starGenType_Client_fnRecorder) ReturnResults(result1 *http.Client) *MoqServer_starGenType_Client_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *http.Client
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Client_doFn
		DoReturnFn MoqServer_starGenType_Client_doReturnFn
	}{
		Values: &struct {
			Result1 *http.Client
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServer_starGenType_Client_fnRecorder) AndDo(fn MoqServer_starGenType_Client_doFn) *MoqServer_starGenType_Client_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServer_starGenType_Client_fnRecorder) DoReturnResults(fn MoqServer_starGenType_Client_doReturnFn) *MoqServer_starGenType_Client_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *http.Client
		}
		Sequence   uint32
		DoFn       MoqServer_starGenType_Client_doFn
		DoReturnFn MoqServer_starGenType_Client_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServer_starGenType_Client_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServer_starGenType_Client_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Client {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServer_starGenType_Client_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServer_starGenType_Client_paramsKey]*MoqServer_starGenType_Client_results{},
		}
		r.Moq.ResultsByParams_Client = append(r.Moq.ResultsByParams_Client, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Client) {
			copy(r.Moq.ResultsByParams_Client[insertAt+1:], r.Moq.ResultsByParams_Client[insertAt:0])
			r.Moq.ResultsByParams_Client[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Client(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServer_starGenType_Client_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServer_starGenType_Client_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServer_starGenType_Client_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *http.Client
				}
				Sequence   uint32
				DoFn       MoqServer_starGenType_Client_doFn
				DoReturnFn MoqServer_starGenType_Client_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServer_starGenType) PrettyParams_Client(params MoqServer_starGenType_Client_params) string {
	return fmt.Sprintf("Client()")
}

func (m *MoqServer_starGenType) ParamsKey_Client(params MoqServer_starGenType_Client_params, anyParams uint64) MoqServer_starGenType_Client_paramsKey {
	m.Scene.T.Helper()
	return MoqServer_starGenType_Client_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqServer_starGenType) Reset() {
	m.ResultsByParams_Start = nil
	m.ResultsByParams_StartTLS = nil
	m.ResultsByParams_Close = nil
	m.ResultsByParams_CloseClientConnections = nil
	m.ResultsByParams_Certificate = nil
	m.ResultsByParams_Client = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqServer_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Start {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Start(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_StartTLS {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_StartTLS(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_CloseClientConnections {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_CloseClientConnections(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Certificate {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Certificate(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Client {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Client(results.Params))
			}
		}
	}
}
