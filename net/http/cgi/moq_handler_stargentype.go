// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package cgi

import (
	"fmt"
	"math/bits"
	"net/http"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that cgi.Handler_starGenType is mocked
// completely
var _ Handler_starGenType = (*MoqHandler_starGenType_mock)(nil)

// Handler_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Handler_starGenType interface {
	ServeHTTP(rw http.ResponseWriter, req *http.Request)
}

// MoqHandler_starGenType holds the state of a moq of the Handler_starGenType
// type
type MoqHandler_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqHandler_starGenType_mock

	ResultsByParams_ServeHTTP []MoqHandler_starGenType_ServeHTTP_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			ServeHTTP struct {
				Rw  moq.ParamIndexing
				Req moq.ParamIndexing
			}
		}
	}
	// MoqHandler_starGenType_mock isolates the mock interface of the
}

// Handler_starGenType type
type MoqHandler_starGenType_mock struct {
	Moq *MoqHandler_starGenType
}

// MoqHandler_starGenType_recorder isolates the recorder interface of the
// Handler_starGenType type
type MoqHandler_starGenType_recorder struct {
	Moq *MoqHandler_starGenType
}

// MoqHandler_starGenType_ServeHTTP_params holds the params of the
// Handler_starGenType type
type MoqHandler_starGenType_ServeHTTP_params struct {
	Rw  http.ResponseWriter
	Req *http.Request
}

// MoqHandler_starGenType_ServeHTTP_paramsKey holds the map key params of the
// Handler_starGenType type
type MoqHandler_starGenType_ServeHTTP_paramsKey struct {
	Params struct {
		Rw  http.ResponseWriter
		Req *http.Request
	}
	Hashes struct {
		Rw  hash.Hash
		Req hash.Hash
	}
}

// MoqHandler_starGenType_ServeHTTP_resultsByParams contains the results for a
// given set of parameters for the Handler_starGenType type
type MoqHandler_starGenType_ServeHTTP_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHandler_starGenType_ServeHTTP_paramsKey]*MoqHandler_starGenType_ServeHTTP_results
}

// MoqHandler_starGenType_ServeHTTP_doFn defines the type of function needed
// when calling AndDo for the Handler_starGenType type
type MoqHandler_starGenType_ServeHTTP_doFn func(rw http.ResponseWriter, req *http.Request)

// MoqHandler_starGenType_ServeHTTP_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Handler_starGenType type
type MoqHandler_starGenType_ServeHTTP_doReturnFn func(rw http.ResponseWriter, req *http.Request)

// MoqHandler_starGenType_ServeHTTP_results holds the results of the
// Handler_starGenType type
type MoqHandler_starGenType_ServeHTTP_results struct {
	Params  MoqHandler_starGenType_ServeHTTP_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqHandler_starGenType_ServeHTTP_doFn
		DoReturnFn MoqHandler_starGenType_ServeHTTP_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHandler_starGenType_ServeHTTP_fnRecorder routes recorded function calls
// to the MoqHandler_starGenType moq
type MoqHandler_starGenType_ServeHTTP_fnRecorder struct {
	Params    MoqHandler_starGenType_ServeHTTP_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHandler_starGenType_ServeHTTP_results
	Moq       *MoqHandler_starGenType
}

// MoqHandler_starGenType_ServeHTTP_anyParams isolates the any params functions
// of the Handler_starGenType type
type MoqHandler_starGenType_ServeHTTP_anyParams struct {
	Recorder *MoqHandler_starGenType_ServeHTTP_fnRecorder
}

// NewMoqHandler_starGenType creates a new moq of the Handler_starGenType type
func NewMoqHandler_starGenType(scene *moq.Scene, config *moq.Config) *MoqHandler_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqHandler_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqHandler_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				ServeHTTP struct {
					Rw  moq.ParamIndexing
					Req moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			ServeHTTP struct {
				Rw  moq.ParamIndexing
				Req moq.ParamIndexing
			}
		}{
			ServeHTTP: struct {
				Rw  moq.ParamIndexing
				Req moq.ParamIndexing
			}{
				Rw:  moq.ParamIndexByHash,
				Req: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Handler_starGenType type
func (m *MoqHandler_starGenType) Mock() *MoqHandler_starGenType_mock { return m.Moq }

func (m *MoqHandler_starGenType_mock) ServeHTTP(rw http.ResponseWriter, req *http.Request) {
	m.Moq.Scene.T.Helper()
	params := MoqHandler_starGenType_ServeHTTP_params{
		Rw:  rw,
		Req: req,
	}
	var results *MoqHandler_starGenType_ServeHTTP_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ServeHTTP {
		paramsKey := m.Moq.ParamsKey_ServeHTTP(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ServeHTTP(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ServeHTTP(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ServeHTTP(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(rw, req)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(rw, req)
	}
	return
}

// OnCall returns the recorder implementation of the Handler_starGenType type
func (m *MoqHandler_starGenType) OnCall() *MoqHandler_starGenType_recorder {
	return &MoqHandler_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqHandler_starGenType_recorder) ServeHTTP(rw http.ResponseWriter, req *http.Request) *MoqHandler_starGenType_ServeHTTP_fnRecorder {
	return &MoqHandler_starGenType_ServeHTTP_fnRecorder{
		Params: MoqHandler_starGenType_ServeHTTP_params{
			Rw:  rw,
			Req: req,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHandler_starGenType_ServeHTTP_fnRecorder) Any() *MoqHandler_starGenType_ServeHTTP_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ServeHTTP(r.Params))
		return nil
	}
	return &MoqHandler_starGenType_ServeHTTP_anyParams{Recorder: r}
}

func (a *MoqHandler_starGenType_ServeHTTP_anyParams) Rw() *MoqHandler_starGenType_ServeHTTP_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqHandler_starGenType_ServeHTTP_anyParams) Req() *MoqHandler_starGenType_ServeHTTP_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqHandler_starGenType_ServeHTTP_fnRecorder) Seq() *MoqHandler_starGenType_ServeHTTP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ServeHTTP(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHandler_starGenType_ServeHTTP_fnRecorder) NoSeq() *MoqHandler_starGenType_ServeHTTP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ServeHTTP(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHandler_starGenType_ServeHTTP_fnRecorder) ReturnResults() *MoqHandler_starGenType_ServeHTTP_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqHandler_starGenType_ServeHTTP_doFn
		DoReturnFn MoqHandler_starGenType_ServeHTTP_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHandler_starGenType_ServeHTTP_fnRecorder) AndDo(fn MoqHandler_starGenType_ServeHTTP_doFn) *MoqHandler_starGenType_ServeHTTP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHandler_starGenType_ServeHTTP_fnRecorder) DoReturnResults(fn MoqHandler_starGenType_ServeHTTP_doReturnFn) *MoqHandler_starGenType_ServeHTTP_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqHandler_starGenType_ServeHTTP_doFn
		DoReturnFn MoqHandler_starGenType_ServeHTTP_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHandler_starGenType_ServeHTTP_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHandler_starGenType_ServeHTTP_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ServeHTTP {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHandler_starGenType_ServeHTTP_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHandler_starGenType_ServeHTTP_paramsKey]*MoqHandler_starGenType_ServeHTTP_results{},
		}
		r.Moq.ResultsByParams_ServeHTTP = append(r.Moq.ResultsByParams_ServeHTTP, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ServeHTTP) {
			copy(r.Moq.ResultsByParams_ServeHTTP[insertAt+1:], r.Moq.ResultsByParams_ServeHTTP[insertAt:0])
			r.Moq.ResultsByParams_ServeHTTP[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ServeHTTP(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHandler_starGenType_ServeHTTP_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHandler_starGenType_ServeHTTP_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHandler_starGenType_ServeHTTP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqHandler_starGenType_ServeHTTP_doFn
				DoReturnFn MoqHandler_starGenType_ServeHTTP_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHandler_starGenType) PrettyParams_ServeHTTP(params MoqHandler_starGenType_ServeHTTP_params) string {
	return fmt.Sprintf("ServeHTTP(%#v, %#v)", params.Rw, params.Req)
}

func (m *MoqHandler_starGenType) ParamsKey_ServeHTTP(params MoqHandler_starGenType_ServeHTTP_params, anyParams uint64) MoqHandler_starGenType_ServeHTTP_paramsKey {
	m.Scene.T.Helper()
	var rwUsed http.ResponseWriter
	var rwUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ServeHTTP.Rw == moq.ParamIndexByValue {
			rwUsed = params.Rw
		} else {
			rwUsedHash = hash.DeepHash(params.Rw)
		}
	}
	var reqUsed *http.Request
	var reqUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.ServeHTTP.Req == moq.ParamIndexByValue {
			reqUsed = params.Req
		} else {
			reqUsedHash = hash.DeepHash(params.Req)
		}
	}
	return MoqHandler_starGenType_ServeHTTP_paramsKey{
		Params: struct {
			Rw  http.ResponseWriter
			Req *http.Request
		}{
			Rw:  rwUsed,
			Req: reqUsed,
		},
		Hashes: struct {
			Rw  hash.Hash
			Req hash.Hash
		}{
			Rw:  rwUsedHash,
			Req: reqUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqHandler_starGenType) Reset() { m.ResultsByParams_ServeHTTP = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqHandler_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_ServeHTTP {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ServeHTTP(results.Params))
			}
		}
	}
}
