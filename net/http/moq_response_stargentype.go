// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package http

import (
	"fmt"
	"io"
	"math/bits"
	"net/http"
	"net/url"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that http.Response_starGenType is
// mocked completely
var _ Response_starGenType = (*MoqResponse_starGenType_mock)(nil)

// Response_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Response_starGenType interface {
	Cookies() []*http.Cookie
	Location() (*url.URL, error)
	ProtoAtLeast(major, minor int) bool
	Write(w io.Writer) error
}

// MoqResponse_starGenType holds the state of a moq of the Response_starGenType
// type
type MoqResponse_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqResponse_starGenType_mock

	ResultsByParams_Cookies      []MoqResponse_starGenType_Cookies_resultsByParams
	ResultsByParams_Location     []MoqResponse_starGenType_Location_resultsByParams
	ResultsByParams_ProtoAtLeast []MoqResponse_starGenType_ProtoAtLeast_resultsByParams
	ResultsByParams_Write        []MoqResponse_starGenType_Write_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Cookies      struct{}
			Location     struct{}
			ProtoAtLeast struct {
				Major moq.ParamIndexing
				Minor moq.ParamIndexing
			}
			Write struct {
				W moq.ParamIndexing
			}
		}
	}
	// MoqResponse_starGenType_mock isolates the mock interface of the
}

// Response_starGenType type
type MoqResponse_starGenType_mock struct {
	Moq *MoqResponse_starGenType
}

// MoqResponse_starGenType_recorder isolates the recorder interface of the
// Response_starGenType type
type MoqResponse_starGenType_recorder struct {
	Moq *MoqResponse_starGenType
}

// MoqResponse_starGenType_Cookies_params holds the params of the
// Response_starGenType type
type MoqResponse_starGenType_Cookies_params struct{}

// MoqResponse_starGenType_Cookies_paramsKey holds the map key params of the
// Response_starGenType type
type MoqResponse_starGenType_Cookies_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqResponse_starGenType_Cookies_resultsByParams contains the results for a
// given set of parameters for the Response_starGenType type
type MoqResponse_starGenType_Cookies_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqResponse_starGenType_Cookies_paramsKey]*MoqResponse_starGenType_Cookies_results
}

// MoqResponse_starGenType_Cookies_doFn defines the type of function needed
// when calling AndDo for the Response_starGenType type
type MoqResponse_starGenType_Cookies_doFn func()

// MoqResponse_starGenType_Cookies_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Response_starGenType type
type MoqResponse_starGenType_Cookies_doReturnFn func() []*http.Cookie

// MoqResponse_starGenType_Cookies_results holds the results of the
// Response_starGenType type
type MoqResponse_starGenType_Cookies_results struct {
	Params  MoqResponse_starGenType_Cookies_params
	Results []struct {
		Values *struct {
			Result1 []*http.Cookie
		}
		Sequence   uint32
		DoFn       MoqResponse_starGenType_Cookies_doFn
		DoReturnFn MoqResponse_starGenType_Cookies_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqResponse_starGenType_Cookies_fnRecorder routes recorded function calls to
// the MoqResponse_starGenType moq
type MoqResponse_starGenType_Cookies_fnRecorder struct {
	Params    MoqResponse_starGenType_Cookies_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqResponse_starGenType_Cookies_results
	Moq       *MoqResponse_starGenType
}

// MoqResponse_starGenType_Cookies_anyParams isolates the any params functions
// of the Response_starGenType type
type MoqResponse_starGenType_Cookies_anyParams struct {
	Recorder *MoqResponse_starGenType_Cookies_fnRecorder
}

// MoqResponse_starGenType_Location_params holds the params of the
// Response_starGenType type
type MoqResponse_starGenType_Location_params struct{}

// MoqResponse_starGenType_Location_paramsKey holds the map key params of the
// Response_starGenType type
type MoqResponse_starGenType_Location_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqResponse_starGenType_Location_resultsByParams contains the results for a
// given set of parameters for the Response_starGenType type
type MoqResponse_starGenType_Location_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqResponse_starGenType_Location_paramsKey]*MoqResponse_starGenType_Location_results
}

// MoqResponse_starGenType_Location_doFn defines the type of function needed
// when calling AndDo for the Response_starGenType type
type MoqResponse_starGenType_Location_doFn func()

// MoqResponse_starGenType_Location_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Response_starGenType type
type MoqResponse_starGenType_Location_doReturnFn func() (*url.URL, error)

// MoqResponse_starGenType_Location_results holds the results of the
// Response_starGenType type
type MoqResponse_starGenType_Location_results struct {
	Params  MoqResponse_starGenType_Location_params
	Results []struct {
		Values *struct {
			Result1 *url.URL
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqResponse_starGenType_Location_doFn
		DoReturnFn MoqResponse_starGenType_Location_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqResponse_starGenType_Location_fnRecorder routes recorded function calls
// to the MoqResponse_starGenType moq
type MoqResponse_starGenType_Location_fnRecorder struct {
	Params    MoqResponse_starGenType_Location_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqResponse_starGenType_Location_results
	Moq       *MoqResponse_starGenType
}

// MoqResponse_starGenType_Location_anyParams isolates the any params functions
// of the Response_starGenType type
type MoqResponse_starGenType_Location_anyParams struct {
	Recorder *MoqResponse_starGenType_Location_fnRecorder
}

// MoqResponse_starGenType_ProtoAtLeast_params holds the params of the
// Response_starGenType type
type MoqResponse_starGenType_ProtoAtLeast_params struct{ Major, Minor int }

// MoqResponse_starGenType_ProtoAtLeast_paramsKey holds the map key params of
// the Response_starGenType type
type MoqResponse_starGenType_ProtoAtLeast_paramsKey struct {
	Params struct{ Major, Minor int }
	Hashes struct{ Major, Minor hash.Hash }
}

// MoqResponse_starGenType_ProtoAtLeast_resultsByParams contains the results
// for a given set of parameters for the Response_starGenType type
type MoqResponse_starGenType_ProtoAtLeast_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqResponse_starGenType_ProtoAtLeast_paramsKey]*MoqResponse_starGenType_ProtoAtLeast_results
}

// MoqResponse_starGenType_ProtoAtLeast_doFn defines the type of function
// needed when calling AndDo for the Response_starGenType type
type MoqResponse_starGenType_ProtoAtLeast_doFn func(major, minor int)

// MoqResponse_starGenType_ProtoAtLeast_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Response_starGenType type
type MoqResponse_starGenType_ProtoAtLeast_doReturnFn func(major, minor int) bool

// MoqResponse_starGenType_ProtoAtLeast_results holds the results of the
// Response_starGenType type
type MoqResponse_starGenType_ProtoAtLeast_results struct {
	Params  MoqResponse_starGenType_ProtoAtLeast_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqResponse_starGenType_ProtoAtLeast_doFn
		DoReturnFn MoqResponse_starGenType_ProtoAtLeast_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqResponse_starGenType_ProtoAtLeast_fnRecorder routes recorded function
// calls to the MoqResponse_starGenType moq
type MoqResponse_starGenType_ProtoAtLeast_fnRecorder struct {
	Params    MoqResponse_starGenType_ProtoAtLeast_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqResponse_starGenType_ProtoAtLeast_results
	Moq       *MoqResponse_starGenType
}

// MoqResponse_starGenType_ProtoAtLeast_anyParams isolates the any params
// functions of the Response_starGenType type
type MoqResponse_starGenType_ProtoAtLeast_anyParams struct {
	Recorder *MoqResponse_starGenType_ProtoAtLeast_fnRecorder
}

// MoqResponse_starGenType_Write_params holds the params of the
// Response_starGenType type
type MoqResponse_starGenType_Write_params struct{ W io.Writer }

// MoqResponse_starGenType_Write_paramsKey holds the map key params of the
// Response_starGenType type
type MoqResponse_starGenType_Write_paramsKey struct {
	Params struct{ W io.Writer }
	Hashes struct{ W hash.Hash }
}

// MoqResponse_starGenType_Write_resultsByParams contains the results for a
// given set of parameters for the Response_starGenType type
type MoqResponse_starGenType_Write_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqResponse_starGenType_Write_paramsKey]*MoqResponse_starGenType_Write_results
}

// MoqResponse_starGenType_Write_doFn defines the type of function needed when
// calling AndDo for the Response_starGenType type
type MoqResponse_starGenType_Write_doFn func(w io.Writer)

// MoqResponse_starGenType_Write_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Response_starGenType type
type MoqResponse_starGenType_Write_doReturnFn func(w io.Writer) error

// MoqResponse_starGenType_Write_results holds the results of the
// Response_starGenType type
type MoqResponse_starGenType_Write_results struct {
	Params  MoqResponse_starGenType_Write_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqResponse_starGenType_Write_doFn
		DoReturnFn MoqResponse_starGenType_Write_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqResponse_starGenType_Write_fnRecorder routes recorded function calls to
// the MoqResponse_starGenType moq
type MoqResponse_starGenType_Write_fnRecorder struct {
	Params    MoqResponse_starGenType_Write_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqResponse_starGenType_Write_results
	Moq       *MoqResponse_starGenType
}

// MoqResponse_starGenType_Write_anyParams isolates the any params functions of
// the Response_starGenType type
type MoqResponse_starGenType_Write_anyParams struct {
	Recorder *MoqResponse_starGenType_Write_fnRecorder
}

// NewMoqResponse_starGenType creates a new moq of the Response_starGenType
// type
func NewMoqResponse_starGenType(scene *moq.Scene, config *moq.Config) *MoqResponse_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqResponse_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqResponse_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Cookies      struct{}
				Location     struct{}
				ProtoAtLeast struct {
					Major moq.ParamIndexing
					Minor moq.ParamIndexing
				}
				Write struct {
					W moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Cookies      struct{}
			Location     struct{}
			ProtoAtLeast struct {
				Major moq.ParamIndexing
				Minor moq.ParamIndexing
			}
			Write struct {
				W moq.ParamIndexing
			}
		}{
			Cookies:  struct{}{},
			Location: struct{}{},
			ProtoAtLeast: struct {
				Major moq.ParamIndexing
				Minor moq.ParamIndexing
			}{
				Major: moq.ParamIndexByValue,
				Minor: moq.ParamIndexByValue,
			},
			Write: struct {
				W moq.ParamIndexing
			}{
				W: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Response_starGenType type
func (m *MoqResponse_starGenType) Mock() *MoqResponse_starGenType_mock { return m.Moq }

func (m *MoqResponse_starGenType_mock) Cookies() (result1 []*http.Cookie) {
	m.Moq.Scene.T.Helper()
	params := MoqResponse_starGenType_Cookies_params{}
	var results *MoqResponse_starGenType_Cookies_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Cookies {
		paramsKey := m.Moq.ParamsKey_Cookies(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Cookies(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Cookies(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Cookies(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqResponse_starGenType_mock) Location() (result1 *url.URL, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqResponse_starGenType_Location_params{}
	var results *MoqResponse_starGenType_Location_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Location {
		paramsKey := m.Moq.ParamsKey_Location(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Location(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Location(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Location(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqResponse_starGenType_mock) ProtoAtLeast(major, minor int) (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqResponse_starGenType_ProtoAtLeast_params{
		Major: major,
		Minor: minor,
	}
	var results *MoqResponse_starGenType_ProtoAtLeast_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ProtoAtLeast {
		paramsKey := m.Moq.ParamsKey_ProtoAtLeast(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ProtoAtLeast(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ProtoAtLeast(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ProtoAtLeast(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(major, minor)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(major, minor)
	}
	return
}

func (m *MoqResponse_starGenType_mock) Write(w io.Writer) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqResponse_starGenType_Write_params{
		W: w,
	}
	var results *MoqResponse_starGenType_Write_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Write {
		paramsKey := m.Moq.ParamsKey_Write(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Write(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Write(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Write(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(w)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(w)
	}
	return
}

// OnCall returns the recorder implementation of the Response_starGenType type
func (m *MoqResponse_starGenType) OnCall() *MoqResponse_starGenType_recorder {
	return &MoqResponse_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqResponse_starGenType_recorder) Cookies() *MoqResponse_starGenType_Cookies_fnRecorder {
	return &MoqResponse_starGenType_Cookies_fnRecorder{
		Params:   MoqResponse_starGenType_Cookies_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqResponse_starGenType_Cookies_fnRecorder) Any() *MoqResponse_starGenType_Cookies_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Cookies(r.Params))
		return nil
	}
	return &MoqResponse_starGenType_Cookies_anyParams{Recorder: r}
}

func (r *MoqResponse_starGenType_Cookies_fnRecorder) Seq() *MoqResponse_starGenType_Cookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Cookies(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqResponse_starGenType_Cookies_fnRecorder) NoSeq() *MoqResponse_starGenType_Cookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Cookies(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqResponse_starGenType_Cookies_fnRecorder) ReturnResults(result1 []*http.Cookie) *MoqResponse_starGenType_Cookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []*http.Cookie
		}
		Sequence   uint32
		DoFn       MoqResponse_starGenType_Cookies_doFn
		DoReturnFn MoqResponse_starGenType_Cookies_doReturnFn
	}{
		Values: &struct {
			Result1 []*http.Cookie
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqResponse_starGenType_Cookies_fnRecorder) AndDo(fn MoqResponse_starGenType_Cookies_doFn) *MoqResponse_starGenType_Cookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqResponse_starGenType_Cookies_fnRecorder) DoReturnResults(fn MoqResponse_starGenType_Cookies_doReturnFn) *MoqResponse_starGenType_Cookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []*http.Cookie
		}
		Sequence   uint32
		DoFn       MoqResponse_starGenType_Cookies_doFn
		DoReturnFn MoqResponse_starGenType_Cookies_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqResponse_starGenType_Cookies_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqResponse_starGenType_Cookies_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Cookies {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqResponse_starGenType_Cookies_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqResponse_starGenType_Cookies_paramsKey]*MoqResponse_starGenType_Cookies_results{},
		}
		r.Moq.ResultsByParams_Cookies = append(r.Moq.ResultsByParams_Cookies, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Cookies) {
			copy(r.Moq.ResultsByParams_Cookies[insertAt+1:], r.Moq.ResultsByParams_Cookies[insertAt:0])
			r.Moq.ResultsByParams_Cookies[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Cookies(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqResponse_starGenType_Cookies_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqResponse_starGenType_Cookies_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqResponse_starGenType_Cookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []*http.Cookie
				}
				Sequence   uint32
				DoFn       MoqResponse_starGenType_Cookies_doFn
				DoReturnFn MoqResponse_starGenType_Cookies_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqResponse_starGenType) PrettyParams_Cookies(params MoqResponse_starGenType_Cookies_params) string {
	return fmt.Sprintf("Cookies()")
}

func (m *MoqResponse_starGenType) ParamsKey_Cookies(params MoqResponse_starGenType_Cookies_params, anyParams uint64) MoqResponse_starGenType_Cookies_paramsKey {
	m.Scene.T.Helper()
	return MoqResponse_starGenType_Cookies_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqResponse_starGenType_recorder) Location() *MoqResponse_starGenType_Location_fnRecorder {
	return &MoqResponse_starGenType_Location_fnRecorder{
		Params:   MoqResponse_starGenType_Location_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqResponse_starGenType_Location_fnRecorder) Any() *MoqResponse_starGenType_Location_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Location(r.Params))
		return nil
	}
	return &MoqResponse_starGenType_Location_anyParams{Recorder: r}
}

func (r *MoqResponse_starGenType_Location_fnRecorder) Seq() *MoqResponse_starGenType_Location_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Location(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqResponse_starGenType_Location_fnRecorder) NoSeq() *MoqResponse_starGenType_Location_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Location(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqResponse_starGenType_Location_fnRecorder) ReturnResults(result1 *url.URL, result2 error) *MoqResponse_starGenType_Location_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *url.URL
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqResponse_starGenType_Location_doFn
		DoReturnFn MoqResponse_starGenType_Location_doReturnFn
	}{
		Values: &struct {
			Result1 *url.URL
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqResponse_starGenType_Location_fnRecorder) AndDo(fn MoqResponse_starGenType_Location_doFn) *MoqResponse_starGenType_Location_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqResponse_starGenType_Location_fnRecorder) DoReturnResults(fn MoqResponse_starGenType_Location_doReturnFn) *MoqResponse_starGenType_Location_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *url.URL
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqResponse_starGenType_Location_doFn
		DoReturnFn MoqResponse_starGenType_Location_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqResponse_starGenType_Location_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqResponse_starGenType_Location_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Location {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqResponse_starGenType_Location_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqResponse_starGenType_Location_paramsKey]*MoqResponse_starGenType_Location_results{},
		}
		r.Moq.ResultsByParams_Location = append(r.Moq.ResultsByParams_Location, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Location) {
			copy(r.Moq.ResultsByParams_Location[insertAt+1:], r.Moq.ResultsByParams_Location[insertAt:0])
			r.Moq.ResultsByParams_Location[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Location(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqResponse_starGenType_Location_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqResponse_starGenType_Location_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqResponse_starGenType_Location_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *url.URL
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqResponse_starGenType_Location_doFn
				DoReturnFn MoqResponse_starGenType_Location_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqResponse_starGenType) PrettyParams_Location(params MoqResponse_starGenType_Location_params) string {
	return fmt.Sprintf("Location()")
}

func (m *MoqResponse_starGenType) ParamsKey_Location(params MoqResponse_starGenType_Location_params, anyParams uint64) MoqResponse_starGenType_Location_paramsKey {
	m.Scene.T.Helper()
	return MoqResponse_starGenType_Location_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqResponse_starGenType_recorder) ProtoAtLeast(major, minor int) *MoqResponse_starGenType_ProtoAtLeast_fnRecorder {
	return &MoqResponse_starGenType_ProtoAtLeast_fnRecorder{
		Params: MoqResponse_starGenType_ProtoAtLeast_params{
			Major: major,
			Minor: minor,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqResponse_starGenType_ProtoAtLeast_fnRecorder) Any() *MoqResponse_starGenType_ProtoAtLeast_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ProtoAtLeast(r.Params))
		return nil
	}
	return &MoqResponse_starGenType_ProtoAtLeast_anyParams{Recorder: r}
}

func (a *MoqResponse_starGenType_ProtoAtLeast_anyParams) Major() *MoqResponse_starGenType_ProtoAtLeast_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqResponse_starGenType_ProtoAtLeast_anyParams) Minor() *MoqResponse_starGenType_ProtoAtLeast_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqResponse_starGenType_ProtoAtLeast_fnRecorder) Seq() *MoqResponse_starGenType_ProtoAtLeast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ProtoAtLeast(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqResponse_starGenType_ProtoAtLeast_fnRecorder) NoSeq() *MoqResponse_starGenType_ProtoAtLeast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ProtoAtLeast(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqResponse_starGenType_ProtoAtLeast_fnRecorder) ReturnResults(result1 bool) *MoqResponse_starGenType_ProtoAtLeast_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqResponse_starGenType_ProtoAtLeast_doFn
		DoReturnFn MoqResponse_starGenType_ProtoAtLeast_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqResponse_starGenType_ProtoAtLeast_fnRecorder) AndDo(fn MoqResponse_starGenType_ProtoAtLeast_doFn) *MoqResponse_starGenType_ProtoAtLeast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqResponse_starGenType_ProtoAtLeast_fnRecorder) DoReturnResults(fn MoqResponse_starGenType_ProtoAtLeast_doReturnFn) *MoqResponse_starGenType_ProtoAtLeast_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqResponse_starGenType_ProtoAtLeast_doFn
		DoReturnFn MoqResponse_starGenType_ProtoAtLeast_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqResponse_starGenType_ProtoAtLeast_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqResponse_starGenType_ProtoAtLeast_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ProtoAtLeast {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqResponse_starGenType_ProtoAtLeast_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqResponse_starGenType_ProtoAtLeast_paramsKey]*MoqResponse_starGenType_ProtoAtLeast_results{},
		}
		r.Moq.ResultsByParams_ProtoAtLeast = append(r.Moq.ResultsByParams_ProtoAtLeast, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ProtoAtLeast) {
			copy(r.Moq.ResultsByParams_ProtoAtLeast[insertAt+1:], r.Moq.ResultsByParams_ProtoAtLeast[insertAt:0])
			r.Moq.ResultsByParams_ProtoAtLeast[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ProtoAtLeast(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqResponse_starGenType_ProtoAtLeast_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqResponse_starGenType_ProtoAtLeast_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqResponse_starGenType_ProtoAtLeast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqResponse_starGenType_ProtoAtLeast_doFn
				DoReturnFn MoqResponse_starGenType_ProtoAtLeast_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqResponse_starGenType) PrettyParams_ProtoAtLeast(params MoqResponse_starGenType_ProtoAtLeast_params) string {
	return fmt.Sprintf("ProtoAtLeast(%#v, %#v)", params.Major, params.Minor)
}

func (m *MoqResponse_starGenType) ParamsKey_ProtoAtLeast(params MoqResponse_starGenType_ProtoAtLeast_params, anyParams uint64) MoqResponse_starGenType_ProtoAtLeast_paramsKey {
	m.Scene.T.Helper()
	var majorUsed int
	var majorUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ProtoAtLeast.Major == moq.ParamIndexByValue {
			majorUsed = params.Major
		} else {
			majorUsedHash = hash.DeepHash(params.Major)
		}
	}
	var minorUsed int
	var minorUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.ProtoAtLeast.Minor == moq.ParamIndexByValue {
			minorUsed = params.Minor
		} else {
			minorUsedHash = hash.DeepHash(params.Minor)
		}
	}
	return MoqResponse_starGenType_ProtoAtLeast_paramsKey{
		Params: struct{ Major, Minor int }{
			Major: majorUsed,
			Minor: minorUsed,
		},
		Hashes: struct{ Major, Minor hash.Hash }{
			Major: majorUsedHash,
			Minor: minorUsedHash,
		},
	}
}

func (m *MoqResponse_starGenType_recorder) Write(w io.Writer) *MoqResponse_starGenType_Write_fnRecorder {
	return &MoqResponse_starGenType_Write_fnRecorder{
		Params: MoqResponse_starGenType_Write_params{
			W: w,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqResponse_starGenType_Write_fnRecorder) Any() *MoqResponse_starGenType_Write_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	return &MoqResponse_starGenType_Write_anyParams{Recorder: r}
}

func (a *MoqResponse_starGenType_Write_anyParams) W() *MoqResponse_starGenType_Write_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqResponse_starGenType_Write_fnRecorder) Seq() *MoqResponse_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqResponse_starGenType_Write_fnRecorder) NoSeq() *MoqResponse_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqResponse_starGenType_Write_fnRecorder) ReturnResults(result1 error) *MoqResponse_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqResponse_starGenType_Write_doFn
		DoReturnFn MoqResponse_starGenType_Write_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqResponse_starGenType_Write_fnRecorder) AndDo(fn MoqResponse_starGenType_Write_doFn) *MoqResponse_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqResponse_starGenType_Write_fnRecorder) DoReturnResults(fn MoqResponse_starGenType_Write_doReturnFn) *MoqResponse_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqResponse_starGenType_Write_doFn
		DoReturnFn MoqResponse_starGenType_Write_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqResponse_starGenType_Write_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqResponse_starGenType_Write_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Write {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqResponse_starGenType_Write_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqResponse_starGenType_Write_paramsKey]*MoqResponse_starGenType_Write_results{},
		}
		r.Moq.ResultsByParams_Write = append(r.Moq.ResultsByParams_Write, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Write) {
			copy(r.Moq.ResultsByParams_Write[insertAt+1:], r.Moq.ResultsByParams_Write[insertAt:0])
			r.Moq.ResultsByParams_Write[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Write(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqResponse_starGenType_Write_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqResponse_starGenType_Write_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqResponse_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqResponse_starGenType_Write_doFn
				DoReturnFn MoqResponse_starGenType_Write_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqResponse_starGenType) PrettyParams_Write(params MoqResponse_starGenType_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.W)
}

func (m *MoqResponse_starGenType) ParamsKey_Write(params MoqResponse_starGenType_Write_params, anyParams uint64) MoqResponse_starGenType_Write_paramsKey {
	m.Scene.T.Helper()
	var wUsed io.Writer
	var wUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Write.W == moq.ParamIndexByValue {
			wUsed = params.W
		} else {
			wUsedHash = hash.DeepHash(params.W)
		}
	}
	return MoqResponse_starGenType_Write_paramsKey{
		Params: struct{ W io.Writer }{
			W: wUsed,
		},
		Hashes: struct{ W hash.Hash }{
			W: wUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqResponse_starGenType) Reset() {
	m.ResultsByParams_Cookies = nil
	m.ResultsByParams_Location = nil
	m.ResultsByParams_ProtoAtLeast = nil
	m.ResultsByParams_Write = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqResponse_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Cookies {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Cookies(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Location {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Location(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ProtoAtLeast {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ProtoAtLeast(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Write {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Write(results.Params))
			}
		}
	}
}
