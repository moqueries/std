// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package http

import (
	"fmt"
	"io"
	"math/bits"
	"net/http"
	"net/url"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that http.Client_starGenType is mocked
// completely
var _ Client_starGenType = (*MoqClient_starGenType_mock)(nil)

// Client_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Client_starGenType interface {
	Get(url string) (resp *http.Response, err error)
	Do(req *http.Request) (*http.Response, error)
	Post(url, contentType string, body io.Reader) (resp *http.Response, err error)
	PostForm(url string, data url.Values) (resp *http.Response, err error)
	Head(url string) (resp *http.Response, err error)
	CloseIdleConnections()
}

// MoqClient_starGenType holds the state of a moq of the Client_starGenType
// type
type MoqClient_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqClient_starGenType_mock

	ResultsByParams_Get                  []MoqClient_starGenType_Get_resultsByParams
	ResultsByParams_Do                   []MoqClient_starGenType_Do_resultsByParams
	ResultsByParams_Post                 []MoqClient_starGenType_Post_resultsByParams
	ResultsByParams_PostForm             []MoqClient_starGenType_PostForm_resultsByParams
	ResultsByParams_Head                 []MoqClient_starGenType_Head_resultsByParams
	ResultsByParams_CloseIdleConnections []MoqClient_starGenType_CloseIdleConnections_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Get struct {
				Url moq.ParamIndexing
			}
			Do struct {
				Req moq.ParamIndexing
			}
			Post struct {
				Url         moq.ParamIndexing
				ContentType moq.ParamIndexing
				Body        moq.ParamIndexing
			}
			PostForm struct {
				Url  moq.ParamIndexing
				Data moq.ParamIndexing
			}
			Head struct {
				Url moq.ParamIndexing
			}
			CloseIdleConnections struct{}
		}
	}
}

// MoqClient_starGenType_mock isolates the mock interface of the
// Client_starGenType type
type MoqClient_starGenType_mock struct {
	Moq *MoqClient_starGenType
}

// MoqClient_starGenType_recorder isolates the recorder interface of the
// Client_starGenType type
type MoqClient_starGenType_recorder struct {
	Moq *MoqClient_starGenType
}

// MoqClient_starGenType_Get_params holds the params of the Client_starGenType
// type
type MoqClient_starGenType_Get_params struct{ Url string }

// MoqClient_starGenType_Get_paramsKey holds the map key params of the
// Client_starGenType type
type MoqClient_starGenType_Get_paramsKey struct {
	Params struct{ Url string }
	Hashes struct{ Url hash.Hash }
}

// MoqClient_starGenType_Get_resultsByParams contains the results for a given
// set of parameters for the Client_starGenType type
type MoqClient_starGenType_Get_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqClient_starGenType_Get_paramsKey]*MoqClient_starGenType_Get_results
}

// MoqClient_starGenType_Get_doFn defines the type of function needed when
// calling AndDo for the Client_starGenType type
type MoqClient_starGenType_Get_doFn func(url string)

// MoqClient_starGenType_Get_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Client_starGenType type
type MoqClient_starGenType_Get_doReturnFn func(url string) (resp *http.Response, err error)

// MoqClient_starGenType_Get_results holds the results of the
// Client_starGenType type
type MoqClient_starGenType_Get_results struct {
	Params  MoqClient_starGenType_Get_params
	Results []struct {
		Values *struct {
			Resp *http.Response
			Err  error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Get_doFn
		DoReturnFn MoqClient_starGenType_Get_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqClient_starGenType_Get_fnRecorder routes recorded function calls to the
// MoqClient_starGenType moq
type MoqClient_starGenType_Get_fnRecorder struct {
	Params    MoqClient_starGenType_Get_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqClient_starGenType_Get_results
	Moq       *MoqClient_starGenType
}

// MoqClient_starGenType_Get_anyParams isolates the any params functions of the
// Client_starGenType type
type MoqClient_starGenType_Get_anyParams struct {
	Recorder *MoqClient_starGenType_Get_fnRecorder
}

// MoqClient_starGenType_Do_params holds the params of the Client_starGenType
// type
type MoqClient_starGenType_Do_params struct{ Req *http.Request }

// MoqClient_starGenType_Do_paramsKey holds the map key params of the
// Client_starGenType type
type MoqClient_starGenType_Do_paramsKey struct {
	Params struct{ Req *http.Request }
	Hashes struct{ Req hash.Hash }
}

// MoqClient_starGenType_Do_resultsByParams contains the results for a given
// set of parameters for the Client_starGenType type
type MoqClient_starGenType_Do_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqClient_starGenType_Do_paramsKey]*MoqClient_starGenType_Do_results
}

// MoqClient_starGenType_Do_doFn defines the type of function needed when
// calling AndDo for the Client_starGenType type
type MoqClient_starGenType_Do_doFn func(req *http.Request)

// MoqClient_starGenType_Do_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Client_starGenType type
type MoqClient_starGenType_Do_doReturnFn func(req *http.Request) (*http.Response, error)

// MoqClient_starGenType_Do_results holds the results of the Client_starGenType
// type
type MoqClient_starGenType_Do_results struct {
	Params  MoqClient_starGenType_Do_params
	Results []struct {
		Values *struct {
			Result1 *http.Response
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Do_doFn
		DoReturnFn MoqClient_starGenType_Do_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqClient_starGenType_Do_fnRecorder routes recorded function calls to the
// MoqClient_starGenType moq
type MoqClient_starGenType_Do_fnRecorder struct {
	Params    MoqClient_starGenType_Do_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqClient_starGenType_Do_results
	Moq       *MoqClient_starGenType
}

// MoqClient_starGenType_Do_anyParams isolates the any params functions of the
// Client_starGenType type
type MoqClient_starGenType_Do_anyParams struct {
	Recorder *MoqClient_starGenType_Do_fnRecorder
}

// MoqClient_starGenType_Post_params holds the params of the Client_starGenType
// type
type MoqClient_starGenType_Post_params struct {
	Url, ContentType string
	Body             io.Reader
}

// MoqClient_starGenType_Post_paramsKey holds the map key params of the
// Client_starGenType type
type MoqClient_starGenType_Post_paramsKey struct {
	Params struct {
		Url, ContentType string
		Body             io.Reader
	}
	Hashes struct {
		Url, ContentType hash.Hash
		Body             hash.Hash
	}
}

// MoqClient_starGenType_Post_resultsByParams contains the results for a given
// set of parameters for the Client_starGenType type
type MoqClient_starGenType_Post_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqClient_starGenType_Post_paramsKey]*MoqClient_starGenType_Post_results
}

// MoqClient_starGenType_Post_doFn defines the type of function needed when
// calling AndDo for the Client_starGenType type
type MoqClient_starGenType_Post_doFn func(url, contentType string, body io.Reader)

// MoqClient_starGenType_Post_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Client_starGenType type
type MoqClient_starGenType_Post_doReturnFn func(url, contentType string, body io.Reader) (resp *http.Response, err error)

// MoqClient_starGenType_Post_results holds the results of the
// Client_starGenType type
type MoqClient_starGenType_Post_results struct {
	Params  MoqClient_starGenType_Post_params
	Results []struct {
		Values *struct {
			Resp *http.Response
			Err  error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Post_doFn
		DoReturnFn MoqClient_starGenType_Post_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqClient_starGenType_Post_fnRecorder routes recorded function calls to the
// MoqClient_starGenType moq
type MoqClient_starGenType_Post_fnRecorder struct {
	Params    MoqClient_starGenType_Post_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqClient_starGenType_Post_results
	Moq       *MoqClient_starGenType
}

// MoqClient_starGenType_Post_anyParams isolates the any params functions of
// the Client_starGenType type
type MoqClient_starGenType_Post_anyParams struct {
	Recorder *MoqClient_starGenType_Post_fnRecorder
}

// MoqClient_starGenType_PostForm_params holds the params of the
// Client_starGenType type
type MoqClient_starGenType_PostForm_params struct {
	Url  string
	Data url.Values
}

// MoqClient_starGenType_PostForm_paramsKey holds the map key params of the
// Client_starGenType type
type MoqClient_starGenType_PostForm_paramsKey struct {
	Params struct{ Url string }
	Hashes struct {
		Url  hash.Hash
		Data hash.Hash
	}
}

// MoqClient_starGenType_PostForm_resultsByParams contains the results for a
// given set of parameters for the Client_starGenType type
type MoqClient_starGenType_PostForm_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqClient_starGenType_PostForm_paramsKey]*MoqClient_starGenType_PostForm_results
}

// MoqClient_starGenType_PostForm_doFn defines the type of function needed when
// calling AndDo for the Client_starGenType type
type MoqClient_starGenType_PostForm_doFn func(url string, data url.Values)

// MoqClient_starGenType_PostForm_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Client_starGenType type
type MoqClient_starGenType_PostForm_doReturnFn func(url string, data url.Values) (resp *http.Response, err error)

// MoqClient_starGenType_PostForm_results holds the results of the
// Client_starGenType type
type MoqClient_starGenType_PostForm_results struct {
	Params  MoqClient_starGenType_PostForm_params
	Results []struct {
		Values *struct {
			Resp *http.Response
			Err  error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_PostForm_doFn
		DoReturnFn MoqClient_starGenType_PostForm_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqClient_starGenType_PostForm_fnRecorder routes recorded function calls to
// the MoqClient_starGenType moq
type MoqClient_starGenType_PostForm_fnRecorder struct {
	Params    MoqClient_starGenType_PostForm_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqClient_starGenType_PostForm_results
	Moq       *MoqClient_starGenType
}

// MoqClient_starGenType_PostForm_anyParams isolates the any params functions
// of the Client_starGenType type
type MoqClient_starGenType_PostForm_anyParams struct {
	Recorder *MoqClient_starGenType_PostForm_fnRecorder
}

// MoqClient_starGenType_Head_params holds the params of the Client_starGenType
// type
type MoqClient_starGenType_Head_params struct{ Url string }

// MoqClient_starGenType_Head_paramsKey holds the map key params of the
// Client_starGenType type
type MoqClient_starGenType_Head_paramsKey struct {
	Params struct{ Url string }
	Hashes struct{ Url hash.Hash }
}

// MoqClient_starGenType_Head_resultsByParams contains the results for a given
// set of parameters for the Client_starGenType type
type MoqClient_starGenType_Head_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqClient_starGenType_Head_paramsKey]*MoqClient_starGenType_Head_results
}

// MoqClient_starGenType_Head_doFn defines the type of function needed when
// calling AndDo for the Client_starGenType type
type MoqClient_starGenType_Head_doFn func(url string)

// MoqClient_starGenType_Head_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Client_starGenType type
type MoqClient_starGenType_Head_doReturnFn func(url string) (resp *http.Response, err error)

// MoqClient_starGenType_Head_results holds the results of the
// Client_starGenType type
type MoqClient_starGenType_Head_results struct {
	Params  MoqClient_starGenType_Head_params
	Results []struct {
		Values *struct {
			Resp *http.Response
			Err  error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Head_doFn
		DoReturnFn MoqClient_starGenType_Head_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqClient_starGenType_Head_fnRecorder routes recorded function calls to the
// MoqClient_starGenType moq
type MoqClient_starGenType_Head_fnRecorder struct {
	Params    MoqClient_starGenType_Head_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqClient_starGenType_Head_results
	Moq       *MoqClient_starGenType
}

// MoqClient_starGenType_Head_anyParams isolates the any params functions of
// the Client_starGenType type
type MoqClient_starGenType_Head_anyParams struct {
	Recorder *MoqClient_starGenType_Head_fnRecorder
}

// MoqClient_starGenType_CloseIdleConnections_params holds the params of the
// Client_starGenType type
type MoqClient_starGenType_CloseIdleConnections_params struct{}

// MoqClient_starGenType_CloseIdleConnections_paramsKey holds the map key
// params of the Client_starGenType type
type MoqClient_starGenType_CloseIdleConnections_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqClient_starGenType_CloseIdleConnections_resultsByParams contains the
// results for a given set of parameters for the Client_starGenType type
type MoqClient_starGenType_CloseIdleConnections_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqClient_starGenType_CloseIdleConnections_paramsKey]*MoqClient_starGenType_CloseIdleConnections_results
}

// MoqClient_starGenType_CloseIdleConnections_doFn defines the type of function
// needed when calling AndDo for the Client_starGenType type
type MoqClient_starGenType_CloseIdleConnections_doFn func()

// MoqClient_starGenType_CloseIdleConnections_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Client_starGenType type
type MoqClient_starGenType_CloseIdleConnections_doReturnFn func()

// MoqClient_starGenType_CloseIdleConnections_results holds the results of the
// Client_starGenType type
type MoqClient_starGenType_CloseIdleConnections_results struct {
	Params  MoqClient_starGenType_CloseIdleConnections_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqClient_starGenType_CloseIdleConnections_doFn
		DoReturnFn MoqClient_starGenType_CloseIdleConnections_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqClient_starGenType_CloseIdleConnections_fnRecorder routes recorded
// function calls to the MoqClient_starGenType moq
type MoqClient_starGenType_CloseIdleConnections_fnRecorder struct {
	Params    MoqClient_starGenType_CloseIdleConnections_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqClient_starGenType_CloseIdleConnections_results
	Moq       *MoqClient_starGenType
}

// MoqClient_starGenType_CloseIdleConnections_anyParams isolates the any params
// functions of the Client_starGenType type
type MoqClient_starGenType_CloseIdleConnections_anyParams struct {
	Recorder *MoqClient_starGenType_CloseIdleConnections_fnRecorder
}

// NewMoqClient_starGenType creates a new moq of the Client_starGenType type
func NewMoqClient_starGenType(scene *moq.Scene, config *moq.Config) *MoqClient_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqClient_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqClient_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Get struct {
					Url moq.ParamIndexing
				}
				Do struct {
					Req moq.ParamIndexing
				}
				Post struct {
					Url         moq.ParamIndexing
					ContentType moq.ParamIndexing
					Body        moq.ParamIndexing
				}
				PostForm struct {
					Url  moq.ParamIndexing
					Data moq.ParamIndexing
				}
				Head struct {
					Url moq.ParamIndexing
				}
				CloseIdleConnections struct{}
			}
		}{ParameterIndexing: struct {
			Get struct {
				Url moq.ParamIndexing
			}
			Do struct {
				Req moq.ParamIndexing
			}
			Post struct {
				Url         moq.ParamIndexing
				ContentType moq.ParamIndexing
				Body        moq.ParamIndexing
			}
			PostForm struct {
				Url  moq.ParamIndexing
				Data moq.ParamIndexing
			}
			Head struct {
				Url moq.ParamIndexing
			}
			CloseIdleConnections struct{}
		}{
			Get: struct {
				Url moq.ParamIndexing
			}{
				Url: moq.ParamIndexByValue,
			},
			Do: struct {
				Req moq.ParamIndexing
			}{
				Req: moq.ParamIndexByHash,
			},
			Post: struct {
				Url         moq.ParamIndexing
				ContentType moq.ParamIndexing
				Body        moq.ParamIndexing
			}{
				Url:         moq.ParamIndexByValue,
				ContentType: moq.ParamIndexByValue,
				Body:        moq.ParamIndexByHash,
			},
			PostForm: struct {
				Url  moq.ParamIndexing
				Data moq.ParamIndexing
			}{
				Url:  moq.ParamIndexByValue,
				Data: moq.ParamIndexByHash,
			},
			Head: struct {
				Url moq.ParamIndexing
			}{
				Url: moq.ParamIndexByValue,
			},
			CloseIdleConnections: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Client_starGenType type
func (m *MoqClient_starGenType) Mock() *MoqClient_starGenType_mock { return m.Moq }

func (m *MoqClient_starGenType_mock) Get(url string) (resp *http.Response, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqClient_starGenType_Get_params{
		Url: url,
	}
	var results *MoqClient_starGenType_Get_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Get {
		paramsKey := m.Moq.ParamsKey_Get(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Get(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Get(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Get(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(url)
	}

	if result.Values != nil {
		resp = result.Values.Resp
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		resp, err = result.DoReturnFn(url)
	}
	return
}

func (m *MoqClient_starGenType_mock) Do(req *http.Request) (result1 *http.Response, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqClient_starGenType_Do_params{
		Req: req,
	}
	var results *MoqClient_starGenType_Do_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Do {
		paramsKey := m.Moq.ParamsKey_Do(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Do(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Do(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Do(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(req)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(req)
	}
	return
}

func (m *MoqClient_starGenType_mock) Post(url, contentType string, body io.Reader) (resp *http.Response, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqClient_starGenType_Post_params{
		Url:         url,
		ContentType: contentType,
		Body:        body,
	}
	var results *MoqClient_starGenType_Post_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Post {
		paramsKey := m.Moq.ParamsKey_Post(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Post(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Post(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Post(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(url, contentType, body)
	}

	if result.Values != nil {
		resp = result.Values.Resp
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		resp, err = result.DoReturnFn(url, contentType, body)
	}
	return
}

func (m *MoqClient_starGenType_mock) PostForm(url string, data url.Values) (resp *http.Response, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqClient_starGenType_PostForm_params{
		Url:  url,
		Data: data,
	}
	var results *MoqClient_starGenType_PostForm_results
	for _, resultsByParams := range m.Moq.ResultsByParams_PostForm {
		paramsKey := m.Moq.ParamsKey_PostForm(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_PostForm(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_PostForm(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_PostForm(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(url, data)
	}

	if result.Values != nil {
		resp = result.Values.Resp
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		resp, err = result.DoReturnFn(url, data)
	}
	return
}

func (m *MoqClient_starGenType_mock) Head(url string) (resp *http.Response, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqClient_starGenType_Head_params{
		Url: url,
	}
	var results *MoqClient_starGenType_Head_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Head {
		paramsKey := m.Moq.ParamsKey_Head(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Head(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Head(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Head(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(url)
	}

	if result.Values != nil {
		resp = result.Values.Resp
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		resp, err = result.DoReturnFn(url)
	}
	return
}

func (m *MoqClient_starGenType_mock) CloseIdleConnections() {
	m.Moq.Scene.T.Helper()
	params := MoqClient_starGenType_CloseIdleConnections_params{}
	var results *MoqClient_starGenType_CloseIdleConnections_results
	for _, resultsByParams := range m.Moq.ResultsByParams_CloseIdleConnections {
		paramsKey := m.Moq.ParamsKey_CloseIdleConnections(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_CloseIdleConnections(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_CloseIdleConnections(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_CloseIdleConnections(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Client_starGenType type
func (m *MoqClient_starGenType) OnCall() *MoqClient_starGenType_recorder {
	return &MoqClient_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqClient_starGenType_recorder) Get(url string) *MoqClient_starGenType_Get_fnRecorder {
	return &MoqClient_starGenType_Get_fnRecorder{
		Params: MoqClient_starGenType_Get_params{
			Url: url,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqClient_starGenType_Get_fnRecorder) Any() *MoqClient_starGenType_Get_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Get(r.Params))
		return nil
	}
	return &MoqClient_starGenType_Get_anyParams{Recorder: r}
}

func (a *MoqClient_starGenType_Get_anyParams) Url() *MoqClient_starGenType_Get_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqClient_starGenType_Get_fnRecorder) Seq() *MoqClient_starGenType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Get(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqClient_starGenType_Get_fnRecorder) NoSeq() *MoqClient_starGenType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Get(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqClient_starGenType_Get_fnRecorder) ReturnResults(resp *http.Response, err error) *MoqClient_starGenType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Resp *http.Response
			Err  error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Get_doFn
		DoReturnFn MoqClient_starGenType_Get_doReturnFn
	}{
		Values: &struct {
			Resp *http.Response
			Err  error
		}{
			Resp: resp,
			Err:  err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqClient_starGenType_Get_fnRecorder) AndDo(fn MoqClient_starGenType_Get_doFn) *MoqClient_starGenType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqClient_starGenType_Get_fnRecorder) DoReturnResults(fn MoqClient_starGenType_Get_doReturnFn) *MoqClient_starGenType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Resp *http.Response
			Err  error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Get_doFn
		DoReturnFn MoqClient_starGenType_Get_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqClient_starGenType_Get_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqClient_starGenType_Get_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Get {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqClient_starGenType_Get_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqClient_starGenType_Get_paramsKey]*MoqClient_starGenType_Get_results{},
		}
		r.Moq.ResultsByParams_Get = append(r.Moq.ResultsByParams_Get, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Get) {
			copy(r.Moq.ResultsByParams_Get[insertAt+1:], r.Moq.ResultsByParams_Get[insertAt:0])
			r.Moq.ResultsByParams_Get[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Get(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqClient_starGenType_Get_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqClient_starGenType_Get_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqClient_starGenType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Resp *http.Response
					Err  error
				}
				Sequence   uint32
				DoFn       MoqClient_starGenType_Get_doFn
				DoReturnFn MoqClient_starGenType_Get_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqClient_starGenType) PrettyParams_Get(params MoqClient_starGenType_Get_params) string {
	return fmt.Sprintf("Get(%#v)", params.Url)
}

func (m *MoqClient_starGenType) ParamsKey_Get(params MoqClient_starGenType_Get_params, anyParams uint64) MoqClient_starGenType_Get_paramsKey {
	m.Scene.T.Helper()
	var urlUsed string
	var urlUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Get.Url == moq.ParamIndexByValue {
			urlUsed = params.Url
		} else {
			urlUsedHash = hash.DeepHash(params.Url)
		}
	}
	return MoqClient_starGenType_Get_paramsKey{
		Params: struct{ Url string }{
			Url: urlUsed,
		},
		Hashes: struct{ Url hash.Hash }{
			Url: urlUsedHash,
		},
	}
}

func (m *MoqClient_starGenType_recorder) Do(req *http.Request) *MoqClient_starGenType_Do_fnRecorder {
	return &MoqClient_starGenType_Do_fnRecorder{
		Params: MoqClient_starGenType_Do_params{
			Req: req,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqClient_starGenType_Do_fnRecorder) Any() *MoqClient_starGenType_Do_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Do(r.Params))
		return nil
	}
	return &MoqClient_starGenType_Do_anyParams{Recorder: r}
}

func (a *MoqClient_starGenType_Do_anyParams) Req() *MoqClient_starGenType_Do_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqClient_starGenType_Do_fnRecorder) Seq() *MoqClient_starGenType_Do_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Do(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqClient_starGenType_Do_fnRecorder) NoSeq() *MoqClient_starGenType_Do_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Do(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqClient_starGenType_Do_fnRecorder) ReturnResults(result1 *http.Response, result2 error) *MoqClient_starGenType_Do_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *http.Response
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Do_doFn
		DoReturnFn MoqClient_starGenType_Do_doReturnFn
	}{
		Values: &struct {
			Result1 *http.Response
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqClient_starGenType_Do_fnRecorder) AndDo(fn MoqClient_starGenType_Do_doFn) *MoqClient_starGenType_Do_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqClient_starGenType_Do_fnRecorder) DoReturnResults(fn MoqClient_starGenType_Do_doReturnFn) *MoqClient_starGenType_Do_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *http.Response
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Do_doFn
		DoReturnFn MoqClient_starGenType_Do_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqClient_starGenType_Do_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqClient_starGenType_Do_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Do {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqClient_starGenType_Do_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqClient_starGenType_Do_paramsKey]*MoqClient_starGenType_Do_results{},
		}
		r.Moq.ResultsByParams_Do = append(r.Moq.ResultsByParams_Do, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Do) {
			copy(r.Moq.ResultsByParams_Do[insertAt+1:], r.Moq.ResultsByParams_Do[insertAt:0])
			r.Moq.ResultsByParams_Do[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Do(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqClient_starGenType_Do_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqClient_starGenType_Do_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqClient_starGenType_Do_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *http.Response
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqClient_starGenType_Do_doFn
				DoReturnFn MoqClient_starGenType_Do_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqClient_starGenType) PrettyParams_Do(params MoqClient_starGenType_Do_params) string {
	return fmt.Sprintf("Do(%#v)", params.Req)
}

func (m *MoqClient_starGenType) ParamsKey_Do(params MoqClient_starGenType_Do_params, anyParams uint64) MoqClient_starGenType_Do_paramsKey {
	m.Scene.T.Helper()
	var reqUsed *http.Request
	var reqUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Do.Req == moq.ParamIndexByValue {
			reqUsed = params.Req
		} else {
			reqUsedHash = hash.DeepHash(params.Req)
		}
	}
	return MoqClient_starGenType_Do_paramsKey{
		Params: struct{ Req *http.Request }{
			Req: reqUsed,
		},
		Hashes: struct{ Req hash.Hash }{
			Req: reqUsedHash,
		},
	}
}

func (m *MoqClient_starGenType_recorder) Post(url, contentType string, body io.Reader) *MoqClient_starGenType_Post_fnRecorder {
	return &MoqClient_starGenType_Post_fnRecorder{
		Params: MoqClient_starGenType_Post_params{
			Url:         url,
			ContentType: contentType,
			Body:        body,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqClient_starGenType_Post_fnRecorder) Any() *MoqClient_starGenType_Post_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Post(r.Params))
		return nil
	}
	return &MoqClient_starGenType_Post_anyParams{Recorder: r}
}

func (a *MoqClient_starGenType_Post_anyParams) Url() *MoqClient_starGenType_Post_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqClient_starGenType_Post_anyParams) ContentType() *MoqClient_starGenType_Post_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqClient_starGenType_Post_anyParams) Body() *MoqClient_starGenType_Post_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqClient_starGenType_Post_fnRecorder) Seq() *MoqClient_starGenType_Post_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Post(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqClient_starGenType_Post_fnRecorder) NoSeq() *MoqClient_starGenType_Post_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Post(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqClient_starGenType_Post_fnRecorder) ReturnResults(resp *http.Response, err error) *MoqClient_starGenType_Post_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Resp *http.Response
			Err  error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Post_doFn
		DoReturnFn MoqClient_starGenType_Post_doReturnFn
	}{
		Values: &struct {
			Resp *http.Response
			Err  error
		}{
			Resp: resp,
			Err:  err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqClient_starGenType_Post_fnRecorder) AndDo(fn MoqClient_starGenType_Post_doFn) *MoqClient_starGenType_Post_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqClient_starGenType_Post_fnRecorder) DoReturnResults(fn MoqClient_starGenType_Post_doReturnFn) *MoqClient_starGenType_Post_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Resp *http.Response
			Err  error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Post_doFn
		DoReturnFn MoqClient_starGenType_Post_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqClient_starGenType_Post_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqClient_starGenType_Post_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Post {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqClient_starGenType_Post_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqClient_starGenType_Post_paramsKey]*MoqClient_starGenType_Post_results{},
		}
		r.Moq.ResultsByParams_Post = append(r.Moq.ResultsByParams_Post, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Post) {
			copy(r.Moq.ResultsByParams_Post[insertAt+1:], r.Moq.ResultsByParams_Post[insertAt:0])
			r.Moq.ResultsByParams_Post[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Post(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqClient_starGenType_Post_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqClient_starGenType_Post_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqClient_starGenType_Post_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Resp *http.Response
					Err  error
				}
				Sequence   uint32
				DoFn       MoqClient_starGenType_Post_doFn
				DoReturnFn MoqClient_starGenType_Post_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqClient_starGenType) PrettyParams_Post(params MoqClient_starGenType_Post_params) string {
	return fmt.Sprintf("Post(%#v, %#v, %#v)", params.Url, params.ContentType, params.Body)
}

func (m *MoqClient_starGenType) ParamsKey_Post(params MoqClient_starGenType_Post_params, anyParams uint64) MoqClient_starGenType_Post_paramsKey {
	m.Scene.T.Helper()
	var urlUsed string
	var urlUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Post.Url == moq.ParamIndexByValue {
			urlUsed = params.Url
		} else {
			urlUsedHash = hash.DeepHash(params.Url)
		}
	}
	var contentTypeUsed string
	var contentTypeUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Post.ContentType == moq.ParamIndexByValue {
			contentTypeUsed = params.ContentType
		} else {
			contentTypeUsedHash = hash.DeepHash(params.ContentType)
		}
	}
	var bodyUsed io.Reader
	var bodyUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Post.Body == moq.ParamIndexByValue {
			bodyUsed = params.Body
		} else {
			bodyUsedHash = hash.DeepHash(params.Body)
		}
	}
	return MoqClient_starGenType_Post_paramsKey{
		Params: struct {
			Url, ContentType string
			Body             io.Reader
		}{
			Url:         urlUsed,
			ContentType: contentTypeUsed,
			Body:        bodyUsed,
		},
		Hashes: struct {
			Url, ContentType hash.Hash
			Body             hash.Hash
		}{
			Url:         urlUsedHash,
			ContentType: contentTypeUsedHash,
			Body:        bodyUsedHash,
		},
	}
}

func (m *MoqClient_starGenType_recorder) PostForm(url string, data url.Values) *MoqClient_starGenType_PostForm_fnRecorder {
	return &MoqClient_starGenType_PostForm_fnRecorder{
		Params: MoqClient_starGenType_PostForm_params{
			Url:  url,
			Data: data,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqClient_starGenType_PostForm_fnRecorder) Any() *MoqClient_starGenType_PostForm_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PostForm(r.Params))
		return nil
	}
	return &MoqClient_starGenType_PostForm_anyParams{Recorder: r}
}

func (a *MoqClient_starGenType_PostForm_anyParams) Url() *MoqClient_starGenType_PostForm_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqClient_starGenType_PostForm_anyParams) Data() *MoqClient_starGenType_PostForm_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqClient_starGenType_PostForm_fnRecorder) Seq() *MoqClient_starGenType_PostForm_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PostForm(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqClient_starGenType_PostForm_fnRecorder) NoSeq() *MoqClient_starGenType_PostForm_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PostForm(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqClient_starGenType_PostForm_fnRecorder) ReturnResults(resp *http.Response, err error) *MoqClient_starGenType_PostForm_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Resp *http.Response
			Err  error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_PostForm_doFn
		DoReturnFn MoqClient_starGenType_PostForm_doReturnFn
	}{
		Values: &struct {
			Resp *http.Response
			Err  error
		}{
			Resp: resp,
			Err:  err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqClient_starGenType_PostForm_fnRecorder) AndDo(fn MoqClient_starGenType_PostForm_doFn) *MoqClient_starGenType_PostForm_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqClient_starGenType_PostForm_fnRecorder) DoReturnResults(fn MoqClient_starGenType_PostForm_doReturnFn) *MoqClient_starGenType_PostForm_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Resp *http.Response
			Err  error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_PostForm_doFn
		DoReturnFn MoqClient_starGenType_PostForm_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqClient_starGenType_PostForm_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqClient_starGenType_PostForm_resultsByParams
	for n, res := range r.Moq.ResultsByParams_PostForm {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqClient_starGenType_PostForm_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqClient_starGenType_PostForm_paramsKey]*MoqClient_starGenType_PostForm_results{},
		}
		r.Moq.ResultsByParams_PostForm = append(r.Moq.ResultsByParams_PostForm, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_PostForm) {
			copy(r.Moq.ResultsByParams_PostForm[insertAt+1:], r.Moq.ResultsByParams_PostForm[insertAt:0])
			r.Moq.ResultsByParams_PostForm[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_PostForm(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqClient_starGenType_PostForm_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqClient_starGenType_PostForm_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqClient_starGenType_PostForm_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Resp *http.Response
					Err  error
				}
				Sequence   uint32
				DoFn       MoqClient_starGenType_PostForm_doFn
				DoReturnFn MoqClient_starGenType_PostForm_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqClient_starGenType) PrettyParams_PostForm(params MoqClient_starGenType_PostForm_params) string {
	return fmt.Sprintf("PostForm(%#v, %#v)", params.Url, params.Data)
}

func (m *MoqClient_starGenType) ParamsKey_PostForm(params MoqClient_starGenType_PostForm_params, anyParams uint64) MoqClient_starGenType_PostForm_paramsKey {
	m.Scene.T.Helper()
	var urlUsed string
	var urlUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.PostForm.Url == moq.ParamIndexByValue {
			urlUsed = params.Url
		} else {
			urlUsedHash = hash.DeepHash(params.Url)
		}
	}
	var dataUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.PostForm.Data == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The data parameter of the PostForm function can't be indexed by value")
		}
		dataUsedHash = hash.DeepHash(params.Data)
	}
	return MoqClient_starGenType_PostForm_paramsKey{
		Params: struct{ Url string }{
			Url: urlUsed,
		},
		Hashes: struct {
			Url  hash.Hash
			Data hash.Hash
		}{
			Url:  urlUsedHash,
			Data: dataUsedHash,
		},
	}
}

func (m *MoqClient_starGenType_recorder) Head(url string) *MoqClient_starGenType_Head_fnRecorder {
	return &MoqClient_starGenType_Head_fnRecorder{
		Params: MoqClient_starGenType_Head_params{
			Url: url,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqClient_starGenType_Head_fnRecorder) Any() *MoqClient_starGenType_Head_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Head(r.Params))
		return nil
	}
	return &MoqClient_starGenType_Head_anyParams{Recorder: r}
}

func (a *MoqClient_starGenType_Head_anyParams) Url() *MoqClient_starGenType_Head_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqClient_starGenType_Head_fnRecorder) Seq() *MoqClient_starGenType_Head_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Head(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqClient_starGenType_Head_fnRecorder) NoSeq() *MoqClient_starGenType_Head_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Head(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqClient_starGenType_Head_fnRecorder) ReturnResults(resp *http.Response, err error) *MoqClient_starGenType_Head_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Resp *http.Response
			Err  error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Head_doFn
		DoReturnFn MoqClient_starGenType_Head_doReturnFn
	}{
		Values: &struct {
			Resp *http.Response
			Err  error
		}{
			Resp: resp,
			Err:  err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqClient_starGenType_Head_fnRecorder) AndDo(fn MoqClient_starGenType_Head_doFn) *MoqClient_starGenType_Head_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqClient_starGenType_Head_fnRecorder) DoReturnResults(fn MoqClient_starGenType_Head_doReturnFn) *MoqClient_starGenType_Head_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Resp *http.Response
			Err  error
		}
		Sequence   uint32
		DoFn       MoqClient_starGenType_Head_doFn
		DoReturnFn MoqClient_starGenType_Head_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqClient_starGenType_Head_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqClient_starGenType_Head_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Head {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqClient_starGenType_Head_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqClient_starGenType_Head_paramsKey]*MoqClient_starGenType_Head_results{},
		}
		r.Moq.ResultsByParams_Head = append(r.Moq.ResultsByParams_Head, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Head) {
			copy(r.Moq.ResultsByParams_Head[insertAt+1:], r.Moq.ResultsByParams_Head[insertAt:0])
			r.Moq.ResultsByParams_Head[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Head(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqClient_starGenType_Head_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqClient_starGenType_Head_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqClient_starGenType_Head_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Resp *http.Response
					Err  error
				}
				Sequence   uint32
				DoFn       MoqClient_starGenType_Head_doFn
				DoReturnFn MoqClient_starGenType_Head_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqClient_starGenType) PrettyParams_Head(params MoqClient_starGenType_Head_params) string {
	return fmt.Sprintf("Head(%#v)", params.Url)
}

func (m *MoqClient_starGenType) ParamsKey_Head(params MoqClient_starGenType_Head_params, anyParams uint64) MoqClient_starGenType_Head_paramsKey {
	m.Scene.T.Helper()
	var urlUsed string
	var urlUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Head.Url == moq.ParamIndexByValue {
			urlUsed = params.Url
		} else {
			urlUsedHash = hash.DeepHash(params.Url)
		}
	}
	return MoqClient_starGenType_Head_paramsKey{
		Params: struct{ Url string }{
			Url: urlUsed,
		},
		Hashes: struct{ Url hash.Hash }{
			Url: urlUsedHash,
		},
	}
}

func (m *MoqClient_starGenType_recorder) CloseIdleConnections() *MoqClient_starGenType_CloseIdleConnections_fnRecorder {
	return &MoqClient_starGenType_CloseIdleConnections_fnRecorder{
		Params:   MoqClient_starGenType_CloseIdleConnections_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqClient_starGenType_CloseIdleConnections_fnRecorder) Any() *MoqClient_starGenType_CloseIdleConnections_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CloseIdleConnections(r.Params))
		return nil
	}
	return &MoqClient_starGenType_CloseIdleConnections_anyParams{Recorder: r}
}

func (r *MoqClient_starGenType_CloseIdleConnections_fnRecorder) Seq() *MoqClient_starGenType_CloseIdleConnections_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CloseIdleConnections(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqClient_starGenType_CloseIdleConnections_fnRecorder) NoSeq() *MoqClient_starGenType_CloseIdleConnections_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CloseIdleConnections(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqClient_starGenType_CloseIdleConnections_fnRecorder) ReturnResults() *MoqClient_starGenType_CloseIdleConnections_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqClient_starGenType_CloseIdleConnections_doFn
		DoReturnFn MoqClient_starGenType_CloseIdleConnections_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqClient_starGenType_CloseIdleConnections_fnRecorder) AndDo(fn MoqClient_starGenType_CloseIdleConnections_doFn) *MoqClient_starGenType_CloseIdleConnections_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqClient_starGenType_CloseIdleConnections_fnRecorder) DoReturnResults(fn MoqClient_starGenType_CloseIdleConnections_doReturnFn) *MoqClient_starGenType_CloseIdleConnections_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqClient_starGenType_CloseIdleConnections_doFn
		DoReturnFn MoqClient_starGenType_CloseIdleConnections_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqClient_starGenType_CloseIdleConnections_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqClient_starGenType_CloseIdleConnections_resultsByParams
	for n, res := range r.Moq.ResultsByParams_CloseIdleConnections {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqClient_starGenType_CloseIdleConnections_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqClient_starGenType_CloseIdleConnections_paramsKey]*MoqClient_starGenType_CloseIdleConnections_results{},
		}
		r.Moq.ResultsByParams_CloseIdleConnections = append(r.Moq.ResultsByParams_CloseIdleConnections, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_CloseIdleConnections) {
			copy(r.Moq.ResultsByParams_CloseIdleConnections[insertAt+1:], r.Moq.ResultsByParams_CloseIdleConnections[insertAt:0])
			r.Moq.ResultsByParams_CloseIdleConnections[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_CloseIdleConnections(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqClient_starGenType_CloseIdleConnections_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqClient_starGenType_CloseIdleConnections_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqClient_starGenType_CloseIdleConnections_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqClient_starGenType_CloseIdleConnections_doFn
				DoReturnFn MoqClient_starGenType_CloseIdleConnections_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqClient_starGenType) PrettyParams_CloseIdleConnections(params MoqClient_starGenType_CloseIdleConnections_params) string {
	return fmt.Sprintf("CloseIdleConnections()")
}

func (m *MoqClient_starGenType) ParamsKey_CloseIdleConnections(params MoqClient_starGenType_CloseIdleConnections_params, anyParams uint64) MoqClient_starGenType_CloseIdleConnections_paramsKey {
	m.Scene.T.Helper()
	return MoqClient_starGenType_CloseIdleConnections_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqClient_starGenType) Reset() {
	m.ResultsByParams_Get = nil
	m.ResultsByParams_Do = nil
	m.ResultsByParams_Post = nil
	m.ResultsByParams_PostForm = nil
	m.ResultsByParams_Head = nil
	m.ResultsByParams_CloseIdleConnections = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqClient_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Get {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Get(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Do {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Do(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Post {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Post(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_PostForm {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_PostForm(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Head {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Head(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_CloseIdleConnections {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_CloseIdleConnections(results.Params))
			}
		}
	}
}
