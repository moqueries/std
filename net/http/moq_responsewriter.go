// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package http

import (
	"fmt"
	"math/bits"
	"net/http"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that http.ResponseWriter is mocked
// completely
var _ http.ResponseWriter = (*MoqResponseWriter_mock)(nil)

// MoqResponseWriter holds the state of a moq of the ResponseWriter type
type MoqResponseWriter struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqResponseWriter_mock

	ResultsByParams_Header      []MoqResponseWriter_Header_resultsByParams
	ResultsByParams_Write       []MoqResponseWriter_Write_resultsByParams
	ResultsByParams_WriteHeader []MoqResponseWriter_WriteHeader_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Header struct{}
			Write  struct {
				Param1 moq.ParamIndexing
			}
			WriteHeader struct {
				StatusCode moq.ParamIndexing
			}
		}
	}
	// MoqResponseWriter_mock isolates the mock interface of the ResponseWriter
}

// type
type MoqResponseWriter_mock struct {
	Moq *MoqResponseWriter
}

// MoqResponseWriter_recorder isolates the recorder interface of the
// ResponseWriter type
type MoqResponseWriter_recorder struct {
	Moq *MoqResponseWriter
}

// MoqResponseWriter_Header_params holds the params of the ResponseWriter type
type MoqResponseWriter_Header_params struct{}

// MoqResponseWriter_Header_paramsKey holds the map key params of the
// ResponseWriter type
type MoqResponseWriter_Header_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqResponseWriter_Header_resultsByParams contains the results for a given
// set of parameters for the ResponseWriter type
type MoqResponseWriter_Header_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqResponseWriter_Header_paramsKey]*MoqResponseWriter_Header_results
}

// MoqResponseWriter_Header_doFn defines the type of function needed when
// calling AndDo for the ResponseWriter type
type MoqResponseWriter_Header_doFn func()

// MoqResponseWriter_Header_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ResponseWriter type
type MoqResponseWriter_Header_doReturnFn func() http.Header

// MoqResponseWriter_Header_results holds the results of the ResponseWriter
// type
type MoqResponseWriter_Header_results struct {
	Params  MoqResponseWriter_Header_params
	Results []struct {
		Values *struct {
			Result1 http.Header
		}
		Sequence   uint32
		DoFn       MoqResponseWriter_Header_doFn
		DoReturnFn MoqResponseWriter_Header_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqResponseWriter_Header_fnRecorder routes recorded function calls to the
// MoqResponseWriter moq
type MoqResponseWriter_Header_fnRecorder struct {
	Params    MoqResponseWriter_Header_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqResponseWriter_Header_results
	Moq       *MoqResponseWriter
}

// MoqResponseWriter_Header_anyParams isolates the any params functions of the
// ResponseWriter type
type MoqResponseWriter_Header_anyParams struct {
	Recorder *MoqResponseWriter_Header_fnRecorder
}

// MoqResponseWriter_Write_params holds the params of the ResponseWriter type
type MoqResponseWriter_Write_params struct{ Param1 []byte }

// MoqResponseWriter_Write_paramsKey holds the map key params of the
// ResponseWriter type
type MoqResponseWriter_Write_paramsKey struct {
	Params struct{}
	Hashes struct{ Param1 hash.Hash }
}

// MoqResponseWriter_Write_resultsByParams contains the results for a given set
// of parameters for the ResponseWriter type
type MoqResponseWriter_Write_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqResponseWriter_Write_paramsKey]*MoqResponseWriter_Write_results
}

// MoqResponseWriter_Write_doFn defines the type of function needed when
// calling AndDo for the ResponseWriter type
type MoqResponseWriter_Write_doFn func([]byte)

// MoqResponseWriter_Write_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ResponseWriter type
type MoqResponseWriter_Write_doReturnFn func([]byte) (int, error)

// MoqResponseWriter_Write_results holds the results of the ResponseWriter type
type MoqResponseWriter_Write_results struct {
	Params  MoqResponseWriter_Write_params
	Results []struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqResponseWriter_Write_doFn
		DoReturnFn MoqResponseWriter_Write_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqResponseWriter_Write_fnRecorder routes recorded function calls to the
// MoqResponseWriter moq
type MoqResponseWriter_Write_fnRecorder struct {
	Params    MoqResponseWriter_Write_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqResponseWriter_Write_results
	Moq       *MoqResponseWriter
}

// MoqResponseWriter_Write_anyParams isolates the any params functions of the
// ResponseWriter type
type MoqResponseWriter_Write_anyParams struct {
	Recorder *MoqResponseWriter_Write_fnRecorder
}

// MoqResponseWriter_WriteHeader_params holds the params of the ResponseWriter
// type
type MoqResponseWriter_WriteHeader_params struct{ StatusCode int }

// MoqResponseWriter_WriteHeader_paramsKey holds the map key params of the
// ResponseWriter type
type MoqResponseWriter_WriteHeader_paramsKey struct {
	Params struct{ StatusCode int }
	Hashes struct{ StatusCode hash.Hash }
}

// MoqResponseWriter_WriteHeader_resultsByParams contains the results for a
// given set of parameters for the ResponseWriter type
type MoqResponseWriter_WriteHeader_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqResponseWriter_WriteHeader_paramsKey]*MoqResponseWriter_WriteHeader_results
}

// MoqResponseWriter_WriteHeader_doFn defines the type of function needed when
// calling AndDo for the ResponseWriter type
type MoqResponseWriter_WriteHeader_doFn func(statusCode int)

// MoqResponseWriter_WriteHeader_doReturnFn defines the type of function needed
// when calling DoReturnResults for the ResponseWriter type
type MoqResponseWriter_WriteHeader_doReturnFn func(statusCode int)

// MoqResponseWriter_WriteHeader_results holds the results of the
// ResponseWriter type
type MoqResponseWriter_WriteHeader_results struct {
	Params  MoqResponseWriter_WriteHeader_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqResponseWriter_WriteHeader_doFn
		DoReturnFn MoqResponseWriter_WriteHeader_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqResponseWriter_WriteHeader_fnRecorder routes recorded function calls to
// the MoqResponseWriter moq
type MoqResponseWriter_WriteHeader_fnRecorder struct {
	Params    MoqResponseWriter_WriteHeader_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqResponseWriter_WriteHeader_results
	Moq       *MoqResponseWriter
}

// MoqResponseWriter_WriteHeader_anyParams isolates the any params functions of
// the ResponseWriter type
type MoqResponseWriter_WriteHeader_anyParams struct {
	Recorder *MoqResponseWriter_WriteHeader_fnRecorder
}

// NewMoqResponseWriter creates a new moq of the ResponseWriter type
func NewMoqResponseWriter(scene *moq.Scene, config *moq.Config) *MoqResponseWriter {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqResponseWriter{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqResponseWriter_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Header struct{}
				Write  struct {
					Param1 moq.ParamIndexing
				}
				WriteHeader struct {
					StatusCode moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Header struct{}
			Write  struct {
				Param1 moq.ParamIndexing
			}
			WriteHeader struct {
				StatusCode moq.ParamIndexing
			}
		}{
			Header: struct{}{},
			Write: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
			},
			WriteHeader: struct {
				StatusCode moq.ParamIndexing
			}{
				StatusCode: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the ResponseWriter type
func (m *MoqResponseWriter) Mock() *MoqResponseWriter_mock { return m.Moq }

func (m *MoqResponseWriter_mock) Header() (result1 http.Header) {
	m.Moq.Scene.T.Helper()
	params := MoqResponseWriter_Header_params{}
	var results *MoqResponseWriter_Header_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Header {
		paramsKey := m.Moq.ParamsKey_Header(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Header(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Header(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Header(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqResponseWriter_mock) Write(param1 []byte) (result1 int, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqResponseWriter_Write_params{
		Param1: param1,
	}
	var results *MoqResponseWriter_Write_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Write {
		paramsKey := m.Moq.ParamsKey_Write(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Write(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Write(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Write(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqResponseWriter_mock) WriteHeader(statusCode int) {
	m.Moq.Scene.T.Helper()
	params := MoqResponseWriter_WriteHeader_params{
		StatusCode: statusCode,
	}
	var results *MoqResponseWriter_WriteHeader_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteHeader {
		paramsKey := m.Moq.ParamsKey_WriteHeader(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteHeader(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteHeader(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteHeader(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(statusCode)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(statusCode)
	}
	return
}

// OnCall returns the recorder implementation of the ResponseWriter type
func (m *MoqResponseWriter) OnCall() *MoqResponseWriter_recorder {
	return &MoqResponseWriter_recorder{
		Moq: m,
	}
}

func (m *MoqResponseWriter_recorder) Header() *MoqResponseWriter_Header_fnRecorder {
	return &MoqResponseWriter_Header_fnRecorder{
		Params:   MoqResponseWriter_Header_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqResponseWriter_Header_fnRecorder) Any() *MoqResponseWriter_Header_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Header(r.Params))
		return nil
	}
	return &MoqResponseWriter_Header_anyParams{Recorder: r}
}

func (r *MoqResponseWriter_Header_fnRecorder) Seq() *MoqResponseWriter_Header_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Header(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqResponseWriter_Header_fnRecorder) NoSeq() *MoqResponseWriter_Header_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Header(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqResponseWriter_Header_fnRecorder) ReturnResults(result1 http.Header) *MoqResponseWriter_Header_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 http.Header
		}
		Sequence   uint32
		DoFn       MoqResponseWriter_Header_doFn
		DoReturnFn MoqResponseWriter_Header_doReturnFn
	}{
		Values: &struct {
			Result1 http.Header
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqResponseWriter_Header_fnRecorder) AndDo(fn MoqResponseWriter_Header_doFn) *MoqResponseWriter_Header_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqResponseWriter_Header_fnRecorder) DoReturnResults(fn MoqResponseWriter_Header_doReturnFn) *MoqResponseWriter_Header_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 http.Header
		}
		Sequence   uint32
		DoFn       MoqResponseWriter_Header_doFn
		DoReturnFn MoqResponseWriter_Header_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqResponseWriter_Header_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqResponseWriter_Header_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Header {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqResponseWriter_Header_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqResponseWriter_Header_paramsKey]*MoqResponseWriter_Header_results{},
		}
		r.Moq.ResultsByParams_Header = append(r.Moq.ResultsByParams_Header, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Header) {
			copy(r.Moq.ResultsByParams_Header[insertAt+1:], r.Moq.ResultsByParams_Header[insertAt:0])
			r.Moq.ResultsByParams_Header[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Header(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqResponseWriter_Header_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqResponseWriter_Header_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqResponseWriter_Header_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 http.Header
				}
				Sequence   uint32
				DoFn       MoqResponseWriter_Header_doFn
				DoReturnFn MoqResponseWriter_Header_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqResponseWriter) PrettyParams_Header(params MoqResponseWriter_Header_params) string {
	return fmt.Sprintf("Header()")
}

func (m *MoqResponseWriter) ParamsKey_Header(params MoqResponseWriter_Header_params, anyParams uint64) MoqResponseWriter_Header_paramsKey {
	m.Scene.T.Helper()
	return MoqResponseWriter_Header_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqResponseWriter_recorder) Write(param1 []byte) *MoqResponseWriter_Write_fnRecorder {
	return &MoqResponseWriter_Write_fnRecorder{
		Params: MoqResponseWriter_Write_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqResponseWriter_Write_fnRecorder) Any() *MoqResponseWriter_Write_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	return &MoqResponseWriter_Write_anyParams{Recorder: r}
}

func (a *MoqResponseWriter_Write_anyParams) Param1() *MoqResponseWriter_Write_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqResponseWriter_Write_fnRecorder) Seq() *MoqResponseWriter_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqResponseWriter_Write_fnRecorder) NoSeq() *MoqResponseWriter_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqResponseWriter_Write_fnRecorder) ReturnResults(result1 int, result2 error) *MoqResponseWriter_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqResponseWriter_Write_doFn
		DoReturnFn MoqResponseWriter_Write_doReturnFn
	}{
		Values: &struct {
			Result1 int
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqResponseWriter_Write_fnRecorder) AndDo(fn MoqResponseWriter_Write_doFn) *MoqResponseWriter_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqResponseWriter_Write_fnRecorder) DoReturnResults(fn MoqResponseWriter_Write_doReturnFn) *MoqResponseWriter_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqResponseWriter_Write_doFn
		DoReturnFn MoqResponseWriter_Write_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqResponseWriter_Write_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqResponseWriter_Write_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Write {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqResponseWriter_Write_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqResponseWriter_Write_paramsKey]*MoqResponseWriter_Write_results{},
		}
		r.Moq.ResultsByParams_Write = append(r.Moq.ResultsByParams_Write, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Write) {
			copy(r.Moq.ResultsByParams_Write[insertAt+1:], r.Moq.ResultsByParams_Write[insertAt:0])
			r.Moq.ResultsByParams_Write[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Write(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqResponseWriter_Write_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqResponseWriter_Write_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqResponseWriter_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqResponseWriter_Write_doFn
				DoReturnFn MoqResponseWriter_Write_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqResponseWriter) PrettyParams_Write(params MoqResponseWriter_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.Param1)
}

func (m *MoqResponseWriter) ParamsKey_Write(params MoqResponseWriter_Write_params, anyParams uint64) MoqResponseWriter_Write_paramsKey {
	m.Scene.T.Helper()
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Write.Param1 == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The param1 parameter of the Write function can't be indexed by value")
		}
		param1UsedHash = hash.DeepHash(params.Param1)
	}
	return MoqResponseWriter_Write_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqResponseWriter_recorder) WriteHeader(statusCode int) *MoqResponseWriter_WriteHeader_fnRecorder {
	return &MoqResponseWriter_WriteHeader_fnRecorder{
		Params: MoqResponseWriter_WriteHeader_params{
			StatusCode: statusCode,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqResponseWriter_WriteHeader_fnRecorder) Any() *MoqResponseWriter_WriteHeader_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteHeader(r.Params))
		return nil
	}
	return &MoqResponseWriter_WriteHeader_anyParams{Recorder: r}
}

func (a *MoqResponseWriter_WriteHeader_anyParams) StatusCode() *MoqResponseWriter_WriteHeader_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqResponseWriter_WriteHeader_fnRecorder) Seq() *MoqResponseWriter_WriteHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteHeader(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqResponseWriter_WriteHeader_fnRecorder) NoSeq() *MoqResponseWriter_WriteHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteHeader(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqResponseWriter_WriteHeader_fnRecorder) ReturnResults() *MoqResponseWriter_WriteHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqResponseWriter_WriteHeader_doFn
		DoReturnFn MoqResponseWriter_WriteHeader_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqResponseWriter_WriteHeader_fnRecorder) AndDo(fn MoqResponseWriter_WriteHeader_doFn) *MoqResponseWriter_WriteHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqResponseWriter_WriteHeader_fnRecorder) DoReturnResults(fn MoqResponseWriter_WriteHeader_doReturnFn) *MoqResponseWriter_WriteHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqResponseWriter_WriteHeader_doFn
		DoReturnFn MoqResponseWriter_WriteHeader_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqResponseWriter_WriteHeader_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqResponseWriter_WriteHeader_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteHeader {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqResponseWriter_WriteHeader_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqResponseWriter_WriteHeader_paramsKey]*MoqResponseWriter_WriteHeader_results{},
		}
		r.Moq.ResultsByParams_WriteHeader = append(r.Moq.ResultsByParams_WriteHeader, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteHeader) {
			copy(r.Moq.ResultsByParams_WriteHeader[insertAt+1:], r.Moq.ResultsByParams_WriteHeader[insertAt:0])
			r.Moq.ResultsByParams_WriteHeader[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteHeader(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqResponseWriter_WriteHeader_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqResponseWriter_WriteHeader_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqResponseWriter_WriteHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqResponseWriter_WriteHeader_doFn
				DoReturnFn MoqResponseWriter_WriteHeader_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqResponseWriter) PrettyParams_WriteHeader(params MoqResponseWriter_WriteHeader_params) string {
	return fmt.Sprintf("WriteHeader(%#v)", params.StatusCode)
}

func (m *MoqResponseWriter) ParamsKey_WriteHeader(params MoqResponseWriter_WriteHeader_params, anyParams uint64) MoqResponseWriter_WriteHeader_paramsKey {
	m.Scene.T.Helper()
	var statusCodeUsed int
	var statusCodeUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteHeader.StatusCode == moq.ParamIndexByValue {
			statusCodeUsed = params.StatusCode
		} else {
			statusCodeUsedHash = hash.DeepHash(params.StatusCode)
		}
	}
	return MoqResponseWriter_WriteHeader_paramsKey{
		Params: struct{ StatusCode int }{
			StatusCode: statusCodeUsed,
		},
		Hashes: struct{ StatusCode hash.Hash }{
			StatusCode: statusCodeUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqResponseWriter) Reset() {
	m.ResultsByParams_Header = nil
	m.ResultsByParams_Write = nil
	m.ResultsByParams_WriteHeader = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqResponseWriter) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Header {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Header(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Write {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Write(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteHeader {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteHeader(results.Params))
			}
		}
	}
}
