// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package http

import (
	"fmt"
	"math/bits"
	"net/http"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that http.ServeMux_starGenType is
// mocked completely
var _ ServeMux_starGenType = (*MoqServeMux_starGenType_mock)(nil)

// ServeMux_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type ServeMux_starGenType interface {
	Handler(r *http.Request) (h http.Handler, pattern string)
	ServeHTTP(w http.ResponseWriter, r *http.Request)
	Handle(pattern string, handler http.Handler)
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
}

// MoqServeMux_starGenType holds the state of a moq of the ServeMux_starGenType
// type
type MoqServeMux_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqServeMux_starGenType_mock

	ResultsByParams_Handler    []MoqServeMux_starGenType_Handler_resultsByParams
	ResultsByParams_ServeHTTP  []MoqServeMux_starGenType_ServeHTTP_resultsByParams
	ResultsByParams_Handle     []MoqServeMux_starGenType_Handle_resultsByParams
	ResultsByParams_HandleFunc []MoqServeMux_starGenType_HandleFunc_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Handler struct {
				Param1 moq.ParamIndexing
			}
			ServeHTTP struct {
				W      moq.ParamIndexing
				Param2 moq.ParamIndexing
			}
			Handle struct {
				Pattern moq.ParamIndexing
				Handler moq.ParamIndexing
			}
			HandleFunc struct {
				Pattern moq.ParamIndexing
				Handler moq.ParamIndexing
			}
		}
	}
	// MoqServeMux_starGenType_mock isolates the mock interface of the
}

// ServeMux_starGenType type
type MoqServeMux_starGenType_mock struct {
	Moq *MoqServeMux_starGenType
}

// MoqServeMux_starGenType_recorder isolates the recorder interface of the
// ServeMux_starGenType type
type MoqServeMux_starGenType_recorder struct {
	Moq *MoqServeMux_starGenType
}

// MoqServeMux_starGenType_Handler_params holds the params of the
// ServeMux_starGenType type
type MoqServeMux_starGenType_Handler_params struct{ Param1 *http.Request }

// MoqServeMux_starGenType_Handler_paramsKey holds the map key params of the
// ServeMux_starGenType type
type MoqServeMux_starGenType_Handler_paramsKey struct {
	Params struct{ Param1 *http.Request }
	Hashes struct{ Param1 hash.Hash }
}

// MoqServeMux_starGenType_Handler_resultsByParams contains the results for a
// given set of parameters for the ServeMux_starGenType type
type MoqServeMux_starGenType_Handler_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServeMux_starGenType_Handler_paramsKey]*MoqServeMux_starGenType_Handler_results
}

// MoqServeMux_starGenType_Handler_doFn defines the type of function needed
// when calling AndDo for the ServeMux_starGenType type
type MoqServeMux_starGenType_Handler_doFn func(r *http.Request)

// MoqServeMux_starGenType_Handler_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ServeMux_starGenType type
type MoqServeMux_starGenType_Handler_doReturnFn func(r *http.Request) (h http.Handler, pattern string)

// MoqServeMux_starGenType_Handler_results holds the results of the
// ServeMux_starGenType type
type MoqServeMux_starGenType_Handler_results struct {
	Params  MoqServeMux_starGenType_Handler_params
	Results []struct {
		Values *struct {
			H       http.Handler
			Pattern string
		}
		Sequence   uint32
		DoFn       MoqServeMux_starGenType_Handler_doFn
		DoReturnFn MoqServeMux_starGenType_Handler_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServeMux_starGenType_Handler_fnRecorder routes recorded function calls to
// the MoqServeMux_starGenType moq
type MoqServeMux_starGenType_Handler_fnRecorder struct {
	Params    MoqServeMux_starGenType_Handler_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServeMux_starGenType_Handler_results
	Moq       *MoqServeMux_starGenType
}

// MoqServeMux_starGenType_Handler_anyParams isolates the any params functions
// of the ServeMux_starGenType type
type MoqServeMux_starGenType_Handler_anyParams struct {
	Recorder *MoqServeMux_starGenType_Handler_fnRecorder
}

// MoqServeMux_starGenType_ServeHTTP_params holds the params of the
// ServeMux_starGenType type
type MoqServeMux_starGenType_ServeHTTP_params struct {
	W      http.ResponseWriter
	Param2 *http.Request
}

// MoqServeMux_starGenType_ServeHTTP_paramsKey holds the map key params of the
// ServeMux_starGenType type
type MoqServeMux_starGenType_ServeHTTP_paramsKey struct {
	Params struct {
		W      http.ResponseWriter
		Param2 *http.Request
	}
	Hashes struct {
		W      hash.Hash
		Param2 hash.Hash
	}
}

// MoqServeMux_starGenType_ServeHTTP_resultsByParams contains the results for a
// given set of parameters for the ServeMux_starGenType type
type MoqServeMux_starGenType_ServeHTTP_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServeMux_starGenType_ServeHTTP_paramsKey]*MoqServeMux_starGenType_ServeHTTP_results
}

// MoqServeMux_starGenType_ServeHTTP_doFn defines the type of function needed
// when calling AndDo for the ServeMux_starGenType type
type MoqServeMux_starGenType_ServeHTTP_doFn func(w http.ResponseWriter, r *http.Request)

// MoqServeMux_starGenType_ServeHTTP_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ServeMux_starGenType type
type MoqServeMux_starGenType_ServeHTTP_doReturnFn func(w http.ResponseWriter, r *http.Request)

// MoqServeMux_starGenType_ServeHTTP_results holds the results of the
// ServeMux_starGenType type
type MoqServeMux_starGenType_ServeHTTP_results struct {
	Params  MoqServeMux_starGenType_ServeHTTP_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServeMux_starGenType_ServeHTTP_doFn
		DoReturnFn MoqServeMux_starGenType_ServeHTTP_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServeMux_starGenType_ServeHTTP_fnRecorder routes recorded function calls
// to the MoqServeMux_starGenType moq
type MoqServeMux_starGenType_ServeHTTP_fnRecorder struct {
	Params    MoqServeMux_starGenType_ServeHTTP_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServeMux_starGenType_ServeHTTP_results
	Moq       *MoqServeMux_starGenType
}

// MoqServeMux_starGenType_ServeHTTP_anyParams isolates the any params
// functions of the ServeMux_starGenType type
type MoqServeMux_starGenType_ServeHTTP_anyParams struct {
	Recorder *MoqServeMux_starGenType_ServeHTTP_fnRecorder
}

// MoqServeMux_starGenType_Handle_params holds the params of the
// ServeMux_starGenType type
type MoqServeMux_starGenType_Handle_params struct {
	Pattern string
	Handler http.Handler
}

// MoqServeMux_starGenType_Handle_paramsKey holds the map key params of the
// ServeMux_starGenType type
type MoqServeMux_starGenType_Handle_paramsKey struct {
	Params struct {
		Pattern string
		Handler http.Handler
	}
	Hashes struct {
		Pattern hash.Hash
		Handler hash.Hash
	}
}

// MoqServeMux_starGenType_Handle_resultsByParams contains the results for a
// given set of parameters for the ServeMux_starGenType type
type MoqServeMux_starGenType_Handle_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServeMux_starGenType_Handle_paramsKey]*MoqServeMux_starGenType_Handle_results
}

// MoqServeMux_starGenType_Handle_doFn defines the type of function needed when
// calling AndDo for the ServeMux_starGenType type
type MoqServeMux_starGenType_Handle_doFn func(pattern string, handler http.Handler)

// MoqServeMux_starGenType_Handle_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ServeMux_starGenType type
type MoqServeMux_starGenType_Handle_doReturnFn func(pattern string, handler http.Handler)

// MoqServeMux_starGenType_Handle_results holds the results of the
// ServeMux_starGenType type
type MoqServeMux_starGenType_Handle_results struct {
	Params  MoqServeMux_starGenType_Handle_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServeMux_starGenType_Handle_doFn
		DoReturnFn MoqServeMux_starGenType_Handle_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServeMux_starGenType_Handle_fnRecorder routes recorded function calls to
// the MoqServeMux_starGenType moq
type MoqServeMux_starGenType_Handle_fnRecorder struct {
	Params    MoqServeMux_starGenType_Handle_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServeMux_starGenType_Handle_results
	Moq       *MoqServeMux_starGenType
}

// MoqServeMux_starGenType_Handle_anyParams isolates the any params functions
// of the ServeMux_starGenType type
type MoqServeMux_starGenType_Handle_anyParams struct {
	Recorder *MoqServeMux_starGenType_Handle_fnRecorder
}

// MoqServeMux_starGenType_HandleFunc_params holds the params of the
// ServeMux_starGenType type
type MoqServeMux_starGenType_HandleFunc_params struct {
	Pattern string
	Handler func(http.ResponseWriter, *http.Request)
}

// MoqServeMux_starGenType_HandleFunc_paramsKey holds the map key params of the
// ServeMux_starGenType type
type MoqServeMux_starGenType_HandleFunc_paramsKey struct {
	Params struct{ Pattern string }
	Hashes struct {
		Pattern hash.Hash
		Handler hash.Hash
	}
}

// MoqServeMux_starGenType_HandleFunc_resultsByParams contains the results for
// a given set of parameters for the ServeMux_starGenType type
type MoqServeMux_starGenType_HandleFunc_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqServeMux_starGenType_HandleFunc_paramsKey]*MoqServeMux_starGenType_HandleFunc_results
}

// MoqServeMux_starGenType_HandleFunc_doFn defines the type of function needed
// when calling AndDo for the ServeMux_starGenType type
type MoqServeMux_starGenType_HandleFunc_doFn func(pattern string, handler func(http.ResponseWriter, *http.Request))

// MoqServeMux_starGenType_HandleFunc_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ServeMux_starGenType type
type MoqServeMux_starGenType_HandleFunc_doReturnFn func(pattern string, handler func(http.ResponseWriter, *http.Request))

// MoqServeMux_starGenType_HandleFunc_results holds the results of the
// ServeMux_starGenType type
type MoqServeMux_starGenType_HandleFunc_results struct {
	Params  MoqServeMux_starGenType_HandleFunc_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServeMux_starGenType_HandleFunc_doFn
		DoReturnFn MoqServeMux_starGenType_HandleFunc_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqServeMux_starGenType_HandleFunc_fnRecorder routes recorded function calls
// to the MoqServeMux_starGenType moq
type MoqServeMux_starGenType_HandleFunc_fnRecorder struct {
	Params    MoqServeMux_starGenType_HandleFunc_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqServeMux_starGenType_HandleFunc_results
	Moq       *MoqServeMux_starGenType
}

// MoqServeMux_starGenType_HandleFunc_anyParams isolates the any params
// functions of the ServeMux_starGenType type
type MoqServeMux_starGenType_HandleFunc_anyParams struct {
	Recorder *MoqServeMux_starGenType_HandleFunc_fnRecorder
}

// NewMoqServeMux_starGenType creates a new moq of the ServeMux_starGenType
// type
func NewMoqServeMux_starGenType(scene *moq.Scene, config *moq.Config) *MoqServeMux_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqServeMux_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqServeMux_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Handler struct {
					Param1 moq.ParamIndexing
				}
				ServeHTTP struct {
					W      moq.ParamIndexing
					Param2 moq.ParamIndexing
				}
				Handle struct {
					Pattern moq.ParamIndexing
					Handler moq.ParamIndexing
				}
				HandleFunc struct {
					Pattern moq.ParamIndexing
					Handler moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Handler struct {
				Param1 moq.ParamIndexing
			}
			ServeHTTP struct {
				W      moq.ParamIndexing
				Param2 moq.ParamIndexing
			}
			Handle struct {
				Pattern moq.ParamIndexing
				Handler moq.ParamIndexing
			}
			HandleFunc struct {
				Pattern moq.ParamIndexing
				Handler moq.ParamIndexing
			}
		}{
			Handler: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
			},
			ServeHTTP: struct {
				W      moq.ParamIndexing
				Param2 moq.ParamIndexing
			}{
				W:      moq.ParamIndexByHash,
				Param2: moq.ParamIndexByHash,
			},
			Handle: struct {
				Pattern moq.ParamIndexing
				Handler moq.ParamIndexing
			}{
				Pattern: moq.ParamIndexByValue,
				Handler: moq.ParamIndexByHash,
			},
			HandleFunc: struct {
				Pattern moq.ParamIndexing
				Handler moq.ParamIndexing
			}{
				Pattern: moq.ParamIndexByValue,
				Handler: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the ServeMux_starGenType type
func (m *MoqServeMux_starGenType) Mock() *MoqServeMux_starGenType_mock { return m.Moq }

func (m *MoqServeMux_starGenType_mock) Handler(param1 *http.Request) (h http.Handler, pattern string) {
	m.Moq.Scene.T.Helper()
	params := MoqServeMux_starGenType_Handler_params{
		Param1: param1,
	}
	var results *MoqServeMux_starGenType_Handler_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Handler {
		paramsKey := m.Moq.ParamsKey_Handler(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Handler(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Handler(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Handler(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		h = result.Values.H
		pattern = result.Values.Pattern
	}
	if result.DoReturnFn != nil {
		h, pattern = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqServeMux_starGenType_mock) ServeHTTP(w http.ResponseWriter, param2 *http.Request) {
	m.Moq.Scene.T.Helper()
	params := MoqServeMux_starGenType_ServeHTTP_params{
		W:      w,
		Param2: param2,
	}
	var results *MoqServeMux_starGenType_ServeHTTP_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ServeHTTP {
		paramsKey := m.Moq.ParamsKey_ServeHTTP(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ServeHTTP(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ServeHTTP(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ServeHTTP(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(w, param2)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(w, param2)
	}
	return
}

func (m *MoqServeMux_starGenType_mock) Handle(pattern string, handler http.Handler) {
	m.Moq.Scene.T.Helper()
	params := MoqServeMux_starGenType_Handle_params{
		Pattern: pattern,
		Handler: handler,
	}
	var results *MoqServeMux_starGenType_Handle_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Handle {
		paramsKey := m.Moq.ParamsKey_Handle(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Handle(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Handle(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Handle(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(pattern, handler)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(pattern, handler)
	}
	return
}

func (m *MoqServeMux_starGenType_mock) HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request)) {
	m.Moq.Scene.T.Helper()
	params := MoqServeMux_starGenType_HandleFunc_params{
		Pattern: pattern,
		Handler: handler,
	}
	var results *MoqServeMux_starGenType_HandleFunc_results
	for _, resultsByParams := range m.Moq.ResultsByParams_HandleFunc {
		paramsKey := m.Moq.ParamsKey_HandleFunc(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_HandleFunc(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_HandleFunc(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_HandleFunc(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(pattern, handler)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(pattern, handler)
	}
	return
}

// OnCall returns the recorder implementation of the ServeMux_starGenType type
func (m *MoqServeMux_starGenType) OnCall() *MoqServeMux_starGenType_recorder {
	return &MoqServeMux_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqServeMux_starGenType_recorder) Handler(param1 *http.Request) *MoqServeMux_starGenType_Handler_fnRecorder {
	return &MoqServeMux_starGenType_Handler_fnRecorder{
		Params: MoqServeMux_starGenType_Handler_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServeMux_starGenType_Handler_fnRecorder) Any() *MoqServeMux_starGenType_Handler_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Handler(r.Params))
		return nil
	}
	return &MoqServeMux_starGenType_Handler_anyParams{Recorder: r}
}

func (a *MoqServeMux_starGenType_Handler_anyParams) Param1() *MoqServeMux_starGenType_Handler_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqServeMux_starGenType_Handler_fnRecorder) Seq() *MoqServeMux_starGenType_Handler_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Handler(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServeMux_starGenType_Handler_fnRecorder) NoSeq() *MoqServeMux_starGenType_Handler_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Handler(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServeMux_starGenType_Handler_fnRecorder) ReturnResults(h http.Handler, pattern string) *MoqServeMux_starGenType_Handler_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			H       http.Handler
			Pattern string
		}
		Sequence   uint32
		DoFn       MoqServeMux_starGenType_Handler_doFn
		DoReturnFn MoqServeMux_starGenType_Handler_doReturnFn
	}{
		Values: &struct {
			H       http.Handler
			Pattern string
		}{
			H:       h,
			Pattern: pattern,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServeMux_starGenType_Handler_fnRecorder) AndDo(fn MoqServeMux_starGenType_Handler_doFn) *MoqServeMux_starGenType_Handler_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServeMux_starGenType_Handler_fnRecorder) DoReturnResults(fn MoqServeMux_starGenType_Handler_doReturnFn) *MoqServeMux_starGenType_Handler_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			H       http.Handler
			Pattern string
		}
		Sequence   uint32
		DoFn       MoqServeMux_starGenType_Handler_doFn
		DoReturnFn MoqServeMux_starGenType_Handler_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServeMux_starGenType_Handler_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServeMux_starGenType_Handler_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Handler {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServeMux_starGenType_Handler_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServeMux_starGenType_Handler_paramsKey]*MoqServeMux_starGenType_Handler_results{},
		}
		r.Moq.ResultsByParams_Handler = append(r.Moq.ResultsByParams_Handler, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Handler) {
			copy(r.Moq.ResultsByParams_Handler[insertAt+1:], r.Moq.ResultsByParams_Handler[insertAt:0])
			r.Moq.ResultsByParams_Handler[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Handler(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServeMux_starGenType_Handler_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServeMux_starGenType_Handler_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServeMux_starGenType_Handler_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					H       http.Handler
					Pattern string
				}
				Sequence   uint32
				DoFn       MoqServeMux_starGenType_Handler_doFn
				DoReturnFn MoqServeMux_starGenType_Handler_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServeMux_starGenType) PrettyParams_Handler(params MoqServeMux_starGenType_Handler_params) string {
	return fmt.Sprintf("Handler(%#v)", params.Param1)
}

func (m *MoqServeMux_starGenType) ParamsKey_Handler(params MoqServeMux_starGenType_Handler_params, anyParams uint64) MoqServeMux_starGenType_Handler_paramsKey {
	m.Scene.T.Helper()
	var param1Used *http.Request
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Handler.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqServeMux_starGenType_Handler_paramsKey{
		Params: struct{ Param1 *http.Request }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqServeMux_starGenType_recorder) ServeHTTP(w http.ResponseWriter, param2 *http.Request) *MoqServeMux_starGenType_ServeHTTP_fnRecorder {
	return &MoqServeMux_starGenType_ServeHTTP_fnRecorder{
		Params: MoqServeMux_starGenType_ServeHTTP_params{
			W:      w,
			Param2: param2,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServeMux_starGenType_ServeHTTP_fnRecorder) Any() *MoqServeMux_starGenType_ServeHTTP_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ServeHTTP(r.Params))
		return nil
	}
	return &MoqServeMux_starGenType_ServeHTTP_anyParams{Recorder: r}
}

func (a *MoqServeMux_starGenType_ServeHTTP_anyParams) W() *MoqServeMux_starGenType_ServeHTTP_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqServeMux_starGenType_ServeHTTP_anyParams) Param2() *MoqServeMux_starGenType_ServeHTTP_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqServeMux_starGenType_ServeHTTP_fnRecorder) Seq() *MoqServeMux_starGenType_ServeHTTP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ServeHTTP(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServeMux_starGenType_ServeHTTP_fnRecorder) NoSeq() *MoqServeMux_starGenType_ServeHTTP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ServeHTTP(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServeMux_starGenType_ServeHTTP_fnRecorder) ReturnResults() *MoqServeMux_starGenType_ServeHTTP_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServeMux_starGenType_ServeHTTP_doFn
		DoReturnFn MoqServeMux_starGenType_ServeHTTP_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServeMux_starGenType_ServeHTTP_fnRecorder) AndDo(fn MoqServeMux_starGenType_ServeHTTP_doFn) *MoqServeMux_starGenType_ServeHTTP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServeMux_starGenType_ServeHTTP_fnRecorder) DoReturnResults(fn MoqServeMux_starGenType_ServeHTTP_doReturnFn) *MoqServeMux_starGenType_ServeHTTP_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServeMux_starGenType_ServeHTTP_doFn
		DoReturnFn MoqServeMux_starGenType_ServeHTTP_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServeMux_starGenType_ServeHTTP_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServeMux_starGenType_ServeHTTP_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ServeHTTP {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServeMux_starGenType_ServeHTTP_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServeMux_starGenType_ServeHTTP_paramsKey]*MoqServeMux_starGenType_ServeHTTP_results{},
		}
		r.Moq.ResultsByParams_ServeHTTP = append(r.Moq.ResultsByParams_ServeHTTP, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ServeHTTP) {
			copy(r.Moq.ResultsByParams_ServeHTTP[insertAt+1:], r.Moq.ResultsByParams_ServeHTTP[insertAt:0])
			r.Moq.ResultsByParams_ServeHTTP[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ServeHTTP(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServeMux_starGenType_ServeHTTP_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServeMux_starGenType_ServeHTTP_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServeMux_starGenType_ServeHTTP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqServeMux_starGenType_ServeHTTP_doFn
				DoReturnFn MoqServeMux_starGenType_ServeHTTP_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServeMux_starGenType) PrettyParams_ServeHTTP(params MoqServeMux_starGenType_ServeHTTP_params) string {
	return fmt.Sprintf("ServeHTTP(%#v, %#v)", params.W, params.Param2)
}

func (m *MoqServeMux_starGenType) ParamsKey_ServeHTTP(params MoqServeMux_starGenType_ServeHTTP_params, anyParams uint64) MoqServeMux_starGenType_ServeHTTP_paramsKey {
	m.Scene.T.Helper()
	var wUsed http.ResponseWriter
	var wUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ServeHTTP.W == moq.ParamIndexByValue {
			wUsed = params.W
		} else {
			wUsedHash = hash.DeepHash(params.W)
		}
	}
	var param2Used *http.Request
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.ServeHTTP.Param2 == moq.ParamIndexByValue {
			param2Used = params.Param2
		} else {
			param2UsedHash = hash.DeepHash(params.Param2)
		}
	}
	return MoqServeMux_starGenType_ServeHTTP_paramsKey{
		Params: struct {
			W      http.ResponseWriter
			Param2 *http.Request
		}{
			W:      wUsed,
			Param2: param2Used,
		},
		Hashes: struct {
			W      hash.Hash
			Param2 hash.Hash
		}{
			W:      wUsedHash,
			Param2: param2UsedHash,
		},
	}
}

func (m *MoqServeMux_starGenType_recorder) Handle(pattern string, handler http.Handler) *MoqServeMux_starGenType_Handle_fnRecorder {
	return &MoqServeMux_starGenType_Handle_fnRecorder{
		Params: MoqServeMux_starGenType_Handle_params{
			Pattern: pattern,
			Handler: handler,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServeMux_starGenType_Handle_fnRecorder) Any() *MoqServeMux_starGenType_Handle_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Handle(r.Params))
		return nil
	}
	return &MoqServeMux_starGenType_Handle_anyParams{Recorder: r}
}

func (a *MoqServeMux_starGenType_Handle_anyParams) Pattern() *MoqServeMux_starGenType_Handle_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqServeMux_starGenType_Handle_anyParams) Handler() *MoqServeMux_starGenType_Handle_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqServeMux_starGenType_Handle_fnRecorder) Seq() *MoqServeMux_starGenType_Handle_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Handle(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServeMux_starGenType_Handle_fnRecorder) NoSeq() *MoqServeMux_starGenType_Handle_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Handle(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServeMux_starGenType_Handle_fnRecorder) ReturnResults() *MoqServeMux_starGenType_Handle_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServeMux_starGenType_Handle_doFn
		DoReturnFn MoqServeMux_starGenType_Handle_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServeMux_starGenType_Handle_fnRecorder) AndDo(fn MoqServeMux_starGenType_Handle_doFn) *MoqServeMux_starGenType_Handle_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServeMux_starGenType_Handle_fnRecorder) DoReturnResults(fn MoqServeMux_starGenType_Handle_doReturnFn) *MoqServeMux_starGenType_Handle_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServeMux_starGenType_Handle_doFn
		DoReturnFn MoqServeMux_starGenType_Handle_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServeMux_starGenType_Handle_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServeMux_starGenType_Handle_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Handle {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServeMux_starGenType_Handle_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServeMux_starGenType_Handle_paramsKey]*MoqServeMux_starGenType_Handle_results{},
		}
		r.Moq.ResultsByParams_Handle = append(r.Moq.ResultsByParams_Handle, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Handle) {
			copy(r.Moq.ResultsByParams_Handle[insertAt+1:], r.Moq.ResultsByParams_Handle[insertAt:0])
			r.Moq.ResultsByParams_Handle[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Handle(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServeMux_starGenType_Handle_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServeMux_starGenType_Handle_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServeMux_starGenType_Handle_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqServeMux_starGenType_Handle_doFn
				DoReturnFn MoqServeMux_starGenType_Handle_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServeMux_starGenType) PrettyParams_Handle(params MoqServeMux_starGenType_Handle_params) string {
	return fmt.Sprintf("Handle(%#v, %#v)", params.Pattern, params.Handler)
}

func (m *MoqServeMux_starGenType) ParamsKey_Handle(params MoqServeMux_starGenType_Handle_params, anyParams uint64) MoqServeMux_starGenType_Handle_paramsKey {
	m.Scene.T.Helper()
	var patternUsed string
	var patternUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Handle.Pattern == moq.ParamIndexByValue {
			patternUsed = params.Pattern
		} else {
			patternUsedHash = hash.DeepHash(params.Pattern)
		}
	}
	var handlerUsed http.Handler
	var handlerUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Handle.Handler == moq.ParamIndexByValue {
			handlerUsed = params.Handler
		} else {
			handlerUsedHash = hash.DeepHash(params.Handler)
		}
	}
	return MoqServeMux_starGenType_Handle_paramsKey{
		Params: struct {
			Pattern string
			Handler http.Handler
		}{
			Pattern: patternUsed,
			Handler: handlerUsed,
		},
		Hashes: struct {
			Pattern hash.Hash
			Handler hash.Hash
		}{
			Pattern: patternUsedHash,
			Handler: handlerUsedHash,
		},
	}
}

func (m *MoqServeMux_starGenType_recorder) HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request)) *MoqServeMux_starGenType_HandleFunc_fnRecorder {
	return &MoqServeMux_starGenType_HandleFunc_fnRecorder{
		Params: MoqServeMux_starGenType_HandleFunc_params{
			Pattern: pattern,
			Handler: handler,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqServeMux_starGenType_HandleFunc_fnRecorder) Any() *MoqServeMux_starGenType_HandleFunc_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_HandleFunc(r.Params))
		return nil
	}
	return &MoqServeMux_starGenType_HandleFunc_anyParams{Recorder: r}
}

func (a *MoqServeMux_starGenType_HandleFunc_anyParams) Pattern() *MoqServeMux_starGenType_HandleFunc_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqServeMux_starGenType_HandleFunc_anyParams) Handler() *MoqServeMux_starGenType_HandleFunc_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqServeMux_starGenType_HandleFunc_fnRecorder) Seq() *MoqServeMux_starGenType_HandleFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_HandleFunc(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqServeMux_starGenType_HandleFunc_fnRecorder) NoSeq() *MoqServeMux_starGenType_HandleFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_HandleFunc(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqServeMux_starGenType_HandleFunc_fnRecorder) ReturnResults() *MoqServeMux_starGenType_HandleFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServeMux_starGenType_HandleFunc_doFn
		DoReturnFn MoqServeMux_starGenType_HandleFunc_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqServeMux_starGenType_HandleFunc_fnRecorder) AndDo(fn MoqServeMux_starGenType_HandleFunc_doFn) *MoqServeMux_starGenType_HandleFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqServeMux_starGenType_HandleFunc_fnRecorder) DoReturnResults(fn MoqServeMux_starGenType_HandleFunc_doReturnFn) *MoqServeMux_starGenType_HandleFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqServeMux_starGenType_HandleFunc_doFn
		DoReturnFn MoqServeMux_starGenType_HandleFunc_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqServeMux_starGenType_HandleFunc_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqServeMux_starGenType_HandleFunc_resultsByParams
	for n, res := range r.Moq.ResultsByParams_HandleFunc {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqServeMux_starGenType_HandleFunc_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqServeMux_starGenType_HandleFunc_paramsKey]*MoqServeMux_starGenType_HandleFunc_results{},
		}
		r.Moq.ResultsByParams_HandleFunc = append(r.Moq.ResultsByParams_HandleFunc, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_HandleFunc) {
			copy(r.Moq.ResultsByParams_HandleFunc[insertAt+1:], r.Moq.ResultsByParams_HandleFunc[insertAt:0])
			r.Moq.ResultsByParams_HandleFunc[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_HandleFunc(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqServeMux_starGenType_HandleFunc_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqServeMux_starGenType_HandleFunc_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqServeMux_starGenType_HandleFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqServeMux_starGenType_HandleFunc_doFn
				DoReturnFn MoqServeMux_starGenType_HandleFunc_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqServeMux_starGenType) PrettyParams_HandleFunc(params MoqServeMux_starGenType_HandleFunc_params) string {
	return fmt.Sprintf("HandleFunc(%#v, %#v)", params.Pattern, params.Handler)
}

func (m *MoqServeMux_starGenType) ParamsKey_HandleFunc(params MoqServeMux_starGenType_HandleFunc_params, anyParams uint64) MoqServeMux_starGenType_HandleFunc_paramsKey {
	m.Scene.T.Helper()
	var patternUsed string
	var patternUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.HandleFunc.Pattern == moq.ParamIndexByValue {
			patternUsed = params.Pattern
		} else {
			patternUsedHash = hash.DeepHash(params.Pattern)
		}
	}
	var handlerUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.HandleFunc.Handler == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The handler parameter of the HandleFunc function can't be indexed by value")
		}
		handlerUsedHash = hash.DeepHash(params.Handler)
	}
	return MoqServeMux_starGenType_HandleFunc_paramsKey{
		Params: struct{ Pattern string }{
			Pattern: patternUsed,
		},
		Hashes: struct {
			Pattern hash.Hash
			Handler hash.Hash
		}{
			Pattern: patternUsedHash,
			Handler: handlerUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqServeMux_starGenType) Reset() {
	m.ResultsByParams_Handler = nil
	m.ResultsByParams_ServeHTTP = nil
	m.ResultsByParams_Handle = nil
	m.ResultsByParams_HandleFunc = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqServeMux_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Handler {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Handler(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ServeHTTP {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ServeHTTP(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Handle {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Handle(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_HandleFunc {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_HandleFunc(results.Params))
			}
		}
	}
}
