// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package cookiejar

import (
	"fmt"
	"math/bits"
	"net/http"
	"net/url"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that cookiejar.Jar_starGenType is
// mocked completely
var _ Jar_starGenType = (*MoqJar_starGenType_mock)(nil)

// Jar_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Jar_starGenType interface {
	Cookies(u *url.URL) (cookies []*http.Cookie)
	SetCookies(u *url.URL, cookies []*http.Cookie)
}

// MoqJar_starGenType holds the state of a moq of the Jar_starGenType type
type MoqJar_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqJar_starGenType_mock

	ResultsByParams_Cookies    []MoqJar_starGenType_Cookies_resultsByParams
	ResultsByParams_SetCookies []MoqJar_starGenType_SetCookies_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Cookies struct {
				U moq.ParamIndexing
			}
			SetCookies struct {
				U       moq.ParamIndexing
				Cookies moq.ParamIndexing
			}
		}
	}
	// MoqJar_starGenType_mock isolates the mock interface of the Jar_starGenType
}

// type
type MoqJar_starGenType_mock struct {
	Moq *MoqJar_starGenType
}

// MoqJar_starGenType_recorder isolates the recorder interface of the
// Jar_starGenType type
type MoqJar_starGenType_recorder struct {
	Moq *MoqJar_starGenType
}

// MoqJar_starGenType_Cookies_params holds the params of the Jar_starGenType
// type
type MoqJar_starGenType_Cookies_params struct{ U *url.URL }

// MoqJar_starGenType_Cookies_paramsKey holds the map key params of the
// Jar_starGenType type
type MoqJar_starGenType_Cookies_paramsKey struct {
	Params struct{ U *url.URL }
	Hashes struct{ U hash.Hash }
}

// MoqJar_starGenType_Cookies_resultsByParams contains the results for a given
// set of parameters for the Jar_starGenType type
type MoqJar_starGenType_Cookies_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqJar_starGenType_Cookies_paramsKey]*MoqJar_starGenType_Cookies_results
}

// MoqJar_starGenType_Cookies_doFn defines the type of function needed when
// calling AndDo for the Jar_starGenType type
type MoqJar_starGenType_Cookies_doFn func(u *url.URL)

// MoqJar_starGenType_Cookies_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Jar_starGenType type
type MoqJar_starGenType_Cookies_doReturnFn func(u *url.URL) (cookies []*http.Cookie)

// MoqJar_starGenType_Cookies_results holds the results of the Jar_starGenType
// type
type MoqJar_starGenType_Cookies_results struct {
	Params  MoqJar_starGenType_Cookies_params
	Results []struct {
		Values     *struct{ Cookies []*http.Cookie }
		Sequence   uint32
		DoFn       MoqJar_starGenType_Cookies_doFn
		DoReturnFn MoqJar_starGenType_Cookies_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqJar_starGenType_Cookies_fnRecorder routes recorded function calls to the
// MoqJar_starGenType moq
type MoqJar_starGenType_Cookies_fnRecorder struct {
	Params    MoqJar_starGenType_Cookies_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqJar_starGenType_Cookies_results
	Moq       *MoqJar_starGenType
}

// MoqJar_starGenType_Cookies_anyParams isolates the any params functions of
// the Jar_starGenType type
type MoqJar_starGenType_Cookies_anyParams struct {
	Recorder *MoqJar_starGenType_Cookies_fnRecorder
}

// MoqJar_starGenType_SetCookies_params holds the params of the Jar_starGenType
// type
type MoqJar_starGenType_SetCookies_params struct {
	U       *url.URL
	Cookies []*http.Cookie
}

// MoqJar_starGenType_SetCookies_paramsKey holds the map key params of the
// Jar_starGenType type
type MoqJar_starGenType_SetCookies_paramsKey struct {
	Params struct{ U *url.URL }
	Hashes struct {
		U       hash.Hash
		Cookies hash.Hash
	}
}

// MoqJar_starGenType_SetCookies_resultsByParams contains the results for a
// given set of parameters for the Jar_starGenType type
type MoqJar_starGenType_SetCookies_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqJar_starGenType_SetCookies_paramsKey]*MoqJar_starGenType_SetCookies_results
}

// MoqJar_starGenType_SetCookies_doFn defines the type of function needed when
// calling AndDo for the Jar_starGenType type
type MoqJar_starGenType_SetCookies_doFn func(u *url.URL, cookies []*http.Cookie)

// MoqJar_starGenType_SetCookies_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Jar_starGenType type
type MoqJar_starGenType_SetCookies_doReturnFn func(u *url.URL, cookies []*http.Cookie)

// MoqJar_starGenType_SetCookies_results holds the results of the
// Jar_starGenType type
type MoqJar_starGenType_SetCookies_results struct {
	Params  MoqJar_starGenType_SetCookies_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqJar_starGenType_SetCookies_doFn
		DoReturnFn MoqJar_starGenType_SetCookies_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqJar_starGenType_SetCookies_fnRecorder routes recorded function calls to
// the MoqJar_starGenType moq
type MoqJar_starGenType_SetCookies_fnRecorder struct {
	Params    MoqJar_starGenType_SetCookies_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqJar_starGenType_SetCookies_results
	Moq       *MoqJar_starGenType
}

// MoqJar_starGenType_SetCookies_anyParams isolates the any params functions of
// the Jar_starGenType type
type MoqJar_starGenType_SetCookies_anyParams struct {
	Recorder *MoqJar_starGenType_SetCookies_fnRecorder
}

// NewMoqJar_starGenType creates a new moq of the Jar_starGenType type
func NewMoqJar_starGenType(scene *moq.Scene, config *moq.Config) *MoqJar_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqJar_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqJar_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Cookies struct {
					U moq.ParamIndexing
				}
				SetCookies struct {
					U       moq.ParamIndexing
					Cookies moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Cookies struct {
				U moq.ParamIndexing
			}
			SetCookies struct {
				U       moq.ParamIndexing
				Cookies moq.ParamIndexing
			}
		}{
			Cookies: struct {
				U moq.ParamIndexing
			}{
				U: moq.ParamIndexByHash,
			},
			SetCookies: struct {
				U       moq.ParamIndexing
				Cookies moq.ParamIndexing
			}{
				U:       moq.ParamIndexByHash,
				Cookies: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Jar_starGenType type
func (m *MoqJar_starGenType) Mock() *MoqJar_starGenType_mock { return m.Moq }

func (m *MoqJar_starGenType_mock) Cookies(u *url.URL) (cookies []*http.Cookie) {
	m.Moq.Scene.T.Helper()
	params := MoqJar_starGenType_Cookies_params{
		U: u,
	}
	var results *MoqJar_starGenType_Cookies_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Cookies {
		paramsKey := m.Moq.ParamsKey_Cookies(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Cookies(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Cookies(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Cookies(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(u)
	}

	if result.Values != nil {
		cookies = result.Values.Cookies
	}
	if result.DoReturnFn != nil {
		cookies = result.DoReturnFn(u)
	}
	return
}

func (m *MoqJar_starGenType_mock) SetCookies(u *url.URL, cookies []*http.Cookie) {
	m.Moq.Scene.T.Helper()
	params := MoqJar_starGenType_SetCookies_params{
		U:       u,
		Cookies: cookies,
	}
	var results *MoqJar_starGenType_SetCookies_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetCookies {
		paramsKey := m.Moq.ParamsKey_SetCookies(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetCookies(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetCookies(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetCookies(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(u, cookies)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(u, cookies)
	}
	return
}

// OnCall returns the recorder implementation of the Jar_starGenType type
func (m *MoqJar_starGenType) OnCall() *MoqJar_starGenType_recorder {
	return &MoqJar_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqJar_starGenType_recorder) Cookies(u *url.URL) *MoqJar_starGenType_Cookies_fnRecorder {
	return &MoqJar_starGenType_Cookies_fnRecorder{
		Params: MoqJar_starGenType_Cookies_params{
			U: u,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqJar_starGenType_Cookies_fnRecorder) Any() *MoqJar_starGenType_Cookies_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Cookies(r.Params))
		return nil
	}
	return &MoqJar_starGenType_Cookies_anyParams{Recorder: r}
}

func (a *MoqJar_starGenType_Cookies_anyParams) U() *MoqJar_starGenType_Cookies_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqJar_starGenType_Cookies_fnRecorder) Seq() *MoqJar_starGenType_Cookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Cookies(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqJar_starGenType_Cookies_fnRecorder) NoSeq() *MoqJar_starGenType_Cookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Cookies(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqJar_starGenType_Cookies_fnRecorder) ReturnResults(cookies []*http.Cookie) *MoqJar_starGenType_Cookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Cookies []*http.Cookie }
		Sequence   uint32
		DoFn       MoqJar_starGenType_Cookies_doFn
		DoReturnFn MoqJar_starGenType_Cookies_doReturnFn
	}{
		Values: &struct{ Cookies []*http.Cookie }{
			Cookies: cookies,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqJar_starGenType_Cookies_fnRecorder) AndDo(fn MoqJar_starGenType_Cookies_doFn) *MoqJar_starGenType_Cookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqJar_starGenType_Cookies_fnRecorder) DoReturnResults(fn MoqJar_starGenType_Cookies_doReturnFn) *MoqJar_starGenType_Cookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Cookies []*http.Cookie }
		Sequence   uint32
		DoFn       MoqJar_starGenType_Cookies_doFn
		DoReturnFn MoqJar_starGenType_Cookies_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqJar_starGenType_Cookies_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqJar_starGenType_Cookies_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Cookies {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqJar_starGenType_Cookies_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqJar_starGenType_Cookies_paramsKey]*MoqJar_starGenType_Cookies_results{},
		}
		r.Moq.ResultsByParams_Cookies = append(r.Moq.ResultsByParams_Cookies, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Cookies) {
			copy(r.Moq.ResultsByParams_Cookies[insertAt+1:], r.Moq.ResultsByParams_Cookies[insertAt:0])
			r.Moq.ResultsByParams_Cookies[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Cookies(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqJar_starGenType_Cookies_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqJar_starGenType_Cookies_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqJar_starGenType_Cookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ Cookies []*http.Cookie }
				Sequence   uint32
				DoFn       MoqJar_starGenType_Cookies_doFn
				DoReturnFn MoqJar_starGenType_Cookies_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqJar_starGenType) PrettyParams_Cookies(params MoqJar_starGenType_Cookies_params) string {
	return fmt.Sprintf("Cookies(%#v)", params.U)
}

func (m *MoqJar_starGenType) ParamsKey_Cookies(params MoqJar_starGenType_Cookies_params, anyParams uint64) MoqJar_starGenType_Cookies_paramsKey {
	m.Scene.T.Helper()
	var uUsed *url.URL
	var uUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Cookies.U == moq.ParamIndexByValue {
			uUsed = params.U
		} else {
			uUsedHash = hash.DeepHash(params.U)
		}
	}
	return MoqJar_starGenType_Cookies_paramsKey{
		Params: struct{ U *url.URL }{
			U: uUsed,
		},
		Hashes: struct{ U hash.Hash }{
			U: uUsedHash,
		},
	}
}

func (m *MoqJar_starGenType_recorder) SetCookies(u *url.URL, cookies []*http.Cookie) *MoqJar_starGenType_SetCookies_fnRecorder {
	return &MoqJar_starGenType_SetCookies_fnRecorder{
		Params: MoqJar_starGenType_SetCookies_params{
			U:       u,
			Cookies: cookies,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqJar_starGenType_SetCookies_fnRecorder) Any() *MoqJar_starGenType_SetCookies_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetCookies(r.Params))
		return nil
	}
	return &MoqJar_starGenType_SetCookies_anyParams{Recorder: r}
}

func (a *MoqJar_starGenType_SetCookies_anyParams) U() *MoqJar_starGenType_SetCookies_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqJar_starGenType_SetCookies_anyParams) Cookies() *MoqJar_starGenType_SetCookies_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqJar_starGenType_SetCookies_fnRecorder) Seq() *MoqJar_starGenType_SetCookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetCookies(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqJar_starGenType_SetCookies_fnRecorder) NoSeq() *MoqJar_starGenType_SetCookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetCookies(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqJar_starGenType_SetCookies_fnRecorder) ReturnResults() *MoqJar_starGenType_SetCookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqJar_starGenType_SetCookies_doFn
		DoReturnFn MoqJar_starGenType_SetCookies_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqJar_starGenType_SetCookies_fnRecorder) AndDo(fn MoqJar_starGenType_SetCookies_doFn) *MoqJar_starGenType_SetCookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqJar_starGenType_SetCookies_fnRecorder) DoReturnResults(fn MoqJar_starGenType_SetCookies_doReturnFn) *MoqJar_starGenType_SetCookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqJar_starGenType_SetCookies_doFn
		DoReturnFn MoqJar_starGenType_SetCookies_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqJar_starGenType_SetCookies_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqJar_starGenType_SetCookies_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetCookies {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqJar_starGenType_SetCookies_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqJar_starGenType_SetCookies_paramsKey]*MoqJar_starGenType_SetCookies_results{},
		}
		r.Moq.ResultsByParams_SetCookies = append(r.Moq.ResultsByParams_SetCookies, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetCookies) {
			copy(r.Moq.ResultsByParams_SetCookies[insertAt+1:], r.Moq.ResultsByParams_SetCookies[insertAt:0])
			r.Moq.ResultsByParams_SetCookies[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetCookies(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqJar_starGenType_SetCookies_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqJar_starGenType_SetCookies_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqJar_starGenType_SetCookies_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqJar_starGenType_SetCookies_doFn
				DoReturnFn MoqJar_starGenType_SetCookies_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqJar_starGenType) PrettyParams_SetCookies(params MoqJar_starGenType_SetCookies_params) string {
	return fmt.Sprintf("SetCookies(%#v, %#v)", params.U, params.Cookies)
}

func (m *MoqJar_starGenType) ParamsKey_SetCookies(params MoqJar_starGenType_SetCookies_params, anyParams uint64) MoqJar_starGenType_SetCookies_paramsKey {
	m.Scene.T.Helper()
	var uUsed *url.URL
	var uUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetCookies.U == moq.ParamIndexByValue {
			uUsed = params.U
		} else {
			uUsedHash = hash.DeepHash(params.U)
		}
	}
	var cookiesUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.SetCookies.Cookies == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The cookies parameter of the SetCookies function can't be indexed by value")
		}
		cookiesUsedHash = hash.DeepHash(params.Cookies)
	}
	return MoqJar_starGenType_SetCookies_paramsKey{
		Params: struct{ U *url.URL }{
			U: uUsed,
		},
		Hashes: struct {
			U       hash.Hash
			Cookies hash.Hash
		}{
			U:       uUsedHash,
			Cookies: cookiesUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqJar_starGenType) Reset() {
	m.ResultsByParams_Cookies = nil
	m.ResultsByParams_SetCookies = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqJar_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Cookies {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Cookies(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetCookies {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetCookies(results.Params))
			}
		}
	}
}
