// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package net

import (
	"fmt"
	"math/bits"
	"net"
	"sync/atomic"
	"time"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that net.Conn is mocked completely
var _ net.Conn = (*MoqConn_mock)(nil)

// MoqConn holds the state of a moq of the Conn type
type MoqConn struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqConn_mock

	ResultsByParams_Read             []MoqConn_Read_resultsByParams
	ResultsByParams_Write            []MoqConn_Write_resultsByParams
	ResultsByParams_Close            []MoqConn_Close_resultsByParams
	ResultsByParams_LocalAddr        []MoqConn_LocalAddr_resultsByParams
	ResultsByParams_RemoteAddr       []MoqConn_RemoteAddr_resultsByParams
	ResultsByParams_SetDeadline      []MoqConn_SetDeadline_resultsByParams
	ResultsByParams_SetReadDeadline  []MoqConn_SetReadDeadline_resultsByParams
	ResultsByParams_SetWriteDeadline []MoqConn_SetWriteDeadline_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Read struct {
				B moq.ParamIndexing
			}
			Write struct {
				B moq.ParamIndexing
			}
			Close       struct{}
			LocalAddr   struct{}
			RemoteAddr  struct{}
			SetDeadline struct {
				T moq.ParamIndexing
			}
			SetReadDeadline struct {
				T moq.ParamIndexing
			}
			SetWriteDeadline struct {
				T moq.ParamIndexing
			}
		}
	}
	// MoqConn_mock isolates the mock interface of the Conn type
}

type MoqConn_mock struct {
	Moq *MoqConn
}

// MoqConn_recorder isolates the recorder interface of the Conn type
type MoqConn_recorder struct {
	Moq *MoqConn
}

// MoqConn_Read_params holds the params of the Conn type
type MoqConn_Read_params struct{ B []byte }

// MoqConn_Read_paramsKey holds the map key params of the Conn type
type MoqConn_Read_paramsKey struct {
	Params struct{}
	Hashes struct{ B hash.Hash }
}

// MoqConn_Read_resultsByParams contains the results for a given set of
// parameters for the Conn type
type MoqConn_Read_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_Read_paramsKey]*MoqConn_Read_results
}

// MoqConn_Read_doFn defines the type of function needed when calling AndDo for
// the Conn type
type MoqConn_Read_doFn func(b []byte)

// MoqConn_Read_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Conn type
type MoqConn_Read_doReturnFn func(b []byte) (n int, err error)

// MoqConn_Read_results holds the results of the Conn type
type MoqConn_Read_results struct {
	Params  MoqConn_Read_params
	Results []struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqConn_Read_doFn
		DoReturnFn MoqConn_Read_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_Read_fnRecorder routes recorded function calls to the MoqConn moq
type MoqConn_Read_fnRecorder struct {
	Params    MoqConn_Read_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_Read_results
	Moq       *MoqConn
}

// MoqConn_Read_anyParams isolates the any params functions of the Conn type
type MoqConn_Read_anyParams struct {
	Recorder *MoqConn_Read_fnRecorder
}

// MoqConn_Write_params holds the params of the Conn type
type MoqConn_Write_params struct{ B []byte }

// MoqConn_Write_paramsKey holds the map key params of the Conn type
type MoqConn_Write_paramsKey struct {
	Params struct{}
	Hashes struct{ B hash.Hash }
}

// MoqConn_Write_resultsByParams contains the results for a given set of
// parameters for the Conn type
type MoqConn_Write_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_Write_paramsKey]*MoqConn_Write_results
}

// MoqConn_Write_doFn defines the type of function needed when calling AndDo
// for the Conn type
type MoqConn_Write_doFn func(b []byte)

// MoqConn_Write_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Conn type
type MoqConn_Write_doReturnFn func(b []byte) (n int, err error)

// MoqConn_Write_results holds the results of the Conn type
type MoqConn_Write_results struct {
	Params  MoqConn_Write_params
	Results []struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqConn_Write_doFn
		DoReturnFn MoqConn_Write_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_Write_fnRecorder routes recorded function calls to the MoqConn moq
type MoqConn_Write_fnRecorder struct {
	Params    MoqConn_Write_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_Write_results
	Moq       *MoqConn
}

// MoqConn_Write_anyParams isolates the any params functions of the Conn type
type MoqConn_Write_anyParams struct {
	Recorder *MoqConn_Write_fnRecorder
}

// MoqConn_Close_params holds the params of the Conn type
type MoqConn_Close_params struct{}

// MoqConn_Close_paramsKey holds the map key params of the Conn type
type MoqConn_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqConn_Close_resultsByParams contains the results for a given set of
// parameters for the Conn type
type MoqConn_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_Close_paramsKey]*MoqConn_Close_results
}

// MoqConn_Close_doFn defines the type of function needed when calling AndDo
// for the Conn type
type MoqConn_Close_doFn func()

// MoqConn_Close_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Conn type
type MoqConn_Close_doReturnFn func() error

// MoqConn_Close_results holds the results of the Conn type
type MoqConn_Close_results struct {
	Params  MoqConn_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_Close_doFn
		DoReturnFn MoqConn_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_Close_fnRecorder routes recorded function calls to the MoqConn moq
type MoqConn_Close_fnRecorder struct {
	Params    MoqConn_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_Close_results
	Moq       *MoqConn
}

// MoqConn_Close_anyParams isolates the any params functions of the Conn type
type MoqConn_Close_anyParams struct {
	Recorder *MoqConn_Close_fnRecorder
}

// MoqConn_LocalAddr_params holds the params of the Conn type
type MoqConn_LocalAddr_params struct{}

// MoqConn_LocalAddr_paramsKey holds the map key params of the Conn type
type MoqConn_LocalAddr_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqConn_LocalAddr_resultsByParams contains the results for a given set of
// parameters for the Conn type
type MoqConn_LocalAddr_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_LocalAddr_paramsKey]*MoqConn_LocalAddr_results
}

// MoqConn_LocalAddr_doFn defines the type of function needed when calling
// AndDo for the Conn type
type MoqConn_LocalAddr_doFn func()

// MoqConn_LocalAddr_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Conn type
type MoqConn_LocalAddr_doReturnFn func() net.Addr

// MoqConn_LocalAddr_results holds the results of the Conn type
type MoqConn_LocalAddr_results struct {
	Params  MoqConn_LocalAddr_params
	Results []struct {
		Values *struct {
			Result1 net.Addr
		}
		Sequence   uint32
		DoFn       MoqConn_LocalAddr_doFn
		DoReturnFn MoqConn_LocalAddr_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_LocalAddr_fnRecorder routes recorded function calls to the MoqConn
// moq
type MoqConn_LocalAddr_fnRecorder struct {
	Params    MoqConn_LocalAddr_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_LocalAddr_results
	Moq       *MoqConn
}

// MoqConn_LocalAddr_anyParams isolates the any params functions of the Conn
// type
type MoqConn_LocalAddr_anyParams struct {
	Recorder *MoqConn_LocalAddr_fnRecorder
}

// MoqConn_RemoteAddr_params holds the params of the Conn type
type MoqConn_RemoteAddr_params struct{}

// MoqConn_RemoteAddr_paramsKey holds the map key params of the Conn type
type MoqConn_RemoteAddr_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqConn_RemoteAddr_resultsByParams contains the results for a given set of
// parameters for the Conn type
type MoqConn_RemoteAddr_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_RemoteAddr_paramsKey]*MoqConn_RemoteAddr_results
}

// MoqConn_RemoteAddr_doFn defines the type of function needed when calling
// AndDo for the Conn type
type MoqConn_RemoteAddr_doFn func()

// MoqConn_RemoteAddr_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Conn type
type MoqConn_RemoteAddr_doReturnFn func() net.Addr

// MoqConn_RemoteAddr_results holds the results of the Conn type
type MoqConn_RemoteAddr_results struct {
	Params  MoqConn_RemoteAddr_params
	Results []struct {
		Values *struct {
			Result1 net.Addr
		}
		Sequence   uint32
		DoFn       MoqConn_RemoteAddr_doFn
		DoReturnFn MoqConn_RemoteAddr_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_RemoteAddr_fnRecorder routes recorded function calls to the MoqConn
// moq
type MoqConn_RemoteAddr_fnRecorder struct {
	Params    MoqConn_RemoteAddr_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_RemoteAddr_results
	Moq       *MoqConn
}

// MoqConn_RemoteAddr_anyParams isolates the any params functions of the Conn
// type
type MoqConn_RemoteAddr_anyParams struct {
	Recorder *MoqConn_RemoteAddr_fnRecorder
}

// MoqConn_SetDeadline_params holds the params of the Conn type
type MoqConn_SetDeadline_params struct{ T time.Time }

// MoqConn_SetDeadline_paramsKey holds the map key params of the Conn type
type MoqConn_SetDeadline_paramsKey struct {
	Params struct{ T time.Time }
	Hashes struct{ T hash.Hash }
}

// MoqConn_SetDeadline_resultsByParams contains the results for a given set of
// parameters for the Conn type
type MoqConn_SetDeadline_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_SetDeadline_paramsKey]*MoqConn_SetDeadline_results
}

// MoqConn_SetDeadline_doFn defines the type of function needed when calling
// AndDo for the Conn type
type MoqConn_SetDeadline_doFn func(t time.Time)

// MoqConn_SetDeadline_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Conn type
type MoqConn_SetDeadline_doReturnFn func(t time.Time) error

// MoqConn_SetDeadline_results holds the results of the Conn type
type MoqConn_SetDeadline_results struct {
	Params  MoqConn_SetDeadline_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_SetDeadline_doFn
		DoReturnFn MoqConn_SetDeadline_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_SetDeadline_fnRecorder routes recorded function calls to the MoqConn
// moq
type MoqConn_SetDeadline_fnRecorder struct {
	Params    MoqConn_SetDeadline_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_SetDeadline_results
	Moq       *MoqConn
}

// MoqConn_SetDeadline_anyParams isolates the any params functions of the Conn
// type
type MoqConn_SetDeadline_anyParams struct {
	Recorder *MoqConn_SetDeadline_fnRecorder
}

// MoqConn_SetReadDeadline_params holds the params of the Conn type
type MoqConn_SetReadDeadline_params struct{ T time.Time }

// MoqConn_SetReadDeadline_paramsKey holds the map key params of the Conn type
type MoqConn_SetReadDeadline_paramsKey struct {
	Params struct{ T time.Time }
	Hashes struct{ T hash.Hash }
}

// MoqConn_SetReadDeadline_resultsByParams contains the results for a given set
// of parameters for the Conn type
type MoqConn_SetReadDeadline_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_SetReadDeadline_paramsKey]*MoqConn_SetReadDeadline_results
}

// MoqConn_SetReadDeadline_doFn defines the type of function needed when
// calling AndDo for the Conn type
type MoqConn_SetReadDeadline_doFn func(t time.Time)

// MoqConn_SetReadDeadline_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Conn type
type MoqConn_SetReadDeadline_doReturnFn func(t time.Time) error

// MoqConn_SetReadDeadline_results holds the results of the Conn type
type MoqConn_SetReadDeadline_results struct {
	Params  MoqConn_SetReadDeadline_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_SetReadDeadline_doFn
		DoReturnFn MoqConn_SetReadDeadline_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_SetReadDeadline_fnRecorder routes recorded function calls to the
// MoqConn moq
type MoqConn_SetReadDeadline_fnRecorder struct {
	Params    MoqConn_SetReadDeadline_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_SetReadDeadline_results
	Moq       *MoqConn
}

// MoqConn_SetReadDeadline_anyParams isolates the any params functions of the
// Conn type
type MoqConn_SetReadDeadline_anyParams struct {
	Recorder *MoqConn_SetReadDeadline_fnRecorder
}

// MoqConn_SetWriteDeadline_params holds the params of the Conn type
type MoqConn_SetWriteDeadline_params struct{ T time.Time }

// MoqConn_SetWriteDeadline_paramsKey holds the map key params of the Conn type
type MoqConn_SetWriteDeadline_paramsKey struct {
	Params struct{ T time.Time }
	Hashes struct{ T hash.Hash }
}

// MoqConn_SetWriteDeadline_resultsByParams contains the results for a given
// set of parameters for the Conn type
type MoqConn_SetWriteDeadline_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_SetWriteDeadline_paramsKey]*MoqConn_SetWriteDeadline_results
}

// MoqConn_SetWriteDeadline_doFn defines the type of function needed when
// calling AndDo for the Conn type
type MoqConn_SetWriteDeadline_doFn func(t time.Time)

// MoqConn_SetWriteDeadline_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Conn type
type MoqConn_SetWriteDeadline_doReturnFn func(t time.Time) error

// MoqConn_SetWriteDeadline_results holds the results of the Conn type
type MoqConn_SetWriteDeadline_results struct {
	Params  MoqConn_SetWriteDeadline_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_SetWriteDeadline_doFn
		DoReturnFn MoqConn_SetWriteDeadline_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_SetWriteDeadline_fnRecorder routes recorded function calls to the
// MoqConn moq
type MoqConn_SetWriteDeadline_fnRecorder struct {
	Params    MoqConn_SetWriteDeadline_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_SetWriteDeadline_results
	Moq       *MoqConn
}

// MoqConn_SetWriteDeadline_anyParams isolates the any params functions of the
// Conn type
type MoqConn_SetWriteDeadline_anyParams struct {
	Recorder *MoqConn_SetWriteDeadline_fnRecorder
}

// NewMoqConn creates a new moq of the Conn type
func NewMoqConn(scene *moq.Scene, config *moq.Config) *MoqConn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqConn{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqConn_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Read struct {
					B moq.ParamIndexing
				}
				Write struct {
					B moq.ParamIndexing
				}
				Close       struct{}
				LocalAddr   struct{}
				RemoteAddr  struct{}
				SetDeadline struct {
					T moq.ParamIndexing
				}
				SetReadDeadline struct {
					T moq.ParamIndexing
				}
				SetWriteDeadline struct {
					T moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Read struct {
				B moq.ParamIndexing
			}
			Write struct {
				B moq.ParamIndexing
			}
			Close       struct{}
			LocalAddr   struct{}
			RemoteAddr  struct{}
			SetDeadline struct {
				T moq.ParamIndexing
			}
			SetReadDeadline struct {
				T moq.ParamIndexing
			}
			SetWriteDeadline struct {
				T moq.ParamIndexing
			}
		}{
			Read: struct {
				B moq.ParamIndexing
			}{
				B: moq.ParamIndexByHash,
			},
			Write: struct {
				B moq.ParamIndexing
			}{
				B: moq.ParamIndexByHash,
			},
			Close:      struct{}{},
			LocalAddr:  struct{}{},
			RemoteAddr: struct{}{},
			SetDeadline: struct {
				T moq.ParamIndexing
			}{
				T: moq.ParamIndexByHash,
			},
			SetReadDeadline: struct {
				T moq.ParamIndexing
			}{
				T: moq.ParamIndexByHash,
			},
			SetWriteDeadline: struct {
				T moq.ParamIndexing
			}{
				T: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Conn type
func (m *MoqConn) Mock() *MoqConn_mock { return m.Moq }

func (m *MoqConn_mock) Read(b []byte) (n int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_Read_params{
		B: b,
	}
	var results *MoqConn_Read_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Read {
		paramsKey := m.Moq.ParamsKey_Read(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Read(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Read(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Read(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(b)
	}
	return
}

func (m *MoqConn_mock) Write(b []byte) (n int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_Write_params{
		B: b,
	}
	var results *MoqConn_Write_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Write {
		paramsKey := m.Moq.ParamsKey_Write(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Write(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Write(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Write(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(b)
	}
	return
}

func (m *MoqConn_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_Close_params{}
	var results *MoqConn_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqConn_mock) LocalAddr() (result1 net.Addr) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_LocalAddr_params{}
	var results *MoqConn_LocalAddr_results
	for _, resultsByParams := range m.Moq.ResultsByParams_LocalAddr {
		paramsKey := m.Moq.ParamsKey_LocalAddr(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_LocalAddr(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_LocalAddr(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_LocalAddr(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqConn_mock) RemoteAddr() (result1 net.Addr) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_RemoteAddr_params{}
	var results *MoqConn_RemoteAddr_results
	for _, resultsByParams := range m.Moq.ResultsByParams_RemoteAddr {
		paramsKey := m.Moq.ParamsKey_RemoteAddr(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_RemoteAddr(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_RemoteAddr(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_RemoteAddr(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqConn_mock) SetDeadline(t time.Time) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_SetDeadline_params{
		T: t,
	}
	var results *MoqConn_SetDeadline_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetDeadline {
		paramsKey := m.Moq.ParamsKey_SetDeadline(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetDeadline(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetDeadline(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetDeadline(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(t)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(t)
	}
	return
}

func (m *MoqConn_mock) SetReadDeadline(t time.Time) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_SetReadDeadline_params{
		T: t,
	}
	var results *MoqConn_SetReadDeadline_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetReadDeadline {
		paramsKey := m.Moq.ParamsKey_SetReadDeadline(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetReadDeadline(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetReadDeadline(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetReadDeadline(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(t)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(t)
	}
	return
}

func (m *MoqConn_mock) SetWriteDeadline(t time.Time) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_SetWriteDeadline_params{
		T: t,
	}
	var results *MoqConn_SetWriteDeadline_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetWriteDeadline {
		paramsKey := m.Moq.ParamsKey_SetWriteDeadline(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetWriteDeadline(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetWriteDeadline(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetWriteDeadline(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(t)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(t)
	}
	return
}

// OnCall returns the recorder implementation of the Conn type
func (m *MoqConn) OnCall() *MoqConn_recorder {
	return &MoqConn_recorder{
		Moq: m,
	}
}

func (m *MoqConn_recorder) Read(b []byte) *MoqConn_Read_fnRecorder {
	return &MoqConn_Read_fnRecorder{
		Params: MoqConn_Read_params{
			B: b,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_Read_fnRecorder) Any() *MoqConn_Read_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	return &MoqConn_Read_anyParams{Recorder: r}
}

func (a *MoqConn_Read_anyParams) B() *MoqConn_Read_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqConn_Read_fnRecorder) Seq() *MoqConn_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_Read_fnRecorder) NoSeq() *MoqConn_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_Read_fnRecorder) ReturnResults(n int, err error) *MoqConn_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqConn_Read_doFn
		DoReturnFn MoqConn_Read_doReturnFn
	}{
		Values: &struct {
			N   int
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_Read_fnRecorder) AndDo(fn MoqConn_Read_doFn) *MoqConn_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_Read_fnRecorder) DoReturnResults(fn MoqConn_Read_doReturnFn) *MoqConn_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqConn_Read_doFn
		DoReturnFn MoqConn_Read_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_Read_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_Read_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Read {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_Read_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_Read_paramsKey]*MoqConn_Read_results{},
		}
		r.Moq.ResultsByParams_Read = append(r.Moq.ResultsByParams_Read, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Read) {
			copy(r.Moq.ResultsByParams_Read[insertAt+1:], r.Moq.ResultsByParams_Read[insertAt:0])
			r.Moq.ResultsByParams_Read[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Read(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_Read_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_Read_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int
					Err error
				}
				Sequence   uint32
				DoFn       MoqConn_Read_doFn
				DoReturnFn MoqConn_Read_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn) PrettyParams_Read(params MoqConn_Read_params) string {
	return fmt.Sprintf("Read(%#v)", params.B)
}

func (m *MoqConn) ParamsKey_Read(params MoqConn_Read_params, anyParams uint64) MoqConn_Read_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Read.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the Read function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	return MoqConn_Read_paramsKey{
		Params: struct{}{},
		Hashes: struct{ B hash.Hash }{
			B: bUsedHash,
		},
	}
}

func (m *MoqConn_recorder) Write(b []byte) *MoqConn_Write_fnRecorder {
	return &MoqConn_Write_fnRecorder{
		Params: MoqConn_Write_params{
			B: b,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_Write_fnRecorder) Any() *MoqConn_Write_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	return &MoqConn_Write_anyParams{Recorder: r}
}

func (a *MoqConn_Write_anyParams) B() *MoqConn_Write_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqConn_Write_fnRecorder) Seq() *MoqConn_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_Write_fnRecorder) NoSeq() *MoqConn_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_Write_fnRecorder) ReturnResults(n int, err error) *MoqConn_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqConn_Write_doFn
		DoReturnFn MoqConn_Write_doReturnFn
	}{
		Values: &struct {
			N   int
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_Write_fnRecorder) AndDo(fn MoqConn_Write_doFn) *MoqConn_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_Write_fnRecorder) DoReturnResults(fn MoqConn_Write_doReturnFn) *MoqConn_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqConn_Write_doFn
		DoReturnFn MoqConn_Write_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_Write_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_Write_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Write {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_Write_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_Write_paramsKey]*MoqConn_Write_results{},
		}
		r.Moq.ResultsByParams_Write = append(r.Moq.ResultsByParams_Write, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Write) {
			copy(r.Moq.ResultsByParams_Write[insertAt+1:], r.Moq.ResultsByParams_Write[insertAt:0])
			r.Moq.ResultsByParams_Write[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Write(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_Write_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_Write_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int
					Err error
				}
				Sequence   uint32
				DoFn       MoqConn_Write_doFn
				DoReturnFn MoqConn_Write_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn) PrettyParams_Write(params MoqConn_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.B)
}

func (m *MoqConn) ParamsKey_Write(params MoqConn_Write_params, anyParams uint64) MoqConn_Write_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Write.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the Write function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	return MoqConn_Write_paramsKey{
		Params: struct{}{},
		Hashes: struct{ B hash.Hash }{
			B: bUsedHash,
		},
	}
}

func (m *MoqConn_recorder) Close() *MoqConn_Close_fnRecorder {
	return &MoqConn_Close_fnRecorder{
		Params:   MoqConn_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_Close_fnRecorder) Any() *MoqConn_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqConn_Close_anyParams{Recorder: r}
}

func (r *MoqConn_Close_fnRecorder) Seq() *MoqConn_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_Close_fnRecorder) NoSeq() *MoqConn_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_Close_fnRecorder) ReturnResults(result1 error) *MoqConn_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_Close_doFn
		DoReturnFn MoqConn_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_Close_fnRecorder) AndDo(fn MoqConn_Close_doFn) *MoqConn_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_Close_fnRecorder) DoReturnResults(fn MoqConn_Close_doReturnFn) *MoqConn_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_Close_doFn
		DoReturnFn MoqConn_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_Close_paramsKey]*MoqConn_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqConn_Close_doFn
				DoReturnFn MoqConn_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn) PrettyParams_Close(params MoqConn_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqConn) ParamsKey_Close(params MoqConn_Close_params, anyParams uint64) MoqConn_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqConn_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqConn_recorder) LocalAddr() *MoqConn_LocalAddr_fnRecorder {
	return &MoqConn_LocalAddr_fnRecorder{
		Params:   MoqConn_LocalAddr_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_LocalAddr_fnRecorder) Any() *MoqConn_LocalAddr_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LocalAddr(r.Params))
		return nil
	}
	return &MoqConn_LocalAddr_anyParams{Recorder: r}
}

func (r *MoqConn_LocalAddr_fnRecorder) Seq() *MoqConn_LocalAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LocalAddr(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_LocalAddr_fnRecorder) NoSeq() *MoqConn_LocalAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LocalAddr(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_LocalAddr_fnRecorder) ReturnResults(result1 net.Addr) *MoqConn_LocalAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.Addr
		}
		Sequence   uint32
		DoFn       MoqConn_LocalAddr_doFn
		DoReturnFn MoqConn_LocalAddr_doReturnFn
	}{
		Values: &struct {
			Result1 net.Addr
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_LocalAddr_fnRecorder) AndDo(fn MoqConn_LocalAddr_doFn) *MoqConn_LocalAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_LocalAddr_fnRecorder) DoReturnResults(fn MoqConn_LocalAddr_doReturnFn) *MoqConn_LocalAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.Addr
		}
		Sequence   uint32
		DoFn       MoqConn_LocalAddr_doFn
		DoReturnFn MoqConn_LocalAddr_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_LocalAddr_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_LocalAddr_resultsByParams
	for n, res := range r.Moq.ResultsByParams_LocalAddr {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_LocalAddr_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_LocalAddr_paramsKey]*MoqConn_LocalAddr_results{},
		}
		r.Moq.ResultsByParams_LocalAddr = append(r.Moq.ResultsByParams_LocalAddr, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_LocalAddr) {
			copy(r.Moq.ResultsByParams_LocalAddr[insertAt+1:], r.Moq.ResultsByParams_LocalAddr[insertAt:0])
			r.Moq.ResultsByParams_LocalAddr[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_LocalAddr(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_LocalAddr_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_LocalAddr_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_LocalAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 net.Addr
				}
				Sequence   uint32
				DoFn       MoqConn_LocalAddr_doFn
				DoReturnFn MoqConn_LocalAddr_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn) PrettyParams_LocalAddr(params MoqConn_LocalAddr_params) string {
	return fmt.Sprintf("LocalAddr()")
}

func (m *MoqConn) ParamsKey_LocalAddr(params MoqConn_LocalAddr_params, anyParams uint64) MoqConn_LocalAddr_paramsKey {
	m.Scene.T.Helper()
	return MoqConn_LocalAddr_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqConn_recorder) RemoteAddr() *MoqConn_RemoteAddr_fnRecorder {
	return &MoqConn_RemoteAddr_fnRecorder{
		Params:   MoqConn_RemoteAddr_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_RemoteAddr_fnRecorder) Any() *MoqConn_RemoteAddr_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RemoteAddr(r.Params))
		return nil
	}
	return &MoqConn_RemoteAddr_anyParams{Recorder: r}
}

func (r *MoqConn_RemoteAddr_fnRecorder) Seq() *MoqConn_RemoteAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RemoteAddr(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_RemoteAddr_fnRecorder) NoSeq() *MoqConn_RemoteAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RemoteAddr(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_RemoteAddr_fnRecorder) ReturnResults(result1 net.Addr) *MoqConn_RemoteAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.Addr
		}
		Sequence   uint32
		DoFn       MoqConn_RemoteAddr_doFn
		DoReturnFn MoqConn_RemoteAddr_doReturnFn
	}{
		Values: &struct {
			Result1 net.Addr
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_RemoteAddr_fnRecorder) AndDo(fn MoqConn_RemoteAddr_doFn) *MoqConn_RemoteAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_RemoteAddr_fnRecorder) DoReturnResults(fn MoqConn_RemoteAddr_doReturnFn) *MoqConn_RemoteAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.Addr
		}
		Sequence   uint32
		DoFn       MoqConn_RemoteAddr_doFn
		DoReturnFn MoqConn_RemoteAddr_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_RemoteAddr_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_RemoteAddr_resultsByParams
	for n, res := range r.Moq.ResultsByParams_RemoteAddr {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_RemoteAddr_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_RemoteAddr_paramsKey]*MoqConn_RemoteAddr_results{},
		}
		r.Moq.ResultsByParams_RemoteAddr = append(r.Moq.ResultsByParams_RemoteAddr, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_RemoteAddr) {
			copy(r.Moq.ResultsByParams_RemoteAddr[insertAt+1:], r.Moq.ResultsByParams_RemoteAddr[insertAt:0])
			r.Moq.ResultsByParams_RemoteAddr[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_RemoteAddr(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_RemoteAddr_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_RemoteAddr_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_RemoteAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 net.Addr
				}
				Sequence   uint32
				DoFn       MoqConn_RemoteAddr_doFn
				DoReturnFn MoqConn_RemoteAddr_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn) PrettyParams_RemoteAddr(params MoqConn_RemoteAddr_params) string {
	return fmt.Sprintf("RemoteAddr()")
}

func (m *MoqConn) ParamsKey_RemoteAddr(params MoqConn_RemoteAddr_params, anyParams uint64) MoqConn_RemoteAddr_paramsKey {
	m.Scene.T.Helper()
	return MoqConn_RemoteAddr_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqConn_recorder) SetDeadline(t time.Time) *MoqConn_SetDeadline_fnRecorder {
	return &MoqConn_SetDeadline_fnRecorder{
		Params: MoqConn_SetDeadline_params{
			T: t,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_SetDeadline_fnRecorder) Any() *MoqConn_SetDeadline_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetDeadline(r.Params))
		return nil
	}
	return &MoqConn_SetDeadline_anyParams{Recorder: r}
}

func (a *MoqConn_SetDeadline_anyParams) T() *MoqConn_SetDeadline_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqConn_SetDeadline_fnRecorder) Seq() *MoqConn_SetDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetDeadline(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_SetDeadline_fnRecorder) NoSeq() *MoqConn_SetDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetDeadline(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_SetDeadline_fnRecorder) ReturnResults(result1 error) *MoqConn_SetDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_SetDeadline_doFn
		DoReturnFn MoqConn_SetDeadline_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_SetDeadline_fnRecorder) AndDo(fn MoqConn_SetDeadline_doFn) *MoqConn_SetDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_SetDeadline_fnRecorder) DoReturnResults(fn MoqConn_SetDeadline_doReturnFn) *MoqConn_SetDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_SetDeadline_doFn
		DoReturnFn MoqConn_SetDeadline_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_SetDeadline_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_SetDeadline_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetDeadline {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_SetDeadline_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_SetDeadline_paramsKey]*MoqConn_SetDeadline_results{},
		}
		r.Moq.ResultsByParams_SetDeadline = append(r.Moq.ResultsByParams_SetDeadline, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetDeadline) {
			copy(r.Moq.ResultsByParams_SetDeadline[insertAt+1:], r.Moq.ResultsByParams_SetDeadline[insertAt:0])
			r.Moq.ResultsByParams_SetDeadline[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetDeadline(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_SetDeadline_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_SetDeadline_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_SetDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqConn_SetDeadline_doFn
				DoReturnFn MoqConn_SetDeadline_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn) PrettyParams_SetDeadline(params MoqConn_SetDeadline_params) string {
	return fmt.Sprintf("SetDeadline(%#v)", params.T)
}

func (m *MoqConn) ParamsKey_SetDeadline(params MoqConn_SetDeadline_params, anyParams uint64) MoqConn_SetDeadline_paramsKey {
	m.Scene.T.Helper()
	var tUsed time.Time
	var tUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetDeadline.T == moq.ParamIndexByValue {
			tUsed = params.T
		} else {
			tUsedHash = hash.DeepHash(params.T)
		}
	}
	return MoqConn_SetDeadline_paramsKey{
		Params: struct{ T time.Time }{
			T: tUsed,
		},
		Hashes: struct{ T hash.Hash }{
			T: tUsedHash,
		},
	}
}

func (m *MoqConn_recorder) SetReadDeadline(t time.Time) *MoqConn_SetReadDeadline_fnRecorder {
	return &MoqConn_SetReadDeadline_fnRecorder{
		Params: MoqConn_SetReadDeadline_params{
			T: t,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_SetReadDeadline_fnRecorder) Any() *MoqConn_SetReadDeadline_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetReadDeadline(r.Params))
		return nil
	}
	return &MoqConn_SetReadDeadline_anyParams{Recorder: r}
}

func (a *MoqConn_SetReadDeadline_anyParams) T() *MoqConn_SetReadDeadline_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqConn_SetReadDeadline_fnRecorder) Seq() *MoqConn_SetReadDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetReadDeadline(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_SetReadDeadline_fnRecorder) NoSeq() *MoqConn_SetReadDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetReadDeadline(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_SetReadDeadline_fnRecorder) ReturnResults(result1 error) *MoqConn_SetReadDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_SetReadDeadline_doFn
		DoReturnFn MoqConn_SetReadDeadline_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_SetReadDeadline_fnRecorder) AndDo(fn MoqConn_SetReadDeadline_doFn) *MoqConn_SetReadDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_SetReadDeadline_fnRecorder) DoReturnResults(fn MoqConn_SetReadDeadline_doReturnFn) *MoqConn_SetReadDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_SetReadDeadline_doFn
		DoReturnFn MoqConn_SetReadDeadline_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_SetReadDeadline_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_SetReadDeadline_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetReadDeadline {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_SetReadDeadline_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_SetReadDeadline_paramsKey]*MoqConn_SetReadDeadline_results{},
		}
		r.Moq.ResultsByParams_SetReadDeadline = append(r.Moq.ResultsByParams_SetReadDeadline, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetReadDeadline) {
			copy(r.Moq.ResultsByParams_SetReadDeadline[insertAt+1:], r.Moq.ResultsByParams_SetReadDeadline[insertAt:0])
			r.Moq.ResultsByParams_SetReadDeadline[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetReadDeadline(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_SetReadDeadline_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_SetReadDeadline_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_SetReadDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqConn_SetReadDeadline_doFn
				DoReturnFn MoqConn_SetReadDeadline_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn) PrettyParams_SetReadDeadline(params MoqConn_SetReadDeadline_params) string {
	return fmt.Sprintf("SetReadDeadline(%#v)", params.T)
}

func (m *MoqConn) ParamsKey_SetReadDeadline(params MoqConn_SetReadDeadline_params, anyParams uint64) MoqConn_SetReadDeadline_paramsKey {
	m.Scene.T.Helper()
	var tUsed time.Time
	var tUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetReadDeadline.T == moq.ParamIndexByValue {
			tUsed = params.T
		} else {
			tUsedHash = hash.DeepHash(params.T)
		}
	}
	return MoqConn_SetReadDeadline_paramsKey{
		Params: struct{ T time.Time }{
			T: tUsed,
		},
		Hashes: struct{ T hash.Hash }{
			T: tUsedHash,
		},
	}
}

func (m *MoqConn_recorder) SetWriteDeadline(t time.Time) *MoqConn_SetWriteDeadline_fnRecorder {
	return &MoqConn_SetWriteDeadline_fnRecorder{
		Params: MoqConn_SetWriteDeadline_params{
			T: t,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_SetWriteDeadline_fnRecorder) Any() *MoqConn_SetWriteDeadline_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetWriteDeadline(r.Params))
		return nil
	}
	return &MoqConn_SetWriteDeadline_anyParams{Recorder: r}
}

func (a *MoqConn_SetWriteDeadline_anyParams) T() *MoqConn_SetWriteDeadline_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqConn_SetWriteDeadline_fnRecorder) Seq() *MoqConn_SetWriteDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetWriteDeadline(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_SetWriteDeadline_fnRecorder) NoSeq() *MoqConn_SetWriteDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetWriteDeadline(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_SetWriteDeadline_fnRecorder) ReturnResults(result1 error) *MoqConn_SetWriteDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_SetWriteDeadline_doFn
		DoReturnFn MoqConn_SetWriteDeadline_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_SetWriteDeadline_fnRecorder) AndDo(fn MoqConn_SetWriteDeadline_doFn) *MoqConn_SetWriteDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_SetWriteDeadline_fnRecorder) DoReturnResults(fn MoqConn_SetWriteDeadline_doReturnFn) *MoqConn_SetWriteDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_SetWriteDeadline_doFn
		DoReturnFn MoqConn_SetWriteDeadline_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_SetWriteDeadline_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_SetWriteDeadline_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetWriteDeadline {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_SetWriteDeadline_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_SetWriteDeadline_paramsKey]*MoqConn_SetWriteDeadline_results{},
		}
		r.Moq.ResultsByParams_SetWriteDeadline = append(r.Moq.ResultsByParams_SetWriteDeadline, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetWriteDeadline) {
			copy(r.Moq.ResultsByParams_SetWriteDeadline[insertAt+1:], r.Moq.ResultsByParams_SetWriteDeadline[insertAt:0])
			r.Moq.ResultsByParams_SetWriteDeadline[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetWriteDeadline(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_SetWriteDeadline_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_SetWriteDeadline_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_SetWriteDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqConn_SetWriteDeadline_doFn
				DoReturnFn MoqConn_SetWriteDeadline_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn) PrettyParams_SetWriteDeadline(params MoqConn_SetWriteDeadline_params) string {
	return fmt.Sprintf("SetWriteDeadline(%#v)", params.T)
}

func (m *MoqConn) ParamsKey_SetWriteDeadline(params MoqConn_SetWriteDeadline_params, anyParams uint64) MoqConn_SetWriteDeadline_paramsKey {
	m.Scene.T.Helper()
	var tUsed time.Time
	var tUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetWriteDeadline.T == moq.ParamIndexByValue {
			tUsed = params.T
		} else {
			tUsedHash = hash.DeepHash(params.T)
		}
	}
	return MoqConn_SetWriteDeadline_paramsKey{
		Params: struct{ T time.Time }{
			T: tUsed,
		},
		Hashes: struct{ T hash.Hash }{
			T: tUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqConn) Reset() {
	m.ResultsByParams_Read = nil
	m.ResultsByParams_Write = nil
	m.ResultsByParams_Close = nil
	m.ResultsByParams_LocalAddr = nil
	m.ResultsByParams_RemoteAddr = nil
	m.ResultsByParams_SetDeadline = nil
	m.ResultsByParams_SetReadDeadline = nil
	m.ResultsByParams_SetWriteDeadline = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqConn) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Read {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Read(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Write {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Write(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_LocalAddr {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_LocalAddr(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_RemoteAddr {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_RemoteAddr(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetDeadline {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetDeadline(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetReadDeadline {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetReadDeadline(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetWriteDeadline {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetWriteDeadline(results.Params))
			}
		}
	}
}
