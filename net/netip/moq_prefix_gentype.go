// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package netip

import (
	"fmt"
	"math/bits"
	"net/netip"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that netip.Prefix_genType is mocked
// completely
var _ Prefix_genType = (*MoqPrefix_genType_mock)(nil)

// Prefix_genType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Prefix_genType interface {
	Addr() netip.Addr
	Bits() int
	IsValid() bool
	IsSingleIP() bool
	Masked() netip.Prefix
	Contains(ip netip.Addr) bool
	Overlaps(o netip.Prefix) bool
	AppendTo(b []byte) []byte
	MarshalText() ([]byte, error)
	MarshalBinary() ([]byte, error)
	String() string
}

// MoqPrefix_genType holds the state of a moq of the Prefix_genType type
type MoqPrefix_genType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqPrefix_genType_mock

	ResultsByParams_Addr          []MoqPrefix_genType_Addr_resultsByParams
	ResultsByParams_Bits          []MoqPrefix_genType_Bits_resultsByParams
	ResultsByParams_IsValid       []MoqPrefix_genType_IsValid_resultsByParams
	ResultsByParams_IsSingleIP    []MoqPrefix_genType_IsSingleIP_resultsByParams
	ResultsByParams_Masked        []MoqPrefix_genType_Masked_resultsByParams
	ResultsByParams_Contains      []MoqPrefix_genType_Contains_resultsByParams
	ResultsByParams_Overlaps      []MoqPrefix_genType_Overlaps_resultsByParams
	ResultsByParams_AppendTo      []MoqPrefix_genType_AppendTo_resultsByParams
	ResultsByParams_MarshalText   []MoqPrefix_genType_MarshalText_resultsByParams
	ResultsByParams_MarshalBinary []MoqPrefix_genType_MarshalBinary_resultsByParams
	ResultsByParams_String        []MoqPrefix_genType_String_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Addr       struct{}
			Bits       struct{}
			IsValid    struct{}
			IsSingleIP struct{}
			Masked     struct{}
			Contains   struct {
				Ip moq.ParamIndexing
			}
			Overlaps struct {
				O moq.ParamIndexing
			}
			AppendTo struct {
				B moq.ParamIndexing
			}
			MarshalText   struct{}
			MarshalBinary struct{}
			String        struct{}
		}
	}
}

// MoqPrefix_genType_mock isolates the mock interface of the Prefix_genType
// type
type MoqPrefix_genType_mock struct {
	Moq *MoqPrefix_genType
}

// MoqPrefix_genType_recorder isolates the recorder interface of the
// Prefix_genType type
type MoqPrefix_genType_recorder struct {
	Moq *MoqPrefix_genType
}

// MoqPrefix_genType_Addr_params holds the params of the Prefix_genType type
type MoqPrefix_genType_Addr_params struct{}

// MoqPrefix_genType_Addr_paramsKey holds the map key params of the
// Prefix_genType type
type MoqPrefix_genType_Addr_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPrefix_genType_Addr_resultsByParams contains the results for a given set
// of parameters for the Prefix_genType type
type MoqPrefix_genType_Addr_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPrefix_genType_Addr_paramsKey]*MoqPrefix_genType_Addr_results
}

// MoqPrefix_genType_Addr_doFn defines the type of function needed when calling
// AndDo for the Prefix_genType type
type MoqPrefix_genType_Addr_doFn func()

// MoqPrefix_genType_Addr_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Prefix_genType type
type MoqPrefix_genType_Addr_doReturnFn func() netip.Addr

// MoqPrefix_genType_Addr_results holds the results of the Prefix_genType type
type MoqPrefix_genType_Addr_results struct {
	Params  MoqPrefix_genType_Addr_params
	Results []struct {
		Values *struct {
			Result1 netip.Addr
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_Addr_doFn
		DoReturnFn MoqPrefix_genType_Addr_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPrefix_genType_Addr_fnRecorder routes recorded function calls to the
// MoqPrefix_genType moq
type MoqPrefix_genType_Addr_fnRecorder struct {
	Params    MoqPrefix_genType_Addr_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPrefix_genType_Addr_results
	Moq       *MoqPrefix_genType
}

// MoqPrefix_genType_Addr_anyParams isolates the any params functions of the
// Prefix_genType type
type MoqPrefix_genType_Addr_anyParams struct {
	Recorder *MoqPrefix_genType_Addr_fnRecorder
}

// MoqPrefix_genType_Bits_params holds the params of the Prefix_genType type
type MoqPrefix_genType_Bits_params struct{}

// MoqPrefix_genType_Bits_paramsKey holds the map key params of the
// Prefix_genType type
type MoqPrefix_genType_Bits_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPrefix_genType_Bits_resultsByParams contains the results for a given set
// of parameters for the Prefix_genType type
type MoqPrefix_genType_Bits_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPrefix_genType_Bits_paramsKey]*MoqPrefix_genType_Bits_results
}

// MoqPrefix_genType_Bits_doFn defines the type of function needed when calling
// AndDo for the Prefix_genType type
type MoqPrefix_genType_Bits_doFn func()

// MoqPrefix_genType_Bits_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Prefix_genType type
type MoqPrefix_genType_Bits_doReturnFn func() int

// MoqPrefix_genType_Bits_results holds the results of the Prefix_genType type
type MoqPrefix_genType_Bits_results struct {
	Params  MoqPrefix_genType_Bits_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_Bits_doFn
		DoReturnFn MoqPrefix_genType_Bits_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPrefix_genType_Bits_fnRecorder routes recorded function calls to the
// MoqPrefix_genType moq
type MoqPrefix_genType_Bits_fnRecorder struct {
	Params    MoqPrefix_genType_Bits_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPrefix_genType_Bits_results
	Moq       *MoqPrefix_genType
}

// MoqPrefix_genType_Bits_anyParams isolates the any params functions of the
// Prefix_genType type
type MoqPrefix_genType_Bits_anyParams struct {
	Recorder *MoqPrefix_genType_Bits_fnRecorder
}

// MoqPrefix_genType_IsValid_params holds the params of the Prefix_genType type
type MoqPrefix_genType_IsValid_params struct{}

// MoqPrefix_genType_IsValid_paramsKey holds the map key params of the
// Prefix_genType type
type MoqPrefix_genType_IsValid_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPrefix_genType_IsValid_resultsByParams contains the results for a given
// set of parameters for the Prefix_genType type
type MoqPrefix_genType_IsValid_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPrefix_genType_IsValid_paramsKey]*MoqPrefix_genType_IsValid_results
}

// MoqPrefix_genType_IsValid_doFn defines the type of function needed when
// calling AndDo for the Prefix_genType type
type MoqPrefix_genType_IsValid_doFn func()

// MoqPrefix_genType_IsValid_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Prefix_genType type
type MoqPrefix_genType_IsValid_doReturnFn func() bool

// MoqPrefix_genType_IsValid_results holds the results of the Prefix_genType
// type
type MoqPrefix_genType_IsValid_results struct {
	Params  MoqPrefix_genType_IsValid_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_IsValid_doFn
		DoReturnFn MoqPrefix_genType_IsValid_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPrefix_genType_IsValid_fnRecorder routes recorded function calls to the
// MoqPrefix_genType moq
type MoqPrefix_genType_IsValid_fnRecorder struct {
	Params    MoqPrefix_genType_IsValid_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPrefix_genType_IsValid_results
	Moq       *MoqPrefix_genType
}

// MoqPrefix_genType_IsValid_anyParams isolates the any params functions of the
// Prefix_genType type
type MoqPrefix_genType_IsValid_anyParams struct {
	Recorder *MoqPrefix_genType_IsValid_fnRecorder
}

// MoqPrefix_genType_IsSingleIP_params holds the params of the Prefix_genType
// type
type MoqPrefix_genType_IsSingleIP_params struct{}

// MoqPrefix_genType_IsSingleIP_paramsKey holds the map key params of the
// Prefix_genType type
type MoqPrefix_genType_IsSingleIP_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPrefix_genType_IsSingleIP_resultsByParams contains the results for a
// given set of parameters for the Prefix_genType type
type MoqPrefix_genType_IsSingleIP_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPrefix_genType_IsSingleIP_paramsKey]*MoqPrefix_genType_IsSingleIP_results
}

// MoqPrefix_genType_IsSingleIP_doFn defines the type of function needed when
// calling AndDo for the Prefix_genType type
type MoqPrefix_genType_IsSingleIP_doFn func()

// MoqPrefix_genType_IsSingleIP_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Prefix_genType type
type MoqPrefix_genType_IsSingleIP_doReturnFn func() bool

// MoqPrefix_genType_IsSingleIP_results holds the results of the Prefix_genType
// type
type MoqPrefix_genType_IsSingleIP_results struct {
	Params  MoqPrefix_genType_IsSingleIP_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_IsSingleIP_doFn
		DoReturnFn MoqPrefix_genType_IsSingleIP_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPrefix_genType_IsSingleIP_fnRecorder routes recorded function calls to
// the MoqPrefix_genType moq
type MoqPrefix_genType_IsSingleIP_fnRecorder struct {
	Params    MoqPrefix_genType_IsSingleIP_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPrefix_genType_IsSingleIP_results
	Moq       *MoqPrefix_genType
}

// MoqPrefix_genType_IsSingleIP_anyParams isolates the any params functions of
// the Prefix_genType type
type MoqPrefix_genType_IsSingleIP_anyParams struct {
	Recorder *MoqPrefix_genType_IsSingleIP_fnRecorder
}

// MoqPrefix_genType_Masked_params holds the params of the Prefix_genType type
type MoqPrefix_genType_Masked_params struct{}

// MoqPrefix_genType_Masked_paramsKey holds the map key params of the
// Prefix_genType type
type MoqPrefix_genType_Masked_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPrefix_genType_Masked_resultsByParams contains the results for a given
// set of parameters for the Prefix_genType type
type MoqPrefix_genType_Masked_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPrefix_genType_Masked_paramsKey]*MoqPrefix_genType_Masked_results
}

// MoqPrefix_genType_Masked_doFn defines the type of function needed when
// calling AndDo for the Prefix_genType type
type MoqPrefix_genType_Masked_doFn func()

// MoqPrefix_genType_Masked_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Prefix_genType type
type MoqPrefix_genType_Masked_doReturnFn func() netip.Prefix

// MoqPrefix_genType_Masked_results holds the results of the Prefix_genType
// type
type MoqPrefix_genType_Masked_results struct {
	Params  MoqPrefix_genType_Masked_params
	Results []struct {
		Values *struct {
			Result1 netip.Prefix
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_Masked_doFn
		DoReturnFn MoqPrefix_genType_Masked_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPrefix_genType_Masked_fnRecorder routes recorded function calls to the
// MoqPrefix_genType moq
type MoqPrefix_genType_Masked_fnRecorder struct {
	Params    MoqPrefix_genType_Masked_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPrefix_genType_Masked_results
	Moq       *MoqPrefix_genType
}

// MoqPrefix_genType_Masked_anyParams isolates the any params functions of the
// Prefix_genType type
type MoqPrefix_genType_Masked_anyParams struct {
	Recorder *MoqPrefix_genType_Masked_fnRecorder
}

// MoqPrefix_genType_Contains_params holds the params of the Prefix_genType
// type
type MoqPrefix_genType_Contains_params struct{ Ip netip.Addr }

// MoqPrefix_genType_Contains_paramsKey holds the map key params of the
// Prefix_genType type
type MoqPrefix_genType_Contains_paramsKey struct {
	Params struct{ Ip netip.Addr }
	Hashes struct{ Ip hash.Hash }
}

// MoqPrefix_genType_Contains_resultsByParams contains the results for a given
// set of parameters for the Prefix_genType type
type MoqPrefix_genType_Contains_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPrefix_genType_Contains_paramsKey]*MoqPrefix_genType_Contains_results
}

// MoqPrefix_genType_Contains_doFn defines the type of function needed when
// calling AndDo for the Prefix_genType type
type MoqPrefix_genType_Contains_doFn func(ip netip.Addr)

// MoqPrefix_genType_Contains_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Prefix_genType type
type MoqPrefix_genType_Contains_doReturnFn func(ip netip.Addr) bool

// MoqPrefix_genType_Contains_results holds the results of the Prefix_genType
// type
type MoqPrefix_genType_Contains_results struct {
	Params  MoqPrefix_genType_Contains_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_Contains_doFn
		DoReturnFn MoqPrefix_genType_Contains_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPrefix_genType_Contains_fnRecorder routes recorded function calls to the
// MoqPrefix_genType moq
type MoqPrefix_genType_Contains_fnRecorder struct {
	Params    MoqPrefix_genType_Contains_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPrefix_genType_Contains_results
	Moq       *MoqPrefix_genType
}

// MoqPrefix_genType_Contains_anyParams isolates the any params functions of
// the Prefix_genType type
type MoqPrefix_genType_Contains_anyParams struct {
	Recorder *MoqPrefix_genType_Contains_fnRecorder
}

// MoqPrefix_genType_Overlaps_params holds the params of the Prefix_genType
// type
type MoqPrefix_genType_Overlaps_params struct{ O netip.Prefix }

// MoqPrefix_genType_Overlaps_paramsKey holds the map key params of the
// Prefix_genType type
type MoqPrefix_genType_Overlaps_paramsKey struct {
	Params struct{ O netip.Prefix }
	Hashes struct{ O hash.Hash }
}

// MoqPrefix_genType_Overlaps_resultsByParams contains the results for a given
// set of parameters for the Prefix_genType type
type MoqPrefix_genType_Overlaps_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPrefix_genType_Overlaps_paramsKey]*MoqPrefix_genType_Overlaps_results
}

// MoqPrefix_genType_Overlaps_doFn defines the type of function needed when
// calling AndDo for the Prefix_genType type
type MoqPrefix_genType_Overlaps_doFn func(o netip.Prefix)

// MoqPrefix_genType_Overlaps_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Prefix_genType type
type MoqPrefix_genType_Overlaps_doReturnFn func(o netip.Prefix) bool

// MoqPrefix_genType_Overlaps_results holds the results of the Prefix_genType
// type
type MoqPrefix_genType_Overlaps_results struct {
	Params  MoqPrefix_genType_Overlaps_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_Overlaps_doFn
		DoReturnFn MoqPrefix_genType_Overlaps_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPrefix_genType_Overlaps_fnRecorder routes recorded function calls to the
// MoqPrefix_genType moq
type MoqPrefix_genType_Overlaps_fnRecorder struct {
	Params    MoqPrefix_genType_Overlaps_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPrefix_genType_Overlaps_results
	Moq       *MoqPrefix_genType
}

// MoqPrefix_genType_Overlaps_anyParams isolates the any params functions of
// the Prefix_genType type
type MoqPrefix_genType_Overlaps_anyParams struct {
	Recorder *MoqPrefix_genType_Overlaps_fnRecorder
}

// MoqPrefix_genType_AppendTo_params holds the params of the Prefix_genType
// type
type MoqPrefix_genType_AppendTo_params struct{ B []byte }

// MoqPrefix_genType_AppendTo_paramsKey holds the map key params of the
// Prefix_genType type
type MoqPrefix_genType_AppendTo_paramsKey struct {
	Params struct{}
	Hashes struct{ B hash.Hash }
}

// MoqPrefix_genType_AppendTo_resultsByParams contains the results for a given
// set of parameters for the Prefix_genType type
type MoqPrefix_genType_AppendTo_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPrefix_genType_AppendTo_paramsKey]*MoqPrefix_genType_AppendTo_results
}

// MoqPrefix_genType_AppendTo_doFn defines the type of function needed when
// calling AndDo for the Prefix_genType type
type MoqPrefix_genType_AppendTo_doFn func(b []byte)

// MoqPrefix_genType_AppendTo_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Prefix_genType type
type MoqPrefix_genType_AppendTo_doReturnFn func(b []byte) []byte

// MoqPrefix_genType_AppendTo_results holds the results of the Prefix_genType
// type
type MoqPrefix_genType_AppendTo_results struct {
	Params  MoqPrefix_genType_AppendTo_params
	Results []struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_AppendTo_doFn
		DoReturnFn MoqPrefix_genType_AppendTo_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPrefix_genType_AppendTo_fnRecorder routes recorded function calls to the
// MoqPrefix_genType moq
type MoqPrefix_genType_AppendTo_fnRecorder struct {
	Params    MoqPrefix_genType_AppendTo_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPrefix_genType_AppendTo_results
	Moq       *MoqPrefix_genType
}

// MoqPrefix_genType_AppendTo_anyParams isolates the any params functions of
// the Prefix_genType type
type MoqPrefix_genType_AppendTo_anyParams struct {
	Recorder *MoqPrefix_genType_AppendTo_fnRecorder
}

// MoqPrefix_genType_MarshalText_params holds the params of the Prefix_genType
// type
type MoqPrefix_genType_MarshalText_params struct{}

// MoqPrefix_genType_MarshalText_paramsKey holds the map key params of the
// Prefix_genType type
type MoqPrefix_genType_MarshalText_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPrefix_genType_MarshalText_resultsByParams contains the results for a
// given set of parameters for the Prefix_genType type
type MoqPrefix_genType_MarshalText_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPrefix_genType_MarshalText_paramsKey]*MoqPrefix_genType_MarshalText_results
}

// MoqPrefix_genType_MarshalText_doFn defines the type of function needed when
// calling AndDo for the Prefix_genType type
type MoqPrefix_genType_MarshalText_doFn func()

// MoqPrefix_genType_MarshalText_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Prefix_genType type
type MoqPrefix_genType_MarshalText_doReturnFn func() ([]byte, error)

// MoqPrefix_genType_MarshalText_results holds the results of the
// Prefix_genType type
type MoqPrefix_genType_MarshalText_results struct {
	Params  MoqPrefix_genType_MarshalText_params
	Results []struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_MarshalText_doFn
		DoReturnFn MoqPrefix_genType_MarshalText_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPrefix_genType_MarshalText_fnRecorder routes recorded function calls to
// the MoqPrefix_genType moq
type MoqPrefix_genType_MarshalText_fnRecorder struct {
	Params    MoqPrefix_genType_MarshalText_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPrefix_genType_MarshalText_results
	Moq       *MoqPrefix_genType
}

// MoqPrefix_genType_MarshalText_anyParams isolates the any params functions of
// the Prefix_genType type
type MoqPrefix_genType_MarshalText_anyParams struct {
	Recorder *MoqPrefix_genType_MarshalText_fnRecorder
}

// MoqPrefix_genType_MarshalBinary_params holds the params of the
// Prefix_genType type
type MoqPrefix_genType_MarshalBinary_params struct{}

// MoqPrefix_genType_MarshalBinary_paramsKey holds the map key params of the
// Prefix_genType type
type MoqPrefix_genType_MarshalBinary_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPrefix_genType_MarshalBinary_resultsByParams contains the results for a
// given set of parameters for the Prefix_genType type
type MoqPrefix_genType_MarshalBinary_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPrefix_genType_MarshalBinary_paramsKey]*MoqPrefix_genType_MarshalBinary_results
}

// MoqPrefix_genType_MarshalBinary_doFn defines the type of function needed
// when calling AndDo for the Prefix_genType type
type MoqPrefix_genType_MarshalBinary_doFn func()

// MoqPrefix_genType_MarshalBinary_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Prefix_genType type
type MoqPrefix_genType_MarshalBinary_doReturnFn func() ([]byte, error)

// MoqPrefix_genType_MarshalBinary_results holds the results of the
// Prefix_genType type
type MoqPrefix_genType_MarshalBinary_results struct {
	Params  MoqPrefix_genType_MarshalBinary_params
	Results []struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_MarshalBinary_doFn
		DoReturnFn MoqPrefix_genType_MarshalBinary_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPrefix_genType_MarshalBinary_fnRecorder routes recorded function calls to
// the MoqPrefix_genType moq
type MoqPrefix_genType_MarshalBinary_fnRecorder struct {
	Params    MoqPrefix_genType_MarshalBinary_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPrefix_genType_MarshalBinary_results
	Moq       *MoqPrefix_genType
}

// MoqPrefix_genType_MarshalBinary_anyParams isolates the any params functions
// of the Prefix_genType type
type MoqPrefix_genType_MarshalBinary_anyParams struct {
	Recorder *MoqPrefix_genType_MarshalBinary_fnRecorder
}

// MoqPrefix_genType_String_params holds the params of the Prefix_genType type
type MoqPrefix_genType_String_params struct{}

// MoqPrefix_genType_String_paramsKey holds the map key params of the
// Prefix_genType type
type MoqPrefix_genType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPrefix_genType_String_resultsByParams contains the results for a given
// set of parameters for the Prefix_genType type
type MoqPrefix_genType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPrefix_genType_String_paramsKey]*MoqPrefix_genType_String_results
}

// MoqPrefix_genType_String_doFn defines the type of function needed when
// calling AndDo for the Prefix_genType type
type MoqPrefix_genType_String_doFn func()

// MoqPrefix_genType_String_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Prefix_genType type
type MoqPrefix_genType_String_doReturnFn func() string

// MoqPrefix_genType_String_results holds the results of the Prefix_genType
// type
type MoqPrefix_genType_String_results struct {
	Params  MoqPrefix_genType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_String_doFn
		DoReturnFn MoqPrefix_genType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPrefix_genType_String_fnRecorder routes recorded function calls to the
// MoqPrefix_genType moq
type MoqPrefix_genType_String_fnRecorder struct {
	Params    MoqPrefix_genType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPrefix_genType_String_results
	Moq       *MoqPrefix_genType
}

// MoqPrefix_genType_String_anyParams isolates the any params functions of the
// Prefix_genType type
type MoqPrefix_genType_String_anyParams struct {
	Recorder *MoqPrefix_genType_String_fnRecorder
}

// NewMoqPrefix_genType creates a new moq of the Prefix_genType type
func NewMoqPrefix_genType(scene *moq.Scene, config *moq.Config) *MoqPrefix_genType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqPrefix_genType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqPrefix_genType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Addr       struct{}
				Bits       struct{}
				IsValid    struct{}
				IsSingleIP struct{}
				Masked     struct{}
				Contains   struct {
					Ip moq.ParamIndexing
				}
				Overlaps struct {
					O moq.ParamIndexing
				}
				AppendTo struct {
					B moq.ParamIndexing
				}
				MarshalText   struct{}
				MarshalBinary struct{}
				String        struct{}
			}
		}{ParameterIndexing: struct {
			Addr       struct{}
			Bits       struct{}
			IsValid    struct{}
			IsSingleIP struct{}
			Masked     struct{}
			Contains   struct {
				Ip moq.ParamIndexing
			}
			Overlaps struct {
				O moq.ParamIndexing
			}
			AppendTo struct {
				B moq.ParamIndexing
			}
			MarshalText   struct{}
			MarshalBinary struct{}
			String        struct{}
		}{
			Addr:       struct{}{},
			Bits:       struct{}{},
			IsValid:    struct{}{},
			IsSingleIP: struct{}{},
			Masked:     struct{}{},
			Contains: struct {
				Ip moq.ParamIndexing
			}{
				Ip: moq.ParamIndexByHash,
			},
			Overlaps: struct {
				O moq.ParamIndexing
			}{
				O: moq.ParamIndexByHash,
			},
			AppendTo: struct {
				B moq.ParamIndexing
			}{
				B: moq.ParamIndexByHash,
			},
			MarshalText:   struct{}{},
			MarshalBinary: struct{}{},
			String:        struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Prefix_genType type
func (m *MoqPrefix_genType) Mock() *MoqPrefix_genType_mock { return m.Moq }

func (m *MoqPrefix_genType_mock) Addr() (result1 netip.Addr) {
	m.Moq.Scene.T.Helper()
	params := MoqPrefix_genType_Addr_params{}
	var results *MoqPrefix_genType_Addr_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Addr {
		paramsKey := m.Moq.ParamsKey_Addr(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Addr(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Addr(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Addr(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqPrefix_genType_mock) Bits() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqPrefix_genType_Bits_params{}
	var results *MoqPrefix_genType_Bits_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Bits {
		paramsKey := m.Moq.ParamsKey_Bits(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Bits(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Bits(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Bits(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqPrefix_genType_mock) IsValid() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqPrefix_genType_IsValid_params{}
	var results *MoqPrefix_genType_IsValid_results
	for _, resultsByParams := range m.Moq.ResultsByParams_IsValid {
		paramsKey := m.Moq.ParamsKey_IsValid(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_IsValid(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_IsValid(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_IsValid(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqPrefix_genType_mock) IsSingleIP() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqPrefix_genType_IsSingleIP_params{}
	var results *MoqPrefix_genType_IsSingleIP_results
	for _, resultsByParams := range m.Moq.ResultsByParams_IsSingleIP {
		paramsKey := m.Moq.ParamsKey_IsSingleIP(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_IsSingleIP(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_IsSingleIP(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_IsSingleIP(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqPrefix_genType_mock) Masked() (result1 netip.Prefix) {
	m.Moq.Scene.T.Helper()
	params := MoqPrefix_genType_Masked_params{}
	var results *MoqPrefix_genType_Masked_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Masked {
		paramsKey := m.Moq.ParamsKey_Masked(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Masked(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Masked(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Masked(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqPrefix_genType_mock) Contains(ip netip.Addr) (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqPrefix_genType_Contains_params{
		Ip: ip,
	}
	var results *MoqPrefix_genType_Contains_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Contains {
		paramsKey := m.Moq.ParamsKey_Contains(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Contains(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Contains(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Contains(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ip)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(ip)
	}
	return
}

func (m *MoqPrefix_genType_mock) Overlaps(o netip.Prefix) (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqPrefix_genType_Overlaps_params{
		O: o,
	}
	var results *MoqPrefix_genType_Overlaps_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Overlaps {
		paramsKey := m.Moq.ParamsKey_Overlaps(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Overlaps(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Overlaps(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Overlaps(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(o)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(o)
	}
	return
}

func (m *MoqPrefix_genType_mock) AppendTo(b []byte) (result1 []byte) {
	m.Moq.Scene.T.Helper()
	params := MoqPrefix_genType_AppendTo_params{
		B: b,
	}
	var results *MoqPrefix_genType_AppendTo_results
	for _, resultsByParams := range m.Moq.ResultsByParams_AppendTo {
		paramsKey := m.Moq.ParamsKey_AppendTo(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_AppendTo(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_AppendTo(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_AppendTo(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(b)
	}
	return
}

func (m *MoqPrefix_genType_mock) MarshalText() (result1 []byte, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqPrefix_genType_MarshalText_params{}
	var results *MoqPrefix_genType_MarshalText_results
	for _, resultsByParams := range m.Moq.ResultsByParams_MarshalText {
		paramsKey := m.Moq.ParamsKey_MarshalText(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_MarshalText(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_MarshalText(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_MarshalText(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqPrefix_genType_mock) MarshalBinary() (result1 []byte, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqPrefix_genType_MarshalBinary_params{}
	var results *MoqPrefix_genType_MarshalBinary_results
	for _, resultsByParams := range m.Moq.ResultsByParams_MarshalBinary {
		paramsKey := m.Moq.ParamsKey_MarshalBinary(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_MarshalBinary(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_MarshalBinary(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_MarshalBinary(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqPrefix_genType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqPrefix_genType_String_params{}
	var results *MoqPrefix_genType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Prefix_genType type
func (m *MoqPrefix_genType) OnCall() *MoqPrefix_genType_recorder {
	return &MoqPrefix_genType_recorder{
		Moq: m,
	}
}

func (m *MoqPrefix_genType_recorder) Addr() *MoqPrefix_genType_Addr_fnRecorder {
	return &MoqPrefix_genType_Addr_fnRecorder{
		Params:   MoqPrefix_genType_Addr_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPrefix_genType_Addr_fnRecorder) Any() *MoqPrefix_genType_Addr_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Addr(r.Params))
		return nil
	}
	return &MoqPrefix_genType_Addr_anyParams{Recorder: r}
}

func (r *MoqPrefix_genType_Addr_fnRecorder) Seq() *MoqPrefix_genType_Addr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Addr(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPrefix_genType_Addr_fnRecorder) NoSeq() *MoqPrefix_genType_Addr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Addr(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPrefix_genType_Addr_fnRecorder) ReturnResults(result1 netip.Addr) *MoqPrefix_genType_Addr_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 netip.Addr
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_Addr_doFn
		DoReturnFn MoqPrefix_genType_Addr_doReturnFn
	}{
		Values: &struct {
			Result1 netip.Addr
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPrefix_genType_Addr_fnRecorder) AndDo(fn MoqPrefix_genType_Addr_doFn) *MoqPrefix_genType_Addr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPrefix_genType_Addr_fnRecorder) DoReturnResults(fn MoqPrefix_genType_Addr_doReturnFn) *MoqPrefix_genType_Addr_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 netip.Addr
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_Addr_doFn
		DoReturnFn MoqPrefix_genType_Addr_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPrefix_genType_Addr_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPrefix_genType_Addr_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Addr {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPrefix_genType_Addr_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPrefix_genType_Addr_paramsKey]*MoqPrefix_genType_Addr_results{},
		}
		r.Moq.ResultsByParams_Addr = append(r.Moq.ResultsByParams_Addr, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Addr) {
			copy(r.Moq.ResultsByParams_Addr[insertAt+1:], r.Moq.ResultsByParams_Addr[insertAt:0])
			r.Moq.ResultsByParams_Addr[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Addr(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPrefix_genType_Addr_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPrefix_genType_Addr_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPrefix_genType_Addr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 netip.Addr
				}
				Sequence   uint32
				DoFn       MoqPrefix_genType_Addr_doFn
				DoReturnFn MoqPrefix_genType_Addr_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPrefix_genType) PrettyParams_Addr(params MoqPrefix_genType_Addr_params) string {
	return fmt.Sprintf("Addr()")
}

func (m *MoqPrefix_genType) ParamsKey_Addr(params MoqPrefix_genType_Addr_params, anyParams uint64) MoqPrefix_genType_Addr_paramsKey {
	m.Scene.T.Helper()
	return MoqPrefix_genType_Addr_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPrefix_genType_recorder) Bits() *MoqPrefix_genType_Bits_fnRecorder {
	return &MoqPrefix_genType_Bits_fnRecorder{
		Params:   MoqPrefix_genType_Bits_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPrefix_genType_Bits_fnRecorder) Any() *MoqPrefix_genType_Bits_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bits(r.Params))
		return nil
	}
	return &MoqPrefix_genType_Bits_anyParams{Recorder: r}
}

func (r *MoqPrefix_genType_Bits_fnRecorder) Seq() *MoqPrefix_genType_Bits_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bits(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPrefix_genType_Bits_fnRecorder) NoSeq() *MoqPrefix_genType_Bits_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bits(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPrefix_genType_Bits_fnRecorder) ReturnResults(result1 int) *MoqPrefix_genType_Bits_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_Bits_doFn
		DoReturnFn MoqPrefix_genType_Bits_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPrefix_genType_Bits_fnRecorder) AndDo(fn MoqPrefix_genType_Bits_doFn) *MoqPrefix_genType_Bits_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPrefix_genType_Bits_fnRecorder) DoReturnResults(fn MoqPrefix_genType_Bits_doReturnFn) *MoqPrefix_genType_Bits_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_Bits_doFn
		DoReturnFn MoqPrefix_genType_Bits_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPrefix_genType_Bits_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPrefix_genType_Bits_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Bits {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPrefix_genType_Bits_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPrefix_genType_Bits_paramsKey]*MoqPrefix_genType_Bits_results{},
		}
		r.Moq.ResultsByParams_Bits = append(r.Moq.ResultsByParams_Bits, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Bits) {
			copy(r.Moq.ResultsByParams_Bits[insertAt+1:], r.Moq.ResultsByParams_Bits[insertAt:0])
			r.Moq.ResultsByParams_Bits[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Bits(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPrefix_genType_Bits_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPrefix_genType_Bits_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPrefix_genType_Bits_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqPrefix_genType_Bits_doFn
				DoReturnFn MoqPrefix_genType_Bits_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPrefix_genType) PrettyParams_Bits(params MoqPrefix_genType_Bits_params) string {
	return fmt.Sprintf("Bits()")
}

func (m *MoqPrefix_genType) ParamsKey_Bits(params MoqPrefix_genType_Bits_params, anyParams uint64) MoqPrefix_genType_Bits_paramsKey {
	m.Scene.T.Helper()
	return MoqPrefix_genType_Bits_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPrefix_genType_recorder) IsValid() *MoqPrefix_genType_IsValid_fnRecorder {
	return &MoqPrefix_genType_IsValid_fnRecorder{
		Params:   MoqPrefix_genType_IsValid_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPrefix_genType_IsValid_fnRecorder) Any() *MoqPrefix_genType_IsValid_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsValid(r.Params))
		return nil
	}
	return &MoqPrefix_genType_IsValid_anyParams{Recorder: r}
}

func (r *MoqPrefix_genType_IsValid_fnRecorder) Seq() *MoqPrefix_genType_IsValid_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsValid(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPrefix_genType_IsValid_fnRecorder) NoSeq() *MoqPrefix_genType_IsValid_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsValid(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPrefix_genType_IsValid_fnRecorder) ReturnResults(result1 bool) *MoqPrefix_genType_IsValid_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_IsValid_doFn
		DoReturnFn MoqPrefix_genType_IsValid_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPrefix_genType_IsValid_fnRecorder) AndDo(fn MoqPrefix_genType_IsValid_doFn) *MoqPrefix_genType_IsValid_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPrefix_genType_IsValid_fnRecorder) DoReturnResults(fn MoqPrefix_genType_IsValid_doReturnFn) *MoqPrefix_genType_IsValid_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_IsValid_doFn
		DoReturnFn MoqPrefix_genType_IsValid_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPrefix_genType_IsValid_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPrefix_genType_IsValid_resultsByParams
	for n, res := range r.Moq.ResultsByParams_IsValid {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPrefix_genType_IsValid_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPrefix_genType_IsValid_paramsKey]*MoqPrefix_genType_IsValid_results{},
		}
		r.Moq.ResultsByParams_IsValid = append(r.Moq.ResultsByParams_IsValid, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_IsValid) {
			copy(r.Moq.ResultsByParams_IsValid[insertAt+1:], r.Moq.ResultsByParams_IsValid[insertAt:0])
			r.Moq.ResultsByParams_IsValid[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_IsValid(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPrefix_genType_IsValid_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPrefix_genType_IsValid_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPrefix_genType_IsValid_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqPrefix_genType_IsValid_doFn
				DoReturnFn MoqPrefix_genType_IsValid_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPrefix_genType) PrettyParams_IsValid(params MoqPrefix_genType_IsValid_params) string {
	return fmt.Sprintf("IsValid()")
}

func (m *MoqPrefix_genType) ParamsKey_IsValid(params MoqPrefix_genType_IsValid_params, anyParams uint64) MoqPrefix_genType_IsValid_paramsKey {
	m.Scene.T.Helper()
	return MoqPrefix_genType_IsValid_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPrefix_genType_recorder) IsSingleIP() *MoqPrefix_genType_IsSingleIP_fnRecorder {
	return &MoqPrefix_genType_IsSingleIP_fnRecorder{
		Params:   MoqPrefix_genType_IsSingleIP_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPrefix_genType_IsSingleIP_fnRecorder) Any() *MoqPrefix_genType_IsSingleIP_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsSingleIP(r.Params))
		return nil
	}
	return &MoqPrefix_genType_IsSingleIP_anyParams{Recorder: r}
}

func (r *MoqPrefix_genType_IsSingleIP_fnRecorder) Seq() *MoqPrefix_genType_IsSingleIP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsSingleIP(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPrefix_genType_IsSingleIP_fnRecorder) NoSeq() *MoqPrefix_genType_IsSingleIP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsSingleIP(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPrefix_genType_IsSingleIP_fnRecorder) ReturnResults(result1 bool) *MoqPrefix_genType_IsSingleIP_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_IsSingleIP_doFn
		DoReturnFn MoqPrefix_genType_IsSingleIP_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPrefix_genType_IsSingleIP_fnRecorder) AndDo(fn MoqPrefix_genType_IsSingleIP_doFn) *MoqPrefix_genType_IsSingleIP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPrefix_genType_IsSingleIP_fnRecorder) DoReturnResults(fn MoqPrefix_genType_IsSingleIP_doReturnFn) *MoqPrefix_genType_IsSingleIP_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_IsSingleIP_doFn
		DoReturnFn MoqPrefix_genType_IsSingleIP_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPrefix_genType_IsSingleIP_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPrefix_genType_IsSingleIP_resultsByParams
	for n, res := range r.Moq.ResultsByParams_IsSingleIP {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPrefix_genType_IsSingleIP_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPrefix_genType_IsSingleIP_paramsKey]*MoqPrefix_genType_IsSingleIP_results{},
		}
		r.Moq.ResultsByParams_IsSingleIP = append(r.Moq.ResultsByParams_IsSingleIP, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_IsSingleIP) {
			copy(r.Moq.ResultsByParams_IsSingleIP[insertAt+1:], r.Moq.ResultsByParams_IsSingleIP[insertAt:0])
			r.Moq.ResultsByParams_IsSingleIP[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_IsSingleIP(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPrefix_genType_IsSingleIP_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPrefix_genType_IsSingleIP_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPrefix_genType_IsSingleIP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqPrefix_genType_IsSingleIP_doFn
				DoReturnFn MoqPrefix_genType_IsSingleIP_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPrefix_genType) PrettyParams_IsSingleIP(params MoqPrefix_genType_IsSingleIP_params) string {
	return fmt.Sprintf("IsSingleIP()")
}

func (m *MoqPrefix_genType) ParamsKey_IsSingleIP(params MoqPrefix_genType_IsSingleIP_params, anyParams uint64) MoqPrefix_genType_IsSingleIP_paramsKey {
	m.Scene.T.Helper()
	return MoqPrefix_genType_IsSingleIP_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPrefix_genType_recorder) Masked() *MoqPrefix_genType_Masked_fnRecorder {
	return &MoqPrefix_genType_Masked_fnRecorder{
		Params:   MoqPrefix_genType_Masked_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPrefix_genType_Masked_fnRecorder) Any() *MoqPrefix_genType_Masked_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Masked(r.Params))
		return nil
	}
	return &MoqPrefix_genType_Masked_anyParams{Recorder: r}
}

func (r *MoqPrefix_genType_Masked_fnRecorder) Seq() *MoqPrefix_genType_Masked_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Masked(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPrefix_genType_Masked_fnRecorder) NoSeq() *MoqPrefix_genType_Masked_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Masked(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPrefix_genType_Masked_fnRecorder) ReturnResults(result1 netip.Prefix) *MoqPrefix_genType_Masked_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 netip.Prefix
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_Masked_doFn
		DoReturnFn MoqPrefix_genType_Masked_doReturnFn
	}{
		Values: &struct {
			Result1 netip.Prefix
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPrefix_genType_Masked_fnRecorder) AndDo(fn MoqPrefix_genType_Masked_doFn) *MoqPrefix_genType_Masked_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPrefix_genType_Masked_fnRecorder) DoReturnResults(fn MoqPrefix_genType_Masked_doReturnFn) *MoqPrefix_genType_Masked_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 netip.Prefix
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_Masked_doFn
		DoReturnFn MoqPrefix_genType_Masked_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPrefix_genType_Masked_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPrefix_genType_Masked_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Masked {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPrefix_genType_Masked_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPrefix_genType_Masked_paramsKey]*MoqPrefix_genType_Masked_results{},
		}
		r.Moq.ResultsByParams_Masked = append(r.Moq.ResultsByParams_Masked, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Masked) {
			copy(r.Moq.ResultsByParams_Masked[insertAt+1:], r.Moq.ResultsByParams_Masked[insertAt:0])
			r.Moq.ResultsByParams_Masked[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Masked(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPrefix_genType_Masked_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPrefix_genType_Masked_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPrefix_genType_Masked_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 netip.Prefix
				}
				Sequence   uint32
				DoFn       MoqPrefix_genType_Masked_doFn
				DoReturnFn MoqPrefix_genType_Masked_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPrefix_genType) PrettyParams_Masked(params MoqPrefix_genType_Masked_params) string {
	return fmt.Sprintf("Masked()")
}

func (m *MoqPrefix_genType) ParamsKey_Masked(params MoqPrefix_genType_Masked_params, anyParams uint64) MoqPrefix_genType_Masked_paramsKey {
	m.Scene.T.Helper()
	return MoqPrefix_genType_Masked_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPrefix_genType_recorder) Contains(ip netip.Addr) *MoqPrefix_genType_Contains_fnRecorder {
	return &MoqPrefix_genType_Contains_fnRecorder{
		Params: MoqPrefix_genType_Contains_params{
			Ip: ip,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPrefix_genType_Contains_fnRecorder) Any() *MoqPrefix_genType_Contains_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Contains(r.Params))
		return nil
	}
	return &MoqPrefix_genType_Contains_anyParams{Recorder: r}
}

func (a *MoqPrefix_genType_Contains_anyParams) Ip() *MoqPrefix_genType_Contains_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPrefix_genType_Contains_fnRecorder) Seq() *MoqPrefix_genType_Contains_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Contains(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPrefix_genType_Contains_fnRecorder) NoSeq() *MoqPrefix_genType_Contains_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Contains(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPrefix_genType_Contains_fnRecorder) ReturnResults(result1 bool) *MoqPrefix_genType_Contains_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_Contains_doFn
		DoReturnFn MoqPrefix_genType_Contains_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPrefix_genType_Contains_fnRecorder) AndDo(fn MoqPrefix_genType_Contains_doFn) *MoqPrefix_genType_Contains_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPrefix_genType_Contains_fnRecorder) DoReturnResults(fn MoqPrefix_genType_Contains_doReturnFn) *MoqPrefix_genType_Contains_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_Contains_doFn
		DoReturnFn MoqPrefix_genType_Contains_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPrefix_genType_Contains_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPrefix_genType_Contains_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Contains {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPrefix_genType_Contains_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPrefix_genType_Contains_paramsKey]*MoqPrefix_genType_Contains_results{},
		}
		r.Moq.ResultsByParams_Contains = append(r.Moq.ResultsByParams_Contains, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Contains) {
			copy(r.Moq.ResultsByParams_Contains[insertAt+1:], r.Moq.ResultsByParams_Contains[insertAt:0])
			r.Moq.ResultsByParams_Contains[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Contains(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPrefix_genType_Contains_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPrefix_genType_Contains_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPrefix_genType_Contains_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqPrefix_genType_Contains_doFn
				DoReturnFn MoqPrefix_genType_Contains_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPrefix_genType) PrettyParams_Contains(params MoqPrefix_genType_Contains_params) string {
	return fmt.Sprintf("Contains(%#v)", params.Ip)
}

func (m *MoqPrefix_genType) ParamsKey_Contains(params MoqPrefix_genType_Contains_params, anyParams uint64) MoqPrefix_genType_Contains_paramsKey {
	m.Scene.T.Helper()
	var ipUsed netip.Addr
	var ipUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Contains.Ip == moq.ParamIndexByValue {
			ipUsed = params.Ip
		} else {
			ipUsedHash = hash.DeepHash(params.Ip)
		}
	}
	return MoqPrefix_genType_Contains_paramsKey{
		Params: struct{ Ip netip.Addr }{
			Ip: ipUsed,
		},
		Hashes: struct{ Ip hash.Hash }{
			Ip: ipUsedHash,
		},
	}
}

func (m *MoqPrefix_genType_recorder) Overlaps(o netip.Prefix) *MoqPrefix_genType_Overlaps_fnRecorder {
	return &MoqPrefix_genType_Overlaps_fnRecorder{
		Params: MoqPrefix_genType_Overlaps_params{
			O: o,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPrefix_genType_Overlaps_fnRecorder) Any() *MoqPrefix_genType_Overlaps_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Overlaps(r.Params))
		return nil
	}
	return &MoqPrefix_genType_Overlaps_anyParams{Recorder: r}
}

func (a *MoqPrefix_genType_Overlaps_anyParams) O() *MoqPrefix_genType_Overlaps_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPrefix_genType_Overlaps_fnRecorder) Seq() *MoqPrefix_genType_Overlaps_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Overlaps(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPrefix_genType_Overlaps_fnRecorder) NoSeq() *MoqPrefix_genType_Overlaps_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Overlaps(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPrefix_genType_Overlaps_fnRecorder) ReturnResults(result1 bool) *MoqPrefix_genType_Overlaps_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_Overlaps_doFn
		DoReturnFn MoqPrefix_genType_Overlaps_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPrefix_genType_Overlaps_fnRecorder) AndDo(fn MoqPrefix_genType_Overlaps_doFn) *MoqPrefix_genType_Overlaps_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPrefix_genType_Overlaps_fnRecorder) DoReturnResults(fn MoqPrefix_genType_Overlaps_doReturnFn) *MoqPrefix_genType_Overlaps_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_Overlaps_doFn
		DoReturnFn MoqPrefix_genType_Overlaps_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPrefix_genType_Overlaps_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPrefix_genType_Overlaps_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Overlaps {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPrefix_genType_Overlaps_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPrefix_genType_Overlaps_paramsKey]*MoqPrefix_genType_Overlaps_results{},
		}
		r.Moq.ResultsByParams_Overlaps = append(r.Moq.ResultsByParams_Overlaps, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Overlaps) {
			copy(r.Moq.ResultsByParams_Overlaps[insertAt+1:], r.Moq.ResultsByParams_Overlaps[insertAt:0])
			r.Moq.ResultsByParams_Overlaps[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Overlaps(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPrefix_genType_Overlaps_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPrefix_genType_Overlaps_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPrefix_genType_Overlaps_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqPrefix_genType_Overlaps_doFn
				DoReturnFn MoqPrefix_genType_Overlaps_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPrefix_genType) PrettyParams_Overlaps(params MoqPrefix_genType_Overlaps_params) string {
	return fmt.Sprintf("Overlaps(%#v)", params.O)
}

func (m *MoqPrefix_genType) ParamsKey_Overlaps(params MoqPrefix_genType_Overlaps_params, anyParams uint64) MoqPrefix_genType_Overlaps_paramsKey {
	m.Scene.T.Helper()
	var oUsed netip.Prefix
	var oUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Overlaps.O == moq.ParamIndexByValue {
			oUsed = params.O
		} else {
			oUsedHash = hash.DeepHash(params.O)
		}
	}
	return MoqPrefix_genType_Overlaps_paramsKey{
		Params: struct{ O netip.Prefix }{
			O: oUsed,
		},
		Hashes: struct{ O hash.Hash }{
			O: oUsedHash,
		},
	}
}

func (m *MoqPrefix_genType_recorder) AppendTo(b []byte) *MoqPrefix_genType_AppendTo_fnRecorder {
	return &MoqPrefix_genType_AppendTo_fnRecorder{
		Params: MoqPrefix_genType_AppendTo_params{
			B: b,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPrefix_genType_AppendTo_fnRecorder) Any() *MoqPrefix_genType_AppendTo_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AppendTo(r.Params))
		return nil
	}
	return &MoqPrefix_genType_AppendTo_anyParams{Recorder: r}
}

func (a *MoqPrefix_genType_AppendTo_anyParams) B() *MoqPrefix_genType_AppendTo_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPrefix_genType_AppendTo_fnRecorder) Seq() *MoqPrefix_genType_AppendTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AppendTo(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPrefix_genType_AppendTo_fnRecorder) NoSeq() *MoqPrefix_genType_AppendTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AppendTo(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPrefix_genType_AppendTo_fnRecorder) ReturnResults(result1 []byte) *MoqPrefix_genType_AppendTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_AppendTo_doFn
		DoReturnFn MoqPrefix_genType_AppendTo_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPrefix_genType_AppendTo_fnRecorder) AndDo(fn MoqPrefix_genType_AppendTo_doFn) *MoqPrefix_genType_AppendTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPrefix_genType_AppendTo_fnRecorder) DoReturnResults(fn MoqPrefix_genType_AppendTo_doReturnFn) *MoqPrefix_genType_AppendTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_AppendTo_doFn
		DoReturnFn MoqPrefix_genType_AppendTo_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPrefix_genType_AppendTo_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPrefix_genType_AppendTo_resultsByParams
	for n, res := range r.Moq.ResultsByParams_AppendTo {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPrefix_genType_AppendTo_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPrefix_genType_AppendTo_paramsKey]*MoqPrefix_genType_AppendTo_results{},
		}
		r.Moq.ResultsByParams_AppendTo = append(r.Moq.ResultsByParams_AppendTo, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_AppendTo) {
			copy(r.Moq.ResultsByParams_AppendTo[insertAt+1:], r.Moq.ResultsByParams_AppendTo[insertAt:0])
			r.Moq.ResultsByParams_AppendTo[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_AppendTo(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPrefix_genType_AppendTo_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPrefix_genType_AppendTo_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPrefix_genType_AppendTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
				}
				Sequence   uint32
				DoFn       MoqPrefix_genType_AppendTo_doFn
				DoReturnFn MoqPrefix_genType_AppendTo_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPrefix_genType) PrettyParams_AppendTo(params MoqPrefix_genType_AppendTo_params) string {
	return fmt.Sprintf("AppendTo(%#v)", params.B)
}

func (m *MoqPrefix_genType) ParamsKey_AppendTo(params MoqPrefix_genType_AppendTo_params, anyParams uint64) MoqPrefix_genType_AppendTo_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.AppendTo.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the AppendTo function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	return MoqPrefix_genType_AppendTo_paramsKey{
		Params: struct{}{},
		Hashes: struct{ B hash.Hash }{
			B: bUsedHash,
		},
	}
}

func (m *MoqPrefix_genType_recorder) MarshalText() *MoqPrefix_genType_MarshalText_fnRecorder {
	return &MoqPrefix_genType_MarshalText_fnRecorder{
		Params:   MoqPrefix_genType_MarshalText_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPrefix_genType_MarshalText_fnRecorder) Any() *MoqPrefix_genType_MarshalText_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MarshalText(r.Params))
		return nil
	}
	return &MoqPrefix_genType_MarshalText_anyParams{Recorder: r}
}

func (r *MoqPrefix_genType_MarshalText_fnRecorder) Seq() *MoqPrefix_genType_MarshalText_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MarshalText(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPrefix_genType_MarshalText_fnRecorder) NoSeq() *MoqPrefix_genType_MarshalText_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MarshalText(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPrefix_genType_MarshalText_fnRecorder) ReturnResults(result1 []byte, result2 error) *MoqPrefix_genType_MarshalText_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_MarshalText_doFn
		DoReturnFn MoqPrefix_genType_MarshalText_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPrefix_genType_MarshalText_fnRecorder) AndDo(fn MoqPrefix_genType_MarshalText_doFn) *MoqPrefix_genType_MarshalText_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPrefix_genType_MarshalText_fnRecorder) DoReturnResults(fn MoqPrefix_genType_MarshalText_doReturnFn) *MoqPrefix_genType_MarshalText_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_MarshalText_doFn
		DoReturnFn MoqPrefix_genType_MarshalText_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPrefix_genType_MarshalText_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPrefix_genType_MarshalText_resultsByParams
	for n, res := range r.Moq.ResultsByParams_MarshalText {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPrefix_genType_MarshalText_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPrefix_genType_MarshalText_paramsKey]*MoqPrefix_genType_MarshalText_results{},
		}
		r.Moq.ResultsByParams_MarshalText = append(r.Moq.ResultsByParams_MarshalText, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_MarshalText) {
			copy(r.Moq.ResultsByParams_MarshalText[insertAt+1:], r.Moq.ResultsByParams_MarshalText[insertAt:0])
			r.Moq.ResultsByParams_MarshalText[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_MarshalText(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPrefix_genType_MarshalText_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPrefix_genType_MarshalText_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPrefix_genType_MarshalText_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqPrefix_genType_MarshalText_doFn
				DoReturnFn MoqPrefix_genType_MarshalText_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPrefix_genType) PrettyParams_MarshalText(params MoqPrefix_genType_MarshalText_params) string {
	return fmt.Sprintf("MarshalText()")
}

func (m *MoqPrefix_genType) ParamsKey_MarshalText(params MoqPrefix_genType_MarshalText_params, anyParams uint64) MoqPrefix_genType_MarshalText_paramsKey {
	m.Scene.T.Helper()
	return MoqPrefix_genType_MarshalText_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPrefix_genType_recorder) MarshalBinary() *MoqPrefix_genType_MarshalBinary_fnRecorder {
	return &MoqPrefix_genType_MarshalBinary_fnRecorder{
		Params:   MoqPrefix_genType_MarshalBinary_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPrefix_genType_MarshalBinary_fnRecorder) Any() *MoqPrefix_genType_MarshalBinary_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MarshalBinary(r.Params))
		return nil
	}
	return &MoqPrefix_genType_MarshalBinary_anyParams{Recorder: r}
}

func (r *MoqPrefix_genType_MarshalBinary_fnRecorder) Seq() *MoqPrefix_genType_MarshalBinary_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MarshalBinary(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPrefix_genType_MarshalBinary_fnRecorder) NoSeq() *MoqPrefix_genType_MarshalBinary_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MarshalBinary(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPrefix_genType_MarshalBinary_fnRecorder) ReturnResults(result1 []byte, result2 error) *MoqPrefix_genType_MarshalBinary_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_MarshalBinary_doFn
		DoReturnFn MoqPrefix_genType_MarshalBinary_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPrefix_genType_MarshalBinary_fnRecorder) AndDo(fn MoqPrefix_genType_MarshalBinary_doFn) *MoqPrefix_genType_MarshalBinary_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPrefix_genType_MarshalBinary_fnRecorder) DoReturnResults(fn MoqPrefix_genType_MarshalBinary_doReturnFn) *MoqPrefix_genType_MarshalBinary_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_MarshalBinary_doFn
		DoReturnFn MoqPrefix_genType_MarshalBinary_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPrefix_genType_MarshalBinary_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPrefix_genType_MarshalBinary_resultsByParams
	for n, res := range r.Moq.ResultsByParams_MarshalBinary {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPrefix_genType_MarshalBinary_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPrefix_genType_MarshalBinary_paramsKey]*MoqPrefix_genType_MarshalBinary_results{},
		}
		r.Moq.ResultsByParams_MarshalBinary = append(r.Moq.ResultsByParams_MarshalBinary, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_MarshalBinary) {
			copy(r.Moq.ResultsByParams_MarshalBinary[insertAt+1:], r.Moq.ResultsByParams_MarshalBinary[insertAt:0])
			r.Moq.ResultsByParams_MarshalBinary[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_MarshalBinary(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPrefix_genType_MarshalBinary_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPrefix_genType_MarshalBinary_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPrefix_genType_MarshalBinary_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqPrefix_genType_MarshalBinary_doFn
				DoReturnFn MoqPrefix_genType_MarshalBinary_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPrefix_genType) PrettyParams_MarshalBinary(params MoqPrefix_genType_MarshalBinary_params) string {
	return fmt.Sprintf("MarshalBinary()")
}

func (m *MoqPrefix_genType) ParamsKey_MarshalBinary(params MoqPrefix_genType_MarshalBinary_params, anyParams uint64) MoqPrefix_genType_MarshalBinary_paramsKey {
	m.Scene.T.Helper()
	return MoqPrefix_genType_MarshalBinary_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPrefix_genType_recorder) String() *MoqPrefix_genType_String_fnRecorder {
	return &MoqPrefix_genType_String_fnRecorder{
		Params:   MoqPrefix_genType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPrefix_genType_String_fnRecorder) Any() *MoqPrefix_genType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqPrefix_genType_String_anyParams{Recorder: r}
}

func (r *MoqPrefix_genType_String_fnRecorder) Seq() *MoqPrefix_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPrefix_genType_String_fnRecorder) NoSeq() *MoqPrefix_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPrefix_genType_String_fnRecorder) ReturnResults(result1 string) *MoqPrefix_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_String_doFn
		DoReturnFn MoqPrefix_genType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPrefix_genType_String_fnRecorder) AndDo(fn MoqPrefix_genType_String_doFn) *MoqPrefix_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPrefix_genType_String_fnRecorder) DoReturnResults(fn MoqPrefix_genType_String_doReturnFn) *MoqPrefix_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPrefix_genType_String_doFn
		DoReturnFn MoqPrefix_genType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPrefix_genType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPrefix_genType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPrefix_genType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPrefix_genType_String_paramsKey]*MoqPrefix_genType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPrefix_genType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPrefix_genType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPrefix_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqPrefix_genType_String_doFn
				DoReturnFn MoqPrefix_genType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPrefix_genType) PrettyParams_String(params MoqPrefix_genType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqPrefix_genType) ParamsKey_String(params MoqPrefix_genType_String_params, anyParams uint64) MoqPrefix_genType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqPrefix_genType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqPrefix_genType) Reset() {
	m.ResultsByParams_Addr = nil
	m.ResultsByParams_Bits = nil
	m.ResultsByParams_IsValid = nil
	m.ResultsByParams_IsSingleIP = nil
	m.ResultsByParams_Masked = nil
	m.ResultsByParams_Contains = nil
	m.ResultsByParams_Overlaps = nil
	m.ResultsByParams_AppendTo = nil
	m.ResultsByParams_MarshalText = nil
	m.ResultsByParams_MarshalBinary = nil
	m.ResultsByParams_String = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqPrefix_genType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Addr {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Addr(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Bits {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Bits(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_IsValid {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_IsValid(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_IsSingleIP {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_IsSingleIP(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Masked {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Masked(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Contains {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Contains(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Overlaps {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Overlaps(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_AppendTo {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_AppendTo(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_MarshalText {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_MarshalText(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_MarshalBinary {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_MarshalBinary(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
}
