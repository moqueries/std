// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package netip

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that netip.Addr_starGenType is mocked
// completely
var _ Addr_starGenType = (*MoqAddr_starGenType_mock)(nil)

// Addr_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Addr_starGenType interface {
	UnmarshalText(text []byte) error
	UnmarshalBinary(b []byte) error
}

// MoqAddr_starGenType holds the state of a moq of the Addr_starGenType type
type MoqAddr_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqAddr_starGenType_mock

	ResultsByParams_UnmarshalText   []MoqAddr_starGenType_UnmarshalText_resultsByParams
	ResultsByParams_UnmarshalBinary []MoqAddr_starGenType_UnmarshalBinary_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			UnmarshalText struct {
				Text moq.ParamIndexing
			}
			UnmarshalBinary struct {
				B moq.ParamIndexing
			}
		}
	}
	// MoqAddr_starGenType_mock isolates the mock interface of the Addr_starGenType
}

// type
type MoqAddr_starGenType_mock struct {
	Moq *MoqAddr_starGenType
}

// MoqAddr_starGenType_recorder isolates the recorder interface of the
// Addr_starGenType type
type MoqAddr_starGenType_recorder struct {
	Moq *MoqAddr_starGenType
}

// MoqAddr_starGenType_UnmarshalText_params holds the params of the
// Addr_starGenType type
type MoqAddr_starGenType_UnmarshalText_params struct{ Text []byte }

// MoqAddr_starGenType_UnmarshalText_paramsKey holds the map key params of the
// Addr_starGenType type
type MoqAddr_starGenType_UnmarshalText_paramsKey struct {
	Params struct{}
	Hashes struct{ Text hash.Hash }
}

// MoqAddr_starGenType_UnmarshalText_resultsByParams contains the results for a
// given set of parameters for the Addr_starGenType type
type MoqAddr_starGenType_UnmarshalText_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqAddr_starGenType_UnmarshalText_paramsKey]*MoqAddr_starGenType_UnmarshalText_results
}

// MoqAddr_starGenType_UnmarshalText_doFn defines the type of function needed
// when calling AndDo for the Addr_starGenType type
type MoqAddr_starGenType_UnmarshalText_doFn func(text []byte)

// MoqAddr_starGenType_UnmarshalText_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Addr_starGenType type
type MoqAddr_starGenType_UnmarshalText_doReturnFn func(text []byte) error

// MoqAddr_starGenType_UnmarshalText_results holds the results of the
// Addr_starGenType type
type MoqAddr_starGenType_UnmarshalText_results struct {
	Params  MoqAddr_starGenType_UnmarshalText_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqAddr_starGenType_UnmarshalText_doFn
		DoReturnFn MoqAddr_starGenType_UnmarshalText_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqAddr_starGenType_UnmarshalText_fnRecorder routes recorded function calls
// to the MoqAddr_starGenType moq
type MoqAddr_starGenType_UnmarshalText_fnRecorder struct {
	Params    MoqAddr_starGenType_UnmarshalText_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqAddr_starGenType_UnmarshalText_results
	Moq       *MoqAddr_starGenType
}

// MoqAddr_starGenType_UnmarshalText_anyParams isolates the any params
// functions of the Addr_starGenType type
type MoqAddr_starGenType_UnmarshalText_anyParams struct {
	Recorder *MoqAddr_starGenType_UnmarshalText_fnRecorder
}

// MoqAddr_starGenType_UnmarshalBinary_params holds the params of the
// Addr_starGenType type
type MoqAddr_starGenType_UnmarshalBinary_params struct{ B []byte }

// MoqAddr_starGenType_UnmarshalBinary_paramsKey holds the map key params of
// the Addr_starGenType type
type MoqAddr_starGenType_UnmarshalBinary_paramsKey struct {
	Params struct{}
	Hashes struct{ B hash.Hash }
}

// MoqAddr_starGenType_UnmarshalBinary_resultsByParams contains the results for
// a given set of parameters for the Addr_starGenType type
type MoqAddr_starGenType_UnmarshalBinary_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqAddr_starGenType_UnmarshalBinary_paramsKey]*MoqAddr_starGenType_UnmarshalBinary_results
}

// MoqAddr_starGenType_UnmarshalBinary_doFn defines the type of function needed
// when calling AndDo for the Addr_starGenType type
type MoqAddr_starGenType_UnmarshalBinary_doFn func(b []byte)

// MoqAddr_starGenType_UnmarshalBinary_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Addr_starGenType type
type MoqAddr_starGenType_UnmarshalBinary_doReturnFn func(b []byte) error

// MoqAddr_starGenType_UnmarshalBinary_results holds the results of the
// Addr_starGenType type
type MoqAddr_starGenType_UnmarshalBinary_results struct {
	Params  MoqAddr_starGenType_UnmarshalBinary_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqAddr_starGenType_UnmarshalBinary_doFn
		DoReturnFn MoqAddr_starGenType_UnmarshalBinary_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqAddr_starGenType_UnmarshalBinary_fnRecorder routes recorded function
// calls to the MoqAddr_starGenType moq
type MoqAddr_starGenType_UnmarshalBinary_fnRecorder struct {
	Params    MoqAddr_starGenType_UnmarshalBinary_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqAddr_starGenType_UnmarshalBinary_results
	Moq       *MoqAddr_starGenType
}

// MoqAddr_starGenType_UnmarshalBinary_anyParams isolates the any params
// functions of the Addr_starGenType type
type MoqAddr_starGenType_UnmarshalBinary_anyParams struct {
	Recorder *MoqAddr_starGenType_UnmarshalBinary_fnRecorder
}

// NewMoqAddr_starGenType creates a new moq of the Addr_starGenType type
func NewMoqAddr_starGenType(scene *moq.Scene, config *moq.Config) *MoqAddr_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqAddr_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqAddr_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				UnmarshalText struct {
					Text moq.ParamIndexing
				}
				UnmarshalBinary struct {
					B moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			UnmarshalText struct {
				Text moq.ParamIndexing
			}
			UnmarshalBinary struct {
				B moq.ParamIndexing
			}
		}{
			UnmarshalText: struct {
				Text moq.ParamIndexing
			}{
				Text: moq.ParamIndexByHash,
			},
			UnmarshalBinary: struct {
				B moq.ParamIndexing
			}{
				B: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Addr_starGenType type
func (m *MoqAddr_starGenType) Mock() *MoqAddr_starGenType_mock { return m.Moq }

func (m *MoqAddr_starGenType_mock) UnmarshalText(text []byte) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqAddr_starGenType_UnmarshalText_params{
		Text: text,
	}
	var results *MoqAddr_starGenType_UnmarshalText_results
	for _, resultsByParams := range m.Moq.ResultsByParams_UnmarshalText {
		paramsKey := m.Moq.ParamsKey_UnmarshalText(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_UnmarshalText(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_UnmarshalText(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_UnmarshalText(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(text)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(text)
	}
	return
}

func (m *MoqAddr_starGenType_mock) UnmarshalBinary(b []byte) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqAddr_starGenType_UnmarshalBinary_params{
		B: b,
	}
	var results *MoqAddr_starGenType_UnmarshalBinary_results
	for _, resultsByParams := range m.Moq.ResultsByParams_UnmarshalBinary {
		paramsKey := m.Moq.ParamsKey_UnmarshalBinary(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_UnmarshalBinary(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_UnmarshalBinary(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_UnmarshalBinary(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(b)
	}
	return
}

// OnCall returns the recorder implementation of the Addr_starGenType type
func (m *MoqAddr_starGenType) OnCall() *MoqAddr_starGenType_recorder {
	return &MoqAddr_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqAddr_starGenType_recorder) UnmarshalText(text []byte) *MoqAddr_starGenType_UnmarshalText_fnRecorder {
	return &MoqAddr_starGenType_UnmarshalText_fnRecorder{
		Params: MoqAddr_starGenType_UnmarshalText_params{
			Text: text,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqAddr_starGenType_UnmarshalText_fnRecorder) Any() *MoqAddr_starGenType_UnmarshalText_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnmarshalText(r.Params))
		return nil
	}
	return &MoqAddr_starGenType_UnmarshalText_anyParams{Recorder: r}
}

func (a *MoqAddr_starGenType_UnmarshalText_anyParams) Text() *MoqAddr_starGenType_UnmarshalText_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqAddr_starGenType_UnmarshalText_fnRecorder) Seq() *MoqAddr_starGenType_UnmarshalText_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnmarshalText(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqAddr_starGenType_UnmarshalText_fnRecorder) NoSeq() *MoqAddr_starGenType_UnmarshalText_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnmarshalText(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqAddr_starGenType_UnmarshalText_fnRecorder) ReturnResults(result1 error) *MoqAddr_starGenType_UnmarshalText_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqAddr_starGenType_UnmarshalText_doFn
		DoReturnFn MoqAddr_starGenType_UnmarshalText_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqAddr_starGenType_UnmarshalText_fnRecorder) AndDo(fn MoqAddr_starGenType_UnmarshalText_doFn) *MoqAddr_starGenType_UnmarshalText_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqAddr_starGenType_UnmarshalText_fnRecorder) DoReturnResults(fn MoqAddr_starGenType_UnmarshalText_doReturnFn) *MoqAddr_starGenType_UnmarshalText_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqAddr_starGenType_UnmarshalText_doFn
		DoReturnFn MoqAddr_starGenType_UnmarshalText_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqAddr_starGenType_UnmarshalText_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqAddr_starGenType_UnmarshalText_resultsByParams
	for n, res := range r.Moq.ResultsByParams_UnmarshalText {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqAddr_starGenType_UnmarshalText_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqAddr_starGenType_UnmarshalText_paramsKey]*MoqAddr_starGenType_UnmarshalText_results{},
		}
		r.Moq.ResultsByParams_UnmarshalText = append(r.Moq.ResultsByParams_UnmarshalText, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_UnmarshalText) {
			copy(r.Moq.ResultsByParams_UnmarshalText[insertAt+1:], r.Moq.ResultsByParams_UnmarshalText[insertAt:0])
			r.Moq.ResultsByParams_UnmarshalText[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_UnmarshalText(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqAddr_starGenType_UnmarshalText_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqAddr_starGenType_UnmarshalText_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqAddr_starGenType_UnmarshalText_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqAddr_starGenType_UnmarshalText_doFn
				DoReturnFn MoqAddr_starGenType_UnmarshalText_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqAddr_starGenType) PrettyParams_UnmarshalText(params MoqAddr_starGenType_UnmarshalText_params) string {
	return fmt.Sprintf("UnmarshalText(%#v)", params.Text)
}

func (m *MoqAddr_starGenType) ParamsKey_UnmarshalText(params MoqAddr_starGenType_UnmarshalText_params, anyParams uint64) MoqAddr_starGenType_UnmarshalText_paramsKey {
	m.Scene.T.Helper()
	var textUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.UnmarshalText.Text == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The text parameter of the UnmarshalText function can't be indexed by value")
		}
		textUsedHash = hash.DeepHash(params.Text)
	}
	return MoqAddr_starGenType_UnmarshalText_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Text hash.Hash }{
			Text: textUsedHash,
		},
	}
}

func (m *MoqAddr_starGenType_recorder) UnmarshalBinary(b []byte) *MoqAddr_starGenType_UnmarshalBinary_fnRecorder {
	return &MoqAddr_starGenType_UnmarshalBinary_fnRecorder{
		Params: MoqAddr_starGenType_UnmarshalBinary_params{
			B: b,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqAddr_starGenType_UnmarshalBinary_fnRecorder) Any() *MoqAddr_starGenType_UnmarshalBinary_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnmarshalBinary(r.Params))
		return nil
	}
	return &MoqAddr_starGenType_UnmarshalBinary_anyParams{Recorder: r}
}

func (a *MoqAddr_starGenType_UnmarshalBinary_anyParams) B() *MoqAddr_starGenType_UnmarshalBinary_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqAddr_starGenType_UnmarshalBinary_fnRecorder) Seq() *MoqAddr_starGenType_UnmarshalBinary_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnmarshalBinary(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqAddr_starGenType_UnmarshalBinary_fnRecorder) NoSeq() *MoqAddr_starGenType_UnmarshalBinary_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnmarshalBinary(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqAddr_starGenType_UnmarshalBinary_fnRecorder) ReturnResults(result1 error) *MoqAddr_starGenType_UnmarshalBinary_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqAddr_starGenType_UnmarshalBinary_doFn
		DoReturnFn MoqAddr_starGenType_UnmarshalBinary_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqAddr_starGenType_UnmarshalBinary_fnRecorder) AndDo(fn MoqAddr_starGenType_UnmarshalBinary_doFn) *MoqAddr_starGenType_UnmarshalBinary_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqAddr_starGenType_UnmarshalBinary_fnRecorder) DoReturnResults(fn MoqAddr_starGenType_UnmarshalBinary_doReturnFn) *MoqAddr_starGenType_UnmarshalBinary_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqAddr_starGenType_UnmarshalBinary_doFn
		DoReturnFn MoqAddr_starGenType_UnmarshalBinary_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqAddr_starGenType_UnmarshalBinary_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqAddr_starGenType_UnmarshalBinary_resultsByParams
	for n, res := range r.Moq.ResultsByParams_UnmarshalBinary {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqAddr_starGenType_UnmarshalBinary_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqAddr_starGenType_UnmarshalBinary_paramsKey]*MoqAddr_starGenType_UnmarshalBinary_results{},
		}
		r.Moq.ResultsByParams_UnmarshalBinary = append(r.Moq.ResultsByParams_UnmarshalBinary, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_UnmarshalBinary) {
			copy(r.Moq.ResultsByParams_UnmarshalBinary[insertAt+1:], r.Moq.ResultsByParams_UnmarshalBinary[insertAt:0])
			r.Moq.ResultsByParams_UnmarshalBinary[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_UnmarshalBinary(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqAddr_starGenType_UnmarshalBinary_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqAddr_starGenType_UnmarshalBinary_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqAddr_starGenType_UnmarshalBinary_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqAddr_starGenType_UnmarshalBinary_doFn
				DoReturnFn MoqAddr_starGenType_UnmarshalBinary_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqAddr_starGenType) PrettyParams_UnmarshalBinary(params MoqAddr_starGenType_UnmarshalBinary_params) string {
	return fmt.Sprintf("UnmarshalBinary(%#v)", params.B)
}

func (m *MoqAddr_starGenType) ParamsKey_UnmarshalBinary(params MoqAddr_starGenType_UnmarshalBinary_params, anyParams uint64) MoqAddr_starGenType_UnmarshalBinary_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.UnmarshalBinary.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the UnmarshalBinary function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	return MoqAddr_starGenType_UnmarshalBinary_paramsKey{
		Params: struct{}{},
		Hashes: struct{ B hash.Hash }{
			B: bUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqAddr_starGenType) Reset() {
	m.ResultsByParams_UnmarshalText = nil
	m.ResultsByParams_UnmarshalBinary = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqAddr_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_UnmarshalText {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_UnmarshalText(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_UnmarshalBinary {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_UnmarshalBinary(results.Params))
			}
		}
	}
}
