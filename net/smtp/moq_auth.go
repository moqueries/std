// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package smtp

import (
	"fmt"
	"math/bits"
	"net/smtp"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that smtp.Auth is mocked completely
var _ smtp.Auth = (*MoqAuth_mock)(nil)

// MoqAuth holds the state of a moq of the Auth type
type MoqAuth struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqAuth_mock

	ResultsByParams_Start []MoqAuth_Start_resultsByParams
	ResultsByParams_Next  []MoqAuth_Next_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Start struct {
				Server moq.ParamIndexing
			}
			Next struct {
				FromServer moq.ParamIndexing
				More       moq.ParamIndexing
			}
		}
	}
	// MoqAuth_mock isolates the mock interface of the Auth type
}

type MoqAuth_mock struct {
	Moq *MoqAuth
}

// MoqAuth_recorder isolates the recorder interface of the Auth type
type MoqAuth_recorder struct {
	Moq *MoqAuth
}

// MoqAuth_Start_params holds the params of the Auth type
type MoqAuth_Start_params struct{ Server *smtp.ServerInfo }

// MoqAuth_Start_paramsKey holds the map key params of the Auth type
type MoqAuth_Start_paramsKey struct {
	Params struct{ Server *smtp.ServerInfo }
	Hashes struct{ Server hash.Hash }
}

// MoqAuth_Start_resultsByParams contains the results for a given set of
// parameters for the Auth type
type MoqAuth_Start_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqAuth_Start_paramsKey]*MoqAuth_Start_results
}

// MoqAuth_Start_doFn defines the type of function needed when calling AndDo
// for the Auth type
type MoqAuth_Start_doFn func(server *smtp.ServerInfo)

// MoqAuth_Start_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Auth type
type MoqAuth_Start_doReturnFn func(server *smtp.ServerInfo) (proto string, toServer []byte, err error)

// MoqAuth_Start_results holds the results of the Auth type
type MoqAuth_Start_results struct {
	Params  MoqAuth_Start_params
	Results []struct {
		Values *struct {
			Proto    string
			ToServer []byte
			Err      error
		}
		Sequence   uint32
		DoFn       MoqAuth_Start_doFn
		DoReturnFn MoqAuth_Start_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqAuth_Start_fnRecorder routes recorded function calls to the MoqAuth moq
type MoqAuth_Start_fnRecorder struct {
	Params    MoqAuth_Start_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqAuth_Start_results
	Moq       *MoqAuth
}

// MoqAuth_Start_anyParams isolates the any params functions of the Auth type
type MoqAuth_Start_anyParams struct {
	Recorder *MoqAuth_Start_fnRecorder
}

// MoqAuth_Next_params holds the params of the Auth type
type MoqAuth_Next_params struct {
	FromServer []byte
	More       bool
}

// MoqAuth_Next_paramsKey holds the map key params of the Auth type
type MoqAuth_Next_paramsKey struct {
	Params struct{ More bool }
	Hashes struct {
		FromServer hash.Hash
		More       hash.Hash
	}
}

// MoqAuth_Next_resultsByParams contains the results for a given set of
// parameters for the Auth type
type MoqAuth_Next_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqAuth_Next_paramsKey]*MoqAuth_Next_results
}

// MoqAuth_Next_doFn defines the type of function needed when calling AndDo for
// the Auth type
type MoqAuth_Next_doFn func(fromServer []byte, more bool)

// MoqAuth_Next_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Auth type
type MoqAuth_Next_doReturnFn func(fromServer []byte, more bool) (toServer []byte, err error)

// MoqAuth_Next_results holds the results of the Auth type
type MoqAuth_Next_results struct {
	Params  MoqAuth_Next_params
	Results []struct {
		Values *struct {
			ToServer []byte
			Err      error
		}
		Sequence   uint32
		DoFn       MoqAuth_Next_doFn
		DoReturnFn MoqAuth_Next_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqAuth_Next_fnRecorder routes recorded function calls to the MoqAuth moq
type MoqAuth_Next_fnRecorder struct {
	Params    MoqAuth_Next_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqAuth_Next_results
	Moq       *MoqAuth
}

// MoqAuth_Next_anyParams isolates the any params functions of the Auth type
type MoqAuth_Next_anyParams struct {
	Recorder *MoqAuth_Next_fnRecorder
}

// NewMoqAuth creates a new moq of the Auth type
func NewMoqAuth(scene *moq.Scene, config *moq.Config) *MoqAuth {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqAuth{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqAuth_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Start struct {
					Server moq.ParamIndexing
				}
				Next struct {
					FromServer moq.ParamIndexing
					More       moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Start struct {
				Server moq.ParamIndexing
			}
			Next struct {
				FromServer moq.ParamIndexing
				More       moq.ParamIndexing
			}
		}{
			Start: struct {
				Server moq.ParamIndexing
			}{
				Server: moq.ParamIndexByHash,
			},
			Next: struct {
				FromServer moq.ParamIndexing
				More       moq.ParamIndexing
			}{
				FromServer: moq.ParamIndexByHash,
				More:       moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Auth type
func (m *MoqAuth) Mock() *MoqAuth_mock { return m.Moq }

func (m *MoqAuth_mock) Start(server *smtp.ServerInfo) (proto string, toServer []byte, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqAuth_Start_params{
		Server: server,
	}
	var results *MoqAuth_Start_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Start {
		paramsKey := m.Moq.ParamsKey_Start(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Start(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Start(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Start(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(server)
	}

	if result.Values != nil {
		proto = result.Values.Proto
		toServer = result.Values.ToServer
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		proto, toServer, err = result.DoReturnFn(server)
	}
	return
}

func (m *MoqAuth_mock) Next(fromServer []byte, more bool) (toServer []byte, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqAuth_Next_params{
		FromServer: fromServer,
		More:       more,
	}
	var results *MoqAuth_Next_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Next {
		paramsKey := m.Moq.ParamsKey_Next(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Next(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Next(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Next(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(fromServer, more)
	}

	if result.Values != nil {
		toServer = result.Values.ToServer
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		toServer, err = result.DoReturnFn(fromServer, more)
	}
	return
}

// OnCall returns the recorder implementation of the Auth type
func (m *MoqAuth) OnCall() *MoqAuth_recorder {
	return &MoqAuth_recorder{
		Moq: m,
	}
}

func (m *MoqAuth_recorder) Start(server *smtp.ServerInfo) *MoqAuth_Start_fnRecorder {
	return &MoqAuth_Start_fnRecorder{
		Params: MoqAuth_Start_params{
			Server: server,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqAuth_Start_fnRecorder) Any() *MoqAuth_Start_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Start(r.Params))
		return nil
	}
	return &MoqAuth_Start_anyParams{Recorder: r}
}

func (a *MoqAuth_Start_anyParams) Server() *MoqAuth_Start_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqAuth_Start_fnRecorder) Seq() *MoqAuth_Start_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Start(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqAuth_Start_fnRecorder) NoSeq() *MoqAuth_Start_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Start(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqAuth_Start_fnRecorder) ReturnResults(proto string, toServer []byte, err error) *MoqAuth_Start_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Proto    string
			ToServer []byte
			Err      error
		}
		Sequence   uint32
		DoFn       MoqAuth_Start_doFn
		DoReturnFn MoqAuth_Start_doReturnFn
	}{
		Values: &struct {
			Proto    string
			ToServer []byte
			Err      error
		}{
			Proto:    proto,
			ToServer: toServer,
			Err:      err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqAuth_Start_fnRecorder) AndDo(fn MoqAuth_Start_doFn) *MoqAuth_Start_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqAuth_Start_fnRecorder) DoReturnResults(fn MoqAuth_Start_doReturnFn) *MoqAuth_Start_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Proto    string
			ToServer []byte
			Err      error
		}
		Sequence   uint32
		DoFn       MoqAuth_Start_doFn
		DoReturnFn MoqAuth_Start_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqAuth_Start_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqAuth_Start_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Start {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqAuth_Start_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqAuth_Start_paramsKey]*MoqAuth_Start_results{},
		}
		r.Moq.ResultsByParams_Start = append(r.Moq.ResultsByParams_Start, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Start) {
			copy(r.Moq.ResultsByParams_Start[insertAt+1:], r.Moq.ResultsByParams_Start[insertAt:0])
			r.Moq.ResultsByParams_Start[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Start(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqAuth_Start_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqAuth_Start_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqAuth_Start_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Proto    string
					ToServer []byte
					Err      error
				}
				Sequence   uint32
				DoFn       MoqAuth_Start_doFn
				DoReturnFn MoqAuth_Start_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqAuth) PrettyParams_Start(params MoqAuth_Start_params) string {
	return fmt.Sprintf("Start(%#v)", params.Server)
}

func (m *MoqAuth) ParamsKey_Start(params MoqAuth_Start_params, anyParams uint64) MoqAuth_Start_paramsKey {
	m.Scene.T.Helper()
	var serverUsed *smtp.ServerInfo
	var serverUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Start.Server == moq.ParamIndexByValue {
			serverUsed = params.Server
		} else {
			serverUsedHash = hash.DeepHash(params.Server)
		}
	}
	return MoqAuth_Start_paramsKey{
		Params: struct{ Server *smtp.ServerInfo }{
			Server: serverUsed,
		},
		Hashes: struct{ Server hash.Hash }{
			Server: serverUsedHash,
		},
	}
}

func (m *MoqAuth_recorder) Next(fromServer []byte, more bool) *MoqAuth_Next_fnRecorder {
	return &MoqAuth_Next_fnRecorder{
		Params: MoqAuth_Next_params{
			FromServer: fromServer,
			More:       more,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqAuth_Next_fnRecorder) Any() *MoqAuth_Next_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	return &MoqAuth_Next_anyParams{Recorder: r}
}

func (a *MoqAuth_Next_anyParams) FromServer() *MoqAuth_Next_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqAuth_Next_anyParams) More() *MoqAuth_Next_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqAuth_Next_fnRecorder) Seq() *MoqAuth_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqAuth_Next_fnRecorder) NoSeq() *MoqAuth_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqAuth_Next_fnRecorder) ReturnResults(toServer []byte, err error) *MoqAuth_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			ToServer []byte
			Err      error
		}
		Sequence   uint32
		DoFn       MoqAuth_Next_doFn
		DoReturnFn MoqAuth_Next_doReturnFn
	}{
		Values: &struct {
			ToServer []byte
			Err      error
		}{
			ToServer: toServer,
			Err:      err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqAuth_Next_fnRecorder) AndDo(fn MoqAuth_Next_doFn) *MoqAuth_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqAuth_Next_fnRecorder) DoReturnResults(fn MoqAuth_Next_doReturnFn) *MoqAuth_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			ToServer []byte
			Err      error
		}
		Sequence   uint32
		DoFn       MoqAuth_Next_doFn
		DoReturnFn MoqAuth_Next_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqAuth_Next_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqAuth_Next_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Next {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqAuth_Next_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqAuth_Next_paramsKey]*MoqAuth_Next_results{},
		}
		r.Moq.ResultsByParams_Next = append(r.Moq.ResultsByParams_Next, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Next) {
			copy(r.Moq.ResultsByParams_Next[insertAt+1:], r.Moq.ResultsByParams_Next[insertAt:0])
			r.Moq.ResultsByParams_Next[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Next(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqAuth_Next_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqAuth_Next_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqAuth_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					ToServer []byte
					Err      error
				}
				Sequence   uint32
				DoFn       MoqAuth_Next_doFn
				DoReturnFn MoqAuth_Next_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqAuth) PrettyParams_Next(params MoqAuth_Next_params) string {
	return fmt.Sprintf("Next(%#v, %#v)", params.FromServer, params.More)
}

func (m *MoqAuth) ParamsKey_Next(params MoqAuth_Next_params, anyParams uint64) MoqAuth_Next_paramsKey {
	m.Scene.T.Helper()
	var fromServerUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Next.FromServer == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The fromServer parameter of the Next function can't be indexed by value")
		}
		fromServerUsedHash = hash.DeepHash(params.FromServer)
	}
	var moreUsed bool
	var moreUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Next.More == moq.ParamIndexByValue {
			moreUsed = params.More
		} else {
			moreUsedHash = hash.DeepHash(params.More)
		}
	}
	return MoqAuth_Next_paramsKey{
		Params: struct{ More bool }{
			More: moreUsed,
		},
		Hashes: struct {
			FromServer hash.Hash
			More       hash.Hash
		}{
			FromServer: fromServerUsedHash,
			More:       moreUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqAuth) Reset() { m.ResultsByParams_Start = nil; m.ResultsByParams_Next = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqAuth) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Start {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Start(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Next {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Next(results.Params))
			}
		}
	}
}
