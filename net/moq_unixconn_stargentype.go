// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package net

import (
	"fmt"
	"math/bits"
	"net"
	"sync/atomic"
	"syscall"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that net.UnixConn_starGenType is mocked
// completely
var _ UnixConn_starGenType = (*MoqUnixConn_starGenType_mock)(nil)

// UnixConn_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type UnixConn_starGenType interface {
	SyscallConn() (syscall.RawConn, error)
	CloseRead() error
	CloseWrite() error
	ReadFromUnix(b []byte) (int, *net.UnixAddr, error)
	ReadFrom(b []byte) (int, net.Addr, error)
	ReadMsgUnix(b, oob []byte) (n, oobn, flags int, addr *net.UnixAddr, err error)
	WriteToUnix(b []byte, addr *net.UnixAddr) (int, error)
	WriteTo(b []byte, addr net.Addr) (int, error)
	WriteMsgUnix(b, oob []byte, addr *net.UnixAddr) (n, oobn int, err error)
}

// MoqUnixConn_starGenType holds the state of a moq of the UnixConn_starGenType
// type
type MoqUnixConn_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqUnixConn_starGenType_mock

	ResultsByParams_SyscallConn  []MoqUnixConn_starGenType_SyscallConn_resultsByParams
	ResultsByParams_CloseRead    []MoqUnixConn_starGenType_CloseRead_resultsByParams
	ResultsByParams_CloseWrite   []MoqUnixConn_starGenType_CloseWrite_resultsByParams
	ResultsByParams_ReadFromUnix []MoqUnixConn_starGenType_ReadFromUnix_resultsByParams
	ResultsByParams_ReadFrom     []MoqUnixConn_starGenType_ReadFrom_resultsByParams
	ResultsByParams_ReadMsgUnix  []MoqUnixConn_starGenType_ReadMsgUnix_resultsByParams
	ResultsByParams_WriteToUnix  []MoqUnixConn_starGenType_WriteToUnix_resultsByParams
	ResultsByParams_WriteTo      []MoqUnixConn_starGenType_WriteTo_resultsByParams
	ResultsByParams_WriteMsgUnix []MoqUnixConn_starGenType_WriteMsgUnix_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			SyscallConn  struct{}
			CloseRead    struct{}
			CloseWrite   struct{}
			ReadFromUnix struct {
				B moq.ParamIndexing
			}
			ReadFrom struct {
				B moq.ParamIndexing
			}
			ReadMsgUnix struct {
				B   moq.ParamIndexing
				Oob moq.ParamIndexing
			}
			WriteToUnix struct {
				B    moq.ParamIndexing
				Addr moq.ParamIndexing
			}
			WriteTo struct {
				B    moq.ParamIndexing
				Addr moq.ParamIndexing
			}
			WriteMsgUnix struct {
				B    moq.ParamIndexing
				Oob  moq.ParamIndexing
				Addr moq.ParamIndexing
			}
		}
	}
	// MoqUnixConn_starGenType_mock isolates the mock interface of the
}

// UnixConn_starGenType type
type MoqUnixConn_starGenType_mock struct {
	Moq *MoqUnixConn_starGenType
}

// MoqUnixConn_starGenType_recorder isolates the recorder interface of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_recorder struct {
	Moq *MoqUnixConn_starGenType
}

// MoqUnixConn_starGenType_SyscallConn_params holds the params of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_SyscallConn_params struct{}

// MoqUnixConn_starGenType_SyscallConn_paramsKey holds the map key params of
// the UnixConn_starGenType type
type MoqUnixConn_starGenType_SyscallConn_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqUnixConn_starGenType_SyscallConn_resultsByParams contains the results for
// a given set of parameters for the UnixConn_starGenType type
type MoqUnixConn_starGenType_SyscallConn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUnixConn_starGenType_SyscallConn_paramsKey]*MoqUnixConn_starGenType_SyscallConn_results
}

// MoqUnixConn_starGenType_SyscallConn_doFn defines the type of function needed
// when calling AndDo for the UnixConn_starGenType type
type MoqUnixConn_starGenType_SyscallConn_doFn func()

// MoqUnixConn_starGenType_SyscallConn_doReturnFn defines the type of function
// needed when calling DoReturnResults for the UnixConn_starGenType type
type MoqUnixConn_starGenType_SyscallConn_doReturnFn func() (syscall.RawConn, error)

// MoqUnixConn_starGenType_SyscallConn_results holds the results of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_SyscallConn_results struct {
	Params  MoqUnixConn_starGenType_SyscallConn_params
	Results []struct {
		Values *struct {
			Result1 syscall.RawConn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_SyscallConn_doFn
		DoReturnFn MoqUnixConn_starGenType_SyscallConn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUnixConn_starGenType_SyscallConn_fnRecorder routes recorded function
// calls to the MoqUnixConn_starGenType moq
type MoqUnixConn_starGenType_SyscallConn_fnRecorder struct {
	Params    MoqUnixConn_starGenType_SyscallConn_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUnixConn_starGenType_SyscallConn_results
	Moq       *MoqUnixConn_starGenType
}

// MoqUnixConn_starGenType_SyscallConn_anyParams isolates the any params
// functions of the UnixConn_starGenType type
type MoqUnixConn_starGenType_SyscallConn_anyParams struct {
	Recorder *MoqUnixConn_starGenType_SyscallConn_fnRecorder
}

// MoqUnixConn_starGenType_CloseRead_params holds the params of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_CloseRead_params struct{}

// MoqUnixConn_starGenType_CloseRead_paramsKey holds the map key params of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_CloseRead_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqUnixConn_starGenType_CloseRead_resultsByParams contains the results for a
// given set of parameters for the UnixConn_starGenType type
type MoqUnixConn_starGenType_CloseRead_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUnixConn_starGenType_CloseRead_paramsKey]*MoqUnixConn_starGenType_CloseRead_results
}

// MoqUnixConn_starGenType_CloseRead_doFn defines the type of function needed
// when calling AndDo for the UnixConn_starGenType type
type MoqUnixConn_starGenType_CloseRead_doFn func()

// MoqUnixConn_starGenType_CloseRead_doReturnFn defines the type of function
// needed when calling DoReturnResults for the UnixConn_starGenType type
type MoqUnixConn_starGenType_CloseRead_doReturnFn func() error

// MoqUnixConn_starGenType_CloseRead_results holds the results of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_CloseRead_results struct {
	Params  MoqUnixConn_starGenType_CloseRead_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_CloseRead_doFn
		DoReturnFn MoqUnixConn_starGenType_CloseRead_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUnixConn_starGenType_CloseRead_fnRecorder routes recorded function calls
// to the MoqUnixConn_starGenType moq
type MoqUnixConn_starGenType_CloseRead_fnRecorder struct {
	Params    MoqUnixConn_starGenType_CloseRead_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUnixConn_starGenType_CloseRead_results
	Moq       *MoqUnixConn_starGenType
}

// MoqUnixConn_starGenType_CloseRead_anyParams isolates the any params
// functions of the UnixConn_starGenType type
type MoqUnixConn_starGenType_CloseRead_anyParams struct {
	Recorder *MoqUnixConn_starGenType_CloseRead_fnRecorder
}

// MoqUnixConn_starGenType_CloseWrite_params holds the params of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_CloseWrite_params struct{}

// MoqUnixConn_starGenType_CloseWrite_paramsKey holds the map key params of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_CloseWrite_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqUnixConn_starGenType_CloseWrite_resultsByParams contains the results for
// a given set of parameters for the UnixConn_starGenType type
type MoqUnixConn_starGenType_CloseWrite_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUnixConn_starGenType_CloseWrite_paramsKey]*MoqUnixConn_starGenType_CloseWrite_results
}

// MoqUnixConn_starGenType_CloseWrite_doFn defines the type of function needed
// when calling AndDo for the UnixConn_starGenType type
type MoqUnixConn_starGenType_CloseWrite_doFn func()

// MoqUnixConn_starGenType_CloseWrite_doReturnFn defines the type of function
// needed when calling DoReturnResults for the UnixConn_starGenType type
type MoqUnixConn_starGenType_CloseWrite_doReturnFn func() error

// MoqUnixConn_starGenType_CloseWrite_results holds the results of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_CloseWrite_results struct {
	Params  MoqUnixConn_starGenType_CloseWrite_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_CloseWrite_doFn
		DoReturnFn MoqUnixConn_starGenType_CloseWrite_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUnixConn_starGenType_CloseWrite_fnRecorder routes recorded function calls
// to the MoqUnixConn_starGenType moq
type MoqUnixConn_starGenType_CloseWrite_fnRecorder struct {
	Params    MoqUnixConn_starGenType_CloseWrite_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUnixConn_starGenType_CloseWrite_results
	Moq       *MoqUnixConn_starGenType
}

// MoqUnixConn_starGenType_CloseWrite_anyParams isolates the any params
// functions of the UnixConn_starGenType type
type MoqUnixConn_starGenType_CloseWrite_anyParams struct {
	Recorder *MoqUnixConn_starGenType_CloseWrite_fnRecorder
}

// MoqUnixConn_starGenType_ReadFromUnix_params holds the params of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadFromUnix_params struct{ B []byte }

// MoqUnixConn_starGenType_ReadFromUnix_paramsKey holds the map key params of
// the UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadFromUnix_paramsKey struct {
	Params struct{}
	Hashes struct{ B hash.Hash }
}

// MoqUnixConn_starGenType_ReadFromUnix_resultsByParams contains the results
// for a given set of parameters for the UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadFromUnix_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUnixConn_starGenType_ReadFromUnix_paramsKey]*MoqUnixConn_starGenType_ReadFromUnix_results
}

// MoqUnixConn_starGenType_ReadFromUnix_doFn defines the type of function
// needed when calling AndDo for the UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadFromUnix_doFn func(b []byte)

// MoqUnixConn_starGenType_ReadFromUnix_doReturnFn defines the type of function
// needed when calling DoReturnResults for the UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadFromUnix_doReturnFn func(b []byte) (int, *net.UnixAddr, error)

// MoqUnixConn_starGenType_ReadFromUnix_results holds the results of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadFromUnix_results struct {
	Params  MoqUnixConn_starGenType_ReadFromUnix_params
	Results []struct {
		Values *struct {
			Result1 int
			Result2 *net.UnixAddr
			Result3 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_ReadFromUnix_doFn
		DoReturnFn MoqUnixConn_starGenType_ReadFromUnix_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUnixConn_starGenType_ReadFromUnix_fnRecorder routes recorded function
// calls to the MoqUnixConn_starGenType moq
type MoqUnixConn_starGenType_ReadFromUnix_fnRecorder struct {
	Params    MoqUnixConn_starGenType_ReadFromUnix_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUnixConn_starGenType_ReadFromUnix_results
	Moq       *MoqUnixConn_starGenType
}

// MoqUnixConn_starGenType_ReadFromUnix_anyParams isolates the any params
// functions of the UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadFromUnix_anyParams struct {
	Recorder *MoqUnixConn_starGenType_ReadFromUnix_fnRecorder
}

// MoqUnixConn_starGenType_ReadFrom_params holds the params of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadFrom_params struct{ B []byte }

// MoqUnixConn_starGenType_ReadFrom_paramsKey holds the map key params of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadFrom_paramsKey struct {
	Params struct{}
	Hashes struct{ B hash.Hash }
}

// MoqUnixConn_starGenType_ReadFrom_resultsByParams contains the results for a
// given set of parameters for the UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadFrom_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUnixConn_starGenType_ReadFrom_paramsKey]*MoqUnixConn_starGenType_ReadFrom_results
}

// MoqUnixConn_starGenType_ReadFrom_doFn defines the type of function needed
// when calling AndDo for the UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadFrom_doFn func(b []byte)

// MoqUnixConn_starGenType_ReadFrom_doReturnFn defines the type of function
// needed when calling DoReturnResults for the UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadFrom_doReturnFn func(b []byte) (int, net.Addr, error)

// MoqUnixConn_starGenType_ReadFrom_results holds the results of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadFrom_results struct {
	Params  MoqUnixConn_starGenType_ReadFrom_params
	Results []struct {
		Values *struct {
			Result1 int
			Result2 net.Addr
			Result3 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_ReadFrom_doFn
		DoReturnFn MoqUnixConn_starGenType_ReadFrom_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUnixConn_starGenType_ReadFrom_fnRecorder routes recorded function calls
// to the MoqUnixConn_starGenType moq
type MoqUnixConn_starGenType_ReadFrom_fnRecorder struct {
	Params    MoqUnixConn_starGenType_ReadFrom_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUnixConn_starGenType_ReadFrom_results
	Moq       *MoqUnixConn_starGenType
}

// MoqUnixConn_starGenType_ReadFrom_anyParams isolates the any params functions
// of the UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadFrom_anyParams struct {
	Recorder *MoqUnixConn_starGenType_ReadFrom_fnRecorder
}

// MoqUnixConn_starGenType_ReadMsgUnix_params holds the params of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadMsgUnix_params struct{ B, Oob []byte }

// MoqUnixConn_starGenType_ReadMsgUnix_paramsKey holds the map key params of
// the UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadMsgUnix_paramsKey struct {
	Params struct{}
	Hashes struct{ B, Oob hash.Hash }
}

// MoqUnixConn_starGenType_ReadMsgUnix_resultsByParams contains the results for
// a given set of parameters for the UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadMsgUnix_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUnixConn_starGenType_ReadMsgUnix_paramsKey]*MoqUnixConn_starGenType_ReadMsgUnix_results
}

// MoqUnixConn_starGenType_ReadMsgUnix_doFn defines the type of function needed
// when calling AndDo for the UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadMsgUnix_doFn func(b, oob []byte)

// MoqUnixConn_starGenType_ReadMsgUnix_doReturnFn defines the type of function
// needed when calling DoReturnResults for the UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadMsgUnix_doReturnFn func(b, oob []byte) (n, oobn, flags int, addr *net.UnixAddr, err error)

// MoqUnixConn_starGenType_ReadMsgUnix_results holds the results of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadMsgUnix_results struct {
	Params  MoqUnixConn_starGenType_ReadMsgUnix_params
	Results []struct {
		Values *struct {
			N, Oobn, Flags int
			Addr           *net.UnixAddr
			Err            error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_ReadMsgUnix_doFn
		DoReturnFn MoqUnixConn_starGenType_ReadMsgUnix_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder routes recorded function
// calls to the MoqUnixConn_starGenType moq
type MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder struct {
	Params    MoqUnixConn_starGenType_ReadMsgUnix_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUnixConn_starGenType_ReadMsgUnix_results
	Moq       *MoqUnixConn_starGenType
}

// MoqUnixConn_starGenType_ReadMsgUnix_anyParams isolates the any params
// functions of the UnixConn_starGenType type
type MoqUnixConn_starGenType_ReadMsgUnix_anyParams struct {
	Recorder *MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder
}

// MoqUnixConn_starGenType_WriteToUnix_params holds the params of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteToUnix_params struct {
	B    []byte
	Addr *net.UnixAddr
}

// MoqUnixConn_starGenType_WriteToUnix_paramsKey holds the map key params of
// the UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteToUnix_paramsKey struct {
	Params struct{ Addr *net.UnixAddr }
	Hashes struct {
		B    hash.Hash
		Addr hash.Hash
	}
}

// MoqUnixConn_starGenType_WriteToUnix_resultsByParams contains the results for
// a given set of parameters for the UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteToUnix_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUnixConn_starGenType_WriteToUnix_paramsKey]*MoqUnixConn_starGenType_WriteToUnix_results
}

// MoqUnixConn_starGenType_WriteToUnix_doFn defines the type of function needed
// when calling AndDo for the UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteToUnix_doFn func(b []byte, addr *net.UnixAddr)

// MoqUnixConn_starGenType_WriteToUnix_doReturnFn defines the type of function
// needed when calling DoReturnResults for the UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteToUnix_doReturnFn func(b []byte, addr *net.UnixAddr) (int, error)

// MoqUnixConn_starGenType_WriteToUnix_results holds the results of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteToUnix_results struct {
	Params  MoqUnixConn_starGenType_WriteToUnix_params
	Results []struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_WriteToUnix_doFn
		DoReturnFn MoqUnixConn_starGenType_WriteToUnix_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUnixConn_starGenType_WriteToUnix_fnRecorder routes recorded function
// calls to the MoqUnixConn_starGenType moq
type MoqUnixConn_starGenType_WriteToUnix_fnRecorder struct {
	Params    MoqUnixConn_starGenType_WriteToUnix_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUnixConn_starGenType_WriteToUnix_results
	Moq       *MoqUnixConn_starGenType
}

// MoqUnixConn_starGenType_WriteToUnix_anyParams isolates the any params
// functions of the UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteToUnix_anyParams struct {
	Recorder *MoqUnixConn_starGenType_WriteToUnix_fnRecorder
}

// MoqUnixConn_starGenType_WriteTo_params holds the params of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteTo_params struct {
	B    []byte
	Addr net.Addr
}

// MoqUnixConn_starGenType_WriteTo_paramsKey holds the map key params of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteTo_paramsKey struct {
	Params struct{ Addr net.Addr }
	Hashes struct {
		B    hash.Hash
		Addr hash.Hash
	}
}

// MoqUnixConn_starGenType_WriteTo_resultsByParams contains the results for a
// given set of parameters for the UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteTo_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUnixConn_starGenType_WriteTo_paramsKey]*MoqUnixConn_starGenType_WriteTo_results
}

// MoqUnixConn_starGenType_WriteTo_doFn defines the type of function needed
// when calling AndDo for the UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteTo_doFn func(b []byte, addr net.Addr)

// MoqUnixConn_starGenType_WriteTo_doReturnFn defines the type of function
// needed when calling DoReturnResults for the UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteTo_doReturnFn func(b []byte, addr net.Addr) (int, error)

// MoqUnixConn_starGenType_WriteTo_results holds the results of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteTo_results struct {
	Params  MoqUnixConn_starGenType_WriteTo_params
	Results []struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_WriteTo_doFn
		DoReturnFn MoqUnixConn_starGenType_WriteTo_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUnixConn_starGenType_WriteTo_fnRecorder routes recorded function calls to
// the MoqUnixConn_starGenType moq
type MoqUnixConn_starGenType_WriteTo_fnRecorder struct {
	Params    MoqUnixConn_starGenType_WriteTo_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUnixConn_starGenType_WriteTo_results
	Moq       *MoqUnixConn_starGenType
}

// MoqUnixConn_starGenType_WriteTo_anyParams isolates the any params functions
// of the UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteTo_anyParams struct {
	Recorder *MoqUnixConn_starGenType_WriteTo_fnRecorder
}

// MoqUnixConn_starGenType_WriteMsgUnix_params holds the params of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteMsgUnix_params struct {
	B, Oob []byte
	Addr   *net.UnixAddr
}

// MoqUnixConn_starGenType_WriteMsgUnix_paramsKey holds the map key params of
// the UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteMsgUnix_paramsKey struct {
	Params struct{ Addr *net.UnixAddr }
	Hashes struct {
		B, Oob hash.Hash
		Addr   hash.Hash
	}
}

// MoqUnixConn_starGenType_WriteMsgUnix_resultsByParams contains the results
// for a given set of parameters for the UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteMsgUnix_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUnixConn_starGenType_WriteMsgUnix_paramsKey]*MoqUnixConn_starGenType_WriteMsgUnix_results
}

// MoqUnixConn_starGenType_WriteMsgUnix_doFn defines the type of function
// needed when calling AndDo for the UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteMsgUnix_doFn func(b, oob []byte, addr *net.UnixAddr)

// MoqUnixConn_starGenType_WriteMsgUnix_doReturnFn defines the type of function
// needed when calling DoReturnResults for the UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteMsgUnix_doReturnFn func(b, oob []byte, addr *net.UnixAddr) (n, oobn int, err error)

// MoqUnixConn_starGenType_WriteMsgUnix_results holds the results of the
// UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteMsgUnix_results struct {
	Params  MoqUnixConn_starGenType_WriteMsgUnix_params
	Results []struct {
		Values *struct {
			N, Oobn int
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_WriteMsgUnix_doFn
		DoReturnFn MoqUnixConn_starGenType_WriteMsgUnix_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder routes recorded function
// calls to the MoqUnixConn_starGenType moq
type MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder struct {
	Params    MoqUnixConn_starGenType_WriteMsgUnix_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUnixConn_starGenType_WriteMsgUnix_results
	Moq       *MoqUnixConn_starGenType
}

// MoqUnixConn_starGenType_WriteMsgUnix_anyParams isolates the any params
// functions of the UnixConn_starGenType type
type MoqUnixConn_starGenType_WriteMsgUnix_anyParams struct {
	Recorder *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder
}

// NewMoqUnixConn_starGenType creates a new moq of the UnixConn_starGenType
// type
func NewMoqUnixConn_starGenType(scene *moq.Scene, config *moq.Config) *MoqUnixConn_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqUnixConn_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqUnixConn_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				SyscallConn  struct{}
				CloseRead    struct{}
				CloseWrite   struct{}
				ReadFromUnix struct {
					B moq.ParamIndexing
				}
				ReadFrom struct {
					B moq.ParamIndexing
				}
				ReadMsgUnix struct {
					B   moq.ParamIndexing
					Oob moq.ParamIndexing
				}
				WriteToUnix struct {
					B    moq.ParamIndexing
					Addr moq.ParamIndexing
				}
				WriteTo struct {
					B    moq.ParamIndexing
					Addr moq.ParamIndexing
				}
				WriteMsgUnix struct {
					B    moq.ParamIndexing
					Oob  moq.ParamIndexing
					Addr moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			SyscallConn  struct{}
			CloseRead    struct{}
			CloseWrite   struct{}
			ReadFromUnix struct {
				B moq.ParamIndexing
			}
			ReadFrom struct {
				B moq.ParamIndexing
			}
			ReadMsgUnix struct {
				B   moq.ParamIndexing
				Oob moq.ParamIndexing
			}
			WriteToUnix struct {
				B    moq.ParamIndexing
				Addr moq.ParamIndexing
			}
			WriteTo struct {
				B    moq.ParamIndexing
				Addr moq.ParamIndexing
			}
			WriteMsgUnix struct {
				B    moq.ParamIndexing
				Oob  moq.ParamIndexing
				Addr moq.ParamIndexing
			}
		}{
			SyscallConn: struct{}{},
			CloseRead:   struct{}{},
			CloseWrite:  struct{}{},
			ReadFromUnix: struct {
				B moq.ParamIndexing
			}{
				B: moq.ParamIndexByHash,
			},
			ReadFrom: struct {
				B moq.ParamIndexing
			}{
				B: moq.ParamIndexByHash,
			},
			ReadMsgUnix: struct {
				B   moq.ParamIndexing
				Oob moq.ParamIndexing
			}{
				B:   moq.ParamIndexByHash,
				Oob: moq.ParamIndexByHash,
			},
			WriteToUnix: struct {
				B    moq.ParamIndexing
				Addr moq.ParamIndexing
			}{
				B:    moq.ParamIndexByHash,
				Addr: moq.ParamIndexByHash,
			},
			WriteTo: struct {
				B    moq.ParamIndexing
				Addr moq.ParamIndexing
			}{
				B:    moq.ParamIndexByHash,
				Addr: moq.ParamIndexByHash,
			},
			WriteMsgUnix: struct {
				B    moq.ParamIndexing
				Oob  moq.ParamIndexing
				Addr moq.ParamIndexing
			}{
				B:    moq.ParamIndexByHash,
				Oob:  moq.ParamIndexByHash,
				Addr: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the UnixConn_starGenType type
func (m *MoqUnixConn_starGenType) Mock() *MoqUnixConn_starGenType_mock { return m.Moq }

func (m *MoqUnixConn_starGenType_mock) SyscallConn() (result1 syscall.RawConn, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqUnixConn_starGenType_SyscallConn_params{}
	var results *MoqUnixConn_starGenType_SyscallConn_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SyscallConn {
		paramsKey := m.Moq.ParamsKey_SyscallConn(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SyscallConn(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SyscallConn(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SyscallConn(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqUnixConn_starGenType_mock) CloseRead() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqUnixConn_starGenType_CloseRead_params{}
	var results *MoqUnixConn_starGenType_CloseRead_results
	for _, resultsByParams := range m.Moq.ResultsByParams_CloseRead {
		paramsKey := m.Moq.ParamsKey_CloseRead(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_CloseRead(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_CloseRead(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_CloseRead(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqUnixConn_starGenType_mock) CloseWrite() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqUnixConn_starGenType_CloseWrite_params{}
	var results *MoqUnixConn_starGenType_CloseWrite_results
	for _, resultsByParams := range m.Moq.ResultsByParams_CloseWrite {
		paramsKey := m.Moq.ParamsKey_CloseWrite(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_CloseWrite(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_CloseWrite(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_CloseWrite(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqUnixConn_starGenType_mock) ReadFromUnix(b []byte) (result1 int, result2 *net.UnixAddr, result3 error) {
	m.Moq.Scene.T.Helper()
	params := MoqUnixConn_starGenType_ReadFromUnix_params{
		B: b,
	}
	var results *MoqUnixConn_starGenType_ReadFromUnix_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadFromUnix {
		paramsKey := m.Moq.ParamsKey_ReadFromUnix(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadFromUnix(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadFromUnix(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadFromUnix(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
		result3 = result.Values.Result3
	}
	if result.DoReturnFn != nil {
		result1, result2, result3 = result.DoReturnFn(b)
	}
	return
}

func (m *MoqUnixConn_starGenType_mock) ReadFrom(b []byte) (result1 int, result2 net.Addr, result3 error) {
	m.Moq.Scene.T.Helper()
	params := MoqUnixConn_starGenType_ReadFrom_params{
		B: b,
	}
	var results *MoqUnixConn_starGenType_ReadFrom_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadFrom {
		paramsKey := m.Moq.ParamsKey_ReadFrom(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadFrom(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadFrom(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadFrom(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
		result3 = result.Values.Result3
	}
	if result.DoReturnFn != nil {
		result1, result2, result3 = result.DoReturnFn(b)
	}
	return
}

func (m *MoqUnixConn_starGenType_mock) ReadMsgUnix(b, oob []byte) (n, oobn, flags int, addr *net.UnixAddr, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqUnixConn_starGenType_ReadMsgUnix_params{
		B:   b,
		Oob: oob,
	}
	var results *MoqUnixConn_starGenType_ReadMsgUnix_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadMsgUnix {
		paramsKey := m.Moq.ParamsKey_ReadMsgUnix(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadMsgUnix(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadMsgUnix(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadMsgUnix(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b, oob)
	}

	if result.Values != nil {
		n = result.Values.N
		oobn = result.Values.Oobn
		flags = result.Values.Flags
		addr = result.Values.Addr
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, oobn, flags, addr, err = result.DoReturnFn(b, oob)
	}
	return
}

func (m *MoqUnixConn_starGenType_mock) WriteToUnix(b []byte, addr *net.UnixAddr) (result1 int, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqUnixConn_starGenType_WriteToUnix_params{
		B:    b,
		Addr: addr,
	}
	var results *MoqUnixConn_starGenType_WriteToUnix_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteToUnix {
		paramsKey := m.Moq.ParamsKey_WriteToUnix(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteToUnix(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteToUnix(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteToUnix(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b, addr)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(b, addr)
	}
	return
}

func (m *MoqUnixConn_starGenType_mock) WriteTo(b []byte, addr net.Addr) (result1 int, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqUnixConn_starGenType_WriteTo_params{
		B:    b,
		Addr: addr,
	}
	var results *MoqUnixConn_starGenType_WriteTo_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteTo {
		paramsKey := m.Moq.ParamsKey_WriteTo(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteTo(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteTo(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteTo(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b, addr)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(b, addr)
	}
	return
}

func (m *MoqUnixConn_starGenType_mock) WriteMsgUnix(b, oob []byte, addr *net.UnixAddr) (n, oobn int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqUnixConn_starGenType_WriteMsgUnix_params{
		B:    b,
		Oob:  oob,
		Addr: addr,
	}
	var results *MoqUnixConn_starGenType_WriteMsgUnix_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteMsgUnix {
		paramsKey := m.Moq.ParamsKey_WriteMsgUnix(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteMsgUnix(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteMsgUnix(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteMsgUnix(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b, oob, addr)
	}

	if result.Values != nil {
		n = result.Values.N
		oobn = result.Values.Oobn
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, oobn, err = result.DoReturnFn(b, oob, addr)
	}
	return
}

// OnCall returns the recorder implementation of the UnixConn_starGenType type
func (m *MoqUnixConn_starGenType) OnCall() *MoqUnixConn_starGenType_recorder {
	return &MoqUnixConn_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqUnixConn_starGenType_recorder) SyscallConn() *MoqUnixConn_starGenType_SyscallConn_fnRecorder {
	return &MoqUnixConn_starGenType_SyscallConn_fnRecorder{
		Params:   MoqUnixConn_starGenType_SyscallConn_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUnixConn_starGenType_SyscallConn_fnRecorder) Any() *MoqUnixConn_starGenType_SyscallConn_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SyscallConn(r.Params))
		return nil
	}
	return &MoqUnixConn_starGenType_SyscallConn_anyParams{Recorder: r}
}

func (r *MoqUnixConn_starGenType_SyscallConn_fnRecorder) Seq() *MoqUnixConn_starGenType_SyscallConn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SyscallConn(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUnixConn_starGenType_SyscallConn_fnRecorder) NoSeq() *MoqUnixConn_starGenType_SyscallConn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SyscallConn(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUnixConn_starGenType_SyscallConn_fnRecorder) ReturnResults(result1 syscall.RawConn, result2 error) *MoqUnixConn_starGenType_SyscallConn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 syscall.RawConn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_SyscallConn_doFn
		DoReturnFn MoqUnixConn_starGenType_SyscallConn_doReturnFn
	}{
		Values: &struct {
			Result1 syscall.RawConn
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUnixConn_starGenType_SyscallConn_fnRecorder) AndDo(fn MoqUnixConn_starGenType_SyscallConn_doFn) *MoqUnixConn_starGenType_SyscallConn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUnixConn_starGenType_SyscallConn_fnRecorder) DoReturnResults(fn MoqUnixConn_starGenType_SyscallConn_doReturnFn) *MoqUnixConn_starGenType_SyscallConn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 syscall.RawConn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_SyscallConn_doFn
		DoReturnFn MoqUnixConn_starGenType_SyscallConn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUnixConn_starGenType_SyscallConn_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUnixConn_starGenType_SyscallConn_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SyscallConn {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUnixConn_starGenType_SyscallConn_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUnixConn_starGenType_SyscallConn_paramsKey]*MoqUnixConn_starGenType_SyscallConn_results{},
		}
		r.Moq.ResultsByParams_SyscallConn = append(r.Moq.ResultsByParams_SyscallConn, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SyscallConn) {
			copy(r.Moq.ResultsByParams_SyscallConn[insertAt+1:], r.Moq.ResultsByParams_SyscallConn[insertAt:0])
			r.Moq.ResultsByParams_SyscallConn[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SyscallConn(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUnixConn_starGenType_SyscallConn_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUnixConn_starGenType_SyscallConn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUnixConn_starGenType_SyscallConn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 syscall.RawConn
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqUnixConn_starGenType_SyscallConn_doFn
				DoReturnFn MoqUnixConn_starGenType_SyscallConn_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUnixConn_starGenType) PrettyParams_SyscallConn(params MoqUnixConn_starGenType_SyscallConn_params) string {
	return fmt.Sprintf("SyscallConn()")
}

func (m *MoqUnixConn_starGenType) ParamsKey_SyscallConn(params MoqUnixConn_starGenType_SyscallConn_params, anyParams uint64) MoqUnixConn_starGenType_SyscallConn_paramsKey {
	m.Scene.T.Helper()
	return MoqUnixConn_starGenType_SyscallConn_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqUnixConn_starGenType_recorder) CloseRead() *MoqUnixConn_starGenType_CloseRead_fnRecorder {
	return &MoqUnixConn_starGenType_CloseRead_fnRecorder{
		Params:   MoqUnixConn_starGenType_CloseRead_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUnixConn_starGenType_CloseRead_fnRecorder) Any() *MoqUnixConn_starGenType_CloseRead_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CloseRead(r.Params))
		return nil
	}
	return &MoqUnixConn_starGenType_CloseRead_anyParams{Recorder: r}
}

func (r *MoqUnixConn_starGenType_CloseRead_fnRecorder) Seq() *MoqUnixConn_starGenType_CloseRead_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CloseRead(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUnixConn_starGenType_CloseRead_fnRecorder) NoSeq() *MoqUnixConn_starGenType_CloseRead_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CloseRead(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUnixConn_starGenType_CloseRead_fnRecorder) ReturnResults(result1 error) *MoqUnixConn_starGenType_CloseRead_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_CloseRead_doFn
		DoReturnFn MoqUnixConn_starGenType_CloseRead_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUnixConn_starGenType_CloseRead_fnRecorder) AndDo(fn MoqUnixConn_starGenType_CloseRead_doFn) *MoqUnixConn_starGenType_CloseRead_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUnixConn_starGenType_CloseRead_fnRecorder) DoReturnResults(fn MoqUnixConn_starGenType_CloseRead_doReturnFn) *MoqUnixConn_starGenType_CloseRead_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_CloseRead_doFn
		DoReturnFn MoqUnixConn_starGenType_CloseRead_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUnixConn_starGenType_CloseRead_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUnixConn_starGenType_CloseRead_resultsByParams
	for n, res := range r.Moq.ResultsByParams_CloseRead {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUnixConn_starGenType_CloseRead_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUnixConn_starGenType_CloseRead_paramsKey]*MoqUnixConn_starGenType_CloseRead_results{},
		}
		r.Moq.ResultsByParams_CloseRead = append(r.Moq.ResultsByParams_CloseRead, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_CloseRead) {
			copy(r.Moq.ResultsByParams_CloseRead[insertAt+1:], r.Moq.ResultsByParams_CloseRead[insertAt:0])
			r.Moq.ResultsByParams_CloseRead[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_CloseRead(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUnixConn_starGenType_CloseRead_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUnixConn_starGenType_CloseRead_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUnixConn_starGenType_CloseRead_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqUnixConn_starGenType_CloseRead_doFn
				DoReturnFn MoqUnixConn_starGenType_CloseRead_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUnixConn_starGenType) PrettyParams_CloseRead(params MoqUnixConn_starGenType_CloseRead_params) string {
	return fmt.Sprintf("CloseRead()")
}

func (m *MoqUnixConn_starGenType) ParamsKey_CloseRead(params MoqUnixConn_starGenType_CloseRead_params, anyParams uint64) MoqUnixConn_starGenType_CloseRead_paramsKey {
	m.Scene.T.Helper()
	return MoqUnixConn_starGenType_CloseRead_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqUnixConn_starGenType_recorder) CloseWrite() *MoqUnixConn_starGenType_CloseWrite_fnRecorder {
	return &MoqUnixConn_starGenType_CloseWrite_fnRecorder{
		Params:   MoqUnixConn_starGenType_CloseWrite_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUnixConn_starGenType_CloseWrite_fnRecorder) Any() *MoqUnixConn_starGenType_CloseWrite_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CloseWrite(r.Params))
		return nil
	}
	return &MoqUnixConn_starGenType_CloseWrite_anyParams{Recorder: r}
}

func (r *MoqUnixConn_starGenType_CloseWrite_fnRecorder) Seq() *MoqUnixConn_starGenType_CloseWrite_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CloseWrite(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUnixConn_starGenType_CloseWrite_fnRecorder) NoSeq() *MoqUnixConn_starGenType_CloseWrite_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CloseWrite(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUnixConn_starGenType_CloseWrite_fnRecorder) ReturnResults(result1 error) *MoqUnixConn_starGenType_CloseWrite_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_CloseWrite_doFn
		DoReturnFn MoqUnixConn_starGenType_CloseWrite_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUnixConn_starGenType_CloseWrite_fnRecorder) AndDo(fn MoqUnixConn_starGenType_CloseWrite_doFn) *MoqUnixConn_starGenType_CloseWrite_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUnixConn_starGenType_CloseWrite_fnRecorder) DoReturnResults(fn MoqUnixConn_starGenType_CloseWrite_doReturnFn) *MoqUnixConn_starGenType_CloseWrite_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_CloseWrite_doFn
		DoReturnFn MoqUnixConn_starGenType_CloseWrite_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUnixConn_starGenType_CloseWrite_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUnixConn_starGenType_CloseWrite_resultsByParams
	for n, res := range r.Moq.ResultsByParams_CloseWrite {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUnixConn_starGenType_CloseWrite_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUnixConn_starGenType_CloseWrite_paramsKey]*MoqUnixConn_starGenType_CloseWrite_results{},
		}
		r.Moq.ResultsByParams_CloseWrite = append(r.Moq.ResultsByParams_CloseWrite, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_CloseWrite) {
			copy(r.Moq.ResultsByParams_CloseWrite[insertAt+1:], r.Moq.ResultsByParams_CloseWrite[insertAt:0])
			r.Moq.ResultsByParams_CloseWrite[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_CloseWrite(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUnixConn_starGenType_CloseWrite_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUnixConn_starGenType_CloseWrite_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUnixConn_starGenType_CloseWrite_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqUnixConn_starGenType_CloseWrite_doFn
				DoReturnFn MoqUnixConn_starGenType_CloseWrite_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUnixConn_starGenType) PrettyParams_CloseWrite(params MoqUnixConn_starGenType_CloseWrite_params) string {
	return fmt.Sprintf("CloseWrite()")
}

func (m *MoqUnixConn_starGenType) ParamsKey_CloseWrite(params MoqUnixConn_starGenType_CloseWrite_params, anyParams uint64) MoqUnixConn_starGenType_CloseWrite_paramsKey {
	m.Scene.T.Helper()
	return MoqUnixConn_starGenType_CloseWrite_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqUnixConn_starGenType_recorder) ReadFromUnix(b []byte) *MoqUnixConn_starGenType_ReadFromUnix_fnRecorder {
	return &MoqUnixConn_starGenType_ReadFromUnix_fnRecorder{
		Params: MoqUnixConn_starGenType_ReadFromUnix_params{
			B: b,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUnixConn_starGenType_ReadFromUnix_fnRecorder) Any() *MoqUnixConn_starGenType_ReadFromUnix_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFromUnix(r.Params))
		return nil
	}
	return &MoqUnixConn_starGenType_ReadFromUnix_anyParams{Recorder: r}
}

func (a *MoqUnixConn_starGenType_ReadFromUnix_anyParams) B() *MoqUnixConn_starGenType_ReadFromUnix_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqUnixConn_starGenType_ReadFromUnix_fnRecorder) Seq() *MoqUnixConn_starGenType_ReadFromUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFromUnix(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUnixConn_starGenType_ReadFromUnix_fnRecorder) NoSeq() *MoqUnixConn_starGenType_ReadFromUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFromUnix(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUnixConn_starGenType_ReadFromUnix_fnRecorder) ReturnResults(result1 int, result2 *net.UnixAddr, result3 error) *MoqUnixConn_starGenType_ReadFromUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 *net.UnixAddr
			Result3 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_ReadFromUnix_doFn
		DoReturnFn MoqUnixConn_starGenType_ReadFromUnix_doReturnFn
	}{
		Values: &struct {
			Result1 int
			Result2 *net.UnixAddr
			Result3 error
		}{
			Result1: result1,
			Result2: result2,
			Result3: result3,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUnixConn_starGenType_ReadFromUnix_fnRecorder) AndDo(fn MoqUnixConn_starGenType_ReadFromUnix_doFn) *MoqUnixConn_starGenType_ReadFromUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUnixConn_starGenType_ReadFromUnix_fnRecorder) DoReturnResults(fn MoqUnixConn_starGenType_ReadFromUnix_doReturnFn) *MoqUnixConn_starGenType_ReadFromUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 *net.UnixAddr
			Result3 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_ReadFromUnix_doFn
		DoReturnFn MoqUnixConn_starGenType_ReadFromUnix_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUnixConn_starGenType_ReadFromUnix_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUnixConn_starGenType_ReadFromUnix_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadFromUnix {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUnixConn_starGenType_ReadFromUnix_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUnixConn_starGenType_ReadFromUnix_paramsKey]*MoqUnixConn_starGenType_ReadFromUnix_results{},
		}
		r.Moq.ResultsByParams_ReadFromUnix = append(r.Moq.ResultsByParams_ReadFromUnix, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadFromUnix) {
			copy(r.Moq.ResultsByParams_ReadFromUnix[insertAt+1:], r.Moq.ResultsByParams_ReadFromUnix[insertAt:0])
			r.Moq.ResultsByParams_ReadFromUnix[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadFromUnix(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUnixConn_starGenType_ReadFromUnix_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUnixConn_starGenType_ReadFromUnix_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUnixConn_starGenType_ReadFromUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
					Result2 *net.UnixAddr
					Result3 error
				}
				Sequence   uint32
				DoFn       MoqUnixConn_starGenType_ReadFromUnix_doFn
				DoReturnFn MoqUnixConn_starGenType_ReadFromUnix_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUnixConn_starGenType) PrettyParams_ReadFromUnix(params MoqUnixConn_starGenType_ReadFromUnix_params) string {
	return fmt.Sprintf("ReadFromUnix(%#v)", params.B)
}

func (m *MoqUnixConn_starGenType) ParamsKey_ReadFromUnix(params MoqUnixConn_starGenType_ReadFromUnix_params, anyParams uint64) MoqUnixConn_starGenType_ReadFromUnix_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadFromUnix.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the ReadFromUnix function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	return MoqUnixConn_starGenType_ReadFromUnix_paramsKey{
		Params: struct{}{},
		Hashes: struct{ B hash.Hash }{
			B: bUsedHash,
		},
	}
}

func (m *MoqUnixConn_starGenType_recorder) ReadFrom(b []byte) *MoqUnixConn_starGenType_ReadFrom_fnRecorder {
	return &MoqUnixConn_starGenType_ReadFrom_fnRecorder{
		Params: MoqUnixConn_starGenType_ReadFrom_params{
			B: b,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUnixConn_starGenType_ReadFrom_fnRecorder) Any() *MoqUnixConn_starGenType_ReadFrom_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFrom(r.Params))
		return nil
	}
	return &MoqUnixConn_starGenType_ReadFrom_anyParams{Recorder: r}
}

func (a *MoqUnixConn_starGenType_ReadFrom_anyParams) B() *MoqUnixConn_starGenType_ReadFrom_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqUnixConn_starGenType_ReadFrom_fnRecorder) Seq() *MoqUnixConn_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFrom(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUnixConn_starGenType_ReadFrom_fnRecorder) NoSeq() *MoqUnixConn_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFrom(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUnixConn_starGenType_ReadFrom_fnRecorder) ReturnResults(result1 int, result2 net.Addr, result3 error) *MoqUnixConn_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 net.Addr
			Result3 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_ReadFrom_doFn
		DoReturnFn MoqUnixConn_starGenType_ReadFrom_doReturnFn
	}{
		Values: &struct {
			Result1 int
			Result2 net.Addr
			Result3 error
		}{
			Result1: result1,
			Result2: result2,
			Result3: result3,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUnixConn_starGenType_ReadFrom_fnRecorder) AndDo(fn MoqUnixConn_starGenType_ReadFrom_doFn) *MoqUnixConn_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUnixConn_starGenType_ReadFrom_fnRecorder) DoReturnResults(fn MoqUnixConn_starGenType_ReadFrom_doReturnFn) *MoqUnixConn_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 net.Addr
			Result3 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_ReadFrom_doFn
		DoReturnFn MoqUnixConn_starGenType_ReadFrom_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUnixConn_starGenType_ReadFrom_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUnixConn_starGenType_ReadFrom_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadFrom {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUnixConn_starGenType_ReadFrom_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUnixConn_starGenType_ReadFrom_paramsKey]*MoqUnixConn_starGenType_ReadFrom_results{},
		}
		r.Moq.ResultsByParams_ReadFrom = append(r.Moq.ResultsByParams_ReadFrom, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadFrom) {
			copy(r.Moq.ResultsByParams_ReadFrom[insertAt+1:], r.Moq.ResultsByParams_ReadFrom[insertAt:0])
			r.Moq.ResultsByParams_ReadFrom[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadFrom(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUnixConn_starGenType_ReadFrom_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUnixConn_starGenType_ReadFrom_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUnixConn_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
					Result2 net.Addr
					Result3 error
				}
				Sequence   uint32
				DoFn       MoqUnixConn_starGenType_ReadFrom_doFn
				DoReturnFn MoqUnixConn_starGenType_ReadFrom_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUnixConn_starGenType) PrettyParams_ReadFrom(params MoqUnixConn_starGenType_ReadFrom_params) string {
	return fmt.Sprintf("ReadFrom(%#v)", params.B)
}

func (m *MoqUnixConn_starGenType) ParamsKey_ReadFrom(params MoqUnixConn_starGenType_ReadFrom_params, anyParams uint64) MoqUnixConn_starGenType_ReadFrom_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadFrom.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the ReadFrom function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	return MoqUnixConn_starGenType_ReadFrom_paramsKey{
		Params: struct{}{},
		Hashes: struct{ B hash.Hash }{
			B: bUsedHash,
		},
	}
}

func (m *MoqUnixConn_starGenType_recorder) ReadMsgUnix(b, oob []byte) *MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder {
	return &MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder{
		Params: MoqUnixConn_starGenType_ReadMsgUnix_params{
			B:   b,
			Oob: oob,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder) Any() *MoqUnixConn_starGenType_ReadMsgUnix_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadMsgUnix(r.Params))
		return nil
	}
	return &MoqUnixConn_starGenType_ReadMsgUnix_anyParams{Recorder: r}
}

func (a *MoqUnixConn_starGenType_ReadMsgUnix_anyParams) B() *MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUnixConn_starGenType_ReadMsgUnix_anyParams) Oob() *MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder) Seq() *MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadMsgUnix(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder) NoSeq() *MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadMsgUnix(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder) ReturnResults(n, oobn, flags int, addr *net.UnixAddr, err error) *MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N, Oobn, Flags int
			Addr           *net.UnixAddr
			Err            error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_ReadMsgUnix_doFn
		DoReturnFn MoqUnixConn_starGenType_ReadMsgUnix_doReturnFn
	}{
		Values: &struct {
			N, Oobn, Flags int
			Addr           *net.UnixAddr
			Err            error
		}{
			N:     n,
			Oobn:  oobn,
			Flags: flags,
			Addr:  addr,
			Err:   err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder) AndDo(fn MoqUnixConn_starGenType_ReadMsgUnix_doFn) *MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder) DoReturnResults(fn MoqUnixConn_starGenType_ReadMsgUnix_doReturnFn) *MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N, Oobn, Flags int
			Addr           *net.UnixAddr
			Err            error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_ReadMsgUnix_doFn
		DoReturnFn MoqUnixConn_starGenType_ReadMsgUnix_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUnixConn_starGenType_ReadMsgUnix_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadMsgUnix {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUnixConn_starGenType_ReadMsgUnix_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUnixConn_starGenType_ReadMsgUnix_paramsKey]*MoqUnixConn_starGenType_ReadMsgUnix_results{},
		}
		r.Moq.ResultsByParams_ReadMsgUnix = append(r.Moq.ResultsByParams_ReadMsgUnix, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadMsgUnix) {
			copy(r.Moq.ResultsByParams_ReadMsgUnix[insertAt+1:], r.Moq.ResultsByParams_ReadMsgUnix[insertAt:0])
			r.Moq.ResultsByParams_ReadMsgUnix[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadMsgUnix(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUnixConn_starGenType_ReadMsgUnix_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUnixConn_starGenType_ReadMsgUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N, Oobn, Flags int
					Addr           *net.UnixAddr
					Err            error
				}
				Sequence   uint32
				DoFn       MoqUnixConn_starGenType_ReadMsgUnix_doFn
				DoReturnFn MoqUnixConn_starGenType_ReadMsgUnix_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUnixConn_starGenType) PrettyParams_ReadMsgUnix(params MoqUnixConn_starGenType_ReadMsgUnix_params) string {
	return fmt.Sprintf("ReadMsgUnix(%#v, %#v)", params.B, params.Oob)
}

func (m *MoqUnixConn_starGenType) ParamsKey_ReadMsgUnix(params MoqUnixConn_starGenType_ReadMsgUnix_params, anyParams uint64) MoqUnixConn_starGenType_ReadMsgUnix_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadMsgUnix.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the ReadMsgUnix function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	var oobUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.ReadMsgUnix.Oob == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The oob parameter of the ReadMsgUnix function can't be indexed by value")
		}
		oobUsedHash = hash.DeepHash(params.Oob)
	}
	return MoqUnixConn_starGenType_ReadMsgUnix_paramsKey{
		Params: struct{}{},
		Hashes: struct{ B, Oob hash.Hash }{
			B:   bUsedHash,
			Oob: oobUsedHash,
		},
	}
}

func (m *MoqUnixConn_starGenType_recorder) WriteToUnix(b []byte, addr *net.UnixAddr) *MoqUnixConn_starGenType_WriteToUnix_fnRecorder {
	return &MoqUnixConn_starGenType_WriteToUnix_fnRecorder{
		Params: MoqUnixConn_starGenType_WriteToUnix_params{
			B:    b,
			Addr: addr,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUnixConn_starGenType_WriteToUnix_fnRecorder) Any() *MoqUnixConn_starGenType_WriteToUnix_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteToUnix(r.Params))
		return nil
	}
	return &MoqUnixConn_starGenType_WriteToUnix_anyParams{Recorder: r}
}

func (a *MoqUnixConn_starGenType_WriteToUnix_anyParams) B() *MoqUnixConn_starGenType_WriteToUnix_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUnixConn_starGenType_WriteToUnix_anyParams) Addr() *MoqUnixConn_starGenType_WriteToUnix_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUnixConn_starGenType_WriteToUnix_fnRecorder) Seq() *MoqUnixConn_starGenType_WriteToUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteToUnix(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUnixConn_starGenType_WriteToUnix_fnRecorder) NoSeq() *MoqUnixConn_starGenType_WriteToUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteToUnix(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUnixConn_starGenType_WriteToUnix_fnRecorder) ReturnResults(result1 int, result2 error) *MoqUnixConn_starGenType_WriteToUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_WriteToUnix_doFn
		DoReturnFn MoqUnixConn_starGenType_WriteToUnix_doReturnFn
	}{
		Values: &struct {
			Result1 int
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUnixConn_starGenType_WriteToUnix_fnRecorder) AndDo(fn MoqUnixConn_starGenType_WriteToUnix_doFn) *MoqUnixConn_starGenType_WriteToUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUnixConn_starGenType_WriteToUnix_fnRecorder) DoReturnResults(fn MoqUnixConn_starGenType_WriteToUnix_doReturnFn) *MoqUnixConn_starGenType_WriteToUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_WriteToUnix_doFn
		DoReturnFn MoqUnixConn_starGenType_WriteToUnix_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUnixConn_starGenType_WriteToUnix_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUnixConn_starGenType_WriteToUnix_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteToUnix {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUnixConn_starGenType_WriteToUnix_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUnixConn_starGenType_WriteToUnix_paramsKey]*MoqUnixConn_starGenType_WriteToUnix_results{},
		}
		r.Moq.ResultsByParams_WriteToUnix = append(r.Moq.ResultsByParams_WriteToUnix, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteToUnix) {
			copy(r.Moq.ResultsByParams_WriteToUnix[insertAt+1:], r.Moq.ResultsByParams_WriteToUnix[insertAt:0])
			r.Moq.ResultsByParams_WriteToUnix[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteToUnix(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUnixConn_starGenType_WriteToUnix_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUnixConn_starGenType_WriteToUnix_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUnixConn_starGenType_WriteToUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqUnixConn_starGenType_WriteToUnix_doFn
				DoReturnFn MoqUnixConn_starGenType_WriteToUnix_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUnixConn_starGenType) PrettyParams_WriteToUnix(params MoqUnixConn_starGenType_WriteToUnix_params) string {
	return fmt.Sprintf("WriteToUnix(%#v, %#v)", params.B, params.Addr)
}

func (m *MoqUnixConn_starGenType) ParamsKey_WriteToUnix(params MoqUnixConn_starGenType_WriteToUnix_params, anyParams uint64) MoqUnixConn_starGenType_WriteToUnix_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteToUnix.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the WriteToUnix function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	var addrUsed *net.UnixAddr
	var addrUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.WriteToUnix.Addr == moq.ParamIndexByValue {
			addrUsed = params.Addr
		} else {
			addrUsedHash = hash.DeepHash(params.Addr)
		}
	}
	return MoqUnixConn_starGenType_WriteToUnix_paramsKey{
		Params: struct{ Addr *net.UnixAddr }{
			Addr: addrUsed,
		},
		Hashes: struct {
			B    hash.Hash
			Addr hash.Hash
		}{
			B:    bUsedHash,
			Addr: addrUsedHash,
		},
	}
}

func (m *MoqUnixConn_starGenType_recorder) WriteTo(b []byte, addr net.Addr) *MoqUnixConn_starGenType_WriteTo_fnRecorder {
	return &MoqUnixConn_starGenType_WriteTo_fnRecorder{
		Params: MoqUnixConn_starGenType_WriteTo_params{
			B:    b,
			Addr: addr,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUnixConn_starGenType_WriteTo_fnRecorder) Any() *MoqUnixConn_starGenType_WriteTo_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteTo(r.Params))
		return nil
	}
	return &MoqUnixConn_starGenType_WriteTo_anyParams{Recorder: r}
}

func (a *MoqUnixConn_starGenType_WriteTo_anyParams) B() *MoqUnixConn_starGenType_WriteTo_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUnixConn_starGenType_WriteTo_anyParams) Addr() *MoqUnixConn_starGenType_WriteTo_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUnixConn_starGenType_WriteTo_fnRecorder) Seq() *MoqUnixConn_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteTo(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUnixConn_starGenType_WriteTo_fnRecorder) NoSeq() *MoqUnixConn_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteTo(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUnixConn_starGenType_WriteTo_fnRecorder) ReturnResults(result1 int, result2 error) *MoqUnixConn_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_WriteTo_doFn
		DoReturnFn MoqUnixConn_starGenType_WriteTo_doReturnFn
	}{
		Values: &struct {
			Result1 int
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUnixConn_starGenType_WriteTo_fnRecorder) AndDo(fn MoqUnixConn_starGenType_WriteTo_doFn) *MoqUnixConn_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUnixConn_starGenType_WriteTo_fnRecorder) DoReturnResults(fn MoqUnixConn_starGenType_WriteTo_doReturnFn) *MoqUnixConn_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_WriteTo_doFn
		DoReturnFn MoqUnixConn_starGenType_WriteTo_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUnixConn_starGenType_WriteTo_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUnixConn_starGenType_WriteTo_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteTo {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUnixConn_starGenType_WriteTo_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUnixConn_starGenType_WriteTo_paramsKey]*MoqUnixConn_starGenType_WriteTo_results{},
		}
		r.Moq.ResultsByParams_WriteTo = append(r.Moq.ResultsByParams_WriteTo, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteTo) {
			copy(r.Moq.ResultsByParams_WriteTo[insertAt+1:], r.Moq.ResultsByParams_WriteTo[insertAt:0])
			r.Moq.ResultsByParams_WriteTo[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteTo(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUnixConn_starGenType_WriteTo_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUnixConn_starGenType_WriteTo_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUnixConn_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqUnixConn_starGenType_WriteTo_doFn
				DoReturnFn MoqUnixConn_starGenType_WriteTo_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUnixConn_starGenType) PrettyParams_WriteTo(params MoqUnixConn_starGenType_WriteTo_params) string {
	return fmt.Sprintf("WriteTo(%#v, %#v)", params.B, params.Addr)
}

func (m *MoqUnixConn_starGenType) ParamsKey_WriteTo(params MoqUnixConn_starGenType_WriteTo_params, anyParams uint64) MoqUnixConn_starGenType_WriteTo_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteTo.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the WriteTo function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	var addrUsed net.Addr
	var addrUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.WriteTo.Addr == moq.ParamIndexByValue {
			addrUsed = params.Addr
		} else {
			addrUsedHash = hash.DeepHash(params.Addr)
		}
	}
	return MoqUnixConn_starGenType_WriteTo_paramsKey{
		Params: struct{ Addr net.Addr }{
			Addr: addrUsed,
		},
		Hashes: struct {
			B    hash.Hash
			Addr hash.Hash
		}{
			B:    bUsedHash,
			Addr: addrUsedHash,
		},
	}
}

func (m *MoqUnixConn_starGenType_recorder) WriteMsgUnix(b, oob []byte, addr *net.UnixAddr) *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder {
	return &MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder{
		Params: MoqUnixConn_starGenType_WriteMsgUnix_params{
			B:    b,
			Oob:  oob,
			Addr: addr,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder) Any() *MoqUnixConn_starGenType_WriteMsgUnix_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteMsgUnix(r.Params))
		return nil
	}
	return &MoqUnixConn_starGenType_WriteMsgUnix_anyParams{Recorder: r}
}

func (a *MoqUnixConn_starGenType_WriteMsgUnix_anyParams) B() *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUnixConn_starGenType_WriteMsgUnix_anyParams) Oob() *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqUnixConn_starGenType_WriteMsgUnix_anyParams) Addr() *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder) Seq() *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteMsgUnix(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder) NoSeq() *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteMsgUnix(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder) ReturnResults(n, oobn int, err error) *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N, Oobn int
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_WriteMsgUnix_doFn
		DoReturnFn MoqUnixConn_starGenType_WriteMsgUnix_doReturnFn
	}{
		Values: &struct {
			N, Oobn int
			Err     error
		}{
			N:    n,
			Oobn: oobn,
			Err:  err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder) AndDo(fn MoqUnixConn_starGenType_WriteMsgUnix_doFn) *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder) DoReturnResults(fn MoqUnixConn_starGenType_WriteMsgUnix_doReturnFn) *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N, Oobn int
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUnixConn_starGenType_WriteMsgUnix_doFn
		DoReturnFn MoqUnixConn_starGenType_WriteMsgUnix_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUnixConn_starGenType_WriteMsgUnix_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteMsgUnix {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUnixConn_starGenType_WriteMsgUnix_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUnixConn_starGenType_WriteMsgUnix_paramsKey]*MoqUnixConn_starGenType_WriteMsgUnix_results{},
		}
		r.Moq.ResultsByParams_WriteMsgUnix = append(r.Moq.ResultsByParams_WriteMsgUnix, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteMsgUnix) {
			copy(r.Moq.ResultsByParams_WriteMsgUnix[insertAt+1:], r.Moq.ResultsByParams_WriteMsgUnix[insertAt:0])
			r.Moq.ResultsByParams_WriteMsgUnix[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteMsgUnix(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUnixConn_starGenType_WriteMsgUnix_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUnixConn_starGenType_WriteMsgUnix_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N, Oobn int
					Err     error
				}
				Sequence   uint32
				DoFn       MoqUnixConn_starGenType_WriteMsgUnix_doFn
				DoReturnFn MoqUnixConn_starGenType_WriteMsgUnix_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUnixConn_starGenType) PrettyParams_WriteMsgUnix(params MoqUnixConn_starGenType_WriteMsgUnix_params) string {
	return fmt.Sprintf("WriteMsgUnix(%#v, %#v, %#v)", params.B, params.Oob, params.Addr)
}

func (m *MoqUnixConn_starGenType) ParamsKey_WriteMsgUnix(params MoqUnixConn_starGenType_WriteMsgUnix_params, anyParams uint64) MoqUnixConn_starGenType_WriteMsgUnix_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteMsgUnix.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the WriteMsgUnix function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	var oobUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.WriteMsgUnix.Oob == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The oob parameter of the WriteMsgUnix function can't be indexed by value")
		}
		oobUsedHash = hash.DeepHash(params.Oob)
	}
	var addrUsed *net.UnixAddr
	var addrUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.WriteMsgUnix.Addr == moq.ParamIndexByValue {
			addrUsed = params.Addr
		} else {
			addrUsedHash = hash.DeepHash(params.Addr)
		}
	}
	return MoqUnixConn_starGenType_WriteMsgUnix_paramsKey{
		Params: struct{ Addr *net.UnixAddr }{
			Addr: addrUsed,
		},
		Hashes: struct {
			B, Oob hash.Hash
			Addr   hash.Hash
		}{
			B:    bUsedHash,
			Oob:  oobUsedHash,
			Addr: addrUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqUnixConn_starGenType) Reset() {
	m.ResultsByParams_SyscallConn = nil
	m.ResultsByParams_CloseRead = nil
	m.ResultsByParams_CloseWrite = nil
	m.ResultsByParams_ReadFromUnix = nil
	m.ResultsByParams_ReadFrom = nil
	m.ResultsByParams_ReadMsgUnix = nil
	m.ResultsByParams_WriteToUnix = nil
	m.ResultsByParams_WriteTo = nil
	m.ResultsByParams_WriteMsgUnix = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqUnixConn_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_SyscallConn {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SyscallConn(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_CloseRead {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_CloseRead(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_CloseWrite {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_CloseWrite(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadFromUnix {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadFromUnix(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadFrom {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadFrom(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadMsgUnix {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadMsgUnix(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteToUnix {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteToUnix(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteTo {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteTo(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteMsgUnix {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteMsgUnix(results.Params))
			}
		}
	}
}
