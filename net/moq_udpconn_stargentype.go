// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package net

import (
	"fmt"
	"math/bits"
	"net"
	"sync/atomic"
	"syscall"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that net.UDPConn_starGenType is mocked
// completely
var _ UDPConn_starGenType = (*MoqUDPConn_starGenType_mock)(nil)

// UDPConn_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type UDPConn_starGenType interface {
	SyscallConn() (syscall.RawConn, error)
	ReadFromUDP(b []byte) (n int, addr *net.UDPAddr, err error)
	ReadFrom(b []byte) (int, net.Addr, error)
	ReadMsgUDP(b, oob []byte) (n, oobn, flags int, addr *net.UDPAddr, err error)
	WriteToUDP(b []byte, addr *net.UDPAddr) (int, error)
	WriteTo(b []byte, addr net.Addr) (int, error)
	WriteMsgUDP(b, oob []byte, addr *net.UDPAddr) (n, oobn int, err error)
}

// MoqUDPConn_starGenType holds the state of a moq of the UDPConn_starGenType
// type
type MoqUDPConn_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqUDPConn_starGenType_mock

	ResultsByParams_SyscallConn []MoqUDPConn_starGenType_SyscallConn_resultsByParams
	ResultsByParams_ReadFromUDP []MoqUDPConn_starGenType_ReadFromUDP_resultsByParams
	ResultsByParams_ReadFrom    []MoqUDPConn_starGenType_ReadFrom_resultsByParams
	ResultsByParams_ReadMsgUDP  []MoqUDPConn_starGenType_ReadMsgUDP_resultsByParams
	ResultsByParams_WriteToUDP  []MoqUDPConn_starGenType_WriteToUDP_resultsByParams
	ResultsByParams_WriteTo     []MoqUDPConn_starGenType_WriteTo_resultsByParams
	ResultsByParams_WriteMsgUDP []MoqUDPConn_starGenType_WriteMsgUDP_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			SyscallConn struct{}
			ReadFromUDP struct {
				B moq.ParamIndexing
			}
			ReadFrom struct {
				B moq.ParamIndexing
			}
			ReadMsgUDP struct {
				B   moq.ParamIndexing
				Oob moq.ParamIndexing
			}
			WriteToUDP struct {
				B    moq.ParamIndexing
				Addr moq.ParamIndexing
			}
			WriteTo struct {
				B    moq.ParamIndexing
				Addr moq.ParamIndexing
			}
			WriteMsgUDP struct {
				B    moq.ParamIndexing
				Oob  moq.ParamIndexing
				Addr moq.ParamIndexing
			}
		}
	}
	// MoqUDPConn_starGenType_mock isolates the mock interface of the
}

// UDPConn_starGenType type
type MoqUDPConn_starGenType_mock struct {
	Moq *MoqUDPConn_starGenType
}

// MoqUDPConn_starGenType_recorder isolates the recorder interface of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_recorder struct {
	Moq *MoqUDPConn_starGenType
}

// MoqUDPConn_starGenType_SyscallConn_params holds the params of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_SyscallConn_params struct{}

// MoqUDPConn_starGenType_SyscallConn_paramsKey holds the map key params of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_SyscallConn_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqUDPConn_starGenType_SyscallConn_resultsByParams contains the results for
// a given set of parameters for the UDPConn_starGenType type
type MoqUDPConn_starGenType_SyscallConn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUDPConn_starGenType_SyscallConn_paramsKey]*MoqUDPConn_starGenType_SyscallConn_results
}

// MoqUDPConn_starGenType_SyscallConn_doFn defines the type of function needed
// when calling AndDo for the UDPConn_starGenType type
type MoqUDPConn_starGenType_SyscallConn_doFn func()

// MoqUDPConn_starGenType_SyscallConn_doReturnFn defines the type of function
// needed when calling DoReturnResults for the UDPConn_starGenType type
type MoqUDPConn_starGenType_SyscallConn_doReturnFn func() (syscall.RawConn, error)

// MoqUDPConn_starGenType_SyscallConn_results holds the results of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_SyscallConn_results struct {
	Params  MoqUDPConn_starGenType_SyscallConn_params
	Results []struct {
		Values *struct {
			Result1 syscall.RawConn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_SyscallConn_doFn
		DoReturnFn MoqUDPConn_starGenType_SyscallConn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUDPConn_starGenType_SyscallConn_fnRecorder routes recorded function calls
// to the MoqUDPConn_starGenType moq
type MoqUDPConn_starGenType_SyscallConn_fnRecorder struct {
	Params    MoqUDPConn_starGenType_SyscallConn_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUDPConn_starGenType_SyscallConn_results
	Moq       *MoqUDPConn_starGenType
}

// MoqUDPConn_starGenType_SyscallConn_anyParams isolates the any params
// functions of the UDPConn_starGenType type
type MoqUDPConn_starGenType_SyscallConn_anyParams struct {
	Recorder *MoqUDPConn_starGenType_SyscallConn_fnRecorder
}

// MoqUDPConn_starGenType_ReadFromUDP_params holds the params of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadFromUDP_params struct{ B []byte }

// MoqUDPConn_starGenType_ReadFromUDP_paramsKey holds the map key params of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadFromUDP_paramsKey struct {
	Params struct{}
	Hashes struct{ B hash.Hash }
}

// MoqUDPConn_starGenType_ReadFromUDP_resultsByParams contains the results for
// a given set of parameters for the UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadFromUDP_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUDPConn_starGenType_ReadFromUDP_paramsKey]*MoqUDPConn_starGenType_ReadFromUDP_results
}

// MoqUDPConn_starGenType_ReadFromUDP_doFn defines the type of function needed
// when calling AndDo for the UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadFromUDP_doFn func(b []byte)

// MoqUDPConn_starGenType_ReadFromUDP_doReturnFn defines the type of function
// needed when calling DoReturnResults for the UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadFromUDP_doReturnFn func(b []byte) (n int, addr *net.UDPAddr, err error)

// MoqUDPConn_starGenType_ReadFromUDP_results holds the results of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadFromUDP_results struct {
	Params  MoqUDPConn_starGenType_ReadFromUDP_params
	Results []struct {
		Values *struct {
			N    int
			Addr *net.UDPAddr
			Err  error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_ReadFromUDP_doFn
		DoReturnFn MoqUDPConn_starGenType_ReadFromUDP_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUDPConn_starGenType_ReadFromUDP_fnRecorder routes recorded function calls
// to the MoqUDPConn_starGenType moq
type MoqUDPConn_starGenType_ReadFromUDP_fnRecorder struct {
	Params    MoqUDPConn_starGenType_ReadFromUDP_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUDPConn_starGenType_ReadFromUDP_results
	Moq       *MoqUDPConn_starGenType
}

// MoqUDPConn_starGenType_ReadFromUDP_anyParams isolates the any params
// functions of the UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadFromUDP_anyParams struct {
	Recorder *MoqUDPConn_starGenType_ReadFromUDP_fnRecorder
}

// MoqUDPConn_starGenType_ReadFrom_params holds the params of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadFrom_params struct{ B []byte }

// MoqUDPConn_starGenType_ReadFrom_paramsKey holds the map key params of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadFrom_paramsKey struct {
	Params struct{}
	Hashes struct{ B hash.Hash }
}

// MoqUDPConn_starGenType_ReadFrom_resultsByParams contains the results for a
// given set of parameters for the UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadFrom_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUDPConn_starGenType_ReadFrom_paramsKey]*MoqUDPConn_starGenType_ReadFrom_results
}

// MoqUDPConn_starGenType_ReadFrom_doFn defines the type of function needed
// when calling AndDo for the UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadFrom_doFn func(b []byte)

// MoqUDPConn_starGenType_ReadFrom_doReturnFn defines the type of function
// needed when calling DoReturnResults for the UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadFrom_doReturnFn func(b []byte) (int, net.Addr, error)

// MoqUDPConn_starGenType_ReadFrom_results holds the results of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadFrom_results struct {
	Params  MoqUDPConn_starGenType_ReadFrom_params
	Results []struct {
		Values *struct {
			Result1 int
			Result2 net.Addr
			Result3 error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_ReadFrom_doFn
		DoReturnFn MoqUDPConn_starGenType_ReadFrom_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUDPConn_starGenType_ReadFrom_fnRecorder routes recorded function calls to
// the MoqUDPConn_starGenType moq
type MoqUDPConn_starGenType_ReadFrom_fnRecorder struct {
	Params    MoqUDPConn_starGenType_ReadFrom_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUDPConn_starGenType_ReadFrom_results
	Moq       *MoqUDPConn_starGenType
}

// MoqUDPConn_starGenType_ReadFrom_anyParams isolates the any params functions
// of the UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadFrom_anyParams struct {
	Recorder *MoqUDPConn_starGenType_ReadFrom_fnRecorder
}

// MoqUDPConn_starGenType_ReadMsgUDP_params holds the params of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadMsgUDP_params struct{ B, Oob []byte }

// MoqUDPConn_starGenType_ReadMsgUDP_paramsKey holds the map key params of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadMsgUDP_paramsKey struct {
	Params struct{}
	Hashes struct{ B, Oob hash.Hash }
}

// MoqUDPConn_starGenType_ReadMsgUDP_resultsByParams contains the results for a
// given set of parameters for the UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadMsgUDP_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUDPConn_starGenType_ReadMsgUDP_paramsKey]*MoqUDPConn_starGenType_ReadMsgUDP_results
}

// MoqUDPConn_starGenType_ReadMsgUDP_doFn defines the type of function needed
// when calling AndDo for the UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadMsgUDP_doFn func(b, oob []byte)

// MoqUDPConn_starGenType_ReadMsgUDP_doReturnFn defines the type of function
// needed when calling DoReturnResults for the UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadMsgUDP_doReturnFn func(b, oob []byte) (n, oobn, flags int, addr *net.UDPAddr, err error)

// MoqUDPConn_starGenType_ReadMsgUDP_results holds the results of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadMsgUDP_results struct {
	Params  MoqUDPConn_starGenType_ReadMsgUDP_params
	Results []struct {
		Values *struct {
			N, Oobn, Flags int
			Addr           *net.UDPAddr
			Err            error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_ReadMsgUDP_doFn
		DoReturnFn MoqUDPConn_starGenType_ReadMsgUDP_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder routes recorded function calls
// to the MoqUDPConn_starGenType moq
type MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder struct {
	Params    MoqUDPConn_starGenType_ReadMsgUDP_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUDPConn_starGenType_ReadMsgUDP_results
	Moq       *MoqUDPConn_starGenType
}

// MoqUDPConn_starGenType_ReadMsgUDP_anyParams isolates the any params
// functions of the UDPConn_starGenType type
type MoqUDPConn_starGenType_ReadMsgUDP_anyParams struct {
	Recorder *MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder
}

// MoqUDPConn_starGenType_WriteToUDP_params holds the params of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteToUDP_params struct {
	B    []byte
	Addr *net.UDPAddr
}

// MoqUDPConn_starGenType_WriteToUDP_paramsKey holds the map key params of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteToUDP_paramsKey struct {
	Params struct{ Addr *net.UDPAddr }
	Hashes struct {
		B    hash.Hash
		Addr hash.Hash
	}
}

// MoqUDPConn_starGenType_WriteToUDP_resultsByParams contains the results for a
// given set of parameters for the UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteToUDP_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUDPConn_starGenType_WriteToUDP_paramsKey]*MoqUDPConn_starGenType_WriteToUDP_results
}

// MoqUDPConn_starGenType_WriteToUDP_doFn defines the type of function needed
// when calling AndDo for the UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteToUDP_doFn func(b []byte, addr *net.UDPAddr)

// MoqUDPConn_starGenType_WriteToUDP_doReturnFn defines the type of function
// needed when calling DoReturnResults for the UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteToUDP_doReturnFn func(b []byte, addr *net.UDPAddr) (int, error)

// MoqUDPConn_starGenType_WriteToUDP_results holds the results of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteToUDP_results struct {
	Params  MoqUDPConn_starGenType_WriteToUDP_params
	Results []struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_WriteToUDP_doFn
		DoReturnFn MoqUDPConn_starGenType_WriteToUDP_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUDPConn_starGenType_WriteToUDP_fnRecorder routes recorded function calls
// to the MoqUDPConn_starGenType moq
type MoqUDPConn_starGenType_WriteToUDP_fnRecorder struct {
	Params    MoqUDPConn_starGenType_WriteToUDP_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUDPConn_starGenType_WriteToUDP_results
	Moq       *MoqUDPConn_starGenType
}

// MoqUDPConn_starGenType_WriteToUDP_anyParams isolates the any params
// functions of the UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteToUDP_anyParams struct {
	Recorder *MoqUDPConn_starGenType_WriteToUDP_fnRecorder
}

// MoqUDPConn_starGenType_WriteTo_params holds the params of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteTo_params struct {
	B    []byte
	Addr net.Addr
}

// MoqUDPConn_starGenType_WriteTo_paramsKey holds the map key params of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteTo_paramsKey struct {
	Params struct{ Addr net.Addr }
	Hashes struct {
		B    hash.Hash
		Addr hash.Hash
	}
}

// MoqUDPConn_starGenType_WriteTo_resultsByParams contains the results for a
// given set of parameters for the UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteTo_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUDPConn_starGenType_WriteTo_paramsKey]*MoqUDPConn_starGenType_WriteTo_results
}

// MoqUDPConn_starGenType_WriteTo_doFn defines the type of function needed when
// calling AndDo for the UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteTo_doFn func(b []byte, addr net.Addr)

// MoqUDPConn_starGenType_WriteTo_doReturnFn defines the type of function
// needed when calling DoReturnResults for the UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteTo_doReturnFn func(b []byte, addr net.Addr) (int, error)

// MoqUDPConn_starGenType_WriteTo_results holds the results of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteTo_results struct {
	Params  MoqUDPConn_starGenType_WriteTo_params
	Results []struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_WriteTo_doFn
		DoReturnFn MoqUDPConn_starGenType_WriteTo_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUDPConn_starGenType_WriteTo_fnRecorder routes recorded function calls to
// the MoqUDPConn_starGenType moq
type MoqUDPConn_starGenType_WriteTo_fnRecorder struct {
	Params    MoqUDPConn_starGenType_WriteTo_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUDPConn_starGenType_WriteTo_results
	Moq       *MoqUDPConn_starGenType
}

// MoqUDPConn_starGenType_WriteTo_anyParams isolates the any params functions
// of the UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteTo_anyParams struct {
	Recorder *MoqUDPConn_starGenType_WriteTo_fnRecorder
}

// MoqUDPConn_starGenType_WriteMsgUDP_params holds the params of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteMsgUDP_params struct {
	B, Oob []byte
	Addr   *net.UDPAddr
}

// MoqUDPConn_starGenType_WriteMsgUDP_paramsKey holds the map key params of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteMsgUDP_paramsKey struct {
	Params struct{ Addr *net.UDPAddr }
	Hashes struct {
		B, Oob hash.Hash
		Addr   hash.Hash
	}
}

// MoqUDPConn_starGenType_WriteMsgUDP_resultsByParams contains the results for
// a given set of parameters for the UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteMsgUDP_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUDPConn_starGenType_WriteMsgUDP_paramsKey]*MoqUDPConn_starGenType_WriteMsgUDP_results
}

// MoqUDPConn_starGenType_WriteMsgUDP_doFn defines the type of function needed
// when calling AndDo for the UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteMsgUDP_doFn func(b, oob []byte, addr *net.UDPAddr)

// MoqUDPConn_starGenType_WriteMsgUDP_doReturnFn defines the type of function
// needed when calling DoReturnResults for the UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteMsgUDP_doReturnFn func(b, oob []byte, addr *net.UDPAddr) (n, oobn int, err error)

// MoqUDPConn_starGenType_WriteMsgUDP_results holds the results of the
// UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteMsgUDP_results struct {
	Params  MoqUDPConn_starGenType_WriteMsgUDP_params
	Results []struct {
		Values *struct {
			N, Oobn int
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_WriteMsgUDP_doFn
		DoReturnFn MoqUDPConn_starGenType_WriteMsgUDP_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder routes recorded function calls
// to the MoqUDPConn_starGenType moq
type MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder struct {
	Params    MoqUDPConn_starGenType_WriteMsgUDP_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUDPConn_starGenType_WriteMsgUDP_results
	Moq       *MoqUDPConn_starGenType
}

// MoqUDPConn_starGenType_WriteMsgUDP_anyParams isolates the any params
// functions of the UDPConn_starGenType type
type MoqUDPConn_starGenType_WriteMsgUDP_anyParams struct {
	Recorder *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder
}

// NewMoqUDPConn_starGenType creates a new moq of the UDPConn_starGenType type
func NewMoqUDPConn_starGenType(scene *moq.Scene, config *moq.Config) *MoqUDPConn_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqUDPConn_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqUDPConn_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				SyscallConn struct{}
				ReadFromUDP struct {
					B moq.ParamIndexing
				}
				ReadFrom struct {
					B moq.ParamIndexing
				}
				ReadMsgUDP struct {
					B   moq.ParamIndexing
					Oob moq.ParamIndexing
				}
				WriteToUDP struct {
					B    moq.ParamIndexing
					Addr moq.ParamIndexing
				}
				WriteTo struct {
					B    moq.ParamIndexing
					Addr moq.ParamIndexing
				}
				WriteMsgUDP struct {
					B    moq.ParamIndexing
					Oob  moq.ParamIndexing
					Addr moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			SyscallConn struct{}
			ReadFromUDP struct {
				B moq.ParamIndexing
			}
			ReadFrom struct {
				B moq.ParamIndexing
			}
			ReadMsgUDP struct {
				B   moq.ParamIndexing
				Oob moq.ParamIndexing
			}
			WriteToUDP struct {
				B    moq.ParamIndexing
				Addr moq.ParamIndexing
			}
			WriteTo struct {
				B    moq.ParamIndexing
				Addr moq.ParamIndexing
			}
			WriteMsgUDP struct {
				B    moq.ParamIndexing
				Oob  moq.ParamIndexing
				Addr moq.ParamIndexing
			}
		}{
			SyscallConn: struct{}{},
			ReadFromUDP: struct {
				B moq.ParamIndexing
			}{
				B: moq.ParamIndexByHash,
			},
			ReadFrom: struct {
				B moq.ParamIndexing
			}{
				B: moq.ParamIndexByHash,
			},
			ReadMsgUDP: struct {
				B   moq.ParamIndexing
				Oob moq.ParamIndexing
			}{
				B:   moq.ParamIndexByHash,
				Oob: moq.ParamIndexByHash,
			},
			WriteToUDP: struct {
				B    moq.ParamIndexing
				Addr moq.ParamIndexing
			}{
				B:    moq.ParamIndexByHash,
				Addr: moq.ParamIndexByHash,
			},
			WriteTo: struct {
				B    moq.ParamIndexing
				Addr moq.ParamIndexing
			}{
				B:    moq.ParamIndexByHash,
				Addr: moq.ParamIndexByHash,
			},
			WriteMsgUDP: struct {
				B    moq.ParamIndexing
				Oob  moq.ParamIndexing
				Addr moq.ParamIndexing
			}{
				B:    moq.ParamIndexByHash,
				Oob:  moq.ParamIndexByHash,
				Addr: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the UDPConn_starGenType type
func (m *MoqUDPConn_starGenType) Mock() *MoqUDPConn_starGenType_mock { return m.Moq }

func (m *MoqUDPConn_starGenType_mock) SyscallConn() (result1 syscall.RawConn, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqUDPConn_starGenType_SyscallConn_params{}
	var results *MoqUDPConn_starGenType_SyscallConn_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SyscallConn {
		paramsKey := m.Moq.ParamsKey_SyscallConn(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SyscallConn(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SyscallConn(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SyscallConn(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqUDPConn_starGenType_mock) ReadFromUDP(b []byte) (n int, addr *net.UDPAddr, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqUDPConn_starGenType_ReadFromUDP_params{
		B: b,
	}
	var results *MoqUDPConn_starGenType_ReadFromUDP_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadFromUDP {
		paramsKey := m.Moq.ParamsKey_ReadFromUDP(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadFromUDP(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadFromUDP(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadFromUDP(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b)
	}

	if result.Values != nil {
		n = result.Values.N
		addr = result.Values.Addr
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, addr, err = result.DoReturnFn(b)
	}
	return
}

func (m *MoqUDPConn_starGenType_mock) ReadFrom(b []byte) (result1 int, result2 net.Addr, result3 error) {
	m.Moq.Scene.T.Helper()
	params := MoqUDPConn_starGenType_ReadFrom_params{
		B: b,
	}
	var results *MoqUDPConn_starGenType_ReadFrom_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadFrom {
		paramsKey := m.Moq.ParamsKey_ReadFrom(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadFrom(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadFrom(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadFrom(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
		result3 = result.Values.Result3
	}
	if result.DoReturnFn != nil {
		result1, result2, result3 = result.DoReturnFn(b)
	}
	return
}

func (m *MoqUDPConn_starGenType_mock) ReadMsgUDP(b, oob []byte) (n, oobn, flags int, addr *net.UDPAddr, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqUDPConn_starGenType_ReadMsgUDP_params{
		B:   b,
		Oob: oob,
	}
	var results *MoqUDPConn_starGenType_ReadMsgUDP_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadMsgUDP {
		paramsKey := m.Moq.ParamsKey_ReadMsgUDP(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadMsgUDP(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadMsgUDP(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadMsgUDP(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b, oob)
	}

	if result.Values != nil {
		n = result.Values.N
		oobn = result.Values.Oobn
		flags = result.Values.Flags
		addr = result.Values.Addr
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, oobn, flags, addr, err = result.DoReturnFn(b, oob)
	}
	return
}

func (m *MoqUDPConn_starGenType_mock) WriteToUDP(b []byte, addr *net.UDPAddr) (result1 int, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqUDPConn_starGenType_WriteToUDP_params{
		B:    b,
		Addr: addr,
	}
	var results *MoqUDPConn_starGenType_WriteToUDP_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteToUDP {
		paramsKey := m.Moq.ParamsKey_WriteToUDP(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteToUDP(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteToUDP(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteToUDP(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b, addr)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(b, addr)
	}
	return
}

func (m *MoqUDPConn_starGenType_mock) WriteTo(b []byte, addr net.Addr) (result1 int, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqUDPConn_starGenType_WriteTo_params{
		B:    b,
		Addr: addr,
	}
	var results *MoqUDPConn_starGenType_WriteTo_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteTo {
		paramsKey := m.Moq.ParamsKey_WriteTo(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteTo(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteTo(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteTo(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b, addr)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(b, addr)
	}
	return
}

func (m *MoqUDPConn_starGenType_mock) WriteMsgUDP(b, oob []byte, addr *net.UDPAddr) (n, oobn int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqUDPConn_starGenType_WriteMsgUDP_params{
		B:    b,
		Oob:  oob,
		Addr: addr,
	}
	var results *MoqUDPConn_starGenType_WriteMsgUDP_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteMsgUDP {
		paramsKey := m.Moq.ParamsKey_WriteMsgUDP(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteMsgUDP(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteMsgUDP(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteMsgUDP(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(b, oob, addr)
	}

	if result.Values != nil {
		n = result.Values.N
		oobn = result.Values.Oobn
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, oobn, err = result.DoReturnFn(b, oob, addr)
	}
	return
}

// OnCall returns the recorder implementation of the UDPConn_starGenType type
func (m *MoqUDPConn_starGenType) OnCall() *MoqUDPConn_starGenType_recorder {
	return &MoqUDPConn_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqUDPConn_starGenType_recorder) SyscallConn() *MoqUDPConn_starGenType_SyscallConn_fnRecorder {
	return &MoqUDPConn_starGenType_SyscallConn_fnRecorder{
		Params:   MoqUDPConn_starGenType_SyscallConn_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUDPConn_starGenType_SyscallConn_fnRecorder) Any() *MoqUDPConn_starGenType_SyscallConn_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SyscallConn(r.Params))
		return nil
	}
	return &MoqUDPConn_starGenType_SyscallConn_anyParams{Recorder: r}
}

func (r *MoqUDPConn_starGenType_SyscallConn_fnRecorder) Seq() *MoqUDPConn_starGenType_SyscallConn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SyscallConn(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUDPConn_starGenType_SyscallConn_fnRecorder) NoSeq() *MoqUDPConn_starGenType_SyscallConn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SyscallConn(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUDPConn_starGenType_SyscallConn_fnRecorder) ReturnResults(result1 syscall.RawConn, result2 error) *MoqUDPConn_starGenType_SyscallConn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 syscall.RawConn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_SyscallConn_doFn
		DoReturnFn MoqUDPConn_starGenType_SyscallConn_doReturnFn
	}{
		Values: &struct {
			Result1 syscall.RawConn
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUDPConn_starGenType_SyscallConn_fnRecorder) AndDo(fn MoqUDPConn_starGenType_SyscallConn_doFn) *MoqUDPConn_starGenType_SyscallConn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUDPConn_starGenType_SyscallConn_fnRecorder) DoReturnResults(fn MoqUDPConn_starGenType_SyscallConn_doReturnFn) *MoqUDPConn_starGenType_SyscallConn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 syscall.RawConn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_SyscallConn_doFn
		DoReturnFn MoqUDPConn_starGenType_SyscallConn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUDPConn_starGenType_SyscallConn_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUDPConn_starGenType_SyscallConn_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SyscallConn {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUDPConn_starGenType_SyscallConn_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUDPConn_starGenType_SyscallConn_paramsKey]*MoqUDPConn_starGenType_SyscallConn_results{},
		}
		r.Moq.ResultsByParams_SyscallConn = append(r.Moq.ResultsByParams_SyscallConn, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SyscallConn) {
			copy(r.Moq.ResultsByParams_SyscallConn[insertAt+1:], r.Moq.ResultsByParams_SyscallConn[insertAt:0])
			r.Moq.ResultsByParams_SyscallConn[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SyscallConn(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUDPConn_starGenType_SyscallConn_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUDPConn_starGenType_SyscallConn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUDPConn_starGenType_SyscallConn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 syscall.RawConn
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqUDPConn_starGenType_SyscallConn_doFn
				DoReturnFn MoqUDPConn_starGenType_SyscallConn_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUDPConn_starGenType) PrettyParams_SyscallConn(params MoqUDPConn_starGenType_SyscallConn_params) string {
	return fmt.Sprintf("SyscallConn()")
}

func (m *MoqUDPConn_starGenType) ParamsKey_SyscallConn(params MoqUDPConn_starGenType_SyscallConn_params, anyParams uint64) MoqUDPConn_starGenType_SyscallConn_paramsKey {
	m.Scene.T.Helper()
	return MoqUDPConn_starGenType_SyscallConn_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqUDPConn_starGenType_recorder) ReadFromUDP(b []byte) *MoqUDPConn_starGenType_ReadFromUDP_fnRecorder {
	return &MoqUDPConn_starGenType_ReadFromUDP_fnRecorder{
		Params: MoqUDPConn_starGenType_ReadFromUDP_params{
			B: b,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUDPConn_starGenType_ReadFromUDP_fnRecorder) Any() *MoqUDPConn_starGenType_ReadFromUDP_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFromUDP(r.Params))
		return nil
	}
	return &MoqUDPConn_starGenType_ReadFromUDP_anyParams{Recorder: r}
}

func (a *MoqUDPConn_starGenType_ReadFromUDP_anyParams) B() *MoqUDPConn_starGenType_ReadFromUDP_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqUDPConn_starGenType_ReadFromUDP_fnRecorder) Seq() *MoqUDPConn_starGenType_ReadFromUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFromUDP(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUDPConn_starGenType_ReadFromUDP_fnRecorder) NoSeq() *MoqUDPConn_starGenType_ReadFromUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFromUDP(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUDPConn_starGenType_ReadFromUDP_fnRecorder) ReturnResults(n int, addr *net.UDPAddr, err error) *MoqUDPConn_starGenType_ReadFromUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N    int
			Addr *net.UDPAddr
			Err  error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_ReadFromUDP_doFn
		DoReturnFn MoqUDPConn_starGenType_ReadFromUDP_doReturnFn
	}{
		Values: &struct {
			N    int
			Addr *net.UDPAddr
			Err  error
		}{
			N:    n,
			Addr: addr,
			Err:  err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUDPConn_starGenType_ReadFromUDP_fnRecorder) AndDo(fn MoqUDPConn_starGenType_ReadFromUDP_doFn) *MoqUDPConn_starGenType_ReadFromUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUDPConn_starGenType_ReadFromUDP_fnRecorder) DoReturnResults(fn MoqUDPConn_starGenType_ReadFromUDP_doReturnFn) *MoqUDPConn_starGenType_ReadFromUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N    int
			Addr *net.UDPAddr
			Err  error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_ReadFromUDP_doFn
		DoReturnFn MoqUDPConn_starGenType_ReadFromUDP_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUDPConn_starGenType_ReadFromUDP_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUDPConn_starGenType_ReadFromUDP_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadFromUDP {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUDPConn_starGenType_ReadFromUDP_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUDPConn_starGenType_ReadFromUDP_paramsKey]*MoqUDPConn_starGenType_ReadFromUDP_results{},
		}
		r.Moq.ResultsByParams_ReadFromUDP = append(r.Moq.ResultsByParams_ReadFromUDP, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadFromUDP) {
			copy(r.Moq.ResultsByParams_ReadFromUDP[insertAt+1:], r.Moq.ResultsByParams_ReadFromUDP[insertAt:0])
			r.Moq.ResultsByParams_ReadFromUDP[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadFromUDP(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUDPConn_starGenType_ReadFromUDP_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUDPConn_starGenType_ReadFromUDP_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUDPConn_starGenType_ReadFromUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N    int
					Addr *net.UDPAddr
					Err  error
				}
				Sequence   uint32
				DoFn       MoqUDPConn_starGenType_ReadFromUDP_doFn
				DoReturnFn MoqUDPConn_starGenType_ReadFromUDP_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUDPConn_starGenType) PrettyParams_ReadFromUDP(params MoqUDPConn_starGenType_ReadFromUDP_params) string {
	return fmt.Sprintf("ReadFromUDP(%#v)", params.B)
}

func (m *MoqUDPConn_starGenType) ParamsKey_ReadFromUDP(params MoqUDPConn_starGenType_ReadFromUDP_params, anyParams uint64) MoqUDPConn_starGenType_ReadFromUDP_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadFromUDP.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the ReadFromUDP function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	return MoqUDPConn_starGenType_ReadFromUDP_paramsKey{
		Params: struct{}{},
		Hashes: struct{ B hash.Hash }{
			B: bUsedHash,
		},
	}
}

func (m *MoqUDPConn_starGenType_recorder) ReadFrom(b []byte) *MoqUDPConn_starGenType_ReadFrom_fnRecorder {
	return &MoqUDPConn_starGenType_ReadFrom_fnRecorder{
		Params: MoqUDPConn_starGenType_ReadFrom_params{
			B: b,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUDPConn_starGenType_ReadFrom_fnRecorder) Any() *MoqUDPConn_starGenType_ReadFrom_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFrom(r.Params))
		return nil
	}
	return &MoqUDPConn_starGenType_ReadFrom_anyParams{Recorder: r}
}

func (a *MoqUDPConn_starGenType_ReadFrom_anyParams) B() *MoqUDPConn_starGenType_ReadFrom_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqUDPConn_starGenType_ReadFrom_fnRecorder) Seq() *MoqUDPConn_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFrom(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUDPConn_starGenType_ReadFrom_fnRecorder) NoSeq() *MoqUDPConn_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFrom(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUDPConn_starGenType_ReadFrom_fnRecorder) ReturnResults(result1 int, result2 net.Addr, result3 error) *MoqUDPConn_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 net.Addr
			Result3 error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_ReadFrom_doFn
		DoReturnFn MoqUDPConn_starGenType_ReadFrom_doReturnFn
	}{
		Values: &struct {
			Result1 int
			Result2 net.Addr
			Result3 error
		}{
			Result1: result1,
			Result2: result2,
			Result3: result3,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUDPConn_starGenType_ReadFrom_fnRecorder) AndDo(fn MoqUDPConn_starGenType_ReadFrom_doFn) *MoqUDPConn_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUDPConn_starGenType_ReadFrom_fnRecorder) DoReturnResults(fn MoqUDPConn_starGenType_ReadFrom_doReturnFn) *MoqUDPConn_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 net.Addr
			Result3 error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_ReadFrom_doFn
		DoReturnFn MoqUDPConn_starGenType_ReadFrom_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUDPConn_starGenType_ReadFrom_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUDPConn_starGenType_ReadFrom_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadFrom {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUDPConn_starGenType_ReadFrom_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUDPConn_starGenType_ReadFrom_paramsKey]*MoqUDPConn_starGenType_ReadFrom_results{},
		}
		r.Moq.ResultsByParams_ReadFrom = append(r.Moq.ResultsByParams_ReadFrom, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadFrom) {
			copy(r.Moq.ResultsByParams_ReadFrom[insertAt+1:], r.Moq.ResultsByParams_ReadFrom[insertAt:0])
			r.Moq.ResultsByParams_ReadFrom[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadFrom(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUDPConn_starGenType_ReadFrom_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUDPConn_starGenType_ReadFrom_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUDPConn_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
					Result2 net.Addr
					Result3 error
				}
				Sequence   uint32
				DoFn       MoqUDPConn_starGenType_ReadFrom_doFn
				DoReturnFn MoqUDPConn_starGenType_ReadFrom_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUDPConn_starGenType) PrettyParams_ReadFrom(params MoqUDPConn_starGenType_ReadFrom_params) string {
	return fmt.Sprintf("ReadFrom(%#v)", params.B)
}

func (m *MoqUDPConn_starGenType) ParamsKey_ReadFrom(params MoqUDPConn_starGenType_ReadFrom_params, anyParams uint64) MoqUDPConn_starGenType_ReadFrom_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadFrom.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the ReadFrom function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	return MoqUDPConn_starGenType_ReadFrom_paramsKey{
		Params: struct{}{},
		Hashes: struct{ B hash.Hash }{
			B: bUsedHash,
		},
	}
}

func (m *MoqUDPConn_starGenType_recorder) ReadMsgUDP(b, oob []byte) *MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder {
	return &MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder{
		Params: MoqUDPConn_starGenType_ReadMsgUDP_params{
			B:   b,
			Oob: oob,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder) Any() *MoqUDPConn_starGenType_ReadMsgUDP_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadMsgUDP(r.Params))
		return nil
	}
	return &MoqUDPConn_starGenType_ReadMsgUDP_anyParams{Recorder: r}
}

func (a *MoqUDPConn_starGenType_ReadMsgUDP_anyParams) B() *MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUDPConn_starGenType_ReadMsgUDP_anyParams) Oob() *MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder) Seq() *MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadMsgUDP(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder) NoSeq() *MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadMsgUDP(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder) ReturnResults(n, oobn, flags int, addr *net.UDPAddr, err error) *MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N, Oobn, Flags int
			Addr           *net.UDPAddr
			Err            error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_ReadMsgUDP_doFn
		DoReturnFn MoqUDPConn_starGenType_ReadMsgUDP_doReturnFn
	}{
		Values: &struct {
			N, Oobn, Flags int
			Addr           *net.UDPAddr
			Err            error
		}{
			N:     n,
			Oobn:  oobn,
			Flags: flags,
			Addr:  addr,
			Err:   err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder) AndDo(fn MoqUDPConn_starGenType_ReadMsgUDP_doFn) *MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder) DoReturnResults(fn MoqUDPConn_starGenType_ReadMsgUDP_doReturnFn) *MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N, Oobn, Flags int
			Addr           *net.UDPAddr
			Err            error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_ReadMsgUDP_doFn
		DoReturnFn MoqUDPConn_starGenType_ReadMsgUDP_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUDPConn_starGenType_ReadMsgUDP_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadMsgUDP {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUDPConn_starGenType_ReadMsgUDP_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUDPConn_starGenType_ReadMsgUDP_paramsKey]*MoqUDPConn_starGenType_ReadMsgUDP_results{},
		}
		r.Moq.ResultsByParams_ReadMsgUDP = append(r.Moq.ResultsByParams_ReadMsgUDP, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadMsgUDP) {
			copy(r.Moq.ResultsByParams_ReadMsgUDP[insertAt+1:], r.Moq.ResultsByParams_ReadMsgUDP[insertAt:0])
			r.Moq.ResultsByParams_ReadMsgUDP[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadMsgUDP(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUDPConn_starGenType_ReadMsgUDP_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUDPConn_starGenType_ReadMsgUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N, Oobn, Flags int
					Addr           *net.UDPAddr
					Err            error
				}
				Sequence   uint32
				DoFn       MoqUDPConn_starGenType_ReadMsgUDP_doFn
				DoReturnFn MoqUDPConn_starGenType_ReadMsgUDP_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUDPConn_starGenType) PrettyParams_ReadMsgUDP(params MoqUDPConn_starGenType_ReadMsgUDP_params) string {
	return fmt.Sprintf("ReadMsgUDP(%#v, %#v)", params.B, params.Oob)
}

func (m *MoqUDPConn_starGenType) ParamsKey_ReadMsgUDP(params MoqUDPConn_starGenType_ReadMsgUDP_params, anyParams uint64) MoqUDPConn_starGenType_ReadMsgUDP_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadMsgUDP.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the ReadMsgUDP function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	var oobUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.ReadMsgUDP.Oob == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The oob parameter of the ReadMsgUDP function can't be indexed by value")
		}
		oobUsedHash = hash.DeepHash(params.Oob)
	}
	return MoqUDPConn_starGenType_ReadMsgUDP_paramsKey{
		Params: struct{}{},
		Hashes: struct{ B, Oob hash.Hash }{
			B:   bUsedHash,
			Oob: oobUsedHash,
		},
	}
}

func (m *MoqUDPConn_starGenType_recorder) WriteToUDP(b []byte, addr *net.UDPAddr) *MoqUDPConn_starGenType_WriteToUDP_fnRecorder {
	return &MoqUDPConn_starGenType_WriteToUDP_fnRecorder{
		Params: MoqUDPConn_starGenType_WriteToUDP_params{
			B:    b,
			Addr: addr,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUDPConn_starGenType_WriteToUDP_fnRecorder) Any() *MoqUDPConn_starGenType_WriteToUDP_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteToUDP(r.Params))
		return nil
	}
	return &MoqUDPConn_starGenType_WriteToUDP_anyParams{Recorder: r}
}

func (a *MoqUDPConn_starGenType_WriteToUDP_anyParams) B() *MoqUDPConn_starGenType_WriteToUDP_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUDPConn_starGenType_WriteToUDP_anyParams) Addr() *MoqUDPConn_starGenType_WriteToUDP_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUDPConn_starGenType_WriteToUDP_fnRecorder) Seq() *MoqUDPConn_starGenType_WriteToUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteToUDP(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUDPConn_starGenType_WriteToUDP_fnRecorder) NoSeq() *MoqUDPConn_starGenType_WriteToUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteToUDP(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUDPConn_starGenType_WriteToUDP_fnRecorder) ReturnResults(result1 int, result2 error) *MoqUDPConn_starGenType_WriteToUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_WriteToUDP_doFn
		DoReturnFn MoqUDPConn_starGenType_WriteToUDP_doReturnFn
	}{
		Values: &struct {
			Result1 int
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUDPConn_starGenType_WriteToUDP_fnRecorder) AndDo(fn MoqUDPConn_starGenType_WriteToUDP_doFn) *MoqUDPConn_starGenType_WriteToUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUDPConn_starGenType_WriteToUDP_fnRecorder) DoReturnResults(fn MoqUDPConn_starGenType_WriteToUDP_doReturnFn) *MoqUDPConn_starGenType_WriteToUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_WriteToUDP_doFn
		DoReturnFn MoqUDPConn_starGenType_WriteToUDP_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUDPConn_starGenType_WriteToUDP_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUDPConn_starGenType_WriteToUDP_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteToUDP {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUDPConn_starGenType_WriteToUDP_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUDPConn_starGenType_WriteToUDP_paramsKey]*MoqUDPConn_starGenType_WriteToUDP_results{},
		}
		r.Moq.ResultsByParams_WriteToUDP = append(r.Moq.ResultsByParams_WriteToUDP, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteToUDP) {
			copy(r.Moq.ResultsByParams_WriteToUDP[insertAt+1:], r.Moq.ResultsByParams_WriteToUDP[insertAt:0])
			r.Moq.ResultsByParams_WriteToUDP[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteToUDP(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUDPConn_starGenType_WriteToUDP_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUDPConn_starGenType_WriteToUDP_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUDPConn_starGenType_WriteToUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqUDPConn_starGenType_WriteToUDP_doFn
				DoReturnFn MoqUDPConn_starGenType_WriteToUDP_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUDPConn_starGenType) PrettyParams_WriteToUDP(params MoqUDPConn_starGenType_WriteToUDP_params) string {
	return fmt.Sprintf("WriteToUDP(%#v, %#v)", params.B, params.Addr)
}

func (m *MoqUDPConn_starGenType) ParamsKey_WriteToUDP(params MoqUDPConn_starGenType_WriteToUDP_params, anyParams uint64) MoqUDPConn_starGenType_WriteToUDP_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteToUDP.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the WriteToUDP function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	var addrUsed *net.UDPAddr
	var addrUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.WriteToUDP.Addr == moq.ParamIndexByValue {
			addrUsed = params.Addr
		} else {
			addrUsedHash = hash.DeepHash(params.Addr)
		}
	}
	return MoqUDPConn_starGenType_WriteToUDP_paramsKey{
		Params: struct{ Addr *net.UDPAddr }{
			Addr: addrUsed,
		},
		Hashes: struct {
			B    hash.Hash
			Addr hash.Hash
		}{
			B:    bUsedHash,
			Addr: addrUsedHash,
		},
	}
}

func (m *MoqUDPConn_starGenType_recorder) WriteTo(b []byte, addr net.Addr) *MoqUDPConn_starGenType_WriteTo_fnRecorder {
	return &MoqUDPConn_starGenType_WriteTo_fnRecorder{
		Params: MoqUDPConn_starGenType_WriteTo_params{
			B:    b,
			Addr: addr,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUDPConn_starGenType_WriteTo_fnRecorder) Any() *MoqUDPConn_starGenType_WriteTo_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteTo(r.Params))
		return nil
	}
	return &MoqUDPConn_starGenType_WriteTo_anyParams{Recorder: r}
}

func (a *MoqUDPConn_starGenType_WriteTo_anyParams) B() *MoqUDPConn_starGenType_WriteTo_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUDPConn_starGenType_WriteTo_anyParams) Addr() *MoqUDPConn_starGenType_WriteTo_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUDPConn_starGenType_WriteTo_fnRecorder) Seq() *MoqUDPConn_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteTo(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUDPConn_starGenType_WriteTo_fnRecorder) NoSeq() *MoqUDPConn_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteTo(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUDPConn_starGenType_WriteTo_fnRecorder) ReturnResults(result1 int, result2 error) *MoqUDPConn_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_WriteTo_doFn
		DoReturnFn MoqUDPConn_starGenType_WriteTo_doReturnFn
	}{
		Values: &struct {
			Result1 int
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUDPConn_starGenType_WriteTo_fnRecorder) AndDo(fn MoqUDPConn_starGenType_WriteTo_doFn) *MoqUDPConn_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUDPConn_starGenType_WriteTo_fnRecorder) DoReturnResults(fn MoqUDPConn_starGenType_WriteTo_doReturnFn) *MoqUDPConn_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_WriteTo_doFn
		DoReturnFn MoqUDPConn_starGenType_WriteTo_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUDPConn_starGenType_WriteTo_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUDPConn_starGenType_WriteTo_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteTo {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUDPConn_starGenType_WriteTo_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUDPConn_starGenType_WriteTo_paramsKey]*MoqUDPConn_starGenType_WriteTo_results{},
		}
		r.Moq.ResultsByParams_WriteTo = append(r.Moq.ResultsByParams_WriteTo, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteTo) {
			copy(r.Moq.ResultsByParams_WriteTo[insertAt+1:], r.Moq.ResultsByParams_WriteTo[insertAt:0])
			r.Moq.ResultsByParams_WriteTo[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteTo(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUDPConn_starGenType_WriteTo_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUDPConn_starGenType_WriteTo_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUDPConn_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqUDPConn_starGenType_WriteTo_doFn
				DoReturnFn MoqUDPConn_starGenType_WriteTo_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUDPConn_starGenType) PrettyParams_WriteTo(params MoqUDPConn_starGenType_WriteTo_params) string {
	return fmt.Sprintf("WriteTo(%#v, %#v)", params.B, params.Addr)
}

func (m *MoqUDPConn_starGenType) ParamsKey_WriteTo(params MoqUDPConn_starGenType_WriteTo_params, anyParams uint64) MoqUDPConn_starGenType_WriteTo_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteTo.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the WriteTo function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	var addrUsed net.Addr
	var addrUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.WriteTo.Addr == moq.ParamIndexByValue {
			addrUsed = params.Addr
		} else {
			addrUsedHash = hash.DeepHash(params.Addr)
		}
	}
	return MoqUDPConn_starGenType_WriteTo_paramsKey{
		Params: struct{ Addr net.Addr }{
			Addr: addrUsed,
		},
		Hashes: struct {
			B    hash.Hash
			Addr hash.Hash
		}{
			B:    bUsedHash,
			Addr: addrUsedHash,
		},
	}
}

func (m *MoqUDPConn_starGenType_recorder) WriteMsgUDP(b, oob []byte, addr *net.UDPAddr) *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder {
	return &MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder{
		Params: MoqUDPConn_starGenType_WriteMsgUDP_params{
			B:    b,
			Oob:  oob,
			Addr: addr,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder) Any() *MoqUDPConn_starGenType_WriteMsgUDP_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteMsgUDP(r.Params))
		return nil
	}
	return &MoqUDPConn_starGenType_WriteMsgUDP_anyParams{Recorder: r}
}

func (a *MoqUDPConn_starGenType_WriteMsgUDP_anyParams) B() *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUDPConn_starGenType_WriteMsgUDP_anyParams) Oob() *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqUDPConn_starGenType_WriteMsgUDP_anyParams) Addr() *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder) Seq() *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteMsgUDP(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder) NoSeq() *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteMsgUDP(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder) ReturnResults(n, oobn int, err error) *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N, Oobn int
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_WriteMsgUDP_doFn
		DoReturnFn MoqUDPConn_starGenType_WriteMsgUDP_doReturnFn
	}{
		Values: &struct {
			N, Oobn int
			Err     error
		}{
			N:    n,
			Oobn: oobn,
			Err:  err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder) AndDo(fn MoqUDPConn_starGenType_WriteMsgUDP_doFn) *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder) DoReturnResults(fn MoqUDPConn_starGenType_WriteMsgUDP_doReturnFn) *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N, Oobn int
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUDPConn_starGenType_WriteMsgUDP_doFn
		DoReturnFn MoqUDPConn_starGenType_WriteMsgUDP_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUDPConn_starGenType_WriteMsgUDP_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteMsgUDP {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUDPConn_starGenType_WriteMsgUDP_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUDPConn_starGenType_WriteMsgUDP_paramsKey]*MoqUDPConn_starGenType_WriteMsgUDP_results{},
		}
		r.Moq.ResultsByParams_WriteMsgUDP = append(r.Moq.ResultsByParams_WriteMsgUDP, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteMsgUDP) {
			copy(r.Moq.ResultsByParams_WriteMsgUDP[insertAt+1:], r.Moq.ResultsByParams_WriteMsgUDP[insertAt:0])
			r.Moq.ResultsByParams_WriteMsgUDP[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteMsgUDP(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUDPConn_starGenType_WriteMsgUDP_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUDPConn_starGenType_WriteMsgUDP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N, Oobn int
					Err     error
				}
				Sequence   uint32
				DoFn       MoqUDPConn_starGenType_WriteMsgUDP_doFn
				DoReturnFn MoqUDPConn_starGenType_WriteMsgUDP_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUDPConn_starGenType) PrettyParams_WriteMsgUDP(params MoqUDPConn_starGenType_WriteMsgUDP_params) string {
	return fmt.Sprintf("WriteMsgUDP(%#v, %#v, %#v)", params.B, params.Oob, params.Addr)
}

func (m *MoqUDPConn_starGenType) ParamsKey_WriteMsgUDP(params MoqUDPConn_starGenType_WriteMsgUDP_params, anyParams uint64) MoqUDPConn_starGenType_WriteMsgUDP_paramsKey {
	m.Scene.T.Helper()
	var bUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteMsgUDP.B == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The b parameter of the WriteMsgUDP function can't be indexed by value")
		}
		bUsedHash = hash.DeepHash(params.B)
	}
	var oobUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.WriteMsgUDP.Oob == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The oob parameter of the WriteMsgUDP function can't be indexed by value")
		}
		oobUsedHash = hash.DeepHash(params.Oob)
	}
	var addrUsed *net.UDPAddr
	var addrUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.WriteMsgUDP.Addr == moq.ParamIndexByValue {
			addrUsed = params.Addr
		} else {
			addrUsedHash = hash.DeepHash(params.Addr)
		}
	}
	return MoqUDPConn_starGenType_WriteMsgUDP_paramsKey{
		Params: struct{ Addr *net.UDPAddr }{
			Addr: addrUsed,
		},
		Hashes: struct {
			B, Oob hash.Hash
			Addr   hash.Hash
		}{
			B:    bUsedHash,
			Oob:  oobUsedHash,
			Addr: addrUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqUDPConn_starGenType) Reset() {
	m.ResultsByParams_SyscallConn = nil
	m.ResultsByParams_ReadFromUDP = nil
	m.ResultsByParams_ReadFrom = nil
	m.ResultsByParams_ReadMsgUDP = nil
	m.ResultsByParams_WriteToUDP = nil
	m.ResultsByParams_WriteTo = nil
	m.ResultsByParams_WriteMsgUDP = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqUDPConn_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_SyscallConn {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SyscallConn(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadFromUDP {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadFromUDP(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadFrom {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadFrom(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadMsgUDP {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadMsgUDP(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteToUDP {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteToUDP(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteTo {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteTo(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteMsgUDP {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteMsgUDP(results.Params))
			}
		}
	}
}
