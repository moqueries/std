// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package mail

import (
	"fmt"
	"math/bits"
	"net/mail"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that mail.AddressParser_starGenType is
// mocked completely
var _ AddressParser_starGenType = (*MoqAddressParser_starGenType_mock)(nil)

// AddressParser_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type AddressParser_starGenType interface {
	Parse(address string) (*mail.Address, error)
	ParseList(list string) ([]*mail.Address, error)
}

// MoqAddressParser_starGenType holds the state of a moq of the
// AddressParser_starGenType type
type MoqAddressParser_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqAddressParser_starGenType_mock

	ResultsByParams_Parse     []MoqAddressParser_starGenType_Parse_resultsByParams
	ResultsByParams_ParseList []MoqAddressParser_starGenType_ParseList_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Parse struct {
				Address moq.ParamIndexing
			}
			ParseList struct {
				List moq.ParamIndexing
			}
		}
	}
	// MoqAddressParser_starGenType_mock isolates the mock interface of the
}

// AddressParser_starGenType type
type MoqAddressParser_starGenType_mock struct {
	Moq *MoqAddressParser_starGenType
}

// MoqAddressParser_starGenType_recorder isolates the recorder interface of the
// AddressParser_starGenType type
type MoqAddressParser_starGenType_recorder struct {
	Moq *MoqAddressParser_starGenType
}

// MoqAddressParser_starGenType_Parse_params holds the params of the
// AddressParser_starGenType type
type MoqAddressParser_starGenType_Parse_params struct{ Address string }

// MoqAddressParser_starGenType_Parse_paramsKey holds the map key params of the
// AddressParser_starGenType type
type MoqAddressParser_starGenType_Parse_paramsKey struct {
	Params struct{ Address string }
	Hashes struct{ Address hash.Hash }
}

// MoqAddressParser_starGenType_Parse_resultsByParams contains the results for
// a given set of parameters for the AddressParser_starGenType type
type MoqAddressParser_starGenType_Parse_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqAddressParser_starGenType_Parse_paramsKey]*MoqAddressParser_starGenType_Parse_results
}

// MoqAddressParser_starGenType_Parse_doFn defines the type of function needed
// when calling AndDo for the AddressParser_starGenType type
type MoqAddressParser_starGenType_Parse_doFn func(address string)

// MoqAddressParser_starGenType_Parse_doReturnFn defines the type of function
// needed when calling DoReturnResults for the AddressParser_starGenType type
type MoqAddressParser_starGenType_Parse_doReturnFn func(address string) (*mail.Address, error)

// MoqAddressParser_starGenType_Parse_results holds the results of the
// AddressParser_starGenType type
type MoqAddressParser_starGenType_Parse_results struct {
	Params  MoqAddressParser_starGenType_Parse_params
	Results []struct {
		Values *struct {
			Result1 *mail.Address
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqAddressParser_starGenType_Parse_doFn
		DoReturnFn MoqAddressParser_starGenType_Parse_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqAddressParser_starGenType_Parse_fnRecorder routes recorded function calls
// to the MoqAddressParser_starGenType moq
type MoqAddressParser_starGenType_Parse_fnRecorder struct {
	Params    MoqAddressParser_starGenType_Parse_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqAddressParser_starGenType_Parse_results
	Moq       *MoqAddressParser_starGenType
}

// MoqAddressParser_starGenType_Parse_anyParams isolates the any params
// functions of the AddressParser_starGenType type
type MoqAddressParser_starGenType_Parse_anyParams struct {
	Recorder *MoqAddressParser_starGenType_Parse_fnRecorder
}

// MoqAddressParser_starGenType_ParseList_params holds the params of the
// AddressParser_starGenType type
type MoqAddressParser_starGenType_ParseList_params struct{ List string }

// MoqAddressParser_starGenType_ParseList_paramsKey holds the map key params of
// the AddressParser_starGenType type
type MoqAddressParser_starGenType_ParseList_paramsKey struct {
	Params struct{ List string }
	Hashes struct{ List hash.Hash }
}

// MoqAddressParser_starGenType_ParseList_resultsByParams contains the results
// for a given set of parameters for the AddressParser_starGenType type
type MoqAddressParser_starGenType_ParseList_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqAddressParser_starGenType_ParseList_paramsKey]*MoqAddressParser_starGenType_ParseList_results
}

// MoqAddressParser_starGenType_ParseList_doFn defines the type of function
// needed when calling AndDo for the AddressParser_starGenType type
type MoqAddressParser_starGenType_ParseList_doFn func(list string)

// MoqAddressParser_starGenType_ParseList_doReturnFn defines the type of
// function needed when calling DoReturnResults for the
// AddressParser_starGenType type
type MoqAddressParser_starGenType_ParseList_doReturnFn func(list string) ([]*mail.Address, error)

// MoqAddressParser_starGenType_ParseList_results holds the results of the
// AddressParser_starGenType type
type MoqAddressParser_starGenType_ParseList_results struct {
	Params  MoqAddressParser_starGenType_ParseList_params
	Results []struct {
		Values *struct {
			Result1 []*mail.Address
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqAddressParser_starGenType_ParseList_doFn
		DoReturnFn MoqAddressParser_starGenType_ParseList_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqAddressParser_starGenType_ParseList_fnRecorder routes recorded function
// calls to the MoqAddressParser_starGenType moq
type MoqAddressParser_starGenType_ParseList_fnRecorder struct {
	Params    MoqAddressParser_starGenType_ParseList_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqAddressParser_starGenType_ParseList_results
	Moq       *MoqAddressParser_starGenType
}

// MoqAddressParser_starGenType_ParseList_anyParams isolates the any params
// functions of the AddressParser_starGenType type
type MoqAddressParser_starGenType_ParseList_anyParams struct {
	Recorder *MoqAddressParser_starGenType_ParseList_fnRecorder
}

// NewMoqAddressParser_starGenType creates a new moq of the
// AddressParser_starGenType type
func NewMoqAddressParser_starGenType(scene *moq.Scene, config *moq.Config) *MoqAddressParser_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqAddressParser_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqAddressParser_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Parse struct {
					Address moq.ParamIndexing
				}
				ParseList struct {
					List moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Parse struct {
				Address moq.ParamIndexing
			}
			ParseList struct {
				List moq.ParamIndexing
			}
		}{
			Parse: struct {
				Address moq.ParamIndexing
			}{
				Address: moq.ParamIndexByValue,
			},
			ParseList: struct {
				List moq.ParamIndexing
			}{
				List: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the AddressParser_starGenType type
func (m *MoqAddressParser_starGenType) Mock() *MoqAddressParser_starGenType_mock { return m.Moq }

func (m *MoqAddressParser_starGenType_mock) Parse(address string) (result1 *mail.Address, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqAddressParser_starGenType_Parse_params{
		Address: address,
	}
	var results *MoqAddressParser_starGenType_Parse_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Parse {
		paramsKey := m.Moq.ParamsKey_Parse(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Parse(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Parse(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Parse(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(address)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(address)
	}
	return
}

func (m *MoqAddressParser_starGenType_mock) ParseList(list string) (result1 []*mail.Address, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqAddressParser_starGenType_ParseList_params{
		List: list,
	}
	var results *MoqAddressParser_starGenType_ParseList_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ParseList {
		paramsKey := m.Moq.ParamsKey_ParseList(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ParseList(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ParseList(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ParseList(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(list)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(list)
	}
	return
}

// OnCall returns the recorder implementation of the AddressParser_starGenType
// type
func (m *MoqAddressParser_starGenType) OnCall() *MoqAddressParser_starGenType_recorder {
	return &MoqAddressParser_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqAddressParser_starGenType_recorder) Parse(address string) *MoqAddressParser_starGenType_Parse_fnRecorder {
	return &MoqAddressParser_starGenType_Parse_fnRecorder{
		Params: MoqAddressParser_starGenType_Parse_params{
			Address: address,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqAddressParser_starGenType_Parse_fnRecorder) Any() *MoqAddressParser_starGenType_Parse_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Parse(r.Params))
		return nil
	}
	return &MoqAddressParser_starGenType_Parse_anyParams{Recorder: r}
}

func (a *MoqAddressParser_starGenType_Parse_anyParams) Address() *MoqAddressParser_starGenType_Parse_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqAddressParser_starGenType_Parse_fnRecorder) Seq() *MoqAddressParser_starGenType_Parse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Parse(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqAddressParser_starGenType_Parse_fnRecorder) NoSeq() *MoqAddressParser_starGenType_Parse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Parse(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqAddressParser_starGenType_Parse_fnRecorder) ReturnResults(result1 *mail.Address, result2 error) *MoqAddressParser_starGenType_Parse_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *mail.Address
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqAddressParser_starGenType_Parse_doFn
		DoReturnFn MoqAddressParser_starGenType_Parse_doReturnFn
	}{
		Values: &struct {
			Result1 *mail.Address
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqAddressParser_starGenType_Parse_fnRecorder) AndDo(fn MoqAddressParser_starGenType_Parse_doFn) *MoqAddressParser_starGenType_Parse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqAddressParser_starGenType_Parse_fnRecorder) DoReturnResults(fn MoqAddressParser_starGenType_Parse_doReturnFn) *MoqAddressParser_starGenType_Parse_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *mail.Address
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqAddressParser_starGenType_Parse_doFn
		DoReturnFn MoqAddressParser_starGenType_Parse_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqAddressParser_starGenType_Parse_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqAddressParser_starGenType_Parse_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Parse {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqAddressParser_starGenType_Parse_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqAddressParser_starGenType_Parse_paramsKey]*MoqAddressParser_starGenType_Parse_results{},
		}
		r.Moq.ResultsByParams_Parse = append(r.Moq.ResultsByParams_Parse, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Parse) {
			copy(r.Moq.ResultsByParams_Parse[insertAt+1:], r.Moq.ResultsByParams_Parse[insertAt:0])
			r.Moq.ResultsByParams_Parse[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Parse(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqAddressParser_starGenType_Parse_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqAddressParser_starGenType_Parse_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqAddressParser_starGenType_Parse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *mail.Address
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqAddressParser_starGenType_Parse_doFn
				DoReturnFn MoqAddressParser_starGenType_Parse_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqAddressParser_starGenType) PrettyParams_Parse(params MoqAddressParser_starGenType_Parse_params) string {
	return fmt.Sprintf("Parse(%#v)", params.Address)
}

func (m *MoqAddressParser_starGenType) ParamsKey_Parse(params MoqAddressParser_starGenType_Parse_params, anyParams uint64) MoqAddressParser_starGenType_Parse_paramsKey {
	m.Scene.T.Helper()
	var addressUsed string
	var addressUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Parse.Address == moq.ParamIndexByValue {
			addressUsed = params.Address
		} else {
			addressUsedHash = hash.DeepHash(params.Address)
		}
	}
	return MoqAddressParser_starGenType_Parse_paramsKey{
		Params: struct{ Address string }{
			Address: addressUsed,
		},
		Hashes: struct{ Address hash.Hash }{
			Address: addressUsedHash,
		},
	}
}

func (m *MoqAddressParser_starGenType_recorder) ParseList(list string) *MoqAddressParser_starGenType_ParseList_fnRecorder {
	return &MoqAddressParser_starGenType_ParseList_fnRecorder{
		Params: MoqAddressParser_starGenType_ParseList_params{
			List: list,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqAddressParser_starGenType_ParseList_fnRecorder) Any() *MoqAddressParser_starGenType_ParseList_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ParseList(r.Params))
		return nil
	}
	return &MoqAddressParser_starGenType_ParseList_anyParams{Recorder: r}
}

func (a *MoqAddressParser_starGenType_ParseList_anyParams) List() *MoqAddressParser_starGenType_ParseList_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqAddressParser_starGenType_ParseList_fnRecorder) Seq() *MoqAddressParser_starGenType_ParseList_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ParseList(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqAddressParser_starGenType_ParseList_fnRecorder) NoSeq() *MoqAddressParser_starGenType_ParseList_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ParseList(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqAddressParser_starGenType_ParseList_fnRecorder) ReturnResults(result1 []*mail.Address, result2 error) *MoqAddressParser_starGenType_ParseList_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []*mail.Address
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqAddressParser_starGenType_ParseList_doFn
		DoReturnFn MoqAddressParser_starGenType_ParseList_doReturnFn
	}{
		Values: &struct {
			Result1 []*mail.Address
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqAddressParser_starGenType_ParseList_fnRecorder) AndDo(fn MoqAddressParser_starGenType_ParseList_doFn) *MoqAddressParser_starGenType_ParseList_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqAddressParser_starGenType_ParseList_fnRecorder) DoReturnResults(fn MoqAddressParser_starGenType_ParseList_doReturnFn) *MoqAddressParser_starGenType_ParseList_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []*mail.Address
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqAddressParser_starGenType_ParseList_doFn
		DoReturnFn MoqAddressParser_starGenType_ParseList_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqAddressParser_starGenType_ParseList_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqAddressParser_starGenType_ParseList_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ParseList {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqAddressParser_starGenType_ParseList_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqAddressParser_starGenType_ParseList_paramsKey]*MoqAddressParser_starGenType_ParseList_results{},
		}
		r.Moq.ResultsByParams_ParseList = append(r.Moq.ResultsByParams_ParseList, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ParseList) {
			copy(r.Moq.ResultsByParams_ParseList[insertAt+1:], r.Moq.ResultsByParams_ParseList[insertAt:0])
			r.Moq.ResultsByParams_ParseList[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ParseList(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqAddressParser_starGenType_ParseList_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqAddressParser_starGenType_ParseList_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqAddressParser_starGenType_ParseList_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []*mail.Address
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqAddressParser_starGenType_ParseList_doFn
				DoReturnFn MoqAddressParser_starGenType_ParseList_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqAddressParser_starGenType) PrettyParams_ParseList(params MoqAddressParser_starGenType_ParseList_params) string {
	return fmt.Sprintf("ParseList(%#v)", params.List)
}

func (m *MoqAddressParser_starGenType) ParamsKey_ParseList(params MoqAddressParser_starGenType_ParseList_params, anyParams uint64) MoqAddressParser_starGenType_ParseList_paramsKey {
	m.Scene.T.Helper()
	var listUsed string
	var listUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ParseList.List == moq.ParamIndexByValue {
			listUsed = params.List
		} else {
			listUsedHash = hash.DeepHash(params.List)
		}
	}
	return MoqAddressParser_starGenType_ParseList_paramsKey{
		Params: struct{ List string }{
			List: listUsed,
		},
		Hashes: struct{ List hash.Hash }{
			List: listUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqAddressParser_starGenType) Reset() {
	m.ResultsByParams_Parse = nil
	m.ResultsByParams_ParseList = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqAddressParser_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Parse {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Parse(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ParseList {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ParseList(results.Params))
			}
		}
	}
}
