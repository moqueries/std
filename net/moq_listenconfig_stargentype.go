// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package net

import (
	"context"
	"fmt"
	"math/bits"
	"net"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that net.ListenConfig_starGenType is
// mocked completely
var _ ListenConfig_starGenType = (*MoqListenConfig_starGenType_mock)(nil)

// ListenConfig_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type ListenConfig_starGenType interface {
	Listen(ctx context.Context, network, address string) (net.Listener, error)
	ListenPacket(ctx context.Context, network, address string) (net.PacketConn, error)
}

// MoqListenConfig_starGenType holds the state of a moq of the
// ListenConfig_starGenType type
type MoqListenConfig_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqListenConfig_starGenType_mock

	ResultsByParams_Listen       []MoqListenConfig_starGenType_Listen_resultsByParams
	ResultsByParams_ListenPacket []MoqListenConfig_starGenType_ListenPacket_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Listen struct {
				Ctx     moq.ParamIndexing
				Network moq.ParamIndexing
				Address moq.ParamIndexing
			}
			ListenPacket struct {
				Ctx     moq.ParamIndexing
				Network moq.ParamIndexing
				Address moq.ParamIndexing
			}
		}
	}
	// MoqListenConfig_starGenType_mock isolates the mock interface of the
}

// ListenConfig_starGenType type
type MoqListenConfig_starGenType_mock struct {
	Moq *MoqListenConfig_starGenType
}

// MoqListenConfig_starGenType_recorder isolates the recorder interface of the
// ListenConfig_starGenType type
type MoqListenConfig_starGenType_recorder struct {
	Moq *MoqListenConfig_starGenType
}

// MoqListenConfig_starGenType_Listen_params holds the params of the
// ListenConfig_starGenType type
type MoqListenConfig_starGenType_Listen_params struct {
	Ctx              context.Context
	Network, Address string
}

// MoqListenConfig_starGenType_Listen_paramsKey holds the map key params of the
// ListenConfig_starGenType type
type MoqListenConfig_starGenType_Listen_paramsKey struct {
	Params struct {
		Ctx              context.Context
		Network, Address string
	}
	Hashes struct {
		Ctx              hash.Hash
		Network, Address hash.Hash
	}
}

// MoqListenConfig_starGenType_Listen_resultsByParams contains the results for
// a given set of parameters for the ListenConfig_starGenType type
type MoqListenConfig_starGenType_Listen_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqListenConfig_starGenType_Listen_paramsKey]*MoqListenConfig_starGenType_Listen_results
}

// MoqListenConfig_starGenType_Listen_doFn defines the type of function needed
// when calling AndDo for the ListenConfig_starGenType type
type MoqListenConfig_starGenType_Listen_doFn func(ctx context.Context, network, address string)

// MoqListenConfig_starGenType_Listen_doReturnFn defines the type of function
// needed when calling DoReturnResults for the ListenConfig_starGenType type
type MoqListenConfig_starGenType_Listen_doReturnFn func(ctx context.Context, network, address string) (net.Listener, error)

// MoqListenConfig_starGenType_Listen_results holds the results of the
// ListenConfig_starGenType type
type MoqListenConfig_starGenType_Listen_results struct {
	Params  MoqListenConfig_starGenType_Listen_params
	Results []struct {
		Values *struct {
			Result1 net.Listener
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqListenConfig_starGenType_Listen_doFn
		DoReturnFn MoqListenConfig_starGenType_Listen_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqListenConfig_starGenType_Listen_fnRecorder routes recorded function calls
// to the MoqListenConfig_starGenType moq
type MoqListenConfig_starGenType_Listen_fnRecorder struct {
	Params    MoqListenConfig_starGenType_Listen_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqListenConfig_starGenType_Listen_results
	Moq       *MoqListenConfig_starGenType
}

// MoqListenConfig_starGenType_Listen_anyParams isolates the any params
// functions of the ListenConfig_starGenType type
type MoqListenConfig_starGenType_Listen_anyParams struct {
	Recorder *MoqListenConfig_starGenType_Listen_fnRecorder
}

// MoqListenConfig_starGenType_ListenPacket_params holds the params of the
// ListenConfig_starGenType type
type MoqListenConfig_starGenType_ListenPacket_params struct {
	Ctx              context.Context
	Network, Address string
}

// MoqListenConfig_starGenType_ListenPacket_paramsKey holds the map key params
// of the ListenConfig_starGenType type
type MoqListenConfig_starGenType_ListenPacket_paramsKey struct {
	Params struct {
		Ctx              context.Context
		Network, Address string
	}
	Hashes struct {
		Ctx              hash.Hash
		Network, Address hash.Hash
	}
}

// MoqListenConfig_starGenType_ListenPacket_resultsByParams contains the
// results for a given set of parameters for the ListenConfig_starGenType type
type MoqListenConfig_starGenType_ListenPacket_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqListenConfig_starGenType_ListenPacket_paramsKey]*MoqListenConfig_starGenType_ListenPacket_results
}

// MoqListenConfig_starGenType_ListenPacket_doFn defines the type of function
// needed when calling AndDo for the ListenConfig_starGenType type
type MoqListenConfig_starGenType_ListenPacket_doFn func(ctx context.Context, network, address string)

// MoqListenConfig_starGenType_ListenPacket_doReturnFn defines the type of
// function needed when calling DoReturnResults for the
// ListenConfig_starGenType type
type MoqListenConfig_starGenType_ListenPacket_doReturnFn func(ctx context.Context, network, address string) (net.PacketConn, error)

// MoqListenConfig_starGenType_ListenPacket_results holds the results of the
// ListenConfig_starGenType type
type MoqListenConfig_starGenType_ListenPacket_results struct {
	Params  MoqListenConfig_starGenType_ListenPacket_params
	Results []struct {
		Values *struct {
			Result1 net.PacketConn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqListenConfig_starGenType_ListenPacket_doFn
		DoReturnFn MoqListenConfig_starGenType_ListenPacket_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqListenConfig_starGenType_ListenPacket_fnRecorder routes recorded function
// calls to the MoqListenConfig_starGenType moq
type MoqListenConfig_starGenType_ListenPacket_fnRecorder struct {
	Params    MoqListenConfig_starGenType_ListenPacket_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqListenConfig_starGenType_ListenPacket_results
	Moq       *MoqListenConfig_starGenType
}

// MoqListenConfig_starGenType_ListenPacket_anyParams isolates the any params
// functions of the ListenConfig_starGenType type
type MoqListenConfig_starGenType_ListenPacket_anyParams struct {
	Recorder *MoqListenConfig_starGenType_ListenPacket_fnRecorder
}

// NewMoqListenConfig_starGenType creates a new moq of the
// ListenConfig_starGenType type
func NewMoqListenConfig_starGenType(scene *moq.Scene, config *moq.Config) *MoqListenConfig_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqListenConfig_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqListenConfig_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Listen struct {
					Ctx     moq.ParamIndexing
					Network moq.ParamIndexing
					Address moq.ParamIndexing
				}
				ListenPacket struct {
					Ctx     moq.ParamIndexing
					Network moq.ParamIndexing
					Address moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Listen struct {
				Ctx     moq.ParamIndexing
				Network moq.ParamIndexing
				Address moq.ParamIndexing
			}
			ListenPacket struct {
				Ctx     moq.ParamIndexing
				Network moq.ParamIndexing
				Address moq.ParamIndexing
			}
		}{
			Listen: struct {
				Ctx     moq.ParamIndexing
				Network moq.ParamIndexing
				Address moq.ParamIndexing
			}{
				Ctx:     moq.ParamIndexByHash,
				Network: moq.ParamIndexByValue,
				Address: moq.ParamIndexByValue,
			},
			ListenPacket: struct {
				Ctx     moq.ParamIndexing
				Network moq.ParamIndexing
				Address moq.ParamIndexing
			}{
				Ctx:     moq.ParamIndexByHash,
				Network: moq.ParamIndexByValue,
				Address: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the ListenConfig_starGenType type
func (m *MoqListenConfig_starGenType) Mock() *MoqListenConfig_starGenType_mock { return m.Moq }

func (m *MoqListenConfig_starGenType_mock) Listen(ctx context.Context, network, address string) (result1 net.Listener, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqListenConfig_starGenType_Listen_params{
		Ctx:     ctx,
		Network: network,
		Address: address,
	}
	var results *MoqListenConfig_starGenType_Listen_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Listen {
		paramsKey := m.Moq.ParamsKey_Listen(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Listen(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Listen(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Listen(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, network, address)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(ctx, network, address)
	}
	return
}

func (m *MoqListenConfig_starGenType_mock) ListenPacket(ctx context.Context, network, address string) (result1 net.PacketConn, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqListenConfig_starGenType_ListenPacket_params{
		Ctx:     ctx,
		Network: network,
		Address: address,
	}
	var results *MoqListenConfig_starGenType_ListenPacket_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ListenPacket {
		paramsKey := m.Moq.ParamsKey_ListenPacket(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ListenPacket(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ListenPacket(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ListenPacket(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, network, address)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(ctx, network, address)
	}
	return
}

// OnCall returns the recorder implementation of the ListenConfig_starGenType
// type
func (m *MoqListenConfig_starGenType) OnCall() *MoqListenConfig_starGenType_recorder {
	return &MoqListenConfig_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqListenConfig_starGenType_recorder) Listen(ctx context.Context, network, address string) *MoqListenConfig_starGenType_Listen_fnRecorder {
	return &MoqListenConfig_starGenType_Listen_fnRecorder{
		Params: MoqListenConfig_starGenType_Listen_params{
			Ctx:     ctx,
			Network: network,
			Address: address,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqListenConfig_starGenType_Listen_fnRecorder) Any() *MoqListenConfig_starGenType_Listen_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Listen(r.Params))
		return nil
	}
	return &MoqListenConfig_starGenType_Listen_anyParams{Recorder: r}
}

func (a *MoqListenConfig_starGenType_Listen_anyParams) Ctx() *MoqListenConfig_starGenType_Listen_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqListenConfig_starGenType_Listen_anyParams) Network() *MoqListenConfig_starGenType_Listen_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqListenConfig_starGenType_Listen_anyParams) Address() *MoqListenConfig_starGenType_Listen_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqListenConfig_starGenType_Listen_fnRecorder) Seq() *MoqListenConfig_starGenType_Listen_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Listen(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqListenConfig_starGenType_Listen_fnRecorder) NoSeq() *MoqListenConfig_starGenType_Listen_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Listen(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqListenConfig_starGenType_Listen_fnRecorder) ReturnResults(result1 net.Listener, result2 error) *MoqListenConfig_starGenType_Listen_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.Listener
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqListenConfig_starGenType_Listen_doFn
		DoReturnFn MoqListenConfig_starGenType_Listen_doReturnFn
	}{
		Values: &struct {
			Result1 net.Listener
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqListenConfig_starGenType_Listen_fnRecorder) AndDo(fn MoqListenConfig_starGenType_Listen_doFn) *MoqListenConfig_starGenType_Listen_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqListenConfig_starGenType_Listen_fnRecorder) DoReturnResults(fn MoqListenConfig_starGenType_Listen_doReturnFn) *MoqListenConfig_starGenType_Listen_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.Listener
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqListenConfig_starGenType_Listen_doFn
		DoReturnFn MoqListenConfig_starGenType_Listen_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqListenConfig_starGenType_Listen_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqListenConfig_starGenType_Listen_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Listen {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqListenConfig_starGenType_Listen_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqListenConfig_starGenType_Listen_paramsKey]*MoqListenConfig_starGenType_Listen_results{},
		}
		r.Moq.ResultsByParams_Listen = append(r.Moq.ResultsByParams_Listen, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Listen) {
			copy(r.Moq.ResultsByParams_Listen[insertAt+1:], r.Moq.ResultsByParams_Listen[insertAt:0])
			r.Moq.ResultsByParams_Listen[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Listen(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqListenConfig_starGenType_Listen_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqListenConfig_starGenType_Listen_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqListenConfig_starGenType_Listen_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 net.Listener
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqListenConfig_starGenType_Listen_doFn
				DoReturnFn MoqListenConfig_starGenType_Listen_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqListenConfig_starGenType) PrettyParams_Listen(params MoqListenConfig_starGenType_Listen_params) string {
	return fmt.Sprintf("Listen(%#v, %#v, %#v)", params.Ctx, params.Network, params.Address)
}

func (m *MoqListenConfig_starGenType) ParamsKey_Listen(params MoqListenConfig_starGenType_Listen_params, anyParams uint64) MoqListenConfig_starGenType_Listen_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Listen.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var networkUsed string
	var networkUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Listen.Network == moq.ParamIndexByValue {
			networkUsed = params.Network
		} else {
			networkUsedHash = hash.DeepHash(params.Network)
		}
	}
	var addressUsed string
	var addressUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Listen.Address == moq.ParamIndexByValue {
			addressUsed = params.Address
		} else {
			addressUsedHash = hash.DeepHash(params.Address)
		}
	}
	return MoqListenConfig_starGenType_Listen_paramsKey{
		Params: struct {
			Ctx              context.Context
			Network, Address string
		}{
			Ctx:     ctxUsed,
			Network: networkUsed,
			Address: addressUsed,
		},
		Hashes: struct {
			Ctx              hash.Hash
			Network, Address hash.Hash
		}{
			Ctx:     ctxUsedHash,
			Network: networkUsedHash,
			Address: addressUsedHash,
		},
	}
}

func (m *MoqListenConfig_starGenType_recorder) ListenPacket(ctx context.Context, network, address string) *MoqListenConfig_starGenType_ListenPacket_fnRecorder {
	return &MoqListenConfig_starGenType_ListenPacket_fnRecorder{
		Params: MoqListenConfig_starGenType_ListenPacket_params{
			Ctx:     ctx,
			Network: network,
			Address: address,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqListenConfig_starGenType_ListenPacket_fnRecorder) Any() *MoqListenConfig_starGenType_ListenPacket_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ListenPacket(r.Params))
		return nil
	}
	return &MoqListenConfig_starGenType_ListenPacket_anyParams{Recorder: r}
}

func (a *MoqListenConfig_starGenType_ListenPacket_anyParams) Ctx() *MoqListenConfig_starGenType_ListenPacket_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqListenConfig_starGenType_ListenPacket_anyParams) Network() *MoqListenConfig_starGenType_ListenPacket_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqListenConfig_starGenType_ListenPacket_anyParams) Address() *MoqListenConfig_starGenType_ListenPacket_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqListenConfig_starGenType_ListenPacket_fnRecorder) Seq() *MoqListenConfig_starGenType_ListenPacket_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ListenPacket(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqListenConfig_starGenType_ListenPacket_fnRecorder) NoSeq() *MoqListenConfig_starGenType_ListenPacket_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ListenPacket(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqListenConfig_starGenType_ListenPacket_fnRecorder) ReturnResults(result1 net.PacketConn, result2 error) *MoqListenConfig_starGenType_ListenPacket_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.PacketConn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqListenConfig_starGenType_ListenPacket_doFn
		DoReturnFn MoqListenConfig_starGenType_ListenPacket_doReturnFn
	}{
		Values: &struct {
			Result1 net.PacketConn
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqListenConfig_starGenType_ListenPacket_fnRecorder) AndDo(fn MoqListenConfig_starGenType_ListenPacket_doFn) *MoqListenConfig_starGenType_ListenPacket_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqListenConfig_starGenType_ListenPacket_fnRecorder) DoReturnResults(fn MoqListenConfig_starGenType_ListenPacket_doReturnFn) *MoqListenConfig_starGenType_ListenPacket_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.PacketConn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqListenConfig_starGenType_ListenPacket_doFn
		DoReturnFn MoqListenConfig_starGenType_ListenPacket_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqListenConfig_starGenType_ListenPacket_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqListenConfig_starGenType_ListenPacket_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ListenPacket {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqListenConfig_starGenType_ListenPacket_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqListenConfig_starGenType_ListenPacket_paramsKey]*MoqListenConfig_starGenType_ListenPacket_results{},
		}
		r.Moq.ResultsByParams_ListenPacket = append(r.Moq.ResultsByParams_ListenPacket, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ListenPacket) {
			copy(r.Moq.ResultsByParams_ListenPacket[insertAt+1:], r.Moq.ResultsByParams_ListenPacket[insertAt:0])
			r.Moq.ResultsByParams_ListenPacket[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ListenPacket(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqListenConfig_starGenType_ListenPacket_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqListenConfig_starGenType_ListenPacket_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqListenConfig_starGenType_ListenPacket_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 net.PacketConn
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqListenConfig_starGenType_ListenPacket_doFn
				DoReturnFn MoqListenConfig_starGenType_ListenPacket_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqListenConfig_starGenType) PrettyParams_ListenPacket(params MoqListenConfig_starGenType_ListenPacket_params) string {
	return fmt.Sprintf("ListenPacket(%#v, %#v, %#v)", params.Ctx, params.Network, params.Address)
}

func (m *MoqListenConfig_starGenType) ParamsKey_ListenPacket(params MoqListenConfig_starGenType_ListenPacket_params, anyParams uint64) MoqListenConfig_starGenType_ListenPacket_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ListenPacket.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var networkUsed string
	var networkUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.ListenPacket.Network == moq.ParamIndexByValue {
			networkUsed = params.Network
		} else {
			networkUsedHash = hash.DeepHash(params.Network)
		}
	}
	var addressUsed string
	var addressUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.ListenPacket.Address == moq.ParamIndexByValue {
			addressUsed = params.Address
		} else {
			addressUsedHash = hash.DeepHash(params.Address)
		}
	}
	return MoqListenConfig_starGenType_ListenPacket_paramsKey{
		Params: struct {
			Ctx              context.Context
			Network, Address string
		}{
			Ctx:     ctxUsed,
			Network: networkUsed,
			Address: addressUsed,
		},
		Hashes: struct {
			Ctx              hash.Hash
			Network, Address hash.Hash
		}{
			Ctx:     ctxUsedHash,
			Network: networkUsedHash,
			Address: addressUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqListenConfig_starGenType) Reset() {
	m.ResultsByParams_Listen = nil
	m.ResultsByParams_ListenPacket = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqListenConfig_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Listen {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Listen(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ListenPacket {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ListenPacket(results.Params))
			}
		}
	}
}
