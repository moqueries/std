// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package net

import (
	"fmt"
	"math/bits"
	"net"
	"os"
	"sync/atomic"
	"syscall"
	"time"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that net.TCPListener_starGenType is
// mocked completely
var _ TCPListener_starGenType = (*MoqTCPListener_starGenType_mock)(nil)

// TCPListener_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type TCPListener_starGenType interface {
	SyscallConn() (syscall.RawConn, error)
	AcceptTCP() (*net.TCPConn, error)
	Accept() (net.Conn, error)
	Close() error
	Addr() net.Addr
	SetDeadline(t time.Time) error
	File() (f *os.File, err error)
}

// MoqTCPListener_starGenType holds the state of a moq of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqTCPListener_starGenType_mock

	ResultsByParams_SyscallConn []MoqTCPListener_starGenType_SyscallConn_resultsByParams
	ResultsByParams_AcceptTCP   []MoqTCPListener_starGenType_AcceptTCP_resultsByParams
	ResultsByParams_Accept      []MoqTCPListener_starGenType_Accept_resultsByParams
	ResultsByParams_Close       []MoqTCPListener_starGenType_Close_resultsByParams
	ResultsByParams_Addr        []MoqTCPListener_starGenType_Addr_resultsByParams
	ResultsByParams_SetDeadline []MoqTCPListener_starGenType_SetDeadline_resultsByParams
	ResultsByParams_File        []MoqTCPListener_starGenType_File_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			SyscallConn struct{}
			AcceptTCP   struct{}
			Accept      struct{}
			Close       struct{}
			Addr        struct{}
			SetDeadline struct {
				T moq.ParamIndexing
			}
			File struct{}
		}
	}
}

// MoqTCPListener_starGenType_mock isolates the mock interface of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_mock struct {
	Moq *MoqTCPListener_starGenType
}

// MoqTCPListener_starGenType_recorder isolates the recorder interface of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_recorder struct {
	Moq *MoqTCPListener_starGenType
}

// MoqTCPListener_starGenType_SyscallConn_params holds the params of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_SyscallConn_params struct{}

// MoqTCPListener_starGenType_SyscallConn_paramsKey holds the map key params of
// the TCPListener_starGenType type
type MoqTCPListener_starGenType_SyscallConn_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTCPListener_starGenType_SyscallConn_resultsByParams contains the results
// for a given set of parameters for the TCPListener_starGenType type
type MoqTCPListener_starGenType_SyscallConn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTCPListener_starGenType_SyscallConn_paramsKey]*MoqTCPListener_starGenType_SyscallConn_results
}

// MoqTCPListener_starGenType_SyscallConn_doFn defines the type of function
// needed when calling AndDo for the TCPListener_starGenType type
type MoqTCPListener_starGenType_SyscallConn_doFn func()

// MoqTCPListener_starGenType_SyscallConn_doReturnFn defines the type of
// function needed when calling DoReturnResults for the TCPListener_starGenType
// type
type MoqTCPListener_starGenType_SyscallConn_doReturnFn func() (syscall.RawConn, error)

// MoqTCPListener_starGenType_SyscallConn_results holds the results of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_SyscallConn_results struct {
	Params  MoqTCPListener_starGenType_SyscallConn_params
	Results []struct {
		Values *struct {
			Result1 syscall.RawConn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_SyscallConn_doFn
		DoReturnFn MoqTCPListener_starGenType_SyscallConn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTCPListener_starGenType_SyscallConn_fnRecorder routes recorded function
// calls to the MoqTCPListener_starGenType moq
type MoqTCPListener_starGenType_SyscallConn_fnRecorder struct {
	Params    MoqTCPListener_starGenType_SyscallConn_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTCPListener_starGenType_SyscallConn_results
	Moq       *MoqTCPListener_starGenType
}

// MoqTCPListener_starGenType_SyscallConn_anyParams isolates the any params
// functions of the TCPListener_starGenType type
type MoqTCPListener_starGenType_SyscallConn_anyParams struct {
	Recorder *MoqTCPListener_starGenType_SyscallConn_fnRecorder
}

// MoqTCPListener_starGenType_AcceptTCP_params holds the params of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_AcceptTCP_params struct{}

// MoqTCPListener_starGenType_AcceptTCP_paramsKey holds the map key params of
// the TCPListener_starGenType type
type MoqTCPListener_starGenType_AcceptTCP_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTCPListener_starGenType_AcceptTCP_resultsByParams contains the results
// for a given set of parameters for the TCPListener_starGenType type
type MoqTCPListener_starGenType_AcceptTCP_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTCPListener_starGenType_AcceptTCP_paramsKey]*MoqTCPListener_starGenType_AcceptTCP_results
}

// MoqTCPListener_starGenType_AcceptTCP_doFn defines the type of function
// needed when calling AndDo for the TCPListener_starGenType type
type MoqTCPListener_starGenType_AcceptTCP_doFn func()

// MoqTCPListener_starGenType_AcceptTCP_doReturnFn defines the type of function
// needed when calling DoReturnResults for the TCPListener_starGenType type
type MoqTCPListener_starGenType_AcceptTCP_doReturnFn func() (*net.TCPConn, error)

// MoqTCPListener_starGenType_AcceptTCP_results holds the results of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_AcceptTCP_results struct {
	Params  MoqTCPListener_starGenType_AcceptTCP_params
	Results []struct {
		Values *struct {
			Result1 *net.TCPConn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_AcceptTCP_doFn
		DoReturnFn MoqTCPListener_starGenType_AcceptTCP_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTCPListener_starGenType_AcceptTCP_fnRecorder routes recorded function
// calls to the MoqTCPListener_starGenType moq
type MoqTCPListener_starGenType_AcceptTCP_fnRecorder struct {
	Params    MoqTCPListener_starGenType_AcceptTCP_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTCPListener_starGenType_AcceptTCP_results
	Moq       *MoqTCPListener_starGenType
}

// MoqTCPListener_starGenType_AcceptTCP_anyParams isolates the any params
// functions of the TCPListener_starGenType type
type MoqTCPListener_starGenType_AcceptTCP_anyParams struct {
	Recorder *MoqTCPListener_starGenType_AcceptTCP_fnRecorder
}

// MoqTCPListener_starGenType_Accept_params holds the params of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_Accept_params struct{}

// MoqTCPListener_starGenType_Accept_paramsKey holds the map key params of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_Accept_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTCPListener_starGenType_Accept_resultsByParams contains the results for a
// given set of parameters for the TCPListener_starGenType type
type MoqTCPListener_starGenType_Accept_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTCPListener_starGenType_Accept_paramsKey]*MoqTCPListener_starGenType_Accept_results
}

// MoqTCPListener_starGenType_Accept_doFn defines the type of function needed
// when calling AndDo for the TCPListener_starGenType type
type MoqTCPListener_starGenType_Accept_doFn func()

// MoqTCPListener_starGenType_Accept_doReturnFn defines the type of function
// needed when calling DoReturnResults for the TCPListener_starGenType type
type MoqTCPListener_starGenType_Accept_doReturnFn func() (net.Conn, error)

// MoqTCPListener_starGenType_Accept_results holds the results of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_Accept_results struct {
	Params  MoqTCPListener_starGenType_Accept_params
	Results []struct {
		Values *struct {
			Result1 net.Conn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_Accept_doFn
		DoReturnFn MoqTCPListener_starGenType_Accept_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTCPListener_starGenType_Accept_fnRecorder routes recorded function calls
// to the MoqTCPListener_starGenType moq
type MoqTCPListener_starGenType_Accept_fnRecorder struct {
	Params    MoqTCPListener_starGenType_Accept_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTCPListener_starGenType_Accept_results
	Moq       *MoqTCPListener_starGenType
}

// MoqTCPListener_starGenType_Accept_anyParams isolates the any params
// functions of the TCPListener_starGenType type
type MoqTCPListener_starGenType_Accept_anyParams struct {
	Recorder *MoqTCPListener_starGenType_Accept_fnRecorder
}

// MoqTCPListener_starGenType_Close_params holds the params of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_Close_params struct{}

// MoqTCPListener_starGenType_Close_paramsKey holds the map key params of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTCPListener_starGenType_Close_resultsByParams contains the results for a
// given set of parameters for the TCPListener_starGenType type
type MoqTCPListener_starGenType_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTCPListener_starGenType_Close_paramsKey]*MoqTCPListener_starGenType_Close_results
}

// MoqTCPListener_starGenType_Close_doFn defines the type of function needed
// when calling AndDo for the TCPListener_starGenType type
type MoqTCPListener_starGenType_Close_doFn func()

// MoqTCPListener_starGenType_Close_doReturnFn defines the type of function
// needed when calling DoReturnResults for the TCPListener_starGenType type
type MoqTCPListener_starGenType_Close_doReturnFn func() error

// MoqTCPListener_starGenType_Close_results holds the results of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_Close_results struct {
	Params  MoqTCPListener_starGenType_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_Close_doFn
		DoReturnFn MoqTCPListener_starGenType_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTCPListener_starGenType_Close_fnRecorder routes recorded function calls
// to the MoqTCPListener_starGenType moq
type MoqTCPListener_starGenType_Close_fnRecorder struct {
	Params    MoqTCPListener_starGenType_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTCPListener_starGenType_Close_results
	Moq       *MoqTCPListener_starGenType
}

// MoqTCPListener_starGenType_Close_anyParams isolates the any params functions
// of the TCPListener_starGenType type
type MoqTCPListener_starGenType_Close_anyParams struct {
	Recorder *MoqTCPListener_starGenType_Close_fnRecorder
}

// MoqTCPListener_starGenType_Addr_params holds the params of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_Addr_params struct{}

// MoqTCPListener_starGenType_Addr_paramsKey holds the map key params of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_Addr_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTCPListener_starGenType_Addr_resultsByParams contains the results for a
// given set of parameters for the TCPListener_starGenType type
type MoqTCPListener_starGenType_Addr_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTCPListener_starGenType_Addr_paramsKey]*MoqTCPListener_starGenType_Addr_results
}

// MoqTCPListener_starGenType_Addr_doFn defines the type of function needed
// when calling AndDo for the TCPListener_starGenType type
type MoqTCPListener_starGenType_Addr_doFn func()

// MoqTCPListener_starGenType_Addr_doReturnFn defines the type of function
// needed when calling DoReturnResults for the TCPListener_starGenType type
type MoqTCPListener_starGenType_Addr_doReturnFn func() net.Addr

// MoqTCPListener_starGenType_Addr_results holds the results of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_Addr_results struct {
	Params  MoqTCPListener_starGenType_Addr_params
	Results []struct {
		Values *struct {
			Result1 net.Addr
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_Addr_doFn
		DoReturnFn MoqTCPListener_starGenType_Addr_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTCPListener_starGenType_Addr_fnRecorder routes recorded function calls to
// the MoqTCPListener_starGenType moq
type MoqTCPListener_starGenType_Addr_fnRecorder struct {
	Params    MoqTCPListener_starGenType_Addr_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTCPListener_starGenType_Addr_results
	Moq       *MoqTCPListener_starGenType
}

// MoqTCPListener_starGenType_Addr_anyParams isolates the any params functions
// of the TCPListener_starGenType type
type MoqTCPListener_starGenType_Addr_anyParams struct {
	Recorder *MoqTCPListener_starGenType_Addr_fnRecorder
}

// MoqTCPListener_starGenType_SetDeadline_params holds the params of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_SetDeadline_params struct{ T time.Time }

// MoqTCPListener_starGenType_SetDeadline_paramsKey holds the map key params of
// the TCPListener_starGenType type
type MoqTCPListener_starGenType_SetDeadline_paramsKey struct {
	Params struct{ T time.Time }
	Hashes struct{ T hash.Hash }
}

// MoqTCPListener_starGenType_SetDeadline_resultsByParams contains the results
// for a given set of parameters for the TCPListener_starGenType type
type MoqTCPListener_starGenType_SetDeadline_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTCPListener_starGenType_SetDeadline_paramsKey]*MoqTCPListener_starGenType_SetDeadline_results
}

// MoqTCPListener_starGenType_SetDeadline_doFn defines the type of function
// needed when calling AndDo for the TCPListener_starGenType type
type MoqTCPListener_starGenType_SetDeadline_doFn func(t time.Time)

// MoqTCPListener_starGenType_SetDeadline_doReturnFn defines the type of
// function needed when calling DoReturnResults for the TCPListener_starGenType
// type
type MoqTCPListener_starGenType_SetDeadline_doReturnFn func(t time.Time) error

// MoqTCPListener_starGenType_SetDeadline_results holds the results of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_SetDeadline_results struct {
	Params  MoqTCPListener_starGenType_SetDeadline_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_SetDeadline_doFn
		DoReturnFn MoqTCPListener_starGenType_SetDeadline_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTCPListener_starGenType_SetDeadline_fnRecorder routes recorded function
// calls to the MoqTCPListener_starGenType moq
type MoqTCPListener_starGenType_SetDeadline_fnRecorder struct {
	Params    MoqTCPListener_starGenType_SetDeadline_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTCPListener_starGenType_SetDeadline_results
	Moq       *MoqTCPListener_starGenType
}

// MoqTCPListener_starGenType_SetDeadline_anyParams isolates the any params
// functions of the TCPListener_starGenType type
type MoqTCPListener_starGenType_SetDeadline_anyParams struct {
	Recorder *MoqTCPListener_starGenType_SetDeadline_fnRecorder
}

// MoqTCPListener_starGenType_File_params holds the params of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_File_params struct{}

// MoqTCPListener_starGenType_File_paramsKey holds the map key params of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_File_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTCPListener_starGenType_File_resultsByParams contains the results for a
// given set of parameters for the TCPListener_starGenType type
type MoqTCPListener_starGenType_File_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTCPListener_starGenType_File_paramsKey]*MoqTCPListener_starGenType_File_results
}

// MoqTCPListener_starGenType_File_doFn defines the type of function needed
// when calling AndDo for the TCPListener_starGenType type
type MoqTCPListener_starGenType_File_doFn func()

// MoqTCPListener_starGenType_File_doReturnFn defines the type of function
// needed when calling DoReturnResults for the TCPListener_starGenType type
type MoqTCPListener_starGenType_File_doReturnFn func() (f *os.File, err error)

// MoqTCPListener_starGenType_File_results holds the results of the
// TCPListener_starGenType type
type MoqTCPListener_starGenType_File_results struct {
	Params  MoqTCPListener_starGenType_File_params
	Results []struct {
		Values *struct {
			F   *os.File
			Err error
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_File_doFn
		DoReturnFn MoqTCPListener_starGenType_File_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTCPListener_starGenType_File_fnRecorder routes recorded function calls to
// the MoqTCPListener_starGenType moq
type MoqTCPListener_starGenType_File_fnRecorder struct {
	Params    MoqTCPListener_starGenType_File_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTCPListener_starGenType_File_results
	Moq       *MoqTCPListener_starGenType
}

// MoqTCPListener_starGenType_File_anyParams isolates the any params functions
// of the TCPListener_starGenType type
type MoqTCPListener_starGenType_File_anyParams struct {
	Recorder *MoqTCPListener_starGenType_File_fnRecorder
}

// NewMoqTCPListener_starGenType creates a new moq of the
// TCPListener_starGenType type
func NewMoqTCPListener_starGenType(scene *moq.Scene, config *moq.Config) *MoqTCPListener_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqTCPListener_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqTCPListener_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				SyscallConn struct{}
				AcceptTCP   struct{}
				Accept      struct{}
				Close       struct{}
				Addr        struct{}
				SetDeadline struct {
					T moq.ParamIndexing
				}
				File struct{}
			}
		}{ParameterIndexing: struct {
			SyscallConn struct{}
			AcceptTCP   struct{}
			Accept      struct{}
			Close       struct{}
			Addr        struct{}
			SetDeadline struct {
				T moq.ParamIndexing
			}
			File struct{}
		}{
			SyscallConn: struct{}{},
			AcceptTCP:   struct{}{},
			Accept:      struct{}{},
			Close:       struct{}{},
			Addr:        struct{}{},
			SetDeadline: struct {
				T moq.ParamIndexing
			}{
				T: moq.ParamIndexByHash,
			},
			File: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the TCPListener_starGenType type
func (m *MoqTCPListener_starGenType) Mock() *MoqTCPListener_starGenType_mock { return m.Moq }

func (m *MoqTCPListener_starGenType_mock) SyscallConn() (result1 syscall.RawConn, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqTCPListener_starGenType_SyscallConn_params{}
	var results *MoqTCPListener_starGenType_SyscallConn_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SyscallConn {
		paramsKey := m.Moq.ParamsKey_SyscallConn(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SyscallConn(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SyscallConn(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SyscallConn(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqTCPListener_starGenType_mock) AcceptTCP() (result1 *net.TCPConn, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqTCPListener_starGenType_AcceptTCP_params{}
	var results *MoqTCPListener_starGenType_AcceptTCP_results
	for _, resultsByParams := range m.Moq.ResultsByParams_AcceptTCP {
		paramsKey := m.Moq.ParamsKey_AcceptTCP(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_AcceptTCP(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_AcceptTCP(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_AcceptTCP(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqTCPListener_starGenType_mock) Accept() (result1 net.Conn, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqTCPListener_starGenType_Accept_params{}
	var results *MoqTCPListener_starGenType_Accept_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Accept {
		paramsKey := m.Moq.ParamsKey_Accept(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Accept(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Accept(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Accept(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqTCPListener_starGenType_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqTCPListener_starGenType_Close_params{}
	var results *MoqTCPListener_starGenType_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqTCPListener_starGenType_mock) Addr() (result1 net.Addr) {
	m.Moq.Scene.T.Helper()
	params := MoqTCPListener_starGenType_Addr_params{}
	var results *MoqTCPListener_starGenType_Addr_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Addr {
		paramsKey := m.Moq.ParamsKey_Addr(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Addr(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Addr(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Addr(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqTCPListener_starGenType_mock) SetDeadline(t time.Time) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqTCPListener_starGenType_SetDeadline_params{
		T: t,
	}
	var results *MoqTCPListener_starGenType_SetDeadline_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetDeadline {
		paramsKey := m.Moq.ParamsKey_SetDeadline(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetDeadline(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetDeadline(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetDeadline(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(t)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(t)
	}
	return
}

func (m *MoqTCPListener_starGenType_mock) File() (f *os.File, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqTCPListener_starGenType_File_params{}
	var results *MoqTCPListener_starGenType_File_results
	for _, resultsByParams := range m.Moq.ResultsByParams_File {
		paramsKey := m.Moq.ParamsKey_File(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_File(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_File(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_File(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		f = result.Values.F
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		f, err = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the TCPListener_starGenType
// type
func (m *MoqTCPListener_starGenType) OnCall() *MoqTCPListener_starGenType_recorder {
	return &MoqTCPListener_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqTCPListener_starGenType_recorder) SyscallConn() *MoqTCPListener_starGenType_SyscallConn_fnRecorder {
	return &MoqTCPListener_starGenType_SyscallConn_fnRecorder{
		Params:   MoqTCPListener_starGenType_SyscallConn_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTCPListener_starGenType_SyscallConn_fnRecorder) Any() *MoqTCPListener_starGenType_SyscallConn_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SyscallConn(r.Params))
		return nil
	}
	return &MoqTCPListener_starGenType_SyscallConn_anyParams{Recorder: r}
}

func (r *MoqTCPListener_starGenType_SyscallConn_fnRecorder) Seq() *MoqTCPListener_starGenType_SyscallConn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SyscallConn(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTCPListener_starGenType_SyscallConn_fnRecorder) NoSeq() *MoqTCPListener_starGenType_SyscallConn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SyscallConn(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTCPListener_starGenType_SyscallConn_fnRecorder) ReturnResults(result1 syscall.RawConn, result2 error) *MoqTCPListener_starGenType_SyscallConn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 syscall.RawConn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_SyscallConn_doFn
		DoReturnFn MoqTCPListener_starGenType_SyscallConn_doReturnFn
	}{
		Values: &struct {
			Result1 syscall.RawConn
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTCPListener_starGenType_SyscallConn_fnRecorder) AndDo(fn MoqTCPListener_starGenType_SyscallConn_doFn) *MoqTCPListener_starGenType_SyscallConn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTCPListener_starGenType_SyscallConn_fnRecorder) DoReturnResults(fn MoqTCPListener_starGenType_SyscallConn_doReturnFn) *MoqTCPListener_starGenType_SyscallConn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 syscall.RawConn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_SyscallConn_doFn
		DoReturnFn MoqTCPListener_starGenType_SyscallConn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTCPListener_starGenType_SyscallConn_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTCPListener_starGenType_SyscallConn_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SyscallConn {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTCPListener_starGenType_SyscallConn_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTCPListener_starGenType_SyscallConn_paramsKey]*MoqTCPListener_starGenType_SyscallConn_results{},
		}
		r.Moq.ResultsByParams_SyscallConn = append(r.Moq.ResultsByParams_SyscallConn, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SyscallConn) {
			copy(r.Moq.ResultsByParams_SyscallConn[insertAt+1:], r.Moq.ResultsByParams_SyscallConn[insertAt:0])
			r.Moq.ResultsByParams_SyscallConn[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SyscallConn(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTCPListener_starGenType_SyscallConn_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTCPListener_starGenType_SyscallConn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTCPListener_starGenType_SyscallConn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 syscall.RawConn
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqTCPListener_starGenType_SyscallConn_doFn
				DoReturnFn MoqTCPListener_starGenType_SyscallConn_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTCPListener_starGenType) PrettyParams_SyscallConn(params MoqTCPListener_starGenType_SyscallConn_params) string {
	return fmt.Sprintf("SyscallConn()")
}

func (m *MoqTCPListener_starGenType) ParamsKey_SyscallConn(params MoqTCPListener_starGenType_SyscallConn_params, anyParams uint64) MoqTCPListener_starGenType_SyscallConn_paramsKey {
	m.Scene.T.Helper()
	return MoqTCPListener_starGenType_SyscallConn_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTCPListener_starGenType_recorder) AcceptTCP() *MoqTCPListener_starGenType_AcceptTCP_fnRecorder {
	return &MoqTCPListener_starGenType_AcceptTCP_fnRecorder{
		Params:   MoqTCPListener_starGenType_AcceptTCP_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTCPListener_starGenType_AcceptTCP_fnRecorder) Any() *MoqTCPListener_starGenType_AcceptTCP_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AcceptTCP(r.Params))
		return nil
	}
	return &MoqTCPListener_starGenType_AcceptTCP_anyParams{Recorder: r}
}

func (r *MoqTCPListener_starGenType_AcceptTCP_fnRecorder) Seq() *MoqTCPListener_starGenType_AcceptTCP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AcceptTCP(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTCPListener_starGenType_AcceptTCP_fnRecorder) NoSeq() *MoqTCPListener_starGenType_AcceptTCP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AcceptTCP(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTCPListener_starGenType_AcceptTCP_fnRecorder) ReturnResults(result1 *net.TCPConn, result2 error) *MoqTCPListener_starGenType_AcceptTCP_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *net.TCPConn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_AcceptTCP_doFn
		DoReturnFn MoqTCPListener_starGenType_AcceptTCP_doReturnFn
	}{
		Values: &struct {
			Result1 *net.TCPConn
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTCPListener_starGenType_AcceptTCP_fnRecorder) AndDo(fn MoqTCPListener_starGenType_AcceptTCP_doFn) *MoqTCPListener_starGenType_AcceptTCP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTCPListener_starGenType_AcceptTCP_fnRecorder) DoReturnResults(fn MoqTCPListener_starGenType_AcceptTCP_doReturnFn) *MoqTCPListener_starGenType_AcceptTCP_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *net.TCPConn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_AcceptTCP_doFn
		DoReturnFn MoqTCPListener_starGenType_AcceptTCP_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTCPListener_starGenType_AcceptTCP_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTCPListener_starGenType_AcceptTCP_resultsByParams
	for n, res := range r.Moq.ResultsByParams_AcceptTCP {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTCPListener_starGenType_AcceptTCP_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTCPListener_starGenType_AcceptTCP_paramsKey]*MoqTCPListener_starGenType_AcceptTCP_results{},
		}
		r.Moq.ResultsByParams_AcceptTCP = append(r.Moq.ResultsByParams_AcceptTCP, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_AcceptTCP) {
			copy(r.Moq.ResultsByParams_AcceptTCP[insertAt+1:], r.Moq.ResultsByParams_AcceptTCP[insertAt:0])
			r.Moq.ResultsByParams_AcceptTCP[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_AcceptTCP(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTCPListener_starGenType_AcceptTCP_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTCPListener_starGenType_AcceptTCP_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTCPListener_starGenType_AcceptTCP_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *net.TCPConn
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqTCPListener_starGenType_AcceptTCP_doFn
				DoReturnFn MoqTCPListener_starGenType_AcceptTCP_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTCPListener_starGenType) PrettyParams_AcceptTCP(params MoqTCPListener_starGenType_AcceptTCP_params) string {
	return fmt.Sprintf("AcceptTCP()")
}

func (m *MoqTCPListener_starGenType) ParamsKey_AcceptTCP(params MoqTCPListener_starGenType_AcceptTCP_params, anyParams uint64) MoqTCPListener_starGenType_AcceptTCP_paramsKey {
	m.Scene.T.Helper()
	return MoqTCPListener_starGenType_AcceptTCP_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTCPListener_starGenType_recorder) Accept() *MoqTCPListener_starGenType_Accept_fnRecorder {
	return &MoqTCPListener_starGenType_Accept_fnRecorder{
		Params:   MoqTCPListener_starGenType_Accept_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTCPListener_starGenType_Accept_fnRecorder) Any() *MoqTCPListener_starGenType_Accept_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Accept(r.Params))
		return nil
	}
	return &MoqTCPListener_starGenType_Accept_anyParams{Recorder: r}
}

func (r *MoqTCPListener_starGenType_Accept_fnRecorder) Seq() *MoqTCPListener_starGenType_Accept_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Accept(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTCPListener_starGenType_Accept_fnRecorder) NoSeq() *MoqTCPListener_starGenType_Accept_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Accept(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTCPListener_starGenType_Accept_fnRecorder) ReturnResults(result1 net.Conn, result2 error) *MoqTCPListener_starGenType_Accept_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.Conn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_Accept_doFn
		DoReturnFn MoqTCPListener_starGenType_Accept_doReturnFn
	}{
		Values: &struct {
			Result1 net.Conn
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTCPListener_starGenType_Accept_fnRecorder) AndDo(fn MoqTCPListener_starGenType_Accept_doFn) *MoqTCPListener_starGenType_Accept_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTCPListener_starGenType_Accept_fnRecorder) DoReturnResults(fn MoqTCPListener_starGenType_Accept_doReturnFn) *MoqTCPListener_starGenType_Accept_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.Conn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_Accept_doFn
		DoReturnFn MoqTCPListener_starGenType_Accept_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTCPListener_starGenType_Accept_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTCPListener_starGenType_Accept_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Accept {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTCPListener_starGenType_Accept_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTCPListener_starGenType_Accept_paramsKey]*MoqTCPListener_starGenType_Accept_results{},
		}
		r.Moq.ResultsByParams_Accept = append(r.Moq.ResultsByParams_Accept, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Accept) {
			copy(r.Moq.ResultsByParams_Accept[insertAt+1:], r.Moq.ResultsByParams_Accept[insertAt:0])
			r.Moq.ResultsByParams_Accept[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Accept(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTCPListener_starGenType_Accept_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTCPListener_starGenType_Accept_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTCPListener_starGenType_Accept_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 net.Conn
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqTCPListener_starGenType_Accept_doFn
				DoReturnFn MoqTCPListener_starGenType_Accept_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTCPListener_starGenType) PrettyParams_Accept(params MoqTCPListener_starGenType_Accept_params) string {
	return fmt.Sprintf("Accept()")
}

func (m *MoqTCPListener_starGenType) ParamsKey_Accept(params MoqTCPListener_starGenType_Accept_params, anyParams uint64) MoqTCPListener_starGenType_Accept_paramsKey {
	m.Scene.T.Helper()
	return MoqTCPListener_starGenType_Accept_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTCPListener_starGenType_recorder) Close() *MoqTCPListener_starGenType_Close_fnRecorder {
	return &MoqTCPListener_starGenType_Close_fnRecorder{
		Params:   MoqTCPListener_starGenType_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTCPListener_starGenType_Close_fnRecorder) Any() *MoqTCPListener_starGenType_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqTCPListener_starGenType_Close_anyParams{Recorder: r}
}

func (r *MoqTCPListener_starGenType_Close_fnRecorder) Seq() *MoqTCPListener_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTCPListener_starGenType_Close_fnRecorder) NoSeq() *MoqTCPListener_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTCPListener_starGenType_Close_fnRecorder) ReturnResults(result1 error) *MoqTCPListener_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_Close_doFn
		DoReturnFn MoqTCPListener_starGenType_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTCPListener_starGenType_Close_fnRecorder) AndDo(fn MoqTCPListener_starGenType_Close_doFn) *MoqTCPListener_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTCPListener_starGenType_Close_fnRecorder) DoReturnResults(fn MoqTCPListener_starGenType_Close_doReturnFn) *MoqTCPListener_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_Close_doFn
		DoReturnFn MoqTCPListener_starGenType_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTCPListener_starGenType_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTCPListener_starGenType_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTCPListener_starGenType_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTCPListener_starGenType_Close_paramsKey]*MoqTCPListener_starGenType_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTCPListener_starGenType_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTCPListener_starGenType_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTCPListener_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqTCPListener_starGenType_Close_doFn
				DoReturnFn MoqTCPListener_starGenType_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTCPListener_starGenType) PrettyParams_Close(params MoqTCPListener_starGenType_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqTCPListener_starGenType) ParamsKey_Close(params MoqTCPListener_starGenType_Close_params, anyParams uint64) MoqTCPListener_starGenType_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqTCPListener_starGenType_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTCPListener_starGenType_recorder) Addr() *MoqTCPListener_starGenType_Addr_fnRecorder {
	return &MoqTCPListener_starGenType_Addr_fnRecorder{
		Params:   MoqTCPListener_starGenType_Addr_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTCPListener_starGenType_Addr_fnRecorder) Any() *MoqTCPListener_starGenType_Addr_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Addr(r.Params))
		return nil
	}
	return &MoqTCPListener_starGenType_Addr_anyParams{Recorder: r}
}

func (r *MoqTCPListener_starGenType_Addr_fnRecorder) Seq() *MoqTCPListener_starGenType_Addr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Addr(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTCPListener_starGenType_Addr_fnRecorder) NoSeq() *MoqTCPListener_starGenType_Addr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Addr(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTCPListener_starGenType_Addr_fnRecorder) ReturnResults(result1 net.Addr) *MoqTCPListener_starGenType_Addr_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.Addr
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_Addr_doFn
		DoReturnFn MoqTCPListener_starGenType_Addr_doReturnFn
	}{
		Values: &struct {
			Result1 net.Addr
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTCPListener_starGenType_Addr_fnRecorder) AndDo(fn MoqTCPListener_starGenType_Addr_doFn) *MoqTCPListener_starGenType_Addr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTCPListener_starGenType_Addr_fnRecorder) DoReturnResults(fn MoqTCPListener_starGenType_Addr_doReturnFn) *MoqTCPListener_starGenType_Addr_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.Addr
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_Addr_doFn
		DoReturnFn MoqTCPListener_starGenType_Addr_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTCPListener_starGenType_Addr_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTCPListener_starGenType_Addr_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Addr {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTCPListener_starGenType_Addr_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTCPListener_starGenType_Addr_paramsKey]*MoqTCPListener_starGenType_Addr_results{},
		}
		r.Moq.ResultsByParams_Addr = append(r.Moq.ResultsByParams_Addr, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Addr) {
			copy(r.Moq.ResultsByParams_Addr[insertAt+1:], r.Moq.ResultsByParams_Addr[insertAt:0])
			r.Moq.ResultsByParams_Addr[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Addr(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTCPListener_starGenType_Addr_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTCPListener_starGenType_Addr_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTCPListener_starGenType_Addr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 net.Addr
				}
				Sequence   uint32
				DoFn       MoqTCPListener_starGenType_Addr_doFn
				DoReturnFn MoqTCPListener_starGenType_Addr_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTCPListener_starGenType) PrettyParams_Addr(params MoqTCPListener_starGenType_Addr_params) string {
	return fmt.Sprintf("Addr()")
}

func (m *MoqTCPListener_starGenType) ParamsKey_Addr(params MoqTCPListener_starGenType_Addr_params, anyParams uint64) MoqTCPListener_starGenType_Addr_paramsKey {
	m.Scene.T.Helper()
	return MoqTCPListener_starGenType_Addr_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTCPListener_starGenType_recorder) SetDeadline(t time.Time) *MoqTCPListener_starGenType_SetDeadline_fnRecorder {
	return &MoqTCPListener_starGenType_SetDeadline_fnRecorder{
		Params: MoqTCPListener_starGenType_SetDeadline_params{
			T: t,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTCPListener_starGenType_SetDeadline_fnRecorder) Any() *MoqTCPListener_starGenType_SetDeadline_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetDeadline(r.Params))
		return nil
	}
	return &MoqTCPListener_starGenType_SetDeadline_anyParams{Recorder: r}
}

func (a *MoqTCPListener_starGenType_SetDeadline_anyParams) T() *MoqTCPListener_starGenType_SetDeadline_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqTCPListener_starGenType_SetDeadline_fnRecorder) Seq() *MoqTCPListener_starGenType_SetDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetDeadline(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTCPListener_starGenType_SetDeadline_fnRecorder) NoSeq() *MoqTCPListener_starGenType_SetDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetDeadline(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTCPListener_starGenType_SetDeadline_fnRecorder) ReturnResults(result1 error) *MoqTCPListener_starGenType_SetDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_SetDeadline_doFn
		DoReturnFn MoqTCPListener_starGenType_SetDeadline_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTCPListener_starGenType_SetDeadline_fnRecorder) AndDo(fn MoqTCPListener_starGenType_SetDeadline_doFn) *MoqTCPListener_starGenType_SetDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTCPListener_starGenType_SetDeadline_fnRecorder) DoReturnResults(fn MoqTCPListener_starGenType_SetDeadline_doReturnFn) *MoqTCPListener_starGenType_SetDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_SetDeadline_doFn
		DoReturnFn MoqTCPListener_starGenType_SetDeadline_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTCPListener_starGenType_SetDeadline_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTCPListener_starGenType_SetDeadline_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetDeadline {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTCPListener_starGenType_SetDeadline_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTCPListener_starGenType_SetDeadline_paramsKey]*MoqTCPListener_starGenType_SetDeadline_results{},
		}
		r.Moq.ResultsByParams_SetDeadline = append(r.Moq.ResultsByParams_SetDeadline, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetDeadline) {
			copy(r.Moq.ResultsByParams_SetDeadline[insertAt+1:], r.Moq.ResultsByParams_SetDeadline[insertAt:0])
			r.Moq.ResultsByParams_SetDeadline[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetDeadline(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTCPListener_starGenType_SetDeadline_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTCPListener_starGenType_SetDeadline_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTCPListener_starGenType_SetDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqTCPListener_starGenType_SetDeadline_doFn
				DoReturnFn MoqTCPListener_starGenType_SetDeadline_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTCPListener_starGenType) PrettyParams_SetDeadline(params MoqTCPListener_starGenType_SetDeadline_params) string {
	return fmt.Sprintf("SetDeadline(%#v)", params.T)
}

func (m *MoqTCPListener_starGenType) ParamsKey_SetDeadline(params MoqTCPListener_starGenType_SetDeadline_params, anyParams uint64) MoqTCPListener_starGenType_SetDeadline_paramsKey {
	m.Scene.T.Helper()
	var tUsed time.Time
	var tUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetDeadline.T == moq.ParamIndexByValue {
			tUsed = params.T
		} else {
			tUsedHash = hash.DeepHash(params.T)
		}
	}
	return MoqTCPListener_starGenType_SetDeadline_paramsKey{
		Params: struct{ T time.Time }{
			T: tUsed,
		},
		Hashes: struct{ T hash.Hash }{
			T: tUsedHash,
		},
	}
}

func (m *MoqTCPListener_starGenType_recorder) File() *MoqTCPListener_starGenType_File_fnRecorder {
	return &MoqTCPListener_starGenType_File_fnRecorder{
		Params:   MoqTCPListener_starGenType_File_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTCPListener_starGenType_File_fnRecorder) Any() *MoqTCPListener_starGenType_File_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_File(r.Params))
		return nil
	}
	return &MoqTCPListener_starGenType_File_anyParams{Recorder: r}
}

func (r *MoqTCPListener_starGenType_File_fnRecorder) Seq() *MoqTCPListener_starGenType_File_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_File(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTCPListener_starGenType_File_fnRecorder) NoSeq() *MoqTCPListener_starGenType_File_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_File(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTCPListener_starGenType_File_fnRecorder) ReturnResults(f *os.File, err error) *MoqTCPListener_starGenType_File_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			F   *os.File
			Err error
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_File_doFn
		DoReturnFn MoqTCPListener_starGenType_File_doReturnFn
	}{
		Values: &struct {
			F   *os.File
			Err error
		}{
			F:   f,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTCPListener_starGenType_File_fnRecorder) AndDo(fn MoqTCPListener_starGenType_File_doFn) *MoqTCPListener_starGenType_File_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTCPListener_starGenType_File_fnRecorder) DoReturnResults(fn MoqTCPListener_starGenType_File_doReturnFn) *MoqTCPListener_starGenType_File_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			F   *os.File
			Err error
		}
		Sequence   uint32
		DoFn       MoqTCPListener_starGenType_File_doFn
		DoReturnFn MoqTCPListener_starGenType_File_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTCPListener_starGenType_File_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTCPListener_starGenType_File_resultsByParams
	for n, res := range r.Moq.ResultsByParams_File {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTCPListener_starGenType_File_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTCPListener_starGenType_File_paramsKey]*MoqTCPListener_starGenType_File_results{},
		}
		r.Moq.ResultsByParams_File = append(r.Moq.ResultsByParams_File, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_File) {
			copy(r.Moq.ResultsByParams_File[insertAt+1:], r.Moq.ResultsByParams_File[insertAt:0])
			r.Moq.ResultsByParams_File[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_File(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTCPListener_starGenType_File_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTCPListener_starGenType_File_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTCPListener_starGenType_File_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					F   *os.File
					Err error
				}
				Sequence   uint32
				DoFn       MoqTCPListener_starGenType_File_doFn
				DoReturnFn MoqTCPListener_starGenType_File_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTCPListener_starGenType) PrettyParams_File(params MoqTCPListener_starGenType_File_params) string {
	return fmt.Sprintf("File()")
}

func (m *MoqTCPListener_starGenType) ParamsKey_File(params MoqTCPListener_starGenType_File_params, anyParams uint64) MoqTCPListener_starGenType_File_paramsKey {
	m.Scene.T.Helper()
	return MoqTCPListener_starGenType_File_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqTCPListener_starGenType) Reset() {
	m.ResultsByParams_SyscallConn = nil
	m.ResultsByParams_AcceptTCP = nil
	m.ResultsByParams_Accept = nil
	m.ResultsByParams_Close = nil
	m.ResultsByParams_Addr = nil
	m.ResultsByParams_SetDeadline = nil
	m.ResultsByParams_File = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqTCPListener_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_SyscallConn {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SyscallConn(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_AcceptTCP {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_AcceptTCP(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Accept {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Accept(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Addr {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Addr(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetDeadline {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetDeadline(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_File {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_File(results.Params))
			}
		}
	}
}
