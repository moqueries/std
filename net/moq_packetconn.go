// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package net

import (
	"fmt"
	"math/bits"
	"net"
	"sync/atomic"
	"time"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that net.PacketConn is mocked
// completely
var _ net.PacketConn = (*MoqPacketConn_mock)(nil)

// MoqPacketConn holds the state of a moq of the PacketConn type
type MoqPacketConn struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqPacketConn_mock

	ResultsByParams_ReadFrom         []MoqPacketConn_ReadFrom_resultsByParams
	ResultsByParams_WriteTo          []MoqPacketConn_WriteTo_resultsByParams
	ResultsByParams_Close            []MoqPacketConn_Close_resultsByParams
	ResultsByParams_LocalAddr        []MoqPacketConn_LocalAddr_resultsByParams
	ResultsByParams_SetDeadline      []MoqPacketConn_SetDeadline_resultsByParams
	ResultsByParams_SetReadDeadline  []MoqPacketConn_SetReadDeadline_resultsByParams
	ResultsByParams_SetWriteDeadline []MoqPacketConn_SetWriteDeadline_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			ReadFrom struct {
				P moq.ParamIndexing
			}
			WriteTo struct {
				P    moq.ParamIndexing
				Addr moq.ParamIndexing
			}
			Close       struct{}
			LocalAddr   struct{}
			SetDeadline struct {
				T moq.ParamIndexing
			}
			SetReadDeadline struct {
				T moq.ParamIndexing
			}
			SetWriteDeadline struct {
				T moq.ParamIndexing
			}
		}
	}
	// MoqPacketConn_mock isolates the mock interface of the PacketConn type
}

type MoqPacketConn_mock struct {
	Moq *MoqPacketConn
}

// MoqPacketConn_recorder isolates the recorder interface of the PacketConn
// type
type MoqPacketConn_recorder struct {
	Moq *MoqPacketConn
}

// MoqPacketConn_ReadFrom_params holds the params of the PacketConn type
type MoqPacketConn_ReadFrom_params struct{ P []byte }

// MoqPacketConn_ReadFrom_paramsKey holds the map key params of the PacketConn
// type
type MoqPacketConn_ReadFrom_paramsKey struct {
	Params struct{}
	Hashes struct{ P hash.Hash }
}

// MoqPacketConn_ReadFrom_resultsByParams contains the results for a given set
// of parameters for the PacketConn type
type MoqPacketConn_ReadFrom_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPacketConn_ReadFrom_paramsKey]*MoqPacketConn_ReadFrom_results
}

// MoqPacketConn_ReadFrom_doFn defines the type of function needed when calling
// AndDo for the PacketConn type
type MoqPacketConn_ReadFrom_doFn func(p []byte)

// MoqPacketConn_ReadFrom_doReturnFn defines the type of function needed when
// calling DoReturnResults for the PacketConn type
type MoqPacketConn_ReadFrom_doReturnFn func(p []byte) (n int, addr net.Addr, err error)

// MoqPacketConn_ReadFrom_results holds the results of the PacketConn type
type MoqPacketConn_ReadFrom_results struct {
	Params  MoqPacketConn_ReadFrom_params
	Results []struct {
		Values *struct {
			N    int
			Addr net.Addr
			Err  error
		}
		Sequence   uint32
		DoFn       MoqPacketConn_ReadFrom_doFn
		DoReturnFn MoqPacketConn_ReadFrom_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPacketConn_ReadFrom_fnRecorder routes recorded function calls to the
// MoqPacketConn moq
type MoqPacketConn_ReadFrom_fnRecorder struct {
	Params    MoqPacketConn_ReadFrom_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPacketConn_ReadFrom_results
	Moq       *MoqPacketConn
}

// MoqPacketConn_ReadFrom_anyParams isolates the any params functions of the
// PacketConn type
type MoqPacketConn_ReadFrom_anyParams struct {
	Recorder *MoqPacketConn_ReadFrom_fnRecorder
}

// MoqPacketConn_WriteTo_params holds the params of the PacketConn type
type MoqPacketConn_WriteTo_params struct {
	P    []byte
	Addr net.Addr
}

// MoqPacketConn_WriteTo_paramsKey holds the map key params of the PacketConn
// type
type MoqPacketConn_WriteTo_paramsKey struct {
	Params struct{ Addr net.Addr }
	Hashes struct {
		P    hash.Hash
		Addr hash.Hash
	}
}

// MoqPacketConn_WriteTo_resultsByParams contains the results for a given set
// of parameters for the PacketConn type
type MoqPacketConn_WriteTo_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPacketConn_WriteTo_paramsKey]*MoqPacketConn_WriteTo_results
}

// MoqPacketConn_WriteTo_doFn defines the type of function needed when calling
// AndDo for the PacketConn type
type MoqPacketConn_WriteTo_doFn func(p []byte, addr net.Addr)

// MoqPacketConn_WriteTo_doReturnFn defines the type of function needed when
// calling DoReturnResults for the PacketConn type
type MoqPacketConn_WriteTo_doReturnFn func(p []byte, addr net.Addr) (n int, err error)

// MoqPacketConn_WriteTo_results holds the results of the PacketConn type
type MoqPacketConn_WriteTo_results struct {
	Params  MoqPacketConn_WriteTo_params
	Results []struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqPacketConn_WriteTo_doFn
		DoReturnFn MoqPacketConn_WriteTo_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPacketConn_WriteTo_fnRecorder routes recorded function calls to the
// MoqPacketConn moq
type MoqPacketConn_WriteTo_fnRecorder struct {
	Params    MoqPacketConn_WriteTo_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPacketConn_WriteTo_results
	Moq       *MoqPacketConn
}

// MoqPacketConn_WriteTo_anyParams isolates the any params functions of the
// PacketConn type
type MoqPacketConn_WriteTo_anyParams struct {
	Recorder *MoqPacketConn_WriteTo_fnRecorder
}

// MoqPacketConn_Close_params holds the params of the PacketConn type
type MoqPacketConn_Close_params struct{}

// MoqPacketConn_Close_paramsKey holds the map key params of the PacketConn
// type
type MoqPacketConn_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPacketConn_Close_resultsByParams contains the results for a given set of
// parameters for the PacketConn type
type MoqPacketConn_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPacketConn_Close_paramsKey]*MoqPacketConn_Close_results
}

// MoqPacketConn_Close_doFn defines the type of function needed when calling
// AndDo for the PacketConn type
type MoqPacketConn_Close_doFn func()

// MoqPacketConn_Close_doReturnFn defines the type of function needed when
// calling DoReturnResults for the PacketConn type
type MoqPacketConn_Close_doReturnFn func() error

// MoqPacketConn_Close_results holds the results of the PacketConn type
type MoqPacketConn_Close_results struct {
	Params  MoqPacketConn_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqPacketConn_Close_doFn
		DoReturnFn MoqPacketConn_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPacketConn_Close_fnRecorder routes recorded function calls to the
// MoqPacketConn moq
type MoqPacketConn_Close_fnRecorder struct {
	Params    MoqPacketConn_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPacketConn_Close_results
	Moq       *MoqPacketConn
}

// MoqPacketConn_Close_anyParams isolates the any params functions of the
// PacketConn type
type MoqPacketConn_Close_anyParams struct {
	Recorder *MoqPacketConn_Close_fnRecorder
}

// MoqPacketConn_LocalAddr_params holds the params of the PacketConn type
type MoqPacketConn_LocalAddr_params struct{}

// MoqPacketConn_LocalAddr_paramsKey holds the map key params of the PacketConn
// type
type MoqPacketConn_LocalAddr_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPacketConn_LocalAddr_resultsByParams contains the results for a given set
// of parameters for the PacketConn type
type MoqPacketConn_LocalAddr_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPacketConn_LocalAddr_paramsKey]*MoqPacketConn_LocalAddr_results
}

// MoqPacketConn_LocalAddr_doFn defines the type of function needed when
// calling AndDo for the PacketConn type
type MoqPacketConn_LocalAddr_doFn func()

// MoqPacketConn_LocalAddr_doReturnFn defines the type of function needed when
// calling DoReturnResults for the PacketConn type
type MoqPacketConn_LocalAddr_doReturnFn func() net.Addr

// MoqPacketConn_LocalAddr_results holds the results of the PacketConn type
type MoqPacketConn_LocalAddr_results struct {
	Params  MoqPacketConn_LocalAddr_params
	Results []struct {
		Values *struct {
			Result1 net.Addr
		}
		Sequence   uint32
		DoFn       MoqPacketConn_LocalAddr_doFn
		DoReturnFn MoqPacketConn_LocalAddr_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPacketConn_LocalAddr_fnRecorder routes recorded function calls to the
// MoqPacketConn moq
type MoqPacketConn_LocalAddr_fnRecorder struct {
	Params    MoqPacketConn_LocalAddr_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPacketConn_LocalAddr_results
	Moq       *MoqPacketConn
}

// MoqPacketConn_LocalAddr_anyParams isolates the any params functions of the
// PacketConn type
type MoqPacketConn_LocalAddr_anyParams struct {
	Recorder *MoqPacketConn_LocalAddr_fnRecorder
}

// MoqPacketConn_SetDeadline_params holds the params of the PacketConn type
type MoqPacketConn_SetDeadline_params struct{ T time.Time }

// MoqPacketConn_SetDeadline_paramsKey holds the map key params of the
// PacketConn type
type MoqPacketConn_SetDeadline_paramsKey struct {
	Params struct{ T time.Time }
	Hashes struct{ T hash.Hash }
}

// MoqPacketConn_SetDeadline_resultsByParams contains the results for a given
// set of parameters for the PacketConn type
type MoqPacketConn_SetDeadline_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPacketConn_SetDeadline_paramsKey]*MoqPacketConn_SetDeadline_results
}

// MoqPacketConn_SetDeadline_doFn defines the type of function needed when
// calling AndDo for the PacketConn type
type MoqPacketConn_SetDeadline_doFn func(t time.Time)

// MoqPacketConn_SetDeadline_doReturnFn defines the type of function needed
// when calling DoReturnResults for the PacketConn type
type MoqPacketConn_SetDeadline_doReturnFn func(t time.Time) error

// MoqPacketConn_SetDeadline_results holds the results of the PacketConn type
type MoqPacketConn_SetDeadline_results struct {
	Params  MoqPacketConn_SetDeadline_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqPacketConn_SetDeadline_doFn
		DoReturnFn MoqPacketConn_SetDeadline_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPacketConn_SetDeadline_fnRecorder routes recorded function calls to the
// MoqPacketConn moq
type MoqPacketConn_SetDeadline_fnRecorder struct {
	Params    MoqPacketConn_SetDeadline_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPacketConn_SetDeadline_results
	Moq       *MoqPacketConn
}

// MoqPacketConn_SetDeadline_anyParams isolates the any params functions of the
// PacketConn type
type MoqPacketConn_SetDeadline_anyParams struct {
	Recorder *MoqPacketConn_SetDeadline_fnRecorder
}

// MoqPacketConn_SetReadDeadline_params holds the params of the PacketConn type
type MoqPacketConn_SetReadDeadline_params struct{ T time.Time }

// MoqPacketConn_SetReadDeadline_paramsKey holds the map key params of the
// PacketConn type
type MoqPacketConn_SetReadDeadline_paramsKey struct {
	Params struct{ T time.Time }
	Hashes struct{ T hash.Hash }
}

// MoqPacketConn_SetReadDeadline_resultsByParams contains the results for a
// given set of parameters for the PacketConn type
type MoqPacketConn_SetReadDeadline_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPacketConn_SetReadDeadline_paramsKey]*MoqPacketConn_SetReadDeadline_results
}

// MoqPacketConn_SetReadDeadline_doFn defines the type of function needed when
// calling AndDo for the PacketConn type
type MoqPacketConn_SetReadDeadline_doFn func(t time.Time)

// MoqPacketConn_SetReadDeadline_doReturnFn defines the type of function needed
// when calling DoReturnResults for the PacketConn type
type MoqPacketConn_SetReadDeadline_doReturnFn func(t time.Time) error

// MoqPacketConn_SetReadDeadline_results holds the results of the PacketConn
// type
type MoqPacketConn_SetReadDeadline_results struct {
	Params  MoqPacketConn_SetReadDeadline_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqPacketConn_SetReadDeadline_doFn
		DoReturnFn MoqPacketConn_SetReadDeadline_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPacketConn_SetReadDeadline_fnRecorder routes recorded function calls to
// the MoqPacketConn moq
type MoqPacketConn_SetReadDeadline_fnRecorder struct {
	Params    MoqPacketConn_SetReadDeadline_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPacketConn_SetReadDeadline_results
	Moq       *MoqPacketConn
}

// MoqPacketConn_SetReadDeadline_anyParams isolates the any params functions of
// the PacketConn type
type MoqPacketConn_SetReadDeadline_anyParams struct {
	Recorder *MoqPacketConn_SetReadDeadline_fnRecorder
}

// MoqPacketConn_SetWriteDeadline_params holds the params of the PacketConn
// type
type MoqPacketConn_SetWriteDeadline_params struct{ T time.Time }

// MoqPacketConn_SetWriteDeadline_paramsKey holds the map key params of the
// PacketConn type
type MoqPacketConn_SetWriteDeadline_paramsKey struct {
	Params struct{ T time.Time }
	Hashes struct{ T hash.Hash }
}

// MoqPacketConn_SetWriteDeadline_resultsByParams contains the results for a
// given set of parameters for the PacketConn type
type MoqPacketConn_SetWriteDeadline_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPacketConn_SetWriteDeadline_paramsKey]*MoqPacketConn_SetWriteDeadline_results
}

// MoqPacketConn_SetWriteDeadline_doFn defines the type of function needed when
// calling AndDo for the PacketConn type
type MoqPacketConn_SetWriteDeadline_doFn func(t time.Time)

// MoqPacketConn_SetWriteDeadline_doReturnFn defines the type of function
// needed when calling DoReturnResults for the PacketConn type
type MoqPacketConn_SetWriteDeadline_doReturnFn func(t time.Time) error

// MoqPacketConn_SetWriteDeadline_results holds the results of the PacketConn
// type
type MoqPacketConn_SetWriteDeadline_results struct {
	Params  MoqPacketConn_SetWriteDeadline_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqPacketConn_SetWriteDeadline_doFn
		DoReturnFn MoqPacketConn_SetWriteDeadline_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPacketConn_SetWriteDeadline_fnRecorder routes recorded function calls to
// the MoqPacketConn moq
type MoqPacketConn_SetWriteDeadline_fnRecorder struct {
	Params    MoqPacketConn_SetWriteDeadline_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPacketConn_SetWriteDeadline_results
	Moq       *MoqPacketConn
}

// MoqPacketConn_SetWriteDeadline_anyParams isolates the any params functions
// of the PacketConn type
type MoqPacketConn_SetWriteDeadline_anyParams struct {
	Recorder *MoqPacketConn_SetWriteDeadline_fnRecorder
}

// NewMoqPacketConn creates a new moq of the PacketConn type
func NewMoqPacketConn(scene *moq.Scene, config *moq.Config) *MoqPacketConn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqPacketConn{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqPacketConn_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				ReadFrom struct {
					P moq.ParamIndexing
				}
				WriteTo struct {
					P    moq.ParamIndexing
					Addr moq.ParamIndexing
				}
				Close       struct{}
				LocalAddr   struct{}
				SetDeadline struct {
					T moq.ParamIndexing
				}
				SetReadDeadline struct {
					T moq.ParamIndexing
				}
				SetWriteDeadline struct {
					T moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			ReadFrom struct {
				P moq.ParamIndexing
			}
			WriteTo struct {
				P    moq.ParamIndexing
				Addr moq.ParamIndexing
			}
			Close       struct{}
			LocalAddr   struct{}
			SetDeadline struct {
				T moq.ParamIndexing
			}
			SetReadDeadline struct {
				T moq.ParamIndexing
			}
			SetWriteDeadline struct {
				T moq.ParamIndexing
			}
		}{
			ReadFrom: struct {
				P moq.ParamIndexing
			}{
				P: moq.ParamIndexByHash,
			},
			WriteTo: struct {
				P    moq.ParamIndexing
				Addr moq.ParamIndexing
			}{
				P:    moq.ParamIndexByHash,
				Addr: moq.ParamIndexByHash,
			},
			Close:     struct{}{},
			LocalAddr: struct{}{},
			SetDeadline: struct {
				T moq.ParamIndexing
			}{
				T: moq.ParamIndexByHash,
			},
			SetReadDeadline: struct {
				T moq.ParamIndexing
			}{
				T: moq.ParamIndexByHash,
			},
			SetWriteDeadline: struct {
				T moq.ParamIndexing
			}{
				T: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the PacketConn type
func (m *MoqPacketConn) Mock() *MoqPacketConn_mock { return m.Moq }

func (m *MoqPacketConn_mock) ReadFrom(p []byte) (n int, addr net.Addr, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqPacketConn_ReadFrom_params{
		P: p,
	}
	var results *MoqPacketConn_ReadFrom_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadFrom {
		paramsKey := m.Moq.ParamsKey_ReadFrom(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadFrom(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadFrom(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadFrom(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p)
	}

	if result.Values != nil {
		n = result.Values.N
		addr = result.Values.Addr
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, addr, err = result.DoReturnFn(p)
	}
	return
}

func (m *MoqPacketConn_mock) WriteTo(p []byte, addr net.Addr) (n int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqPacketConn_WriteTo_params{
		P:    p,
		Addr: addr,
	}
	var results *MoqPacketConn_WriteTo_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteTo {
		paramsKey := m.Moq.ParamsKey_WriteTo(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteTo(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteTo(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteTo(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p, addr)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(p, addr)
	}
	return
}

func (m *MoqPacketConn_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqPacketConn_Close_params{}
	var results *MoqPacketConn_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqPacketConn_mock) LocalAddr() (result1 net.Addr) {
	m.Moq.Scene.T.Helper()
	params := MoqPacketConn_LocalAddr_params{}
	var results *MoqPacketConn_LocalAddr_results
	for _, resultsByParams := range m.Moq.ResultsByParams_LocalAddr {
		paramsKey := m.Moq.ParamsKey_LocalAddr(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_LocalAddr(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_LocalAddr(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_LocalAddr(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqPacketConn_mock) SetDeadline(t time.Time) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqPacketConn_SetDeadline_params{
		T: t,
	}
	var results *MoqPacketConn_SetDeadline_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetDeadline {
		paramsKey := m.Moq.ParamsKey_SetDeadline(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetDeadline(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetDeadline(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetDeadline(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(t)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(t)
	}
	return
}

func (m *MoqPacketConn_mock) SetReadDeadline(t time.Time) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqPacketConn_SetReadDeadline_params{
		T: t,
	}
	var results *MoqPacketConn_SetReadDeadline_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetReadDeadline {
		paramsKey := m.Moq.ParamsKey_SetReadDeadline(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetReadDeadline(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetReadDeadline(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetReadDeadline(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(t)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(t)
	}
	return
}

func (m *MoqPacketConn_mock) SetWriteDeadline(t time.Time) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqPacketConn_SetWriteDeadline_params{
		T: t,
	}
	var results *MoqPacketConn_SetWriteDeadline_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetWriteDeadline {
		paramsKey := m.Moq.ParamsKey_SetWriteDeadline(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetWriteDeadline(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetWriteDeadline(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetWriteDeadline(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(t)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(t)
	}
	return
}

// OnCall returns the recorder implementation of the PacketConn type
func (m *MoqPacketConn) OnCall() *MoqPacketConn_recorder {
	return &MoqPacketConn_recorder{
		Moq: m,
	}
}

func (m *MoqPacketConn_recorder) ReadFrom(p []byte) *MoqPacketConn_ReadFrom_fnRecorder {
	return &MoqPacketConn_ReadFrom_fnRecorder{
		Params: MoqPacketConn_ReadFrom_params{
			P: p,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPacketConn_ReadFrom_fnRecorder) Any() *MoqPacketConn_ReadFrom_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFrom(r.Params))
		return nil
	}
	return &MoqPacketConn_ReadFrom_anyParams{Recorder: r}
}

func (a *MoqPacketConn_ReadFrom_anyParams) P() *MoqPacketConn_ReadFrom_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPacketConn_ReadFrom_fnRecorder) Seq() *MoqPacketConn_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFrom(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPacketConn_ReadFrom_fnRecorder) NoSeq() *MoqPacketConn_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFrom(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPacketConn_ReadFrom_fnRecorder) ReturnResults(n int, addr net.Addr, err error) *MoqPacketConn_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N    int
			Addr net.Addr
			Err  error
		}
		Sequence   uint32
		DoFn       MoqPacketConn_ReadFrom_doFn
		DoReturnFn MoqPacketConn_ReadFrom_doReturnFn
	}{
		Values: &struct {
			N    int
			Addr net.Addr
			Err  error
		}{
			N:    n,
			Addr: addr,
			Err:  err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPacketConn_ReadFrom_fnRecorder) AndDo(fn MoqPacketConn_ReadFrom_doFn) *MoqPacketConn_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPacketConn_ReadFrom_fnRecorder) DoReturnResults(fn MoqPacketConn_ReadFrom_doReturnFn) *MoqPacketConn_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N    int
			Addr net.Addr
			Err  error
		}
		Sequence   uint32
		DoFn       MoqPacketConn_ReadFrom_doFn
		DoReturnFn MoqPacketConn_ReadFrom_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPacketConn_ReadFrom_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPacketConn_ReadFrom_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadFrom {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPacketConn_ReadFrom_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPacketConn_ReadFrom_paramsKey]*MoqPacketConn_ReadFrom_results{},
		}
		r.Moq.ResultsByParams_ReadFrom = append(r.Moq.ResultsByParams_ReadFrom, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadFrom) {
			copy(r.Moq.ResultsByParams_ReadFrom[insertAt+1:], r.Moq.ResultsByParams_ReadFrom[insertAt:0])
			r.Moq.ResultsByParams_ReadFrom[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadFrom(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPacketConn_ReadFrom_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPacketConn_ReadFrom_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPacketConn_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N    int
					Addr net.Addr
					Err  error
				}
				Sequence   uint32
				DoFn       MoqPacketConn_ReadFrom_doFn
				DoReturnFn MoqPacketConn_ReadFrom_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPacketConn) PrettyParams_ReadFrom(params MoqPacketConn_ReadFrom_params) string {
	return fmt.Sprintf("ReadFrom(%#v)", params.P)
}

func (m *MoqPacketConn) ParamsKey_ReadFrom(params MoqPacketConn_ReadFrom_params, anyParams uint64) MoqPacketConn_ReadFrom_paramsKey {
	m.Scene.T.Helper()
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadFrom.P == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The p parameter of the ReadFrom function can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.P)
	}
	return MoqPacketConn_ReadFrom_paramsKey{
		Params: struct{}{},
		Hashes: struct{ P hash.Hash }{
			P: pUsedHash,
		},
	}
}

func (m *MoqPacketConn_recorder) WriteTo(p []byte, addr net.Addr) *MoqPacketConn_WriteTo_fnRecorder {
	return &MoqPacketConn_WriteTo_fnRecorder{
		Params: MoqPacketConn_WriteTo_params{
			P:    p,
			Addr: addr,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPacketConn_WriteTo_fnRecorder) Any() *MoqPacketConn_WriteTo_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteTo(r.Params))
		return nil
	}
	return &MoqPacketConn_WriteTo_anyParams{Recorder: r}
}

func (a *MoqPacketConn_WriteTo_anyParams) P() *MoqPacketConn_WriteTo_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqPacketConn_WriteTo_anyParams) Addr() *MoqPacketConn_WriteTo_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqPacketConn_WriteTo_fnRecorder) Seq() *MoqPacketConn_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteTo(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPacketConn_WriteTo_fnRecorder) NoSeq() *MoqPacketConn_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteTo(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPacketConn_WriteTo_fnRecorder) ReturnResults(n int, err error) *MoqPacketConn_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqPacketConn_WriteTo_doFn
		DoReturnFn MoqPacketConn_WriteTo_doReturnFn
	}{
		Values: &struct {
			N   int
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPacketConn_WriteTo_fnRecorder) AndDo(fn MoqPacketConn_WriteTo_doFn) *MoqPacketConn_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPacketConn_WriteTo_fnRecorder) DoReturnResults(fn MoqPacketConn_WriteTo_doReturnFn) *MoqPacketConn_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqPacketConn_WriteTo_doFn
		DoReturnFn MoqPacketConn_WriteTo_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPacketConn_WriteTo_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPacketConn_WriteTo_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteTo {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPacketConn_WriteTo_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPacketConn_WriteTo_paramsKey]*MoqPacketConn_WriteTo_results{},
		}
		r.Moq.ResultsByParams_WriteTo = append(r.Moq.ResultsByParams_WriteTo, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteTo) {
			copy(r.Moq.ResultsByParams_WriteTo[insertAt+1:], r.Moq.ResultsByParams_WriteTo[insertAt:0])
			r.Moq.ResultsByParams_WriteTo[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteTo(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPacketConn_WriteTo_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPacketConn_WriteTo_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPacketConn_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int
					Err error
				}
				Sequence   uint32
				DoFn       MoqPacketConn_WriteTo_doFn
				DoReturnFn MoqPacketConn_WriteTo_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPacketConn) PrettyParams_WriteTo(params MoqPacketConn_WriteTo_params) string {
	return fmt.Sprintf("WriteTo(%#v, %#v)", params.P, params.Addr)
}

func (m *MoqPacketConn) ParamsKey_WriteTo(params MoqPacketConn_WriteTo_params, anyParams uint64) MoqPacketConn_WriteTo_paramsKey {
	m.Scene.T.Helper()
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteTo.P == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The p parameter of the WriteTo function can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.P)
	}
	var addrUsed net.Addr
	var addrUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.WriteTo.Addr == moq.ParamIndexByValue {
			addrUsed = params.Addr
		} else {
			addrUsedHash = hash.DeepHash(params.Addr)
		}
	}
	return MoqPacketConn_WriteTo_paramsKey{
		Params: struct{ Addr net.Addr }{
			Addr: addrUsed,
		},
		Hashes: struct {
			P    hash.Hash
			Addr hash.Hash
		}{
			P:    pUsedHash,
			Addr: addrUsedHash,
		},
	}
}

func (m *MoqPacketConn_recorder) Close() *MoqPacketConn_Close_fnRecorder {
	return &MoqPacketConn_Close_fnRecorder{
		Params:   MoqPacketConn_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPacketConn_Close_fnRecorder) Any() *MoqPacketConn_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqPacketConn_Close_anyParams{Recorder: r}
}

func (r *MoqPacketConn_Close_fnRecorder) Seq() *MoqPacketConn_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPacketConn_Close_fnRecorder) NoSeq() *MoqPacketConn_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPacketConn_Close_fnRecorder) ReturnResults(result1 error) *MoqPacketConn_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqPacketConn_Close_doFn
		DoReturnFn MoqPacketConn_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPacketConn_Close_fnRecorder) AndDo(fn MoqPacketConn_Close_doFn) *MoqPacketConn_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPacketConn_Close_fnRecorder) DoReturnResults(fn MoqPacketConn_Close_doReturnFn) *MoqPacketConn_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqPacketConn_Close_doFn
		DoReturnFn MoqPacketConn_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPacketConn_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPacketConn_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPacketConn_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPacketConn_Close_paramsKey]*MoqPacketConn_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPacketConn_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPacketConn_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPacketConn_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqPacketConn_Close_doFn
				DoReturnFn MoqPacketConn_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPacketConn) PrettyParams_Close(params MoqPacketConn_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqPacketConn) ParamsKey_Close(params MoqPacketConn_Close_params, anyParams uint64) MoqPacketConn_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqPacketConn_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPacketConn_recorder) LocalAddr() *MoqPacketConn_LocalAddr_fnRecorder {
	return &MoqPacketConn_LocalAddr_fnRecorder{
		Params:   MoqPacketConn_LocalAddr_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPacketConn_LocalAddr_fnRecorder) Any() *MoqPacketConn_LocalAddr_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LocalAddr(r.Params))
		return nil
	}
	return &MoqPacketConn_LocalAddr_anyParams{Recorder: r}
}

func (r *MoqPacketConn_LocalAddr_fnRecorder) Seq() *MoqPacketConn_LocalAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LocalAddr(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPacketConn_LocalAddr_fnRecorder) NoSeq() *MoqPacketConn_LocalAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_LocalAddr(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPacketConn_LocalAddr_fnRecorder) ReturnResults(result1 net.Addr) *MoqPacketConn_LocalAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.Addr
		}
		Sequence   uint32
		DoFn       MoqPacketConn_LocalAddr_doFn
		DoReturnFn MoqPacketConn_LocalAddr_doReturnFn
	}{
		Values: &struct {
			Result1 net.Addr
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPacketConn_LocalAddr_fnRecorder) AndDo(fn MoqPacketConn_LocalAddr_doFn) *MoqPacketConn_LocalAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPacketConn_LocalAddr_fnRecorder) DoReturnResults(fn MoqPacketConn_LocalAddr_doReturnFn) *MoqPacketConn_LocalAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.Addr
		}
		Sequence   uint32
		DoFn       MoqPacketConn_LocalAddr_doFn
		DoReturnFn MoqPacketConn_LocalAddr_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPacketConn_LocalAddr_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPacketConn_LocalAddr_resultsByParams
	for n, res := range r.Moq.ResultsByParams_LocalAddr {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPacketConn_LocalAddr_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPacketConn_LocalAddr_paramsKey]*MoqPacketConn_LocalAddr_results{},
		}
		r.Moq.ResultsByParams_LocalAddr = append(r.Moq.ResultsByParams_LocalAddr, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_LocalAddr) {
			copy(r.Moq.ResultsByParams_LocalAddr[insertAt+1:], r.Moq.ResultsByParams_LocalAddr[insertAt:0])
			r.Moq.ResultsByParams_LocalAddr[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_LocalAddr(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPacketConn_LocalAddr_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPacketConn_LocalAddr_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPacketConn_LocalAddr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 net.Addr
				}
				Sequence   uint32
				DoFn       MoqPacketConn_LocalAddr_doFn
				DoReturnFn MoqPacketConn_LocalAddr_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPacketConn) PrettyParams_LocalAddr(params MoqPacketConn_LocalAddr_params) string {
	return fmt.Sprintf("LocalAddr()")
}

func (m *MoqPacketConn) ParamsKey_LocalAddr(params MoqPacketConn_LocalAddr_params, anyParams uint64) MoqPacketConn_LocalAddr_paramsKey {
	m.Scene.T.Helper()
	return MoqPacketConn_LocalAddr_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPacketConn_recorder) SetDeadline(t time.Time) *MoqPacketConn_SetDeadline_fnRecorder {
	return &MoqPacketConn_SetDeadline_fnRecorder{
		Params: MoqPacketConn_SetDeadline_params{
			T: t,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPacketConn_SetDeadline_fnRecorder) Any() *MoqPacketConn_SetDeadline_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetDeadline(r.Params))
		return nil
	}
	return &MoqPacketConn_SetDeadline_anyParams{Recorder: r}
}

func (a *MoqPacketConn_SetDeadline_anyParams) T() *MoqPacketConn_SetDeadline_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPacketConn_SetDeadline_fnRecorder) Seq() *MoqPacketConn_SetDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetDeadline(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPacketConn_SetDeadline_fnRecorder) NoSeq() *MoqPacketConn_SetDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetDeadline(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPacketConn_SetDeadline_fnRecorder) ReturnResults(result1 error) *MoqPacketConn_SetDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqPacketConn_SetDeadline_doFn
		DoReturnFn MoqPacketConn_SetDeadline_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPacketConn_SetDeadline_fnRecorder) AndDo(fn MoqPacketConn_SetDeadline_doFn) *MoqPacketConn_SetDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPacketConn_SetDeadline_fnRecorder) DoReturnResults(fn MoqPacketConn_SetDeadline_doReturnFn) *MoqPacketConn_SetDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqPacketConn_SetDeadline_doFn
		DoReturnFn MoqPacketConn_SetDeadline_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPacketConn_SetDeadline_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPacketConn_SetDeadline_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetDeadline {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPacketConn_SetDeadline_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPacketConn_SetDeadline_paramsKey]*MoqPacketConn_SetDeadline_results{},
		}
		r.Moq.ResultsByParams_SetDeadline = append(r.Moq.ResultsByParams_SetDeadline, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetDeadline) {
			copy(r.Moq.ResultsByParams_SetDeadline[insertAt+1:], r.Moq.ResultsByParams_SetDeadline[insertAt:0])
			r.Moq.ResultsByParams_SetDeadline[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetDeadline(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPacketConn_SetDeadline_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPacketConn_SetDeadline_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPacketConn_SetDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqPacketConn_SetDeadline_doFn
				DoReturnFn MoqPacketConn_SetDeadline_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPacketConn) PrettyParams_SetDeadline(params MoqPacketConn_SetDeadline_params) string {
	return fmt.Sprintf("SetDeadline(%#v)", params.T)
}

func (m *MoqPacketConn) ParamsKey_SetDeadline(params MoqPacketConn_SetDeadline_params, anyParams uint64) MoqPacketConn_SetDeadline_paramsKey {
	m.Scene.T.Helper()
	var tUsed time.Time
	var tUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetDeadline.T == moq.ParamIndexByValue {
			tUsed = params.T
		} else {
			tUsedHash = hash.DeepHash(params.T)
		}
	}
	return MoqPacketConn_SetDeadline_paramsKey{
		Params: struct{ T time.Time }{
			T: tUsed,
		},
		Hashes: struct{ T hash.Hash }{
			T: tUsedHash,
		},
	}
}

func (m *MoqPacketConn_recorder) SetReadDeadline(t time.Time) *MoqPacketConn_SetReadDeadline_fnRecorder {
	return &MoqPacketConn_SetReadDeadline_fnRecorder{
		Params: MoqPacketConn_SetReadDeadline_params{
			T: t,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPacketConn_SetReadDeadline_fnRecorder) Any() *MoqPacketConn_SetReadDeadline_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetReadDeadline(r.Params))
		return nil
	}
	return &MoqPacketConn_SetReadDeadline_anyParams{Recorder: r}
}

func (a *MoqPacketConn_SetReadDeadline_anyParams) T() *MoqPacketConn_SetReadDeadline_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPacketConn_SetReadDeadline_fnRecorder) Seq() *MoqPacketConn_SetReadDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetReadDeadline(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPacketConn_SetReadDeadline_fnRecorder) NoSeq() *MoqPacketConn_SetReadDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetReadDeadline(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPacketConn_SetReadDeadline_fnRecorder) ReturnResults(result1 error) *MoqPacketConn_SetReadDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqPacketConn_SetReadDeadline_doFn
		DoReturnFn MoqPacketConn_SetReadDeadline_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPacketConn_SetReadDeadline_fnRecorder) AndDo(fn MoqPacketConn_SetReadDeadline_doFn) *MoqPacketConn_SetReadDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPacketConn_SetReadDeadline_fnRecorder) DoReturnResults(fn MoqPacketConn_SetReadDeadline_doReturnFn) *MoqPacketConn_SetReadDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqPacketConn_SetReadDeadline_doFn
		DoReturnFn MoqPacketConn_SetReadDeadline_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPacketConn_SetReadDeadline_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPacketConn_SetReadDeadline_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetReadDeadline {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPacketConn_SetReadDeadline_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPacketConn_SetReadDeadline_paramsKey]*MoqPacketConn_SetReadDeadline_results{},
		}
		r.Moq.ResultsByParams_SetReadDeadline = append(r.Moq.ResultsByParams_SetReadDeadline, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetReadDeadline) {
			copy(r.Moq.ResultsByParams_SetReadDeadline[insertAt+1:], r.Moq.ResultsByParams_SetReadDeadline[insertAt:0])
			r.Moq.ResultsByParams_SetReadDeadline[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetReadDeadline(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPacketConn_SetReadDeadline_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPacketConn_SetReadDeadline_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPacketConn_SetReadDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqPacketConn_SetReadDeadline_doFn
				DoReturnFn MoqPacketConn_SetReadDeadline_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPacketConn) PrettyParams_SetReadDeadline(params MoqPacketConn_SetReadDeadline_params) string {
	return fmt.Sprintf("SetReadDeadline(%#v)", params.T)
}

func (m *MoqPacketConn) ParamsKey_SetReadDeadline(params MoqPacketConn_SetReadDeadline_params, anyParams uint64) MoqPacketConn_SetReadDeadline_paramsKey {
	m.Scene.T.Helper()
	var tUsed time.Time
	var tUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetReadDeadline.T == moq.ParamIndexByValue {
			tUsed = params.T
		} else {
			tUsedHash = hash.DeepHash(params.T)
		}
	}
	return MoqPacketConn_SetReadDeadline_paramsKey{
		Params: struct{ T time.Time }{
			T: tUsed,
		},
		Hashes: struct{ T hash.Hash }{
			T: tUsedHash,
		},
	}
}

func (m *MoqPacketConn_recorder) SetWriteDeadline(t time.Time) *MoqPacketConn_SetWriteDeadline_fnRecorder {
	return &MoqPacketConn_SetWriteDeadline_fnRecorder{
		Params: MoqPacketConn_SetWriteDeadline_params{
			T: t,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPacketConn_SetWriteDeadline_fnRecorder) Any() *MoqPacketConn_SetWriteDeadline_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetWriteDeadline(r.Params))
		return nil
	}
	return &MoqPacketConn_SetWriteDeadline_anyParams{Recorder: r}
}

func (a *MoqPacketConn_SetWriteDeadline_anyParams) T() *MoqPacketConn_SetWriteDeadline_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPacketConn_SetWriteDeadline_fnRecorder) Seq() *MoqPacketConn_SetWriteDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetWriteDeadline(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPacketConn_SetWriteDeadline_fnRecorder) NoSeq() *MoqPacketConn_SetWriteDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetWriteDeadline(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPacketConn_SetWriteDeadline_fnRecorder) ReturnResults(result1 error) *MoqPacketConn_SetWriteDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqPacketConn_SetWriteDeadline_doFn
		DoReturnFn MoqPacketConn_SetWriteDeadline_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPacketConn_SetWriteDeadline_fnRecorder) AndDo(fn MoqPacketConn_SetWriteDeadline_doFn) *MoqPacketConn_SetWriteDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPacketConn_SetWriteDeadline_fnRecorder) DoReturnResults(fn MoqPacketConn_SetWriteDeadline_doReturnFn) *MoqPacketConn_SetWriteDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqPacketConn_SetWriteDeadline_doFn
		DoReturnFn MoqPacketConn_SetWriteDeadline_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPacketConn_SetWriteDeadline_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPacketConn_SetWriteDeadline_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetWriteDeadline {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPacketConn_SetWriteDeadline_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPacketConn_SetWriteDeadline_paramsKey]*MoqPacketConn_SetWriteDeadline_results{},
		}
		r.Moq.ResultsByParams_SetWriteDeadline = append(r.Moq.ResultsByParams_SetWriteDeadline, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetWriteDeadline) {
			copy(r.Moq.ResultsByParams_SetWriteDeadline[insertAt+1:], r.Moq.ResultsByParams_SetWriteDeadline[insertAt:0])
			r.Moq.ResultsByParams_SetWriteDeadline[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetWriteDeadline(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPacketConn_SetWriteDeadline_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPacketConn_SetWriteDeadline_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPacketConn_SetWriteDeadline_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqPacketConn_SetWriteDeadline_doFn
				DoReturnFn MoqPacketConn_SetWriteDeadline_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPacketConn) PrettyParams_SetWriteDeadline(params MoqPacketConn_SetWriteDeadline_params) string {
	return fmt.Sprintf("SetWriteDeadline(%#v)", params.T)
}

func (m *MoqPacketConn) ParamsKey_SetWriteDeadline(params MoqPacketConn_SetWriteDeadline_params, anyParams uint64) MoqPacketConn_SetWriteDeadline_paramsKey {
	m.Scene.T.Helper()
	var tUsed time.Time
	var tUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetWriteDeadline.T == moq.ParamIndexByValue {
			tUsed = params.T
		} else {
			tUsedHash = hash.DeepHash(params.T)
		}
	}
	return MoqPacketConn_SetWriteDeadline_paramsKey{
		Params: struct{ T time.Time }{
			T: tUsed,
		},
		Hashes: struct{ T hash.Hash }{
			T: tUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqPacketConn) Reset() {
	m.ResultsByParams_ReadFrom = nil
	m.ResultsByParams_WriteTo = nil
	m.ResultsByParams_Close = nil
	m.ResultsByParams_LocalAddr = nil
	m.ResultsByParams_SetDeadline = nil
	m.ResultsByParams_SetReadDeadline = nil
	m.ResultsByParams_SetWriteDeadline = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqPacketConn) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_ReadFrom {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadFrom(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteTo {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteTo(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_LocalAddr {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_LocalAddr(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetDeadline {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetDeadline(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetReadDeadline {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetReadDeadline(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetWriteDeadline {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetWriteDeadline(results.Params))
			}
		}
	}
}
