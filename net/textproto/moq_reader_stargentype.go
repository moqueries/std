// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package textproto

import (
	"fmt"
	"io"
	"math/bits"
	"net/textproto"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that textproto.Reader_starGenType is
// mocked completely
var _ Reader_starGenType = (*MoqReader_starGenType_mock)(nil)

// Reader_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Reader_starGenType interface {
	ReadLine() (string, error)
	ReadLineBytes() ([]byte, error)
	ReadContinuedLine() (string, error)
	ReadContinuedLineBytes() ([]byte, error)
	ReadCodeLine(expectCode int) (code int, message string, err error)
	ReadResponse(expectCode int) (code int, message string, err error)
	DotReader() io.Reader
	ReadDotBytes() ([]byte, error)
	ReadDotLines() ([]string, error)
	ReadMIMEHeader() (textproto.MIMEHeader, error)
}

// MoqReader_starGenType holds the state of a moq of the Reader_starGenType
// type
type MoqReader_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqReader_starGenType_mock

	ResultsByParams_ReadLine               []MoqReader_starGenType_ReadLine_resultsByParams
	ResultsByParams_ReadLineBytes          []MoqReader_starGenType_ReadLineBytes_resultsByParams
	ResultsByParams_ReadContinuedLine      []MoqReader_starGenType_ReadContinuedLine_resultsByParams
	ResultsByParams_ReadContinuedLineBytes []MoqReader_starGenType_ReadContinuedLineBytes_resultsByParams
	ResultsByParams_ReadCodeLine           []MoqReader_starGenType_ReadCodeLine_resultsByParams
	ResultsByParams_ReadResponse           []MoqReader_starGenType_ReadResponse_resultsByParams
	ResultsByParams_DotReader              []MoqReader_starGenType_DotReader_resultsByParams
	ResultsByParams_ReadDotBytes           []MoqReader_starGenType_ReadDotBytes_resultsByParams
	ResultsByParams_ReadDotLines           []MoqReader_starGenType_ReadDotLines_resultsByParams
	ResultsByParams_ReadMIMEHeader         []MoqReader_starGenType_ReadMIMEHeader_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			ReadLine               struct{}
			ReadLineBytes          struct{}
			ReadContinuedLine      struct{}
			ReadContinuedLineBytes struct{}
			ReadCodeLine           struct {
				ExpectCode moq.ParamIndexing
			}
			ReadResponse struct {
				ExpectCode moq.ParamIndexing
			}
			DotReader      struct{}
			ReadDotBytes   struct{}
			ReadDotLines   struct{}
			ReadMIMEHeader struct{}
		}
	}
}

// MoqReader_starGenType_mock isolates the mock interface of the
// Reader_starGenType type
type MoqReader_starGenType_mock struct {
	Moq *MoqReader_starGenType
}

// MoqReader_starGenType_recorder isolates the recorder interface of the
// Reader_starGenType type
type MoqReader_starGenType_recorder struct {
	Moq *MoqReader_starGenType
}

// MoqReader_starGenType_ReadLine_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadLine_params struct{}

// MoqReader_starGenType_ReadLine_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadLine_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_ReadLine_resultsByParams contains the results for a
// given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_ReadLine_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_ReadLine_paramsKey]*MoqReader_starGenType_ReadLine_results
}

// MoqReader_starGenType_ReadLine_doFn defines the type of function needed when
// calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_ReadLine_doFn func()

// MoqReader_starGenType_ReadLine_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_ReadLine_doReturnFn func() (string, error)

// MoqReader_starGenType_ReadLine_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_ReadLine_results struct {
	Params  MoqReader_starGenType_ReadLine_params
	Results []struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadLine_doFn
		DoReturnFn MoqReader_starGenType_ReadLine_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_ReadLine_fnRecorder routes recorded function calls to
// the MoqReader_starGenType moq
type MoqReader_starGenType_ReadLine_fnRecorder struct {
	Params    MoqReader_starGenType_ReadLine_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_ReadLine_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_ReadLine_anyParams isolates the any params functions
// of the Reader_starGenType type
type MoqReader_starGenType_ReadLine_anyParams struct {
	Recorder *MoqReader_starGenType_ReadLine_fnRecorder
}

// MoqReader_starGenType_ReadLineBytes_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadLineBytes_params struct{}

// MoqReader_starGenType_ReadLineBytes_paramsKey holds the map key params of
// the Reader_starGenType type
type MoqReader_starGenType_ReadLineBytes_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_ReadLineBytes_resultsByParams contains the results for
// a given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_ReadLineBytes_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_ReadLineBytes_paramsKey]*MoqReader_starGenType_ReadLineBytes_results
}

// MoqReader_starGenType_ReadLineBytes_doFn defines the type of function needed
// when calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_ReadLineBytes_doFn func()

// MoqReader_starGenType_ReadLineBytes_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_ReadLineBytes_doReturnFn func() ([]byte, error)

// MoqReader_starGenType_ReadLineBytes_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_ReadLineBytes_results struct {
	Params  MoqReader_starGenType_ReadLineBytes_params
	Results []struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadLineBytes_doFn
		DoReturnFn MoqReader_starGenType_ReadLineBytes_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_ReadLineBytes_fnRecorder routes recorded function
// calls to the MoqReader_starGenType moq
type MoqReader_starGenType_ReadLineBytes_fnRecorder struct {
	Params    MoqReader_starGenType_ReadLineBytes_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_ReadLineBytes_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_ReadLineBytes_anyParams isolates the any params
// functions of the Reader_starGenType type
type MoqReader_starGenType_ReadLineBytes_anyParams struct {
	Recorder *MoqReader_starGenType_ReadLineBytes_fnRecorder
}

// MoqReader_starGenType_ReadContinuedLine_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadContinuedLine_params struct{}

// MoqReader_starGenType_ReadContinuedLine_paramsKey holds the map key params
// of the Reader_starGenType type
type MoqReader_starGenType_ReadContinuedLine_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_ReadContinuedLine_resultsByParams contains the results
// for a given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_ReadContinuedLine_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_ReadContinuedLine_paramsKey]*MoqReader_starGenType_ReadContinuedLine_results
}

// MoqReader_starGenType_ReadContinuedLine_doFn defines the type of function
// needed when calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_ReadContinuedLine_doFn func()

// MoqReader_starGenType_ReadContinuedLine_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_ReadContinuedLine_doReturnFn func() (string, error)

// MoqReader_starGenType_ReadContinuedLine_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_ReadContinuedLine_results struct {
	Params  MoqReader_starGenType_ReadContinuedLine_params
	Results []struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadContinuedLine_doFn
		DoReturnFn MoqReader_starGenType_ReadContinuedLine_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_ReadContinuedLine_fnRecorder routes recorded function
// calls to the MoqReader_starGenType moq
type MoqReader_starGenType_ReadContinuedLine_fnRecorder struct {
	Params    MoqReader_starGenType_ReadContinuedLine_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_ReadContinuedLine_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_ReadContinuedLine_anyParams isolates the any params
// functions of the Reader_starGenType type
type MoqReader_starGenType_ReadContinuedLine_anyParams struct {
	Recorder *MoqReader_starGenType_ReadContinuedLine_fnRecorder
}

// MoqReader_starGenType_ReadContinuedLineBytes_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadContinuedLineBytes_params struct{}

// MoqReader_starGenType_ReadContinuedLineBytes_paramsKey holds the map key
// params of the Reader_starGenType type
type MoqReader_starGenType_ReadContinuedLineBytes_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_ReadContinuedLineBytes_resultsByParams contains the
// results for a given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_ReadContinuedLineBytes_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_ReadContinuedLineBytes_paramsKey]*MoqReader_starGenType_ReadContinuedLineBytes_results
}

// MoqReader_starGenType_ReadContinuedLineBytes_doFn defines the type of
// function needed when calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_ReadContinuedLineBytes_doFn func()

// MoqReader_starGenType_ReadContinuedLineBytes_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_ReadContinuedLineBytes_doReturnFn func() ([]byte, error)

// MoqReader_starGenType_ReadContinuedLineBytes_results holds the results of
// the Reader_starGenType type
type MoqReader_starGenType_ReadContinuedLineBytes_results struct {
	Params  MoqReader_starGenType_ReadContinuedLineBytes_params
	Results []struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadContinuedLineBytes_doFn
		DoReturnFn MoqReader_starGenType_ReadContinuedLineBytes_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder routes recorded
// function calls to the MoqReader_starGenType moq
type MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder struct {
	Params    MoqReader_starGenType_ReadContinuedLineBytes_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_ReadContinuedLineBytes_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_ReadContinuedLineBytes_anyParams isolates the any
// params functions of the Reader_starGenType type
type MoqReader_starGenType_ReadContinuedLineBytes_anyParams struct {
	Recorder *MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder
}

// MoqReader_starGenType_ReadCodeLine_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadCodeLine_params struct{ ExpectCode int }

// MoqReader_starGenType_ReadCodeLine_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadCodeLine_paramsKey struct {
	Params struct{ ExpectCode int }
	Hashes struct{ ExpectCode hash.Hash }
}

// MoqReader_starGenType_ReadCodeLine_resultsByParams contains the results for
// a given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_ReadCodeLine_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_ReadCodeLine_paramsKey]*MoqReader_starGenType_ReadCodeLine_results
}

// MoqReader_starGenType_ReadCodeLine_doFn defines the type of function needed
// when calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_ReadCodeLine_doFn func(expectCode int)

// MoqReader_starGenType_ReadCodeLine_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_ReadCodeLine_doReturnFn func(expectCode int) (code int, message string, err error)

// MoqReader_starGenType_ReadCodeLine_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_ReadCodeLine_results struct {
	Params  MoqReader_starGenType_ReadCodeLine_params
	Results []struct {
		Values *struct {
			Code    int
			Message string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadCodeLine_doFn
		DoReturnFn MoqReader_starGenType_ReadCodeLine_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_ReadCodeLine_fnRecorder routes recorded function calls
// to the MoqReader_starGenType moq
type MoqReader_starGenType_ReadCodeLine_fnRecorder struct {
	Params    MoqReader_starGenType_ReadCodeLine_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_ReadCodeLine_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_ReadCodeLine_anyParams isolates the any params
// functions of the Reader_starGenType type
type MoqReader_starGenType_ReadCodeLine_anyParams struct {
	Recorder *MoqReader_starGenType_ReadCodeLine_fnRecorder
}

// MoqReader_starGenType_ReadResponse_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadResponse_params struct{ ExpectCode int }

// MoqReader_starGenType_ReadResponse_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadResponse_paramsKey struct {
	Params struct{ ExpectCode int }
	Hashes struct{ ExpectCode hash.Hash }
}

// MoqReader_starGenType_ReadResponse_resultsByParams contains the results for
// a given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_ReadResponse_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_ReadResponse_paramsKey]*MoqReader_starGenType_ReadResponse_results
}

// MoqReader_starGenType_ReadResponse_doFn defines the type of function needed
// when calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_ReadResponse_doFn func(expectCode int)

// MoqReader_starGenType_ReadResponse_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_ReadResponse_doReturnFn func(expectCode int) (code int, message string, err error)

// MoqReader_starGenType_ReadResponse_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_ReadResponse_results struct {
	Params  MoqReader_starGenType_ReadResponse_params
	Results []struct {
		Values *struct {
			Code    int
			Message string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadResponse_doFn
		DoReturnFn MoqReader_starGenType_ReadResponse_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_ReadResponse_fnRecorder routes recorded function calls
// to the MoqReader_starGenType moq
type MoqReader_starGenType_ReadResponse_fnRecorder struct {
	Params    MoqReader_starGenType_ReadResponse_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_ReadResponse_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_ReadResponse_anyParams isolates the any params
// functions of the Reader_starGenType type
type MoqReader_starGenType_ReadResponse_anyParams struct {
	Recorder *MoqReader_starGenType_ReadResponse_fnRecorder
}

// MoqReader_starGenType_DotReader_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_DotReader_params struct{}

// MoqReader_starGenType_DotReader_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_DotReader_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_DotReader_resultsByParams contains the results for a
// given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_DotReader_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_DotReader_paramsKey]*MoqReader_starGenType_DotReader_results
}

// MoqReader_starGenType_DotReader_doFn defines the type of function needed
// when calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_DotReader_doFn func()

// MoqReader_starGenType_DotReader_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_DotReader_doReturnFn func() io.Reader

// MoqReader_starGenType_DotReader_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_DotReader_results struct {
	Params  MoqReader_starGenType_DotReader_params
	Results []struct {
		Values *struct {
			Result1 io.Reader
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_DotReader_doFn
		DoReturnFn MoqReader_starGenType_DotReader_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_DotReader_fnRecorder routes recorded function calls to
// the MoqReader_starGenType moq
type MoqReader_starGenType_DotReader_fnRecorder struct {
	Params    MoqReader_starGenType_DotReader_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_DotReader_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_DotReader_anyParams isolates the any params functions
// of the Reader_starGenType type
type MoqReader_starGenType_DotReader_anyParams struct {
	Recorder *MoqReader_starGenType_DotReader_fnRecorder
}

// MoqReader_starGenType_ReadDotBytes_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadDotBytes_params struct{}

// MoqReader_starGenType_ReadDotBytes_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadDotBytes_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_ReadDotBytes_resultsByParams contains the results for
// a given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_ReadDotBytes_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_ReadDotBytes_paramsKey]*MoqReader_starGenType_ReadDotBytes_results
}

// MoqReader_starGenType_ReadDotBytes_doFn defines the type of function needed
// when calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_ReadDotBytes_doFn func()

// MoqReader_starGenType_ReadDotBytes_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_ReadDotBytes_doReturnFn func() ([]byte, error)

// MoqReader_starGenType_ReadDotBytes_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_ReadDotBytes_results struct {
	Params  MoqReader_starGenType_ReadDotBytes_params
	Results []struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadDotBytes_doFn
		DoReturnFn MoqReader_starGenType_ReadDotBytes_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_ReadDotBytes_fnRecorder routes recorded function calls
// to the MoqReader_starGenType moq
type MoqReader_starGenType_ReadDotBytes_fnRecorder struct {
	Params    MoqReader_starGenType_ReadDotBytes_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_ReadDotBytes_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_ReadDotBytes_anyParams isolates the any params
// functions of the Reader_starGenType type
type MoqReader_starGenType_ReadDotBytes_anyParams struct {
	Recorder *MoqReader_starGenType_ReadDotBytes_fnRecorder
}

// MoqReader_starGenType_ReadDotLines_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadDotLines_params struct{}

// MoqReader_starGenType_ReadDotLines_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadDotLines_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_ReadDotLines_resultsByParams contains the results for
// a given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_ReadDotLines_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_ReadDotLines_paramsKey]*MoqReader_starGenType_ReadDotLines_results
}

// MoqReader_starGenType_ReadDotLines_doFn defines the type of function needed
// when calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_ReadDotLines_doFn func()

// MoqReader_starGenType_ReadDotLines_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_ReadDotLines_doReturnFn func() ([]string, error)

// MoqReader_starGenType_ReadDotLines_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_ReadDotLines_results struct {
	Params  MoqReader_starGenType_ReadDotLines_params
	Results []struct {
		Values *struct {
			Result1 []string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadDotLines_doFn
		DoReturnFn MoqReader_starGenType_ReadDotLines_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_ReadDotLines_fnRecorder routes recorded function calls
// to the MoqReader_starGenType moq
type MoqReader_starGenType_ReadDotLines_fnRecorder struct {
	Params    MoqReader_starGenType_ReadDotLines_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_ReadDotLines_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_ReadDotLines_anyParams isolates the any params
// functions of the Reader_starGenType type
type MoqReader_starGenType_ReadDotLines_anyParams struct {
	Recorder *MoqReader_starGenType_ReadDotLines_fnRecorder
}

// MoqReader_starGenType_ReadMIMEHeader_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadMIMEHeader_params struct{}

// MoqReader_starGenType_ReadMIMEHeader_paramsKey holds the map key params of
// the Reader_starGenType type
type MoqReader_starGenType_ReadMIMEHeader_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_ReadMIMEHeader_resultsByParams contains the results
// for a given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_ReadMIMEHeader_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_ReadMIMEHeader_paramsKey]*MoqReader_starGenType_ReadMIMEHeader_results
}

// MoqReader_starGenType_ReadMIMEHeader_doFn defines the type of function
// needed when calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_ReadMIMEHeader_doFn func()

// MoqReader_starGenType_ReadMIMEHeader_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_ReadMIMEHeader_doReturnFn func() (textproto.MIMEHeader, error)

// MoqReader_starGenType_ReadMIMEHeader_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_ReadMIMEHeader_results struct {
	Params  MoqReader_starGenType_ReadMIMEHeader_params
	Results []struct {
		Values *struct {
			Result1 textproto.MIMEHeader
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadMIMEHeader_doFn
		DoReturnFn MoqReader_starGenType_ReadMIMEHeader_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_ReadMIMEHeader_fnRecorder routes recorded function
// calls to the MoqReader_starGenType moq
type MoqReader_starGenType_ReadMIMEHeader_fnRecorder struct {
	Params    MoqReader_starGenType_ReadMIMEHeader_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_ReadMIMEHeader_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_ReadMIMEHeader_anyParams isolates the any params
// functions of the Reader_starGenType type
type MoqReader_starGenType_ReadMIMEHeader_anyParams struct {
	Recorder *MoqReader_starGenType_ReadMIMEHeader_fnRecorder
}

// NewMoqReader_starGenType creates a new moq of the Reader_starGenType type
func NewMoqReader_starGenType(scene *moq.Scene, config *moq.Config) *MoqReader_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqReader_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqReader_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				ReadLine               struct{}
				ReadLineBytes          struct{}
				ReadContinuedLine      struct{}
				ReadContinuedLineBytes struct{}
				ReadCodeLine           struct {
					ExpectCode moq.ParamIndexing
				}
				ReadResponse struct {
					ExpectCode moq.ParamIndexing
				}
				DotReader      struct{}
				ReadDotBytes   struct{}
				ReadDotLines   struct{}
				ReadMIMEHeader struct{}
			}
		}{ParameterIndexing: struct {
			ReadLine               struct{}
			ReadLineBytes          struct{}
			ReadContinuedLine      struct{}
			ReadContinuedLineBytes struct{}
			ReadCodeLine           struct {
				ExpectCode moq.ParamIndexing
			}
			ReadResponse struct {
				ExpectCode moq.ParamIndexing
			}
			DotReader      struct{}
			ReadDotBytes   struct{}
			ReadDotLines   struct{}
			ReadMIMEHeader struct{}
		}{
			ReadLine:               struct{}{},
			ReadLineBytes:          struct{}{},
			ReadContinuedLine:      struct{}{},
			ReadContinuedLineBytes: struct{}{},
			ReadCodeLine: struct {
				ExpectCode moq.ParamIndexing
			}{
				ExpectCode: moq.ParamIndexByValue,
			},
			ReadResponse: struct {
				ExpectCode moq.ParamIndexing
			}{
				ExpectCode: moq.ParamIndexByValue,
			},
			DotReader:      struct{}{},
			ReadDotBytes:   struct{}{},
			ReadDotLines:   struct{}{},
			ReadMIMEHeader: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Reader_starGenType type
func (m *MoqReader_starGenType) Mock() *MoqReader_starGenType_mock { return m.Moq }

func (m *MoqReader_starGenType_mock) ReadLine() (result1 string, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_ReadLine_params{}
	var results *MoqReader_starGenType_ReadLine_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadLine {
		paramsKey := m.Moq.ParamsKey_ReadLine(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadLine(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadLine(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadLine(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqReader_starGenType_mock) ReadLineBytes() (result1 []byte, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_ReadLineBytes_params{}
	var results *MoqReader_starGenType_ReadLineBytes_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadLineBytes {
		paramsKey := m.Moq.ParamsKey_ReadLineBytes(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadLineBytes(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadLineBytes(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadLineBytes(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqReader_starGenType_mock) ReadContinuedLine() (result1 string, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_ReadContinuedLine_params{}
	var results *MoqReader_starGenType_ReadContinuedLine_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadContinuedLine {
		paramsKey := m.Moq.ParamsKey_ReadContinuedLine(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadContinuedLine(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadContinuedLine(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadContinuedLine(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqReader_starGenType_mock) ReadContinuedLineBytes() (result1 []byte, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_ReadContinuedLineBytes_params{}
	var results *MoqReader_starGenType_ReadContinuedLineBytes_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadContinuedLineBytes {
		paramsKey := m.Moq.ParamsKey_ReadContinuedLineBytes(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadContinuedLineBytes(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadContinuedLineBytes(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadContinuedLineBytes(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqReader_starGenType_mock) ReadCodeLine(expectCode int) (code int, message string, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_ReadCodeLine_params{
		ExpectCode: expectCode,
	}
	var results *MoqReader_starGenType_ReadCodeLine_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadCodeLine {
		paramsKey := m.Moq.ParamsKey_ReadCodeLine(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadCodeLine(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadCodeLine(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadCodeLine(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(expectCode)
	}

	if result.Values != nil {
		code = result.Values.Code
		message = result.Values.Message
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		code, message, err = result.DoReturnFn(expectCode)
	}
	return
}

func (m *MoqReader_starGenType_mock) ReadResponse(expectCode int) (code int, message string, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_ReadResponse_params{
		ExpectCode: expectCode,
	}
	var results *MoqReader_starGenType_ReadResponse_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadResponse {
		paramsKey := m.Moq.ParamsKey_ReadResponse(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadResponse(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadResponse(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadResponse(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(expectCode)
	}

	if result.Values != nil {
		code = result.Values.Code
		message = result.Values.Message
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		code, message, err = result.DoReturnFn(expectCode)
	}
	return
}

func (m *MoqReader_starGenType_mock) DotReader() (result1 io.Reader) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_DotReader_params{}
	var results *MoqReader_starGenType_DotReader_results
	for _, resultsByParams := range m.Moq.ResultsByParams_DotReader {
		paramsKey := m.Moq.ParamsKey_DotReader(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_DotReader(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_DotReader(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_DotReader(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqReader_starGenType_mock) ReadDotBytes() (result1 []byte, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_ReadDotBytes_params{}
	var results *MoqReader_starGenType_ReadDotBytes_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadDotBytes {
		paramsKey := m.Moq.ParamsKey_ReadDotBytes(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadDotBytes(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadDotBytes(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadDotBytes(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqReader_starGenType_mock) ReadDotLines() (result1 []string, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_ReadDotLines_params{}
	var results *MoqReader_starGenType_ReadDotLines_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadDotLines {
		paramsKey := m.Moq.ParamsKey_ReadDotLines(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadDotLines(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadDotLines(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadDotLines(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqReader_starGenType_mock) ReadMIMEHeader() (result1 textproto.MIMEHeader, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_ReadMIMEHeader_params{}
	var results *MoqReader_starGenType_ReadMIMEHeader_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadMIMEHeader {
		paramsKey := m.Moq.ParamsKey_ReadMIMEHeader(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadMIMEHeader(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadMIMEHeader(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadMIMEHeader(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Reader_starGenType type
func (m *MoqReader_starGenType) OnCall() *MoqReader_starGenType_recorder {
	return &MoqReader_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqReader_starGenType_recorder) ReadLine() *MoqReader_starGenType_ReadLine_fnRecorder {
	return &MoqReader_starGenType_ReadLine_fnRecorder{
		Params:   MoqReader_starGenType_ReadLine_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_ReadLine_fnRecorder) Any() *MoqReader_starGenType_ReadLine_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadLine(r.Params))
		return nil
	}
	return &MoqReader_starGenType_ReadLine_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_ReadLine_fnRecorder) Seq() *MoqReader_starGenType_ReadLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadLine(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_ReadLine_fnRecorder) NoSeq() *MoqReader_starGenType_ReadLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadLine(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_ReadLine_fnRecorder) ReturnResults(result1 string, result2 error) *MoqReader_starGenType_ReadLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadLine_doFn
		DoReturnFn MoqReader_starGenType_ReadLine_doReturnFn
	}{
		Values: &struct {
			Result1 string
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_ReadLine_fnRecorder) AndDo(fn MoqReader_starGenType_ReadLine_doFn) *MoqReader_starGenType_ReadLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_ReadLine_fnRecorder) DoReturnResults(fn MoqReader_starGenType_ReadLine_doReturnFn) *MoqReader_starGenType_ReadLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadLine_doFn
		DoReturnFn MoqReader_starGenType_ReadLine_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_ReadLine_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_ReadLine_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadLine {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_ReadLine_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_ReadLine_paramsKey]*MoqReader_starGenType_ReadLine_results{},
		}
		r.Moq.ResultsByParams_ReadLine = append(r.Moq.ResultsByParams_ReadLine, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadLine) {
			copy(r.Moq.ResultsByParams_ReadLine[insertAt+1:], r.Moq.ResultsByParams_ReadLine[insertAt:0])
			r.Moq.ResultsByParams_ReadLine[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadLine(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_ReadLine_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_ReadLine_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_ReadLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_ReadLine_doFn
				DoReturnFn MoqReader_starGenType_ReadLine_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_ReadLine(params MoqReader_starGenType_ReadLine_params) string {
	return fmt.Sprintf("ReadLine()")
}

func (m *MoqReader_starGenType) ParamsKey_ReadLine(params MoqReader_starGenType_ReadLine_params, anyParams uint64) MoqReader_starGenType_ReadLine_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_ReadLine_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_starGenType_recorder) ReadLineBytes() *MoqReader_starGenType_ReadLineBytes_fnRecorder {
	return &MoqReader_starGenType_ReadLineBytes_fnRecorder{
		Params:   MoqReader_starGenType_ReadLineBytes_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_ReadLineBytes_fnRecorder) Any() *MoqReader_starGenType_ReadLineBytes_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadLineBytes(r.Params))
		return nil
	}
	return &MoqReader_starGenType_ReadLineBytes_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_ReadLineBytes_fnRecorder) Seq() *MoqReader_starGenType_ReadLineBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadLineBytes(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_ReadLineBytes_fnRecorder) NoSeq() *MoqReader_starGenType_ReadLineBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadLineBytes(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_ReadLineBytes_fnRecorder) ReturnResults(result1 []byte, result2 error) *MoqReader_starGenType_ReadLineBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadLineBytes_doFn
		DoReturnFn MoqReader_starGenType_ReadLineBytes_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_ReadLineBytes_fnRecorder) AndDo(fn MoqReader_starGenType_ReadLineBytes_doFn) *MoqReader_starGenType_ReadLineBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_ReadLineBytes_fnRecorder) DoReturnResults(fn MoqReader_starGenType_ReadLineBytes_doReturnFn) *MoqReader_starGenType_ReadLineBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadLineBytes_doFn
		DoReturnFn MoqReader_starGenType_ReadLineBytes_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_ReadLineBytes_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_ReadLineBytes_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadLineBytes {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_ReadLineBytes_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_ReadLineBytes_paramsKey]*MoqReader_starGenType_ReadLineBytes_results{},
		}
		r.Moq.ResultsByParams_ReadLineBytes = append(r.Moq.ResultsByParams_ReadLineBytes, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadLineBytes) {
			copy(r.Moq.ResultsByParams_ReadLineBytes[insertAt+1:], r.Moq.ResultsByParams_ReadLineBytes[insertAt:0])
			r.Moq.ResultsByParams_ReadLineBytes[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadLineBytes(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_ReadLineBytes_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_ReadLineBytes_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_ReadLineBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_ReadLineBytes_doFn
				DoReturnFn MoqReader_starGenType_ReadLineBytes_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_ReadLineBytes(params MoqReader_starGenType_ReadLineBytes_params) string {
	return fmt.Sprintf("ReadLineBytes()")
}

func (m *MoqReader_starGenType) ParamsKey_ReadLineBytes(params MoqReader_starGenType_ReadLineBytes_params, anyParams uint64) MoqReader_starGenType_ReadLineBytes_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_ReadLineBytes_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_starGenType_recorder) ReadContinuedLine() *MoqReader_starGenType_ReadContinuedLine_fnRecorder {
	return &MoqReader_starGenType_ReadContinuedLine_fnRecorder{
		Params:   MoqReader_starGenType_ReadContinuedLine_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_ReadContinuedLine_fnRecorder) Any() *MoqReader_starGenType_ReadContinuedLine_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadContinuedLine(r.Params))
		return nil
	}
	return &MoqReader_starGenType_ReadContinuedLine_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_ReadContinuedLine_fnRecorder) Seq() *MoqReader_starGenType_ReadContinuedLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadContinuedLine(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_ReadContinuedLine_fnRecorder) NoSeq() *MoqReader_starGenType_ReadContinuedLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadContinuedLine(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_ReadContinuedLine_fnRecorder) ReturnResults(result1 string, result2 error) *MoqReader_starGenType_ReadContinuedLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadContinuedLine_doFn
		DoReturnFn MoqReader_starGenType_ReadContinuedLine_doReturnFn
	}{
		Values: &struct {
			Result1 string
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_ReadContinuedLine_fnRecorder) AndDo(fn MoqReader_starGenType_ReadContinuedLine_doFn) *MoqReader_starGenType_ReadContinuedLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_ReadContinuedLine_fnRecorder) DoReturnResults(fn MoqReader_starGenType_ReadContinuedLine_doReturnFn) *MoqReader_starGenType_ReadContinuedLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadContinuedLine_doFn
		DoReturnFn MoqReader_starGenType_ReadContinuedLine_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_ReadContinuedLine_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_ReadContinuedLine_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadContinuedLine {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_ReadContinuedLine_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_ReadContinuedLine_paramsKey]*MoqReader_starGenType_ReadContinuedLine_results{},
		}
		r.Moq.ResultsByParams_ReadContinuedLine = append(r.Moq.ResultsByParams_ReadContinuedLine, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadContinuedLine) {
			copy(r.Moq.ResultsByParams_ReadContinuedLine[insertAt+1:], r.Moq.ResultsByParams_ReadContinuedLine[insertAt:0])
			r.Moq.ResultsByParams_ReadContinuedLine[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadContinuedLine(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_ReadContinuedLine_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_ReadContinuedLine_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_ReadContinuedLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_ReadContinuedLine_doFn
				DoReturnFn MoqReader_starGenType_ReadContinuedLine_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_ReadContinuedLine(params MoqReader_starGenType_ReadContinuedLine_params) string {
	return fmt.Sprintf("ReadContinuedLine()")
}

func (m *MoqReader_starGenType) ParamsKey_ReadContinuedLine(params MoqReader_starGenType_ReadContinuedLine_params, anyParams uint64) MoqReader_starGenType_ReadContinuedLine_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_ReadContinuedLine_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_starGenType_recorder) ReadContinuedLineBytes() *MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder {
	return &MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder{
		Params:   MoqReader_starGenType_ReadContinuedLineBytes_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder) Any() *MoqReader_starGenType_ReadContinuedLineBytes_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadContinuedLineBytes(r.Params))
		return nil
	}
	return &MoqReader_starGenType_ReadContinuedLineBytes_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder) Seq() *MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadContinuedLineBytes(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder) NoSeq() *MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadContinuedLineBytes(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder) ReturnResults(result1 []byte, result2 error) *MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadContinuedLineBytes_doFn
		DoReturnFn MoqReader_starGenType_ReadContinuedLineBytes_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder) AndDo(fn MoqReader_starGenType_ReadContinuedLineBytes_doFn) *MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder) DoReturnResults(fn MoqReader_starGenType_ReadContinuedLineBytes_doReturnFn) *MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadContinuedLineBytes_doFn
		DoReturnFn MoqReader_starGenType_ReadContinuedLineBytes_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_ReadContinuedLineBytes_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadContinuedLineBytes {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_ReadContinuedLineBytes_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_ReadContinuedLineBytes_paramsKey]*MoqReader_starGenType_ReadContinuedLineBytes_results{},
		}
		r.Moq.ResultsByParams_ReadContinuedLineBytes = append(r.Moq.ResultsByParams_ReadContinuedLineBytes, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadContinuedLineBytes) {
			copy(r.Moq.ResultsByParams_ReadContinuedLineBytes[insertAt+1:], r.Moq.ResultsByParams_ReadContinuedLineBytes[insertAt:0])
			r.Moq.ResultsByParams_ReadContinuedLineBytes[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadContinuedLineBytes(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_ReadContinuedLineBytes_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_ReadContinuedLineBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_ReadContinuedLineBytes_doFn
				DoReturnFn MoqReader_starGenType_ReadContinuedLineBytes_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_ReadContinuedLineBytes(params MoqReader_starGenType_ReadContinuedLineBytes_params) string {
	return fmt.Sprintf("ReadContinuedLineBytes()")
}

func (m *MoqReader_starGenType) ParamsKey_ReadContinuedLineBytes(params MoqReader_starGenType_ReadContinuedLineBytes_params, anyParams uint64) MoqReader_starGenType_ReadContinuedLineBytes_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_ReadContinuedLineBytes_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_starGenType_recorder) ReadCodeLine(expectCode int) *MoqReader_starGenType_ReadCodeLine_fnRecorder {
	return &MoqReader_starGenType_ReadCodeLine_fnRecorder{
		Params: MoqReader_starGenType_ReadCodeLine_params{
			ExpectCode: expectCode,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_ReadCodeLine_fnRecorder) Any() *MoqReader_starGenType_ReadCodeLine_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadCodeLine(r.Params))
		return nil
	}
	return &MoqReader_starGenType_ReadCodeLine_anyParams{Recorder: r}
}

func (a *MoqReader_starGenType_ReadCodeLine_anyParams) ExpectCode() *MoqReader_starGenType_ReadCodeLine_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqReader_starGenType_ReadCodeLine_fnRecorder) Seq() *MoqReader_starGenType_ReadCodeLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadCodeLine(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_ReadCodeLine_fnRecorder) NoSeq() *MoqReader_starGenType_ReadCodeLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadCodeLine(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_ReadCodeLine_fnRecorder) ReturnResults(code int, message string, err error) *MoqReader_starGenType_ReadCodeLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Code    int
			Message string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadCodeLine_doFn
		DoReturnFn MoqReader_starGenType_ReadCodeLine_doReturnFn
	}{
		Values: &struct {
			Code    int
			Message string
			Err     error
		}{
			Code:    code,
			Message: message,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_ReadCodeLine_fnRecorder) AndDo(fn MoqReader_starGenType_ReadCodeLine_doFn) *MoqReader_starGenType_ReadCodeLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_ReadCodeLine_fnRecorder) DoReturnResults(fn MoqReader_starGenType_ReadCodeLine_doReturnFn) *MoqReader_starGenType_ReadCodeLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Code    int
			Message string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadCodeLine_doFn
		DoReturnFn MoqReader_starGenType_ReadCodeLine_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_ReadCodeLine_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_ReadCodeLine_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadCodeLine {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_ReadCodeLine_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_ReadCodeLine_paramsKey]*MoqReader_starGenType_ReadCodeLine_results{},
		}
		r.Moq.ResultsByParams_ReadCodeLine = append(r.Moq.ResultsByParams_ReadCodeLine, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadCodeLine) {
			copy(r.Moq.ResultsByParams_ReadCodeLine[insertAt+1:], r.Moq.ResultsByParams_ReadCodeLine[insertAt:0])
			r.Moq.ResultsByParams_ReadCodeLine[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadCodeLine(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_ReadCodeLine_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_ReadCodeLine_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_ReadCodeLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Code    int
					Message string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_ReadCodeLine_doFn
				DoReturnFn MoqReader_starGenType_ReadCodeLine_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_ReadCodeLine(params MoqReader_starGenType_ReadCodeLine_params) string {
	return fmt.Sprintf("ReadCodeLine(%#v)", params.ExpectCode)
}

func (m *MoqReader_starGenType) ParamsKey_ReadCodeLine(params MoqReader_starGenType_ReadCodeLine_params, anyParams uint64) MoqReader_starGenType_ReadCodeLine_paramsKey {
	m.Scene.T.Helper()
	var expectCodeUsed int
	var expectCodeUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadCodeLine.ExpectCode == moq.ParamIndexByValue {
			expectCodeUsed = params.ExpectCode
		} else {
			expectCodeUsedHash = hash.DeepHash(params.ExpectCode)
		}
	}
	return MoqReader_starGenType_ReadCodeLine_paramsKey{
		Params: struct{ ExpectCode int }{
			ExpectCode: expectCodeUsed,
		},
		Hashes: struct{ ExpectCode hash.Hash }{
			ExpectCode: expectCodeUsedHash,
		},
	}
}

func (m *MoqReader_starGenType_recorder) ReadResponse(expectCode int) *MoqReader_starGenType_ReadResponse_fnRecorder {
	return &MoqReader_starGenType_ReadResponse_fnRecorder{
		Params: MoqReader_starGenType_ReadResponse_params{
			ExpectCode: expectCode,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_ReadResponse_fnRecorder) Any() *MoqReader_starGenType_ReadResponse_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadResponse(r.Params))
		return nil
	}
	return &MoqReader_starGenType_ReadResponse_anyParams{Recorder: r}
}

func (a *MoqReader_starGenType_ReadResponse_anyParams) ExpectCode() *MoqReader_starGenType_ReadResponse_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqReader_starGenType_ReadResponse_fnRecorder) Seq() *MoqReader_starGenType_ReadResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadResponse(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_ReadResponse_fnRecorder) NoSeq() *MoqReader_starGenType_ReadResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadResponse(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_ReadResponse_fnRecorder) ReturnResults(code int, message string, err error) *MoqReader_starGenType_ReadResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Code    int
			Message string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadResponse_doFn
		DoReturnFn MoqReader_starGenType_ReadResponse_doReturnFn
	}{
		Values: &struct {
			Code    int
			Message string
			Err     error
		}{
			Code:    code,
			Message: message,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_ReadResponse_fnRecorder) AndDo(fn MoqReader_starGenType_ReadResponse_doFn) *MoqReader_starGenType_ReadResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_ReadResponse_fnRecorder) DoReturnResults(fn MoqReader_starGenType_ReadResponse_doReturnFn) *MoqReader_starGenType_ReadResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Code    int
			Message string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadResponse_doFn
		DoReturnFn MoqReader_starGenType_ReadResponse_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_ReadResponse_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_ReadResponse_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadResponse {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_ReadResponse_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_ReadResponse_paramsKey]*MoqReader_starGenType_ReadResponse_results{},
		}
		r.Moq.ResultsByParams_ReadResponse = append(r.Moq.ResultsByParams_ReadResponse, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadResponse) {
			copy(r.Moq.ResultsByParams_ReadResponse[insertAt+1:], r.Moq.ResultsByParams_ReadResponse[insertAt:0])
			r.Moq.ResultsByParams_ReadResponse[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadResponse(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_ReadResponse_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_ReadResponse_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_ReadResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Code    int
					Message string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_ReadResponse_doFn
				DoReturnFn MoqReader_starGenType_ReadResponse_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_ReadResponse(params MoqReader_starGenType_ReadResponse_params) string {
	return fmt.Sprintf("ReadResponse(%#v)", params.ExpectCode)
}

func (m *MoqReader_starGenType) ParamsKey_ReadResponse(params MoqReader_starGenType_ReadResponse_params, anyParams uint64) MoqReader_starGenType_ReadResponse_paramsKey {
	m.Scene.T.Helper()
	var expectCodeUsed int
	var expectCodeUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadResponse.ExpectCode == moq.ParamIndexByValue {
			expectCodeUsed = params.ExpectCode
		} else {
			expectCodeUsedHash = hash.DeepHash(params.ExpectCode)
		}
	}
	return MoqReader_starGenType_ReadResponse_paramsKey{
		Params: struct{ ExpectCode int }{
			ExpectCode: expectCodeUsed,
		},
		Hashes: struct{ ExpectCode hash.Hash }{
			ExpectCode: expectCodeUsedHash,
		},
	}
}

func (m *MoqReader_starGenType_recorder) DotReader() *MoqReader_starGenType_DotReader_fnRecorder {
	return &MoqReader_starGenType_DotReader_fnRecorder{
		Params:   MoqReader_starGenType_DotReader_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_DotReader_fnRecorder) Any() *MoqReader_starGenType_DotReader_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DotReader(r.Params))
		return nil
	}
	return &MoqReader_starGenType_DotReader_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_DotReader_fnRecorder) Seq() *MoqReader_starGenType_DotReader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DotReader(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_DotReader_fnRecorder) NoSeq() *MoqReader_starGenType_DotReader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DotReader(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_DotReader_fnRecorder) ReturnResults(result1 io.Reader) *MoqReader_starGenType_DotReader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.Reader
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_DotReader_doFn
		DoReturnFn MoqReader_starGenType_DotReader_doReturnFn
	}{
		Values: &struct {
			Result1 io.Reader
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_DotReader_fnRecorder) AndDo(fn MoqReader_starGenType_DotReader_doFn) *MoqReader_starGenType_DotReader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_DotReader_fnRecorder) DoReturnResults(fn MoqReader_starGenType_DotReader_doReturnFn) *MoqReader_starGenType_DotReader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.Reader
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_DotReader_doFn
		DoReturnFn MoqReader_starGenType_DotReader_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_DotReader_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_DotReader_resultsByParams
	for n, res := range r.Moq.ResultsByParams_DotReader {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_DotReader_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_DotReader_paramsKey]*MoqReader_starGenType_DotReader_results{},
		}
		r.Moq.ResultsByParams_DotReader = append(r.Moq.ResultsByParams_DotReader, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_DotReader) {
			copy(r.Moq.ResultsByParams_DotReader[insertAt+1:], r.Moq.ResultsByParams_DotReader[insertAt:0])
			r.Moq.ResultsByParams_DotReader[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_DotReader(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_DotReader_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_DotReader_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_DotReader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 io.Reader
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_DotReader_doFn
				DoReturnFn MoqReader_starGenType_DotReader_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_DotReader(params MoqReader_starGenType_DotReader_params) string {
	return fmt.Sprintf("DotReader()")
}

func (m *MoqReader_starGenType) ParamsKey_DotReader(params MoqReader_starGenType_DotReader_params, anyParams uint64) MoqReader_starGenType_DotReader_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_DotReader_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_starGenType_recorder) ReadDotBytes() *MoqReader_starGenType_ReadDotBytes_fnRecorder {
	return &MoqReader_starGenType_ReadDotBytes_fnRecorder{
		Params:   MoqReader_starGenType_ReadDotBytes_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_ReadDotBytes_fnRecorder) Any() *MoqReader_starGenType_ReadDotBytes_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadDotBytes(r.Params))
		return nil
	}
	return &MoqReader_starGenType_ReadDotBytes_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_ReadDotBytes_fnRecorder) Seq() *MoqReader_starGenType_ReadDotBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadDotBytes(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_ReadDotBytes_fnRecorder) NoSeq() *MoqReader_starGenType_ReadDotBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadDotBytes(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_ReadDotBytes_fnRecorder) ReturnResults(result1 []byte, result2 error) *MoqReader_starGenType_ReadDotBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadDotBytes_doFn
		DoReturnFn MoqReader_starGenType_ReadDotBytes_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_ReadDotBytes_fnRecorder) AndDo(fn MoqReader_starGenType_ReadDotBytes_doFn) *MoqReader_starGenType_ReadDotBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_ReadDotBytes_fnRecorder) DoReturnResults(fn MoqReader_starGenType_ReadDotBytes_doReturnFn) *MoqReader_starGenType_ReadDotBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadDotBytes_doFn
		DoReturnFn MoqReader_starGenType_ReadDotBytes_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_ReadDotBytes_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_ReadDotBytes_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadDotBytes {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_ReadDotBytes_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_ReadDotBytes_paramsKey]*MoqReader_starGenType_ReadDotBytes_results{},
		}
		r.Moq.ResultsByParams_ReadDotBytes = append(r.Moq.ResultsByParams_ReadDotBytes, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadDotBytes) {
			copy(r.Moq.ResultsByParams_ReadDotBytes[insertAt+1:], r.Moq.ResultsByParams_ReadDotBytes[insertAt:0])
			r.Moq.ResultsByParams_ReadDotBytes[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadDotBytes(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_ReadDotBytes_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_ReadDotBytes_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_ReadDotBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_ReadDotBytes_doFn
				DoReturnFn MoqReader_starGenType_ReadDotBytes_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_ReadDotBytes(params MoqReader_starGenType_ReadDotBytes_params) string {
	return fmt.Sprintf("ReadDotBytes()")
}

func (m *MoqReader_starGenType) ParamsKey_ReadDotBytes(params MoqReader_starGenType_ReadDotBytes_params, anyParams uint64) MoqReader_starGenType_ReadDotBytes_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_ReadDotBytes_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_starGenType_recorder) ReadDotLines() *MoqReader_starGenType_ReadDotLines_fnRecorder {
	return &MoqReader_starGenType_ReadDotLines_fnRecorder{
		Params:   MoqReader_starGenType_ReadDotLines_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_ReadDotLines_fnRecorder) Any() *MoqReader_starGenType_ReadDotLines_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadDotLines(r.Params))
		return nil
	}
	return &MoqReader_starGenType_ReadDotLines_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_ReadDotLines_fnRecorder) Seq() *MoqReader_starGenType_ReadDotLines_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadDotLines(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_ReadDotLines_fnRecorder) NoSeq() *MoqReader_starGenType_ReadDotLines_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadDotLines(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_ReadDotLines_fnRecorder) ReturnResults(result1 []string, result2 error) *MoqReader_starGenType_ReadDotLines_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadDotLines_doFn
		DoReturnFn MoqReader_starGenType_ReadDotLines_doReturnFn
	}{
		Values: &struct {
			Result1 []string
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_ReadDotLines_fnRecorder) AndDo(fn MoqReader_starGenType_ReadDotLines_doFn) *MoqReader_starGenType_ReadDotLines_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_ReadDotLines_fnRecorder) DoReturnResults(fn MoqReader_starGenType_ReadDotLines_doReturnFn) *MoqReader_starGenType_ReadDotLines_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadDotLines_doFn
		DoReturnFn MoqReader_starGenType_ReadDotLines_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_ReadDotLines_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_ReadDotLines_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadDotLines {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_ReadDotLines_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_ReadDotLines_paramsKey]*MoqReader_starGenType_ReadDotLines_results{},
		}
		r.Moq.ResultsByParams_ReadDotLines = append(r.Moq.ResultsByParams_ReadDotLines, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadDotLines) {
			copy(r.Moq.ResultsByParams_ReadDotLines[insertAt+1:], r.Moq.ResultsByParams_ReadDotLines[insertAt:0])
			r.Moq.ResultsByParams_ReadDotLines[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadDotLines(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_ReadDotLines_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_ReadDotLines_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_ReadDotLines_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []string
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_ReadDotLines_doFn
				DoReturnFn MoqReader_starGenType_ReadDotLines_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_ReadDotLines(params MoqReader_starGenType_ReadDotLines_params) string {
	return fmt.Sprintf("ReadDotLines()")
}

func (m *MoqReader_starGenType) ParamsKey_ReadDotLines(params MoqReader_starGenType_ReadDotLines_params, anyParams uint64) MoqReader_starGenType_ReadDotLines_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_ReadDotLines_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_starGenType_recorder) ReadMIMEHeader() *MoqReader_starGenType_ReadMIMEHeader_fnRecorder {
	return &MoqReader_starGenType_ReadMIMEHeader_fnRecorder{
		Params:   MoqReader_starGenType_ReadMIMEHeader_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_ReadMIMEHeader_fnRecorder) Any() *MoqReader_starGenType_ReadMIMEHeader_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadMIMEHeader(r.Params))
		return nil
	}
	return &MoqReader_starGenType_ReadMIMEHeader_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_ReadMIMEHeader_fnRecorder) Seq() *MoqReader_starGenType_ReadMIMEHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadMIMEHeader(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_ReadMIMEHeader_fnRecorder) NoSeq() *MoqReader_starGenType_ReadMIMEHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadMIMEHeader(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_ReadMIMEHeader_fnRecorder) ReturnResults(result1 textproto.MIMEHeader, result2 error) *MoqReader_starGenType_ReadMIMEHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 textproto.MIMEHeader
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadMIMEHeader_doFn
		DoReturnFn MoqReader_starGenType_ReadMIMEHeader_doReturnFn
	}{
		Values: &struct {
			Result1 textproto.MIMEHeader
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_ReadMIMEHeader_fnRecorder) AndDo(fn MoqReader_starGenType_ReadMIMEHeader_doFn) *MoqReader_starGenType_ReadMIMEHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_ReadMIMEHeader_fnRecorder) DoReturnResults(fn MoqReader_starGenType_ReadMIMEHeader_doReturnFn) *MoqReader_starGenType_ReadMIMEHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 textproto.MIMEHeader
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadMIMEHeader_doFn
		DoReturnFn MoqReader_starGenType_ReadMIMEHeader_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_ReadMIMEHeader_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_ReadMIMEHeader_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadMIMEHeader {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_ReadMIMEHeader_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_ReadMIMEHeader_paramsKey]*MoqReader_starGenType_ReadMIMEHeader_results{},
		}
		r.Moq.ResultsByParams_ReadMIMEHeader = append(r.Moq.ResultsByParams_ReadMIMEHeader, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadMIMEHeader) {
			copy(r.Moq.ResultsByParams_ReadMIMEHeader[insertAt+1:], r.Moq.ResultsByParams_ReadMIMEHeader[insertAt:0])
			r.Moq.ResultsByParams_ReadMIMEHeader[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadMIMEHeader(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_ReadMIMEHeader_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_ReadMIMEHeader_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_ReadMIMEHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 textproto.MIMEHeader
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_ReadMIMEHeader_doFn
				DoReturnFn MoqReader_starGenType_ReadMIMEHeader_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_ReadMIMEHeader(params MoqReader_starGenType_ReadMIMEHeader_params) string {
	return fmt.Sprintf("ReadMIMEHeader()")
}

func (m *MoqReader_starGenType) ParamsKey_ReadMIMEHeader(params MoqReader_starGenType_ReadMIMEHeader_params, anyParams uint64) MoqReader_starGenType_ReadMIMEHeader_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_ReadMIMEHeader_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqReader_starGenType) Reset() {
	m.ResultsByParams_ReadLine = nil
	m.ResultsByParams_ReadLineBytes = nil
	m.ResultsByParams_ReadContinuedLine = nil
	m.ResultsByParams_ReadContinuedLineBytes = nil
	m.ResultsByParams_ReadCodeLine = nil
	m.ResultsByParams_ReadResponse = nil
	m.ResultsByParams_DotReader = nil
	m.ResultsByParams_ReadDotBytes = nil
	m.ResultsByParams_ReadDotLines = nil
	m.ResultsByParams_ReadMIMEHeader = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqReader_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_ReadLine {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadLine(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadLineBytes {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadLineBytes(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadContinuedLine {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadContinuedLine(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadContinuedLineBytes {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadContinuedLineBytes(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadCodeLine {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadCodeLine(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadResponse {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadResponse(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_DotReader {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_DotReader(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadDotBytes {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadDotBytes(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadDotLines {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadDotLines(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadMIMEHeader {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadMIMEHeader(results.Params))
			}
		}
	}
}
