// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package textproto

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that textproto.MIMEHeader_genType is
// mocked completely
var _ MIMEHeader_genType = (*MoqMIMEHeader_genType_mock)(nil)

// MIMEHeader_genType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type MIMEHeader_genType interface {
	Add(key, value string)
	Set(key, value string)
	Get(key string) string
	Values(key string) []string
	Del(key string)
}

// MoqMIMEHeader_genType holds the state of a moq of the MIMEHeader_genType
// type
type MoqMIMEHeader_genType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqMIMEHeader_genType_mock

	ResultsByParams_Add    []MoqMIMEHeader_genType_Add_resultsByParams
	ResultsByParams_Set    []MoqMIMEHeader_genType_Set_resultsByParams
	ResultsByParams_Get    []MoqMIMEHeader_genType_Get_resultsByParams
	ResultsByParams_Values []MoqMIMEHeader_genType_Values_resultsByParams
	ResultsByParams_Del    []MoqMIMEHeader_genType_Del_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Add struct {
				Key   moq.ParamIndexing
				Value moq.ParamIndexing
			}
			Set struct {
				Key   moq.ParamIndexing
				Value moq.ParamIndexing
			}
			Get struct {
				Key moq.ParamIndexing
			}
			Values struct {
				Key moq.ParamIndexing
			}
			Del struct {
				Key moq.ParamIndexing
			}
		}
	}
	// MoqMIMEHeader_genType_mock isolates the mock interface of the
}

// MIMEHeader_genType type
type MoqMIMEHeader_genType_mock struct {
	Moq *MoqMIMEHeader_genType
}

// MoqMIMEHeader_genType_recorder isolates the recorder interface of the
// MIMEHeader_genType type
type MoqMIMEHeader_genType_recorder struct {
	Moq *MoqMIMEHeader_genType
}

// MoqMIMEHeader_genType_Add_params holds the params of the MIMEHeader_genType
// type
type MoqMIMEHeader_genType_Add_params struct{ Key, Value string }

// MoqMIMEHeader_genType_Add_paramsKey holds the map key params of the
// MIMEHeader_genType type
type MoqMIMEHeader_genType_Add_paramsKey struct {
	Params struct{ Key, Value string }
	Hashes struct{ Key, Value hash.Hash }
}

// MoqMIMEHeader_genType_Add_resultsByParams contains the results for a given
// set of parameters for the MIMEHeader_genType type
type MoqMIMEHeader_genType_Add_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMIMEHeader_genType_Add_paramsKey]*MoqMIMEHeader_genType_Add_results
}

// MoqMIMEHeader_genType_Add_doFn defines the type of function needed when
// calling AndDo for the MIMEHeader_genType type
type MoqMIMEHeader_genType_Add_doFn func(key, value string)

// MoqMIMEHeader_genType_Add_doReturnFn defines the type of function needed
// when calling DoReturnResults for the MIMEHeader_genType type
type MoqMIMEHeader_genType_Add_doReturnFn func(key, value string)

// MoqMIMEHeader_genType_Add_results holds the results of the
// MIMEHeader_genType type
type MoqMIMEHeader_genType_Add_results struct {
	Params  MoqMIMEHeader_genType_Add_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMIMEHeader_genType_Add_doFn
		DoReturnFn MoqMIMEHeader_genType_Add_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMIMEHeader_genType_Add_fnRecorder routes recorded function calls to the
// MoqMIMEHeader_genType moq
type MoqMIMEHeader_genType_Add_fnRecorder struct {
	Params    MoqMIMEHeader_genType_Add_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMIMEHeader_genType_Add_results
	Moq       *MoqMIMEHeader_genType
}

// MoqMIMEHeader_genType_Add_anyParams isolates the any params functions of the
// MIMEHeader_genType type
type MoqMIMEHeader_genType_Add_anyParams struct {
	Recorder *MoqMIMEHeader_genType_Add_fnRecorder
}

// MoqMIMEHeader_genType_Set_params holds the params of the MIMEHeader_genType
// type
type MoqMIMEHeader_genType_Set_params struct{ Key, Value string }

// MoqMIMEHeader_genType_Set_paramsKey holds the map key params of the
// MIMEHeader_genType type
type MoqMIMEHeader_genType_Set_paramsKey struct {
	Params struct{ Key, Value string }
	Hashes struct{ Key, Value hash.Hash }
}

// MoqMIMEHeader_genType_Set_resultsByParams contains the results for a given
// set of parameters for the MIMEHeader_genType type
type MoqMIMEHeader_genType_Set_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMIMEHeader_genType_Set_paramsKey]*MoqMIMEHeader_genType_Set_results
}

// MoqMIMEHeader_genType_Set_doFn defines the type of function needed when
// calling AndDo for the MIMEHeader_genType type
type MoqMIMEHeader_genType_Set_doFn func(key, value string)

// MoqMIMEHeader_genType_Set_doReturnFn defines the type of function needed
// when calling DoReturnResults for the MIMEHeader_genType type
type MoqMIMEHeader_genType_Set_doReturnFn func(key, value string)

// MoqMIMEHeader_genType_Set_results holds the results of the
// MIMEHeader_genType type
type MoqMIMEHeader_genType_Set_results struct {
	Params  MoqMIMEHeader_genType_Set_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMIMEHeader_genType_Set_doFn
		DoReturnFn MoqMIMEHeader_genType_Set_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMIMEHeader_genType_Set_fnRecorder routes recorded function calls to the
// MoqMIMEHeader_genType moq
type MoqMIMEHeader_genType_Set_fnRecorder struct {
	Params    MoqMIMEHeader_genType_Set_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMIMEHeader_genType_Set_results
	Moq       *MoqMIMEHeader_genType
}

// MoqMIMEHeader_genType_Set_anyParams isolates the any params functions of the
// MIMEHeader_genType type
type MoqMIMEHeader_genType_Set_anyParams struct {
	Recorder *MoqMIMEHeader_genType_Set_fnRecorder
}

// MoqMIMEHeader_genType_Get_params holds the params of the MIMEHeader_genType
// type
type MoqMIMEHeader_genType_Get_params struct{ Key string }

// MoqMIMEHeader_genType_Get_paramsKey holds the map key params of the
// MIMEHeader_genType type
type MoqMIMEHeader_genType_Get_paramsKey struct {
	Params struct{ Key string }
	Hashes struct{ Key hash.Hash }
}

// MoqMIMEHeader_genType_Get_resultsByParams contains the results for a given
// set of parameters for the MIMEHeader_genType type
type MoqMIMEHeader_genType_Get_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMIMEHeader_genType_Get_paramsKey]*MoqMIMEHeader_genType_Get_results
}

// MoqMIMEHeader_genType_Get_doFn defines the type of function needed when
// calling AndDo for the MIMEHeader_genType type
type MoqMIMEHeader_genType_Get_doFn func(key string)

// MoqMIMEHeader_genType_Get_doReturnFn defines the type of function needed
// when calling DoReturnResults for the MIMEHeader_genType type
type MoqMIMEHeader_genType_Get_doReturnFn func(key string) string

// MoqMIMEHeader_genType_Get_results holds the results of the
// MIMEHeader_genType type
type MoqMIMEHeader_genType_Get_results struct {
	Params  MoqMIMEHeader_genType_Get_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqMIMEHeader_genType_Get_doFn
		DoReturnFn MoqMIMEHeader_genType_Get_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMIMEHeader_genType_Get_fnRecorder routes recorded function calls to the
// MoqMIMEHeader_genType moq
type MoqMIMEHeader_genType_Get_fnRecorder struct {
	Params    MoqMIMEHeader_genType_Get_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMIMEHeader_genType_Get_results
	Moq       *MoqMIMEHeader_genType
}

// MoqMIMEHeader_genType_Get_anyParams isolates the any params functions of the
// MIMEHeader_genType type
type MoqMIMEHeader_genType_Get_anyParams struct {
	Recorder *MoqMIMEHeader_genType_Get_fnRecorder
}

// MoqMIMEHeader_genType_Values_params holds the params of the
// MIMEHeader_genType type
type MoqMIMEHeader_genType_Values_params struct{ Key string }

// MoqMIMEHeader_genType_Values_paramsKey holds the map key params of the
// MIMEHeader_genType type
type MoqMIMEHeader_genType_Values_paramsKey struct {
	Params struct{ Key string }
	Hashes struct{ Key hash.Hash }
}

// MoqMIMEHeader_genType_Values_resultsByParams contains the results for a
// given set of parameters for the MIMEHeader_genType type
type MoqMIMEHeader_genType_Values_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMIMEHeader_genType_Values_paramsKey]*MoqMIMEHeader_genType_Values_results
}

// MoqMIMEHeader_genType_Values_doFn defines the type of function needed when
// calling AndDo for the MIMEHeader_genType type
type MoqMIMEHeader_genType_Values_doFn func(key string)

// MoqMIMEHeader_genType_Values_doReturnFn defines the type of function needed
// when calling DoReturnResults for the MIMEHeader_genType type
type MoqMIMEHeader_genType_Values_doReturnFn func(key string) []string

// MoqMIMEHeader_genType_Values_results holds the results of the
// MIMEHeader_genType type
type MoqMIMEHeader_genType_Values_results struct {
	Params  MoqMIMEHeader_genType_Values_params
	Results []struct {
		Values *struct {
			Result1 []string
		}
		Sequence   uint32
		DoFn       MoqMIMEHeader_genType_Values_doFn
		DoReturnFn MoqMIMEHeader_genType_Values_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMIMEHeader_genType_Values_fnRecorder routes recorded function calls to
// the MoqMIMEHeader_genType moq
type MoqMIMEHeader_genType_Values_fnRecorder struct {
	Params    MoqMIMEHeader_genType_Values_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMIMEHeader_genType_Values_results
	Moq       *MoqMIMEHeader_genType
}

// MoqMIMEHeader_genType_Values_anyParams isolates the any params functions of
// the MIMEHeader_genType type
type MoqMIMEHeader_genType_Values_anyParams struct {
	Recorder *MoqMIMEHeader_genType_Values_fnRecorder
}

// MoqMIMEHeader_genType_Del_params holds the params of the MIMEHeader_genType
// type
type MoqMIMEHeader_genType_Del_params struct{ Key string }

// MoqMIMEHeader_genType_Del_paramsKey holds the map key params of the
// MIMEHeader_genType type
type MoqMIMEHeader_genType_Del_paramsKey struct {
	Params struct{ Key string }
	Hashes struct{ Key hash.Hash }
}

// MoqMIMEHeader_genType_Del_resultsByParams contains the results for a given
// set of parameters for the MIMEHeader_genType type
type MoqMIMEHeader_genType_Del_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMIMEHeader_genType_Del_paramsKey]*MoqMIMEHeader_genType_Del_results
}

// MoqMIMEHeader_genType_Del_doFn defines the type of function needed when
// calling AndDo for the MIMEHeader_genType type
type MoqMIMEHeader_genType_Del_doFn func(key string)

// MoqMIMEHeader_genType_Del_doReturnFn defines the type of function needed
// when calling DoReturnResults for the MIMEHeader_genType type
type MoqMIMEHeader_genType_Del_doReturnFn func(key string)

// MoqMIMEHeader_genType_Del_results holds the results of the
// MIMEHeader_genType type
type MoqMIMEHeader_genType_Del_results struct {
	Params  MoqMIMEHeader_genType_Del_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMIMEHeader_genType_Del_doFn
		DoReturnFn MoqMIMEHeader_genType_Del_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMIMEHeader_genType_Del_fnRecorder routes recorded function calls to the
// MoqMIMEHeader_genType moq
type MoqMIMEHeader_genType_Del_fnRecorder struct {
	Params    MoqMIMEHeader_genType_Del_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMIMEHeader_genType_Del_results
	Moq       *MoqMIMEHeader_genType
}

// MoqMIMEHeader_genType_Del_anyParams isolates the any params functions of the
// MIMEHeader_genType type
type MoqMIMEHeader_genType_Del_anyParams struct {
	Recorder *MoqMIMEHeader_genType_Del_fnRecorder
}

// NewMoqMIMEHeader_genType creates a new moq of the MIMEHeader_genType type
func NewMoqMIMEHeader_genType(scene *moq.Scene, config *moq.Config) *MoqMIMEHeader_genType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqMIMEHeader_genType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqMIMEHeader_genType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Add struct {
					Key   moq.ParamIndexing
					Value moq.ParamIndexing
				}
				Set struct {
					Key   moq.ParamIndexing
					Value moq.ParamIndexing
				}
				Get struct {
					Key moq.ParamIndexing
				}
				Values struct {
					Key moq.ParamIndexing
				}
				Del struct {
					Key moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Add struct {
				Key   moq.ParamIndexing
				Value moq.ParamIndexing
			}
			Set struct {
				Key   moq.ParamIndexing
				Value moq.ParamIndexing
			}
			Get struct {
				Key moq.ParamIndexing
			}
			Values struct {
				Key moq.ParamIndexing
			}
			Del struct {
				Key moq.ParamIndexing
			}
		}{
			Add: struct {
				Key   moq.ParamIndexing
				Value moq.ParamIndexing
			}{
				Key:   moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
			},
			Set: struct {
				Key   moq.ParamIndexing
				Value moq.ParamIndexing
			}{
				Key:   moq.ParamIndexByValue,
				Value: moq.ParamIndexByValue,
			},
			Get: struct {
				Key moq.ParamIndexing
			}{
				Key: moq.ParamIndexByValue,
			},
			Values: struct {
				Key moq.ParamIndexing
			}{
				Key: moq.ParamIndexByValue,
			},
			Del: struct {
				Key moq.ParamIndexing
			}{
				Key: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the MIMEHeader_genType type
func (m *MoqMIMEHeader_genType) Mock() *MoqMIMEHeader_genType_mock { return m.Moq }

func (m *MoqMIMEHeader_genType_mock) Add(key, value string) {
	m.Moq.Scene.T.Helper()
	params := MoqMIMEHeader_genType_Add_params{
		Key:   key,
		Value: value,
	}
	var results *MoqMIMEHeader_genType_Add_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Add {
		paramsKey := m.Moq.ParamsKey_Add(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Add(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Add(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Add(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key, value)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(key, value)
	}
	return
}

func (m *MoqMIMEHeader_genType_mock) Set(key, value string) {
	m.Moq.Scene.T.Helper()
	params := MoqMIMEHeader_genType_Set_params{
		Key:   key,
		Value: value,
	}
	var results *MoqMIMEHeader_genType_Set_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Set {
		paramsKey := m.Moq.ParamsKey_Set(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Set(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Set(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Set(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key, value)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(key, value)
	}
	return
}

func (m *MoqMIMEHeader_genType_mock) Get(key string) (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqMIMEHeader_genType_Get_params{
		Key: key,
	}
	var results *MoqMIMEHeader_genType_Get_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Get {
		paramsKey := m.Moq.ParamsKey_Get(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Get(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Get(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Get(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(key)
	}
	return
}

func (m *MoqMIMEHeader_genType_mock) Values(key string) (result1 []string) {
	m.Moq.Scene.T.Helper()
	params := MoqMIMEHeader_genType_Values_params{
		Key: key,
	}
	var results *MoqMIMEHeader_genType_Values_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Values {
		paramsKey := m.Moq.ParamsKey_Values(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Values(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Values(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Values(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(key)
	}
	return
}

func (m *MoqMIMEHeader_genType_mock) Del(key string) {
	m.Moq.Scene.T.Helper()
	params := MoqMIMEHeader_genType_Del_params{
		Key: key,
	}
	var results *MoqMIMEHeader_genType_Del_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Del {
		paramsKey := m.Moq.ParamsKey_Del(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Del(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Del(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Del(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(key)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(key)
	}
	return
}

// OnCall returns the recorder implementation of the MIMEHeader_genType type
func (m *MoqMIMEHeader_genType) OnCall() *MoqMIMEHeader_genType_recorder {
	return &MoqMIMEHeader_genType_recorder{
		Moq: m,
	}
}

func (m *MoqMIMEHeader_genType_recorder) Add(key, value string) *MoqMIMEHeader_genType_Add_fnRecorder {
	return &MoqMIMEHeader_genType_Add_fnRecorder{
		Params: MoqMIMEHeader_genType_Add_params{
			Key:   key,
			Value: value,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMIMEHeader_genType_Add_fnRecorder) Any() *MoqMIMEHeader_genType_Add_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	return &MoqMIMEHeader_genType_Add_anyParams{Recorder: r}
}

func (a *MoqMIMEHeader_genType_Add_anyParams) Key() *MoqMIMEHeader_genType_Add_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqMIMEHeader_genType_Add_anyParams) Value() *MoqMIMEHeader_genType_Add_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqMIMEHeader_genType_Add_fnRecorder) Seq() *MoqMIMEHeader_genType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMIMEHeader_genType_Add_fnRecorder) NoSeq() *MoqMIMEHeader_genType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMIMEHeader_genType_Add_fnRecorder) ReturnResults() *MoqMIMEHeader_genType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMIMEHeader_genType_Add_doFn
		DoReturnFn MoqMIMEHeader_genType_Add_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMIMEHeader_genType_Add_fnRecorder) AndDo(fn MoqMIMEHeader_genType_Add_doFn) *MoqMIMEHeader_genType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMIMEHeader_genType_Add_fnRecorder) DoReturnResults(fn MoqMIMEHeader_genType_Add_doReturnFn) *MoqMIMEHeader_genType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMIMEHeader_genType_Add_doFn
		DoReturnFn MoqMIMEHeader_genType_Add_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMIMEHeader_genType_Add_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMIMEHeader_genType_Add_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Add {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMIMEHeader_genType_Add_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMIMEHeader_genType_Add_paramsKey]*MoqMIMEHeader_genType_Add_results{},
		}
		r.Moq.ResultsByParams_Add = append(r.Moq.ResultsByParams_Add, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Add) {
			copy(r.Moq.ResultsByParams_Add[insertAt+1:], r.Moq.ResultsByParams_Add[insertAt:0])
			r.Moq.ResultsByParams_Add[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Add(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMIMEHeader_genType_Add_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMIMEHeader_genType_Add_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMIMEHeader_genType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqMIMEHeader_genType_Add_doFn
				DoReturnFn MoqMIMEHeader_genType_Add_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMIMEHeader_genType) PrettyParams_Add(params MoqMIMEHeader_genType_Add_params) string {
	return fmt.Sprintf("Add(%#v, %#v)", params.Key, params.Value)
}

func (m *MoqMIMEHeader_genType) ParamsKey_Add(params MoqMIMEHeader_genType_Add_params, anyParams uint64) MoqMIMEHeader_genType_Add_paramsKey {
	m.Scene.T.Helper()
	var keyUsed string
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Add.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	var valueUsed string
	var valueUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Add.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	return MoqMIMEHeader_genType_Add_paramsKey{
		Params: struct{ Key, Value string }{
			Key:   keyUsed,
			Value: valueUsed,
		},
		Hashes: struct{ Key, Value hash.Hash }{
			Key:   keyUsedHash,
			Value: valueUsedHash,
		},
	}
}

func (m *MoqMIMEHeader_genType_recorder) Set(key, value string) *MoqMIMEHeader_genType_Set_fnRecorder {
	return &MoqMIMEHeader_genType_Set_fnRecorder{
		Params: MoqMIMEHeader_genType_Set_params{
			Key:   key,
			Value: value,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMIMEHeader_genType_Set_fnRecorder) Any() *MoqMIMEHeader_genType_Set_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	return &MoqMIMEHeader_genType_Set_anyParams{Recorder: r}
}

func (a *MoqMIMEHeader_genType_Set_anyParams) Key() *MoqMIMEHeader_genType_Set_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqMIMEHeader_genType_Set_anyParams) Value() *MoqMIMEHeader_genType_Set_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqMIMEHeader_genType_Set_fnRecorder) Seq() *MoqMIMEHeader_genType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMIMEHeader_genType_Set_fnRecorder) NoSeq() *MoqMIMEHeader_genType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Set(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMIMEHeader_genType_Set_fnRecorder) ReturnResults() *MoqMIMEHeader_genType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMIMEHeader_genType_Set_doFn
		DoReturnFn MoqMIMEHeader_genType_Set_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMIMEHeader_genType_Set_fnRecorder) AndDo(fn MoqMIMEHeader_genType_Set_doFn) *MoqMIMEHeader_genType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMIMEHeader_genType_Set_fnRecorder) DoReturnResults(fn MoqMIMEHeader_genType_Set_doReturnFn) *MoqMIMEHeader_genType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMIMEHeader_genType_Set_doFn
		DoReturnFn MoqMIMEHeader_genType_Set_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMIMEHeader_genType_Set_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMIMEHeader_genType_Set_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Set {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMIMEHeader_genType_Set_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMIMEHeader_genType_Set_paramsKey]*MoqMIMEHeader_genType_Set_results{},
		}
		r.Moq.ResultsByParams_Set = append(r.Moq.ResultsByParams_Set, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Set) {
			copy(r.Moq.ResultsByParams_Set[insertAt+1:], r.Moq.ResultsByParams_Set[insertAt:0])
			r.Moq.ResultsByParams_Set[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Set(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMIMEHeader_genType_Set_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMIMEHeader_genType_Set_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMIMEHeader_genType_Set_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqMIMEHeader_genType_Set_doFn
				DoReturnFn MoqMIMEHeader_genType_Set_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMIMEHeader_genType) PrettyParams_Set(params MoqMIMEHeader_genType_Set_params) string {
	return fmt.Sprintf("Set(%#v, %#v)", params.Key, params.Value)
}

func (m *MoqMIMEHeader_genType) ParamsKey_Set(params MoqMIMEHeader_genType_Set_params, anyParams uint64) MoqMIMEHeader_genType_Set_paramsKey {
	m.Scene.T.Helper()
	var keyUsed string
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Set.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	var valueUsed string
	var valueUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Set.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	return MoqMIMEHeader_genType_Set_paramsKey{
		Params: struct{ Key, Value string }{
			Key:   keyUsed,
			Value: valueUsed,
		},
		Hashes: struct{ Key, Value hash.Hash }{
			Key:   keyUsedHash,
			Value: valueUsedHash,
		},
	}
}

func (m *MoqMIMEHeader_genType_recorder) Get(key string) *MoqMIMEHeader_genType_Get_fnRecorder {
	return &MoqMIMEHeader_genType_Get_fnRecorder{
		Params: MoqMIMEHeader_genType_Get_params{
			Key: key,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMIMEHeader_genType_Get_fnRecorder) Any() *MoqMIMEHeader_genType_Get_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Get(r.Params))
		return nil
	}
	return &MoqMIMEHeader_genType_Get_anyParams{Recorder: r}
}

func (a *MoqMIMEHeader_genType_Get_anyParams) Key() *MoqMIMEHeader_genType_Get_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqMIMEHeader_genType_Get_fnRecorder) Seq() *MoqMIMEHeader_genType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Get(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMIMEHeader_genType_Get_fnRecorder) NoSeq() *MoqMIMEHeader_genType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Get(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMIMEHeader_genType_Get_fnRecorder) ReturnResults(result1 string) *MoqMIMEHeader_genType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqMIMEHeader_genType_Get_doFn
		DoReturnFn MoqMIMEHeader_genType_Get_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMIMEHeader_genType_Get_fnRecorder) AndDo(fn MoqMIMEHeader_genType_Get_doFn) *MoqMIMEHeader_genType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMIMEHeader_genType_Get_fnRecorder) DoReturnResults(fn MoqMIMEHeader_genType_Get_doReturnFn) *MoqMIMEHeader_genType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqMIMEHeader_genType_Get_doFn
		DoReturnFn MoqMIMEHeader_genType_Get_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMIMEHeader_genType_Get_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMIMEHeader_genType_Get_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Get {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMIMEHeader_genType_Get_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMIMEHeader_genType_Get_paramsKey]*MoqMIMEHeader_genType_Get_results{},
		}
		r.Moq.ResultsByParams_Get = append(r.Moq.ResultsByParams_Get, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Get) {
			copy(r.Moq.ResultsByParams_Get[insertAt+1:], r.Moq.ResultsByParams_Get[insertAt:0])
			r.Moq.ResultsByParams_Get[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Get(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMIMEHeader_genType_Get_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMIMEHeader_genType_Get_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMIMEHeader_genType_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqMIMEHeader_genType_Get_doFn
				DoReturnFn MoqMIMEHeader_genType_Get_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMIMEHeader_genType) PrettyParams_Get(params MoqMIMEHeader_genType_Get_params) string {
	return fmt.Sprintf("Get(%#v)", params.Key)
}

func (m *MoqMIMEHeader_genType) ParamsKey_Get(params MoqMIMEHeader_genType_Get_params, anyParams uint64) MoqMIMEHeader_genType_Get_paramsKey {
	m.Scene.T.Helper()
	var keyUsed string
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Get.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	return MoqMIMEHeader_genType_Get_paramsKey{
		Params: struct{ Key string }{
			Key: keyUsed,
		},
		Hashes: struct{ Key hash.Hash }{
			Key: keyUsedHash,
		},
	}
}

func (m *MoqMIMEHeader_genType_recorder) Values(key string) *MoqMIMEHeader_genType_Values_fnRecorder {
	return &MoqMIMEHeader_genType_Values_fnRecorder{
		Params: MoqMIMEHeader_genType_Values_params{
			Key: key,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMIMEHeader_genType_Values_fnRecorder) Any() *MoqMIMEHeader_genType_Values_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Values(r.Params))
		return nil
	}
	return &MoqMIMEHeader_genType_Values_anyParams{Recorder: r}
}

func (a *MoqMIMEHeader_genType_Values_anyParams) Key() *MoqMIMEHeader_genType_Values_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqMIMEHeader_genType_Values_fnRecorder) Seq() *MoqMIMEHeader_genType_Values_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Values(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMIMEHeader_genType_Values_fnRecorder) NoSeq() *MoqMIMEHeader_genType_Values_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Values(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMIMEHeader_genType_Values_fnRecorder) ReturnResults(result1 []string) *MoqMIMEHeader_genType_Values_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []string
		}
		Sequence   uint32
		DoFn       MoqMIMEHeader_genType_Values_doFn
		DoReturnFn MoqMIMEHeader_genType_Values_doReturnFn
	}{
		Values: &struct {
			Result1 []string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMIMEHeader_genType_Values_fnRecorder) AndDo(fn MoqMIMEHeader_genType_Values_doFn) *MoqMIMEHeader_genType_Values_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMIMEHeader_genType_Values_fnRecorder) DoReturnResults(fn MoqMIMEHeader_genType_Values_doReturnFn) *MoqMIMEHeader_genType_Values_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []string
		}
		Sequence   uint32
		DoFn       MoqMIMEHeader_genType_Values_doFn
		DoReturnFn MoqMIMEHeader_genType_Values_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMIMEHeader_genType_Values_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMIMEHeader_genType_Values_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Values {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMIMEHeader_genType_Values_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMIMEHeader_genType_Values_paramsKey]*MoqMIMEHeader_genType_Values_results{},
		}
		r.Moq.ResultsByParams_Values = append(r.Moq.ResultsByParams_Values, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Values) {
			copy(r.Moq.ResultsByParams_Values[insertAt+1:], r.Moq.ResultsByParams_Values[insertAt:0])
			r.Moq.ResultsByParams_Values[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Values(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMIMEHeader_genType_Values_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMIMEHeader_genType_Values_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMIMEHeader_genType_Values_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []string
				}
				Sequence   uint32
				DoFn       MoqMIMEHeader_genType_Values_doFn
				DoReturnFn MoqMIMEHeader_genType_Values_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMIMEHeader_genType) PrettyParams_Values(params MoqMIMEHeader_genType_Values_params) string {
	return fmt.Sprintf("Values(%#v)", params.Key)
}

func (m *MoqMIMEHeader_genType) ParamsKey_Values(params MoqMIMEHeader_genType_Values_params, anyParams uint64) MoqMIMEHeader_genType_Values_paramsKey {
	m.Scene.T.Helper()
	var keyUsed string
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Values.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	return MoqMIMEHeader_genType_Values_paramsKey{
		Params: struct{ Key string }{
			Key: keyUsed,
		},
		Hashes: struct{ Key hash.Hash }{
			Key: keyUsedHash,
		},
	}
}

func (m *MoqMIMEHeader_genType_recorder) Del(key string) *MoqMIMEHeader_genType_Del_fnRecorder {
	return &MoqMIMEHeader_genType_Del_fnRecorder{
		Params: MoqMIMEHeader_genType_Del_params{
			Key: key,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMIMEHeader_genType_Del_fnRecorder) Any() *MoqMIMEHeader_genType_Del_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Del(r.Params))
		return nil
	}
	return &MoqMIMEHeader_genType_Del_anyParams{Recorder: r}
}

func (a *MoqMIMEHeader_genType_Del_anyParams) Key() *MoqMIMEHeader_genType_Del_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqMIMEHeader_genType_Del_fnRecorder) Seq() *MoqMIMEHeader_genType_Del_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Del(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMIMEHeader_genType_Del_fnRecorder) NoSeq() *MoqMIMEHeader_genType_Del_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Del(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMIMEHeader_genType_Del_fnRecorder) ReturnResults() *MoqMIMEHeader_genType_Del_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMIMEHeader_genType_Del_doFn
		DoReturnFn MoqMIMEHeader_genType_Del_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMIMEHeader_genType_Del_fnRecorder) AndDo(fn MoqMIMEHeader_genType_Del_doFn) *MoqMIMEHeader_genType_Del_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMIMEHeader_genType_Del_fnRecorder) DoReturnResults(fn MoqMIMEHeader_genType_Del_doReturnFn) *MoqMIMEHeader_genType_Del_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqMIMEHeader_genType_Del_doFn
		DoReturnFn MoqMIMEHeader_genType_Del_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMIMEHeader_genType_Del_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMIMEHeader_genType_Del_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Del {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMIMEHeader_genType_Del_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMIMEHeader_genType_Del_paramsKey]*MoqMIMEHeader_genType_Del_results{},
		}
		r.Moq.ResultsByParams_Del = append(r.Moq.ResultsByParams_Del, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Del) {
			copy(r.Moq.ResultsByParams_Del[insertAt+1:], r.Moq.ResultsByParams_Del[insertAt:0])
			r.Moq.ResultsByParams_Del[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Del(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMIMEHeader_genType_Del_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMIMEHeader_genType_Del_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMIMEHeader_genType_Del_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqMIMEHeader_genType_Del_doFn
				DoReturnFn MoqMIMEHeader_genType_Del_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMIMEHeader_genType) PrettyParams_Del(params MoqMIMEHeader_genType_Del_params) string {
	return fmt.Sprintf("Del(%#v)", params.Key)
}

func (m *MoqMIMEHeader_genType) ParamsKey_Del(params MoqMIMEHeader_genType_Del_params, anyParams uint64) MoqMIMEHeader_genType_Del_paramsKey {
	m.Scene.T.Helper()
	var keyUsed string
	var keyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Del.Key == moq.ParamIndexByValue {
			keyUsed = params.Key
		} else {
			keyUsedHash = hash.DeepHash(params.Key)
		}
	}
	return MoqMIMEHeader_genType_Del_paramsKey{
		Params: struct{ Key string }{
			Key: keyUsed,
		},
		Hashes: struct{ Key hash.Hash }{
			Key: keyUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqMIMEHeader_genType) Reset() {
	m.ResultsByParams_Add = nil
	m.ResultsByParams_Set = nil
	m.ResultsByParams_Get = nil
	m.ResultsByParams_Values = nil
	m.ResultsByParams_Del = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqMIMEHeader_genType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Add {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Add(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Set {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Set(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Get {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Get(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Values {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Values(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Del {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Del(results.Params))
			}
		}
	}
}
