// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package textproto

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that textproto.Conn_starGenType is
// mocked completely
var _ Conn_starGenType = (*MoqConn_starGenType_mock)(nil)

// Conn_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Conn_starGenType interface {
	Close() error
	Cmd(format string, args ...any) (id uint, err error)
}

// MoqConn_starGenType holds the state of a moq of the Conn_starGenType type
type MoqConn_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqConn_starGenType_mock

	ResultsByParams_Close []MoqConn_starGenType_Close_resultsByParams
	ResultsByParams_Cmd   []MoqConn_starGenType_Cmd_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Close struct{}
			Cmd   struct {
				Format moq.ParamIndexing
				Args   moq.ParamIndexing
			}
		}
	}
	// MoqConn_starGenType_mock isolates the mock interface of the Conn_starGenType
}

// type
type MoqConn_starGenType_mock struct {
	Moq *MoqConn_starGenType
}

// MoqConn_starGenType_recorder isolates the recorder interface of the
// Conn_starGenType type
type MoqConn_starGenType_recorder struct {
	Moq *MoqConn_starGenType
}

// MoqConn_starGenType_Close_params holds the params of the Conn_starGenType
// type
type MoqConn_starGenType_Close_params struct{}

// MoqConn_starGenType_Close_paramsKey holds the map key params of the
// Conn_starGenType type
type MoqConn_starGenType_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqConn_starGenType_Close_resultsByParams contains the results for a given
// set of parameters for the Conn_starGenType type
type MoqConn_starGenType_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_starGenType_Close_paramsKey]*MoqConn_starGenType_Close_results
}

// MoqConn_starGenType_Close_doFn defines the type of function needed when
// calling AndDo for the Conn_starGenType type
type MoqConn_starGenType_Close_doFn func()

// MoqConn_starGenType_Close_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Conn_starGenType type
type MoqConn_starGenType_Close_doReturnFn func() error

// MoqConn_starGenType_Close_results holds the results of the Conn_starGenType
// type
type MoqConn_starGenType_Close_results struct {
	Params  MoqConn_starGenType_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_Close_doFn
		DoReturnFn MoqConn_starGenType_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_starGenType_Close_fnRecorder routes recorded function calls to the
// MoqConn_starGenType moq
type MoqConn_starGenType_Close_fnRecorder struct {
	Params    MoqConn_starGenType_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_starGenType_Close_results
	Moq       *MoqConn_starGenType
}

// MoqConn_starGenType_Close_anyParams isolates the any params functions of the
// Conn_starGenType type
type MoqConn_starGenType_Close_anyParams struct {
	Recorder *MoqConn_starGenType_Close_fnRecorder
}

// MoqConn_starGenType_Cmd_params holds the params of the Conn_starGenType type
type MoqConn_starGenType_Cmd_params struct {
	Format string
	Args   []any
}

// MoqConn_starGenType_Cmd_paramsKey holds the map key params of the
// Conn_starGenType type
type MoqConn_starGenType_Cmd_paramsKey struct {
	Params struct{ Format string }
	Hashes struct {
		Format hash.Hash
		Args   hash.Hash
	}
}

// MoqConn_starGenType_Cmd_resultsByParams contains the results for a given set
// of parameters for the Conn_starGenType type
type MoqConn_starGenType_Cmd_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConn_starGenType_Cmd_paramsKey]*MoqConn_starGenType_Cmd_results
}

// MoqConn_starGenType_Cmd_doFn defines the type of function needed when
// calling AndDo for the Conn_starGenType type
type MoqConn_starGenType_Cmd_doFn func(format string, args ...any)

// MoqConn_starGenType_Cmd_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Conn_starGenType type
type MoqConn_starGenType_Cmd_doReturnFn func(format string, args ...any) (id uint, err error)

// MoqConn_starGenType_Cmd_results holds the results of the Conn_starGenType
// type
type MoqConn_starGenType_Cmd_results struct {
	Params  MoqConn_starGenType_Cmd_params
	Results []struct {
		Values *struct {
			Id  uint
			Err error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_Cmd_doFn
		DoReturnFn MoqConn_starGenType_Cmd_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConn_starGenType_Cmd_fnRecorder routes recorded function calls to the
// MoqConn_starGenType moq
type MoqConn_starGenType_Cmd_fnRecorder struct {
	Params    MoqConn_starGenType_Cmd_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConn_starGenType_Cmd_results
	Moq       *MoqConn_starGenType
}

// MoqConn_starGenType_Cmd_anyParams isolates the any params functions of the
// Conn_starGenType type
type MoqConn_starGenType_Cmd_anyParams struct {
	Recorder *MoqConn_starGenType_Cmd_fnRecorder
}

// NewMoqConn_starGenType creates a new moq of the Conn_starGenType type
func NewMoqConn_starGenType(scene *moq.Scene, config *moq.Config) *MoqConn_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqConn_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqConn_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Close struct{}
				Cmd   struct {
					Format moq.ParamIndexing
					Args   moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Close struct{}
			Cmd   struct {
				Format moq.ParamIndexing
				Args   moq.ParamIndexing
			}
		}{
			Close: struct{}{},
			Cmd: struct {
				Format moq.ParamIndexing
				Args   moq.ParamIndexing
			}{
				Format: moq.ParamIndexByValue,
				Args:   moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Conn_starGenType type
func (m *MoqConn_starGenType) Mock() *MoqConn_starGenType_mock { return m.Moq }

func (m *MoqConn_starGenType_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_starGenType_Close_params{}
	var results *MoqConn_starGenType_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqConn_starGenType_mock) Cmd(format string, args ...any) (id uint, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqConn_starGenType_Cmd_params{
		Format: format,
		Args:   args,
	}
	var results *MoqConn_starGenType_Cmd_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Cmd {
		paramsKey := m.Moq.ParamsKey_Cmd(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Cmd(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Cmd(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Cmd(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(format, args...)
	}

	if result.Values != nil {
		id = result.Values.Id
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		id, err = result.DoReturnFn(format, args...)
	}
	return
}

// OnCall returns the recorder implementation of the Conn_starGenType type
func (m *MoqConn_starGenType) OnCall() *MoqConn_starGenType_recorder {
	return &MoqConn_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqConn_starGenType_recorder) Close() *MoqConn_starGenType_Close_fnRecorder {
	return &MoqConn_starGenType_Close_fnRecorder{
		Params:   MoqConn_starGenType_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_starGenType_Close_fnRecorder) Any() *MoqConn_starGenType_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqConn_starGenType_Close_anyParams{Recorder: r}
}

func (r *MoqConn_starGenType_Close_fnRecorder) Seq() *MoqConn_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_starGenType_Close_fnRecorder) NoSeq() *MoqConn_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_starGenType_Close_fnRecorder) ReturnResults(result1 error) *MoqConn_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_Close_doFn
		DoReturnFn MoqConn_starGenType_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_starGenType_Close_fnRecorder) AndDo(fn MoqConn_starGenType_Close_doFn) *MoqConn_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_starGenType_Close_fnRecorder) DoReturnResults(fn MoqConn_starGenType_Close_doReturnFn) *MoqConn_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_Close_doFn
		DoReturnFn MoqConn_starGenType_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_starGenType_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_starGenType_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_starGenType_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_starGenType_Close_paramsKey]*MoqConn_starGenType_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_starGenType_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_starGenType_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqConn_starGenType_Close_doFn
				DoReturnFn MoqConn_starGenType_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn_starGenType) PrettyParams_Close(params MoqConn_starGenType_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqConn_starGenType) ParamsKey_Close(params MoqConn_starGenType_Close_params, anyParams uint64) MoqConn_starGenType_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqConn_starGenType_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqConn_starGenType_recorder) Cmd(format string, args ...any) *MoqConn_starGenType_Cmd_fnRecorder {
	return &MoqConn_starGenType_Cmd_fnRecorder{
		Params: MoqConn_starGenType_Cmd_params{
			Format: format,
			Args:   args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConn_starGenType_Cmd_fnRecorder) Any() *MoqConn_starGenType_Cmd_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Cmd(r.Params))
		return nil
	}
	return &MoqConn_starGenType_Cmd_anyParams{Recorder: r}
}

func (a *MoqConn_starGenType_Cmd_anyParams) Format() *MoqConn_starGenType_Cmd_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqConn_starGenType_Cmd_anyParams) Args() *MoqConn_starGenType_Cmd_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqConn_starGenType_Cmd_fnRecorder) Seq() *MoqConn_starGenType_Cmd_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Cmd(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConn_starGenType_Cmd_fnRecorder) NoSeq() *MoqConn_starGenType_Cmd_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Cmd(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConn_starGenType_Cmd_fnRecorder) ReturnResults(id uint, err error) *MoqConn_starGenType_Cmd_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Id  uint
			Err error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_Cmd_doFn
		DoReturnFn MoqConn_starGenType_Cmd_doReturnFn
	}{
		Values: &struct {
			Id  uint
			Err error
		}{
			Id:  id,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConn_starGenType_Cmd_fnRecorder) AndDo(fn MoqConn_starGenType_Cmd_doFn) *MoqConn_starGenType_Cmd_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConn_starGenType_Cmd_fnRecorder) DoReturnResults(fn MoqConn_starGenType_Cmd_doReturnFn) *MoqConn_starGenType_Cmd_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Id  uint
			Err error
		}
		Sequence   uint32
		DoFn       MoqConn_starGenType_Cmd_doFn
		DoReturnFn MoqConn_starGenType_Cmd_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConn_starGenType_Cmd_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConn_starGenType_Cmd_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Cmd {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConn_starGenType_Cmd_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConn_starGenType_Cmd_paramsKey]*MoqConn_starGenType_Cmd_results{},
		}
		r.Moq.ResultsByParams_Cmd = append(r.Moq.ResultsByParams_Cmd, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Cmd) {
			copy(r.Moq.ResultsByParams_Cmd[insertAt+1:], r.Moq.ResultsByParams_Cmd[insertAt:0])
			r.Moq.ResultsByParams_Cmd[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Cmd(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConn_starGenType_Cmd_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConn_starGenType_Cmd_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConn_starGenType_Cmd_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Id  uint
					Err error
				}
				Sequence   uint32
				DoFn       MoqConn_starGenType_Cmd_doFn
				DoReturnFn MoqConn_starGenType_Cmd_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConn_starGenType) PrettyParams_Cmd(params MoqConn_starGenType_Cmd_params) string {
	return fmt.Sprintf("Cmd(%#v, %#v)", params.Format, params.Args)
}

func (m *MoqConn_starGenType) ParamsKey_Cmd(params MoqConn_starGenType_Cmd_params, anyParams uint64) MoqConn_starGenType_Cmd_paramsKey {
	m.Scene.T.Helper()
	var formatUsed string
	var formatUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Cmd.Format == moq.ParamIndexByValue {
			formatUsed = params.Format
		} else {
			formatUsedHash = hash.DeepHash(params.Format)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Cmd.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the Cmd function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqConn_starGenType_Cmd_paramsKey{
		Params: struct{ Format string }{
			Format: formatUsed,
		},
		Hashes: struct {
			Format hash.Hash
			Args   hash.Hash
		}{
			Format: formatUsedHash,
			Args:   argsUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqConn_starGenType) Reset() { m.ResultsByParams_Close = nil; m.ResultsByParams_Cmd = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqConn_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Cmd {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Cmd(results.Params))
			}
		}
	}
}
