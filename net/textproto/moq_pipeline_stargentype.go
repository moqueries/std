// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package textproto

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that textproto.Pipeline_starGenType is
// mocked completely
var _ Pipeline_starGenType = (*MoqPipeline_starGenType_mock)(nil)

// Pipeline_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Pipeline_starGenType interface {
	Next() uint
	StartRequest(id uint)
	EndRequest(id uint)
	StartResponse(id uint)
	EndResponse(id uint)
}

// MoqPipeline_starGenType holds the state of a moq of the Pipeline_starGenType
// type
type MoqPipeline_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqPipeline_starGenType_mock

	ResultsByParams_Next          []MoqPipeline_starGenType_Next_resultsByParams
	ResultsByParams_StartRequest  []MoqPipeline_starGenType_StartRequest_resultsByParams
	ResultsByParams_EndRequest    []MoqPipeline_starGenType_EndRequest_resultsByParams
	ResultsByParams_StartResponse []MoqPipeline_starGenType_StartResponse_resultsByParams
	ResultsByParams_EndResponse   []MoqPipeline_starGenType_EndResponse_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Next         struct{}
			StartRequest struct {
				Id moq.ParamIndexing
			}
			EndRequest struct {
				Id moq.ParamIndexing
			}
			StartResponse struct {
				Id moq.ParamIndexing
			}
			EndResponse struct {
				Id moq.ParamIndexing
			}
		}
	}
	// MoqPipeline_starGenType_mock isolates the mock interface of the
}

// Pipeline_starGenType type
type MoqPipeline_starGenType_mock struct {
	Moq *MoqPipeline_starGenType
}

// MoqPipeline_starGenType_recorder isolates the recorder interface of the
// Pipeline_starGenType type
type MoqPipeline_starGenType_recorder struct {
	Moq *MoqPipeline_starGenType
}

// MoqPipeline_starGenType_Next_params holds the params of the
// Pipeline_starGenType type
type MoqPipeline_starGenType_Next_params struct{}

// MoqPipeline_starGenType_Next_paramsKey holds the map key params of the
// Pipeline_starGenType type
type MoqPipeline_starGenType_Next_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPipeline_starGenType_Next_resultsByParams contains the results for a
// given set of parameters for the Pipeline_starGenType type
type MoqPipeline_starGenType_Next_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPipeline_starGenType_Next_paramsKey]*MoqPipeline_starGenType_Next_results
}

// MoqPipeline_starGenType_Next_doFn defines the type of function needed when
// calling AndDo for the Pipeline_starGenType type
type MoqPipeline_starGenType_Next_doFn func()

// MoqPipeline_starGenType_Next_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Pipeline_starGenType type
type MoqPipeline_starGenType_Next_doReturnFn func() uint

// MoqPipeline_starGenType_Next_results holds the results of the
// Pipeline_starGenType type
type MoqPipeline_starGenType_Next_results struct {
	Params  MoqPipeline_starGenType_Next_params
	Results []struct {
		Values *struct {
			Result1 uint
		}
		Sequence   uint32
		DoFn       MoqPipeline_starGenType_Next_doFn
		DoReturnFn MoqPipeline_starGenType_Next_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPipeline_starGenType_Next_fnRecorder routes recorded function calls to
// the MoqPipeline_starGenType moq
type MoqPipeline_starGenType_Next_fnRecorder struct {
	Params    MoqPipeline_starGenType_Next_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPipeline_starGenType_Next_results
	Moq       *MoqPipeline_starGenType
}

// MoqPipeline_starGenType_Next_anyParams isolates the any params functions of
// the Pipeline_starGenType type
type MoqPipeline_starGenType_Next_anyParams struct {
	Recorder *MoqPipeline_starGenType_Next_fnRecorder
}

// MoqPipeline_starGenType_StartRequest_params holds the params of the
// Pipeline_starGenType type
type MoqPipeline_starGenType_StartRequest_params struct{ Id uint }

// MoqPipeline_starGenType_StartRequest_paramsKey holds the map key params of
// the Pipeline_starGenType type
type MoqPipeline_starGenType_StartRequest_paramsKey struct {
	Params struct{ Id uint }
	Hashes struct{ Id hash.Hash }
}

// MoqPipeline_starGenType_StartRequest_resultsByParams contains the results
// for a given set of parameters for the Pipeline_starGenType type
type MoqPipeline_starGenType_StartRequest_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPipeline_starGenType_StartRequest_paramsKey]*MoqPipeline_starGenType_StartRequest_results
}

// MoqPipeline_starGenType_StartRequest_doFn defines the type of function
// needed when calling AndDo for the Pipeline_starGenType type
type MoqPipeline_starGenType_StartRequest_doFn func(id uint)

// MoqPipeline_starGenType_StartRequest_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Pipeline_starGenType type
type MoqPipeline_starGenType_StartRequest_doReturnFn func(id uint)

// MoqPipeline_starGenType_StartRequest_results holds the results of the
// Pipeline_starGenType type
type MoqPipeline_starGenType_StartRequest_results struct {
	Params  MoqPipeline_starGenType_StartRequest_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPipeline_starGenType_StartRequest_doFn
		DoReturnFn MoqPipeline_starGenType_StartRequest_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPipeline_starGenType_StartRequest_fnRecorder routes recorded function
// calls to the MoqPipeline_starGenType moq
type MoqPipeline_starGenType_StartRequest_fnRecorder struct {
	Params    MoqPipeline_starGenType_StartRequest_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPipeline_starGenType_StartRequest_results
	Moq       *MoqPipeline_starGenType
}

// MoqPipeline_starGenType_StartRequest_anyParams isolates the any params
// functions of the Pipeline_starGenType type
type MoqPipeline_starGenType_StartRequest_anyParams struct {
	Recorder *MoqPipeline_starGenType_StartRequest_fnRecorder
}

// MoqPipeline_starGenType_EndRequest_params holds the params of the
// Pipeline_starGenType type
type MoqPipeline_starGenType_EndRequest_params struct{ Id uint }

// MoqPipeline_starGenType_EndRequest_paramsKey holds the map key params of the
// Pipeline_starGenType type
type MoqPipeline_starGenType_EndRequest_paramsKey struct {
	Params struct{ Id uint }
	Hashes struct{ Id hash.Hash }
}

// MoqPipeline_starGenType_EndRequest_resultsByParams contains the results for
// a given set of parameters for the Pipeline_starGenType type
type MoqPipeline_starGenType_EndRequest_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPipeline_starGenType_EndRequest_paramsKey]*MoqPipeline_starGenType_EndRequest_results
}

// MoqPipeline_starGenType_EndRequest_doFn defines the type of function needed
// when calling AndDo for the Pipeline_starGenType type
type MoqPipeline_starGenType_EndRequest_doFn func(id uint)

// MoqPipeline_starGenType_EndRequest_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Pipeline_starGenType type
type MoqPipeline_starGenType_EndRequest_doReturnFn func(id uint)

// MoqPipeline_starGenType_EndRequest_results holds the results of the
// Pipeline_starGenType type
type MoqPipeline_starGenType_EndRequest_results struct {
	Params  MoqPipeline_starGenType_EndRequest_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPipeline_starGenType_EndRequest_doFn
		DoReturnFn MoqPipeline_starGenType_EndRequest_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPipeline_starGenType_EndRequest_fnRecorder routes recorded function calls
// to the MoqPipeline_starGenType moq
type MoqPipeline_starGenType_EndRequest_fnRecorder struct {
	Params    MoqPipeline_starGenType_EndRequest_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPipeline_starGenType_EndRequest_results
	Moq       *MoqPipeline_starGenType
}

// MoqPipeline_starGenType_EndRequest_anyParams isolates the any params
// functions of the Pipeline_starGenType type
type MoqPipeline_starGenType_EndRequest_anyParams struct {
	Recorder *MoqPipeline_starGenType_EndRequest_fnRecorder
}

// MoqPipeline_starGenType_StartResponse_params holds the params of the
// Pipeline_starGenType type
type MoqPipeline_starGenType_StartResponse_params struct{ Id uint }

// MoqPipeline_starGenType_StartResponse_paramsKey holds the map key params of
// the Pipeline_starGenType type
type MoqPipeline_starGenType_StartResponse_paramsKey struct {
	Params struct{ Id uint }
	Hashes struct{ Id hash.Hash }
}

// MoqPipeline_starGenType_StartResponse_resultsByParams contains the results
// for a given set of parameters for the Pipeline_starGenType type
type MoqPipeline_starGenType_StartResponse_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPipeline_starGenType_StartResponse_paramsKey]*MoqPipeline_starGenType_StartResponse_results
}

// MoqPipeline_starGenType_StartResponse_doFn defines the type of function
// needed when calling AndDo for the Pipeline_starGenType type
type MoqPipeline_starGenType_StartResponse_doFn func(id uint)

// MoqPipeline_starGenType_StartResponse_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Pipeline_starGenType
// type
type MoqPipeline_starGenType_StartResponse_doReturnFn func(id uint)

// MoqPipeline_starGenType_StartResponse_results holds the results of the
// Pipeline_starGenType type
type MoqPipeline_starGenType_StartResponse_results struct {
	Params  MoqPipeline_starGenType_StartResponse_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPipeline_starGenType_StartResponse_doFn
		DoReturnFn MoqPipeline_starGenType_StartResponse_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPipeline_starGenType_StartResponse_fnRecorder routes recorded function
// calls to the MoqPipeline_starGenType moq
type MoqPipeline_starGenType_StartResponse_fnRecorder struct {
	Params    MoqPipeline_starGenType_StartResponse_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPipeline_starGenType_StartResponse_results
	Moq       *MoqPipeline_starGenType
}

// MoqPipeline_starGenType_StartResponse_anyParams isolates the any params
// functions of the Pipeline_starGenType type
type MoqPipeline_starGenType_StartResponse_anyParams struct {
	Recorder *MoqPipeline_starGenType_StartResponse_fnRecorder
}

// MoqPipeline_starGenType_EndResponse_params holds the params of the
// Pipeline_starGenType type
type MoqPipeline_starGenType_EndResponse_params struct{ Id uint }

// MoqPipeline_starGenType_EndResponse_paramsKey holds the map key params of
// the Pipeline_starGenType type
type MoqPipeline_starGenType_EndResponse_paramsKey struct {
	Params struct{ Id uint }
	Hashes struct{ Id hash.Hash }
}

// MoqPipeline_starGenType_EndResponse_resultsByParams contains the results for
// a given set of parameters for the Pipeline_starGenType type
type MoqPipeline_starGenType_EndResponse_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPipeline_starGenType_EndResponse_paramsKey]*MoqPipeline_starGenType_EndResponse_results
}

// MoqPipeline_starGenType_EndResponse_doFn defines the type of function needed
// when calling AndDo for the Pipeline_starGenType type
type MoqPipeline_starGenType_EndResponse_doFn func(id uint)

// MoqPipeline_starGenType_EndResponse_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Pipeline_starGenType type
type MoqPipeline_starGenType_EndResponse_doReturnFn func(id uint)

// MoqPipeline_starGenType_EndResponse_results holds the results of the
// Pipeline_starGenType type
type MoqPipeline_starGenType_EndResponse_results struct {
	Params  MoqPipeline_starGenType_EndResponse_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPipeline_starGenType_EndResponse_doFn
		DoReturnFn MoqPipeline_starGenType_EndResponse_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPipeline_starGenType_EndResponse_fnRecorder routes recorded function
// calls to the MoqPipeline_starGenType moq
type MoqPipeline_starGenType_EndResponse_fnRecorder struct {
	Params    MoqPipeline_starGenType_EndResponse_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPipeline_starGenType_EndResponse_results
	Moq       *MoqPipeline_starGenType
}

// MoqPipeline_starGenType_EndResponse_anyParams isolates the any params
// functions of the Pipeline_starGenType type
type MoqPipeline_starGenType_EndResponse_anyParams struct {
	Recorder *MoqPipeline_starGenType_EndResponse_fnRecorder
}

// NewMoqPipeline_starGenType creates a new moq of the Pipeline_starGenType
// type
func NewMoqPipeline_starGenType(scene *moq.Scene, config *moq.Config) *MoqPipeline_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqPipeline_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqPipeline_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Next         struct{}
				StartRequest struct {
					Id moq.ParamIndexing
				}
				EndRequest struct {
					Id moq.ParamIndexing
				}
				StartResponse struct {
					Id moq.ParamIndexing
				}
				EndResponse struct {
					Id moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Next         struct{}
			StartRequest struct {
				Id moq.ParamIndexing
			}
			EndRequest struct {
				Id moq.ParamIndexing
			}
			StartResponse struct {
				Id moq.ParamIndexing
			}
			EndResponse struct {
				Id moq.ParamIndexing
			}
		}{
			Next: struct{}{},
			StartRequest: struct {
				Id moq.ParamIndexing
			}{
				Id: moq.ParamIndexByValue,
			},
			EndRequest: struct {
				Id moq.ParamIndexing
			}{
				Id: moq.ParamIndexByValue,
			},
			StartResponse: struct {
				Id moq.ParamIndexing
			}{
				Id: moq.ParamIndexByValue,
			},
			EndResponse: struct {
				Id moq.ParamIndexing
			}{
				Id: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Pipeline_starGenType type
func (m *MoqPipeline_starGenType) Mock() *MoqPipeline_starGenType_mock { return m.Moq }

func (m *MoqPipeline_starGenType_mock) Next() (result1 uint) {
	m.Moq.Scene.T.Helper()
	params := MoqPipeline_starGenType_Next_params{}
	var results *MoqPipeline_starGenType_Next_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Next {
		paramsKey := m.Moq.ParamsKey_Next(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Next(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Next(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Next(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqPipeline_starGenType_mock) StartRequest(id uint) {
	m.Moq.Scene.T.Helper()
	params := MoqPipeline_starGenType_StartRequest_params{
		Id: id,
	}
	var results *MoqPipeline_starGenType_StartRequest_results
	for _, resultsByParams := range m.Moq.ResultsByParams_StartRequest {
		paramsKey := m.Moq.ParamsKey_StartRequest(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_StartRequest(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_StartRequest(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_StartRequest(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(id)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(id)
	}
	return
}

func (m *MoqPipeline_starGenType_mock) EndRequest(id uint) {
	m.Moq.Scene.T.Helper()
	params := MoqPipeline_starGenType_EndRequest_params{
		Id: id,
	}
	var results *MoqPipeline_starGenType_EndRequest_results
	for _, resultsByParams := range m.Moq.ResultsByParams_EndRequest {
		paramsKey := m.Moq.ParamsKey_EndRequest(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_EndRequest(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_EndRequest(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_EndRequest(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(id)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(id)
	}
	return
}

func (m *MoqPipeline_starGenType_mock) StartResponse(id uint) {
	m.Moq.Scene.T.Helper()
	params := MoqPipeline_starGenType_StartResponse_params{
		Id: id,
	}
	var results *MoqPipeline_starGenType_StartResponse_results
	for _, resultsByParams := range m.Moq.ResultsByParams_StartResponse {
		paramsKey := m.Moq.ParamsKey_StartResponse(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_StartResponse(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_StartResponse(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_StartResponse(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(id)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(id)
	}
	return
}

func (m *MoqPipeline_starGenType_mock) EndResponse(id uint) {
	m.Moq.Scene.T.Helper()
	params := MoqPipeline_starGenType_EndResponse_params{
		Id: id,
	}
	var results *MoqPipeline_starGenType_EndResponse_results
	for _, resultsByParams := range m.Moq.ResultsByParams_EndResponse {
		paramsKey := m.Moq.ParamsKey_EndResponse(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_EndResponse(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_EndResponse(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_EndResponse(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(id)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(id)
	}
	return
}

// OnCall returns the recorder implementation of the Pipeline_starGenType type
func (m *MoqPipeline_starGenType) OnCall() *MoqPipeline_starGenType_recorder {
	return &MoqPipeline_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqPipeline_starGenType_recorder) Next() *MoqPipeline_starGenType_Next_fnRecorder {
	return &MoqPipeline_starGenType_Next_fnRecorder{
		Params:   MoqPipeline_starGenType_Next_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPipeline_starGenType_Next_fnRecorder) Any() *MoqPipeline_starGenType_Next_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	return &MoqPipeline_starGenType_Next_anyParams{Recorder: r}
}

func (r *MoqPipeline_starGenType_Next_fnRecorder) Seq() *MoqPipeline_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPipeline_starGenType_Next_fnRecorder) NoSeq() *MoqPipeline_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPipeline_starGenType_Next_fnRecorder) ReturnResults(result1 uint) *MoqPipeline_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint
		}
		Sequence   uint32
		DoFn       MoqPipeline_starGenType_Next_doFn
		DoReturnFn MoqPipeline_starGenType_Next_doReturnFn
	}{
		Values: &struct {
			Result1 uint
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPipeline_starGenType_Next_fnRecorder) AndDo(fn MoqPipeline_starGenType_Next_doFn) *MoqPipeline_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPipeline_starGenType_Next_fnRecorder) DoReturnResults(fn MoqPipeline_starGenType_Next_doReturnFn) *MoqPipeline_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint
		}
		Sequence   uint32
		DoFn       MoqPipeline_starGenType_Next_doFn
		DoReturnFn MoqPipeline_starGenType_Next_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPipeline_starGenType_Next_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPipeline_starGenType_Next_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Next {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPipeline_starGenType_Next_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPipeline_starGenType_Next_paramsKey]*MoqPipeline_starGenType_Next_results{},
		}
		r.Moq.ResultsByParams_Next = append(r.Moq.ResultsByParams_Next, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Next) {
			copy(r.Moq.ResultsByParams_Next[insertAt+1:], r.Moq.ResultsByParams_Next[insertAt:0])
			r.Moq.ResultsByParams_Next[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Next(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPipeline_starGenType_Next_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPipeline_starGenType_Next_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPipeline_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 uint
				}
				Sequence   uint32
				DoFn       MoqPipeline_starGenType_Next_doFn
				DoReturnFn MoqPipeline_starGenType_Next_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPipeline_starGenType) PrettyParams_Next(params MoqPipeline_starGenType_Next_params) string {
	return fmt.Sprintf("Next()")
}

func (m *MoqPipeline_starGenType) ParamsKey_Next(params MoqPipeline_starGenType_Next_params, anyParams uint64) MoqPipeline_starGenType_Next_paramsKey {
	m.Scene.T.Helper()
	return MoqPipeline_starGenType_Next_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPipeline_starGenType_recorder) StartRequest(id uint) *MoqPipeline_starGenType_StartRequest_fnRecorder {
	return &MoqPipeline_starGenType_StartRequest_fnRecorder{
		Params: MoqPipeline_starGenType_StartRequest_params{
			Id: id,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPipeline_starGenType_StartRequest_fnRecorder) Any() *MoqPipeline_starGenType_StartRequest_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StartRequest(r.Params))
		return nil
	}
	return &MoqPipeline_starGenType_StartRequest_anyParams{Recorder: r}
}

func (a *MoqPipeline_starGenType_StartRequest_anyParams) Id() *MoqPipeline_starGenType_StartRequest_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPipeline_starGenType_StartRequest_fnRecorder) Seq() *MoqPipeline_starGenType_StartRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StartRequest(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPipeline_starGenType_StartRequest_fnRecorder) NoSeq() *MoqPipeline_starGenType_StartRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StartRequest(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPipeline_starGenType_StartRequest_fnRecorder) ReturnResults() *MoqPipeline_starGenType_StartRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPipeline_starGenType_StartRequest_doFn
		DoReturnFn MoqPipeline_starGenType_StartRequest_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPipeline_starGenType_StartRequest_fnRecorder) AndDo(fn MoqPipeline_starGenType_StartRequest_doFn) *MoqPipeline_starGenType_StartRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPipeline_starGenType_StartRequest_fnRecorder) DoReturnResults(fn MoqPipeline_starGenType_StartRequest_doReturnFn) *MoqPipeline_starGenType_StartRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPipeline_starGenType_StartRequest_doFn
		DoReturnFn MoqPipeline_starGenType_StartRequest_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPipeline_starGenType_StartRequest_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPipeline_starGenType_StartRequest_resultsByParams
	for n, res := range r.Moq.ResultsByParams_StartRequest {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPipeline_starGenType_StartRequest_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPipeline_starGenType_StartRequest_paramsKey]*MoqPipeline_starGenType_StartRequest_results{},
		}
		r.Moq.ResultsByParams_StartRequest = append(r.Moq.ResultsByParams_StartRequest, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_StartRequest) {
			copy(r.Moq.ResultsByParams_StartRequest[insertAt+1:], r.Moq.ResultsByParams_StartRequest[insertAt:0])
			r.Moq.ResultsByParams_StartRequest[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_StartRequest(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPipeline_starGenType_StartRequest_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPipeline_starGenType_StartRequest_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPipeline_starGenType_StartRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqPipeline_starGenType_StartRequest_doFn
				DoReturnFn MoqPipeline_starGenType_StartRequest_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPipeline_starGenType) PrettyParams_StartRequest(params MoqPipeline_starGenType_StartRequest_params) string {
	return fmt.Sprintf("StartRequest(%#v)", params.Id)
}

func (m *MoqPipeline_starGenType) ParamsKey_StartRequest(params MoqPipeline_starGenType_StartRequest_params, anyParams uint64) MoqPipeline_starGenType_StartRequest_paramsKey {
	m.Scene.T.Helper()
	var idUsed uint
	var idUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.StartRequest.Id == moq.ParamIndexByValue {
			idUsed = params.Id
		} else {
			idUsedHash = hash.DeepHash(params.Id)
		}
	}
	return MoqPipeline_starGenType_StartRequest_paramsKey{
		Params: struct{ Id uint }{
			Id: idUsed,
		},
		Hashes: struct{ Id hash.Hash }{
			Id: idUsedHash,
		},
	}
}

func (m *MoqPipeline_starGenType_recorder) EndRequest(id uint) *MoqPipeline_starGenType_EndRequest_fnRecorder {
	return &MoqPipeline_starGenType_EndRequest_fnRecorder{
		Params: MoqPipeline_starGenType_EndRequest_params{
			Id: id,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPipeline_starGenType_EndRequest_fnRecorder) Any() *MoqPipeline_starGenType_EndRequest_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_EndRequest(r.Params))
		return nil
	}
	return &MoqPipeline_starGenType_EndRequest_anyParams{Recorder: r}
}

func (a *MoqPipeline_starGenType_EndRequest_anyParams) Id() *MoqPipeline_starGenType_EndRequest_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPipeline_starGenType_EndRequest_fnRecorder) Seq() *MoqPipeline_starGenType_EndRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_EndRequest(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPipeline_starGenType_EndRequest_fnRecorder) NoSeq() *MoqPipeline_starGenType_EndRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_EndRequest(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPipeline_starGenType_EndRequest_fnRecorder) ReturnResults() *MoqPipeline_starGenType_EndRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPipeline_starGenType_EndRequest_doFn
		DoReturnFn MoqPipeline_starGenType_EndRequest_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPipeline_starGenType_EndRequest_fnRecorder) AndDo(fn MoqPipeline_starGenType_EndRequest_doFn) *MoqPipeline_starGenType_EndRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPipeline_starGenType_EndRequest_fnRecorder) DoReturnResults(fn MoqPipeline_starGenType_EndRequest_doReturnFn) *MoqPipeline_starGenType_EndRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPipeline_starGenType_EndRequest_doFn
		DoReturnFn MoqPipeline_starGenType_EndRequest_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPipeline_starGenType_EndRequest_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPipeline_starGenType_EndRequest_resultsByParams
	for n, res := range r.Moq.ResultsByParams_EndRequest {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPipeline_starGenType_EndRequest_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPipeline_starGenType_EndRequest_paramsKey]*MoqPipeline_starGenType_EndRequest_results{},
		}
		r.Moq.ResultsByParams_EndRequest = append(r.Moq.ResultsByParams_EndRequest, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_EndRequest) {
			copy(r.Moq.ResultsByParams_EndRequest[insertAt+1:], r.Moq.ResultsByParams_EndRequest[insertAt:0])
			r.Moq.ResultsByParams_EndRequest[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_EndRequest(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPipeline_starGenType_EndRequest_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPipeline_starGenType_EndRequest_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPipeline_starGenType_EndRequest_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqPipeline_starGenType_EndRequest_doFn
				DoReturnFn MoqPipeline_starGenType_EndRequest_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPipeline_starGenType) PrettyParams_EndRequest(params MoqPipeline_starGenType_EndRequest_params) string {
	return fmt.Sprintf("EndRequest(%#v)", params.Id)
}

func (m *MoqPipeline_starGenType) ParamsKey_EndRequest(params MoqPipeline_starGenType_EndRequest_params, anyParams uint64) MoqPipeline_starGenType_EndRequest_paramsKey {
	m.Scene.T.Helper()
	var idUsed uint
	var idUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.EndRequest.Id == moq.ParamIndexByValue {
			idUsed = params.Id
		} else {
			idUsedHash = hash.DeepHash(params.Id)
		}
	}
	return MoqPipeline_starGenType_EndRequest_paramsKey{
		Params: struct{ Id uint }{
			Id: idUsed,
		},
		Hashes: struct{ Id hash.Hash }{
			Id: idUsedHash,
		},
	}
}

func (m *MoqPipeline_starGenType_recorder) StartResponse(id uint) *MoqPipeline_starGenType_StartResponse_fnRecorder {
	return &MoqPipeline_starGenType_StartResponse_fnRecorder{
		Params: MoqPipeline_starGenType_StartResponse_params{
			Id: id,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPipeline_starGenType_StartResponse_fnRecorder) Any() *MoqPipeline_starGenType_StartResponse_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StartResponse(r.Params))
		return nil
	}
	return &MoqPipeline_starGenType_StartResponse_anyParams{Recorder: r}
}

func (a *MoqPipeline_starGenType_StartResponse_anyParams) Id() *MoqPipeline_starGenType_StartResponse_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPipeline_starGenType_StartResponse_fnRecorder) Seq() *MoqPipeline_starGenType_StartResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StartResponse(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPipeline_starGenType_StartResponse_fnRecorder) NoSeq() *MoqPipeline_starGenType_StartResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_StartResponse(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPipeline_starGenType_StartResponse_fnRecorder) ReturnResults() *MoqPipeline_starGenType_StartResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPipeline_starGenType_StartResponse_doFn
		DoReturnFn MoqPipeline_starGenType_StartResponse_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPipeline_starGenType_StartResponse_fnRecorder) AndDo(fn MoqPipeline_starGenType_StartResponse_doFn) *MoqPipeline_starGenType_StartResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPipeline_starGenType_StartResponse_fnRecorder) DoReturnResults(fn MoqPipeline_starGenType_StartResponse_doReturnFn) *MoqPipeline_starGenType_StartResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPipeline_starGenType_StartResponse_doFn
		DoReturnFn MoqPipeline_starGenType_StartResponse_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPipeline_starGenType_StartResponse_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPipeline_starGenType_StartResponse_resultsByParams
	for n, res := range r.Moq.ResultsByParams_StartResponse {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPipeline_starGenType_StartResponse_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPipeline_starGenType_StartResponse_paramsKey]*MoqPipeline_starGenType_StartResponse_results{},
		}
		r.Moq.ResultsByParams_StartResponse = append(r.Moq.ResultsByParams_StartResponse, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_StartResponse) {
			copy(r.Moq.ResultsByParams_StartResponse[insertAt+1:], r.Moq.ResultsByParams_StartResponse[insertAt:0])
			r.Moq.ResultsByParams_StartResponse[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_StartResponse(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPipeline_starGenType_StartResponse_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPipeline_starGenType_StartResponse_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPipeline_starGenType_StartResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqPipeline_starGenType_StartResponse_doFn
				DoReturnFn MoqPipeline_starGenType_StartResponse_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPipeline_starGenType) PrettyParams_StartResponse(params MoqPipeline_starGenType_StartResponse_params) string {
	return fmt.Sprintf("StartResponse(%#v)", params.Id)
}

func (m *MoqPipeline_starGenType) ParamsKey_StartResponse(params MoqPipeline_starGenType_StartResponse_params, anyParams uint64) MoqPipeline_starGenType_StartResponse_paramsKey {
	m.Scene.T.Helper()
	var idUsed uint
	var idUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.StartResponse.Id == moq.ParamIndexByValue {
			idUsed = params.Id
		} else {
			idUsedHash = hash.DeepHash(params.Id)
		}
	}
	return MoqPipeline_starGenType_StartResponse_paramsKey{
		Params: struct{ Id uint }{
			Id: idUsed,
		},
		Hashes: struct{ Id hash.Hash }{
			Id: idUsedHash,
		},
	}
}

func (m *MoqPipeline_starGenType_recorder) EndResponse(id uint) *MoqPipeline_starGenType_EndResponse_fnRecorder {
	return &MoqPipeline_starGenType_EndResponse_fnRecorder{
		Params: MoqPipeline_starGenType_EndResponse_params{
			Id: id,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPipeline_starGenType_EndResponse_fnRecorder) Any() *MoqPipeline_starGenType_EndResponse_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_EndResponse(r.Params))
		return nil
	}
	return &MoqPipeline_starGenType_EndResponse_anyParams{Recorder: r}
}

func (a *MoqPipeline_starGenType_EndResponse_anyParams) Id() *MoqPipeline_starGenType_EndResponse_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPipeline_starGenType_EndResponse_fnRecorder) Seq() *MoqPipeline_starGenType_EndResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_EndResponse(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPipeline_starGenType_EndResponse_fnRecorder) NoSeq() *MoqPipeline_starGenType_EndResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_EndResponse(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPipeline_starGenType_EndResponse_fnRecorder) ReturnResults() *MoqPipeline_starGenType_EndResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPipeline_starGenType_EndResponse_doFn
		DoReturnFn MoqPipeline_starGenType_EndResponse_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPipeline_starGenType_EndResponse_fnRecorder) AndDo(fn MoqPipeline_starGenType_EndResponse_doFn) *MoqPipeline_starGenType_EndResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPipeline_starGenType_EndResponse_fnRecorder) DoReturnResults(fn MoqPipeline_starGenType_EndResponse_doReturnFn) *MoqPipeline_starGenType_EndResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqPipeline_starGenType_EndResponse_doFn
		DoReturnFn MoqPipeline_starGenType_EndResponse_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPipeline_starGenType_EndResponse_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPipeline_starGenType_EndResponse_resultsByParams
	for n, res := range r.Moq.ResultsByParams_EndResponse {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPipeline_starGenType_EndResponse_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPipeline_starGenType_EndResponse_paramsKey]*MoqPipeline_starGenType_EndResponse_results{},
		}
		r.Moq.ResultsByParams_EndResponse = append(r.Moq.ResultsByParams_EndResponse, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_EndResponse) {
			copy(r.Moq.ResultsByParams_EndResponse[insertAt+1:], r.Moq.ResultsByParams_EndResponse[insertAt:0])
			r.Moq.ResultsByParams_EndResponse[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_EndResponse(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPipeline_starGenType_EndResponse_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPipeline_starGenType_EndResponse_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPipeline_starGenType_EndResponse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqPipeline_starGenType_EndResponse_doFn
				DoReturnFn MoqPipeline_starGenType_EndResponse_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPipeline_starGenType) PrettyParams_EndResponse(params MoqPipeline_starGenType_EndResponse_params) string {
	return fmt.Sprintf("EndResponse(%#v)", params.Id)
}

func (m *MoqPipeline_starGenType) ParamsKey_EndResponse(params MoqPipeline_starGenType_EndResponse_params, anyParams uint64) MoqPipeline_starGenType_EndResponse_paramsKey {
	m.Scene.T.Helper()
	var idUsed uint
	var idUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.EndResponse.Id == moq.ParamIndexByValue {
			idUsed = params.Id
		} else {
			idUsedHash = hash.DeepHash(params.Id)
		}
	}
	return MoqPipeline_starGenType_EndResponse_paramsKey{
		Params: struct{ Id uint }{
			Id: idUsed,
		},
		Hashes: struct{ Id hash.Hash }{
			Id: idUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqPipeline_starGenType) Reset() {
	m.ResultsByParams_Next = nil
	m.ResultsByParams_StartRequest = nil
	m.ResultsByParams_EndRequest = nil
	m.ResultsByParams_StartResponse = nil
	m.ResultsByParams_EndResponse = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqPipeline_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Next {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Next(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_StartRequest {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_StartRequest(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_EndRequest {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_EndRequest(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_StartResponse {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_StartResponse(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_EndResponse {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_EndResponse(results.Params))
			}
		}
	}
}
