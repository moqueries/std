// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package net

import (
	"fmt"
	"math/bits"
	"net"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that net.IP_genType is mocked
// completely
var _ IP_genType = (*MoqIP_genType_mock)(nil)

// IP_genType is the fabricated implementation type of this mock (emitted when
// mocking a collections of methods directly and not from an interface type)
type IP_genType interface {
	IsUnspecified() bool
	IsLoopback() bool
	IsMulticast() bool
	IsInterfaceLocalMulticast() bool
	IsLinkLocalMulticast() bool
	IsLinkLocalUnicast() bool
	IsGlobalUnicast() bool
	To4() net.IP
	To16() net.IP
	DefaultMask() net.IPMask
	Mask(mask net.IPMask) net.IP
	String() string
	MarshalText() ([]byte, error)
	Equal(x net.IP) bool
}

// MoqIP_genType holds the state of a moq of the IP_genType type
type MoqIP_genType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqIP_genType_mock

	ResultsByParams_IsUnspecified             []MoqIP_genType_IsUnspecified_resultsByParams
	ResultsByParams_IsLoopback                []MoqIP_genType_IsLoopback_resultsByParams
	ResultsByParams_IsMulticast               []MoqIP_genType_IsMulticast_resultsByParams
	ResultsByParams_IsInterfaceLocalMulticast []MoqIP_genType_IsInterfaceLocalMulticast_resultsByParams
	ResultsByParams_IsLinkLocalMulticast      []MoqIP_genType_IsLinkLocalMulticast_resultsByParams
	ResultsByParams_IsLinkLocalUnicast        []MoqIP_genType_IsLinkLocalUnicast_resultsByParams
	ResultsByParams_IsGlobalUnicast           []MoqIP_genType_IsGlobalUnicast_resultsByParams
	ResultsByParams_To4                       []MoqIP_genType_To4_resultsByParams
	ResultsByParams_To16                      []MoqIP_genType_To16_resultsByParams
	ResultsByParams_DefaultMask               []MoqIP_genType_DefaultMask_resultsByParams
	ResultsByParams_Mask                      []MoqIP_genType_Mask_resultsByParams
	ResultsByParams_String                    []MoqIP_genType_String_resultsByParams
	ResultsByParams_MarshalText               []MoqIP_genType_MarshalText_resultsByParams
	ResultsByParams_Equal                     []MoqIP_genType_Equal_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			IsUnspecified             struct{}
			IsLoopback                struct{}
			IsMulticast               struct{}
			IsInterfaceLocalMulticast struct{}
			IsLinkLocalMulticast      struct{}
			IsLinkLocalUnicast        struct{}
			IsGlobalUnicast           struct{}
			To4                       struct{}
			To16                      struct{}
			DefaultMask               struct{}
			Mask                      struct {
				Mask moq.ParamIndexing
			}
			String      struct{}
			MarshalText struct{}
			Equal       struct {
				X moq.ParamIndexing
			}
		}
	}
	// MoqIP_genType_mock isolates the mock interface of the IP_genType type
}

type MoqIP_genType_mock struct {
	Moq *MoqIP_genType
}

// MoqIP_genType_recorder isolates the recorder interface of the IP_genType
// type
type MoqIP_genType_recorder struct {
	Moq *MoqIP_genType
}

// MoqIP_genType_IsUnspecified_params holds the params of the IP_genType type
type MoqIP_genType_IsUnspecified_params struct{}

// MoqIP_genType_IsUnspecified_paramsKey holds the map key params of the
// IP_genType type
type MoqIP_genType_IsUnspecified_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqIP_genType_IsUnspecified_resultsByParams contains the results for a given
// set of parameters for the IP_genType type
type MoqIP_genType_IsUnspecified_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIP_genType_IsUnspecified_paramsKey]*MoqIP_genType_IsUnspecified_results
}

// MoqIP_genType_IsUnspecified_doFn defines the type of function needed when
// calling AndDo for the IP_genType type
type MoqIP_genType_IsUnspecified_doFn func()

// MoqIP_genType_IsUnspecified_doReturnFn defines the type of function needed
// when calling DoReturnResults for the IP_genType type
type MoqIP_genType_IsUnspecified_doReturnFn func() bool

// MoqIP_genType_IsUnspecified_results holds the results of the IP_genType type
type MoqIP_genType_IsUnspecified_results struct {
	Params  MoqIP_genType_IsUnspecified_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsUnspecified_doFn
		DoReturnFn MoqIP_genType_IsUnspecified_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIP_genType_IsUnspecified_fnRecorder routes recorded function calls to the
// MoqIP_genType moq
type MoqIP_genType_IsUnspecified_fnRecorder struct {
	Params    MoqIP_genType_IsUnspecified_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIP_genType_IsUnspecified_results
	Moq       *MoqIP_genType
}

// MoqIP_genType_IsUnspecified_anyParams isolates the any params functions of
// the IP_genType type
type MoqIP_genType_IsUnspecified_anyParams struct {
	Recorder *MoqIP_genType_IsUnspecified_fnRecorder
}

// MoqIP_genType_IsLoopback_params holds the params of the IP_genType type
type MoqIP_genType_IsLoopback_params struct{}

// MoqIP_genType_IsLoopback_paramsKey holds the map key params of the
// IP_genType type
type MoqIP_genType_IsLoopback_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqIP_genType_IsLoopback_resultsByParams contains the results for a given
// set of parameters for the IP_genType type
type MoqIP_genType_IsLoopback_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIP_genType_IsLoopback_paramsKey]*MoqIP_genType_IsLoopback_results
}

// MoqIP_genType_IsLoopback_doFn defines the type of function needed when
// calling AndDo for the IP_genType type
type MoqIP_genType_IsLoopback_doFn func()

// MoqIP_genType_IsLoopback_doReturnFn defines the type of function needed when
// calling DoReturnResults for the IP_genType type
type MoqIP_genType_IsLoopback_doReturnFn func() bool

// MoqIP_genType_IsLoopback_results holds the results of the IP_genType type
type MoqIP_genType_IsLoopback_results struct {
	Params  MoqIP_genType_IsLoopback_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsLoopback_doFn
		DoReturnFn MoqIP_genType_IsLoopback_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIP_genType_IsLoopback_fnRecorder routes recorded function calls to the
// MoqIP_genType moq
type MoqIP_genType_IsLoopback_fnRecorder struct {
	Params    MoqIP_genType_IsLoopback_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIP_genType_IsLoopback_results
	Moq       *MoqIP_genType
}

// MoqIP_genType_IsLoopback_anyParams isolates the any params functions of the
// IP_genType type
type MoqIP_genType_IsLoopback_anyParams struct {
	Recorder *MoqIP_genType_IsLoopback_fnRecorder
}

// MoqIP_genType_IsMulticast_params holds the params of the IP_genType type
type MoqIP_genType_IsMulticast_params struct{}

// MoqIP_genType_IsMulticast_paramsKey holds the map key params of the
// IP_genType type
type MoqIP_genType_IsMulticast_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqIP_genType_IsMulticast_resultsByParams contains the results for a given
// set of parameters for the IP_genType type
type MoqIP_genType_IsMulticast_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIP_genType_IsMulticast_paramsKey]*MoqIP_genType_IsMulticast_results
}

// MoqIP_genType_IsMulticast_doFn defines the type of function needed when
// calling AndDo for the IP_genType type
type MoqIP_genType_IsMulticast_doFn func()

// MoqIP_genType_IsMulticast_doReturnFn defines the type of function needed
// when calling DoReturnResults for the IP_genType type
type MoqIP_genType_IsMulticast_doReturnFn func() bool

// MoqIP_genType_IsMulticast_results holds the results of the IP_genType type
type MoqIP_genType_IsMulticast_results struct {
	Params  MoqIP_genType_IsMulticast_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsMulticast_doFn
		DoReturnFn MoqIP_genType_IsMulticast_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIP_genType_IsMulticast_fnRecorder routes recorded function calls to the
// MoqIP_genType moq
type MoqIP_genType_IsMulticast_fnRecorder struct {
	Params    MoqIP_genType_IsMulticast_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIP_genType_IsMulticast_results
	Moq       *MoqIP_genType
}

// MoqIP_genType_IsMulticast_anyParams isolates the any params functions of the
// IP_genType type
type MoqIP_genType_IsMulticast_anyParams struct {
	Recorder *MoqIP_genType_IsMulticast_fnRecorder
}

// MoqIP_genType_IsInterfaceLocalMulticast_params holds the params of the
// IP_genType type
type MoqIP_genType_IsInterfaceLocalMulticast_params struct{}

// MoqIP_genType_IsInterfaceLocalMulticast_paramsKey holds the map key params
// of the IP_genType type
type MoqIP_genType_IsInterfaceLocalMulticast_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqIP_genType_IsInterfaceLocalMulticast_resultsByParams contains the results
// for a given set of parameters for the IP_genType type
type MoqIP_genType_IsInterfaceLocalMulticast_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIP_genType_IsInterfaceLocalMulticast_paramsKey]*MoqIP_genType_IsInterfaceLocalMulticast_results
}

// MoqIP_genType_IsInterfaceLocalMulticast_doFn defines the type of function
// needed when calling AndDo for the IP_genType type
type MoqIP_genType_IsInterfaceLocalMulticast_doFn func()

// MoqIP_genType_IsInterfaceLocalMulticast_doReturnFn defines the type of
// function needed when calling DoReturnResults for the IP_genType type
type MoqIP_genType_IsInterfaceLocalMulticast_doReturnFn func() bool

// MoqIP_genType_IsInterfaceLocalMulticast_results holds the results of the
// IP_genType type
type MoqIP_genType_IsInterfaceLocalMulticast_results struct {
	Params  MoqIP_genType_IsInterfaceLocalMulticast_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsInterfaceLocalMulticast_doFn
		DoReturnFn MoqIP_genType_IsInterfaceLocalMulticast_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder routes recorded function
// calls to the MoqIP_genType moq
type MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder struct {
	Params    MoqIP_genType_IsInterfaceLocalMulticast_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIP_genType_IsInterfaceLocalMulticast_results
	Moq       *MoqIP_genType
}

// MoqIP_genType_IsInterfaceLocalMulticast_anyParams isolates the any params
// functions of the IP_genType type
type MoqIP_genType_IsInterfaceLocalMulticast_anyParams struct {
	Recorder *MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder
}

// MoqIP_genType_IsLinkLocalMulticast_params holds the params of the IP_genType
// type
type MoqIP_genType_IsLinkLocalMulticast_params struct{}

// MoqIP_genType_IsLinkLocalMulticast_paramsKey holds the map key params of the
// IP_genType type
type MoqIP_genType_IsLinkLocalMulticast_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqIP_genType_IsLinkLocalMulticast_resultsByParams contains the results for
// a given set of parameters for the IP_genType type
type MoqIP_genType_IsLinkLocalMulticast_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIP_genType_IsLinkLocalMulticast_paramsKey]*MoqIP_genType_IsLinkLocalMulticast_results
}

// MoqIP_genType_IsLinkLocalMulticast_doFn defines the type of function needed
// when calling AndDo for the IP_genType type
type MoqIP_genType_IsLinkLocalMulticast_doFn func()

// MoqIP_genType_IsLinkLocalMulticast_doReturnFn defines the type of function
// needed when calling DoReturnResults for the IP_genType type
type MoqIP_genType_IsLinkLocalMulticast_doReturnFn func() bool

// MoqIP_genType_IsLinkLocalMulticast_results holds the results of the
// IP_genType type
type MoqIP_genType_IsLinkLocalMulticast_results struct {
	Params  MoqIP_genType_IsLinkLocalMulticast_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsLinkLocalMulticast_doFn
		DoReturnFn MoqIP_genType_IsLinkLocalMulticast_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIP_genType_IsLinkLocalMulticast_fnRecorder routes recorded function calls
// to the MoqIP_genType moq
type MoqIP_genType_IsLinkLocalMulticast_fnRecorder struct {
	Params    MoqIP_genType_IsLinkLocalMulticast_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIP_genType_IsLinkLocalMulticast_results
	Moq       *MoqIP_genType
}

// MoqIP_genType_IsLinkLocalMulticast_anyParams isolates the any params
// functions of the IP_genType type
type MoqIP_genType_IsLinkLocalMulticast_anyParams struct {
	Recorder *MoqIP_genType_IsLinkLocalMulticast_fnRecorder
}

// MoqIP_genType_IsLinkLocalUnicast_params holds the params of the IP_genType
// type
type MoqIP_genType_IsLinkLocalUnicast_params struct{}

// MoqIP_genType_IsLinkLocalUnicast_paramsKey holds the map key params of the
// IP_genType type
type MoqIP_genType_IsLinkLocalUnicast_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqIP_genType_IsLinkLocalUnicast_resultsByParams contains the results for a
// given set of parameters for the IP_genType type
type MoqIP_genType_IsLinkLocalUnicast_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIP_genType_IsLinkLocalUnicast_paramsKey]*MoqIP_genType_IsLinkLocalUnicast_results
}

// MoqIP_genType_IsLinkLocalUnicast_doFn defines the type of function needed
// when calling AndDo for the IP_genType type
type MoqIP_genType_IsLinkLocalUnicast_doFn func()

// MoqIP_genType_IsLinkLocalUnicast_doReturnFn defines the type of function
// needed when calling DoReturnResults for the IP_genType type
type MoqIP_genType_IsLinkLocalUnicast_doReturnFn func() bool

// MoqIP_genType_IsLinkLocalUnicast_results holds the results of the IP_genType
// type
type MoqIP_genType_IsLinkLocalUnicast_results struct {
	Params  MoqIP_genType_IsLinkLocalUnicast_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsLinkLocalUnicast_doFn
		DoReturnFn MoqIP_genType_IsLinkLocalUnicast_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIP_genType_IsLinkLocalUnicast_fnRecorder routes recorded function calls
// to the MoqIP_genType moq
type MoqIP_genType_IsLinkLocalUnicast_fnRecorder struct {
	Params    MoqIP_genType_IsLinkLocalUnicast_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIP_genType_IsLinkLocalUnicast_results
	Moq       *MoqIP_genType
}

// MoqIP_genType_IsLinkLocalUnicast_anyParams isolates the any params functions
// of the IP_genType type
type MoqIP_genType_IsLinkLocalUnicast_anyParams struct {
	Recorder *MoqIP_genType_IsLinkLocalUnicast_fnRecorder
}

// MoqIP_genType_IsGlobalUnicast_params holds the params of the IP_genType type
type MoqIP_genType_IsGlobalUnicast_params struct{}

// MoqIP_genType_IsGlobalUnicast_paramsKey holds the map key params of the
// IP_genType type
type MoqIP_genType_IsGlobalUnicast_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqIP_genType_IsGlobalUnicast_resultsByParams contains the results for a
// given set of parameters for the IP_genType type
type MoqIP_genType_IsGlobalUnicast_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIP_genType_IsGlobalUnicast_paramsKey]*MoqIP_genType_IsGlobalUnicast_results
}

// MoqIP_genType_IsGlobalUnicast_doFn defines the type of function needed when
// calling AndDo for the IP_genType type
type MoqIP_genType_IsGlobalUnicast_doFn func()

// MoqIP_genType_IsGlobalUnicast_doReturnFn defines the type of function needed
// when calling DoReturnResults for the IP_genType type
type MoqIP_genType_IsGlobalUnicast_doReturnFn func() bool

// MoqIP_genType_IsGlobalUnicast_results holds the results of the IP_genType
// type
type MoqIP_genType_IsGlobalUnicast_results struct {
	Params  MoqIP_genType_IsGlobalUnicast_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsGlobalUnicast_doFn
		DoReturnFn MoqIP_genType_IsGlobalUnicast_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIP_genType_IsGlobalUnicast_fnRecorder routes recorded function calls to
// the MoqIP_genType moq
type MoqIP_genType_IsGlobalUnicast_fnRecorder struct {
	Params    MoqIP_genType_IsGlobalUnicast_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIP_genType_IsGlobalUnicast_results
	Moq       *MoqIP_genType
}

// MoqIP_genType_IsGlobalUnicast_anyParams isolates the any params functions of
// the IP_genType type
type MoqIP_genType_IsGlobalUnicast_anyParams struct {
	Recorder *MoqIP_genType_IsGlobalUnicast_fnRecorder
}

// MoqIP_genType_To4_params holds the params of the IP_genType type
type MoqIP_genType_To4_params struct{}

// MoqIP_genType_To4_paramsKey holds the map key params of the IP_genType type
type MoqIP_genType_To4_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqIP_genType_To4_resultsByParams contains the results for a given set of
// parameters for the IP_genType type
type MoqIP_genType_To4_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIP_genType_To4_paramsKey]*MoqIP_genType_To4_results
}

// MoqIP_genType_To4_doFn defines the type of function needed when calling
// AndDo for the IP_genType type
type MoqIP_genType_To4_doFn func()

// MoqIP_genType_To4_doReturnFn defines the type of function needed when
// calling DoReturnResults for the IP_genType type
type MoqIP_genType_To4_doReturnFn func() net.IP

// MoqIP_genType_To4_results holds the results of the IP_genType type
type MoqIP_genType_To4_results struct {
	Params  MoqIP_genType_To4_params
	Results []struct {
		Values *struct {
			Result1 net.IP
		}
		Sequence   uint32
		DoFn       MoqIP_genType_To4_doFn
		DoReturnFn MoqIP_genType_To4_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIP_genType_To4_fnRecorder routes recorded function calls to the
// MoqIP_genType moq
type MoqIP_genType_To4_fnRecorder struct {
	Params    MoqIP_genType_To4_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIP_genType_To4_results
	Moq       *MoqIP_genType
}

// MoqIP_genType_To4_anyParams isolates the any params functions of the
// IP_genType type
type MoqIP_genType_To4_anyParams struct {
	Recorder *MoqIP_genType_To4_fnRecorder
}

// MoqIP_genType_To16_params holds the params of the IP_genType type
type MoqIP_genType_To16_params struct{}

// MoqIP_genType_To16_paramsKey holds the map key params of the IP_genType type
type MoqIP_genType_To16_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqIP_genType_To16_resultsByParams contains the results for a given set of
// parameters for the IP_genType type
type MoqIP_genType_To16_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIP_genType_To16_paramsKey]*MoqIP_genType_To16_results
}

// MoqIP_genType_To16_doFn defines the type of function needed when calling
// AndDo for the IP_genType type
type MoqIP_genType_To16_doFn func()

// MoqIP_genType_To16_doReturnFn defines the type of function needed when
// calling DoReturnResults for the IP_genType type
type MoqIP_genType_To16_doReturnFn func() net.IP

// MoqIP_genType_To16_results holds the results of the IP_genType type
type MoqIP_genType_To16_results struct {
	Params  MoqIP_genType_To16_params
	Results []struct {
		Values *struct {
			Result1 net.IP
		}
		Sequence   uint32
		DoFn       MoqIP_genType_To16_doFn
		DoReturnFn MoqIP_genType_To16_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIP_genType_To16_fnRecorder routes recorded function calls to the
// MoqIP_genType moq
type MoqIP_genType_To16_fnRecorder struct {
	Params    MoqIP_genType_To16_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIP_genType_To16_results
	Moq       *MoqIP_genType
}

// MoqIP_genType_To16_anyParams isolates the any params functions of the
// IP_genType type
type MoqIP_genType_To16_anyParams struct {
	Recorder *MoqIP_genType_To16_fnRecorder
}

// MoqIP_genType_DefaultMask_params holds the params of the IP_genType type
type MoqIP_genType_DefaultMask_params struct{}

// MoqIP_genType_DefaultMask_paramsKey holds the map key params of the
// IP_genType type
type MoqIP_genType_DefaultMask_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqIP_genType_DefaultMask_resultsByParams contains the results for a given
// set of parameters for the IP_genType type
type MoqIP_genType_DefaultMask_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIP_genType_DefaultMask_paramsKey]*MoqIP_genType_DefaultMask_results
}

// MoqIP_genType_DefaultMask_doFn defines the type of function needed when
// calling AndDo for the IP_genType type
type MoqIP_genType_DefaultMask_doFn func()

// MoqIP_genType_DefaultMask_doReturnFn defines the type of function needed
// when calling DoReturnResults for the IP_genType type
type MoqIP_genType_DefaultMask_doReturnFn func() net.IPMask

// MoqIP_genType_DefaultMask_results holds the results of the IP_genType type
type MoqIP_genType_DefaultMask_results struct {
	Params  MoqIP_genType_DefaultMask_params
	Results []struct {
		Values *struct {
			Result1 net.IPMask
		}
		Sequence   uint32
		DoFn       MoqIP_genType_DefaultMask_doFn
		DoReturnFn MoqIP_genType_DefaultMask_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIP_genType_DefaultMask_fnRecorder routes recorded function calls to the
// MoqIP_genType moq
type MoqIP_genType_DefaultMask_fnRecorder struct {
	Params    MoqIP_genType_DefaultMask_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIP_genType_DefaultMask_results
	Moq       *MoqIP_genType
}

// MoqIP_genType_DefaultMask_anyParams isolates the any params functions of the
// IP_genType type
type MoqIP_genType_DefaultMask_anyParams struct {
	Recorder *MoqIP_genType_DefaultMask_fnRecorder
}

// MoqIP_genType_Mask_params holds the params of the IP_genType type
type MoqIP_genType_Mask_params struct{ Mask net.IPMask }

// MoqIP_genType_Mask_paramsKey holds the map key params of the IP_genType type
type MoqIP_genType_Mask_paramsKey struct {
	Params struct{}
	Hashes struct{ Mask hash.Hash }
}

// MoqIP_genType_Mask_resultsByParams contains the results for a given set of
// parameters for the IP_genType type
type MoqIP_genType_Mask_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIP_genType_Mask_paramsKey]*MoqIP_genType_Mask_results
}

// MoqIP_genType_Mask_doFn defines the type of function needed when calling
// AndDo for the IP_genType type
type MoqIP_genType_Mask_doFn func(mask net.IPMask)

// MoqIP_genType_Mask_doReturnFn defines the type of function needed when
// calling DoReturnResults for the IP_genType type
type MoqIP_genType_Mask_doReturnFn func(mask net.IPMask) net.IP

// MoqIP_genType_Mask_results holds the results of the IP_genType type
type MoqIP_genType_Mask_results struct {
	Params  MoqIP_genType_Mask_params
	Results []struct {
		Values *struct {
			Result1 net.IP
		}
		Sequence   uint32
		DoFn       MoqIP_genType_Mask_doFn
		DoReturnFn MoqIP_genType_Mask_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIP_genType_Mask_fnRecorder routes recorded function calls to the
// MoqIP_genType moq
type MoqIP_genType_Mask_fnRecorder struct {
	Params    MoqIP_genType_Mask_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIP_genType_Mask_results
	Moq       *MoqIP_genType
}

// MoqIP_genType_Mask_anyParams isolates the any params functions of the
// IP_genType type
type MoqIP_genType_Mask_anyParams struct {
	Recorder *MoqIP_genType_Mask_fnRecorder
}

// MoqIP_genType_String_params holds the params of the IP_genType type
type MoqIP_genType_String_params struct{}

// MoqIP_genType_String_paramsKey holds the map key params of the IP_genType
// type
type MoqIP_genType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqIP_genType_String_resultsByParams contains the results for a given set of
// parameters for the IP_genType type
type MoqIP_genType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIP_genType_String_paramsKey]*MoqIP_genType_String_results
}

// MoqIP_genType_String_doFn defines the type of function needed when calling
// AndDo for the IP_genType type
type MoqIP_genType_String_doFn func()

// MoqIP_genType_String_doReturnFn defines the type of function needed when
// calling DoReturnResults for the IP_genType type
type MoqIP_genType_String_doReturnFn func() string

// MoqIP_genType_String_results holds the results of the IP_genType type
type MoqIP_genType_String_results struct {
	Params  MoqIP_genType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqIP_genType_String_doFn
		DoReturnFn MoqIP_genType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIP_genType_String_fnRecorder routes recorded function calls to the
// MoqIP_genType moq
type MoqIP_genType_String_fnRecorder struct {
	Params    MoqIP_genType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIP_genType_String_results
	Moq       *MoqIP_genType
}

// MoqIP_genType_String_anyParams isolates the any params functions of the
// IP_genType type
type MoqIP_genType_String_anyParams struct {
	Recorder *MoqIP_genType_String_fnRecorder
}

// MoqIP_genType_MarshalText_params holds the params of the IP_genType type
type MoqIP_genType_MarshalText_params struct{}

// MoqIP_genType_MarshalText_paramsKey holds the map key params of the
// IP_genType type
type MoqIP_genType_MarshalText_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqIP_genType_MarshalText_resultsByParams contains the results for a given
// set of parameters for the IP_genType type
type MoqIP_genType_MarshalText_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIP_genType_MarshalText_paramsKey]*MoqIP_genType_MarshalText_results
}

// MoqIP_genType_MarshalText_doFn defines the type of function needed when
// calling AndDo for the IP_genType type
type MoqIP_genType_MarshalText_doFn func()

// MoqIP_genType_MarshalText_doReturnFn defines the type of function needed
// when calling DoReturnResults for the IP_genType type
type MoqIP_genType_MarshalText_doReturnFn func() ([]byte, error)

// MoqIP_genType_MarshalText_results holds the results of the IP_genType type
type MoqIP_genType_MarshalText_results struct {
	Params  MoqIP_genType_MarshalText_params
	Results []struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqIP_genType_MarshalText_doFn
		DoReturnFn MoqIP_genType_MarshalText_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIP_genType_MarshalText_fnRecorder routes recorded function calls to the
// MoqIP_genType moq
type MoqIP_genType_MarshalText_fnRecorder struct {
	Params    MoqIP_genType_MarshalText_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIP_genType_MarshalText_results
	Moq       *MoqIP_genType
}

// MoqIP_genType_MarshalText_anyParams isolates the any params functions of the
// IP_genType type
type MoqIP_genType_MarshalText_anyParams struct {
	Recorder *MoqIP_genType_MarshalText_fnRecorder
}

// MoqIP_genType_Equal_params holds the params of the IP_genType type
type MoqIP_genType_Equal_params struct{ X net.IP }

// MoqIP_genType_Equal_paramsKey holds the map key params of the IP_genType
// type
type MoqIP_genType_Equal_paramsKey struct {
	Params struct{}
	Hashes struct{ X hash.Hash }
}

// MoqIP_genType_Equal_resultsByParams contains the results for a given set of
// parameters for the IP_genType type
type MoqIP_genType_Equal_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIP_genType_Equal_paramsKey]*MoqIP_genType_Equal_results
}

// MoqIP_genType_Equal_doFn defines the type of function needed when calling
// AndDo for the IP_genType type
type MoqIP_genType_Equal_doFn func(x net.IP)

// MoqIP_genType_Equal_doReturnFn defines the type of function needed when
// calling DoReturnResults for the IP_genType type
type MoqIP_genType_Equal_doReturnFn func(x net.IP) bool

// MoqIP_genType_Equal_results holds the results of the IP_genType type
type MoqIP_genType_Equal_results struct {
	Params  MoqIP_genType_Equal_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_Equal_doFn
		DoReturnFn MoqIP_genType_Equal_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIP_genType_Equal_fnRecorder routes recorded function calls to the
// MoqIP_genType moq
type MoqIP_genType_Equal_fnRecorder struct {
	Params    MoqIP_genType_Equal_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIP_genType_Equal_results
	Moq       *MoqIP_genType
}

// MoqIP_genType_Equal_anyParams isolates the any params functions of the
// IP_genType type
type MoqIP_genType_Equal_anyParams struct {
	Recorder *MoqIP_genType_Equal_fnRecorder
}

// NewMoqIP_genType creates a new moq of the IP_genType type
func NewMoqIP_genType(scene *moq.Scene, config *moq.Config) *MoqIP_genType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqIP_genType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqIP_genType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				IsUnspecified             struct{}
				IsLoopback                struct{}
				IsMulticast               struct{}
				IsInterfaceLocalMulticast struct{}
				IsLinkLocalMulticast      struct{}
				IsLinkLocalUnicast        struct{}
				IsGlobalUnicast           struct{}
				To4                       struct{}
				To16                      struct{}
				DefaultMask               struct{}
				Mask                      struct {
					Mask moq.ParamIndexing
				}
				String      struct{}
				MarshalText struct{}
				Equal       struct {
					X moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			IsUnspecified             struct{}
			IsLoopback                struct{}
			IsMulticast               struct{}
			IsInterfaceLocalMulticast struct{}
			IsLinkLocalMulticast      struct{}
			IsLinkLocalUnicast        struct{}
			IsGlobalUnicast           struct{}
			To4                       struct{}
			To16                      struct{}
			DefaultMask               struct{}
			Mask                      struct {
				Mask moq.ParamIndexing
			}
			String      struct{}
			MarshalText struct{}
			Equal       struct {
				X moq.ParamIndexing
			}
		}{
			IsUnspecified:             struct{}{},
			IsLoopback:                struct{}{},
			IsMulticast:               struct{}{},
			IsInterfaceLocalMulticast: struct{}{},
			IsLinkLocalMulticast:      struct{}{},
			IsLinkLocalUnicast:        struct{}{},
			IsGlobalUnicast:           struct{}{},
			To4:                       struct{}{},
			To16:                      struct{}{},
			DefaultMask:               struct{}{},
			Mask: struct {
				Mask moq.ParamIndexing
			}{
				Mask: moq.ParamIndexByHash,
			},
			String:      struct{}{},
			MarshalText: struct{}{},
			Equal: struct {
				X moq.ParamIndexing
			}{
				X: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the IP_genType type
func (m *MoqIP_genType) Mock() *MoqIP_genType_mock { return m.Moq }

func (m *MoqIP_genType_mock) IsUnspecified() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqIP_genType_IsUnspecified_params{}
	var results *MoqIP_genType_IsUnspecified_results
	for _, resultsByParams := range m.Moq.ResultsByParams_IsUnspecified {
		paramsKey := m.Moq.ParamsKey_IsUnspecified(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_IsUnspecified(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_IsUnspecified(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_IsUnspecified(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqIP_genType_mock) IsLoopback() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqIP_genType_IsLoopback_params{}
	var results *MoqIP_genType_IsLoopback_results
	for _, resultsByParams := range m.Moq.ResultsByParams_IsLoopback {
		paramsKey := m.Moq.ParamsKey_IsLoopback(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_IsLoopback(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_IsLoopback(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_IsLoopback(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqIP_genType_mock) IsMulticast() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqIP_genType_IsMulticast_params{}
	var results *MoqIP_genType_IsMulticast_results
	for _, resultsByParams := range m.Moq.ResultsByParams_IsMulticast {
		paramsKey := m.Moq.ParamsKey_IsMulticast(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_IsMulticast(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_IsMulticast(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_IsMulticast(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqIP_genType_mock) IsInterfaceLocalMulticast() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqIP_genType_IsInterfaceLocalMulticast_params{}
	var results *MoqIP_genType_IsInterfaceLocalMulticast_results
	for _, resultsByParams := range m.Moq.ResultsByParams_IsInterfaceLocalMulticast {
		paramsKey := m.Moq.ParamsKey_IsInterfaceLocalMulticast(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_IsInterfaceLocalMulticast(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_IsInterfaceLocalMulticast(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_IsInterfaceLocalMulticast(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqIP_genType_mock) IsLinkLocalMulticast() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqIP_genType_IsLinkLocalMulticast_params{}
	var results *MoqIP_genType_IsLinkLocalMulticast_results
	for _, resultsByParams := range m.Moq.ResultsByParams_IsLinkLocalMulticast {
		paramsKey := m.Moq.ParamsKey_IsLinkLocalMulticast(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_IsLinkLocalMulticast(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_IsLinkLocalMulticast(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_IsLinkLocalMulticast(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqIP_genType_mock) IsLinkLocalUnicast() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqIP_genType_IsLinkLocalUnicast_params{}
	var results *MoqIP_genType_IsLinkLocalUnicast_results
	for _, resultsByParams := range m.Moq.ResultsByParams_IsLinkLocalUnicast {
		paramsKey := m.Moq.ParamsKey_IsLinkLocalUnicast(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_IsLinkLocalUnicast(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_IsLinkLocalUnicast(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_IsLinkLocalUnicast(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqIP_genType_mock) IsGlobalUnicast() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqIP_genType_IsGlobalUnicast_params{}
	var results *MoqIP_genType_IsGlobalUnicast_results
	for _, resultsByParams := range m.Moq.ResultsByParams_IsGlobalUnicast {
		paramsKey := m.Moq.ParamsKey_IsGlobalUnicast(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_IsGlobalUnicast(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_IsGlobalUnicast(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_IsGlobalUnicast(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqIP_genType_mock) To4() (result1 net.IP) {
	m.Moq.Scene.T.Helper()
	params := MoqIP_genType_To4_params{}
	var results *MoqIP_genType_To4_results
	for _, resultsByParams := range m.Moq.ResultsByParams_To4 {
		paramsKey := m.Moq.ParamsKey_To4(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_To4(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_To4(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_To4(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqIP_genType_mock) To16() (result1 net.IP) {
	m.Moq.Scene.T.Helper()
	params := MoqIP_genType_To16_params{}
	var results *MoqIP_genType_To16_results
	for _, resultsByParams := range m.Moq.ResultsByParams_To16 {
		paramsKey := m.Moq.ParamsKey_To16(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_To16(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_To16(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_To16(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqIP_genType_mock) DefaultMask() (result1 net.IPMask) {
	m.Moq.Scene.T.Helper()
	params := MoqIP_genType_DefaultMask_params{}
	var results *MoqIP_genType_DefaultMask_results
	for _, resultsByParams := range m.Moq.ResultsByParams_DefaultMask {
		paramsKey := m.Moq.ParamsKey_DefaultMask(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_DefaultMask(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_DefaultMask(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_DefaultMask(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqIP_genType_mock) Mask(mask net.IPMask) (result1 net.IP) {
	m.Moq.Scene.T.Helper()
	params := MoqIP_genType_Mask_params{
		Mask: mask,
	}
	var results *MoqIP_genType_Mask_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Mask {
		paramsKey := m.Moq.ParamsKey_Mask(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Mask(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Mask(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Mask(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(mask)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(mask)
	}
	return
}

func (m *MoqIP_genType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqIP_genType_String_params{}
	var results *MoqIP_genType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqIP_genType_mock) MarshalText() (result1 []byte, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqIP_genType_MarshalText_params{}
	var results *MoqIP_genType_MarshalText_results
	for _, resultsByParams := range m.Moq.ResultsByParams_MarshalText {
		paramsKey := m.Moq.ParamsKey_MarshalText(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_MarshalText(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_MarshalText(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_MarshalText(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqIP_genType_mock) Equal(x net.IP) (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqIP_genType_Equal_params{
		X: x,
	}
	var results *MoqIP_genType_Equal_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Equal {
		paramsKey := m.Moq.ParamsKey_Equal(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Equal(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Equal(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Equal(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(x)
	}
	return
}

// OnCall returns the recorder implementation of the IP_genType type
func (m *MoqIP_genType) OnCall() *MoqIP_genType_recorder {
	return &MoqIP_genType_recorder{
		Moq: m,
	}
}

func (m *MoqIP_genType_recorder) IsUnspecified() *MoqIP_genType_IsUnspecified_fnRecorder {
	return &MoqIP_genType_IsUnspecified_fnRecorder{
		Params:   MoqIP_genType_IsUnspecified_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIP_genType_IsUnspecified_fnRecorder) Any() *MoqIP_genType_IsUnspecified_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsUnspecified(r.Params))
		return nil
	}
	return &MoqIP_genType_IsUnspecified_anyParams{Recorder: r}
}

func (r *MoqIP_genType_IsUnspecified_fnRecorder) Seq() *MoqIP_genType_IsUnspecified_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsUnspecified(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIP_genType_IsUnspecified_fnRecorder) NoSeq() *MoqIP_genType_IsUnspecified_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsUnspecified(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIP_genType_IsUnspecified_fnRecorder) ReturnResults(result1 bool) *MoqIP_genType_IsUnspecified_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsUnspecified_doFn
		DoReturnFn MoqIP_genType_IsUnspecified_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIP_genType_IsUnspecified_fnRecorder) AndDo(fn MoqIP_genType_IsUnspecified_doFn) *MoqIP_genType_IsUnspecified_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIP_genType_IsUnspecified_fnRecorder) DoReturnResults(fn MoqIP_genType_IsUnspecified_doReturnFn) *MoqIP_genType_IsUnspecified_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsUnspecified_doFn
		DoReturnFn MoqIP_genType_IsUnspecified_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIP_genType_IsUnspecified_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIP_genType_IsUnspecified_resultsByParams
	for n, res := range r.Moq.ResultsByParams_IsUnspecified {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIP_genType_IsUnspecified_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIP_genType_IsUnspecified_paramsKey]*MoqIP_genType_IsUnspecified_results{},
		}
		r.Moq.ResultsByParams_IsUnspecified = append(r.Moq.ResultsByParams_IsUnspecified, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_IsUnspecified) {
			copy(r.Moq.ResultsByParams_IsUnspecified[insertAt+1:], r.Moq.ResultsByParams_IsUnspecified[insertAt:0])
			r.Moq.ResultsByParams_IsUnspecified[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_IsUnspecified(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIP_genType_IsUnspecified_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIP_genType_IsUnspecified_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIP_genType_IsUnspecified_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqIP_genType_IsUnspecified_doFn
				DoReturnFn MoqIP_genType_IsUnspecified_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIP_genType) PrettyParams_IsUnspecified(params MoqIP_genType_IsUnspecified_params) string {
	return fmt.Sprintf("IsUnspecified()")
}

func (m *MoqIP_genType) ParamsKey_IsUnspecified(params MoqIP_genType_IsUnspecified_params, anyParams uint64) MoqIP_genType_IsUnspecified_paramsKey {
	m.Scene.T.Helper()
	return MoqIP_genType_IsUnspecified_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqIP_genType_recorder) IsLoopback() *MoqIP_genType_IsLoopback_fnRecorder {
	return &MoqIP_genType_IsLoopback_fnRecorder{
		Params:   MoqIP_genType_IsLoopback_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIP_genType_IsLoopback_fnRecorder) Any() *MoqIP_genType_IsLoopback_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsLoopback(r.Params))
		return nil
	}
	return &MoqIP_genType_IsLoopback_anyParams{Recorder: r}
}

func (r *MoqIP_genType_IsLoopback_fnRecorder) Seq() *MoqIP_genType_IsLoopback_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsLoopback(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIP_genType_IsLoopback_fnRecorder) NoSeq() *MoqIP_genType_IsLoopback_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsLoopback(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIP_genType_IsLoopback_fnRecorder) ReturnResults(result1 bool) *MoqIP_genType_IsLoopback_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsLoopback_doFn
		DoReturnFn MoqIP_genType_IsLoopback_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIP_genType_IsLoopback_fnRecorder) AndDo(fn MoqIP_genType_IsLoopback_doFn) *MoqIP_genType_IsLoopback_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIP_genType_IsLoopback_fnRecorder) DoReturnResults(fn MoqIP_genType_IsLoopback_doReturnFn) *MoqIP_genType_IsLoopback_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsLoopback_doFn
		DoReturnFn MoqIP_genType_IsLoopback_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIP_genType_IsLoopback_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIP_genType_IsLoopback_resultsByParams
	for n, res := range r.Moq.ResultsByParams_IsLoopback {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIP_genType_IsLoopback_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIP_genType_IsLoopback_paramsKey]*MoqIP_genType_IsLoopback_results{},
		}
		r.Moq.ResultsByParams_IsLoopback = append(r.Moq.ResultsByParams_IsLoopback, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_IsLoopback) {
			copy(r.Moq.ResultsByParams_IsLoopback[insertAt+1:], r.Moq.ResultsByParams_IsLoopback[insertAt:0])
			r.Moq.ResultsByParams_IsLoopback[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_IsLoopback(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIP_genType_IsLoopback_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIP_genType_IsLoopback_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIP_genType_IsLoopback_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqIP_genType_IsLoopback_doFn
				DoReturnFn MoqIP_genType_IsLoopback_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIP_genType) PrettyParams_IsLoopback(params MoqIP_genType_IsLoopback_params) string {
	return fmt.Sprintf("IsLoopback()")
}

func (m *MoqIP_genType) ParamsKey_IsLoopback(params MoqIP_genType_IsLoopback_params, anyParams uint64) MoqIP_genType_IsLoopback_paramsKey {
	m.Scene.T.Helper()
	return MoqIP_genType_IsLoopback_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqIP_genType_recorder) IsMulticast() *MoqIP_genType_IsMulticast_fnRecorder {
	return &MoqIP_genType_IsMulticast_fnRecorder{
		Params:   MoqIP_genType_IsMulticast_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIP_genType_IsMulticast_fnRecorder) Any() *MoqIP_genType_IsMulticast_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsMulticast(r.Params))
		return nil
	}
	return &MoqIP_genType_IsMulticast_anyParams{Recorder: r}
}

func (r *MoqIP_genType_IsMulticast_fnRecorder) Seq() *MoqIP_genType_IsMulticast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsMulticast(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIP_genType_IsMulticast_fnRecorder) NoSeq() *MoqIP_genType_IsMulticast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsMulticast(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIP_genType_IsMulticast_fnRecorder) ReturnResults(result1 bool) *MoqIP_genType_IsMulticast_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsMulticast_doFn
		DoReturnFn MoqIP_genType_IsMulticast_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIP_genType_IsMulticast_fnRecorder) AndDo(fn MoqIP_genType_IsMulticast_doFn) *MoqIP_genType_IsMulticast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIP_genType_IsMulticast_fnRecorder) DoReturnResults(fn MoqIP_genType_IsMulticast_doReturnFn) *MoqIP_genType_IsMulticast_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsMulticast_doFn
		DoReturnFn MoqIP_genType_IsMulticast_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIP_genType_IsMulticast_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIP_genType_IsMulticast_resultsByParams
	for n, res := range r.Moq.ResultsByParams_IsMulticast {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIP_genType_IsMulticast_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIP_genType_IsMulticast_paramsKey]*MoqIP_genType_IsMulticast_results{},
		}
		r.Moq.ResultsByParams_IsMulticast = append(r.Moq.ResultsByParams_IsMulticast, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_IsMulticast) {
			copy(r.Moq.ResultsByParams_IsMulticast[insertAt+1:], r.Moq.ResultsByParams_IsMulticast[insertAt:0])
			r.Moq.ResultsByParams_IsMulticast[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_IsMulticast(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIP_genType_IsMulticast_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIP_genType_IsMulticast_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIP_genType_IsMulticast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqIP_genType_IsMulticast_doFn
				DoReturnFn MoqIP_genType_IsMulticast_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIP_genType) PrettyParams_IsMulticast(params MoqIP_genType_IsMulticast_params) string {
	return fmt.Sprintf("IsMulticast()")
}

func (m *MoqIP_genType) ParamsKey_IsMulticast(params MoqIP_genType_IsMulticast_params, anyParams uint64) MoqIP_genType_IsMulticast_paramsKey {
	m.Scene.T.Helper()
	return MoqIP_genType_IsMulticast_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqIP_genType_recorder) IsInterfaceLocalMulticast() *MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder {
	return &MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder{
		Params:   MoqIP_genType_IsInterfaceLocalMulticast_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder) Any() *MoqIP_genType_IsInterfaceLocalMulticast_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsInterfaceLocalMulticast(r.Params))
		return nil
	}
	return &MoqIP_genType_IsInterfaceLocalMulticast_anyParams{Recorder: r}
}

func (r *MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder) Seq() *MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsInterfaceLocalMulticast(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder) NoSeq() *MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsInterfaceLocalMulticast(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder) ReturnResults(result1 bool) *MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsInterfaceLocalMulticast_doFn
		DoReturnFn MoqIP_genType_IsInterfaceLocalMulticast_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder) AndDo(fn MoqIP_genType_IsInterfaceLocalMulticast_doFn) *MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder) DoReturnResults(fn MoqIP_genType_IsInterfaceLocalMulticast_doReturnFn) *MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsInterfaceLocalMulticast_doFn
		DoReturnFn MoqIP_genType_IsInterfaceLocalMulticast_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIP_genType_IsInterfaceLocalMulticast_resultsByParams
	for n, res := range r.Moq.ResultsByParams_IsInterfaceLocalMulticast {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIP_genType_IsInterfaceLocalMulticast_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIP_genType_IsInterfaceLocalMulticast_paramsKey]*MoqIP_genType_IsInterfaceLocalMulticast_results{},
		}
		r.Moq.ResultsByParams_IsInterfaceLocalMulticast = append(r.Moq.ResultsByParams_IsInterfaceLocalMulticast, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_IsInterfaceLocalMulticast) {
			copy(r.Moq.ResultsByParams_IsInterfaceLocalMulticast[insertAt+1:], r.Moq.ResultsByParams_IsInterfaceLocalMulticast[insertAt:0])
			r.Moq.ResultsByParams_IsInterfaceLocalMulticast[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_IsInterfaceLocalMulticast(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIP_genType_IsInterfaceLocalMulticast_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIP_genType_IsInterfaceLocalMulticast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqIP_genType_IsInterfaceLocalMulticast_doFn
				DoReturnFn MoqIP_genType_IsInterfaceLocalMulticast_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIP_genType) PrettyParams_IsInterfaceLocalMulticast(params MoqIP_genType_IsInterfaceLocalMulticast_params) string {
	return fmt.Sprintf("IsInterfaceLocalMulticast()")
}

func (m *MoqIP_genType) ParamsKey_IsInterfaceLocalMulticast(params MoqIP_genType_IsInterfaceLocalMulticast_params, anyParams uint64) MoqIP_genType_IsInterfaceLocalMulticast_paramsKey {
	m.Scene.T.Helper()
	return MoqIP_genType_IsInterfaceLocalMulticast_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqIP_genType_recorder) IsLinkLocalMulticast() *MoqIP_genType_IsLinkLocalMulticast_fnRecorder {
	return &MoqIP_genType_IsLinkLocalMulticast_fnRecorder{
		Params:   MoqIP_genType_IsLinkLocalMulticast_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIP_genType_IsLinkLocalMulticast_fnRecorder) Any() *MoqIP_genType_IsLinkLocalMulticast_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsLinkLocalMulticast(r.Params))
		return nil
	}
	return &MoqIP_genType_IsLinkLocalMulticast_anyParams{Recorder: r}
}

func (r *MoqIP_genType_IsLinkLocalMulticast_fnRecorder) Seq() *MoqIP_genType_IsLinkLocalMulticast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsLinkLocalMulticast(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIP_genType_IsLinkLocalMulticast_fnRecorder) NoSeq() *MoqIP_genType_IsLinkLocalMulticast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsLinkLocalMulticast(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIP_genType_IsLinkLocalMulticast_fnRecorder) ReturnResults(result1 bool) *MoqIP_genType_IsLinkLocalMulticast_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsLinkLocalMulticast_doFn
		DoReturnFn MoqIP_genType_IsLinkLocalMulticast_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIP_genType_IsLinkLocalMulticast_fnRecorder) AndDo(fn MoqIP_genType_IsLinkLocalMulticast_doFn) *MoqIP_genType_IsLinkLocalMulticast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIP_genType_IsLinkLocalMulticast_fnRecorder) DoReturnResults(fn MoqIP_genType_IsLinkLocalMulticast_doReturnFn) *MoqIP_genType_IsLinkLocalMulticast_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsLinkLocalMulticast_doFn
		DoReturnFn MoqIP_genType_IsLinkLocalMulticast_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIP_genType_IsLinkLocalMulticast_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIP_genType_IsLinkLocalMulticast_resultsByParams
	for n, res := range r.Moq.ResultsByParams_IsLinkLocalMulticast {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIP_genType_IsLinkLocalMulticast_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIP_genType_IsLinkLocalMulticast_paramsKey]*MoqIP_genType_IsLinkLocalMulticast_results{},
		}
		r.Moq.ResultsByParams_IsLinkLocalMulticast = append(r.Moq.ResultsByParams_IsLinkLocalMulticast, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_IsLinkLocalMulticast) {
			copy(r.Moq.ResultsByParams_IsLinkLocalMulticast[insertAt+1:], r.Moq.ResultsByParams_IsLinkLocalMulticast[insertAt:0])
			r.Moq.ResultsByParams_IsLinkLocalMulticast[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_IsLinkLocalMulticast(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIP_genType_IsLinkLocalMulticast_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIP_genType_IsLinkLocalMulticast_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIP_genType_IsLinkLocalMulticast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqIP_genType_IsLinkLocalMulticast_doFn
				DoReturnFn MoqIP_genType_IsLinkLocalMulticast_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIP_genType) PrettyParams_IsLinkLocalMulticast(params MoqIP_genType_IsLinkLocalMulticast_params) string {
	return fmt.Sprintf("IsLinkLocalMulticast()")
}

func (m *MoqIP_genType) ParamsKey_IsLinkLocalMulticast(params MoqIP_genType_IsLinkLocalMulticast_params, anyParams uint64) MoqIP_genType_IsLinkLocalMulticast_paramsKey {
	m.Scene.T.Helper()
	return MoqIP_genType_IsLinkLocalMulticast_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqIP_genType_recorder) IsLinkLocalUnicast() *MoqIP_genType_IsLinkLocalUnicast_fnRecorder {
	return &MoqIP_genType_IsLinkLocalUnicast_fnRecorder{
		Params:   MoqIP_genType_IsLinkLocalUnicast_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIP_genType_IsLinkLocalUnicast_fnRecorder) Any() *MoqIP_genType_IsLinkLocalUnicast_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsLinkLocalUnicast(r.Params))
		return nil
	}
	return &MoqIP_genType_IsLinkLocalUnicast_anyParams{Recorder: r}
}

func (r *MoqIP_genType_IsLinkLocalUnicast_fnRecorder) Seq() *MoqIP_genType_IsLinkLocalUnicast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsLinkLocalUnicast(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIP_genType_IsLinkLocalUnicast_fnRecorder) NoSeq() *MoqIP_genType_IsLinkLocalUnicast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsLinkLocalUnicast(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIP_genType_IsLinkLocalUnicast_fnRecorder) ReturnResults(result1 bool) *MoqIP_genType_IsLinkLocalUnicast_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsLinkLocalUnicast_doFn
		DoReturnFn MoqIP_genType_IsLinkLocalUnicast_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIP_genType_IsLinkLocalUnicast_fnRecorder) AndDo(fn MoqIP_genType_IsLinkLocalUnicast_doFn) *MoqIP_genType_IsLinkLocalUnicast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIP_genType_IsLinkLocalUnicast_fnRecorder) DoReturnResults(fn MoqIP_genType_IsLinkLocalUnicast_doReturnFn) *MoqIP_genType_IsLinkLocalUnicast_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsLinkLocalUnicast_doFn
		DoReturnFn MoqIP_genType_IsLinkLocalUnicast_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIP_genType_IsLinkLocalUnicast_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIP_genType_IsLinkLocalUnicast_resultsByParams
	for n, res := range r.Moq.ResultsByParams_IsLinkLocalUnicast {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIP_genType_IsLinkLocalUnicast_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIP_genType_IsLinkLocalUnicast_paramsKey]*MoqIP_genType_IsLinkLocalUnicast_results{},
		}
		r.Moq.ResultsByParams_IsLinkLocalUnicast = append(r.Moq.ResultsByParams_IsLinkLocalUnicast, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_IsLinkLocalUnicast) {
			copy(r.Moq.ResultsByParams_IsLinkLocalUnicast[insertAt+1:], r.Moq.ResultsByParams_IsLinkLocalUnicast[insertAt:0])
			r.Moq.ResultsByParams_IsLinkLocalUnicast[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_IsLinkLocalUnicast(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIP_genType_IsLinkLocalUnicast_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIP_genType_IsLinkLocalUnicast_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIP_genType_IsLinkLocalUnicast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqIP_genType_IsLinkLocalUnicast_doFn
				DoReturnFn MoqIP_genType_IsLinkLocalUnicast_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIP_genType) PrettyParams_IsLinkLocalUnicast(params MoqIP_genType_IsLinkLocalUnicast_params) string {
	return fmt.Sprintf("IsLinkLocalUnicast()")
}

func (m *MoqIP_genType) ParamsKey_IsLinkLocalUnicast(params MoqIP_genType_IsLinkLocalUnicast_params, anyParams uint64) MoqIP_genType_IsLinkLocalUnicast_paramsKey {
	m.Scene.T.Helper()
	return MoqIP_genType_IsLinkLocalUnicast_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqIP_genType_recorder) IsGlobalUnicast() *MoqIP_genType_IsGlobalUnicast_fnRecorder {
	return &MoqIP_genType_IsGlobalUnicast_fnRecorder{
		Params:   MoqIP_genType_IsGlobalUnicast_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIP_genType_IsGlobalUnicast_fnRecorder) Any() *MoqIP_genType_IsGlobalUnicast_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsGlobalUnicast(r.Params))
		return nil
	}
	return &MoqIP_genType_IsGlobalUnicast_anyParams{Recorder: r}
}

func (r *MoqIP_genType_IsGlobalUnicast_fnRecorder) Seq() *MoqIP_genType_IsGlobalUnicast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsGlobalUnicast(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIP_genType_IsGlobalUnicast_fnRecorder) NoSeq() *MoqIP_genType_IsGlobalUnicast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsGlobalUnicast(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIP_genType_IsGlobalUnicast_fnRecorder) ReturnResults(result1 bool) *MoqIP_genType_IsGlobalUnicast_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsGlobalUnicast_doFn
		DoReturnFn MoqIP_genType_IsGlobalUnicast_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIP_genType_IsGlobalUnicast_fnRecorder) AndDo(fn MoqIP_genType_IsGlobalUnicast_doFn) *MoqIP_genType_IsGlobalUnicast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIP_genType_IsGlobalUnicast_fnRecorder) DoReturnResults(fn MoqIP_genType_IsGlobalUnicast_doReturnFn) *MoqIP_genType_IsGlobalUnicast_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_IsGlobalUnicast_doFn
		DoReturnFn MoqIP_genType_IsGlobalUnicast_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIP_genType_IsGlobalUnicast_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIP_genType_IsGlobalUnicast_resultsByParams
	for n, res := range r.Moq.ResultsByParams_IsGlobalUnicast {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIP_genType_IsGlobalUnicast_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIP_genType_IsGlobalUnicast_paramsKey]*MoqIP_genType_IsGlobalUnicast_results{},
		}
		r.Moq.ResultsByParams_IsGlobalUnicast = append(r.Moq.ResultsByParams_IsGlobalUnicast, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_IsGlobalUnicast) {
			copy(r.Moq.ResultsByParams_IsGlobalUnicast[insertAt+1:], r.Moq.ResultsByParams_IsGlobalUnicast[insertAt:0])
			r.Moq.ResultsByParams_IsGlobalUnicast[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_IsGlobalUnicast(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIP_genType_IsGlobalUnicast_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIP_genType_IsGlobalUnicast_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIP_genType_IsGlobalUnicast_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqIP_genType_IsGlobalUnicast_doFn
				DoReturnFn MoqIP_genType_IsGlobalUnicast_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIP_genType) PrettyParams_IsGlobalUnicast(params MoqIP_genType_IsGlobalUnicast_params) string {
	return fmt.Sprintf("IsGlobalUnicast()")
}

func (m *MoqIP_genType) ParamsKey_IsGlobalUnicast(params MoqIP_genType_IsGlobalUnicast_params, anyParams uint64) MoqIP_genType_IsGlobalUnicast_paramsKey {
	m.Scene.T.Helper()
	return MoqIP_genType_IsGlobalUnicast_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqIP_genType_recorder) To4() *MoqIP_genType_To4_fnRecorder {
	return &MoqIP_genType_To4_fnRecorder{
		Params:   MoqIP_genType_To4_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIP_genType_To4_fnRecorder) Any() *MoqIP_genType_To4_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_To4(r.Params))
		return nil
	}
	return &MoqIP_genType_To4_anyParams{Recorder: r}
}

func (r *MoqIP_genType_To4_fnRecorder) Seq() *MoqIP_genType_To4_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_To4(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIP_genType_To4_fnRecorder) NoSeq() *MoqIP_genType_To4_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_To4(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIP_genType_To4_fnRecorder) ReturnResults(result1 net.IP) *MoqIP_genType_To4_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.IP
		}
		Sequence   uint32
		DoFn       MoqIP_genType_To4_doFn
		DoReturnFn MoqIP_genType_To4_doReturnFn
	}{
		Values: &struct {
			Result1 net.IP
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIP_genType_To4_fnRecorder) AndDo(fn MoqIP_genType_To4_doFn) *MoqIP_genType_To4_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIP_genType_To4_fnRecorder) DoReturnResults(fn MoqIP_genType_To4_doReturnFn) *MoqIP_genType_To4_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.IP
		}
		Sequence   uint32
		DoFn       MoqIP_genType_To4_doFn
		DoReturnFn MoqIP_genType_To4_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIP_genType_To4_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIP_genType_To4_resultsByParams
	for n, res := range r.Moq.ResultsByParams_To4 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIP_genType_To4_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIP_genType_To4_paramsKey]*MoqIP_genType_To4_results{},
		}
		r.Moq.ResultsByParams_To4 = append(r.Moq.ResultsByParams_To4, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_To4) {
			copy(r.Moq.ResultsByParams_To4[insertAt+1:], r.Moq.ResultsByParams_To4[insertAt:0])
			r.Moq.ResultsByParams_To4[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_To4(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIP_genType_To4_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIP_genType_To4_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIP_genType_To4_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 net.IP
				}
				Sequence   uint32
				DoFn       MoqIP_genType_To4_doFn
				DoReturnFn MoqIP_genType_To4_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIP_genType) PrettyParams_To4(params MoqIP_genType_To4_params) string {
	return fmt.Sprintf("To4()")
}

func (m *MoqIP_genType) ParamsKey_To4(params MoqIP_genType_To4_params, anyParams uint64) MoqIP_genType_To4_paramsKey {
	m.Scene.T.Helper()
	return MoqIP_genType_To4_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqIP_genType_recorder) To16() *MoqIP_genType_To16_fnRecorder {
	return &MoqIP_genType_To16_fnRecorder{
		Params:   MoqIP_genType_To16_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIP_genType_To16_fnRecorder) Any() *MoqIP_genType_To16_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_To16(r.Params))
		return nil
	}
	return &MoqIP_genType_To16_anyParams{Recorder: r}
}

func (r *MoqIP_genType_To16_fnRecorder) Seq() *MoqIP_genType_To16_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_To16(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIP_genType_To16_fnRecorder) NoSeq() *MoqIP_genType_To16_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_To16(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIP_genType_To16_fnRecorder) ReturnResults(result1 net.IP) *MoqIP_genType_To16_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.IP
		}
		Sequence   uint32
		DoFn       MoqIP_genType_To16_doFn
		DoReturnFn MoqIP_genType_To16_doReturnFn
	}{
		Values: &struct {
			Result1 net.IP
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIP_genType_To16_fnRecorder) AndDo(fn MoqIP_genType_To16_doFn) *MoqIP_genType_To16_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIP_genType_To16_fnRecorder) DoReturnResults(fn MoqIP_genType_To16_doReturnFn) *MoqIP_genType_To16_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.IP
		}
		Sequence   uint32
		DoFn       MoqIP_genType_To16_doFn
		DoReturnFn MoqIP_genType_To16_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIP_genType_To16_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIP_genType_To16_resultsByParams
	for n, res := range r.Moq.ResultsByParams_To16 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIP_genType_To16_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIP_genType_To16_paramsKey]*MoqIP_genType_To16_results{},
		}
		r.Moq.ResultsByParams_To16 = append(r.Moq.ResultsByParams_To16, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_To16) {
			copy(r.Moq.ResultsByParams_To16[insertAt+1:], r.Moq.ResultsByParams_To16[insertAt:0])
			r.Moq.ResultsByParams_To16[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_To16(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIP_genType_To16_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIP_genType_To16_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIP_genType_To16_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 net.IP
				}
				Sequence   uint32
				DoFn       MoqIP_genType_To16_doFn
				DoReturnFn MoqIP_genType_To16_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIP_genType) PrettyParams_To16(params MoqIP_genType_To16_params) string {
	return fmt.Sprintf("To16()")
}

func (m *MoqIP_genType) ParamsKey_To16(params MoqIP_genType_To16_params, anyParams uint64) MoqIP_genType_To16_paramsKey {
	m.Scene.T.Helper()
	return MoqIP_genType_To16_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqIP_genType_recorder) DefaultMask() *MoqIP_genType_DefaultMask_fnRecorder {
	return &MoqIP_genType_DefaultMask_fnRecorder{
		Params:   MoqIP_genType_DefaultMask_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIP_genType_DefaultMask_fnRecorder) Any() *MoqIP_genType_DefaultMask_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DefaultMask(r.Params))
		return nil
	}
	return &MoqIP_genType_DefaultMask_anyParams{Recorder: r}
}

func (r *MoqIP_genType_DefaultMask_fnRecorder) Seq() *MoqIP_genType_DefaultMask_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DefaultMask(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIP_genType_DefaultMask_fnRecorder) NoSeq() *MoqIP_genType_DefaultMask_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DefaultMask(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIP_genType_DefaultMask_fnRecorder) ReturnResults(result1 net.IPMask) *MoqIP_genType_DefaultMask_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.IPMask
		}
		Sequence   uint32
		DoFn       MoqIP_genType_DefaultMask_doFn
		DoReturnFn MoqIP_genType_DefaultMask_doReturnFn
	}{
		Values: &struct {
			Result1 net.IPMask
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIP_genType_DefaultMask_fnRecorder) AndDo(fn MoqIP_genType_DefaultMask_doFn) *MoqIP_genType_DefaultMask_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIP_genType_DefaultMask_fnRecorder) DoReturnResults(fn MoqIP_genType_DefaultMask_doReturnFn) *MoqIP_genType_DefaultMask_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.IPMask
		}
		Sequence   uint32
		DoFn       MoqIP_genType_DefaultMask_doFn
		DoReturnFn MoqIP_genType_DefaultMask_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIP_genType_DefaultMask_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIP_genType_DefaultMask_resultsByParams
	for n, res := range r.Moq.ResultsByParams_DefaultMask {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIP_genType_DefaultMask_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIP_genType_DefaultMask_paramsKey]*MoqIP_genType_DefaultMask_results{},
		}
		r.Moq.ResultsByParams_DefaultMask = append(r.Moq.ResultsByParams_DefaultMask, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_DefaultMask) {
			copy(r.Moq.ResultsByParams_DefaultMask[insertAt+1:], r.Moq.ResultsByParams_DefaultMask[insertAt:0])
			r.Moq.ResultsByParams_DefaultMask[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_DefaultMask(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIP_genType_DefaultMask_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIP_genType_DefaultMask_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIP_genType_DefaultMask_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 net.IPMask
				}
				Sequence   uint32
				DoFn       MoqIP_genType_DefaultMask_doFn
				DoReturnFn MoqIP_genType_DefaultMask_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIP_genType) PrettyParams_DefaultMask(params MoqIP_genType_DefaultMask_params) string {
	return fmt.Sprintf("DefaultMask()")
}

func (m *MoqIP_genType) ParamsKey_DefaultMask(params MoqIP_genType_DefaultMask_params, anyParams uint64) MoqIP_genType_DefaultMask_paramsKey {
	m.Scene.T.Helper()
	return MoqIP_genType_DefaultMask_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqIP_genType_recorder) Mask(mask net.IPMask) *MoqIP_genType_Mask_fnRecorder {
	return &MoqIP_genType_Mask_fnRecorder{
		Params: MoqIP_genType_Mask_params{
			Mask: mask,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIP_genType_Mask_fnRecorder) Any() *MoqIP_genType_Mask_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Mask(r.Params))
		return nil
	}
	return &MoqIP_genType_Mask_anyParams{Recorder: r}
}

func (a *MoqIP_genType_Mask_anyParams) Mask() *MoqIP_genType_Mask_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqIP_genType_Mask_fnRecorder) Seq() *MoqIP_genType_Mask_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Mask(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIP_genType_Mask_fnRecorder) NoSeq() *MoqIP_genType_Mask_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Mask(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIP_genType_Mask_fnRecorder) ReturnResults(result1 net.IP) *MoqIP_genType_Mask_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.IP
		}
		Sequence   uint32
		DoFn       MoqIP_genType_Mask_doFn
		DoReturnFn MoqIP_genType_Mask_doReturnFn
	}{
		Values: &struct {
			Result1 net.IP
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIP_genType_Mask_fnRecorder) AndDo(fn MoqIP_genType_Mask_doFn) *MoqIP_genType_Mask_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIP_genType_Mask_fnRecorder) DoReturnResults(fn MoqIP_genType_Mask_doReturnFn) *MoqIP_genType_Mask_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.IP
		}
		Sequence   uint32
		DoFn       MoqIP_genType_Mask_doFn
		DoReturnFn MoqIP_genType_Mask_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIP_genType_Mask_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIP_genType_Mask_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Mask {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIP_genType_Mask_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIP_genType_Mask_paramsKey]*MoqIP_genType_Mask_results{},
		}
		r.Moq.ResultsByParams_Mask = append(r.Moq.ResultsByParams_Mask, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Mask) {
			copy(r.Moq.ResultsByParams_Mask[insertAt+1:], r.Moq.ResultsByParams_Mask[insertAt:0])
			r.Moq.ResultsByParams_Mask[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Mask(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIP_genType_Mask_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIP_genType_Mask_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIP_genType_Mask_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 net.IP
				}
				Sequence   uint32
				DoFn       MoqIP_genType_Mask_doFn
				DoReturnFn MoqIP_genType_Mask_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIP_genType) PrettyParams_Mask(params MoqIP_genType_Mask_params) string {
	return fmt.Sprintf("Mask(%#v)", params.Mask)
}

func (m *MoqIP_genType) ParamsKey_Mask(params MoqIP_genType_Mask_params, anyParams uint64) MoqIP_genType_Mask_paramsKey {
	m.Scene.T.Helper()
	var maskUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Mask.Mask == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The mask parameter of the Mask function can't be indexed by value")
		}
		maskUsedHash = hash.DeepHash(params.Mask)
	}
	return MoqIP_genType_Mask_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Mask hash.Hash }{
			Mask: maskUsedHash,
		},
	}
}

func (m *MoqIP_genType_recorder) String() *MoqIP_genType_String_fnRecorder {
	return &MoqIP_genType_String_fnRecorder{
		Params:   MoqIP_genType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIP_genType_String_fnRecorder) Any() *MoqIP_genType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqIP_genType_String_anyParams{Recorder: r}
}

func (r *MoqIP_genType_String_fnRecorder) Seq() *MoqIP_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIP_genType_String_fnRecorder) NoSeq() *MoqIP_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIP_genType_String_fnRecorder) ReturnResults(result1 string) *MoqIP_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqIP_genType_String_doFn
		DoReturnFn MoqIP_genType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIP_genType_String_fnRecorder) AndDo(fn MoqIP_genType_String_doFn) *MoqIP_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIP_genType_String_fnRecorder) DoReturnResults(fn MoqIP_genType_String_doReturnFn) *MoqIP_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqIP_genType_String_doFn
		DoReturnFn MoqIP_genType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIP_genType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIP_genType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIP_genType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIP_genType_String_paramsKey]*MoqIP_genType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIP_genType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIP_genType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIP_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqIP_genType_String_doFn
				DoReturnFn MoqIP_genType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIP_genType) PrettyParams_String(params MoqIP_genType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqIP_genType) ParamsKey_String(params MoqIP_genType_String_params, anyParams uint64) MoqIP_genType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqIP_genType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqIP_genType_recorder) MarshalText() *MoqIP_genType_MarshalText_fnRecorder {
	return &MoqIP_genType_MarshalText_fnRecorder{
		Params:   MoqIP_genType_MarshalText_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIP_genType_MarshalText_fnRecorder) Any() *MoqIP_genType_MarshalText_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MarshalText(r.Params))
		return nil
	}
	return &MoqIP_genType_MarshalText_anyParams{Recorder: r}
}

func (r *MoqIP_genType_MarshalText_fnRecorder) Seq() *MoqIP_genType_MarshalText_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MarshalText(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIP_genType_MarshalText_fnRecorder) NoSeq() *MoqIP_genType_MarshalText_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MarshalText(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIP_genType_MarshalText_fnRecorder) ReturnResults(result1 []byte, result2 error) *MoqIP_genType_MarshalText_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqIP_genType_MarshalText_doFn
		DoReturnFn MoqIP_genType_MarshalText_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIP_genType_MarshalText_fnRecorder) AndDo(fn MoqIP_genType_MarshalText_doFn) *MoqIP_genType_MarshalText_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIP_genType_MarshalText_fnRecorder) DoReturnResults(fn MoqIP_genType_MarshalText_doReturnFn) *MoqIP_genType_MarshalText_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqIP_genType_MarshalText_doFn
		DoReturnFn MoqIP_genType_MarshalText_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIP_genType_MarshalText_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIP_genType_MarshalText_resultsByParams
	for n, res := range r.Moq.ResultsByParams_MarshalText {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIP_genType_MarshalText_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIP_genType_MarshalText_paramsKey]*MoqIP_genType_MarshalText_results{},
		}
		r.Moq.ResultsByParams_MarshalText = append(r.Moq.ResultsByParams_MarshalText, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_MarshalText) {
			copy(r.Moq.ResultsByParams_MarshalText[insertAt+1:], r.Moq.ResultsByParams_MarshalText[insertAt:0])
			r.Moq.ResultsByParams_MarshalText[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_MarshalText(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIP_genType_MarshalText_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIP_genType_MarshalText_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIP_genType_MarshalText_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqIP_genType_MarshalText_doFn
				DoReturnFn MoqIP_genType_MarshalText_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIP_genType) PrettyParams_MarshalText(params MoqIP_genType_MarshalText_params) string {
	return fmt.Sprintf("MarshalText()")
}

func (m *MoqIP_genType) ParamsKey_MarshalText(params MoqIP_genType_MarshalText_params, anyParams uint64) MoqIP_genType_MarshalText_paramsKey {
	m.Scene.T.Helper()
	return MoqIP_genType_MarshalText_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqIP_genType_recorder) Equal(x net.IP) *MoqIP_genType_Equal_fnRecorder {
	return &MoqIP_genType_Equal_fnRecorder{
		Params: MoqIP_genType_Equal_params{
			X: x,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIP_genType_Equal_fnRecorder) Any() *MoqIP_genType_Equal_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Equal(r.Params))
		return nil
	}
	return &MoqIP_genType_Equal_anyParams{Recorder: r}
}

func (a *MoqIP_genType_Equal_anyParams) X() *MoqIP_genType_Equal_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqIP_genType_Equal_fnRecorder) Seq() *MoqIP_genType_Equal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Equal(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIP_genType_Equal_fnRecorder) NoSeq() *MoqIP_genType_Equal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Equal(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIP_genType_Equal_fnRecorder) ReturnResults(result1 bool) *MoqIP_genType_Equal_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_Equal_doFn
		DoReturnFn MoqIP_genType_Equal_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIP_genType_Equal_fnRecorder) AndDo(fn MoqIP_genType_Equal_doFn) *MoqIP_genType_Equal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIP_genType_Equal_fnRecorder) DoReturnResults(fn MoqIP_genType_Equal_doReturnFn) *MoqIP_genType_Equal_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqIP_genType_Equal_doFn
		DoReturnFn MoqIP_genType_Equal_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIP_genType_Equal_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIP_genType_Equal_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Equal {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIP_genType_Equal_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIP_genType_Equal_paramsKey]*MoqIP_genType_Equal_results{},
		}
		r.Moq.ResultsByParams_Equal = append(r.Moq.ResultsByParams_Equal, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Equal) {
			copy(r.Moq.ResultsByParams_Equal[insertAt+1:], r.Moq.ResultsByParams_Equal[insertAt:0])
			r.Moq.ResultsByParams_Equal[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Equal(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIP_genType_Equal_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIP_genType_Equal_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIP_genType_Equal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqIP_genType_Equal_doFn
				DoReturnFn MoqIP_genType_Equal_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIP_genType) PrettyParams_Equal(params MoqIP_genType_Equal_params) string {
	return fmt.Sprintf("Equal(%#v)", params.X)
}

func (m *MoqIP_genType) ParamsKey_Equal(params MoqIP_genType_Equal_params, anyParams uint64) MoqIP_genType_Equal_paramsKey {
	m.Scene.T.Helper()
	var xUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Equal.X == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The x parameter of the Equal function can't be indexed by value")
		}
		xUsedHash = hash.DeepHash(params.X)
	}
	return MoqIP_genType_Equal_paramsKey{
		Params: struct{}{},
		Hashes: struct{ X hash.Hash }{
			X: xUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqIP_genType) Reset() {
	m.ResultsByParams_IsUnspecified = nil
	m.ResultsByParams_IsLoopback = nil
	m.ResultsByParams_IsMulticast = nil
	m.ResultsByParams_IsInterfaceLocalMulticast = nil
	m.ResultsByParams_IsLinkLocalMulticast = nil
	m.ResultsByParams_IsLinkLocalUnicast = nil
	m.ResultsByParams_IsGlobalUnicast = nil
	m.ResultsByParams_To4 = nil
	m.ResultsByParams_To16 = nil
	m.ResultsByParams_DefaultMask = nil
	m.ResultsByParams_Mask = nil
	m.ResultsByParams_String = nil
	m.ResultsByParams_MarshalText = nil
	m.ResultsByParams_Equal = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqIP_genType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_IsUnspecified {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_IsUnspecified(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_IsLoopback {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_IsLoopback(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_IsMulticast {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_IsMulticast(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_IsInterfaceLocalMulticast {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_IsInterfaceLocalMulticast(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_IsLinkLocalMulticast {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_IsLinkLocalMulticast(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_IsLinkLocalUnicast {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_IsLinkLocalUnicast(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_IsGlobalUnicast {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_IsGlobalUnicast(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_To4 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_To4(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_To16 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_To16(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_DefaultMask {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_DefaultMask(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Mask {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Mask(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_MarshalText {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_MarshalText(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Equal {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Equal(results.Params))
			}
		}
	}
}
