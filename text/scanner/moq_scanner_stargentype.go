// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package scanner

import (
	"fmt"
	"io"
	"math/bits"
	"sync/atomic"
	"text/scanner"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that scanner.Scanner_starGenType is
// mocked completely
var _ Scanner_starGenType = (*MoqScanner_starGenType_mock)(nil)

// Scanner_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Scanner_starGenType interface {
	Init(src io.Reader) *scanner.Scanner
	Next() rune
	Peek() rune
	Scan() rune
	Pos() (pos scanner.Position)
	TokenText() string
}

// MoqScanner_starGenType holds the state of a moq of the Scanner_starGenType
// type
type MoqScanner_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqScanner_starGenType_mock

	ResultsByParams_Init      []MoqScanner_starGenType_Init_resultsByParams
	ResultsByParams_Next      []MoqScanner_starGenType_Next_resultsByParams
	ResultsByParams_Peek      []MoqScanner_starGenType_Peek_resultsByParams
	ResultsByParams_Scan      []MoqScanner_starGenType_Scan_resultsByParams
	ResultsByParams_Pos       []MoqScanner_starGenType_Pos_resultsByParams
	ResultsByParams_TokenText []MoqScanner_starGenType_TokenText_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Init struct {
				Src moq.ParamIndexing
			}
			Next      struct{}
			Peek      struct{}
			Scan      struct{}
			Pos       struct{}
			TokenText struct{}
		}
	}
}

// MoqScanner_starGenType_mock isolates the mock interface of the
// Scanner_starGenType type
type MoqScanner_starGenType_mock struct {
	Moq *MoqScanner_starGenType
}

// MoqScanner_starGenType_recorder isolates the recorder interface of the
// Scanner_starGenType type
type MoqScanner_starGenType_recorder struct {
	Moq *MoqScanner_starGenType
}

// MoqScanner_starGenType_Init_params holds the params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Init_params struct{ Src io.Reader }

// MoqScanner_starGenType_Init_paramsKey holds the map key params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Init_paramsKey struct {
	Params struct{ Src io.Reader }
	Hashes struct{ Src hash.Hash }
}

// MoqScanner_starGenType_Init_resultsByParams contains the results for a given
// set of parameters for the Scanner_starGenType type
type MoqScanner_starGenType_Init_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScanner_starGenType_Init_paramsKey]*MoqScanner_starGenType_Init_results
}

// MoqScanner_starGenType_Init_doFn defines the type of function needed when
// calling AndDo for the Scanner_starGenType type
type MoqScanner_starGenType_Init_doFn func(src io.Reader)

// MoqScanner_starGenType_Init_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Scanner_starGenType type
type MoqScanner_starGenType_Init_doReturnFn func(src io.Reader) *scanner.Scanner

// MoqScanner_starGenType_Init_results holds the results of the
// Scanner_starGenType type
type MoqScanner_starGenType_Init_results struct {
	Params  MoqScanner_starGenType_Init_params
	Results []struct {
		Values *struct {
			Result1 *scanner.Scanner
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Init_doFn
		DoReturnFn MoqScanner_starGenType_Init_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScanner_starGenType_Init_fnRecorder routes recorded function calls to the
// MoqScanner_starGenType moq
type MoqScanner_starGenType_Init_fnRecorder struct {
	Params    MoqScanner_starGenType_Init_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScanner_starGenType_Init_results
	Moq       *MoqScanner_starGenType
}

// MoqScanner_starGenType_Init_anyParams isolates the any params functions of
// the Scanner_starGenType type
type MoqScanner_starGenType_Init_anyParams struct {
	Recorder *MoqScanner_starGenType_Init_fnRecorder
}

// MoqScanner_starGenType_Next_params holds the params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Next_params struct{}

// MoqScanner_starGenType_Next_paramsKey holds the map key params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Next_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqScanner_starGenType_Next_resultsByParams contains the results for a given
// set of parameters for the Scanner_starGenType type
type MoqScanner_starGenType_Next_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScanner_starGenType_Next_paramsKey]*MoqScanner_starGenType_Next_results
}

// MoqScanner_starGenType_Next_doFn defines the type of function needed when
// calling AndDo for the Scanner_starGenType type
type MoqScanner_starGenType_Next_doFn func()

// MoqScanner_starGenType_Next_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Scanner_starGenType type
type MoqScanner_starGenType_Next_doReturnFn func() rune

// MoqScanner_starGenType_Next_results holds the results of the
// Scanner_starGenType type
type MoqScanner_starGenType_Next_results struct {
	Params  MoqScanner_starGenType_Next_params
	Results []struct {
		Values *struct {
			Result1 rune
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Next_doFn
		DoReturnFn MoqScanner_starGenType_Next_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScanner_starGenType_Next_fnRecorder routes recorded function calls to the
// MoqScanner_starGenType moq
type MoqScanner_starGenType_Next_fnRecorder struct {
	Params    MoqScanner_starGenType_Next_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScanner_starGenType_Next_results
	Moq       *MoqScanner_starGenType
}

// MoqScanner_starGenType_Next_anyParams isolates the any params functions of
// the Scanner_starGenType type
type MoqScanner_starGenType_Next_anyParams struct {
	Recorder *MoqScanner_starGenType_Next_fnRecorder
}

// MoqScanner_starGenType_Peek_params holds the params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Peek_params struct{}

// MoqScanner_starGenType_Peek_paramsKey holds the map key params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Peek_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqScanner_starGenType_Peek_resultsByParams contains the results for a given
// set of parameters for the Scanner_starGenType type
type MoqScanner_starGenType_Peek_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScanner_starGenType_Peek_paramsKey]*MoqScanner_starGenType_Peek_results
}

// MoqScanner_starGenType_Peek_doFn defines the type of function needed when
// calling AndDo for the Scanner_starGenType type
type MoqScanner_starGenType_Peek_doFn func()

// MoqScanner_starGenType_Peek_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Scanner_starGenType type
type MoqScanner_starGenType_Peek_doReturnFn func() rune

// MoqScanner_starGenType_Peek_results holds the results of the
// Scanner_starGenType type
type MoqScanner_starGenType_Peek_results struct {
	Params  MoqScanner_starGenType_Peek_params
	Results []struct {
		Values *struct {
			Result1 rune
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Peek_doFn
		DoReturnFn MoqScanner_starGenType_Peek_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScanner_starGenType_Peek_fnRecorder routes recorded function calls to the
// MoqScanner_starGenType moq
type MoqScanner_starGenType_Peek_fnRecorder struct {
	Params    MoqScanner_starGenType_Peek_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScanner_starGenType_Peek_results
	Moq       *MoqScanner_starGenType
}

// MoqScanner_starGenType_Peek_anyParams isolates the any params functions of
// the Scanner_starGenType type
type MoqScanner_starGenType_Peek_anyParams struct {
	Recorder *MoqScanner_starGenType_Peek_fnRecorder
}

// MoqScanner_starGenType_Scan_params holds the params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Scan_params struct{}

// MoqScanner_starGenType_Scan_paramsKey holds the map key params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Scan_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqScanner_starGenType_Scan_resultsByParams contains the results for a given
// set of parameters for the Scanner_starGenType type
type MoqScanner_starGenType_Scan_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScanner_starGenType_Scan_paramsKey]*MoqScanner_starGenType_Scan_results
}

// MoqScanner_starGenType_Scan_doFn defines the type of function needed when
// calling AndDo for the Scanner_starGenType type
type MoqScanner_starGenType_Scan_doFn func()

// MoqScanner_starGenType_Scan_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Scanner_starGenType type
type MoqScanner_starGenType_Scan_doReturnFn func() rune

// MoqScanner_starGenType_Scan_results holds the results of the
// Scanner_starGenType type
type MoqScanner_starGenType_Scan_results struct {
	Params  MoqScanner_starGenType_Scan_params
	Results []struct {
		Values *struct {
			Result1 rune
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Scan_doFn
		DoReturnFn MoqScanner_starGenType_Scan_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScanner_starGenType_Scan_fnRecorder routes recorded function calls to the
// MoqScanner_starGenType moq
type MoqScanner_starGenType_Scan_fnRecorder struct {
	Params    MoqScanner_starGenType_Scan_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScanner_starGenType_Scan_results
	Moq       *MoqScanner_starGenType
}

// MoqScanner_starGenType_Scan_anyParams isolates the any params functions of
// the Scanner_starGenType type
type MoqScanner_starGenType_Scan_anyParams struct {
	Recorder *MoqScanner_starGenType_Scan_fnRecorder
}

// MoqScanner_starGenType_Pos_params holds the params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Pos_params struct{}

// MoqScanner_starGenType_Pos_paramsKey holds the map key params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Pos_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqScanner_starGenType_Pos_resultsByParams contains the results for a given
// set of parameters for the Scanner_starGenType type
type MoqScanner_starGenType_Pos_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScanner_starGenType_Pos_paramsKey]*MoqScanner_starGenType_Pos_results
}

// MoqScanner_starGenType_Pos_doFn defines the type of function needed when
// calling AndDo for the Scanner_starGenType type
type MoqScanner_starGenType_Pos_doFn func()

// MoqScanner_starGenType_Pos_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Scanner_starGenType type
type MoqScanner_starGenType_Pos_doReturnFn func() (pos scanner.Position)

// MoqScanner_starGenType_Pos_results holds the results of the
// Scanner_starGenType type
type MoqScanner_starGenType_Pos_results struct {
	Params  MoqScanner_starGenType_Pos_params
	Results []struct {
		Values     *struct{ Pos scanner.Position }
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Pos_doFn
		DoReturnFn MoqScanner_starGenType_Pos_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScanner_starGenType_Pos_fnRecorder routes recorded function calls to the
// MoqScanner_starGenType moq
type MoqScanner_starGenType_Pos_fnRecorder struct {
	Params    MoqScanner_starGenType_Pos_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScanner_starGenType_Pos_results
	Moq       *MoqScanner_starGenType
}

// MoqScanner_starGenType_Pos_anyParams isolates the any params functions of
// the Scanner_starGenType type
type MoqScanner_starGenType_Pos_anyParams struct {
	Recorder *MoqScanner_starGenType_Pos_fnRecorder
}

// MoqScanner_starGenType_TokenText_params holds the params of the
// Scanner_starGenType type
type MoqScanner_starGenType_TokenText_params struct{}

// MoqScanner_starGenType_TokenText_paramsKey holds the map key params of the
// Scanner_starGenType type
type MoqScanner_starGenType_TokenText_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqScanner_starGenType_TokenText_resultsByParams contains the results for a
// given set of parameters for the Scanner_starGenType type
type MoqScanner_starGenType_TokenText_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScanner_starGenType_TokenText_paramsKey]*MoqScanner_starGenType_TokenText_results
}

// MoqScanner_starGenType_TokenText_doFn defines the type of function needed
// when calling AndDo for the Scanner_starGenType type
type MoqScanner_starGenType_TokenText_doFn func()

// MoqScanner_starGenType_TokenText_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Scanner_starGenType type
type MoqScanner_starGenType_TokenText_doReturnFn func() string

// MoqScanner_starGenType_TokenText_results holds the results of the
// Scanner_starGenType type
type MoqScanner_starGenType_TokenText_results struct {
	Params  MoqScanner_starGenType_TokenText_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_TokenText_doFn
		DoReturnFn MoqScanner_starGenType_TokenText_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScanner_starGenType_TokenText_fnRecorder routes recorded function calls
// to the MoqScanner_starGenType moq
type MoqScanner_starGenType_TokenText_fnRecorder struct {
	Params    MoqScanner_starGenType_TokenText_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScanner_starGenType_TokenText_results
	Moq       *MoqScanner_starGenType
}

// MoqScanner_starGenType_TokenText_anyParams isolates the any params functions
// of the Scanner_starGenType type
type MoqScanner_starGenType_TokenText_anyParams struct {
	Recorder *MoqScanner_starGenType_TokenText_fnRecorder
}

// NewMoqScanner_starGenType creates a new moq of the Scanner_starGenType type
func NewMoqScanner_starGenType(scene *moq.Scene, config *moq.Config) *MoqScanner_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqScanner_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqScanner_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Init struct {
					Src moq.ParamIndexing
				}
				Next      struct{}
				Peek      struct{}
				Scan      struct{}
				Pos       struct{}
				TokenText struct{}
			}
		}{ParameterIndexing: struct {
			Init struct {
				Src moq.ParamIndexing
			}
			Next      struct{}
			Peek      struct{}
			Scan      struct{}
			Pos       struct{}
			TokenText struct{}
		}{
			Init: struct {
				Src moq.ParamIndexing
			}{
				Src: moq.ParamIndexByHash,
			},
			Next:      struct{}{},
			Peek:      struct{}{},
			Scan:      struct{}{},
			Pos:       struct{}{},
			TokenText: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Scanner_starGenType type
func (m *MoqScanner_starGenType) Mock() *MoqScanner_starGenType_mock { return m.Moq }

func (m *MoqScanner_starGenType_mock) Init(src io.Reader) (result1 *scanner.Scanner) {
	m.Moq.Scene.T.Helper()
	params := MoqScanner_starGenType_Init_params{
		Src: src,
	}
	var results *MoqScanner_starGenType_Init_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Init {
		paramsKey := m.Moq.ParamsKey_Init(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Init(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Init(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Init(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(src)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(src)
	}
	return
}

func (m *MoqScanner_starGenType_mock) Next() (result1 rune) {
	m.Moq.Scene.T.Helper()
	params := MoqScanner_starGenType_Next_params{}
	var results *MoqScanner_starGenType_Next_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Next {
		paramsKey := m.Moq.ParamsKey_Next(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Next(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Next(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Next(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqScanner_starGenType_mock) Peek() (result1 rune) {
	m.Moq.Scene.T.Helper()
	params := MoqScanner_starGenType_Peek_params{}
	var results *MoqScanner_starGenType_Peek_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Peek {
		paramsKey := m.Moq.ParamsKey_Peek(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Peek(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Peek(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Peek(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqScanner_starGenType_mock) Scan() (result1 rune) {
	m.Moq.Scene.T.Helper()
	params := MoqScanner_starGenType_Scan_params{}
	var results *MoqScanner_starGenType_Scan_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Scan {
		paramsKey := m.Moq.ParamsKey_Scan(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Scan(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Scan(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Scan(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqScanner_starGenType_mock) Pos() (pos scanner.Position) {
	m.Moq.Scene.T.Helper()
	params := MoqScanner_starGenType_Pos_params{}
	var results *MoqScanner_starGenType_Pos_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Pos {
		paramsKey := m.Moq.ParamsKey_Pos(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Pos(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Pos(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Pos(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		pos = result.Values.Pos
	}
	if result.DoReturnFn != nil {
		pos = result.DoReturnFn()
	}
	return
}

func (m *MoqScanner_starGenType_mock) TokenText() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqScanner_starGenType_TokenText_params{}
	var results *MoqScanner_starGenType_TokenText_results
	for _, resultsByParams := range m.Moq.ResultsByParams_TokenText {
		paramsKey := m.Moq.ParamsKey_TokenText(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_TokenText(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_TokenText(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_TokenText(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Scanner_starGenType type
func (m *MoqScanner_starGenType) OnCall() *MoqScanner_starGenType_recorder {
	return &MoqScanner_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqScanner_starGenType_recorder) Init(src io.Reader) *MoqScanner_starGenType_Init_fnRecorder {
	return &MoqScanner_starGenType_Init_fnRecorder{
		Params: MoqScanner_starGenType_Init_params{
			Src: src,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScanner_starGenType_Init_fnRecorder) Any() *MoqScanner_starGenType_Init_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Init(r.Params))
		return nil
	}
	return &MoqScanner_starGenType_Init_anyParams{Recorder: r}
}

func (a *MoqScanner_starGenType_Init_anyParams) Src() *MoqScanner_starGenType_Init_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqScanner_starGenType_Init_fnRecorder) Seq() *MoqScanner_starGenType_Init_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Init(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScanner_starGenType_Init_fnRecorder) NoSeq() *MoqScanner_starGenType_Init_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Init(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScanner_starGenType_Init_fnRecorder) ReturnResults(result1 *scanner.Scanner) *MoqScanner_starGenType_Init_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *scanner.Scanner
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Init_doFn
		DoReturnFn MoqScanner_starGenType_Init_doReturnFn
	}{
		Values: &struct {
			Result1 *scanner.Scanner
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScanner_starGenType_Init_fnRecorder) AndDo(fn MoqScanner_starGenType_Init_doFn) *MoqScanner_starGenType_Init_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScanner_starGenType_Init_fnRecorder) DoReturnResults(fn MoqScanner_starGenType_Init_doReturnFn) *MoqScanner_starGenType_Init_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *scanner.Scanner
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Init_doFn
		DoReturnFn MoqScanner_starGenType_Init_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScanner_starGenType_Init_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScanner_starGenType_Init_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Init {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScanner_starGenType_Init_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScanner_starGenType_Init_paramsKey]*MoqScanner_starGenType_Init_results{},
		}
		r.Moq.ResultsByParams_Init = append(r.Moq.ResultsByParams_Init, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Init) {
			copy(r.Moq.ResultsByParams_Init[insertAt+1:], r.Moq.ResultsByParams_Init[insertAt:0])
			r.Moq.ResultsByParams_Init[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Init(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScanner_starGenType_Init_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScanner_starGenType_Init_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScanner_starGenType_Init_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *scanner.Scanner
				}
				Sequence   uint32
				DoFn       MoqScanner_starGenType_Init_doFn
				DoReturnFn MoqScanner_starGenType_Init_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScanner_starGenType) PrettyParams_Init(params MoqScanner_starGenType_Init_params) string {
	return fmt.Sprintf("Init(%#v)", params.Src)
}

func (m *MoqScanner_starGenType) ParamsKey_Init(params MoqScanner_starGenType_Init_params, anyParams uint64) MoqScanner_starGenType_Init_paramsKey {
	m.Scene.T.Helper()
	var srcUsed io.Reader
	var srcUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Init.Src == moq.ParamIndexByValue {
			srcUsed = params.Src
		} else {
			srcUsedHash = hash.DeepHash(params.Src)
		}
	}
	return MoqScanner_starGenType_Init_paramsKey{
		Params: struct{ Src io.Reader }{
			Src: srcUsed,
		},
		Hashes: struct{ Src hash.Hash }{
			Src: srcUsedHash,
		},
	}
}

func (m *MoqScanner_starGenType_recorder) Next() *MoqScanner_starGenType_Next_fnRecorder {
	return &MoqScanner_starGenType_Next_fnRecorder{
		Params:   MoqScanner_starGenType_Next_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScanner_starGenType_Next_fnRecorder) Any() *MoqScanner_starGenType_Next_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	return &MoqScanner_starGenType_Next_anyParams{Recorder: r}
}

func (r *MoqScanner_starGenType_Next_fnRecorder) Seq() *MoqScanner_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScanner_starGenType_Next_fnRecorder) NoSeq() *MoqScanner_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScanner_starGenType_Next_fnRecorder) ReturnResults(result1 rune) *MoqScanner_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 rune
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Next_doFn
		DoReturnFn MoqScanner_starGenType_Next_doReturnFn
	}{
		Values: &struct {
			Result1 rune
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScanner_starGenType_Next_fnRecorder) AndDo(fn MoqScanner_starGenType_Next_doFn) *MoqScanner_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScanner_starGenType_Next_fnRecorder) DoReturnResults(fn MoqScanner_starGenType_Next_doReturnFn) *MoqScanner_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 rune
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Next_doFn
		DoReturnFn MoqScanner_starGenType_Next_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScanner_starGenType_Next_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScanner_starGenType_Next_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Next {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScanner_starGenType_Next_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScanner_starGenType_Next_paramsKey]*MoqScanner_starGenType_Next_results{},
		}
		r.Moq.ResultsByParams_Next = append(r.Moq.ResultsByParams_Next, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Next) {
			copy(r.Moq.ResultsByParams_Next[insertAt+1:], r.Moq.ResultsByParams_Next[insertAt:0])
			r.Moq.ResultsByParams_Next[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Next(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScanner_starGenType_Next_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScanner_starGenType_Next_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScanner_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 rune
				}
				Sequence   uint32
				DoFn       MoqScanner_starGenType_Next_doFn
				DoReturnFn MoqScanner_starGenType_Next_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScanner_starGenType) PrettyParams_Next(params MoqScanner_starGenType_Next_params) string {
	return fmt.Sprintf("Next()")
}

func (m *MoqScanner_starGenType) ParamsKey_Next(params MoqScanner_starGenType_Next_params, anyParams uint64) MoqScanner_starGenType_Next_paramsKey {
	m.Scene.T.Helper()
	return MoqScanner_starGenType_Next_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqScanner_starGenType_recorder) Peek() *MoqScanner_starGenType_Peek_fnRecorder {
	return &MoqScanner_starGenType_Peek_fnRecorder{
		Params:   MoqScanner_starGenType_Peek_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScanner_starGenType_Peek_fnRecorder) Any() *MoqScanner_starGenType_Peek_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Peek(r.Params))
		return nil
	}
	return &MoqScanner_starGenType_Peek_anyParams{Recorder: r}
}

func (r *MoqScanner_starGenType_Peek_fnRecorder) Seq() *MoqScanner_starGenType_Peek_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Peek(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScanner_starGenType_Peek_fnRecorder) NoSeq() *MoqScanner_starGenType_Peek_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Peek(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScanner_starGenType_Peek_fnRecorder) ReturnResults(result1 rune) *MoqScanner_starGenType_Peek_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 rune
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Peek_doFn
		DoReturnFn MoqScanner_starGenType_Peek_doReturnFn
	}{
		Values: &struct {
			Result1 rune
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScanner_starGenType_Peek_fnRecorder) AndDo(fn MoqScanner_starGenType_Peek_doFn) *MoqScanner_starGenType_Peek_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScanner_starGenType_Peek_fnRecorder) DoReturnResults(fn MoqScanner_starGenType_Peek_doReturnFn) *MoqScanner_starGenType_Peek_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 rune
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Peek_doFn
		DoReturnFn MoqScanner_starGenType_Peek_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScanner_starGenType_Peek_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScanner_starGenType_Peek_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Peek {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScanner_starGenType_Peek_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScanner_starGenType_Peek_paramsKey]*MoqScanner_starGenType_Peek_results{},
		}
		r.Moq.ResultsByParams_Peek = append(r.Moq.ResultsByParams_Peek, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Peek) {
			copy(r.Moq.ResultsByParams_Peek[insertAt+1:], r.Moq.ResultsByParams_Peek[insertAt:0])
			r.Moq.ResultsByParams_Peek[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Peek(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScanner_starGenType_Peek_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScanner_starGenType_Peek_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScanner_starGenType_Peek_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 rune
				}
				Sequence   uint32
				DoFn       MoqScanner_starGenType_Peek_doFn
				DoReturnFn MoqScanner_starGenType_Peek_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScanner_starGenType) PrettyParams_Peek(params MoqScanner_starGenType_Peek_params) string {
	return fmt.Sprintf("Peek()")
}

func (m *MoqScanner_starGenType) ParamsKey_Peek(params MoqScanner_starGenType_Peek_params, anyParams uint64) MoqScanner_starGenType_Peek_paramsKey {
	m.Scene.T.Helper()
	return MoqScanner_starGenType_Peek_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqScanner_starGenType_recorder) Scan() *MoqScanner_starGenType_Scan_fnRecorder {
	return &MoqScanner_starGenType_Scan_fnRecorder{
		Params:   MoqScanner_starGenType_Scan_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScanner_starGenType_Scan_fnRecorder) Any() *MoqScanner_starGenType_Scan_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Scan(r.Params))
		return nil
	}
	return &MoqScanner_starGenType_Scan_anyParams{Recorder: r}
}

func (r *MoqScanner_starGenType_Scan_fnRecorder) Seq() *MoqScanner_starGenType_Scan_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Scan(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScanner_starGenType_Scan_fnRecorder) NoSeq() *MoqScanner_starGenType_Scan_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Scan(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScanner_starGenType_Scan_fnRecorder) ReturnResults(result1 rune) *MoqScanner_starGenType_Scan_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 rune
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Scan_doFn
		DoReturnFn MoqScanner_starGenType_Scan_doReturnFn
	}{
		Values: &struct {
			Result1 rune
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScanner_starGenType_Scan_fnRecorder) AndDo(fn MoqScanner_starGenType_Scan_doFn) *MoqScanner_starGenType_Scan_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScanner_starGenType_Scan_fnRecorder) DoReturnResults(fn MoqScanner_starGenType_Scan_doReturnFn) *MoqScanner_starGenType_Scan_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 rune
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Scan_doFn
		DoReturnFn MoqScanner_starGenType_Scan_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScanner_starGenType_Scan_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScanner_starGenType_Scan_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Scan {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScanner_starGenType_Scan_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScanner_starGenType_Scan_paramsKey]*MoqScanner_starGenType_Scan_results{},
		}
		r.Moq.ResultsByParams_Scan = append(r.Moq.ResultsByParams_Scan, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Scan) {
			copy(r.Moq.ResultsByParams_Scan[insertAt+1:], r.Moq.ResultsByParams_Scan[insertAt:0])
			r.Moq.ResultsByParams_Scan[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Scan(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScanner_starGenType_Scan_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScanner_starGenType_Scan_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScanner_starGenType_Scan_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 rune
				}
				Sequence   uint32
				DoFn       MoqScanner_starGenType_Scan_doFn
				DoReturnFn MoqScanner_starGenType_Scan_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScanner_starGenType) PrettyParams_Scan(params MoqScanner_starGenType_Scan_params) string {
	return fmt.Sprintf("Scan()")
}

func (m *MoqScanner_starGenType) ParamsKey_Scan(params MoqScanner_starGenType_Scan_params, anyParams uint64) MoqScanner_starGenType_Scan_paramsKey {
	m.Scene.T.Helper()
	return MoqScanner_starGenType_Scan_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqScanner_starGenType_recorder) Pos() *MoqScanner_starGenType_Pos_fnRecorder {
	return &MoqScanner_starGenType_Pos_fnRecorder{
		Params:   MoqScanner_starGenType_Pos_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScanner_starGenType_Pos_fnRecorder) Any() *MoqScanner_starGenType_Pos_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Pos(r.Params))
		return nil
	}
	return &MoqScanner_starGenType_Pos_anyParams{Recorder: r}
}

func (r *MoqScanner_starGenType_Pos_fnRecorder) Seq() *MoqScanner_starGenType_Pos_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Pos(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScanner_starGenType_Pos_fnRecorder) NoSeq() *MoqScanner_starGenType_Pos_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Pos(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScanner_starGenType_Pos_fnRecorder) ReturnResults(pos scanner.Position) *MoqScanner_starGenType_Pos_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Pos scanner.Position }
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Pos_doFn
		DoReturnFn MoqScanner_starGenType_Pos_doReturnFn
	}{
		Values: &struct{ Pos scanner.Position }{
			Pos: pos,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScanner_starGenType_Pos_fnRecorder) AndDo(fn MoqScanner_starGenType_Pos_doFn) *MoqScanner_starGenType_Pos_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScanner_starGenType_Pos_fnRecorder) DoReturnResults(fn MoqScanner_starGenType_Pos_doReturnFn) *MoqScanner_starGenType_Pos_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Pos scanner.Position }
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Pos_doFn
		DoReturnFn MoqScanner_starGenType_Pos_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScanner_starGenType_Pos_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScanner_starGenType_Pos_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Pos {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScanner_starGenType_Pos_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScanner_starGenType_Pos_paramsKey]*MoqScanner_starGenType_Pos_results{},
		}
		r.Moq.ResultsByParams_Pos = append(r.Moq.ResultsByParams_Pos, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Pos) {
			copy(r.Moq.ResultsByParams_Pos[insertAt+1:], r.Moq.ResultsByParams_Pos[insertAt:0])
			r.Moq.ResultsByParams_Pos[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Pos(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScanner_starGenType_Pos_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScanner_starGenType_Pos_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScanner_starGenType_Pos_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ Pos scanner.Position }
				Sequence   uint32
				DoFn       MoqScanner_starGenType_Pos_doFn
				DoReturnFn MoqScanner_starGenType_Pos_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScanner_starGenType) PrettyParams_Pos(params MoqScanner_starGenType_Pos_params) string {
	return fmt.Sprintf("Pos()")
}

func (m *MoqScanner_starGenType) ParamsKey_Pos(params MoqScanner_starGenType_Pos_params, anyParams uint64) MoqScanner_starGenType_Pos_paramsKey {
	m.Scene.T.Helper()
	return MoqScanner_starGenType_Pos_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqScanner_starGenType_recorder) TokenText() *MoqScanner_starGenType_TokenText_fnRecorder {
	return &MoqScanner_starGenType_TokenText_fnRecorder{
		Params:   MoqScanner_starGenType_TokenText_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScanner_starGenType_TokenText_fnRecorder) Any() *MoqScanner_starGenType_TokenText_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_TokenText(r.Params))
		return nil
	}
	return &MoqScanner_starGenType_TokenText_anyParams{Recorder: r}
}

func (r *MoqScanner_starGenType_TokenText_fnRecorder) Seq() *MoqScanner_starGenType_TokenText_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_TokenText(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScanner_starGenType_TokenText_fnRecorder) NoSeq() *MoqScanner_starGenType_TokenText_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_TokenText(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScanner_starGenType_TokenText_fnRecorder) ReturnResults(result1 string) *MoqScanner_starGenType_TokenText_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_TokenText_doFn
		DoReturnFn MoqScanner_starGenType_TokenText_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScanner_starGenType_TokenText_fnRecorder) AndDo(fn MoqScanner_starGenType_TokenText_doFn) *MoqScanner_starGenType_TokenText_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScanner_starGenType_TokenText_fnRecorder) DoReturnResults(fn MoqScanner_starGenType_TokenText_doReturnFn) *MoqScanner_starGenType_TokenText_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_TokenText_doFn
		DoReturnFn MoqScanner_starGenType_TokenText_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScanner_starGenType_TokenText_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScanner_starGenType_TokenText_resultsByParams
	for n, res := range r.Moq.ResultsByParams_TokenText {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScanner_starGenType_TokenText_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScanner_starGenType_TokenText_paramsKey]*MoqScanner_starGenType_TokenText_results{},
		}
		r.Moq.ResultsByParams_TokenText = append(r.Moq.ResultsByParams_TokenText, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_TokenText) {
			copy(r.Moq.ResultsByParams_TokenText[insertAt+1:], r.Moq.ResultsByParams_TokenText[insertAt:0])
			r.Moq.ResultsByParams_TokenText[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_TokenText(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScanner_starGenType_TokenText_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScanner_starGenType_TokenText_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScanner_starGenType_TokenText_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqScanner_starGenType_TokenText_doFn
				DoReturnFn MoqScanner_starGenType_TokenText_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScanner_starGenType) PrettyParams_TokenText(params MoqScanner_starGenType_TokenText_params) string {
	return fmt.Sprintf("TokenText()")
}

func (m *MoqScanner_starGenType) ParamsKey_TokenText(params MoqScanner_starGenType_TokenText_params, anyParams uint64) MoqScanner_starGenType_TokenText_paramsKey {
	m.Scene.T.Helper()
	return MoqScanner_starGenType_TokenText_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqScanner_starGenType) Reset() {
	m.ResultsByParams_Init = nil
	m.ResultsByParams_Next = nil
	m.ResultsByParams_Peek = nil
	m.ResultsByParams_Scan = nil
	m.ResultsByParams_Pos = nil
	m.ResultsByParams_TokenText = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqScanner_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Init {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Init(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Next {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Next(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Peek {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Peek(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Scan {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Scan(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Pos {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Pos(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_TokenText {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_TokenText(results.Params))
			}
		}
	}
}
