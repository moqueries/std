// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package parse

import (
	"fmt"
	"math/bits"
	"sync/atomic"
	"text/template/parse"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that parse.Tree_starGenType is mocked
// completely
var _ Tree_starGenType = (*MoqTree_starGenType_mock)(nil)

// Tree_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Tree_starGenType interface {
	Copy() *parse.Tree
	ErrorContext(n parse.Node) (location, context string)
	Parse(text, leftDelim, rightDelim string, treeSet map[string]*parse.Tree, funcs ...map[string]interface{}) (tree *parse.Tree, err error)
}

// MoqTree_starGenType holds the state of a moq of the Tree_starGenType type
type MoqTree_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqTree_starGenType_mock

	ResultsByParams_Copy         []MoqTree_starGenType_Copy_resultsByParams
	ResultsByParams_ErrorContext []MoqTree_starGenType_ErrorContext_resultsByParams
	ResultsByParams_Parse        []MoqTree_starGenType_Parse_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Copy         struct{}
			ErrorContext struct {
				N moq.ParamIndexing
			}
			Parse struct {
				Text       moq.ParamIndexing
				LeftDelim  moq.ParamIndexing
				RightDelim moq.ParamIndexing
				TreeSet    moq.ParamIndexing
				Funcs      moq.ParamIndexing
			}
		}
	}
	// MoqTree_starGenType_mock isolates the mock interface of the Tree_starGenType
}

// type
type MoqTree_starGenType_mock struct {
	Moq *MoqTree_starGenType
}

// MoqTree_starGenType_recorder isolates the recorder interface of the
// Tree_starGenType type
type MoqTree_starGenType_recorder struct {
	Moq *MoqTree_starGenType
}

// MoqTree_starGenType_Copy_params holds the params of the Tree_starGenType
// type
type MoqTree_starGenType_Copy_params struct{}

// MoqTree_starGenType_Copy_paramsKey holds the map key params of the
// Tree_starGenType type
type MoqTree_starGenType_Copy_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqTree_starGenType_Copy_resultsByParams contains the results for a given
// set of parameters for the Tree_starGenType type
type MoqTree_starGenType_Copy_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTree_starGenType_Copy_paramsKey]*MoqTree_starGenType_Copy_results
}

// MoqTree_starGenType_Copy_doFn defines the type of function needed when
// calling AndDo for the Tree_starGenType type
type MoqTree_starGenType_Copy_doFn func()

// MoqTree_starGenType_Copy_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Tree_starGenType type
type MoqTree_starGenType_Copy_doReturnFn func() *parse.Tree

// MoqTree_starGenType_Copy_results holds the results of the Tree_starGenType
// type
type MoqTree_starGenType_Copy_results struct {
	Params  MoqTree_starGenType_Copy_params
	Results []struct {
		Values *struct {
			Result1 *parse.Tree
		}
		Sequence   uint32
		DoFn       MoqTree_starGenType_Copy_doFn
		DoReturnFn MoqTree_starGenType_Copy_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTree_starGenType_Copy_fnRecorder routes recorded function calls to the
// MoqTree_starGenType moq
type MoqTree_starGenType_Copy_fnRecorder struct {
	Params    MoqTree_starGenType_Copy_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTree_starGenType_Copy_results
	Moq       *MoqTree_starGenType
}

// MoqTree_starGenType_Copy_anyParams isolates the any params functions of the
// Tree_starGenType type
type MoqTree_starGenType_Copy_anyParams struct {
	Recorder *MoqTree_starGenType_Copy_fnRecorder
}

// MoqTree_starGenType_ErrorContext_params holds the params of the
// Tree_starGenType type
type MoqTree_starGenType_ErrorContext_params struct{ N parse.Node }

// MoqTree_starGenType_ErrorContext_paramsKey holds the map key params of the
// Tree_starGenType type
type MoqTree_starGenType_ErrorContext_paramsKey struct {
	Params struct{ N parse.Node }
	Hashes struct{ N hash.Hash }
}

// MoqTree_starGenType_ErrorContext_resultsByParams contains the results for a
// given set of parameters for the Tree_starGenType type
type MoqTree_starGenType_ErrorContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTree_starGenType_ErrorContext_paramsKey]*MoqTree_starGenType_ErrorContext_results
}

// MoqTree_starGenType_ErrorContext_doFn defines the type of function needed
// when calling AndDo for the Tree_starGenType type
type MoqTree_starGenType_ErrorContext_doFn func(n parse.Node)

// MoqTree_starGenType_ErrorContext_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Tree_starGenType type
type MoqTree_starGenType_ErrorContext_doReturnFn func(n parse.Node) (location, context string)

// MoqTree_starGenType_ErrorContext_results holds the results of the
// Tree_starGenType type
type MoqTree_starGenType_ErrorContext_results struct {
	Params  MoqTree_starGenType_ErrorContext_params
	Results []struct {
		Values     *struct{ Location, Context string }
		Sequence   uint32
		DoFn       MoqTree_starGenType_ErrorContext_doFn
		DoReturnFn MoqTree_starGenType_ErrorContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTree_starGenType_ErrorContext_fnRecorder routes recorded function calls
// to the MoqTree_starGenType moq
type MoqTree_starGenType_ErrorContext_fnRecorder struct {
	Params    MoqTree_starGenType_ErrorContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTree_starGenType_ErrorContext_results
	Moq       *MoqTree_starGenType
}

// MoqTree_starGenType_ErrorContext_anyParams isolates the any params functions
// of the Tree_starGenType type
type MoqTree_starGenType_ErrorContext_anyParams struct {
	Recorder *MoqTree_starGenType_ErrorContext_fnRecorder
}

// MoqTree_starGenType_Parse_params holds the params of the Tree_starGenType
// type
type MoqTree_starGenType_Parse_params struct {
	Text, LeftDelim, RightDelim string
	TreeSet                     map[string]*parse.Tree
	Funcs                       []map[string]interface{}
}

// MoqTree_starGenType_Parse_paramsKey holds the map key params of the
// Tree_starGenType type
type MoqTree_starGenType_Parse_paramsKey struct {
	Params struct{ Text, LeftDelim, RightDelim string }
	Hashes struct {
		Text, LeftDelim, RightDelim hash.Hash
		TreeSet                     hash.Hash
		Funcs                       hash.Hash
	}
}

// MoqTree_starGenType_Parse_resultsByParams contains the results for a given
// set of parameters for the Tree_starGenType type
type MoqTree_starGenType_Parse_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTree_starGenType_Parse_paramsKey]*MoqTree_starGenType_Parse_results
}

// MoqTree_starGenType_Parse_doFn defines the type of function needed when
// calling AndDo for the Tree_starGenType type
type MoqTree_starGenType_Parse_doFn func(text, leftDelim, rightDelim string, treeSet map[string]*parse.Tree, funcs ...map[string]interface{})

// MoqTree_starGenType_Parse_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Tree_starGenType type
type MoqTree_starGenType_Parse_doReturnFn func(text, leftDelim, rightDelim string, treeSet map[string]*parse.Tree, funcs ...map[string]interface{}) (tree *parse.Tree, err error)

// MoqTree_starGenType_Parse_results holds the results of the Tree_starGenType
// type
type MoqTree_starGenType_Parse_results struct {
	Params  MoqTree_starGenType_Parse_params
	Results []struct {
		Values *struct {
			Tree *parse.Tree
			Err  error
		}
		Sequence   uint32
		DoFn       MoqTree_starGenType_Parse_doFn
		DoReturnFn MoqTree_starGenType_Parse_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTree_starGenType_Parse_fnRecorder routes recorded function calls to the
// MoqTree_starGenType moq
type MoqTree_starGenType_Parse_fnRecorder struct {
	Params    MoqTree_starGenType_Parse_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTree_starGenType_Parse_results
	Moq       *MoqTree_starGenType
}

// MoqTree_starGenType_Parse_anyParams isolates the any params functions of the
// Tree_starGenType type
type MoqTree_starGenType_Parse_anyParams struct {
	Recorder *MoqTree_starGenType_Parse_fnRecorder
}

// NewMoqTree_starGenType creates a new moq of the Tree_starGenType type
func NewMoqTree_starGenType(scene *moq.Scene, config *moq.Config) *MoqTree_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqTree_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqTree_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Copy         struct{}
				ErrorContext struct {
					N moq.ParamIndexing
				}
				Parse struct {
					Text       moq.ParamIndexing
					LeftDelim  moq.ParamIndexing
					RightDelim moq.ParamIndexing
					TreeSet    moq.ParamIndexing
					Funcs      moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Copy         struct{}
			ErrorContext struct {
				N moq.ParamIndexing
			}
			Parse struct {
				Text       moq.ParamIndexing
				LeftDelim  moq.ParamIndexing
				RightDelim moq.ParamIndexing
				TreeSet    moq.ParamIndexing
				Funcs      moq.ParamIndexing
			}
		}{
			Copy: struct{}{},
			ErrorContext: struct {
				N moq.ParamIndexing
			}{
				N: moq.ParamIndexByHash,
			},
			Parse: struct {
				Text       moq.ParamIndexing
				LeftDelim  moq.ParamIndexing
				RightDelim moq.ParamIndexing
				TreeSet    moq.ParamIndexing
				Funcs      moq.ParamIndexing
			}{
				Text:       moq.ParamIndexByValue,
				LeftDelim:  moq.ParamIndexByValue,
				RightDelim: moq.ParamIndexByValue,
				TreeSet:    moq.ParamIndexByHash,
				Funcs:      moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Tree_starGenType type
func (m *MoqTree_starGenType) Mock() *MoqTree_starGenType_mock { return m.Moq }

func (m *MoqTree_starGenType_mock) Copy() (result1 *parse.Tree) {
	m.Moq.Scene.T.Helper()
	params := MoqTree_starGenType_Copy_params{}
	var results *MoqTree_starGenType_Copy_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Copy {
		paramsKey := m.Moq.ParamsKey_Copy(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Copy(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Copy(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Copy(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqTree_starGenType_mock) ErrorContext(n parse.Node) (location, context string) {
	m.Moq.Scene.T.Helper()
	params := MoqTree_starGenType_ErrorContext_params{
		N: n,
	}
	var results *MoqTree_starGenType_ErrorContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ErrorContext {
		paramsKey := m.Moq.ParamsKey_ErrorContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ErrorContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ErrorContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ErrorContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n)
	}

	if result.Values != nil {
		location = result.Values.Location
		context = result.Values.Context
	}
	if result.DoReturnFn != nil {
		location, context = result.DoReturnFn(n)
	}
	return
}

func (m *MoqTree_starGenType_mock) Parse(text, leftDelim, rightDelim string, treeSet map[string]*parse.Tree, funcs ...map[string]interface{}) (tree *parse.Tree, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqTree_starGenType_Parse_params{
		Text:       text,
		LeftDelim:  leftDelim,
		RightDelim: rightDelim,
		TreeSet:    treeSet,
		Funcs:      funcs,
	}
	var results *MoqTree_starGenType_Parse_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Parse {
		paramsKey := m.Moq.ParamsKey_Parse(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Parse(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Parse(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Parse(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(text, leftDelim, rightDelim, treeSet, funcs...)
	}

	if result.Values != nil {
		tree = result.Values.Tree
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		tree, err = result.DoReturnFn(text, leftDelim, rightDelim, treeSet, funcs...)
	}
	return
}

// OnCall returns the recorder implementation of the Tree_starGenType type
func (m *MoqTree_starGenType) OnCall() *MoqTree_starGenType_recorder {
	return &MoqTree_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqTree_starGenType_recorder) Copy() *MoqTree_starGenType_Copy_fnRecorder {
	return &MoqTree_starGenType_Copy_fnRecorder{
		Params:   MoqTree_starGenType_Copy_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTree_starGenType_Copy_fnRecorder) Any() *MoqTree_starGenType_Copy_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Copy(r.Params))
		return nil
	}
	return &MoqTree_starGenType_Copy_anyParams{Recorder: r}
}

func (r *MoqTree_starGenType_Copy_fnRecorder) Seq() *MoqTree_starGenType_Copy_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Copy(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTree_starGenType_Copy_fnRecorder) NoSeq() *MoqTree_starGenType_Copy_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Copy(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTree_starGenType_Copy_fnRecorder) ReturnResults(result1 *parse.Tree) *MoqTree_starGenType_Copy_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *parse.Tree
		}
		Sequence   uint32
		DoFn       MoqTree_starGenType_Copy_doFn
		DoReturnFn MoqTree_starGenType_Copy_doReturnFn
	}{
		Values: &struct {
			Result1 *parse.Tree
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTree_starGenType_Copy_fnRecorder) AndDo(fn MoqTree_starGenType_Copy_doFn) *MoqTree_starGenType_Copy_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTree_starGenType_Copy_fnRecorder) DoReturnResults(fn MoqTree_starGenType_Copy_doReturnFn) *MoqTree_starGenType_Copy_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *parse.Tree
		}
		Sequence   uint32
		DoFn       MoqTree_starGenType_Copy_doFn
		DoReturnFn MoqTree_starGenType_Copy_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTree_starGenType_Copy_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTree_starGenType_Copy_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Copy {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTree_starGenType_Copy_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTree_starGenType_Copy_paramsKey]*MoqTree_starGenType_Copy_results{},
		}
		r.Moq.ResultsByParams_Copy = append(r.Moq.ResultsByParams_Copy, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Copy) {
			copy(r.Moq.ResultsByParams_Copy[insertAt+1:], r.Moq.ResultsByParams_Copy[insertAt:0])
			r.Moq.ResultsByParams_Copy[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Copy(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTree_starGenType_Copy_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTree_starGenType_Copy_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTree_starGenType_Copy_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *parse.Tree
				}
				Sequence   uint32
				DoFn       MoqTree_starGenType_Copy_doFn
				DoReturnFn MoqTree_starGenType_Copy_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTree_starGenType) PrettyParams_Copy(params MoqTree_starGenType_Copy_params) string {
	return fmt.Sprintf("Copy()")
}

func (m *MoqTree_starGenType) ParamsKey_Copy(params MoqTree_starGenType_Copy_params, anyParams uint64) MoqTree_starGenType_Copy_paramsKey {
	m.Scene.T.Helper()
	return MoqTree_starGenType_Copy_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqTree_starGenType_recorder) ErrorContext(n parse.Node) *MoqTree_starGenType_ErrorContext_fnRecorder {
	return &MoqTree_starGenType_ErrorContext_fnRecorder{
		Params: MoqTree_starGenType_ErrorContext_params{
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTree_starGenType_ErrorContext_fnRecorder) Any() *MoqTree_starGenType_ErrorContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ErrorContext(r.Params))
		return nil
	}
	return &MoqTree_starGenType_ErrorContext_anyParams{Recorder: r}
}

func (a *MoqTree_starGenType_ErrorContext_anyParams) N() *MoqTree_starGenType_ErrorContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqTree_starGenType_ErrorContext_fnRecorder) Seq() *MoqTree_starGenType_ErrorContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ErrorContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTree_starGenType_ErrorContext_fnRecorder) NoSeq() *MoqTree_starGenType_ErrorContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ErrorContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTree_starGenType_ErrorContext_fnRecorder) ReturnResults(location, context string) *MoqTree_starGenType_ErrorContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Location, Context string }
		Sequence   uint32
		DoFn       MoqTree_starGenType_ErrorContext_doFn
		DoReturnFn MoqTree_starGenType_ErrorContext_doReturnFn
	}{
		Values: &struct{ Location, Context string }{
			Location: location,
			Context:  context,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTree_starGenType_ErrorContext_fnRecorder) AndDo(fn MoqTree_starGenType_ErrorContext_doFn) *MoqTree_starGenType_ErrorContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTree_starGenType_ErrorContext_fnRecorder) DoReturnResults(fn MoqTree_starGenType_ErrorContext_doReturnFn) *MoqTree_starGenType_ErrorContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Location, Context string }
		Sequence   uint32
		DoFn       MoqTree_starGenType_ErrorContext_doFn
		DoReturnFn MoqTree_starGenType_ErrorContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTree_starGenType_ErrorContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTree_starGenType_ErrorContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ErrorContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTree_starGenType_ErrorContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTree_starGenType_ErrorContext_paramsKey]*MoqTree_starGenType_ErrorContext_results{},
		}
		r.Moq.ResultsByParams_ErrorContext = append(r.Moq.ResultsByParams_ErrorContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ErrorContext) {
			copy(r.Moq.ResultsByParams_ErrorContext[insertAt+1:], r.Moq.ResultsByParams_ErrorContext[insertAt:0])
			r.Moq.ResultsByParams_ErrorContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ErrorContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTree_starGenType_ErrorContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTree_starGenType_ErrorContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTree_starGenType_ErrorContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ Location, Context string }
				Sequence   uint32
				DoFn       MoqTree_starGenType_ErrorContext_doFn
				DoReturnFn MoqTree_starGenType_ErrorContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTree_starGenType) PrettyParams_ErrorContext(params MoqTree_starGenType_ErrorContext_params) string {
	return fmt.Sprintf("ErrorContext(%#v)", params.N)
}

func (m *MoqTree_starGenType) ParamsKey_ErrorContext(params MoqTree_starGenType_ErrorContext_params, anyParams uint64) MoqTree_starGenType_ErrorContext_paramsKey {
	m.Scene.T.Helper()
	var nUsed parse.Node
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ErrorContext.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqTree_starGenType_ErrorContext_paramsKey{
		Params: struct{ N parse.Node }{
			N: nUsed,
		},
		Hashes: struct{ N hash.Hash }{
			N: nUsedHash,
		},
	}
}

func (m *MoqTree_starGenType_recorder) Parse(text, leftDelim, rightDelim string, treeSet map[string]*parse.Tree, funcs ...map[string]interface{}) *MoqTree_starGenType_Parse_fnRecorder {
	return &MoqTree_starGenType_Parse_fnRecorder{
		Params: MoqTree_starGenType_Parse_params{
			Text:       text,
			LeftDelim:  leftDelim,
			RightDelim: rightDelim,
			TreeSet:    treeSet,
			Funcs:      funcs,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqTree_starGenType_Parse_fnRecorder) Any() *MoqTree_starGenType_Parse_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Parse(r.Params))
		return nil
	}
	return &MoqTree_starGenType_Parse_anyParams{Recorder: r}
}

func (a *MoqTree_starGenType_Parse_anyParams) Text() *MoqTree_starGenType_Parse_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqTree_starGenType_Parse_anyParams) LeftDelim() *MoqTree_starGenType_Parse_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqTree_starGenType_Parse_anyParams) RightDelim() *MoqTree_starGenType_Parse_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (a *MoqTree_starGenType_Parse_anyParams) TreeSet() *MoqTree_starGenType_Parse_fnRecorder {
	a.Recorder.AnyParams |= 1 << 3
	return a.Recorder
}

func (a *MoqTree_starGenType_Parse_anyParams) Funcs() *MoqTree_starGenType_Parse_fnRecorder {
	a.Recorder.AnyParams |= 1 << 4
	return a.Recorder
}

func (r *MoqTree_starGenType_Parse_fnRecorder) Seq() *MoqTree_starGenType_Parse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Parse(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTree_starGenType_Parse_fnRecorder) NoSeq() *MoqTree_starGenType_Parse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Parse(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTree_starGenType_Parse_fnRecorder) ReturnResults(tree *parse.Tree, err error) *MoqTree_starGenType_Parse_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Tree *parse.Tree
			Err  error
		}
		Sequence   uint32
		DoFn       MoqTree_starGenType_Parse_doFn
		DoReturnFn MoqTree_starGenType_Parse_doReturnFn
	}{
		Values: &struct {
			Tree *parse.Tree
			Err  error
		}{
			Tree: tree,
			Err:  err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTree_starGenType_Parse_fnRecorder) AndDo(fn MoqTree_starGenType_Parse_doFn) *MoqTree_starGenType_Parse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTree_starGenType_Parse_fnRecorder) DoReturnResults(fn MoqTree_starGenType_Parse_doReturnFn) *MoqTree_starGenType_Parse_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Tree *parse.Tree
			Err  error
		}
		Sequence   uint32
		DoFn       MoqTree_starGenType_Parse_doFn
		DoReturnFn MoqTree_starGenType_Parse_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTree_starGenType_Parse_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTree_starGenType_Parse_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Parse {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTree_starGenType_Parse_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTree_starGenType_Parse_paramsKey]*MoqTree_starGenType_Parse_results{},
		}
		r.Moq.ResultsByParams_Parse = append(r.Moq.ResultsByParams_Parse, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Parse) {
			copy(r.Moq.ResultsByParams_Parse[insertAt+1:], r.Moq.ResultsByParams_Parse[insertAt:0])
			r.Moq.ResultsByParams_Parse[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Parse(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTree_starGenType_Parse_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTree_starGenType_Parse_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTree_starGenType_Parse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Tree *parse.Tree
					Err  error
				}
				Sequence   uint32
				DoFn       MoqTree_starGenType_Parse_doFn
				DoReturnFn MoqTree_starGenType_Parse_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTree_starGenType) PrettyParams_Parse(params MoqTree_starGenType_Parse_params) string {
	return fmt.Sprintf("Parse(%#v, %#v, %#v, %#v, %#v)", params.Text, params.LeftDelim, params.RightDelim, params.TreeSet, params.Funcs)
}

func (m *MoqTree_starGenType) ParamsKey_Parse(params MoqTree_starGenType_Parse_params, anyParams uint64) MoqTree_starGenType_Parse_paramsKey {
	m.Scene.T.Helper()
	var textUsed string
	var textUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Parse.Text == moq.ParamIndexByValue {
			textUsed = params.Text
		} else {
			textUsedHash = hash.DeepHash(params.Text)
		}
	}
	var leftDelimUsed string
	var leftDelimUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Parse.LeftDelim == moq.ParamIndexByValue {
			leftDelimUsed = params.LeftDelim
		} else {
			leftDelimUsedHash = hash.DeepHash(params.LeftDelim)
		}
	}
	var rightDelimUsed string
	var rightDelimUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Parse.RightDelim == moq.ParamIndexByValue {
			rightDelimUsed = params.RightDelim
		} else {
			rightDelimUsedHash = hash.DeepHash(params.RightDelim)
		}
	}
	var treeSetUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.Runtime.ParameterIndexing.Parse.TreeSet == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The treeSet parameter of the Parse function can't be indexed by value")
		}
		treeSetUsedHash = hash.DeepHash(params.TreeSet)
	}
	var funcsUsedHash hash.Hash
	if anyParams&(1<<4) == 0 {
		if m.Runtime.ParameterIndexing.Parse.Funcs == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The funcs parameter of the Parse function can't be indexed by value")
		}
		funcsUsedHash = hash.DeepHash(params.Funcs)
	}
	return MoqTree_starGenType_Parse_paramsKey{
		Params: struct{ Text, LeftDelim, RightDelim string }{
			Text:       textUsed,
			LeftDelim:  leftDelimUsed,
			RightDelim: rightDelimUsed,
		},
		Hashes: struct {
			Text, LeftDelim, RightDelim hash.Hash
			TreeSet                     hash.Hash
			Funcs                       hash.Hash
		}{
			Text:       textUsedHash,
			LeftDelim:  leftDelimUsedHash,
			RightDelim: rightDelimUsedHash,
			TreeSet:    treeSetUsedHash,
			Funcs:      funcsUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqTree_starGenType) Reset() {
	m.ResultsByParams_Copy = nil
	m.ResultsByParams_ErrorContext = nil
	m.ResultsByParams_Parse = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqTree_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Copy {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Copy(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ErrorContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ErrorContext(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Parse {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Parse(results.Params))
			}
		}
	}
}
