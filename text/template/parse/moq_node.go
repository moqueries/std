// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package parse

import (
	"fmt"
	"math/bits"
	"sync/atomic"
	"text/template/parse"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that Node_reduced is mocked completely
var _ Node_reduced = (*MoqNode_mock)(nil)

// Node_reduced is the fabricated implementation type of this mock (emitted
// when the original interface contains non-exported methods)
type Node_reduced interface {
	Type() parse.NodeType
	String() string
	// Copy does a deep copy of the Node and all its components.
	// To avoid type assertions, some XxxNodes also have specialized
	// CopyXxx methods that return *XxxNode.
	Copy() parse.Node
	Position() parse.Pos // byte position of start of node in full original input string
}

// MoqNode holds the state of a moq of the Node_reduced type
type MoqNode struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqNode_mock

	ResultsByParams_Type     []MoqNode_Type_resultsByParams
	ResultsByParams_String   []MoqNode_String_resultsByParams
	ResultsByParams_Copy     []MoqNode_Copy_resultsByParams
	ResultsByParams_Position []MoqNode_Position_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Type     struct{}
			String   struct{}
			Copy     struct{}
			Position struct{}
		}
	}
}

// MoqNode_mock isolates the mock interface of the Node type
type MoqNode_mock struct {
	Moq *MoqNode
}

// MoqNode_recorder isolates the recorder interface of the Node type
type MoqNode_recorder struct {
	Moq *MoqNode
}

// MoqNode_Type_params holds the params of the Node type
type MoqNode_Type_params struct{}

// MoqNode_Type_paramsKey holds the map key params of the Node type
type MoqNode_Type_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqNode_Type_resultsByParams contains the results for a given set of
// parameters for the Node type
type MoqNode_Type_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqNode_Type_paramsKey]*MoqNode_Type_results
}

// MoqNode_Type_doFn defines the type of function needed when calling AndDo for
// the Node type
type MoqNode_Type_doFn func()

// MoqNode_Type_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Node type
type MoqNode_Type_doReturnFn func() parse.NodeType

// MoqNode_Type_results holds the results of the Node type
type MoqNode_Type_results struct {
	Params  MoqNode_Type_params
	Results []struct {
		Values *struct {
			Result1 parse.NodeType
		}
		Sequence   uint32
		DoFn       MoqNode_Type_doFn
		DoReturnFn MoqNode_Type_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqNode_Type_fnRecorder routes recorded function calls to the MoqNode moq
type MoqNode_Type_fnRecorder struct {
	Params    MoqNode_Type_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqNode_Type_results
	Moq       *MoqNode
}

// MoqNode_Type_anyParams isolates the any params functions of the Node type
type MoqNode_Type_anyParams struct {
	Recorder *MoqNode_Type_fnRecorder
}

// MoqNode_String_params holds the params of the Node type
type MoqNode_String_params struct{}

// MoqNode_String_paramsKey holds the map key params of the Node type
type MoqNode_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqNode_String_resultsByParams contains the results for a given set of
// parameters for the Node type
type MoqNode_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqNode_String_paramsKey]*MoqNode_String_results
}

// MoqNode_String_doFn defines the type of function needed when calling AndDo
// for the Node type
type MoqNode_String_doFn func()

// MoqNode_String_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Node type
type MoqNode_String_doReturnFn func() string

// MoqNode_String_results holds the results of the Node type
type MoqNode_String_results struct {
	Params  MoqNode_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqNode_String_doFn
		DoReturnFn MoqNode_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqNode_String_fnRecorder routes recorded function calls to the MoqNode moq
type MoqNode_String_fnRecorder struct {
	Params    MoqNode_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqNode_String_results
	Moq       *MoqNode
}

// MoqNode_String_anyParams isolates the any params functions of the Node type
type MoqNode_String_anyParams struct {
	Recorder *MoqNode_String_fnRecorder
}

// MoqNode_Copy_params holds the params of the Node type
type MoqNode_Copy_params struct{}

// MoqNode_Copy_paramsKey holds the map key params of the Node type
type MoqNode_Copy_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqNode_Copy_resultsByParams contains the results for a given set of
// parameters for the Node type
type MoqNode_Copy_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqNode_Copy_paramsKey]*MoqNode_Copy_results
}

// MoqNode_Copy_doFn defines the type of function needed when calling AndDo for
// the Node type
type MoqNode_Copy_doFn func()

// MoqNode_Copy_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Node type
type MoqNode_Copy_doReturnFn func() parse.Node

// MoqNode_Copy_results holds the results of the Node type
type MoqNode_Copy_results struct {
	Params  MoqNode_Copy_params
	Results []struct {
		Values *struct {
			Result1 parse.Node
		}
		Sequence   uint32
		DoFn       MoqNode_Copy_doFn
		DoReturnFn MoqNode_Copy_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqNode_Copy_fnRecorder routes recorded function calls to the MoqNode moq
type MoqNode_Copy_fnRecorder struct {
	Params    MoqNode_Copy_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqNode_Copy_results
	Moq       *MoqNode
}

// MoqNode_Copy_anyParams isolates the any params functions of the Node type
type MoqNode_Copy_anyParams struct {
	Recorder *MoqNode_Copy_fnRecorder
}

// MoqNode_Position_params holds the params of the Node type
type MoqNode_Position_params struct{}

// MoqNode_Position_paramsKey holds the map key params of the Node type
type MoqNode_Position_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqNode_Position_resultsByParams contains the results for a given set of
// parameters for the Node type
type MoqNode_Position_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqNode_Position_paramsKey]*MoqNode_Position_results
}

// MoqNode_Position_doFn defines the type of function needed when calling AndDo
// for the Node type
type MoqNode_Position_doFn func()

// MoqNode_Position_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Node type
type MoqNode_Position_doReturnFn func() parse.Pos

// MoqNode_Position_results holds the results of the Node type
type MoqNode_Position_results struct {
	Params  MoqNode_Position_params
	Results []struct {
		Values *struct {
			Result1 parse.Pos
		}
		Sequence   uint32
		DoFn       MoqNode_Position_doFn
		DoReturnFn MoqNode_Position_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqNode_Position_fnRecorder routes recorded function calls to the MoqNode
// moq
type MoqNode_Position_fnRecorder struct {
	Params    MoqNode_Position_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqNode_Position_results
	Moq       *MoqNode
}

// MoqNode_Position_anyParams isolates the any params functions of the Node
// type
type MoqNode_Position_anyParams struct {
	Recorder *MoqNode_Position_fnRecorder
}

// NewMoqNode creates a new moq of the Node type
func NewMoqNode(scene *moq.Scene, config *moq.Config) *MoqNode {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqNode{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqNode_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Type     struct{}
				String   struct{}
				Copy     struct{}
				Position struct{}
			}
		}{ParameterIndexing: struct {
			Type     struct{}
			String   struct{}
			Copy     struct{}
			Position struct{}
		}{
			Type:     struct{}{},
			String:   struct{}{},
			Copy:     struct{}{},
			Position: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Node type
func (m *MoqNode) Mock() *MoqNode_mock { return m.Moq }

func (m *MoqNode_mock) Type() (result1 parse.NodeType) {
	m.Moq.Scene.T.Helper()
	params := MoqNode_Type_params{}
	var results *MoqNode_Type_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Type {
		paramsKey := m.Moq.ParamsKey_Type(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Type(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Type(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Type(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqNode_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqNode_String_params{}
	var results *MoqNode_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqNode_mock) Copy() (result1 parse.Node) {
	m.Moq.Scene.T.Helper()
	params := MoqNode_Copy_params{}
	var results *MoqNode_Copy_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Copy {
		paramsKey := m.Moq.ParamsKey_Copy(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Copy(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Copy(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Copy(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqNode_mock) Position() (result1 parse.Pos) {
	m.Moq.Scene.T.Helper()
	params := MoqNode_Position_params{}
	var results *MoqNode_Position_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Position {
		paramsKey := m.Moq.ParamsKey_Position(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Position(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Position(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Position(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Node type
func (m *MoqNode) OnCall() *MoqNode_recorder {
	return &MoqNode_recorder{
		Moq: m,
	}
}

func (m *MoqNode_recorder) Type() *MoqNode_Type_fnRecorder {
	return &MoqNode_Type_fnRecorder{
		Params:   MoqNode_Type_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqNode_Type_fnRecorder) Any() *MoqNode_Type_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Type(r.Params))
		return nil
	}
	return &MoqNode_Type_anyParams{Recorder: r}
}

func (r *MoqNode_Type_fnRecorder) Seq() *MoqNode_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Type(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqNode_Type_fnRecorder) NoSeq() *MoqNode_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Type(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqNode_Type_fnRecorder) ReturnResults(result1 parse.NodeType) *MoqNode_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 parse.NodeType
		}
		Sequence   uint32
		DoFn       MoqNode_Type_doFn
		DoReturnFn MoqNode_Type_doReturnFn
	}{
		Values: &struct {
			Result1 parse.NodeType
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqNode_Type_fnRecorder) AndDo(fn MoqNode_Type_doFn) *MoqNode_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqNode_Type_fnRecorder) DoReturnResults(fn MoqNode_Type_doReturnFn) *MoqNode_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 parse.NodeType
		}
		Sequence   uint32
		DoFn       MoqNode_Type_doFn
		DoReturnFn MoqNode_Type_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqNode_Type_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqNode_Type_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Type {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqNode_Type_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqNode_Type_paramsKey]*MoqNode_Type_results{},
		}
		r.Moq.ResultsByParams_Type = append(r.Moq.ResultsByParams_Type, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Type) {
			copy(r.Moq.ResultsByParams_Type[insertAt+1:], r.Moq.ResultsByParams_Type[insertAt:0])
			r.Moq.ResultsByParams_Type[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Type(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqNode_Type_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqNode_Type_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqNode_Type_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 parse.NodeType
				}
				Sequence   uint32
				DoFn       MoqNode_Type_doFn
				DoReturnFn MoqNode_Type_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqNode) PrettyParams_Type(params MoqNode_Type_params) string { return fmt.Sprintf("Type()") }

func (m *MoqNode) ParamsKey_Type(params MoqNode_Type_params, anyParams uint64) MoqNode_Type_paramsKey {
	m.Scene.T.Helper()
	return MoqNode_Type_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqNode_recorder) String() *MoqNode_String_fnRecorder {
	return &MoqNode_String_fnRecorder{
		Params:   MoqNode_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqNode_String_fnRecorder) Any() *MoqNode_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqNode_String_anyParams{Recorder: r}
}

func (r *MoqNode_String_fnRecorder) Seq() *MoqNode_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqNode_String_fnRecorder) NoSeq() *MoqNode_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqNode_String_fnRecorder) ReturnResults(result1 string) *MoqNode_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqNode_String_doFn
		DoReturnFn MoqNode_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqNode_String_fnRecorder) AndDo(fn MoqNode_String_doFn) *MoqNode_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqNode_String_fnRecorder) DoReturnResults(fn MoqNode_String_doReturnFn) *MoqNode_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqNode_String_doFn
		DoReturnFn MoqNode_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqNode_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqNode_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqNode_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqNode_String_paramsKey]*MoqNode_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqNode_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqNode_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqNode_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqNode_String_doFn
				DoReturnFn MoqNode_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqNode) PrettyParams_String(params MoqNode_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqNode) ParamsKey_String(params MoqNode_String_params, anyParams uint64) MoqNode_String_paramsKey {
	m.Scene.T.Helper()
	return MoqNode_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqNode_recorder) Copy() *MoqNode_Copy_fnRecorder {
	return &MoqNode_Copy_fnRecorder{
		Params:   MoqNode_Copy_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqNode_Copy_fnRecorder) Any() *MoqNode_Copy_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Copy(r.Params))
		return nil
	}
	return &MoqNode_Copy_anyParams{Recorder: r}
}

func (r *MoqNode_Copy_fnRecorder) Seq() *MoqNode_Copy_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Copy(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqNode_Copy_fnRecorder) NoSeq() *MoqNode_Copy_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Copy(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqNode_Copy_fnRecorder) ReturnResults(result1 parse.Node) *MoqNode_Copy_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 parse.Node
		}
		Sequence   uint32
		DoFn       MoqNode_Copy_doFn
		DoReturnFn MoqNode_Copy_doReturnFn
	}{
		Values: &struct {
			Result1 parse.Node
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqNode_Copy_fnRecorder) AndDo(fn MoqNode_Copy_doFn) *MoqNode_Copy_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqNode_Copy_fnRecorder) DoReturnResults(fn MoqNode_Copy_doReturnFn) *MoqNode_Copy_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 parse.Node
		}
		Sequence   uint32
		DoFn       MoqNode_Copy_doFn
		DoReturnFn MoqNode_Copy_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqNode_Copy_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqNode_Copy_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Copy {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqNode_Copy_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqNode_Copy_paramsKey]*MoqNode_Copy_results{},
		}
		r.Moq.ResultsByParams_Copy = append(r.Moq.ResultsByParams_Copy, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Copy) {
			copy(r.Moq.ResultsByParams_Copy[insertAt+1:], r.Moq.ResultsByParams_Copy[insertAt:0])
			r.Moq.ResultsByParams_Copy[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Copy(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqNode_Copy_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqNode_Copy_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqNode_Copy_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 parse.Node
				}
				Sequence   uint32
				DoFn       MoqNode_Copy_doFn
				DoReturnFn MoqNode_Copy_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqNode) PrettyParams_Copy(params MoqNode_Copy_params) string { return fmt.Sprintf("Copy()") }

func (m *MoqNode) ParamsKey_Copy(params MoqNode_Copy_params, anyParams uint64) MoqNode_Copy_paramsKey {
	m.Scene.T.Helper()
	return MoqNode_Copy_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqNode_recorder) Position() *MoqNode_Position_fnRecorder {
	return &MoqNode_Position_fnRecorder{
		Params:   MoqNode_Position_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqNode_Position_fnRecorder) Any() *MoqNode_Position_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Position(r.Params))
		return nil
	}
	return &MoqNode_Position_anyParams{Recorder: r}
}

func (r *MoqNode_Position_fnRecorder) Seq() *MoqNode_Position_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Position(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqNode_Position_fnRecorder) NoSeq() *MoqNode_Position_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Position(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqNode_Position_fnRecorder) ReturnResults(result1 parse.Pos) *MoqNode_Position_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 parse.Pos
		}
		Sequence   uint32
		DoFn       MoqNode_Position_doFn
		DoReturnFn MoqNode_Position_doReturnFn
	}{
		Values: &struct {
			Result1 parse.Pos
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqNode_Position_fnRecorder) AndDo(fn MoqNode_Position_doFn) *MoqNode_Position_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqNode_Position_fnRecorder) DoReturnResults(fn MoqNode_Position_doReturnFn) *MoqNode_Position_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 parse.Pos
		}
		Sequence   uint32
		DoFn       MoqNode_Position_doFn
		DoReturnFn MoqNode_Position_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqNode_Position_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqNode_Position_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Position {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqNode_Position_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqNode_Position_paramsKey]*MoqNode_Position_results{},
		}
		r.Moq.ResultsByParams_Position = append(r.Moq.ResultsByParams_Position, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Position) {
			copy(r.Moq.ResultsByParams_Position[insertAt+1:], r.Moq.ResultsByParams_Position[insertAt:0])
			r.Moq.ResultsByParams_Position[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Position(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqNode_Position_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqNode_Position_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqNode_Position_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 parse.Pos
				}
				Sequence   uint32
				DoFn       MoqNode_Position_doFn
				DoReturnFn MoqNode_Position_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqNode) PrettyParams_Position(params MoqNode_Position_params) string {
	return fmt.Sprintf("Position()")
}

func (m *MoqNode) ParamsKey_Position(params MoqNode_Position_params, anyParams uint64) MoqNode_Position_paramsKey {
	m.Scene.T.Helper()
	return MoqNode_Position_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqNode) Reset() {
	m.ResultsByParams_Type = nil
	m.ResultsByParams_String = nil
	m.ResultsByParams_Copy = nil
	m.ResultsByParams_Position = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqNode) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Type {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Type(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Copy {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Copy(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Position {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Position(results.Params))
			}
		}
	}
}
