// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package bytes

import (
	"fmt"
	"io"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that bytes.Buffer_starGenType is mocked
// completely
var _ Buffer_starGenType = (*MoqBuffer_starGenType_mock)(nil)

// Buffer_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Buffer_starGenType interface {
	Bytes() []byte
	String() string
	Len() int
	Cap() int
	Truncate(n int)
	Reset()
	Grow(n int)
	Write(p []byte) (n int, err error)
	WriteString(s string) (n int, err error)
	ReadFrom(r io.Reader) (n int64, err error)
	WriteTo(w io.Writer) (n int64, err error)
	WriteByte(c byte) error
	WriteRune(r rune) (n int, err error)
	Read(p []byte) (n int, err error)
	Next(n int) []byte
	ReadByte() (byte, error)
	ReadRune() (r rune, size int, err error)
	UnreadRune() error
	UnreadByte() error
	ReadBytes(delim byte) (line []byte, err error)
	ReadString(delim byte) (line string, err error)
}

// MoqBuffer_starGenType holds the state of a moq of the Buffer_starGenType
// type
type MoqBuffer_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqBuffer_starGenType_mock

	ResultsByParams_Bytes       []MoqBuffer_starGenType_Bytes_resultsByParams
	ResultsByParams_String      []MoqBuffer_starGenType_String_resultsByParams
	ResultsByParams_Len         []MoqBuffer_starGenType_Len_resultsByParams
	ResultsByParams_Cap         []MoqBuffer_starGenType_Cap_resultsByParams
	ResultsByParams_Truncate    []MoqBuffer_starGenType_Truncate_resultsByParams
	ResultsByParams_Reset       []MoqBuffer_starGenType_Reset_resultsByParams
	ResultsByParams_Grow        []MoqBuffer_starGenType_Grow_resultsByParams
	ResultsByParams_Write       []MoqBuffer_starGenType_Write_resultsByParams
	ResultsByParams_WriteString []MoqBuffer_starGenType_WriteString_resultsByParams
	ResultsByParams_ReadFrom    []MoqBuffer_starGenType_ReadFrom_resultsByParams
	ResultsByParams_WriteTo     []MoqBuffer_starGenType_WriteTo_resultsByParams
	ResultsByParams_WriteByte   []MoqBuffer_starGenType_WriteByte_resultsByParams
	ResultsByParams_WriteRune   []MoqBuffer_starGenType_WriteRune_resultsByParams
	ResultsByParams_Read        []MoqBuffer_starGenType_Read_resultsByParams
	ResultsByParams_Next        []MoqBuffer_starGenType_Next_resultsByParams
	ResultsByParams_ReadByte    []MoqBuffer_starGenType_ReadByte_resultsByParams
	ResultsByParams_ReadRune    []MoqBuffer_starGenType_ReadRune_resultsByParams
	ResultsByParams_UnreadRune  []MoqBuffer_starGenType_UnreadRune_resultsByParams
	ResultsByParams_UnreadByte  []MoqBuffer_starGenType_UnreadByte_resultsByParams
	ResultsByParams_ReadBytes   []MoqBuffer_starGenType_ReadBytes_resultsByParams
	ResultsByParams_ReadString  []MoqBuffer_starGenType_ReadString_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Bytes    struct{}
			String   struct{}
			Len      struct{}
			Cap      struct{}
			Truncate struct {
				N moq.ParamIndexing
			}
			Reset struct{}
			Grow  struct {
				N moq.ParamIndexing
			}
			Write struct {
				P moq.ParamIndexing
			}
			WriteString struct {
				S moq.ParamIndexing
			}
			ReadFrom struct {
				Param1 moq.ParamIndexing
			}
			WriteTo struct {
				W moq.ParamIndexing
			}
			WriteByte struct {
				C moq.ParamIndexing
			}
			WriteRune struct {
				Param1 moq.ParamIndexing
			}
			Read struct {
				P moq.ParamIndexing
			}
			Next struct {
				N moq.ParamIndexing
			}
			ReadByte   struct{}
			ReadRune   struct{}
			UnreadRune struct{}
			UnreadByte struct{}
			ReadBytes  struct {
				Delim moq.ParamIndexing
			}
			ReadString struct {
				Delim moq.ParamIndexing
			}
		}
	}
	// MoqBuffer_starGenType_mock isolates the mock interface of the
}

// Buffer_starGenType type
type MoqBuffer_starGenType_mock struct {
	Moq *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_recorder isolates the recorder interface of the
// Buffer_starGenType type
type MoqBuffer_starGenType_recorder struct {
	Moq *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_Bytes_params holds the params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Bytes_params struct{}

// MoqBuffer_starGenType_Bytes_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Bytes_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqBuffer_starGenType_Bytes_resultsByParams contains the results for a given
// set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_Bytes_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_Bytes_paramsKey]*MoqBuffer_starGenType_Bytes_results
}

// MoqBuffer_starGenType_Bytes_doFn defines the type of function needed when
// calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_Bytes_doFn func()

// MoqBuffer_starGenType_Bytes_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_Bytes_doReturnFn func() []byte

// MoqBuffer_starGenType_Bytes_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Bytes_results struct {
	Params  MoqBuffer_starGenType_Bytes_params
	Results []struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Bytes_doFn
		DoReturnFn MoqBuffer_starGenType_Bytes_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_Bytes_fnRecorder routes recorded function calls to the
// MoqBuffer_starGenType moq
type MoqBuffer_starGenType_Bytes_fnRecorder struct {
	Params    MoqBuffer_starGenType_Bytes_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_Bytes_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_Bytes_anyParams isolates the any params functions of
// the Buffer_starGenType type
type MoqBuffer_starGenType_Bytes_anyParams struct {
	Recorder *MoqBuffer_starGenType_Bytes_fnRecorder
}

// MoqBuffer_starGenType_String_params holds the params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_String_params struct{}

// MoqBuffer_starGenType_String_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqBuffer_starGenType_String_resultsByParams contains the results for a
// given set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_String_paramsKey]*MoqBuffer_starGenType_String_results
}

// MoqBuffer_starGenType_String_doFn defines the type of function needed when
// calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_String_doFn func()

// MoqBuffer_starGenType_String_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_String_doReturnFn func() string

// MoqBuffer_starGenType_String_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_String_results struct {
	Params  MoqBuffer_starGenType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_String_doFn
		DoReturnFn MoqBuffer_starGenType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_String_fnRecorder routes recorded function calls to
// the MoqBuffer_starGenType moq
type MoqBuffer_starGenType_String_fnRecorder struct {
	Params    MoqBuffer_starGenType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_String_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_String_anyParams isolates the any params functions of
// the Buffer_starGenType type
type MoqBuffer_starGenType_String_anyParams struct {
	Recorder *MoqBuffer_starGenType_String_fnRecorder
}

// MoqBuffer_starGenType_Len_params holds the params of the Buffer_starGenType
// type
type MoqBuffer_starGenType_Len_params struct{}

// MoqBuffer_starGenType_Len_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Len_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqBuffer_starGenType_Len_resultsByParams contains the results for a given
// set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_Len_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_Len_paramsKey]*MoqBuffer_starGenType_Len_results
}

// MoqBuffer_starGenType_Len_doFn defines the type of function needed when
// calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_Len_doFn func()

// MoqBuffer_starGenType_Len_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_Len_doReturnFn func() int

// MoqBuffer_starGenType_Len_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Len_results struct {
	Params  MoqBuffer_starGenType_Len_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Len_doFn
		DoReturnFn MoqBuffer_starGenType_Len_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_Len_fnRecorder routes recorded function calls to the
// MoqBuffer_starGenType moq
type MoqBuffer_starGenType_Len_fnRecorder struct {
	Params    MoqBuffer_starGenType_Len_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_Len_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_Len_anyParams isolates the any params functions of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Len_anyParams struct {
	Recorder *MoqBuffer_starGenType_Len_fnRecorder
}

// MoqBuffer_starGenType_Cap_params holds the params of the Buffer_starGenType
// type
type MoqBuffer_starGenType_Cap_params struct{}

// MoqBuffer_starGenType_Cap_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Cap_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqBuffer_starGenType_Cap_resultsByParams contains the results for a given
// set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_Cap_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_Cap_paramsKey]*MoqBuffer_starGenType_Cap_results
}

// MoqBuffer_starGenType_Cap_doFn defines the type of function needed when
// calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_Cap_doFn func()

// MoqBuffer_starGenType_Cap_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_Cap_doReturnFn func() int

// MoqBuffer_starGenType_Cap_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Cap_results struct {
	Params  MoqBuffer_starGenType_Cap_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Cap_doFn
		DoReturnFn MoqBuffer_starGenType_Cap_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_Cap_fnRecorder routes recorded function calls to the
// MoqBuffer_starGenType moq
type MoqBuffer_starGenType_Cap_fnRecorder struct {
	Params    MoqBuffer_starGenType_Cap_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_Cap_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_Cap_anyParams isolates the any params functions of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Cap_anyParams struct {
	Recorder *MoqBuffer_starGenType_Cap_fnRecorder
}

// MoqBuffer_starGenType_Truncate_params holds the params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Truncate_params struct{ N int }

// MoqBuffer_starGenType_Truncate_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Truncate_paramsKey struct {
	Params struct{ N int }
	Hashes struct{ N hash.Hash }
}

// MoqBuffer_starGenType_Truncate_resultsByParams contains the results for a
// given set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_Truncate_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_Truncate_paramsKey]*MoqBuffer_starGenType_Truncate_results
}

// MoqBuffer_starGenType_Truncate_doFn defines the type of function needed when
// calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_Truncate_doFn func(n int)

// MoqBuffer_starGenType_Truncate_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_Truncate_doReturnFn func(n int)

// MoqBuffer_starGenType_Truncate_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Truncate_results struct {
	Params  MoqBuffer_starGenType_Truncate_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Truncate_doFn
		DoReturnFn MoqBuffer_starGenType_Truncate_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_Truncate_fnRecorder routes recorded function calls to
// the MoqBuffer_starGenType moq
type MoqBuffer_starGenType_Truncate_fnRecorder struct {
	Params    MoqBuffer_starGenType_Truncate_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_Truncate_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_Truncate_anyParams isolates the any params functions
// of the Buffer_starGenType type
type MoqBuffer_starGenType_Truncate_anyParams struct {
	Recorder *MoqBuffer_starGenType_Truncate_fnRecorder
}

// MoqBuffer_starGenType_Reset_params holds the params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Reset_params struct{}

// MoqBuffer_starGenType_Reset_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Reset_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqBuffer_starGenType_Reset_resultsByParams contains the results for a given
// set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_Reset_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_Reset_paramsKey]*MoqBuffer_starGenType_Reset_results
}

// MoqBuffer_starGenType_Reset_doFn defines the type of function needed when
// calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_Reset_doFn func()

// MoqBuffer_starGenType_Reset_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_Reset_doReturnFn func()

// MoqBuffer_starGenType_Reset_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Reset_results struct {
	Params  MoqBuffer_starGenType_Reset_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Reset_doFn
		DoReturnFn MoqBuffer_starGenType_Reset_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_Reset_fnRecorder routes recorded function calls to the
// MoqBuffer_starGenType moq
type MoqBuffer_starGenType_Reset_fnRecorder struct {
	Params    MoqBuffer_starGenType_Reset_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_Reset_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_Reset_anyParams isolates the any params functions of
// the Buffer_starGenType type
type MoqBuffer_starGenType_Reset_anyParams struct {
	Recorder *MoqBuffer_starGenType_Reset_fnRecorder
}

// MoqBuffer_starGenType_Grow_params holds the params of the Buffer_starGenType
// type
type MoqBuffer_starGenType_Grow_params struct{ N int }

// MoqBuffer_starGenType_Grow_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Grow_paramsKey struct {
	Params struct{ N int }
	Hashes struct{ N hash.Hash }
}

// MoqBuffer_starGenType_Grow_resultsByParams contains the results for a given
// set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_Grow_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_Grow_paramsKey]*MoqBuffer_starGenType_Grow_results
}

// MoqBuffer_starGenType_Grow_doFn defines the type of function needed when
// calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_Grow_doFn func(n int)

// MoqBuffer_starGenType_Grow_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_Grow_doReturnFn func(n int)

// MoqBuffer_starGenType_Grow_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Grow_results struct {
	Params  MoqBuffer_starGenType_Grow_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Grow_doFn
		DoReturnFn MoqBuffer_starGenType_Grow_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_Grow_fnRecorder routes recorded function calls to the
// MoqBuffer_starGenType moq
type MoqBuffer_starGenType_Grow_fnRecorder struct {
	Params    MoqBuffer_starGenType_Grow_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_Grow_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_Grow_anyParams isolates the any params functions of
// the Buffer_starGenType type
type MoqBuffer_starGenType_Grow_anyParams struct {
	Recorder *MoqBuffer_starGenType_Grow_fnRecorder
}

// MoqBuffer_starGenType_Write_params holds the params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Write_params struct{ P []byte }

// MoqBuffer_starGenType_Write_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Write_paramsKey struct {
	Params struct{}
	Hashes struct{ P hash.Hash }
}

// MoqBuffer_starGenType_Write_resultsByParams contains the results for a given
// set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_Write_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_Write_paramsKey]*MoqBuffer_starGenType_Write_results
}

// MoqBuffer_starGenType_Write_doFn defines the type of function needed when
// calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_Write_doFn func(p []byte)

// MoqBuffer_starGenType_Write_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_Write_doReturnFn func(p []byte) (n int, err error)

// MoqBuffer_starGenType_Write_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Write_results struct {
	Params  MoqBuffer_starGenType_Write_params
	Results []struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Write_doFn
		DoReturnFn MoqBuffer_starGenType_Write_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_Write_fnRecorder routes recorded function calls to the
// MoqBuffer_starGenType moq
type MoqBuffer_starGenType_Write_fnRecorder struct {
	Params    MoqBuffer_starGenType_Write_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_Write_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_Write_anyParams isolates the any params functions of
// the Buffer_starGenType type
type MoqBuffer_starGenType_Write_anyParams struct {
	Recorder *MoqBuffer_starGenType_Write_fnRecorder
}

// MoqBuffer_starGenType_WriteString_params holds the params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_WriteString_params struct{ S string }

// MoqBuffer_starGenType_WriteString_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_WriteString_paramsKey struct {
	Params struct{ S string }
	Hashes struct{ S hash.Hash }
}

// MoqBuffer_starGenType_WriteString_resultsByParams contains the results for a
// given set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_WriteString_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_WriteString_paramsKey]*MoqBuffer_starGenType_WriteString_results
}

// MoqBuffer_starGenType_WriteString_doFn defines the type of function needed
// when calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_WriteString_doFn func(s string)

// MoqBuffer_starGenType_WriteString_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_WriteString_doReturnFn func(s string) (n int, err error)

// MoqBuffer_starGenType_WriteString_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_WriteString_results struct {
	Params  MoqBuffer_starGenType_WriteString_params
	Results []struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_WriteString_doFn
		DoReturnFn MoqBuffer_starGenType_WriteString_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_WriteString_fnRecorder routes recorded function calls
// to the MoqBuffer_starGenType moq
type MoqBuffer_starGenType_WriteString_fnRecorder struct {
	Params    MoqBuffer_starGenType_WriteString_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_WriteString_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_WriteString_anyParams isolates the any params
// functions of the Buffer_starGenType type
type MoqBuffer_starGenType_WriteString_anyParams struct {
	Recorder *MoqBuffer_starGenType_WriteString_fnRecorder
}

// MoqBuffer_starGenType_ReadFrom_params holds the params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_ReadFrom_params struct{ Param1 io.Reader }

// MoqBuffer_starGenType_ReadFrom_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_ReadFrom_paramsKey struct {
	Params struct{ Param1 io.Reader }
	Hashes struct{ Param1 hash.Hash }
}

// MoqBuffer_starGenType_ReadFrom_resultsByParams contains the results for a
// given set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_ReadFrom_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_ReadFrom_paramsKey]*MoqBuffer_starGenType_ReadFrom_results
}

// MoqBuffer_starGenType_ReadFrom_doFn defines the type of function needed when
// calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_ReadFrom_doFn func(r io.Reader)

// MoqBuffer_starGenType_ReadFrom_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_ReadFrom_doReturnFn func(r io.Reader) (n int64, err error)

// MoqBuffer_starGenType_ReadFrom_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_ReadFrom_results struct {
	Params  MoqBuffer_starGenType_ReadFrom_params
	Results []struct {
		Values *struct {
			N   int64
			Err error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_ReadFrom_doFn
		DoReturnFn MoqBuffer_starGenType_ReadFrom_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_ReadFrom_fnRecorder routes recorded function calls to
// the MoqBuffer_starGenType moq
type MoqBuffer_starGenType_ReadFrom_fnRecorder struct {
	Params    MoqBuffer_starGenType_ReadFrom_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_ReadFrom_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_ReadFrom_anyParams isolates the any params functions
// of the Buffer_starGenType type
type MoqBuffer_starGenType_ReadFrom_anyParams struct {
	Recorder *MoqBuffer_starGenType_ReadFrom_fnRecorder
}

// MoqBuffer_starGenType_WriteTo_params holds the params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_WriteTo_params struct{ W io.Writer }

// MoqBuffer_starGenType_WriteTo_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_WriteTo_paramsKey struct {
	Params struct{ W io.Writer }
	Hashes struct{ W hash.Hash }
}

// MoqBuffer_starGenType_WriteTo_resultsByParams contains the results for a
// given set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_WriteTo_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_WriteTo_paramsKey]*MoqBuffer_starGenType_WriteTo_results
}

// MoqBuffer_starGenType_WriteTo_doFn defines the type of function needed when
// calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_WriteTo_doFn func(w io.Writer)

// MoqBuffer_starGenType_WriteTo_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_WriteTo_doReturnFn func(w io.Writer) (n int64, err error)

// MoqBuffer_starGenType_WriteTo_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_WriteTo_results struct {
	Params  MoqBuffer_starGenType_WriteTo_params
	Results []struct {
		Values *struct {
			N   int64
			Err error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_WriteTo_doFn
		DoReturnFn MoqBuffer_starGenType_WriteTo_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_WriteTo_fnRecorder routes recorded function calls to
// the MoqBuffer_starGenType moq
type MoqBuffer_starGenType_WriteTo_fnRecorder struct {
	Params    MoqBuffer_starGenType_WriteTo_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_WriteTo_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_WriteTo_anyParams isolates the any params functions of
// the Buffer_starGenType type
type MoqBuffer_starGenType_WriteTo_anyParams struct {
	Recorder *MoqBuffer_starGenType_WriteTo_fnRecorder
}

// MoqBuffer_starGenType_WriteByte_params holds the params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_WriteByte_params struct{ C byte }

// MoqBuffer_starGenType_WriteByte_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_WriteByte_paramsKey struct {
	Params struct{ C byte }
	Hashes struct{ C hash.Hash }
}

// MoqBuffer_starGenType_WriteByte_resultsByParams contains the results for a
// given set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_WriteByte_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_WriteByte_paramsKey]*MoqBuffer_starGenType_WriteByte_results
}

// MoqBuffer_starGenType_WriteByte_doFn defines the type of function needed
// when calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_WriteByte_doFn func(c byte)

// MoqBuffer_starGenType_WriteByte_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_WriteByte_doReturnFn func(c byte) error

// MoqBuffer_starGenType_WriteByte_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_WriteByte_results struct {
	Params  MoqBuffer_starGenType_WriteByte_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_WriteByte_doFn
		DoReturnFn MoqBuffer_starGenType_WriteByte_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_WriteByte_fnRecorder routes recorded function calls to
// the MoqBuffer_starGenType moq
type MoqBuffer_starGenType_WriteByte_fnRecorder struct {
	Params    MoqBuffer_starGenType_WriteByte_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_WriteByte_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_WriteByte_anyParams isolates the any params functions
// of the Buffer_starGenType type
type MoqBuffer_starGenType_WriteByte_anyParams struct {
	Recorder *MoqBuffer_starGenType_WriteByte_fnRecorder
}

// MoqBuffer_starGenType_WriteRune_params holds the params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_WriteRune_params struct{ Param1 rune }

// MoqBuffer_starGenType_WriteRune_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_WriteRune_paramsKey struct {
	Params struct{ Param1 rune }
	Hashes struct{ Param1 hash.Hash }
}

// MoqBuffer_starGenType_WriteRune_resultsByParams contains the results for a
// given set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_WriteRune_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_WriteRune_paramsKey]*MoqBuffer_starGenType_WriteRune_results
}

// MoqBuffer_starGenType_WriteRune_doFn defines the type of function needed
// when calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_WriteRune_doFn func(r rune)

// MoqBuffer_starGenType_WriteRune_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_WriteRune_doReturnFn func(r rune) (n int, err error)

// MoqBuffer_starGenType_WriteRune_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_WriteRune_results struct {
	Params  MoqBuffer_starGenType_WriteRune_params
	Results []struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_WriteRune_doFn
		DoReturnFn MoqBuffer_starGenType_WriteRune_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_WriteRune_fnRecorder routes recorded function calls to
// the MoqBuffer_starGenType moq
type MoqBuffer_starGenType_WriteRune_fnRecorder struct {
	Params    MoqBuffer_starGenType_WriteRune_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_WriteRune_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_WriteRune_anyParams isolates the any params functions
// of the Buffer_starGenType type
type MoqBuffer_starGenType_WriteRune_anyParams struct {
	Recorder *MoqBuffer_starGenType_WriteRune_fnRecorder
}

// MoqBuffer_starGenType_Read_params holds the params of the Buffer_starGenType
// type
type MoqBuffer_starGenType_Read_params struct{ P []byte }

// MoqBuffer_starGenType_Read_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Read_paramsKey struct {
	Params struct{}
	Hashes struct{ P hash.Hash }
}

// MoqBuffer_starGenType_Read_resultsByParams contains the results for a given
// set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_Read_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_Read_paramsKey]*MoqBuffer_starGenType_Read_results
}

// MoqBuffer_starGenType_Read_doFn defines the type of function needed when
// calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_Read_doFn func(p []byte)

// MoqBuffer_starGenType_Read_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_Read_doReturnFn func(p []byte) (n int, err error)

// MoqBuffer_starGenType_Read_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Read_results struct {
	Params  MoqBuffer_starGenType_Read_params
	Results []struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Read_doFn
		DoReturnFn MoqBuffer_starGenType_Read_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_Read_fnRecorder routes recorded function calls to the
// MoqBuffer_starGenType moq
type MoqBuffer_starGenType_Read_fnRecorder struct {
	Params    MoqBuffer_starGenType_Read_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_Read_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_Read_anyParams isolates the any params functions of
// the Buffer_starGenType type
type MoqBuffer_starGenType_Read_anyParams struct {
	Recorder *MoqBuffer_starGenType_Read_fnRecorder
}

// MoqBuffer_starGenType_Next_params holds the params of the Buffer_starGenType
// type
type MoqBuffer_starGenType_Next_params struct{ N int }

// MoqBuffer_starGenType_Next_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Next_paramsKey struct {
	Params struct{ N int }
	Hashes struct{ N hash.Hash }
}

// MoqBuffer_starGenType_Next_resultsByParams contains the results for a given
// set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_Next_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_Next_paramsKey]*MoqBuffer_starGenType_Next_results
}

// MoqBuffer_starGenType_Next_doFn defines the type of function needed when
// calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_Next_doFn func(n int)

// MoqBuffer_starGenType_Next_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_Next_doReturnFn func(n int) []byte

// MoqBuffer_starGenType_Next_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_Next_results struct {
	Params  MoqBuffer_starGenType_Next_params
	Results []struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Next_doFn
		DoReturnFn MoqBuffer_starGenType_Next_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_Next_fnRecorder routes recorded function calls to the
// MoqBuffer_starGenType moq
type MoqBuffer_starGenType_Next_fnRecorder struct {
	Params    MoqBuffer_starGenType_Next_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_Next_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_Next_anyParams isolates the any params functions of
// the Buffer_starGenType type
type MoqBuffer_starGenType_Next_anyParams struct {
	Recorder *MoqBuffer_starGenType_Next_fnRecorder
}

// MoqBuffer_starGenType_ReadByte_params holds the params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_ReadByte_params struct{}

// MoqBuffer_starGenType_ReadByte_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_ReadByte_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqBuffer_starGenType_ReadByte_resultsByParams contains the results for a
// given set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_ReadByte_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_ReadByte_paramsKey]*MoqBuffer_starGenType_ReadByte_results
}

// MoqBuffer_starGenType_ReadByte_doFn defines the type of function needed when
// calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_ReadByte_doFn func()

// MoqBuffer_starGenType_ReadByte_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_ReadByte_doReturnFn func() (byte, error)

// MoqBuffer_starGenType_ReadByte_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_ReadByte_results struct {
	Params  MoqBuffer_starGenType_ReadByte_params
	Results []struct {
		Values *struct {
			Result1 byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_ReadByte_doFn
		DoReturnFn MoqBuffer_starGenType_ReadByte_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_ReadByte_fnRecorder routes recorded function calls to
// the MoqBuffer_starGenType moq
type MoqBuffer_starGenType_ReadByte_fnRecorder struct {
	Params    MoqBuffer_starGenType_ReadByte_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_ReadByte_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_ReadByte_anyParams isolates the any params functions
// of the Buffer_starGenType type
type MoqBuffer_starGenType_ReadByte_anyParams struct {
	Recorder *MoqBuffer_starGenType_ReadByte_fnRecorder
}

// MoqBuffer_starGenType_ReadRune_params holds the params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_ReadRune_params struct{}

// MoqBuffer_starGenType_ReadRune_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_ReadRune_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqBuffer_starGenType_ReadRune_resultsByParams contains the results for a
// given set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_ReadRune_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_ReadRune_paramsKey]*MoqBuffer_starGenType_ReadRune_results
}

// MoqBuffer_starGenType_ReadRune_doFn defines the type of function needed when
// calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_ReadRune_doFn func()

// MoqBuffer_starGenType_ReadRune_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_ReadRune_doReturnFn func() (r rune, size int, err error)

// MoqBuffer_starGenType_ReadRune_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_ReadRune_results struct {
	Params  MoqBuffer_starGenType_ReadRune_params
	Results []struct {
		Values *struct {
			Result1 rune
			Size    int
			Err     error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_ReadRune_doFn
		DoReturnFn MoqBuffer_starGenType_ReadRune_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_ReadRune_fnRecorder routes recorded function calls to
// the MoqBuffer_starGenType moq
type MoqBuffer_starGenType_ReadRune_fnRecorder struct {
	Params    MoqBuffer_starGenType_ReadRune_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_ReadRune_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_ReadRune_anyParams isolates the any params functions
// of the Buffer_starGenType type
type MoqBuffer_starGenType_ReadRune_anyParams struct {
	Recorder *MoqBuffer_starGenType_ReadRune_fnRecorder
}

// MoqBuffer_starGenType_UnreadRune_params holds the params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_UnreadRune_params struct{}

// MoqBuffer_starGenType_UnreadRune_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_UnreadRune_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqBuffer_starGenType_UnreadRune_resultsByParams contains the results for a
// given set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_UnreadRune_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_UnreadRune_paramsKey]*MoqBuffer_starGenType_UnreadRune_results
}

// MoqBuffer_starGenType_UnreadRune_doFn defines the type of function needed
// when calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_UnreadRune_doFn func()

// MoqBuffer_starGenType_UnreadRune_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_UnreadRune_doReturnFn func() error

// MoqBuffer_starGenType_UnreadRune_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_UnreadRune_results struct {
	Params  MoqBuffer_starGenType_UnreadRune_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_UnreadRune_doFn
		DoReturnFn MoqBuffer_starGenType_UnreadRune_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_UnreadRune_fnRecorder routes recorded function calls
// to the MoqBuffer_starGenType moq
type MoqBuffer_starGenType_UnreadRune_fnRecorder struct {
	Params    MoqBuffer_starGenType_UnreadRune_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_UnreadRune_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_UnreadRune_anyParams isolates the any params functions
// of the Buffer_starGenType type
type MoqBuffer_starGenType_UnreadRune_anyParams struct {
	Recorder *MoqBuffer_starGenType_UnreadRune_fnRecorder
}

// MoqBuffer_starGenType_UnreadByte_params holds the params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_UnreadByte_params struct{}

// MoqBuffer_starGenType_UnreadByte_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_UnreadByte_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqBuffer_starGenType_UnreadByte_resultsByParams contains the results for a
// given set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_UnreadByte_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_UnreadByte_paramsKey]*MoqBuffer_starGenType_UnreadByte_results
}

// MoqBuffer_starGenType_UnreadByte_doFn defines the type of function needed
// when calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_UnreadByte_doFn func()

// MoqBuffer_starGenType_UnreadByte_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_UnreadByte_doReturnFn func() error

// MoqBuffer_starGenType_UnreadByte_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_UnreadByte_results struct {
	Params  MoqBuffer_starGenType_UnreadByte_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_UnreadByte_doFn
		DoReturnFn MoqBuffer_starGenType_UnreadByte_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_UnreadByte_fnRecorder routes recorded function calls
// to the MoqBuffer_starGenType moq
type MoqBuffer_starGenType_UnreadByte_fnRecorder struct {
	Params    MoqBuffer_starGenType_UnreadByte_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_UnreadByte_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_UnreadByte_anyParams isolates the any params functions
// of the Buffer_starGenType type
type MoqBuffer_starGenType_UnreadByte_anyParams struct {
	Recorder *MoqBuffer_starGenType_UnreadByte_fnRecorder
}

// MoqBuffer_starGenType_ReadBytes_params holds the params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_ReadBytes_params struct{ Delim byte }

// MoqBuffer_starGenType_ReadBytes_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_ReadBytes_paramsKey struct {
	Params struct{ Delim byte }
	Hashes struct{ Delim hash.Hash }
}

// MoqBuffer_starGenType_ReadBytes_resultsByParams contains the results for a
// given set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_ReadBytes_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_ReadBytes_paramsKey]*MoqBuffer_starGenType_ReadBytes_results
}

// MoqBuffer_starGenType_ReadBytes_doFn defines the type of function needed
// when calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_ReadBytes_doFn func(delim byte)

// MoqBuffer_starGenType_ReadBytes_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_ReadBytes_doReturnFn func(delim byte) (line []byte, err error)

// MoqBuffer_starGenType_ReadBytes_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_ReadBytes_results struct {
	Params  MoqBuffer_starGenType_ReadBytes_params
	Results []struct {
		Values *struct {
			Line []byte
			Err  error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_ReadBytes_doFn
		DoReturnFn MoqBuffer_starGenType_ReadBytes_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_ReadBytes_fnRecorder routes recorded function calls to
// the MoqBuffer_starGenType moq
type MoqBuffer_starGenType_ReadBytes_fnRecorder struct {
	Params    MoqBuffer_starGenType_ReadBytes_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_ReadBytes_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_ReadBytes_anyParams isolates the any params functions
// of the Buffer_starGenType type
type MoqBuffer_starGenType_ReadBytes_anyParams struct {
	Recorder *MoqBuffer_starGenType_ReadBytes_fnRecorder
}

// MoqBuffer_starGenType_ReadString_params holds the params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_ReadString_params struct{ Delim byte }

// MoqBuffer_starGenType_ReadString_paramsKey holds the map key params of the
// Buffer_starGenType type
type MoqBuffer_starGenType_ReadString_paramsKey struct {
	Params struct{ Delim byte }
	Hashes struct{ Delim hash.Hash }
}

// MoqBuffer_starGenType_ReadString_resultsByParams contains the results for a
// given set of parameters for the Buffer_starGenType type
type MoqBuffer_starGenType_ReadString_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBuffer_starGenType_ReadString_paramsKey]*MoqBuffer_starGenType_ReadString_results
}

// MoqBuffer_starGenType_ReadString_doFn defines the type of function needed
// when calling AndDo for the Buffer_starGenType type
type MoqBuffer_starGenType_ReadString_doFn func(delim byte)

// MoqBuffer_starGenType_ReadString_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Buffer_starGenType type
type MoqBuffer_starGenType_ReadString_doReturnFn func(delim byte) (line string, err error)

// MoqBuffer_starGenType_ReadString_results holds the results of the
// Buffer_starGenType type
type MoqBuffer_starGenType_ReadString_results struct {
	Params  MoqBuffer_starGenType_ReadString_params
	Results []struct {
		Values *struct {
			Line string
			Err  error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_ReadString_doFn
		DoReturnFn MoqBuffer_starGenType_ReadString_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBuffer_starGenType_ReadString_fnRecorder routes recorded function calls
// to the MoqBuffer_starGenType moq
type MoqBuffer_starGenType_ReadString_fnRecorder struct {
	Params    MoqBuffer_starGenType_ReadString_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBuffer_starGenType_ReadString_results
	Moq       *MoqBuffer_starGenType
}

// MoqBuffer_starGenType_ReadString_anyParams isolates the any params functions
// of the Buffer_starGenType type
type MoqBuffer_starGenType_ReadString_anyParams struct {
	Recorder *MoqBuffer_starGenType_ReadString_fnRecorder
}

// NewMoqBuffer_starGenType creates a new moq of the Buffer_starGenType type
func NewMoqBuffer_starGenType(scene *moq.Scene, config *moq.Config) *MoqBuffer_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqBuffer_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqBuffer_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Bytes    struct{}
				String   struct{}
				Len      struct{}
				Cap      struct{}
				Truncate struct {
					N moq.ParamIndexing
				}
				Reset struct{}
				Grow  struct {
					N moq.ParamIndexing
				}
				Write struct {
					P moq.ParamIndexing
				}
				WriteString struct {
					S moq.ParamIndexing
				}
				ReadFrom struct {
					Param1 moq.ParamIndexing
				}
				WriteTo struct {
					W moq.ParamIndexing
				}
				WriteByte struct {
					C moq.ParamIndexing
				}
				WriteRune struct {
					Param1 moq.ParamIndexing
				}
				Read struct {
					P moq.ParamIndexing
				}
				Next struct {
					N moq.ParamIndexing
				}
				ReadByte   struct{}
				ReadRune   struct{}
				UnreadRune struct{}
				UnreadByte struct{}
				ReadBytes  struct {
					Delim moq.ParamIndexing
				}
				ReadString struct {
					Delim moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Bytes    struct{}
			String   struct{}
			Len      struct{}
			Cap      struct{}
			Truncate struct {
				N moq.ParamIndexing
			}
			Reset struct{}
			Grow  struct {
				N moq.ParamIndexing
			}
			Write struct {
				P moq.ParamIndexing
			}
			WriteString struct {
				S moq.ParamIndexing
			}
			ReadFrom struct {
				Param1 moq.ParamIndexing
			}
			WriteTo struct {
				W moq.ParamIndexing
			}
			WriteByte struct {
				C moq.ParamIndexing
			}
			WriteRune struct {
				Param1 moq.ParamIndexing
			}
			Read struct {
				P moq.ParamIndexing
			}
			Next struct {
				N moq.ParamIndexing
			}
			ReadByte   struct{}
			ReadRune   struct{}
			UnreadRune struct{}
			UnreadByte struct{}
			ReadBytes  struct {
				Delim moq.ParamIndexing
			}
			ReadString struct {
				Delim moq.ParamIndexing
			}
		}{
			Bytes:  struct{}{},
			String: struct{}{},
			Len:    struct{}{},
			Cap:    struct{}{},
			Truncate: struct {
				N moq.ParamIndexing
			}{
				N: moq.ParamIndexByValue,
			},
			Reset: struct{}{},
			Grow: struct {
				N moq.ParamIndexing
			}{
				N: moq.ParamIndexByValue,
			},
			Write: struct {
				P moq.ParamIndexing
			}{
				P: moq.ParamIndexByHash,
			},
			WriteString: struct {
				S moq.ParamIndexing
			}{
				S: moq.ParamIndexByValue,
			},
			ReadFrom: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
			},
			WriteTo: struct {
				W moq.ParamIndexing
			}{
				W: moq.ParamIndexByHash,
			},
			WriteByte: struct {
				C moq.ParamIndexing
			}{
				C: moq.ParamIndexByValue,
			},
			WriteRune: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			Read: struct {
				P moq.ParamIndexing
			}{
				P: moq.ParamIndexByHash,
			},
			Next: struct {
				N moq.ParamIndexing
			}{
				N: moq.ParamIndexByValue,
			},
			ReadByte:   struct{}{},
			ReadRune:   struct{}{},
			UnreadRune: struct{}{},
			UnreadByte: struct{}{},
			ReadBytes: struct {
				Delim moq.ParamIndexing
			}{
				Delim: moq.ParamIndexByValue,
			},
			ReadString: struct {
				Delim moq.ParamIndexing
			}{
				Delim: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Buffer_starGenType type
func (m *MoqBuffer_starGenType) Mock() *MoqBuffer_starGenType_mock { return m.Moq }

func (m *MoqBuffer_starGenType_mock) Bytes() (result1 []byte) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_Bytes_params{}
	var results *MoqBuffer_starGenType_Bytes_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Bytes {
		paramsKey := m.Moq.ParamsKey_Bytes(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Bytes(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Bytes(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Bytes(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqBuffer_starGenType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_String_params{}
	var results *MoqBuffer_starGenType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqBuffer_starGenType_mock) Len() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_Len_params{}
	var results *MoqBuffer_starGenType_Len_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Len {
		paramsKey := m.Moq.ParamsKey_Len(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Len(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Len(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Len(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqBuffer_starGenType_mock) Cap() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_Cap_params{}
	var results *MoqBuffer_starGenType_Cap_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Cap {
		paramsKey := m.Moq.ParamsKey_Cap(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Cap(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Cap(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Cap(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqBuffer_starGenType_mock) Truncate(n int) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_Truncate_params{
		N: n,
	}
	var results *MoqBuffer_starGenType_Truncate_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Truncate {
		paramsKey := m.Moq.ParamsKey_Truncate(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Truncate(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Truncate(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Truncate(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(n)
	}
	return
}

func (m *MoqBuffer_starGenType_mock) Reset() {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_Reset_params{}
	var results *MoqBuffer_starGenType_Reset_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Reset {
		paramsKey := m.Moq.ParamsKey_Reset(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Reset(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Reset(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Reset(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqBuffer_starGenType_mock) Grow(n int) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_Grow_params{
		N: n,
	}
	var results *MoqBuffer_starGenType_Grow_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Grow {
		paramsKey := m.Moq.ParamsKey_Grow(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Grow(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Grow(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Grow(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(n)
	}
	return
}

func (m *MoqBuffer_starGenType_mock) Write(p []byte) (n int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_Write_params{
		P: p,
	}
	var results *MoqBuffer_starGenType_Write_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Write {
		paramsKey := m.Moq.ParamsKey_Write(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Write(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Write(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Write(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(p)
	}
	return
}

func (m *MoqBuffer_starGenType_mock) WriteString(s string) (n int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_WriteString_params{
		S: s,
	}
	var results *MoqBuffer_starGenType_WriteString_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteString {
		paramsKey := m.Moq.ParamsKey_WriteString(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteString(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteString(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteString(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(s)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(s)
	}
	return
}

func (m *MoqBuffer_starGenType_mock) ReadFrom(param1 io.Reader) (n int64, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_ReadFrom_params{
		Param1: param1,
	}
	var results *MoqBuffer_starGenType_ReadFrom_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadFrom {
		paramsKey := m.Moq.ParamsKey_ReadFrom(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadFrom(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadFrom(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadFrom(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqBuffer_starGenType_mock) WriteTo(w io.Writer) (n int64, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_WriteTo_params{
		W: w,
	}
	var results *MoqBuffer_starGenType_WriteTo_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteTo {
		paramsKey := m.Moq.ParamsKey_WriteTo(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteTo(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteTo(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteTo(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(w)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(w)
	}
	return
}

func (m *MoqBuffer_starGenType_mock) WriteByte(c byte) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_WriteByte_params{
		C: c,
	}
	var results *MoqBuffer_starGenType_WriteByte_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteByte {
		paramsKey := m.Moq.ParamsKey_WriteByte(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteByte(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteByte(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteByte(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(c)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(c)
	}
	return
}

func (m *MoqBuffer_starGenType_mock) WriteRune(param1 rune) (n int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_WriteRune_params{
		Param1: param1,
	}
	var results *MoqBuffer_starGenType_WriteRune_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteRune {
		paramsKey := m.Moq.ParamsKey_WriteRune(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteRune(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteRune(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteRune(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqBuffer_starGenType_mock) Read(p []byte) (n int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_Read_params{
		P: p,
	}
	var results *MoqBuffer_starGenType_Read_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Read {
		paramsKey := m.Moq.ParamsKey_Read(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Read(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Read(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Read(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(p)
	}
	return
}

func (m *MoqBuffer_starGenType_mock) Next(n int) (result1 []byte) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_Next_params{
		N: n,
	}
	var results *MoqBuffer_starGenType_Next_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Next {
		paramsKey := m.Moq.ParamsKey_Next(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Next(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Next(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Next(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(n)
	}
	return
}

func (m *MoqBuffer_starGenType_mock) ReadByte() (result1 byte, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_ReadByte_params{}
	var results *MoqBuffer_starGenType_ReadByte_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadByte {
		paramsKey := m.Moq.ParamsKey_ReadByte(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadByte(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadByte(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadByte(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqBuffer_starGenType_mock) ReadRune() (result1 rune, size int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_ReadRune_params{}
	var results *MoqBuffer_starGenType_ReadRune_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadRune {
		paramsKey := m.Moq.ParamsKey_ReadRune(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadRune(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadRune(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadRune(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		size = result.Values.Size
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		result1, size, err = result.DoReturnFn()
	}
	return
}

func (m *MoqBuffer_starGenType_mock) UnreadRune() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_UnreadRune_params{}
	var results *MoqBuffer_starGenType_UnreadRune_results
	for _, resultsByParams := range m.Moq.ResultsByParams_UnreadRune {
		paramsKey := m.Moq.ParamsKey_UnreadRune(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_UnreadRune(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_UnreadRune(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_UnreadRune(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqBuffer_starGenType_mock) UnreadByte() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_UnreadByte_params{}
	var results *MoqBuffer_starGenType_UnreadByte_results
	for _, resultsByParams := range m.Moq.ResultsByParams_UnreadByte {
		paramsKey := m.Moq.ParamsKey_UnreadByte(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_UnreadByte(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_UnreadByte(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_UnreadByte(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqBuffer_starGenType_mock) ReadBytes(delim byte) (line []byte, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_ReadBytes_params{
		Delim: delim,
	}
	var results *MoqBuffer_starGenType_ReadBytes_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadBytes {
		paramsKey := m.Moq.ParamsKey_ReadBytes(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadBytes(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadBytes(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadBytes(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(delim)
	}

	if result.Values != nil {
		line = result.Values.Line
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		line, err = result.DoReturnFn(delim)
	}
	return
}

func (m *MoqBuffer_starGenType_mock) ReadString(delim byte) (line string, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqBuffer_starGenType_ReadString_params{
		Delim: delim,
	}
	var results *MoqBuffer_starGenType_ReadString_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadString {
		paramsKey := m.Moq.ParamsKey_ReadString(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadString(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadString(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadString(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(delim)
	}

	if result.Values != nil {
		line = result.Values.Line
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		line, err = result.DoReturnFn(delim)
	}
	return
}

// OnCall returns the recorder implementation of the Buffer_starGenType type
func (m *MoqBuffer_starGenType) OnCall() *MoqBuffer_starGenType_recorder {
	return &MoqBuffer_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqBuffer_starGenType_recorder) Bytes() *MoqBuffer_starGenType_Bytes_fnRecorder {
	return &MoqBuffer_starGenType_Bytes_fnRecorder{
		Params:   MoqBuffer_starGenType_Bytes_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_Bytes_fnRecorder) Any() *MoqBuffer_starGenType_Bytes_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bytes(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_Bytes_anyParams{Recorder: r}
}

func (r *MoqBuffer_starGenType_Bytes_fnRecorder) Seq() *MoqBuffer_starGenType_Bytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bytes(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_Bytes_fnRecorder) NoSeq() *MoqBuffer_starGenType_Bytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bytes(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_Bytes_fnRecorder) ReturnResults(result1 []byte) *MoqBuffer_starGenType_Bytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Bytes_doFn
		DoReturnFn MoqBuffer_starGenType_Bytes_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_Bytes_fnRecorder) AndDo(fn MoqBuffer_starGenType_Bytes_doFn) *MoqBuffer_starGenType_Bytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_Bytes_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_Bytes_doReturnFn) *MoqBuffer_starGenType_Bytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Bytes_doFn
		DoReturnFn MoqBuffer_starGenType_Bytes_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_Bytes_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_Bytes_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Bytes {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_Bytes_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_Bytes_paramsKey]*MoqBuffer_starGenType_Bytes_results{},
		}
		r.Moq.ResultsByParams_Bytes = append(r.Moq.ResultsByParams_Bytes, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Bytes) {
			copy(r.Moq.ResultsByParams_Bytes[insertAt+1:], r.Moq.ResultsByParams_Bytes[insertAt:0])
			r.Moq.ResultsByParams_Bytes[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Bytes(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_Bytes_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_Bytes_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_Bytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
				}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_Bytes_doFn
				DoReturnFn MoqBuffer_starGenType_Bytes_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_Bytes(params MoqBuffer_starGenType_Bytes_params) string {
	return fmt.Sprintf("Bytes()")
}

func (m *MoqBuffer_starGenType) ParamsKey_Bytes(params MoqBuffer_starGenType_Bytes_params, anyParams uint64) MoqBuffer_starGenType_Bytes_paramsKey {
	m.Scene.T.Helper()
	return MoqBuffer_starGenType_Bytes_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqBuffer_starGenType_recorder) String() *MoqBuffer_starGenType_String_fnRecorder {
	return &MoqBuffer_starGenType_String_fnRecorder{
		Params:   MoqBuffer_starGenType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_String_fnRecorder) Any() *MoqBuffer_starGenType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_String_anyParams{Recorder: r}
}

func (r *MoqBuffer_starGenType_String_fnRecorder) Seq() *MoqBuffer_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_String_fnRecorder) NoSeq() *MoqBuffer_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_String_fnRecorder) ReturnResults(result1 string) *MoqBuffer_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_String_doFn
		DoReturnFn MoqBuffer_starGenType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_String_fnRecorder) AndDo(fn MoqBuffer_starGenType_String_doFn) *MoqBuffer_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_String_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_String_doReturnFn) *MoqBuffer_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_String_doFn
		DoReturnFn MoqBuffer_starGenType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_String_paramsKey]*MoqBuffer_starGenType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_String_doFn
				DoReturnFn MoqBuffer_starGenType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_String(params MoqBuffer_starGenType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqBuffer_starGenType) ParamsKey_String(params MoqBuffer_starGenType_String_params, anyParams uint64) MoqBuffer_starGenType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqBuffer_starGenType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqBuffer_starGenType_recorder) Len() *MoqBuffer_starGenType_Len_fnRecorder {
	return &MoqBuffer_starGenType_Len_fnRecorder{
		Params:   MoqBuffer_starGenType_Len_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_Len_fnRecorder) Any() *MoqBuffer_starGenType_Len_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Len(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_Len_anyParams{Recorder: r}
}

func (r *MoqBuffer_starGenType_Len_fnRecorder) Seq() *MoqBuffer_starGenType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Len(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_Len_fnRecorder) NoSeq() *MoqBuffer_starGenType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Len(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_Len_fnRecorder) ReturnResults(result1 int) *MoqBuffer_starGenType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Len_doFn
		DoReturnFn MoqBuffer_starGenType_Len_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_Len_fnRecorder) AndDo(fn MoqBuffer_starGenType_Len_doFn) *MoqBuffer_starGenType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_Len_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_Len_doReturnFn) *MoqBuffer_starGenType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Len_doFn
		DoReturnFn MoqBuffer_starGenType_Len_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_Len_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_Len_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Len {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_Len_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_Len_paramsKey]*MoqBuffer_starGenType_Len_results{},
		}
		r.Moq.ResultsByParams_Len = append(r.Moq.ResultsByParams_Len, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Len) {
			copy(r.Moq.ResultsByParams_Len[insertAt+1:], r.Moq.ResultsByParams_Len[insertAt:0])
			r.Moq.ResultsByParams_Len[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Len(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_Len_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_Len_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_Len_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_Len_doFn
				DoReturnFn MoqBuffer_starGenType_Len_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_Len(params MoqBuffer_starGenType_Len_params) string {
	return fmt.Sprintf("Len()")
}

func (m *MoqBuffer_starGenType) ParamsKey_Len(params MoqBuffer_starGenType_Len_params, anyParams uint64) MoqBuffer_starGenType_Len_paramsKey {
	m.Scene.T.Helper()
	return MoqBuffer_starGenType_Len_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqBuffer_starGenType_recorder) Cap() *MoqBuffer_starGenType_Cap_fnRecorder {
	return &MoqBuffer_starGenType_Cap_fnRecorder{
		Params:   MoqBuffer_starGenType_Cap_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_Cap_fnRecorder) Any() *MoqBuffer_starGenType_Cap_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Cap(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_Cap_anyParams{Recorder: r}
}

func (r *MoqBuffer_starGenType_Cap_fnRecorder) Seq() *MoqBuffer_starGenType_Cap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Cap(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_Cap_fnRecorder) NoSeq() *MoqBuffer_starGenType_Cap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Cap(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_Cap_fnRecorder) ReturnResults(result1 int) *MoqBuffer_starGenType_Cap_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Cap_doFn
		DoReturnFn MoqBuffer_starGenType_Cap_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_Cap_fnRecorder) AndDo(fn MoqBuffer_starGenType_Cap_doFn) *MoqBuffer_starGenType_Cap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_Cap_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_Cap_doReturnFn) *MoqBuffer_starGenType_Cap_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Cap_doFn
		DoReturnFn MoqBuffer_starGenType_Cap_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_Cap_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_Cap_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Cap {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_Cap_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_Cap_paramsKey]*MoqBuffer_starGenType_Cap_results{},
		}
		r.Moq.ResultsByParams_Cap = append(r.Moq.ResultsByParams_Cap, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Cap) {
			copy(r.Moq.ResultsByParams_Cap[insertAt+1:], r.Moq.ResultsByParams_Cap[insertAt:0])
			r.Moq.ResultsByParams_Cap[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Cap(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_Cap_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_Cap_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_Cap_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_Cap_doFn
				DoReturnFn MoqBuffer_starGenType_Cap_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_Cap(params MoqBuffer_starGenType_Cap_params) string {
	return fmt.Sprintf("Cap()")
}

func (m *MoqBuffer_starGenType) ParamsKey_Cap(params MoqBuffer_starGenType_Cap_params, anyParams uint64) MoqBuffer_starGenType_Cap_paramsKey {
	m.Scene.T.Helper()
	return MoqBuffer_starGenType_Cap_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqBuffer_starGenType_recorder) Truncate(n int) *MoqBuffer_starGenType_Truncate_fnRecorder {
	return &MoqBuffer_starGenType_Truncate_fnRecorder{
		Params: MoqBuffer_starGenType_Truncate_params{
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_Truncate_fnRecorder) Any() *MoqBuffer_starGenType_Truncate_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Truncate(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_Truncate_anyParams{Recorder: r}
}

func (a *MoqBuffer_starGenType_Truncate_anyParams) N() *MoqBuffer_starGenType_Truncate_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqBuffer_starGenType_Truncate_fnRecorder) Seq() *MoqBuffer_starGenType_Truncate_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Truncate(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_Truncate_fnRecorder) NoSeq() *MoqBuffer_starGenType_Truncate_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Truncate(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_Truncate_fnRecorder) ReturnResults() *MoqBuffer_starGenType_Truncate_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Truncate_doFn
		DoReturnFn MoqBuffer_starGenType_Truncate_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_Truncate_fnRecorder) AndDo(fn MoqBuffer_starGenType_Truncate_doFn) *MoqBuffer_starGenType_Truncate_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_Truncate_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_Truncate_doReturnFn) *MoqBuffer_starGenType_Truncate_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Truncate_doFn
		DoReturnFn MoqBuffer_starGenType_Truncate_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_Truncate_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_Truncate_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Truncate {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_Truncate_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_Truncate_paramsKey]*MoqBuffer_starGenType_Truncate_results{},
		}
		r.Moq.ResultsByParams_Truncate = append(r.Moq.ResultsByParams_Truncate, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Truncate) {
			copy(r.Moq.ResultsByParams_Truncate[insertAt+1:], r.Moq.ResultsByParams_Truncate[insertAt:0])
			r.Moq.ResultsByParams_Truncate[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Truncate(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_Truncate_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_Truncate_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_Truncate_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_Truncate_doFn
				DoReturnFn MoqBuffer_starGenType_Truncate_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_Truncate(params MoqBuffer_starGenType_Truncate_params) string {
	return fmt.Sprintf("Truncate(%#v)", params.N)
}

func (m *MoqBuffer_starGenType) ParamsKey_Truncate(params MoqBuffer_starGenType_Truncate_params, anyParams uint64) MoqBuffer_starGenType_Truncate_paramsKey {
	m.Scene.T.Helper()
	var nUsed int
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Truncate.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqBuffer_starGenType_Truncate_paramsKey{
		Params: struct{ N int }{
			N: nUsed,
		},
		Hashes: struct{ N hash.Hash }{
			N: nUsedHash,
		},
	}
}

func (m *MoqBuffer_starGenType_recorder) Reset() *MoqBuffer_starGenType_Reset_fnRecorder {
	return &MoqBuffer_starGenType_Reset_fnRecorder{
		Params:   MoqBuffer_starGenType_Reset_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_Reset_fnRecorder) Any() *MoqBuffer_starGenType_Reset_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_Reset_anyParams{Recorder: r}
}

func (r *MoqBuffer_starGenType_Reset_fnRecorder) Seq() *MoqBuffer_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_Reset_fnRecorder) NoSeq() *MoqBuffer_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_Reset_fnRecorder) ReturnResults() *MoqBuffer_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Reset_doFn
		DoReturnFn MoqBuffer_starGenType_Reset_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_Reset_fnRecorder) AndDo(fn MoqBuffer_starGenType_Reset_doFn) *MoqBuffer_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_Reset_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_Reset_doReturnFn) *MoqBuffer_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Reset_doFn
		DoReturnFn MoqBuffer_starGenType_Reset_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_Reset_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_Reset_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Reset {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_Reset_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_Reset_paramsKey]*MoqBuffer_starGenType_Reset_results{},
		}
		r.Moq.ResultsByParams_Reset = append(r.Moq.ResultsByParams_Reset, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Reset) {
			copy(r.Moq.ResultsByParams_Reset[insertAt+1:], r.Moq.ResultsByParams_Reset[insertAt:0])
			r.Moq.ResultsByParams_Reset[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Reset(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_Reset_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_Reset_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_Reset_doFn
				DoReturnFn MoqBuffer_starGenType_Reset_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_Reset(params MoqBuffer_starGenType_Reset_params) string {
	return fmt.Sprintf("Reset()")
}

func (m *MoqBuffer_starGenType) ParamsKey_Reset(params MoqBuffer_starGenType_Reset_params, anyParams uint64) MoqBuffer_starGenType_Reset_paramsKey {
	m.Scene.T.Helper()
	return MoqBuffer_starGenType_Reset_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqBuffer_starGenType_recorder) Grow(n int) *MoqBuffer_starGenType_Grow_fnRecorder {
	return &MoqBuffer_starGenType_Grow_fnRecorder{
		Params: MoqBuffer_starGenType_Grow_params{
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_Grow_fnRecorder) Any() *MoqBuffer_starGenType_Grow_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Grow(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_Grow_anyParams{Recorder: r}
}

func (a *MoqBuffer_starGenType_Grow_anyParams) N() *MoqBuffer_starGenType_Grow_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqBuffer_starGenType_Grow_fnRecorder) Seq() *MoqBuffer_starGenType_Grow_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Grow(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_Grow_fnRecorder) NoSeq() *MoqBuffer_starGenType_Grow_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Grow(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_Grow_fnRecorder) ReturnResults() *MoqBuffer_starGenType_Grow_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Grow_doFn
		DoReturnFn MoqBuffer_starGenType_Grow_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_Grow_fnRecorder) AndDo(fn MoqBuffer_starGenType_Grow_doFn) *MoqBuffer_starGenType_Grow_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_Grow_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_Grow_doReturnFn) *MoqBuffer_starGenType_Grow_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Grow_doFn
		DoReturnFn MoqBuffer_starGenType_Grow_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_Grow_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_Grow_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Grow {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_Grow_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_Grow_paramsKey]*MoqBuffer_starGenType_Grow_results{},
		}
		r.Moq.ResultsByParams_Grow = append(r.Moq.ResultsByParams_Grow, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Grow) {
			copy(r.Moq.ResultsByParams_Grow[insertAt+1:], r.Moq.ResultsByParams_Grow[insertAt:0])
			r.Moq.ResultsByParams_Grow[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Grow(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_Grow_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_Grow_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_Grow_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_Grow_doFn
				DoReturnFn MoqBuffer_starGenType_Grow_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_Grow(params MoqBuffer_starGenType_Grow_params) string {
	return fmt.Sprintf("Grow(%#v)", params.N)
}

func (m *MoqBuffer_starGenType) ParamsKey_Grow(params MoqBuffer_starGenType_Grow_params, anyParams uint64) MoqBuffer_starGenType_Grow_paramsKey {
	m.Scene.T.Helper()
	var nUsed int
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Grow.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqBuffer_starGenType_Grow_paramsKey{
		Params: struct{ N int }{
			N: nUsed,
		},
		Hashes: struct{ N hash.Hash }{
			N: nUsedHash,
		},
	}
}

func (m *MoqBuffer_starGenType_recorder) Write(p []byte) *MoqBuffer_starGenType_Write_fnRecorder {
	return &MoqBuffer_starGenType_Write_fnRecorder{
		Params: MoqBuffer_starGenType_Write_params{
			P: p,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_Write_fnRecorder) Any() *MoqBuffer_starGenType_Write_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_Write_anyParams{Recorder: r}
}

func (a *MoqBuffer_starGenType_Write_anyParams) P() *MoqBuffer_starGenType_Write_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqBuffer_starGenType_Write_fnRecorder) Seq() *MoqBuffer_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_Write_fnRecorder) NoSeq() *MoqBuffer_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_Write_fnRecorder) ReturnResults(n int, err error) *MoqBuffer_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Write_doFn
		DoReturnFn MoqBuffer_starGenType_Write_doReturnFn
	}{
		Values: &struct {
			N   int
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_Write_fnRecorder) AndDo(fn MoqBuffer_starGenType_Write_doFn) *MoqBuffer_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_Write_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_Write_doReturnFn) *MoqBuffer_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Write_doFn
		DoReturnFn MoqBuffer_starGenType_Write_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_Write_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_Write_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Write {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_Write_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_Write_paramsKey]*MoqBuffer_starGenType_Write_results{},
		}
		r.Moq.ResultsByParams_Write = append(r.Moq.ResultsByParams_Write, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Write) {
			copy(r.Moq.ResultsByParams_Write[insertAt+1:], r.Moq.ResultsByParams_Write[insertAt:0])
			r.Moq.ResultsByParams_Write[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Write(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_Write_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_Write_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int
					Err error
				}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_Write_doFn
				DoReturnFn MoqBuffer_starGenType_Write_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_Write(params MoqBuffer_starGenType_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.P)
}

func (m *MoqBuffer_starGenType) ParamsKey_Write(params MoqBuffer_starGenType_Write_params, anyParams uint64) MoqBuffer_starGenType_Write_paramsKey {
	m.Scene.T.Helper()
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Write.P == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The p parameter of the Write function can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.P)
	}
	return MoqBuffer_starGenType_Write_paramsKey{
		Params: struct{}{},
		Hashes: struct{ P hash.Hash }{
			P: pUsedHash,
		},
	}
}

func (m *MoqBuffer_starGenType_recorder) WriteString(s string) *MoqBuffer_starGenType_WriteString_fnRecorder {
	return &MoqBuffer_starGenType_WriteString_fnRecorder{
		Params: MoqBuffer_starGenType_WriteString_params{
			S: s,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_WriteString_fnRecorder) Any() *MoqBuffer_starGenType_WriteString_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteString(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_WriteString_anyParams{Recorder: r}
}

func (a *MoqBuffer_starGenType_WriteString_anyParams) S() *MoqBuffer_starGenType_WriteString_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqBuffer_starGenType_WriteString_fnRecorder) Seq() *MoqBuffer_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteString(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_WriteString_fnRecorder) NoSeq() *MoqBuffer_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteString(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_WriteString_fnRecorder) ReturnResults(n int, err error) *MoqBuffer_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_WriteString_doFn
		DoReturnFn MoqBuffer_starGenType_WriteString_doReturnFn
	}{
		Values: &struct {
			N   int
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_WriteString_fnRecorder) AndDo(fn MoqBuffer_starGenType_WriteString_doFn) *MoqBuffer_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_WriteString_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_WriteString_doReturnFn) *MoqBuffer_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_WriteString_doFn
		DoReturnFn MoqBuffer_starGenType_WriteString_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_WriteString_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_WriteString_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteString {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_WriteString_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_WriteString_paramsKey]*MoqBuffer_starGenType_WriteString_results{},
		}
		r.Moq.ResultsByParams_WriteString = append(r.Moq.ResultsByParams_WriteString, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteString) {
			copy(r.Moq.ResultsByParams_WriteString[insertAt+1:], r.Moq.ResultsByParams_WriteString[insertAt:0])
			r.Moq.ResultsByParams_WriteString[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteString(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_WriteString_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_WriteString_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int
					Err error
				}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_WriteString_doFn
				DoReturnFn MoqBuffer_starGenType_WriteString_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_WriteString(params MoqBuffer_starGenType_WriteString_params) string {
	return fmt.Sprintf("WriteString(%#v)", params.S)
}

func (m *MoqBuffer_starGenType) ParamsKey_WriteString(params MoqBuffer_starGenType_WriteString_params, anyParams uint64) MoqBuffer_starGenType_WriteString_paramsKey {
	m.Scene.T.Helper()
	var sUsed string
	var sUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteString.S == moq.ParamIndexByValue {
			sUsed = params.S
		} else {
			sUsedHash = hash.DeepHash(params.S)
		}
	}
	return MoqBuffer_starGenType_WriteString_paramsKey{
		Params: struct{ S string }{
			S: sUsed,
		},
		Hashes: struct{ S hash.Hash }{
			S: sUsedHash,
		},
	}
}

func (m *MoqBuffer_starGenType_recorder) ReadFrom(param1 io.Reader) *MoqBuffer_starGenType_ReadFrom_fnRecorder {
	return &MoqBuffer_starGenType_ReadFrom_fnRecorder{
		Params: MoqBuffer_starGenType_ReadFrom_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_ReadFrom_fnRecorder) Any() *MoqBuffer_starGenType_ReadFrom_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFrom(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_ReadFrom_anyParams{Recorder: r}
}

func (a *MoqBuffer_starGenType_ReadFrom_anyParams) Param1() *MoqBuffer_starGenType_ReadFrom_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqBuffer_starGenType_ReadFrom_fnRecorder) Seq() *MoqBuffer_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFrom(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_ReadFrom_fnRecorder) NoSeq() *MoqBuffer_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFrom(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_ReadFrom_fnRecorder) ReturnResults(n int64, err error) *MoqBuffer_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int64
			Err error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_ReadFrom_doFn
		DoReturnFn MoqBuffer_starGenType_ReadFrom_doReturnFn
	}{
		Values: &struct {
			N   int64
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_ReadFrom_fnRecorder) AndDo(fn MoqBuffer_starGenType_ReadFrom_doFn) *MoqBuffer_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_ReadFrom_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_ReadFrom_doReturnFn) *MoqBuffer_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int64
			Err error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_ReadFrom_doFn
		DoReturnFn MoqBuffer_starGenType_ReadFrom_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_ReadFrom_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_ReadFrom_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadFrom {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_ReadFrom_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_ReadFrom_paramsKey]*MoqBuffer_starGenType_ReadFrom_results{},
		}
		r.Moq.ResultsByParams_ReadFrom = append(r.Moq.ResultsByParams_ReadFrom, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadFrom) {
			copy(r.Moq.ResultsByParams_ReadFrom[insertAt+1:], r.Moq.ResultsByParams_ReadFrom[insertAt:0])
			r.Moq.ResultsByParams_ReadFrom[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadFrom(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_ReadFrom_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_ReadFrom_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int64
					Err error
				}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_ReadFrom_doFn
				DoReturnFn MoqBuffer_starGenType_ReadFrom_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_ReadFrom(params MoqBuffer_starGenType_ReadFrom_params) string {
	return fmt.Sprintf("ReadFrom(%#v)", params.Param1)
}

func (m *MoqBuffer_starGenType) ParamsKey_ReadFrom(params MoqBuffer_starGenType_ReadFrom_params, anyParams uint64) MoqBuffer_starGenType_ReadFrom_paramsKey {
	m.Scene.T.Helper()
	var param1Used io.Reader
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadFrom.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqBuffer_starGenType_ReadFrom_paramsKey{
		Params: struct{ Param1 io.Reader }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqBuffer_starGenType_recorder) WriteTo(w io.Writer) *MoqBuffer_starGenType_WriteTo_fnRecorder {
	return &MoqBuffer_starGenType_WriteTo_fnRecorder{
		Params: MoqBuffer_starGenType_WriteTo_params{
			W: w,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_WriteTo_fnRecorder) Any() *MoqBuffer_starGenType_WriteTo_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteTo(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_WriteTo_anyParams{Recorder: r}
}

func (a *MoqBuffer_starGenType_WriteTo_anyParams) W() *MoqBuffer_starGenType_WriteTo_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqBuffer_starGenType_WriteTo_fnRecorder) Seq() *MoqBuffer_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteTo(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_WriteTo_fnRecorder) NoSeq() *MoqBuffer_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteTo(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_WriteTo_fnRecorder) ReturnResults(n int64, err error) *MoqBuffer_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int64
			Err error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_WriteTo_doFn
		DoReturnFn MoqBuffer_starGenType_WriteTo_doReturnFn
	}{
		Values: &struct {
			N   int64
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_WriteTo_fnRecorder) AndDo(fn MoqBuffer_starGenType_WriteTo_doFn) *MoqBuffer_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_WriteTo_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_WriteTo_doReturnFn) *MoqBuffer_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int64
			Err error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_WriteTo_doFn
		DoReturnFn MoqBuffer_starGenType_WriteTo_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_WriteTo_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_WriteTo_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteTo {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_WriteTo_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_WriteTo_paramsKey]*MoqBuffer_starGenType_WriteTo_results{},
		}
		r.Moq.ResultsByParams_WriteTo = append(r.Moq.ResultsByParams_WriteTo, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteTo) {
			copy(r.Moq.ResultsByParams_WriteTo[insertAt+1:], r.Moq.ResultsByParams_WriteTo[insertAt:0])
			r.Moq.ResultsByParams_WriteTo[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteTo(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_WriteTo_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_WriteTo_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int64
					Err error
				}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_WriteTo_doFn
				DoReturnFn MoqBuffer_starGenType_WriteTo_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_WriteTo(params MoqBuffer_starGenType_WriteTo_params) string {
	return fmt.Sprintf("WriteTo(%#v)", params.W)
}

func (m *MoqBuffer_starGenType) ParamsKey_WriteTo(params MoqBuffer_starGenType_WriteTo_params, anyParams uint64) MoqBuffer_starGenType_WriteTo_paramsKey {
	m.Scene.T.Helper()
	var wUsed io.Writer
	var wUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteTo.W == moq.ParamIndexByValue {
			wUsed = params.W
		} else {
			wUsedHash = hash.DeepHash(params.W)
		}
	}
	return MoqBuffer_starGenType_WriteTo_paramsKey{
		Params: struct{ W io.Writer }{
			W: wUsed,
		},
		Hashes: struct{ W hash.Hash }{
			W: wUsedHash,
		},
	}
}

func (m *MoqBuffer_starGenType_recorder) WriteByte(c byte) *MoqBuffer_starGenType_WriteByte_fnRecorder {
	return &MoqBuffer_starGenType_WriteByte_fnRecorder{
		Params: MoqBuffer_starGenType_WriteByte_params{
			C: c,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_WriteByte_fnRecorder) Any() *MoqBuffer_starGenType_WriteByte_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteByte(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_WriteByte_anyParams{Recorder: r}
}

func (a *MoqBuffer_starGenType_WriteByte_anyParams) C() *MoqBuffer_starGenType_WriteByte_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqBuffer_starGenType_WriteByte_fnRecorder) Seq() *MoqBuffer_starGenType_WriteByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteByte(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_WriteByte_fnRecorder) NoSeq() *MoqBuffer_starGenType_WriteByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteByte(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_WriteByte_fnRecorder) ReturnResults(result1 error) *MoqBuffer_starGenType_WriteByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_WriteByte_doFn
		DoReturnFn MoqBuffer_starGenType_WriteByte_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_WriteByte_fnRecorder) AndDo(fn MoqBuffer_starGenType_WriteByte_doFn) *MoqBuffer_starGenType_WriteByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_WriteByte_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_WriteByte_doReturnFn) *MoqBuffer_starGenType_WriteByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_WriteByte_doFn
		DoReturnFn MoqBuffer_starGenType_WriteByte_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_WriteByte_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_WriteByte_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteByte {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_WriteByte_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_WriteByte_paramsKey]*MoqBuffer_starGenType_WriteByte_results{},
		}
		r.Moq.ResultsByParams_WriteByte = append(r.Moq.ResultsByParams_WriteByte, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteByte) {
			copy(r.Moq.ResultsByParams_WriteByte[insertAt+1:], r.Moq.ResultsByParams_WriteByte[insertAt:0])
			r.Moq.ResultsByParams_WriteByte[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteByte(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_WriteByte_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_WriteByte_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_WriteByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_WriteByte_doFn
				DoReturnFn MoqBuffer_starGenType_WriteByte_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_WriteByte(params MoqBuffer_starGenType_WriteByte_params) string {
	return fmt.Sprintf("WriteByte(%#v)", params.C)
}

func (m *MoqBuffer_starGenType) ParamsKey_WriteByte(params MoqBuffer_starGenType_WriteByte_params, anyParams uint64) MoqBuffer_starGenType_WriteByte_paramsKey {
	m.Scene.T.Helper()
	var cUsed byte
	var cUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteByte.C == moq.ParamIndexByValue {
			cUsed = params.C
		} else {
			cUsedHash = hash.DeepHash(params.C)
		}
	}
	return MoqBuffer_starGenType_WriteByte_paramsKey{
		Params: struct{ C byte }{
			C: cUsed,
		},
		Hashes: struct{ C hash.Hash }{
			C: cUsedHash,
		},
	}
}

func (m *MoqBuffer_starGenType_recorder) WriteRune(param1 rune) *MoqBuffer_starGenType_WriteRune_fnRecorder {
	return &MoqBuffer_starGenType_WriteRune_fnRecorder{
		Params: MoqBuffer_starGenType_WriteRune_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_WriteRune_fnRecorder) Any() *MoqBuffer_starGenType_WriteRune_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteRune(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_WriteRune_anyParams{Recorder: r}
}

func (a *MoqBuffer_starGenType_WriteRune_anyParams) Param1() *MoqBuffer_starGenType_WriteRune_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqBuffer_starGenType_WriteRune_fnRecorder) Seq() *MoqBuffer_starGenType_WriteRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteRune(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_WriteRune_fnRecorder) NoSeq() *MoqBuffer_starGenType_WriteRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteRune(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_WriteRune_fnRecorder) ReturnResults(n int, err error) *MoqBuffer_starGenType_WriteRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_WriteRune_doFn
		DoReturnFn MoqBuffer_starGenType_WriteRune_doReturnFn
	}{
		Values: &struct {
			N   int
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_WriteRune_fnRecorder) AndDo(fn MoqBuffer_starGenType_WriteRune_doFn) *MoqBuffer_starGenType_WriteRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_WriteRune_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_WriteRune_doReturnFn) *MoqBuffer_starGenType_WriteRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_WriteRune_doFn
		DoReturnFn MoqBuffer_starGenType_WriteRune_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_WriteRune_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_WriteRune_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteRune {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_WriteRune_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_WriteRune_paramsKey]*MoqBuffer_starGenType_WriteRune_results{},
		}
		r.Moq.ResultsByParams_WriteRune = append(r.Moq.ResultsByParams_WriteRune, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteRune) {
			copy(r.Moq.ResultsByParams_WriteRune[insertAt+1:], r.Moq.ResultsByParams_WriteRune[insertAt:0])
			r.Moq.ResultsByParams_WriteRune[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteRune(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_WriteRune_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_WriteRune_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_WriteRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int
					Err error
				}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_WriteRune_doFn
				DoReturnFn MoqBuffer_starGenType_WriteRune_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_WriteRune(params MoqBuffer_starGenType_WriteRune_params) string {
	return fmt.Sprintf("WriteRune(%#v)", params.Param1)
}

func (m *MoqBuffer_starGenType) ParamsKey_WriteRune(params MoqBuffer_starGenType_WriteRune_params, anyParams uint64) MoqBuffer_starGenType_WriteRune_paramsKey {
	m.Scene.T.Helper()
	var param1Used rune
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteRune.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqBuffer_starGenType_WriteRune_paramsKey{
		Params: struct{ Param1 rune }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqBuffer_starGenType_recorder) Read(p []byte) *MoqBuffer_starGenType_Read_fnRecorder {
	return &MoqBuffer_starGenType_Read_fnRecorder{
		Params: MoqBuffer_starGenType_Read_params{
			P: p,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_Read_fnRecorder) Any() *MoqBuffer_starGenType_Read_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_Read_anyParams{Recorder: r}
}

func (a *MoqBuffer_starGenType_Read_anyParams) P() *MoqBuffer_starGenType_Read_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqBuffer_starGenType_Read_fnRecorder) Seq() *MoqBuffer_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_Read_fnRecorder) NoSeq() *MoqBuffer_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_Read_fnRecorder) ReturnResults(n int, err error) *MoqBuffer_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Read_doFn
		DoReturnFn MoqBuffer_starGenType_Read_doReturnFn
	}{
		Values: &struct {
			N   int
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_Read_fnRecorder) AndDo(fn MoqBuffer_starGenType_Read_doFn) *MoqBuffer_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_Read_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_Read_doReturnFn) *MoqBuffer_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Read_doFn
		DoReturnFn MoqBuffer_starGenType_Read_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_Read_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_Read_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Read {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_Read_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_Read_paramsKey]*MoqBuffer_starGenType_Read_results{},
		}
		r.Moq.ResultsByParams_Read = append(r.Moq.ResultsByParams_Read, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Read) {
			copy(r.Moq.ResultsByParams_Read[insertAt+1:], r.Moq.ResultsByParams_Read[insertAt:0])
			r.Moq.ResultsByParams_Read[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Read(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_Read_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_Read_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int
					Err error
				}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_Read_doFn
				DoReturnFn MoqBuffer_starGenType_Read_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_Read(params MoqBuffer_starGenType_Read_params) string {
	return fmt.Sprintf("Read(%#v)", params.P)
}

func (m *MoqBuffer_starGenType) ParamsKey_Read(params MoqBuffer_starGenType_Read_params, anyParams uint64) MoqBuffer_starGenType_Read_paramsKey {
	m.Scene.T.Helper()
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Read.P == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The p parameter of the Read function can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.P)
	}
	return MoqBuffer_starGenType_Read_paramsKey{
		Params: struct{}{},
		Hashes: struct{ P hash.Hash }{
			P: pUsedHash,
		},
	}
}

func (m *MoqBuffer_starGenType_recorder) Next(n int) *MoqBuffer_starGenType_Next_fnRecorder {
	return &MoqBuffer_starGenType_Next_fnRecorder{
		Params: MoqBuffer_starGenType_Next_params{
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_Next_fnRecorder) Any() *MoqBuffer_starGenType_Next_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_Next_anyParams{Recorder: r}
}

func (a *MoqBuffer_starGenType_Next_anyParams) N() *MoqBuffer_starGenType_Next_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqBuffer_starGenType_Next_fnRecorder) Seq() *MoqBuffer_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_Next_fnRecorder) NoSeq() *MoqBuffer_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Next(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_Next_fnRecorder) ReturnResults(result1 []byte) *MoqBuffer_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Next_doFn
		DoReturnFn MoqBuffer_starGenType_Next_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_Next_fnRecorder) AndDo(fn MoqBuffer_starGenType_Next_doFn) *MoqBuffer_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_Next_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_Next_doReturnFn) *MoqBuffer_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_Next_doFn
		DoReturnFn MoqBuffer_starGenType_Next_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_Next_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_Next_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Next {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_Next_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_Next_paramsKey]*MoqBuffer_starGenType_Next_results{},
		}
		r.Moq.ResultsByParams_Next = append(r.Moq.ResultsByParams_Next, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Next) {
			copy(r.Moq.ResultsByParams_Next[insertAt+1:], r.Moq.ResultsByParams_Next[insertAt:0])
			r.Moq.ResultsByParams_Next[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Next(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_Next_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_Next_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_Next_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
				}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_Next_doFn
				DoReturnFn MoqBuffer_starGenType_Next_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_Next(params MoqBuffer_starGenType_Next_params) string {
	return fmt.Sprintf("Next(%#v)", params.N)
}

func (m *MoqBuffer_starGenType) ParamsKey_Next(params MoqBuffer_starGenType_Next_params, anyParams uint64) MoqBuffer_starGenType_Next_paramsKey {
	m.Scene.T.Helper()
	var nUsed int
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Next.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqBuffer_starGenType_Next_paramsKey{
		Params: struct{ N int }{
			N: nUsed,
		},
		Hashes: struct{ N hash.Hash }{
			N: nUsedHash,
		},
	}
}

func (m *MoqBuffer_starGenType_recorder) ReadByte() *MoqBuffer_starGenType_ReadByte_fnRecorder {
	return &MoqBuffer_starGenType_ReadByte_fnRecorder{
		Params:   MoqBuffer_starGenType_ReadByte_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_ReadByte_fnRecorder) Any() *MoqBuffer_starGenType_ReadByte_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadByte(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_ReadByte_anyParams{Recorder: r}
}

func (r *MoqBuffer_starGenType_ReadByte_fnRecorder) Seq() *MoqBuffer_starGenType_ReadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadByte(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_ReadByte_fnRecorder) NoSeq() *MoqBuffer_starGenType_ReadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadByte(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_ReadByte_fnRecorder) ReturnResults(result1 byte, result2 error) *MoqBuffer_starGenType_ReadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_ReadByte_doFn
		DoReturnFn MoqBuffer_starGenType_ReadByte_doReturnFn
	}{
		Values: &struct {
			Result1 byte
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_ReadByte_fnRecorder) AndDo(fn MoqBuffer_starGenType_ReadByte_doFn) *MoqBuffer_starGenType_ReadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_ReadByte_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_ReadByte_doReturnFn) *MoqBuffer_starGenType_ReadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_ReadByte_doFn
		DoReturnFn MoqBuffer_starGenType_ReadByte_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_ReadByte_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_ReadByte_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadByte {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_ReadByte_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_ReadByte_paramsKey]*MoqBuffer_starGenType_ReadByte_results{},
		}
		r.Moq.ResultsByParams_ReadByte = append(r.Moq.ResultsByParams_ReadByte, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadByte) {
			copy(r.Moq.ResultsByParams_ReadByte[insertAt+1:], r.Moq.ResultsByParams_ReadByte[insertAt:0])
			r.Moq.ResultsByParams_ReadByte[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadByte(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_ReadByte_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_ReadByte_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_ReadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 byte
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_ReadByte_doFn
				DoReturnFn MoqBuffer_starGenType_ReadByte_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_ReadByte(params MoqBuffer_starGenType_ReadByte_params) string {
	return fmt.Sprintf("ReadByte()")
}

func (m *MoqBuffer_starGenType) ParamsKey_ReadByte(params MoqBuffer_starGenType_ReadByte_params, anyParams uint64) MoqBuffer_starGenType_ReadByte_paramsKey {
	m.Scene.T.Helper()
	return MoqBuffer_starGenType_ReadByte_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqBuffer_starGenType_recorder) ReadRune() *MoqBuffer_starGenType_ReadRune_fnRecorder {
	return &MoqBuffer_starGenType_ReadRune_fnRecorder{
		Params:   MoqBuffer_starGenType_ReadRune_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_ReadRune_fnRecorder) Any() *MoqBuffer_starGenType_ReadRune_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadRune(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_ReadRune_anyParams{Recorder: r}
}

func (r *MoqBuffer_starGenType_ReadRune_fnRecorder) Seq() *MoqBuffer_starGenType_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadRune(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_ReadRune_fnRecorder) NoSeq() *MoqBuffer_starGenType_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadRune(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_ReadRune_fnRecorder) ReturnResults(result1 rune, size int, err error) *MoqBuffer_starGenType_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 rune
			Size    int
			Err     error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_ReadRune_doFn
		DoReturnFn MoqBuffer_starGenType_ReadRune_doReturnFn
	}{
		Values: &struct {
			Result1 rune
			Size    int
			Err     error
		}{
			Result1: result1,
			Size:    size,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_ReadRune_fnRecorder) AndDo(fn MoqBuffer_starGenType_ReadRune_doFn) *MoqBuffer_starGenType_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_ReadRune_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_ReadRune_doReturnFn) *MoqBuffer_starGenType_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 rune
			Size    int
			Err     error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_ReadRune_doFn
		DoReturnFn MoqBuffer_starGenType_ReadRune_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_ReadRune_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_ReadRune_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadRune {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_ReadRune_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_ReadRune_paramsKey]*MoqBuffer_starGenType_ReadRune_results{},
		}
		r.Moq.ResultsByParams_ReadRune = append(r.Moq.ResultsByParams_ReadRune, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadRune) {
			copy(r.Moq.ResultsByParams_ReadRune[insertAt+1:], r.Moq.ResultsByParams_ReadRune[insertAt:0])
			r.Moq.ResultsByParams_ReadRune[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadRune(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_ReadRune_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_ReadRune_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 rune
					Size    int
					Err     error
				}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_ReadRune_doFn
				DoReturnFn MoqBuffer_starGenType_ReadRune_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_ReadRune(params MoqBuffer_starGenType_ReadRune_params) string {
	return fmt.Sprintf("ReadRune()")
}

func (m *MoqBuffer_starGenType) ParamsKey_ReadRune(params MoqBuffer_starGenType_ReadRune_params, anyParams uint64) MoqBuffer_starGenType_ReadRune_paramsKey {
	m.Scene.T.Helper()
	return MoqBuffer_starGenType_ReadRune_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqBuffer_starGenType_recorder) UnreadRune() *MoqBuffer_starGenType_UnreadRune_fnRecorder {
	return &MoqBuffer_starGenType_UnreadRune_fnRecorder{
		Params:   MoqBuffer_starGenType_UnreadRune_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_UnreadRune_fnRecorder) Any() *MoqBuffer_starGenType_UnreadRune_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnreadRune(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_UnreadRune_anyParams{Recorder: r}
}

func (r *MoqBuffer_starGenType_UnreadRune_fnRecorder) Seq() *MoqBuffer_starGenType_UnreadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnreadRune(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_UnreadRune_fnRecorder) NoSeq() *MoqBuffer_starGenType_UnreadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnreadRune(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_UnreadRune_fnRecorder) ReturnResults(result1 error) *MoqBuffer_starGenType_UnreadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_UnreadRune_doFn
		DoReturnFn MoqBuffer_starGenType_UnreadRune_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_UnreadRune_fnRecorder) AndDo(fn MoqBuffer_starGenType_UnreadRune_doFn) *MoqBuffer_starGenType_UnreadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_UnreadRune_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_UnreadRune_doReturnFn) *MoqBuffer_starGenType_UnreadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_UnreadRune_doFn
		DoReturnFn MoqBuffer_starGenType_UnreadRune_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_UnreadRune_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_UnreadRune_resultsByParams
	for n, res := range r.Moq.ResultsByParams_UnreadRune {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_UnreadRune_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_UnreadRune_paramsKey]*MoqBuffer_starGenType_UnreadRune_results{},
		}
		r.Moq.ResultsByParams_UnreadRune = append(r.Moq.ResultsByParams_UnreadRune, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_UnreadRune) {
			copy(r.Moq.ResultsByParams_UnreadRune[insertAt+1:], r.Moq.ResultsByParams_UnreadRune[insertAt:0])
			r.Moq.ResultsByParams_UnreadRune[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_UnreadRune(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_UnreadRune_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_UnreadRune_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_UnreadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_UnreadRune_doFn
				DoReturnFn MoqBuffer_starGenType_UnreadRune_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_UnreadRune(params MoqBuffer_starGenType_UnreadRune_params) string {
	return fmt.Sprintf("UnreadRune()")
}

func (m *MoqBuffer_starGenType) ParamsKey_UnreadRune(params MoqBuffer_starGenType_UnreadRune_params, anyParams uint64) MoqBuffer_starGenType_UnreadRune_paramsKey {
	m.Scene.T.Helper()
	return MoqBuffer_starGenType_UnreadRune_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqBuffer_starGenType_recorder) UnreadByte() *MoqBuffer_starGenType_UnreadByte_fnRecorder {
	return &MoqBuffer_starGenType_UnreadByte_fnRecorder{
		Params:   MoqBuffer_starGenType_UnreadByte_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_UnreadByte_fnRecorder) Any() *MoqBuffer_starGenType_UnreadByte_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnreadByte(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_UnreadByte_anyParams{Recorder: r}
}

func (r *MoqBuffer_starGenType_UnreadByte_fnRecorder) Seq() *MoqBuffer_starGenType_UnreadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnreadByte(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_UnreadByte_fnRecorder) NoSeq() *MoqBuffer_starGenType_UnreadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnreadByte(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_UnreadByte_fnRecorder) ReturnResults(result1 error) *MoqBuffer_starGenType_UnreadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_UnreadByte_doFn
		DoReturnFn MoqBuffer_starGenType_UnreadByte_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_UnreadByte_fnRecorder) AndDo(fn MoqBuffer_starGenType_UnreadByte_doFn) *MoqBuffer_starGenType_UnreadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_UnreadByte_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_UnreadByte_doReturnFn) *MoqBuffer_starGenType_UnreadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_UnreadByte_doFn
		DoReturnFn MoqBuffer_starGenType_UnreadByte_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_UnreadByte_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_UnreadByte_resultsByParams
	for n, res := range r.Moq.ResultsByParams_UnreadByte {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_UnreadByte_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_UnreadByte_paramsKey]*MoqBuffer_starGenType_UnreadByte_results{},
		}
		r.Moq.ResultsByParams_UnreadByte = append(r.Moq.ResultsByParams_UnreadByte, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_UnreadByte) {
			copy(r.Moq.ResultsByParams_UnreadByte[insertAt+1:], r.Moq.ResultsByParams_UnreadByte[insertAt:0])
			r.Moq.ResultsByParams_UnreadByte[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_UnreadByte(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_UnreadByte_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_UnreadByte_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_UnreadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_UnreadByte_doFn
				DoReturnFn MoqBuffer_starGenType_UnreadByte_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_UnreadByte(params MoqBuffer_starGenType_UnreadByte_params) string {
	return fmt.Sprintf("UnreadByte()")
}

func (m *MoqBuffer_starGenType) ParamsKey_UnreadByte(params MoqBuffer_starGenType_UnreadByte_params, anyParams uint64) MoqBuffer_starGenType_UnreadByte_paramsKey {
	m.Scene.T.Helper()
	return MoqBuffer_starGenType_UnreadByte_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqBuffer_starGenType_recorder) ReadBytes(delim byte) *MoqBuffer_starGenType_ReadBytes_fnRecorder {
	return &MoqBuffer_starGenType_ReadBytes_fnRecorder{
		Params: MoqBuffer_starGenType_ReadBytes_params{
			Delim: delim,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_ReadBytes_fnRecorder) Any() *MoqBuffer_starGenType_ReadBytes_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadBytes(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_ReadBytes_anyParams{Recorder: r}
}

func (a *MoqBuffer_starGenType_ReadBytes_anyParams) Delim() *MoqBuffer_starGenType_ReadBytes_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqBuffer_starGenType_ReadBytes_fnRecorder) Seq() *MoqBuffer_starGenType_ReadBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadBytes(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_ReadBytes_fnRecorder) NoSeq() *MoqBuffer_starGenType_ReadBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadBytes(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_ReadBytes_fnRecorder) ReturnResults(line []byte, err error) *MoqBuffer_starGenType_ReadBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Line []byte
			Err  error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_ReadBytes_doFn
		DoReturnFn MoqBuffer_starGenType_ReadBytes_doReturnFn
	}{
		Values: &struct {
			Line []byte
			Err  error
		}{
			Line: line,
			Err:  err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_ReadBytes_fnRecorder) AndDo(fn MoqBuffer_starGenType_ReadBytes_doFn) *MoqBuffer_starGenType_ReadBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_ReadBytes_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_ReadBytes_doReturnFn) *MoqBuffer_starGenType_ReadBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Line []byte
			Err  error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_ReadBytes_doFn
		DoReturnFn MoqBuffer_starGenType_ReadBytes_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_ReadBytes_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_ReadBytes_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadBytes {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_ReadBytes_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_ReadBytes_paramsKey]*MoqBuffer_starGenType_ReadBytes_results{},
		}
		r.Moq.ResultsByParams_ReadBytes = append(r.Moq.ResultsByParams_ReadBytes, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadBytes) {
			copy(r.Moq.ResultsByParams_ReadBytes[insertAt+1:], r.Moq.ResultsByParams_ReadBytes[insertAt:0])
			r.Moq.ResultsByParams_ReadBytes[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadBytes(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_ReadBytes_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_ReadBytes_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_ReadBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Line []byte
					Err  error
				}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_ReadBytes_doFn
				DoReturnFn MoqBuffer_starGenType_ReadBytes_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_ReadBytes(params MoqBuffer_starGenType_ReadBytes_params) string {
	return fmt.Sprintf("ReadBytes(%#v)", params.Delim)
}

func (m *MoqBuffer_starGenType) ParamsKey_ReadBytes(params MoqBuffer_starGenType_ReadBytes_params, anyParams uint64) MoqBuffer_starGenType_ReadBytes_paramsKey {
	m.Scene.T.Helper()
	var delimUsed byte
	var delimUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadBytes.Delim == moq.ParamIndexByValue {
			delimUsed = params.Delim
		} else {
			delimUsedHash = hash.DeepHash(params.Delim)
		}
	}
	return MoqBuffer_starGenType_ReadBytes_paramsKey{
		Params: struct{ Delim byte }{
			Delim: delimUsed,
		},
		Hashes: struct{ Delim hash.Hash }{
			Delim: delimUsedHash,
		},
	}
}

func (m *MoqBuffer_starGenType_recorder) ReadString(delim byte) *MoqBuffer_starGenType_ReadString_fnRecorder {
	return &MoqBuffer_starGenType_ReadString_fnRecorder{
		Params: MoqBuffer_starGenType_ReadString_params{
			Delim: delim,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBuffer_starGenType_ReadString_fnRecorder) Any() *MoqBuffer_starGenType_ReadString_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadString(r.Params))
		return nil
	}
	return &MoqBuffer_starGenType_ReadString_anyParams{Recorder: r}
}

func (a *MoqBuffer_starGenType_ReadString_anyParams) Delim() *MoqBuffer_starGenType_ReadString_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqBuffer_starGenType_ReadString_fnRecorder) Seq() *MoqBuffer_starGenType_ReadString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadString(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBuffer_starGenType_ReadString_fnRecorder) NoSeq() *MoqBuffer_starGenType_ReadString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadString(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBuffer_starGenType_ReadString_fnRecorder) ReturnResults(line string, err error) *MoqBuffer_starGenType_ReadString_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Line string
			Err  error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_ReadString_doFn
		DoReturnFn MoqBuffer_starGenType_ReadString_doReturnFn
	}{
		Values: &struct {
			Line string
			Err  error
		}{
			Line: line,
			Err:  err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBuffer_starGenType_ReadString_fnRecorder) AndDo(fn MoqBuffer_starGenType_ReadString_doFn) *MoqBuffer_starGenType_ReadString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBuffer_starGenType_ReadString_fnRecorder) DoReturnResults(fn MoqBuffer_starGenType_ReadString_doReturnFn) *MoqBuffer_starGenType_ReadString_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Line string
			Err  error
		}
		Sequence   uint32
		DoFn       MoqBuffer_starGenType_ReadString_doFn
		DoReturnFn MoqBuffer_starGenType_ReadString_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBuffer_starGenType_ReadString_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBuffer_starGenType_ReadString_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadString {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBuffer_starGenType_ReadString_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBuffer_starGenType_ReadString_paramsKey]*MoqBuffer_starGenType_ReadString_results{},
		}
		r.Moq.ResultsByParams_ReadString = append(r.Moq.ResultsByParams_ReadString, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadString) {
			copy(r.Moq.ResultsByParams_ReadString[insertAt+1:], r.Moq.ResultsByParams_ReadString[insertAt:0])
			r.Moq.ResultsByParams_ReadString[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadString(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBuffer_starGenType_ReadString_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBuffer_starGenType_ReadString_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBuffer_starGenType_ReadString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Line string
					Err  error
				}
				Sequence   uint32
				DoFn       MoqBuffer_starGenType_ReadString_doFn
				DoReturnFn MoqBuffer_starGenType_ReadString_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBuffer_starGenType) PrettyParams_ReadString(params MoqBuffer_starGenType_ReadString_params) string {
	return fmt.Sprintf("ReadString(%#v)", params.Delim)
}

func (m *MoqBuffer_starGenType) ParamsKey_ReadString(params MoqBuffer_starGenType_ReadString_params, anyParams uint64) MoqBuffer_starGenType_ReadString_paramsKey {
	m.Scene.T.Helper()
	var delimUsed byte
	var delimUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadString.Delim == moq.ParamIndexByValue {
			delimUsed = params.Delim
		} else {
			delimUsedHash = hash.DeepHash(params.Delim)
		}
	}
	return MoqBuffer_starGenType_ReadString_paramsKey{
		Params: struct{ Delim byte }{
			Delim: delimUsed,
		},
		Hashes: struct{ Delim hash.Hash }{
			Delim: delimUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqBuffer_starGenType) Reset() {
	m.ResultsByParams_Bytes = nil
	m.ResultsByParams_String = nil
	m.ResultsByParams_Len = nil
	m.ResultsByParams_Cap = nil
	m.ResultsByParams_Truncate = nil
	m.ResultsByParams_Reset = nil
	m.ResultsByParams_Grow = nil
	m.ResultsByParams_Write = nil
	m.ResultsByParams_WriteString = nil
	m.ResultsByParams_ReadFrom = nil
	m.ResultsByParams_WriteTo = nil
	m.ResultsByParams_WriteByte = nil
	m.ResultsByParams_WriteRune = nil
	m.ResultsByParams_Read = nil
	m.ResultsByParams_Next = nil
	m.ResultsByParams_ReadByte = nil
	m.ResultsByParams_ReadRune = nil
	m.ResultsByParams_UnreadRune = nil
	m.ResultsByParams_UnreadByte = nil
	m.ResultsByParams_ReadBytes = nil
	m.ResultsByParams_ReadString = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqBuffer_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Bytes {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Bytes(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Len {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Len(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Cap {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Cap(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Truncate {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Truncate(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Reset {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Reset(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Grow {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Grow(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Write {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Write(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteString {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteString(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadFrom {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadFrom(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteTo {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteTo(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteByte {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteByte(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteRune {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteRune(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Read {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Read(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Next {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Next(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadByte {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadByte(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadRune {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadRune(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_UnreadRune {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_UnreadRune(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_UnreadByte {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_UnreadByte(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadBytes {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadBytes(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadString {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadString(results.Params))
			}
		}
	}
}
