// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package time

import (
	"fmt"
	"math/bits"
	"sync/atomic"
	"time"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that time.Duration_genType is mocked
// completely
var _ Duration_genType = (*MoqDuration_genType_mock)(nil)

// Duration_genType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Duration_genType interface {
	String() string
	Nanoseconds() int64
	Microseconds() int64
	Milliseconds() int64
	Seconds() float64
	Minutes() float64
	Hours() float64
	Truncate(m time.Duration) time.Duration
	Round(m time.Duration) time.Duration
}

// MoqDuration_genType holds the state of a moq of the Duration_genType type
type MoqDuration_genType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqDuration_genType_mock

	ResultsByParams_String       []MoqDuration_genType_String_resultsByParams
	ResultsByParams_Nanoseconds  []MoqDuration_genType_Nanoseconds_resultsByParams
	ResultsByParams_Microseconds []MoqDuration_genType_Microseconds_resultsByParams
	ResultsByParams_Milliseconds []MoqDuration_genType_Milliseconds_resultsByParams
	ResultsByParams_Seconds      []MoqDuration_genType_Seconds_resultsByParams
	ResultsByParams_Minutes      []MoqDuration_genType_Minutes_resultsByParams
	ResultsByParams_Hours        []MoqDuration_genType_Hours_resultsByParams
	ResultsByParams_Truncate     []MoqDuration_genType_Truncate_resultsByParams
	ResultsByParams_Round        []MoqDuration_genType_Round_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			String       struct{}
			Nanoseconds  struct{}
			Microseconds struct{}
			Milliseconds struct{}
			Seconds      struct{}
			Minutes      struct{}
			Hours        struct{}
			Truncate     struct {
				Param1 moq.ParamIndexing
			}
			Round struct {
				Param1 moq.ParamIndexing
			}
		}
	}
	// MoqDuration_genType_mock isolates the mock interface of the Duration_genType
}

// type
type MoqDuration_genType_mock struct {
	Moq *MoqDuration_genType
}

// MoqDuration_genType_recorder isolates the recorder interface of the
// Duration_genType type
type MoqDuration_genType_recorder struct {
	Moq *MoqDuration_genType
}

// MoqDuration_genType_String_params holds the params of the Duration_genType
// type
type MoqDuration_genType_String_params struct{}

// MoqDuration_genType_String_paramsKey holds the map key params of the
// Duration_genType type
type MoqDuration_genType_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDuration_genType_String_resultsByParams contains the results for a given
// set of parameters for the Duration_genType type
type MoqDuration_genType_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDuration_genType_String_paramsKey]*MoqDuration_genType_String_results
}

// MoqDuration_genType_String_doFn defines the type of function needed when
// calling AndDo for the Duration_genType type
type MoqDuration_genType_String_doFn func()

// MoqDuration_genType_String_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Duration_genType type
type MoqDuration_genType_String_doReturnFn func() string

// MoqDuration_genType_String_results holds the results of the Duration_genType
// type
type MoqDuration_genType_String_results struct {
	Params  MoqDuration_genType_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_String_doFn
		DoReturnFn MoqDuration_genType_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDuration_genType_String_fnRecorder routes recorded function calls to the
// MoqDuration_genType moq
type MoqDuration_genType_String_fnRecorder struct {
	Params    MoqDuration_genType_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDuration_genType_String_results
	Moq       *MoqDuration_genType
}

// MoqDuration_genType_String_anyParams isolates the any params functions of
// the Duration_genType type
type MoqDuration_genType_String_anyParams struct {
	Recorder *MoqDuration_genType_String_fnRecorder
}

// MoqDuration_genType_Nanoseconds_params holds the params of the
// Duration_genType type
type MoqDuration_genType_Nanoseconds_params struct{}

// MoqDuration_genType_Nanoseconds_paramsKey holds the map key params of the
// Duration_genType type
type MoqDuration_genType_Nanoseconds_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDuration_genType_Nanoseconds_resultsByParams contains the results for a
// given set of parameters for the Duration_genType type
type MoqDuration_genType_Nanoseconds_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDuration_genType_Nanoseconds_paramsKey]*MoqDuration_genType_Nanoseconds_results
}

// MoqDuration_genType_Nanoseconds_doFn defines the type of function needed
// when calling AndDo for the Duration_genType type
type MoqDuration_genType_Nanoseconds_doFn func()

// MoqDuration_genType_Nanoseconds_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Duration_genType type
type MoqDuration_genType_Nanoseconds_doReturnFn func() int64

// MoqDuration_genType_Nanoseconds_results holds the results of the
// Duration_genType type
type MoqDuration_genType_Nanoseconds_results struct {
	Params  MoqDuration_genType_Nanoseconds_params
	Results []struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Nanoseconds_doFn
		DoReturnFn MoqDuration_genType_Nanoseconds_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDuration_genType_Nanoseconds_fnRecorder routes recorded function calls to
// the MoqDuration_genType moq
type MoqDuration_genType_Nanoseconds_fnRecorder struct {
	Params    MoqDuration_genType_Nanoseconds_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDuration_genType_Nanoseconds_results
	Moq       *MoqDuration_genType
}

// MoqDuration_genType_Nanoseconds_anyParams isolates the any params functions
// of the Duration_genType type
type MoqDuration_genType_Nanoseconds_anyParams struct {
	Recorder *MoqDuration_genType_Nanoseconds_fnRecorder
}

// MoqDuration_genType_Microseconds_params holds the params of the
// Duration_genType type
type MoqDuration_genType_Microseconds_params struct{}

// MoqDuration_genType_Microseconds_paramsKey holds the map key params of the
// Duration_genType type
type MoqDuration_genType_Microseconds_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDuration_genType_Microseconds_resultsByParams contains the results for a
// given set of parameters for the Duration_genType type
type MoqDuration_genType_Microseconds_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDuration_genType_Microseconds_paramsKey]*MoqDuration_genType_Microseconds_results
}

// MoqDuration_genType_Microseconds_doFn defines the type of function needed
// when calling AndDo for the Duration_genType type
type MoqDuration_genType_Microseconds_doFn func()

// MoqDuration_genType_Microseconds_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Duration_genType type
type MoqDuration_genType_Microseconds_doReturnFn func() int64

// MoqDuration_genType_Microseconds_results holds the results of the
// Duration_genType type
type MoqDuration_genType_Microseconds_results struct {
	Params  MoqDuration_genType_Microseconds_params
	Results []struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Microseconds_doFn
		DoReturnFn MoqDuration_genType_Microseconds_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDuration_genType_Microseconds_fnRecorder routes recorded function calls
// to the MoqDuration_genType moq
type MoqDuration_genType_Microseconds_fnRecorder struct {
	Params    MoqDuration_genType_Microseconds_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDuration_genType_Microseconds_results
	Moq       *MoqDuration_genType
}

// MoqDuration_genType_Microseconds_anyParams isolates the any params functions
// of the Duration_genType type
type MoqDuration_genType_Microseconds_anyParams struct {
	Recorder *MoqDuration_genType_Microseconds_fnRecorder
}

// MoqDuration_genType_Milliseconds_params holds the params of the
// Duration_genType type
type MoqDuration_genType_Milliseconds_params struct{}

// MoqDuration_genType_Milliseconds_paramsKey holds the map key params of the
// Duration_genType type
type MoqDuration_genType_Milliseconds_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDuration_genType_Milliseconds_resultsByParams contains the results for a
// given set of parameters for the Duration_genType type
type MoqDuration_genType_Milliseconds_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDuration_genType_Milliseconds_paramsKey]*MoqDuration_genType_Milliseconds_results
}

// MoqDuration_genType_Milliseconds_doFn defines the type of function needed
// when calling AndDo for the Duration_genType type
type MoqDuration_genType_Milliseconds_doFn func()

// MoqDuration_genType_Milliseconds_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Duration_genType type
type MoqDuration_genType_Milliseconds_doReturnFn func() int64

// MoqDuration_genType_Milliseconds_results holds the results of the
// Duration_genType type
type MoqDuration_genType_Milliseconds_results struct {
	Params  MoqDuration_genType_Milliseconds_params
	Results []struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Milliseconds_doFn
		DoReturnFn MoqDuration_genType_Milliseconds_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDuration_genType_Milliseconds_fnRecorder routes recorded function calls
// to the MoqDuration_genType moq
type MoqDuration_genType_Milliseconds_fnRecorder struct {
	Params    MoqDuration_genType_Milliseconds_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDuration_genType_Milliseconds_results
	Moq       *MoqDuration_genType
}

// MoqDuration_genType_Milliseconds_anyParams isolates the any params functions
// of the Duration_genType type
type MoqDuration_genType_Milliseconds_anyParams struct {
	Recorder *MoqDuration_genType_Milliseconds_fnRecorder
}

// MoqDuration_genType_Seconds_params holds the params of the Duration_genType
// type
type MoqDuration_genType_Seconds_params struct{}

// MoqDuration_genType_Seconds_paramsKey holds the map key params of the
// Duration_genType type
type MoqDuration_genType_Seconds_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDuration_genType_Seconds_resultsByParams contains the results for a given
// set of parameters for the Duration_genType type
type MoqDuration_genType_Seconds_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDuration_genType_Seconds_paramsKey]*MoqDuration_genType_Seconds_results
}

// MoqDuration_genType_Seconds_doFn defines the type of function needed when
// calling AndDo for the Duration_genType type
type MoqDuration_genType_Seconds_doFn func()

// MoqDuration_genType_Seconds_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Duration_genType type
type MoqDuration_genType_Seconds_doReturnFn func() float64

// MoqDuration_genType_Seconds_results holds the results of the
// Duration_genType type
type MoqDuration_genType_Seconds_results struct {
	Params  MoqDuration_genType_Seconds_params
	Results []struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Seconds_doFn
		DoReturnFn MoqDuration_genType_Seconds_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDuration_genType_Seconds_fnRecorder routes recorded function calls to the
// MoqDuration_genType moq
type MoqDuration_genType_Seconds_fnRecorder struct {
	Params    MoqDuration_genType_Seconds_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDuration_genType_Seconds_results
	Moq       *MoqDuration_genType
}

// MoqDuration_genType_Seconds_anyParams isolates the any params functions of
// the Duration_genType type
type MoqDuration_genType_Seconds_anyParams struct {
	Recorder *MoqDuration_genType_Seconds_fnRecorder
}

// MoqDuration_genType_Minutes_params holds the params of the Duration_genType
// type
type MoqDuration_genType_Minutes_params struct{}

// MoqDuration_genType_Minutes_paramsKey holds the map key params of the
// Duration_genType type
type MoqDuration_genType_Minutes_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDuration_genType_Minutes_resultsByParams contains the results for a given
// set of parameters for the Duration_genType type
type MoqDuration_genType_Minutes_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDuration_genType_Minutes_paramsKey]*MoqDuration_genType_Minutes_results
}

// MoqDuration_genType_Minutes_doFn defines the type of function needed when
// calling AndDo for the Duration_genType type
type MoqDuration_genType_Minutes_doFn func()

// MoqDuration_genType_Minutes_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Duration_genType type
type MoqDuration_genType_Minutes_doReturnFn func() float64

// MoqDuration_genType_Minutes_results holds the results of the
// Duration_genType type
type MoqDuration_genType_Minutes_results struct {
	Params  MoqDuration_genType_Minutes_params
	Results []struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Minutes_doFn
		DoReturnFn MoqDuration_genType_Minutes_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDuration_genType_Minutes_fnRecorder routes recorded function calls to the
// MoqDuration_genType moq
type MoqDuration_genType_Minutes_fnRecorder struct {
	Params    MoqDuration_genType_Minutes_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDuration_genType_Minutes_results
	Moq       *MoqDuration_genType
}

// MoqDuration_genType_Minutes_anyParams isolates the any params functions of
// the Duration_genType type
type MoqDuration_genType_Minutes_anyParams struct {
	Recorder *MoqDuration_genType_Minutes_fnRecorder
}

// MoqDuration_genType_Hours_params holds the params of the Duration_genType
// type
type MoqDuration_genType_Hours_params struct{}

// MoqDuration_genType_Hours_paramsKey holds the map key params of the
// Duration_genType type
type MoqDuration_genType_Hours_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDuration_genType_Hours_resultsByParams contains the results for a given
// set of parameters for the Duration_genType type
type MoqDuration_genType_Hours_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDuration_genType_Hours_paramsKey]*MoqDuration_genType_Hours_results
}

// MoqDuration_genType_Hours_doFn defines the type of function needed when
// calling AndDo for the Duration_genType type
type MoqDuration_genType_Hours_doFn func()

// MoqDuration_genType_Hours_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Duration_genType type
type MoqDuration_genType_Hours_doReturnFn func() float64

// MoqDuration_genType_Hours_results holds the results of the Duration_genType
// type
type MoqDuration_genType_Hours_results struct {
	Params  MoqDuration_genType_Hours_params
	Results []struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Hours_doFn
		DoReturnFn MoqDuration_genType_Hours_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDuration_genType_Hours_fnRecorder routes recorded function calls to the
// MoqDuration_genType moq
type MoqDuration_genType_Hours_fnRecorder struct {
	Params    MoqDuration_genType_Hours_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDuration_genType_Hours_results
	Moq       *MoqDuration_genType
}

// MoqDuration_genType_Hours_anyParams isolates the any params functions of the
// Duration_genType type
type MoqDuration_genType_Hours_anyParams struct {
	Recorder *MoqDuration_genType_Hours_fnRecorder
}

// MoqDuration_genType_Truncate_params holds the params of the Duration_genType
// type
type MoqDuration_genType_Truncate_params struct{ Param1 time.Duration }

// MoqDuration_genType_Truncate_paramsKey holds the map key params of the
// Duration_genType type
type MoqDuration_genType_Truncate_paramsKey struct {
	Params struct{ Param1 time.Duration }
	Hashes struct{ Param1 hash.Hash }
}

// MoqDuration_genType_Truncate_resultsByParams contains the results for a
// given set of parameters for the Duration_genType type
type MoqDuration_genType_Truncate_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDuration_genType_Truncate_paramsKey]*MoqDuration_genType_Truncate_results
}

// MoqDuration_genType_Truncate_doFn defines the type of function needed when
// calling AndDo for the Duration_genType type
type MoqDuration_genType_Truncate_doFn func(m time.Duration)

// MoqDuration_genType_Truncate_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Duration_genType type
type MoqDuration_genType_Truncate_doReturnFn func(m time.Duration) time.Duration

// MoqDuration_genType_Truncate_results holds the results of the
// Duration_genType type
type MoqDuration_genType_Truncate_results struct {
	Params  MoqDuration_genType_Truncate_params
	Results []struct {
		Values *struct {
			Result1 time.Duration
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Truncate_doFn
		DoReturnFn MoqDuration_genType_Truncate_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDuration_genType_Truncate_fnRecorder routes recorded function calls to
// the MoqDuration_genType moq
type MoqDuration_genType_Truncate_fnRecorder struct {
	Params    MoqDuration_genType_Truncate_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDuration_genType_Truncate_results
	Moq       *MoqDuration_genType
}

// MoqDuration_genType_Truncate_anyParams isolates the any params functions of
// the Duration_genType type
type MoqDuration_genType_Truncate_anyParams struct {
	Recorder *MoqDuration_genType_Truncate_fnRecorder
}

// MoqDuration_genType_Round_params holds the params of the Duration_genType
// type
type MoqDuration_genType_Round_params struct{ Param1 time.Duration }

// MoqDuration_genType_Round_paramsKey holds the map key params of the
// Duration_genType type
type MoqDuration_genType_Round_paramsKey struct {
	Params struct{ Param1 time.Duration }
	Hashes struct{ Param1 hash.Hash }
}

// MoqDuration_genType_Round_resultsByParams contains the results for a given
// set of parameters for the Duration_genType type
type MoqDuration_genType_Round_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDuration_genType_Round_paramsKey]*MoqDuration_genType_Round_results
}

// MoqDuration_genType_Round_doFn defines the type of function needed when
// calling AndDo for the Duration_genType type
type MoqDuration_genType_Round_doFn func(m time.Duration)

// MoqDuration_genType_Round_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Duration_genType type
type MoqDuration_genType_Round_doReturnFn func(m time.Duration) time.Duration

// MoqDuration_genType_Round_results holds the results of the Duration_genType
// type
type MoqDuration_genType_Round_results struct {
	Params  MoqDuration_genType_Round_params
	Results []struct {
		Values *struct {
			Result1 time.Duration
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Round_doFn
		DoReturnFn MoqDuration_genType_Round_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDuration_genType_Round_fnRecorder routes recorded function calls to the
// MoqDuration_genType moq
type MoqDuration_genType_Round_fnRecorder struct {
	Params    MoqDuration_genType_Round_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDuration_genType_Round_results
	Moq       *MoqDuration_genType
}

// MoqDuration_genType_Round_anyParams isolates the any params functions of the
// Duration_genType type
type MoqDuration_genType_Round_anyParams struct {
	Recorder *MoqDuration_genType_Round_fnRecorder
}

// NewMoqDuration_genType creates a new moq of the Duration_genType type
func NewMoqDuration_genType(scene *moq.Scene, config *moq.Config) *MoqDuration_genType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqDuration_genType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqDuration_genType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				String       struct{}
				Nanoseconds  struct{}
				Microseconds struct{}
				Milliseconds struct{}
				Seconds      struct{}
				Minutes      struct{}
				Hours        struct{}
				Truncate     struct {
					Param1 moq.ParamIndexing
				}
				Round struct {
					Param1 moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			String       struct{}
			Nanoseconds  struct{}
			Microseconds struct{}
			Milliseconds struct{}
			Seconds      struct{}
			Minutes      struct{}
			Hours        struct{}
			Truncate     struct {
				Param1 moq.ParamIndexing
			}
			Round struct {
				Param1 moq.ParamIndexing
			}
		}{
			String:       struct{}{},
			Nanoseconds:  struct{}{},
			Microseconds: struct{}{},
			Milliseconds: struct{}{},
			Seconds:      struct{}{},
			Minutes:      struct{}{},
			Hours:        struct{}{},
			Truncate: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			Round: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Duration_genType type
func (m *MoqDuration_genType) Mock() *MoqDuration_genType_mock { return m.Moq }

func (m *MoqDuration_genType_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqDuration_genType_String_params{}
	var results *MoqDuration_genType_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqDuration_genType_mock) Nanoseconds() (result1 int64) {
	m.Moq.Scene.T.Helper()
	params := MoqDuration_genType_Nanoseconds_params{}
	var results *MoqDuration_genType_Nanoseconds_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Nanoseconds {
		paramsKey := m.Moq.ParamsKey_Nanoseconds(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Nanoseconds(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Nanoseconds(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Nanoseconds(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqDuration_genType_mock) Microseconds() (result1 int64) {
	m.Moq.Scene.T.Helper()
	params := MoqDuration_genType_Microseconds_params{}
	var results *MoqDuration_genType_Microseconds_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Microseconds {
		paramsKey := m.Moq.ParamsKey_Microseconds(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Microseconds(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Microseconds(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Microseconds(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqDuration_genType_mock) Milliseconds() (result1 int64) {
	m.Moq.Scene.T.Helper()
	params := MoqDuration_genType_Milliseconds_params{}
	var results *MoqDuration_genType_Milliseconds_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Milliseconds {
		paramsKey := m.Moq.ParamsKey_Milliseconds(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Milliseconds(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Milliseconds(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Milliseconds(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqDuration_genType_mock) Seconds() (result1 float64) {
	m.Moq.Scene.T.Helper()
	params := MoqDuration_genType_Seconds_params{}
	var results *MoqDuration_genType_Seconds_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Seconds {
		paramsKey := m.Moq.ParamsKey_Seconds(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Seconds(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Seconds(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Seconds(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqDuration_genType_mock) Minutes() (result1 float64) {
	m.Moq.Scene.T.Helper()
	params := MoqDuration_genType_Minutes_params{}
	var results *MoqDuration_genType_Minutes_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Minutes {
		paramsKey := m.Moq.ParamsKey_Minutes(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Minutes(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Minutes(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Minutes(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqDuration_genType_mock) Hours() (result1 float64) {
	m.Moq.Scene.T.Helper()
	params := MoqDuration_genType_Hours_params{}
	var results *MoqDuration_genType_Hours_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Hours {
		paramsKey := m.Moq.ParamsKey_Hours(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Hours(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Hours(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Hours(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqDuration_genType_mock) Truncate(param1 time.Duration) (result1 time.Duration) {
	m.Moq.Scene.T.Helper()
	params := MoqDuration_genType_Truncate_params{
		Param1: param1,
	}
	var results *MoqDuration_genType_Truncate_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Truncate {
		paramsKey := m.Moq.ParamsKey_Truncate(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Truncate(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Truncate(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Truncate(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqDuration_genType_mock) Round(param1 time.Duration) (result1 time.Duration) {
	m.Moq.Scene.T.Helper()
	params := MoqDuration_genType_Round_params{
		Param1: param1,
	}
	var results *MoqDuration_genType_Round_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Round {
		paramsKey := m.Moq.ParamsKey_Round(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Round(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Round(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Round(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

// OnCall returns the recorder implementation of the Duration_genType type
func (m *MoqDuration_genType) OnCall() *MoqDuration_genType_recorder {
	return &MoqDuration_genType_recorder{
		Moq: m,
	}
}

func (m *MoqDuration_genType_recorder) String() *MoqDuration_genType_String_fnRecorder {
	return &MoqDuration_genType_String_fnRecorder{
		Params:   MoqDuration_genType_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDuration_genType_String_fnRecorder) Any() *MoqDuration_genType_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqDuration_genType_String_anyParams{Recorder: r}
}

func (r *MoqDuration_genType_String_fnRecorder) Seq() *MoqDuration_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDuration_genType_String_fnRecorder) NoSeq() *MoqDuration_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDuration_genType_String_fnRecorder) ReturnResults(result1 string) *MoqDuration_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_String_doFn
		DoReturnFn MoqDuration_genType_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDuration_genType_String_fnRecorder) AndDo(fn MoqDuration_genType_String_doFn) *MoqDuration_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDuration_genType_String_fnRecorder) DoReturnResults(fn MoqDuration_genType_String_doReturnFn) *MoqDuration_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_String_doFn
		DoReturnFn MoqDuration_genType_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDuration_genType_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDuration_genType_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDuration_genType_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDuration_genType_String_paramsKey]*MoqDuration_genType_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDuration_genType_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDuration_genType_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDuration_genType_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqDuration_genType_String_doFn
				DoReturnFn MoqDuration_genType_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDuration_genType) PrettyParams_String(params MoqDuration_genType_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqDuration_genType) ParamsKey_String(params MoqDuration_genType_String_params, anyParams uint64) MoqDuration_genType_String_paramsKey {
	m.Scene.T.Helper()
	return MoqDuration_genType_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqDuration_genType_recorder) Nanoseconds() *MoqDuration_genType_Nanoseconds_fnRecorder {
	return &MoqDuration_genType_Nanoseconds_fnRecorder{
		Params:   MoqDuration_genType_Nanoseconds_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDuration_genType_Nanoseconds_fnRecorder) Any() *MoqDuration_genType_Nanoseconds_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Nanoseconds(r.Params))
		return nil
	}
	return &MoqDuration_genType_Nanoseconds_anyParams{Recorder: r}
}

func (r *MoqDuration_genType_Nanoseconds_fnRecorder) Seq() *MoqDuration_genType_Nanoseconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Nanoseconds(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDuration_genType_Nanoseconds_fnRecorder) NoSeq() *MoqDuration_genType_Nanoseconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Nanoseconds(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDuration_genType_Nanoseconds_fnRecorder) ReturnResults(result1 int64) *MoqDuration_genType_Nanoseconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Nanoseconds_doFn
		DoReturnFn MoqDuration_genType_Nanoseconds_doReturnFn
	}{
		Values: &struct {
			Result1 int64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDuration_genType_Nanoseconds_fnRecorder) AndDo(fn MoqDuration_genType_Nanoseconds_doFn) *MoqDuration_genType_Nanoseconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDuration_genType_Nanoseconds_fnRecorder) DoReturnResults(fn MoqDuration_genType_Nanoseconds_doReturnFn) *MoqDuration_genType_Nanoseconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Nanoseconds_doFn
		DoReturnFn MoqDuration_genType_Nanoseconds_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDuration_genType_Nanoseconds_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDuration_genType_Nanoseconds_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Nanoseconds {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDuration_genType_Nanoseconds_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDuration_genType_Nanoseconds_paramsKey]*MoqDuration_genType_Nanoseconds_results{},
		}
		r.Moq.ResultsByParams_Nanoseconds = append(r.Moq.ResultsByParams_Nanoseconds, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Nanoseconds) {
			copy(r.Moq.ResultsByParams_Nanoseconds[insertAt+1:], r.Moq.ResultsByParams_Nanoseconds[insertAt:0])
			r.Moq.ResultsByParams_Nanoseconds[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Nanoseconds(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDuration_genType_Nanoseconds_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDuration_genType_Nanoseconds_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDuration_genType_Nanoseconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int64
				}
				Sequence   uint32
				DoFn       MoqDuration_genType_Nanoseconds_doFn
				DoReturnFn MoqDuration_genType_Nanoseconds_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDuration_genType) PrettyParams_Nanoseconds(params MoqDuration_genType_Nanoseconds_params) string {
	return fmt.Sprintf("Nanoseconds()")
}

func (m *MoqDuration_genType) ParamsKey_Nanoseconds(params MoqDuration_genType_Nanoseconds_params, anyParams uint64) MoqDuration_genType_Nanoseconds_paramsKey {
	m.Scene.T.Helper()
	return MoqDuration_genType_Nanoseconds_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqDuration_genType_recorder) Microseconds() *MoqDuration_genType_Microseconds_fnRecorder {
	return &MoqDuration_genType_Microseconds_fnRecorder{
		Params:   MoqDuration_genType_Microseconds_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDuration_genType_Microseconds_fnRecorder) Any() *MoqDuration_genType_Microseconds_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Microseconds(r.Params))
		return nil
	}
	return &MoqDuration_genType_Microseconds_anyParams{Recorder: r}
}

func (r *MoqDuration_genType_Microseconds_fnRecorder) Seq() *MoqDuration_genType_Microseconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Microseconds(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDuration_genType_Microseconds_fnRecorder) NoSeq() *MoqDuration_genType_Microseconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Microseconds(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDuration_genType_Microseconds_fnRecorder) ReturnResults(result1 int64) *MoqDuration_genType_Microseconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Microseconds_doFn
		DoReturnFn MoqDuration_genType_Microseconds_doReturnFn
	}{
		Values: &struct {
			Result1 int64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDuration_genType_Microseconds_fnRecorder) AndDo(fn MoqDuration_genType_Microseconds_doFn) *MoqDuration_genType_Microseconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDuration_genType_Microseconds_fnRecorder) DoReturnResults(fn MoqDuration_genType_Microseconds_doReturnFn) *MoqDuration_genType_Microseconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Microseconds_doFn
		DoReturnFn MoqDuration_genType_Microseconds_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDuration_genType_Microseconds_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDuration_genType_Microseconds_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Microseconds {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDuration_genType_Microseconds_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDuration_genType_Microseconds_paramsKey]*MoqDuration_genType_Microseconds_results{},
		}
		r.Moq.ResultsByParams_Microseconds = append(r.Moq.ResultsByParams_Microseconds, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Microseconds) {
			copy(r.Moq.ResultsByParams_Microseconds[insertAt+1:], r.Moq.ResultsByParams_Microseconds[insertAt:0])
			r.Moq.ResultsByParams_Microseconds[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Microseconds(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDuration_genType_Microseconds_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDuration_genType_Microseconds_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDuration_genType_Microseconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int64
				}
				Sequence   uint32
				DoFn       MoqDuration_genType_Microseconds_doFn
				DoReturnFn MoqDuration_genType_Microseconds_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDuration_genType) PrettyParams_Microseconds(params MoqDuration_genType_Microseconds_params) string {
	return fmt.Sprintf("Microseconds()")
}

func (m *MoqDuration_genType) ParamsKey_Microseconds(params MoqDuration_genType_Microseconds_params, anyParams uint64) MoqDuration_genType_Microseconds_paramsKey {
	m.Scene.T.Helper()
	return MoqDuration_genType_Microseconds_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqDuration_genType_recorder) Milliseconds() *MoqDuration_genType_Milliseconds_fnRecorder {
	return &MoqDuration_genType_Milliseconds_fnRecorder{
		Params:   MoqDuration_genType_Milliseconds_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDuration_genType_Milliseconds_fnRecorder) Any() *MoqDuration_genType_Milliseconds_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Milliseconds(r.Params))
		return nil
	}
	return &MoqDuration_genType_Milliseconds_anyParams{Recorder: r}
}

func (r *MoqDuration_genType_Milliseconds_fnRecorder) Seq() *MoqDuration_genType_Milliseconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Milliseconds(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDuration_genType_Milliseconds_fnRecorder) NoSeq() *MoqDuration_genType_Milliseconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Milliseconds(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDuration_genType_Milliseconds_fnRecorder) ReturnResults(result1 int64) *MoqDuration_genType_Milliseconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Milliseconds_doFn
		DoReturnFn MoqDuration_genType_Milliseconds_doReturnFn
	}{
		Values: &struct {
			Result1 int64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDuration_genType_Milliseconds_fnRecorder) AndDo(fn MoqDuration_genType_Milliseconds_doFn) *MoqDuration_genType_Milliseconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDuration_genType_Milliseconds_fnRecorder) DoReturnResults(fn MoqDuration_genType_Milliseconds_doReturnFn) *MoqDuration_genType_Milliseconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Milliseconds_doFn
		DoReturnFn MoqDuration_genType_Milliseconds_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDuration_genType_Milliseconds_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDuration_genType_Milliseconds_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Milliseconds {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDuration_genType_Milliseconds_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDuration_genType_Milliseconds_paramsKey]*MoqDuration_genType_Milliseconds_results{},
		}
		r.Moq.ResultsByParams_Milliseconds = append(r.Moq.ResultsByParams_Milliseconds, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Milliseconds) {
			copy(r.Moq.ResultsByParams_Milliseconds[insertAt+1:], r.Moq.ResultsByParams_Milliseconds[insertAt:0])
			r.Moq.ResultsByParams_Milliseconds[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Milliseconds(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDuration_genType_Milliseconds_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDuration_genType_Milliseconds_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDuration_genType_Milliseconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int64
				}
				Sequence   uint32
				DoFn       MoqDuration_genType_Milliseconds_doFn
				DoReturnFn MoqDuration_genType_Milliseconds_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDuration_genType) PrettyParams_Milliseconds(params MoqDuration_genType_Milliseconds_params) string {
	return fmt.Sprintf("Milliseconds()")
}

func (m *MoqDuration_genType) ParamsKey_Milliseconds(params MoqDuration_genType_Milliseconds_params, anyParams uint64) MoqDuration_genType_Milliseconds_paramsKey {
	m.Scene.T.Helper()
	return MoqDuration_genType_Milliseconds_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqDuration_genType_recorder) Seconds() *MoqDuration_genType_Seconds_fnRecorder {
	return &MoqDuration_genType_Seconds_fnRecorder{
		Params:   MoqDuration_genType_Seconds_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDuration_genType_Seconds_fnRecorder) Any() *MoqDuration_genType_Seconds_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seconds(r.Params))
		return nil
	}
	return &MoqDuration_genType_Seconds_anyParams{Recorder: r}
}

func (r *MoqDuration_genType_Seconds_fnRecorder) Seq() *MoqDuration_genType_Seconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seconds(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDuration_genType_Seconds_fnRecorder) NoSeq() *MoqDuration_genType_Seconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seconds(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDuration_genType_Seconds_fnRecorder) ReturnResults(result1 float64) *MoqDuration_genType_Seconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Seconds_doFn
		DoReturnFn MoqDuration_genType_Seconds_doReturnFn
	}{
		Values: &struct {
			Result1 float64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDuration_genType_Seconds_fnRecorder) AndDo(fn MoqDuration_genType_Seconds_doFn) *MoqDuration_genType_Seconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDuration_genType_Seconds_fnRecorder) DoReturnResults(fn MoqDuration_genType_Seconds_doReturnFn) *MoqDuration_genType_Seconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Seconds_doFn
		DoReturnFn MoqDuration_genType_Seconds_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDuration_genType_Seconds_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDuration_genType_Seconds_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Seconds {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDuration_genType_Seconds_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDuration_genType_Seconds_paramsKey]*MoqDuration_genType_Seconds_results{},
		}
		r.Moq.ResultsByParams_Seconds = append(r.Moq.ResultsByParams_Seconds, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Seconds) {
			copy(r.Moq.ResultsByParams_Seconds[insertAt+1:], r.Moq.ResultsByParams_Seconds[insertAt:0])
			r.Moq.ResultsByParams_Seconds[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Seconds(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDuration_genType_Seconds_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDuration_genType_Seconds_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDuration_genType_Seconds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 float64
				}
				Sequence   uint32
				DoFn       MoqDuration_genType_Seconds_doFn
				DoReturnFn MoqDuration_genType_Seconds_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDuration_genType) PrettyParams_Seconds(params MoqDuration_genType_Seconds_params) string {
	return fmt.Sprintf("Seconds()")
}

func (m *MoqDuration_genType) ParamsKey_Seconds(params MoqDuration_genType_Seconds_params, anyParams uint64) MoqDuration_genType_Seconds_paramsKey {
	m.Scene.T.Helper()
	return MoqDuration_genType_Seconds_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqDuration_genType_recorder) Minutes() *MoqDuration_genType_Minutes_fnRecorder {
	return &MoqDuration_genType_Minutes_fnRecorder{
		Params:   MoqDuration_genType_Minutes_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDuration_genType_Minutes_fnRecorder) Any() *MoqDuration_genType_Minutes_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Minutes(r.Params))
		return nil
	}
	return &MoqDuration_genType_Minutes_anyParams{Recorder: r}
}

func (r *MoqDuration_genType_Minutes_fnRecorder) Seq() *MoqDuration_genType_Minutes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Minutes(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDuration_genType_Minutes_fnRecorder) NoSeq() *MoqDuration_genType_Minutes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Minutes(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDuration_genType_Minutes_fnRecorder) ReturnResults(result1 float64) *MoqDuration_genType_Minutes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Minutes_doFn
		DoReturnFn MoqDuration_genType_Minutes_doReturnFn
	}{
		Values: &struct {
			Result1 float64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDuration_genType_Minutes_fnRecorder) AndDo(fn MoqDuration_genType_Minutes_doFn) *MoqDuration_genType_Minutes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDuration_genType_Minutes_fnRecorder) DoReturnResults(fn MoqDuration_genType_Minutes_doReturnFn) *MoqDuration_genType_Minutes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Minutes_doFn
		DoReturnFn MoqDuration_genType_Minutes_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDuration_genType_Minutes_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDuration_genType_Minutes_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Minutes {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDuration_genType_Minutes_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDuration_genType_Minutes_paramsKey]*MoqDuration_genType_Minutes_results{},
		}
		r.Moq.ResultsByParams_Minutes = append(r.Moq.ResultsByParams_Minutes, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Minutes) {
			copy(r.Moq.ResultsByParams_Minutes[insertAt+1:], r.Moq.ResultsByParams_Minutes[insertAt:0])
			r.Moq.ResultsByParams_Minutes[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Minutes(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDuration_genType_Minutes_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDuration_genType_Minutes_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDuration_genType_Minutes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 float64
				}
				Sequence   uint32
				DoFn       MoqDuration_genType_Minutes_doFn
				DoReturnFn MoqDuration_genType_Minutes_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDuration_genType) PrettyParams_Minutes(params MoqDuration_genType_Minutes_params) string {
	return fmt.Sprintf("Minutes()")
}

func (m *MoqDuration_genType) ParamsKey_Minutes(params MoqDuration_genType_Minutes_params, anyParams uint64) MoqDuration_genType_Minutes_paramsKey {
	m.Scene.T.Helper()
	return MoqDuration_genType_Minutes_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqDuration_genType_recorder) Hours() *MoqDuration_genType_Hours_fnRecorder {
	return &MoqDuration_genType_Hours_fnRecorder{
		Params:   MoqDuration_genType_Hours_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDuration_genType_Hours_fnRecorder) Any() *MoqDuration_genType_Hours_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Hours(r.Params))
		return nil
	}
	return &MoqDuration_genType_Hours_anyParams{Recorder: r}
}

func (r *MoqDuration_genType_Hours_fnRecorder) Seq() *MoqDuration_genType_Hours_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Hours(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDuration_genType_Hours_fnRecorder) NoSeq() *MoqDuration_genType_Hours_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Hours(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDuration_genType_Hours_fnRecorder) ReturnResults(result1 float64) *MoqDuration_genType_Hours_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Hours_doFn
		DoReturnFn MoqDuration_genType_Hours_doReturnFn
	}{
		Values: &struct {
			Result1 float64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDuration_genType_Hours_fnRecorder) AndDo(fn MoqDuration_genType_Hours_doFn) *MoqDuration_genType_Hours_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDuration_genType_Hours_fnRecorder) DoReturnResults(fn MoqDuration_genType_Hours_doReturnFn) *MoqDuration_genType_Hours_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Hours_doFn
		DoReturnFn MoqDuration_genType_Hours_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDuration_genType_Hours_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDuration_genType_Hours_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Hours {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDuration_genType_Hours_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDuration_genType_Hours_paramsKey]*MoqDuration_genType_Hours_results{},
		}
		r.Moq.ResultsByParams_Hours = append(r.Moq.ResultsByParams_Hours, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Hours) {
			copy(r.Moq.ResultsByParams_Hours[insertAt+1:], r.Moq.ResultsByParams_Hours[insertAt:0])
			r.Moq.ResultsByParams_Hours[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Hours(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDuration_genType_Hours_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDuration_genType_Hours_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDuration_genType_Hours_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 float64
				}
				Sequence   uint32
				DoFn       MoqDuration_genType_Hours_doFn
				DoReturnFn MoqDuration_genType_Hours_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDuration_genType) PrettyParams_Hours(params MoqDuration_genType_Hours_params) string {
	return fmt.Sprintf("Hours()")
}

func (m *MoqDuration_genType) ParamsKey_Hours(params MoqDuration_genType_Hours_params, anyParams uint64) MoqDuration_genType_Hours_paramsKey {
	m.Scene.T.Helper()
	return MoqDuration_genType_Hours_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqDuration_genType_recorder) Truncate(param1 time.Duration) *MoqDuration_genType_Truncate_fnRecorder {
	return &MoqDuration_genType_Truncate_fnRecorder{
		Params: MoqDuration_genType_Truncate_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDuration_genType_Truncate_fnRecorder) Any() *MoqDuration_genType_Truncate_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Truncate(r.Params))
		return nil
	}
	return &MoqDuration_genType_Truncate_anyParams{Recorder: r}
}

func (a *MoqDuration_genType_Truncate_anyParams) Param1() *MoqDuration_genType_Truncate_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqDuration_genType_Truncate_fnRecorder) Seq() *MoqDuration_genType_Truncate_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Truncate(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDuration_genType_Truncate_fnRecorder) NoSeq() *MoqDuration_genType_Truncate_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Truncate(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDuration_genType_Truncate_fnRecorder) ReturnResults(result1 time.Duration) *MoqDuration_genType_Truncate_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 time.Duration
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Truncate_doFn
		DoReturnFn MoqDuration_genType_Truncate_doReturnFn
	}{
		Values: &struct {
			Result1 time.Duration
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDuration_genType_Truncate_fnRecorder) AndDo(fn MoqDuration_genType_Truncate_doFn) *MoqDuration_genType_Truncate_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDuration_genType_Truncate_fnRecorder) DoReturnResults(fn MoqDuration_genType_Truncate_doReturnFn) *MoqDuration_genType_Truncate_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 time.Duration
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Truncate_doFn
		DoReturnFn MoqDuration_genType_Truncate_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDuration_genType_Truncate_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDuration_genType_Truncate_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Truncate {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDuration_genType_Truncate_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDuration_genType_Truncate_paramsKey]*MoqDuration_genType_Truncate_results{},
		}
		r.Moq.ResultsByParams_Truncate = append(r.Moq.ResultsByParams_Truncate, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Truncate) {
			copy(r.Moq.ResultsByParams_Truncate[insertAt+1:], r.Moq.ResultsByParams_Truncate[insertAt:0])
			r.Moq.ResultsByParams_Truncate[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Truncate(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDuration_genType_Truncate_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDuration_genType_Truncate_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDuration_genType_Truncate_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 time.Duration
				}
				Sequence   uint32
				DoFn       MoqDuration_genType_Truncate_doFn
				DoReturnFn MoqDuration_genType_Truncate_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDuration_genType) PrettyParams_Truncate(params MoqDuration_genType_Truncate_params) string {
	return fmt.Sprintf("Truncate(%#v)", params.Param1)
}

func (m *MoqDuration_genType) ParamsKey_Truncate(params MoqDuration_genType_Truncate_params, anyParams uint64) MoqDuration_genType_Truncate_paramsKey {
	m.Scene.T.Helper()
	var param1Used time.Duration
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Truncate.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqDuration_genType_Truncate_paramsKey{
		Params: struct{ Param1 time.Duration }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqDuration_genType_recorder) Round(param1 time.Duration) *MoqDuration_genType_Round_fnRecorder {
	return &MoqDuration_genType_Round_fnRecorder{
		Params: MoqDuration_genType_Round_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDuration_genType_Round_fnRecorder) Any() *MoqDuration_genType_Round_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Round(r.Params))
		return nil
	}
	return &MoqDuration_genType_Round_anyParams{Recorder: r}
}

func (a *MoqDuration_genType_Round_anyParams) Param1() *MoqDuration_genType_Round_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqDuration_genType_Round_fnRecorder) Seq() *MoqDuration_genType_Round_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Round(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDuration_genType_Round_fnRecorder) NoSeq() *MoqDuration_genType_Round_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Round(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDuration_genType_Round_fnRecorder) ReturnResults(result1 time.Duration) *MoqDuration_genType_Round_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 time.Duration
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Round_doFn
		DoReturnFn MoqDuration_genType_Round_doReturnFn
	}{
		Values: &struct {
			Result1 time.Duration
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDuration_genType_Round_fnRecorder) AndDo(fn MoqDuration_genType_Round_doFn) *MoqDuration_genType_Round_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDuration_genType_Round_fnRecorder) DoReturnResults(fn MoqDuration_genType_Round_doReturnFn) *MoqDuration_genType_Round_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 time.Duration
		}
		Sequence   uint32
		DoFn       MoqDuration_genType_Round_doFn
		DoReturnFn MoqDuration_genType_Round_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDuration_genType_Round_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDuration_genType_Round_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Round {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDuration_genType_Round_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDuration_genType_Round_paramsKey]*MoqDuration_genType_Round_results{},
		}
		r.Moq.ResultsByParams_Round = append(r.Moq.ResultsByParams_Round, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Round) {
			copy(r.Moq.ResultsByParams_Round[insertAt+1:], r.Moq.ResultsByParams_Round[insertAt:0])
			r.Moq.ResultsByParams_Round[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Round(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDuration_genType_Round_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDuration_genType_Round_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDuration_genType_Round_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 time.Duration
				}
				Sequence   uint32
				DoFn       MoqDuration_genType_Round_doFn
				DoReturnFn MoqDuration_genType_Round_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDuration_genType) PrettyParams_Round(params MoqDuration_genType_Round_params) string {
	return fmt.Sprintf("Round(%#v)", params.Param1)
}

func (m *MoqDuration_genType) ParamsKey_Round(params MoqDuration_genType_Round_params, anyParams uint64) MoqDuration_genType_Round_paramsKey {
	m.Scene.T.Helper()
	var param1Used time.Duration
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Round.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqDuration_genType_Round_paramsKey{
		Params: struct{ Param1 time.Duration }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqDuration_genType) Reset() {
	m.ResultsByParams_String = nil
	m.ResultsByParams_Nanoseconds = nil
	m.ResultsByParams_Microseconds = nil
	m.ResultsByParams_Milliseconds = nil
	m.ResultsByParams_Seconds = nil
	m.ResultsByParams_Minutes = nil
	m.ResultsByParams_Hours = nil
	m.ResultsByParams_Truncate = nil
	m.ResultsByParams_Round = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqDuration_genType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Nanoseconds {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Nanoseconds(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Microseconds {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Microseconds(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Milliseconds {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Milliseconds(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Seconds {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Seconds(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Minutes {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Minutes(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Hours {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Hours(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Truncate {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Truncate(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Round {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Round(results.Params))
			}
		}
	}
}
