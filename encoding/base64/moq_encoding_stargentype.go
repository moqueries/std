// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package base64

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that base64.Encoding_starGenType is
// mocked completely
var _ Encoding_starGenType = (*MoqEncoding_starGenType_mock)(nil)

// Encoding_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Encoding_starGenType interface {
	Encode(dst, src []byte)
	EncodeToString(src []byte) string
	EncodedLen(n int) int
	DecodeString(s string) ([]byte, error)
	Decode(dst, src []byte) (n int, err error)
	DecodedLen(n int) int
}

// MoqEncoding_starGenType holds the state of a moq of the Encoding_starGenType
// type
type MoqEncoding_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqEncoding_starGenType_mock

	ResultsByParams_Encode         []MoqEncoding_starGenType_Encode_resultsByParams
	ResultsByParams_EncodeToString []MoqEncoding_starGenType_EncodeToString_resultsByParams
	ResultsByParams_EncodedLen     []MoqEncoding_starGenType_EncodedLen_resultsByParams
	ResultsByParams_DecodeString   []MoqEncoding_starGenType_DecodeString_resultsByParams
	ResultsByParams_Decode         []MoqEncoding_starGenType_Decode_resultsByParams
	ResultsByParams_DecodedLen     []MoqEncoding_starGenType_DecodedLen_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Encode struct {
				Dst moq.ParamIndexing
				Src moq.ParamIndexing
			}
			EncodeToString struct {
				Src moq.ParamIndexing
			}
			EncodedLen struct {
				N moq.ParamIndexing
			}
			DecodeString struct {
				S moq.ParamIndexing
			}
			Decode struct {
				Dst moq.ParamIndexing
				Src moq.ParamIndexing
			}
			DecodedLen struct {
				N moq.ParamIndexing
			}
		}
	}
	// MoqEncoding_starGenType_mock isolates the mock interface of the
}

// Encoding_starGenType type
type MoqEncoding_starGenType_mock struct {
	Moq *MoqEncoding_starGenType
}

// MoqEncoding_starGenType_recorder isolates the recorder interface of the
// Encoding_starGenType type
type MoqEncoding_starGenType_recorder struct {
	Moq *MoqEncoding_starGenType
}

// MoqEncoding_starGenType_Encode_params holds the params of the
// Encoding_starGenType type
type MoqEncoding_starGenType_Encode_params struct{ Dst, Src []byte }

// MoqEncoding_starGenType_Encode_paramsKey holds the map key params of the
// Encoding_starGenType type
type MoqEncoding_starGenType_Encode_paramsKey struct {
	Params struct{}
	Hashes struct{ Dst, Src hash.Hash }
}

// MoqEncoding_starGenType_Encode_resultsByParams contains the results for a
// given set of parameters for the Encoding_starGenType type
type MoqEncoding_starGenType_Encode_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqEncoding_starGenType_Encode_paramsKey]*MoqEncoding_starGenType_Encode_results
}

// MoqEncoding_starGenType_Encode_doFn defines the type of function needed when
// calling AndDo for the Encoding_starGenType type
type MoqEncoding_starGenType_Encode_doFn func(dst, src []byte)

// MoqEncoding_starGenType_Encode_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Encoding_starGenType type
type MoqEncoding_starGenType_Encode_doReturnFn func(dst, src []byte)

// MoqEncoding_starGenType_Encode_results holds the results of the
// Encoding_starGenType type
type MoqEncoding_starGenType_Encode_results struct {
	Params  MoqEncoding_starGenType_Encode_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqEncoding_starGenType_Encode_doFn
		DoReturnFn MoqEncoding_starGenType_Encode_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqEncoding_starGenType_Encode_fnRecorder routes recorded function calls to
// the MoqEncoding_starGenType moq
type MoqEncoding_starGenType_Encode_fnRecorder struct {
	Params    MoqEncoding_starGenType_Encode_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqEncoding_starGenType_Encode_results
	Moq       *MoqEncoding_starGenType
}

// MoqEncoding_starGenType_Encode_anyParams isolates the any params functions
// of the Encoding_starGenType type
type MoqEncoding_starGenType_Encode_anyParams struct {
	Recorder *MoqEncoding_starGenType_Encode_fnRecorder
}

// MoqEncoding_starGenType_EncodeToString_params holds the params of the
// Encoding_starGenType type
type MoqEncoding_starGenType_EncodeToString_params struct{ Src []byte }

// MoqEncoding_starGenType_EncodeToString_paramsKey holds the map key params of
// the Encoding_starGenType type
type MoqEncoding_starGenType_EncodeToString_paramsKey struct {
	Params struct{}
	Hashes struct{ Src hash.Hash }
}

// MoqEncoding_starGenType_EncodeToString_resultsByParams contains the results
// for a given set of parameters for the Encoding_starGenType type
type MoqEncoding_starGenType_EncodeToString_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqEncoding_starGenType_EncodeToString_paramsKey]*MoqEncoding_starGenType_EncodeToString_results
}

// MoqEncoding_starGenType_EncodeToString_doFn defines the type of function
// needed when calling AndDo for the Encoding_starGenType type
type MoqEncoding_starGenType_EncodeToString_doFn func(src []byte)

// MoqEncoding_starGenType_EncodeToString_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Encoding_starGenType
// type
type MoqEncoding_starGenType_EncodeToString_doReturnFn func(src []byte) string

// MoqEncoding_starGenType_EncodeToString_results holds the results of the
// Encoding_starGenType type
type MoqEncoding_starGenType_EncodeToString_results struct {
	Params  MoqEncoding_starGenType_EncodeToString_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqEncoding_starGenType_EncodeToString_doFn
		DoReturnFn MoqEncoding_starGenType_EncodeToString_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqEncoding_starGenType_EncodeToString_fnRecorder routes recorded function
// calls to the MoqEncoding_starGenType moq
type MoqEncoding_starGenType_EncodeToString_fnRecorder struct {
	Params    MoqEncoding_starGenType_EncodeToString_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqEncoding_starGenType_EncodeToString_results
	Moq       *MoqEncoding_starGenType
}

// MoqEncoding_starGenType_EncodeToString_anyParams isolates the any params
// functions of the Encoding_starGenType type
type MoqEncoding_starGenType_EncodeToString_anyParams struct {
	Recorder *MoqEncoding_starGenType_EncodeToString_fnRecorder
}

// MoqEncoding_starGenType_EncodedLen_params holds the params of the
// Encoding_starGenType type
type MoqEncoding_starGenType_EncodedLen_params struct{ N int }

// MoqEncoding_starGenType_EncodedLen_paramsKey holds the map key params of the
// Encoding_starGenType type
type MoqEncoding_starGenType_EncodedLen_paramsKey struct {
	Params struct{ N int }
	Hashes struct{ N hash.Hash }
}

// MoqEncoding_starGenType_EncodedLen_resultsByParams contains the results for
// a given set of parameters for the Encoding_starGenType type
type MoqEncoding_starGenType_EncodedLen_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqEncoding_starGenType_EncodedLen_paramsKey]*MoqEncoding_starGenType_EncodedLen_results
}

// MoqEncoding_starGenType_EncodedLen_doFn defines the type of function needed
// when calling AndDo for the Encoding_starGenType type
type MoqEncoding_starGenType_EncodedLen_doFn func(n int)

// MoqEncoding_starGenType_EncodedLen_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Encoding_starGenType type
type MoqEncoding_starGenType_EncodedLen_doReturnFn func(n int) int

// MoqEncoding_starGenType_EncodedLen_results holds the results of the
// Encoding_starGenType type
type MoqEncoding_starGenType_EncodedLen_results struct {
	Params  MoqEncoding_starGenType_EncodedLen_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqEncoding_starGenType_EncodedLen_doFn
		DoReturnFn MoqEncoding_starGenType_EncodedLen_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqEncoding_starGenType_EncodedLen_fnRecorder routes recorded function calls
// to the MoqEncoding_starGenType moq
type MoqEncoding_starGenType_EncodedLen_fnRecorder struct {
	Params    MoqEncoding_starGenType_EncodedLen_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqEncoding_starGenType_EncodedLen_results
	Moq       *MoqEncoding_starGenType
}

// MoqEncoding_starGenType_EncodedLen_anyParams isolates the any params
// functions of the Encoding_starGenType type
type MoqEncoding_starGenType_EncodedLen_anyParams struct {
	Recorder *MoqEncoding_starGenType_EncodedLen_fnRecorder
}

// MoqEncoding_starGenType_DecodeString_params holds the params of the
// Encoding_starGenType type
type MoqEncoding_starGenType_DecodeString_params struct{ S string }

// MoqEncoding_starGenType_DecodeString_paramsKey holds the map key params of
// the Encoding_starGenType type
type MoqEncoding_starGenType_DecodeString_paramsKey struct {
	Params struct{ S string }
	Hashes struct{ S hash.Hash }
}

// MoqEncoding_starGenType_DecodeString_resultsByParams contains the results
// for a given set of parameters for the Encoding_starGenType type
type MoqEncoding_starGenType_DecodeString_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqEncoding_starGenType_DecodeString_paramsKey]*MoqEncoding_starGenType_DecodeString_results
}

// MoqEncoding_starGenType_DecodeString_doFn defines the type of function
// needed when calling AndDo for the Encoding_starGenType type
type MoqEncoding_starGenType_DecodeString_doFn func(s string)

// MoqEncoding_starGenType_DecodeString_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Encoding_starGenType type
type MoqEncoding_starGenType_DecodeString_doReturnFn func(s string) ([]byte, error)

// MoqEncoding_starGenType_DecodeString_results holds the results of the
// Encoding_starGenType type
type MoqEncoding_starGenType_DecodeString_results struct {
	Params  MoqEncoding_starGenType_DecodeString_params
	Results []struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqEncoding_starGenType_DecodeString_doFn
		DoReturnFn MoqEncoding_starGenType_DecodeString_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqEncoding_starGenType_DecodeString_fnRecorder routes recorded function
// calls to the MoqEncoding_starGenType moq
type MoqEncoding_starGenType_DecodeString_fnRecorder struct {
	Params    MoqEncoding_starGenType_DecodeString_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqEncoding_starGenType_DecodeString_results
	Moq       *MoqEncoding_starGenType
}

// MoqEncoding_starGenType_DecodeString_anyParams isolates the any params
// functions of the Encoding_starGenType type
type MoqEncoding_starGenType_DecodeString_anyParams struct {
	Recorder *MoqEncoding_starGenType_DecodeString_fnRecorder
}

// MoqEncoding_starGenType_Decode_params holds the params of the
// Encoding_starGenType type
type MoqEncoding_starGenType_Decode_params struct{ Dst, Src []byte }

// MoqEncoding_starGenType_Decode_paramsKey holds the map key params of the
// Encoding_starGenType type
type MoqEncoding_starGenType_Decode_paramsKey struct {
	Params struct{}
	Hashes struct{ Dst, Src hash.Hash }
}

// MoqEncoding_starGenType_Decode_resultsByParams contains the results for a
// given set of parameters for the Encoding_starGenType type
type MoqEncoding_starGenType_Decode_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqEncoding_starGenType_Decode_paramsKey]*MoqEncoding_starGenType_Decode_results
}

// MoqEncoding_starGenType_Decode_doFn defines the type of function needed when
// calling AndDo for the Encoding_starGenType type
type MoqEncoding_starGenType_Decode_doFn func(dst, src []byte)

// MoqEncoding_starGenType_Decode_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Encoding_starGenType type
type MoqEncoding_starGenType_Decode_doReturnFn func(dst, src []byte) (n int, err error)

// MoqEncoding_starGenType_Decode_results holds the results of the
// Encoding_starGenType type
type MoqEncoding_starGenType_Decode_results struct {
	Params  MoqEncoding_starGenType_Decode_params
	Results []struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqEncoding_starGenType_Decode_doFn
		DoReturnFn MoqEncoding_starGenType_Decode_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqEncoding_starGenType_Decode_fnRecorder routes recorded function calls to
// the MoqEncoding_starGenType moq
type MoqEncoding_starGenType_Decode_fnRecorder struct {
	Params    MoqEncoding_starGenType_Decode_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqEncoding_starGenType_Decode_results
	Moq       *MoqEncoding_starGenType
}

// MoqEncoding_starGenType_Decode_anyParams isolates the any params functions
// of the Encoding_starGenType type
type MoqEncoding_starGenType_Decode_anyParams struct {
	Recorder *MoqEncoding_starGenType_Decode_fnRecorder
}

// MoqEncoding_starGenType_DecodedLen_params holds the params of the
// Encoding_starGenType type
type MoqEncoding_starGenType_DecodedLen_params struct{ N int }

// MoqEncoding_starGenType_DecodedLen_paramsKey holds the map key params of the
// Encoding_starGenType type
type MoqEncoding_starGenType_DecodedLen_paramsKey struct {
	Params struct{ N int }
	Hashes struct{ N hash.Hash }
}

// MoqEncoding_starGenType_DecodedLen_resultsByParams contains the results for
// a given set of parameters for the Encoding_starGenType type
type MoqEncoding_starGenType_DecodedLen_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqEncoding_starGenType_DecodedLen_paramsKey]*MoqEncoding_starGenType_DecodedLen_results
}

// MoqEncoding_starGenType_DecodedLen_doFn defines the type of function needed
// when calling AndDo for the Encoding_starGenType type
type MoqEncoding_starGenType_DecodedLen_doFn func(n int)

// MoqEncoding_starGenType_DecodedLen_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Encoding_starGenType type
type MoqEncoding_starGenType_DecodedLen_doReturnFn func(n int) int

// MoqEncoding_starGenType_DecodedLen_results holds the results of the
// Encoding_starGenType type
type MoqEncoding_starGenType_DecodedLen_results struct {
	Params  MoqEncoding_starGenType_DecodedLen_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqEncoding_starGenType_DecodedLen_doFn
		DoReturnFn MoqEncoding_starGenType_DecodedLen_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqEncoding_starGenType_DecodedLen_fnRecorder routes recorded function calls
// to the MoqEncoding_starGenType moq
type MoqEncoding_starGenType_DecodedLen_fnRecorder struct {
	Params    MoqEncoding_starGenType_DecodedLen_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqEncoding_starGenType_DecodedLen_results
	Moq       *MoqEncoding_starGenType
}

// MoqEncoding_starGenType_DecodedLen_anyParams isolates the any params
// functions of the Encoding_starGenType type
type MoqEncoding_starGenType_DecodedLen_anyParams struct {
	Recorder *MoqEncoding_starGenType_DecodedLen_fnRecorder
}

// NewMoqEncoding_starGenType creates a new moq of the Encoding_starGenType
// type
func NewMoqEncoding_starGenType(scene *moq.Scene, config *moq.Config) *MoqEncoding_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqEncoding_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqEncoding_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Encode struct {
					Dst moq.ParamIndexing
					Src moq.ParamIndexing
				}
				EncodeToString struct {
					Src moq.ParamIndexing
				}
				EncodedLen struct {
					N moq.ParamIndexing
				}
				DecodeString struct {
					S moq.ParamIndexing
				}
				Decode struct {
					Dst moq.ParamIndexing
					Src moq.ParamIndexing
				}
				DecodedLen struct {
					N moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Encode struct {
				Dst moq.ParamIndexing
				Src moq.ParamIndexing
			}
			EncodeToString struct {
				Src moq.ParamIndexing
			}
			EncodedLen struct {
				N moq.ParamIndexing
			}
			DecodeString struct {
				S moq.ParamIndexing
			}
			Decode struct {
				Dst moq.ParamIndexing
				Src moq.ParamIndexing
			}
			DecodedLen struct {
				N moq.ParamIndexing
			}
		}{
			Encode: struct {
				Dst moq.ParamIndexing
				Src moq.ParamIndexing
			}{
				Dst: moq.ParamIndexByHash,
				Src: moq.ParamIndexByHash,
			},
			EncodeToString: struct {
				Src moq.ParamIndexing
			}{
				Src: moq.ParamIndexByHash,
			},
			EncodedLen: struct {
				N moq.ParamIndexing
			}{
				N: moq.ParamIndexByValue,
			},
			DecodeString: struct {
				S moq.ParamIndexing
			}{
				S: moq.ParamIndexByValue,
			},
			Decode: struct {
				Dst moq.ParamIndexing
				Src moq.ParamIndexing
			}{
				Dst: moq.ParamIndexByHash,
				Src: moq.ParamIndexByHash,
			},
			DecodedLen: struct {
				N moq.ParamIndexing
			}{
				N: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Encoding_starGenType type
func (m *MoqEncoding_starGenType) Mock() *MoqEncoding_starGenType_mock { return m.Moq }

func (m *MoqEncoding_starGenType_mock) Encode(dst, src []byte) {
	m.Moq.Scene.T.Helper()
	params := MoqEncoding_starGenType_Encode_params{
		Dst: dst,
		Src: src,
	}
	var results *MoqEncoding_starGenType_Encode_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Encode {
		paramsKey := m.Moq.ParamsKey_Encode(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Encode(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Encode(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Encode(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(dst, src)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(dst, src)
	}
	return
}

func (m *MoqEncoding_starGenType_mock) EncodeToString(src []byte) (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqEncoding_starGenType_EncodeToString_params{
		Src: src,
	}
	var results *MoqEncoding_starGenType_EncodeToString_results
	for _, resultsByParams := range m.Moq.ResultsByParams_EncodeToString {
		paramsKey := m.Moq.ParamsKey_EncodeToString(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_EncodeToString(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_EncodeToString(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_EncodeToString(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(src)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(src)
	}
	return
}

func (m *MoqEncoding_starGenType_mock) EncodedLen(n int) (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqEncoding_starGenType_EncodedLen_params{
		N: n,
	}
	var results *MoqEncoding_starGenType_EncodedLen_results
	for _, resultsByParams := range m.Moq.ResultsByParams_EncodedLen {
		paramsKey := m.Moq.ParamsKey_EncodedLen(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_EncodedLen(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_EncodedLen(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_EncodedLen(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(n)
	}
	return
}

func (m *MoqEncoding_starGenType_mock) DecodeString(s string) (result1 []byte, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqEncoding_starGenType_DecodeString_params{
		S: s,
	}
	var results *MoqEncoding_starGenType_DecodeString_results
	for _, resultsByParams := range m.Moq.ResultsByParams_DecodeString {
		paramsKey := m.Moq.ParamsKey_DecodeString(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_DecodeString(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_DecodeString(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_DecodeString(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(s)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(s)
	}
	return
}

func (m *MoqEncoding_starGenType_mock) Decode(dst, src []byte) (n int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqEncoding_starGenType_Decode_params{
		Dst: dst,
		Src: src,
	}
	var results *MoqEncoding_starGenType_Decode_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Decode {
		paramsKey := m.Moq.ParamsKey_Decode(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Decode(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Decode(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Decode(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(dst, src)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(dst, src)
	}
	return
}

func (m *MoqEncoding_starGenType_mock) DecodedLen(n int) (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqEncoding_starGenType_DecodedLen_params{
		N: n,
	}
	var results *MoqEncoding_starGenType_DecodedLen_results
	for _, resultsByParams := range m.Moq.ResultsByParams_DecodedLen {
		paramsKey := m.Moq.ParamsKey_DecodedLen(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_DecodedLen(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_DecodedLen(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_DecodedLen(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(n)
	}
	return
}

// OnCall returns the recorder implementation of the Encoding_starGenType type
func (m *MoqEncoding_starGenType) OnCall() *MoqEncoding_starGenType_recorder {
	return &MoqEncoding_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqEncoding_starGenType_recorder) Encode(dst, src []byte) *MoqEncoding_starGenType_Encode_fnRecorder {
	return &MoqEncoding_starGenType_Encode_fnRecorder{
		Params: MoqEncoding_starGenType_Encode_params{
			Dst: dst,
			Src: src,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqEncoding_starGenType_Encode_fnRecorder) Any() *MoqEncoding_starGenType_Encode_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Encode(r.Params))
		return nil
	}
	return &MoqEncoding_starGenType_Encode_anyParams{Recorder: r}
}

func (a *MoqEncoding_starGenType_Encode_anyParams) Dst() *MoqEncoding_starGenType_Encode_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqEncoding_starGenType_Encode_anyParams) Src() *MoqEncoding_starGenType_Encode_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqEncoding_starGenType_Encode_fnRecorder) Seq() *MoqEncoding_starGenType_Encode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Encode(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqEncoding_starGenType_Encode_fnRecorder) NoSeq() *MoqEncoding_starGenType_Encode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Encode(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqEncoding_starGenType_Encode_fnRecorder) ReturnResults() *MoqEncoding_starGenType_Encode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqEncoding_starGenType_Encode_doFn
		DoReturnFn MoqEncoding_starGenType_Encode_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqEncoding_starGenType_Encode_fnRecorder) AndDo(fn MoqEncoding_starGenType_Encode_doFn) *MoqEncoding_starGenType_Encode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqEncoding_starGenType_Encode_fnRecorder) DoReturnResults(fn MoqEncoding_starGenType_Encode_doReturnFn) *MoqEncoding_starGenType_Encode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqEncoding_starGenType_Encode_doFn
		DoReturnFn MoqEncoding_starGenType_Encode_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqEncoding_starGenType_Encode_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqEncoding_starGenType_Encode_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Encode {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqEncoding_starGenType_Encode_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqEncoding_starGenType_Encode_paramsKey]*MoqEncoding_starGenType_Encode_results{},
		}
		r.Moq.ResultsByParams_Encode = append(r.Moq.ResultsByParams_Encode, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Encode) {
			copy(r.Moq.ResultsByParams_Encode[insertAt+1:], r.Moq.ResultsByParams_Encode[insertAt:0])
			r.Moq.ResultsByParams_Encode[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Encode(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqEncoding_starGenType_Encode_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqEncoding_starGenType_Encode_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqEncoding_starGenType_Encode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqEncoding_starGenType_Encode_doFn
				DoReturnFn MoqEncoding_starGenType_Encode_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqEncoding_starGenType) PrettyParams_Encode(params MoqEncoding_starGenType_Encode_params) string {
	return fmt.Sprintf("Encode(%#v, %#v)", params.Dst, params.Src)
}

func (m *MoqEncoding_starGenType) ParamsKey_Encode(params MoqEncoding_starGenType_Encode_params, anyParams uint64) MoqEncoding_starGenType_Encode_paramsKey {
	m.Scene.T.Helper()
	var dstUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Encode.Dst == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The dst parameter of the Encode function can't be indexed by value")
		}
		dstUsedHash = hash.DeepHash(params.Dst)
	}
	var srcUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Encode.Src == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The src parameter of the Encode function can't be indexed by value")
		}
		srcUsedHash = hash.DeepHash(params.Src)
	}
	return MoqEncoding_starGenType_Encode_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Dst, Src hash.Hash }{
			Dst: dstUsedHash,
			Src: srcUsedHash,
		},
	}
}

func (m *MoqEncoding_starGenType_recorder) EncodeToString(src []byte) *MoqEncoding_starGenType_EncodeToString_fnRecorder {
	return &MoqEncoding_starGenType_EncodeToString_fnRecorder{
		Params: MoqEncoding_starGenType_EncodeToString_params{
			Src: src,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqEncoding_starGenType_EncodeToString_fnRecorder) Any() *MoqEncoding_starGenType_EncodeToString_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_EncodeToString(r.Params))
		return nil
	}
	return &MoqEncoding_starGenType_EncodeToString_anyParams{Recorder: r}
}

func (a *MoqEncoding_starGenType_EncodeToString_anyParams) Src() *MoqEncoding_starGenType_EncodeToString_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqEncoding_starGenType_EncodeToString_fnRecorder) Seq() *MoqEncoding_starGenType_EncodeToString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_EncodeToString(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqEncoding_starGenType_EncodeToString_fnRecorder) NoSeq() *MoqEncoding_starGenType_EncodeToString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_EncodeToString(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqEncoding_starGenType_EncodeToString_fnRecorder) ReturnResults(result1 string) *MoqEncoding_starGenType_EncodeToString_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqEncoding_starGenType_EncodeToString_doFn
		DoReturnFn MoqEncoding_starGenType_EncodeToString_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqEncoding_starGenType_EncodeToString_fnRecorder) AndDo(fn MoqEncoding_starGenType_EncodeToString_doFn) *MoqEncoding_starGenType_EncodeToString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqEncoding_starGenType_EncodeToString_fnRecorder) DoReturnResults(fn MoqEncoding_starGenType_EncodeToString_doReturnFn) *MoqEncoding_starGenType_EncodeToString_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqEncoding_starGenType_EncodeToString_doFn
		DoReturnFn MoqEncoding_starGenType_EncodeToString_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqEncoding_starGenType_EncodeToString_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqEncoding_starGenType_EncodeToString_resultsByParams
	for n, res := range r.Moq.ResultsByParams_EncodeToString {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqEncoding_starGenType_EncodeToString_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqEncoding_starGenType_EncodeToString_paramsKey]*MoqEncoding_starGenType_EncodeToString_results{},
		}
		r.Moq.ResultsByParams_EncodeToString = append(r.Moq.ResultsByParams_EncodeToString, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_EncodeToString) {
			copy(r.Moq.ResultsByParams_EncodeToString[insertAt+1:], r.Moq.ResultsByParams_EncodeToString[insertAt:0])
			r.Moq.ResultsByParams_EncodeToString[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_EncodeToString(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqEncoding_starGenType_EncodeToString_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqEncoding_starGenType_EncodeToString_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqEncoding_starGenType_EncodeToString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqEncoding_starGenType_EncodeToString_doFn
				DoReturnFn MoqEncoding_starGenType_EncodeToString_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqEncoding_starGenType) PrettyParams_EncodeToString(params MoqEncoding_starGenType_EncodeToString_params) string {
	return fmt.Sprintf("EncodeToString(%#v)", params.Src)
}

func (m *MoqEncoding_starGenType) ParamsKey_EncodeToString(params MoqEncoding_starGenType_EncodeToString_params, anyParams uint64) MoqEncoding_starGenType_EncodeToString_paramsKey {
	m.Scene.T.Helper()
	var srcUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.EncodeToString.Src == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The src parameter of the EncodeToString function can't be indexed by value")
		}
		srcUsedHash = hash.DeepHash(params.Src)
	}
	return MoqEncoding_starGenType_EncodeToString_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Src hash.Hash }{
			Src: srcUsedHash,
		},
	}
}

func (m *MoqEncoding_starGenType_recorder) EncodedLen(n int) *MoqEncoding_starGenType_EncodedLen_fnRecorder {
	return &MoqEncoding_starGenType_EncodedLen_fnRecorder{
		Params: MoqEncoding_starGenType_EncodedLen_params{
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqEncoding_starGenType_EncodedLen_fnRecorder) Any() *MoqEncoding_starGenType_EncodedLen_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_EncodedLen(r.Params))
		return nil
	}
	return &MoqEncoding_starGenType_EncodedLen_anyParams{Recorder: r}
}

func (a *MoqEncoding_starGenType_EncodedLen_anyParams) N() *MoqEncoding_starGenType_EncodedLen_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqEncoding_starGenType_EncodedLen_fnRecorder) Seq() *MoqEncoding_starGenType_EncodedLen_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_EncodedLen(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqEncoding_starGenType_EncodedLen_fnRecorder) NoSeq() *MoqEncoding_starGenType_EncodedLen_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_EncodedLen(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqEncoding_starGenType_EncodedLen_fnRecorder) ReturnResults(result1 int) *MoqEncoding_starGenType_EncodedLen_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqEncoding_starGenType_EncodedLen_doFn
		DoReturnFn MoqEncoding_starGenType_EncodedLen_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqEncoding_starGenType_EncodedLen_fnRecorder) AndDo(fn MoqEncoding_starGenType_EncodedLen_doFn) *MoqEncoding_starGenType_EncodedLen_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqEncoding_starGenType_EncodedLen_fnRecorder) DoReturnResults(fn MoqEncoding_starGenType_EncodedLen_doReturnFn) *MoqEncoding_starGenType_EncodedLen_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqEncoding_starGenType_EncodedLen_doFn
		DoReturnFn MoqEncoding_starGenType_EncodedLen_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqEncoding_starGenType_EncodedLen_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqEncoding_starGenType_EncodedLen_resultsByParams
	for n, res := range r.Moq.ResultsByParams_EncodedLen {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqEncoding_starGenType_EncodedLen_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqEncoding_starGenType_EncodedLen_paramsKey]*MoqEncoding_starGenType_EncodedLen_results{},
		}
		r.Moq.ResultsByParams_EncodedLen = append(r.Moq.ResultsByParams_EncodedLen, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_EncodedLen) {
			copy(r.Moq.ResultsByParams_EncodedLen[insertAt+1:], r.Moq.ResultsByParams_EncodedLen[insertAt:0])
			r.Moq.ResultsByParams_EncodedLen[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_EncodedLen(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqEncoding_starGenType_EncodedLen_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqEncoding_starGenType_EncodedLen_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqEncoding_starGenType_EncodedLen_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqEncoding_starGenType_EncodedLen_doFn
				DoReturnFn MoqEncoding_starGenType_EncodedLen_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqEncoding_starGenType) PrettyParams_EncodedLen(params MoqEncoding_starGenType_EncodedLen_params) string {
	return fmt.Sprintf("EncodedLen(%#v)", params.N)
}

func (m *MoqEncoding_starGenType) ParamsKey_EncodedLen(params MoqEncoding_starGenType_EncodedLen_params, anyParams uint64) MoqEncoding_starGenType_EncodedLen_paramsKey {
	m.Scene.T.Helper()
	var nUsed int
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.EncodedLen.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqEncoding_starGenType_EncodedLen_paramsKey{
		Params: struct{ N int }{
			N: nUsed,
		},
		Hashes: struct{ N hash.Hash }{
			N: nUsedHash,
		},
	}
}

func (m *MoqEncoding_starGenType_recorder) DecodeString(s string) *MoqEncoding_starGenType_DecodeString_fnRecorder {
	return &MoqEncoding_starGenType_DecodeString_fnRecorder{
		Params: MoqEncoding_starGenType_DecodeString_params{
			S: s,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqEncoding_starGenType_DecodeString_fnRecorder) Any() *MoqEncoding_starGenType_DecodeString_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DecodeString(r.Params))
		return nil
	}
	return &MoqEncoding_starGenType_DecodeString_anyParams{Recorder: r}
}

func (a *MoqEncoding_starGenType_DecodeString_anyParams) S() *MoqEncoding_starGenType_DecodeString_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqEncoding_starGenType_DecodeString_fnRecorder) Seq() *MoqEncoding_starGenType_DecodeString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DecodeString(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqEncoding_starGenType_DecodeString_fnRecorder) NoSeq() *MoqEncoding_starGenType_DecodeString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DecodeString(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqEncoding_starGenType_DecodeString_fnRecorder) ReturnResults(result1 []byte, result2 error) *MoqEncoding_starGenType_DecodeString_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqEncoding_starGenType_DecodeString_doFn
		DoReturnFn MoqEncoding_starGenType_DecodeString_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqEncoding_starGenType_DecodeString_fnRecorder) AndDo(fn MoqEncoding_starGenType_DecodeString_doFn) *MoqEncoding_starGenType_DecodeString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqEncoding_starGenType_DecodeString_fnRecorder) DoReturnResults(fn MoqEncoding_starGenType_DecodeString_doReturnFn) *MoqEncoding_starGenType_DecodeString_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqEncoding_starGenType_DecodeString_doFn
		DoReturnFn MoqEncoding_starGenType_DecodeString_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqEncoding_starGenType_DecodeString_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqEncoding_starGenType_DecodeString_resultsByParams
	for n, res := range r.Moq.ResultsByParams_DecodeString {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqEncoding_starGenType_DecodeString_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqEncoding_starGenType_DecodeString_paramsKey]*MoqEncoding_starGenType_DecodeString_results{},
		}
		r.Moq.ResultsByParams_DecodeString = append(r.Moq.ResultsByParams_DecodeString, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_DecodeString) {
			copy(r.Moq.ResultsByParams_DecodeString[insertAt+1:], r.Moq.ResultsByParams_DecodeString[insertAt:0])
			r.Moq.ResultsByParams_DecodeString[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_DecodeString(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqEncoding_starGenType_DecodeString_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqEncoding_starGenType_DecodeString_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqEncoding_starGenType_DecodeString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqEncoding_starGenType_DecodeString_doFn
				DoReturnFn MoqEncoding_starGenType_DecodeString_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqEncoding_starGenType) PrettyParams_DecodeString(params MoqEncoding_starGenType_DecodeString_params) string {
	return fmt.Sprintf("DecodeString(%#v)", params.S)
}

func (m *MoqEncoding_starGenType) ParamsKey_DecodeString(params MoqEncoding_starGenType_DecodeString_params, anyParams uint64) MoqEncoding_starGenType_DecodeString_paramsKey {
	m.Scene.T.Helper()
	var sUsed string
	var sUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.DecodeString.S == moq.ParamIndexByValue {
			sUsed = params.S
		} else {
			sUsedHash = hash.DeepHash(params.S)
		}
	}
	return MoqEncoding_starGenType_DecodeString_paramsKey{
		Params: struct{ S string }{
			S: sUsed,
		},
		Hashes: struct{ S hash.Hash }{
			S: sUsedHash,
		},
	}
}

func (m *MoqEncoding_starGenType_recorder) Decode(dst, src []byte) *MoqEncoding_starGenType_Decode_fnRecorder {
	return &MoqEncoding_starGenType_Decode_fnRecorder{
		Params: MoqEncoding_starGenType_Decode_params{
			Dst: dst,
			Src: src,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqEncoding_starGenType_Decode_fnRecorder) Any() *MoqEncoding_starGenType_Decode_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Decode(r.Params))
		return nil
	}
	return &MoqEncoding_starGenType_Decode_anyParams{Recorder: r}
}

func (a *MoqEncoding_starGenType_Decode_anyParams) Dst() *MoqEncoding_starGenType_Decode_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqEncoding_starGenType_Decode_anyParams) Src() *MoqEncoding_starGenType_Decode_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqEncoding_starGenType_Decode_fnRecorder) Seq() *MoqEncoding_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Decode(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqEncoding_starGenType_Decode_fnRecorder) NoSeq() *MoqEncoding_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Decode(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqEncoding_starGenType_Decode_fnRecorder) ReturnResults(n int, err error) *MoqEncoding_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqEncoding_starGenType_Decode_doFn
		DoReturnFn MoqEncoding_starGenType_Decode_doReturnFn
	}{
		Values: &struct {
			N   int
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqEncoding_starGenType_Decode_fnRecorder) AndDo(fn MoqEncoding_starGenType_Decode_doFn) *MoqEncoding_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqEncoding_starGenType_Decode_fnRecorder) DoReturnResults(fn MoqEncoding_starGenType_Decode_doReturnFn) *MoqEncoding_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqEncoding_starGenType_Decode_doFn
		DoReturnFn MoqEncoding_starGenType_Decode_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqEncoding_starGenType_Decode_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqEncoding_starGenType_Decode_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Decode {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqEncoding_starGenType_Decode_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqEncoding_starGenType_Decode_paramsKey]*MoqEncoding_starGenType_Decode_results{},
		}
		r.Moq.ResultsByParams_Decode = append(r.Moq.ResultsByParams_Decode, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Decode) {
			copy(r.Moq.ResultsByParams_Decode[insertAt+1:], r.Moq.ResultsByParams_Decode[insertAt:0])
			r.Moq.ResultsByParams_Decode[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Decode(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqEncoding_starGenType_Decode_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqEncoding_starGenType_Decode_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqEncoding_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int
					Err error
				}
				Sequence   uint32
				DoFn       MoqEncoding_starGenType_Decode_doFn
				DoReturnFn MoqEncoding_starGenType_Decode_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqEncoding_starGenType) PrettyParams_Decode(params MoqEncoding_starGenType_Decode_params) string {
	return fmt.Sprintf("Decode(%#v, %#v)", params.Dst, params.Src)
}

func (m *MoqEncoding_starGenType) ParamsKey_Decode(params MoqEncoding_starGenType_Decode_params, anyParams uint64) MoqEncoding_starGenType_Decode_paramsKey {
	m.Scene.T.Helper()
	var dstUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Decode.Dst == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The dst parameter of the Decode function can't be indexed by value")
		}
		dstUsedHash = hash.DeepHash(params.Dst)
	}
	var srcUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Decode.Src == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The src parameter of the Decode function can't be indexed by value")
		}
		srcUsedHash = hash.DeepHash(params.Src)
	}
	return MoqEncoding_starGenType_Decode_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Dst, Src hash.Hash }{
			Dst: dstUsedHash,
			Src: srcUsedHash,
		},
	}
}

func (m *MoqEncoding_starGenType_recorder) DecodedLen(n int) *MoqEncoding_starGenType_DecodedLen_fnRecorder {
	return &MoqEncoding_starGenType_DecodedLen_fnRecorder{
		Params: MoqEncoding_starGenType_DecodedLen_params{
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqEncoding_starGenType_DecodedLen_fnRecorder) Any() *MoqEncoding_starGenType_DecodedLen_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DecodedLen(r.Params))
		return nil
	}
	return &MoqEncoding_starGenType_DecodedLen_anyParams{Recorder: r}
}

func (a *MoqEncoding_starGenType_DecodedLen_anyParams) N() *MoqEncoding_starGenType_DecodedLen_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqEncoding_starGenType_DecodedLen_fnRecorder) Seq() *MoqEncoding_starGenType_DecodedLen_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DecodedLen(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqEncoding_starGenType_DecodedLen_fnRecorder) NoSeq() *MoqEncoding_starGenType_DecodedLen_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DecodedLen(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqEncoding_starGenType_DecodedLen_fnRecorder) ReturnResults(result1 int) *MoqEncoding_starGenType_DecodedLen_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqEncoding_starGenType_DecodedLen_doFn
		DoReturnFn MoqEncoding_starGenType_DecodedLen_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqEncoding_starGenType_DecodedLen_fnRecorder) AndDo(fn MoqEncoding_starGenType_DecodedLen_doFn) *MoqEncoding_starGenType_DecodedLen_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqEncoding_starGenType_DecodedLen_fnRecorder) DoReturnResults(fn MoqEncoding_starGenType_DecodedLen_doReturnFn) *MoqEncoding_starGenType_DecodedLen_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqEncoding_starGenType_DecodedLen_doFn
		DoReturnFn MoqEncoding_starGenType_DecodedLen_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqEncoding_starGenType_DecodedLen_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqEncoding_starGenType_DecodedLen_resultsByParams
	for n, res := range r.Moq.ResultsByParams_DecodedLen {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqEncoding_starGenType_DecodedLen_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqEncoding_starGenType_DecodedLen_paramsKey]*MoqEncoding_starGenType_DecodedLen_results{},
		}
		r.Moq.ResultsByParams_DecodedLen = append(r.Moq.ResultsByParams_DecodedLen, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_DecodedLen) {
			copy(r.Moq.ResultsByParams_DecodedLen[insertAt+1:], r.Moq.ResultsByParams_DecodedLen[insertAt:0])
			r.Moq.ResultsByParams_DecodedLen[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_DecodedLen(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqEncoding_starGenType_DecodedLen_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqEncoding_starGenType_DecodedLen_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqEncoding_starGenType_DecodedLen_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqEncoding_starGenType_DecodedLen_doFn
				DoReturnFn MoqEncoding_starGenType_DecodedLen_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqEncoding_starGenType) PrettyParams_DecodedLen(params MoqEncoding_starGenType_DecodedLen_params) string {
	return fmt.Sprintf("DecodedLen(%#v)", params.N)
}

func (m *MoqEncoding_starGenType) ParamsKey_DecodedLen(params MoqEncoding_starGenType_DecodedLen_params, anyParams uint64) MoqEncoding_starGenType_DecodedLen_paramsKey {
	m.Scene.T.Helper()
	var nUsed int
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.DecodedLen.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqEncoding_starGenType_DecodedLen_paramsKey{
		Params: struct{ N int }{
			N: nUsed,
		},
		Hashes: struct{ N hash.Hash }{
			N: nUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqEncoding_starGenType) Reset() {
	m.ResultsByParams_Encode = nil
	m.ResultsByParams_EncodeToString = nil
	m.ResultsByParams_EncodedLen = nil
	m.ResultsByParams_DecodeString = nil
	m.ResultsByParams_Decode = nil
	m.ResultsByParams_DecodedLen = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqEncoding_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Encode {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Encode(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_EncodeToString {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_EncodeToString(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_EncodedLen {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_EncodedLen(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_DecodeString {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_DecodeString(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Decode {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Decode(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_DecodedLen {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_DecodedLen(results.Params))
			}
		}
	}
}
