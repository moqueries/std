// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package asn1

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that asn1.BitString_genType is mocked
// completely
var _ BitString_genType = (*MoqBitString_genType_mock)(nil)

// BitString_genType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type BitString_genType interface {
	At(i int) int
	RightAlign() []byte
}

// MoqBitString_genType holds the state of a moq of the BitString_genType type
type MoqBitString_genType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqBitString_genType_mock

	ResultsByParams_At         []MoqBitString_genType_At_resultsByParams
	ResultsByParams_RightAlign []MoqBitString_genType_RightAlign_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			At struct {
				Param1 moq.ParamIndexing
			}
			RightAlign struct{}
		}
	}
}

// MoqBitString_genType_mock isolates the mock interface of the
// BitString_genType type
type MoqBitString_genType_mock struct {
	Moq *MoqBitString_genType
}

// MoqBitString_genType_recorder isolates the recorder interface of the
// BitString_genType type
type MoqBitString_genType_recorder struct {
	Moq *MoqBitString_genType
}

// MoqBitString_genType_At_params holds the params of the BitString_genType
// type
type MoqBitString_genType_At_params struct{ Param1 int }

// MoqBitString_genType_At_paramsKey holds the map key params of the
// BitString_genType type
type MoqBitString_genType_At_paramsKey struct {
	Params struct{ Param1 int }
	Hashes struct{ Param1 hash.Hash }
}

// MoqBitString_genType_At_resultsByParams contains the results for a given set
// of parameters for the BitString_genType type
type MoqBitString_genType_At_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBitString_genType_At_paramsKey]*MoqBitString_genType_At_results
}

// MoqBitString_genType_At_doFn defines the type of function needed when
// calling AndDo for the BitString_genType type
type MoqBitString_genType_At_doFn func(i int)

// MoqBitString_genType_At_doReturnFn defines the type of function needed when
// calling DoReturnResults for the BitString_genType type
type MoqBitString_genType_At_doReturnFn func(i int) int

// MoqBitString_genType_At_results holds the results of the BitString_genType
// type
type MoqBitString_genType_At_results struct {
	Params  MoqBitString_genType_At_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqBitString_genType_At_doFn
		DoReturnFn MoqBitString_genType_At_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBitString_genType_At_fnRecorder routes recorded function calls to the
// MoqBitString_genType moq
type MoqBitString_genType_At_fnRecorder struct {
	Params    MoqBitString_genType_At_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBitString_genType_At_results
	Moq       *MoqBitString_genType
}

// MoqBitString_genType_At_anyParams isolates the any params functions of the
// BitString_genType type
type MoqBitString_genType_At_anyParams struct {
	Recorder *MoqBitString_genType_At_fnRecorder
}

// MoqBitString_genType_RightAlign_params holds the params of the
// BitString_genType type
type MoqBitString_genType_RightAlign_params struct{}

// MoqBitString_genType_RightAlign_paramsKey holds the map key params of the
// BitString_genType type
type MoqBitString_genType_RightAlign_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqBitString_genType_RightAlign_resultsByParams contains the results for a
// given set of parameters for the BitString_genType type
type MoqBitString_genType_RightAlign_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBitString_genType_RightAlign_paramsKey]*MoqBitString_genType_RightAlign_results
}

// MoqBitString_genType_RightAlign_doFn defines the type of function needed
// when calling AndDo for the BitString_genType type
type MoqBitString_genType_RightAlign_doFn func()

// MoqBitString_genType_RightAlign_doReturnFn defines the type of function
// needed when calling DoReturnResults for the BitString_genType type
type MoqBitString_genType_RightAlign_doReturnFn func() []byte

// MoqBitString_genType_RightAlign_results holds the results of the
// BitString_genType type
type MoqBitString_genType_RightAlign_results struct {
	Params  MoqBitString_genType_RightAlign_params
	Results []struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqBitString_genType_RightAlign_doFn
		DoReturnFn MoqBitString_genType_RightAlign_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBitString_genType_RightAlign_fnRecorder routes recorded function calls to
// the MoqBitString_genType moq
type MoqBitString_genType_RightAlign_fnRecorder struct {
	Params    MoqBitString_genType_RightAlign_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBitString_genType_RightAlign_results
	Moq       *MoqBitString_genType
}

// MoqBitString_genType_RightAlign_anyParams isolates the any params functions
// of the BitString_genType type
type MoqBitString_genType_RightAlign_anyParams struct {
	Recorder *MoqBitString_genType_RightAlign_fnRecorder
}

// NewMoqBitString_genType creates a new moq of the BitString_genType type
func NewMoqBitString_genType(scene *moq.Scene, config *moq.Config) *MoqBitString_genType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqBitString_genType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqBitString_genType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				At struct {
					Param1 moq.ParamIndexing
				}
				RightAlign struct{}
			}
		}{ParameterIndexing: struct {
			At struct {
				Param1 moq.ParamIndexing
			}
			RightAlign struct{}
		}{
			At: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			RightAlign: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the BitString_genType type
func (m *MoqBitString_genType) Mock() *MoqBitString_genType_mock { return m.Moq }

func (m *MoqBitString_genType_mock) At(param1 int) (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqBitString_genType_At_params{
		Param1: param1,
	}
	var results *MoqBitString_genType_At_results
	for _, resultsByParams := range m.Moq.ResultsByParams_At {
		paramsKey := m.Moq.ParamsKey_At(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_At(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_At(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_At(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqBitString_genType_mock) RightAlign() (result1 []byte) {
	m.Moq.Scene.T.Helper()
	params := MoqBitString_genType_RightAlign_params{}
	var results *MoqBitString_genType_RightAlign_results
	for _, resultsByParams := range m.Moq.ResultsByParams_RightAlign {
		paramsKey := m.Moq.ParamsKey_RightAlign(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_RightAlign(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_RightAlign(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_RightAlign(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the BitString_genType type
func (m *MoqBitString_genType) OnCall() *MoqBitString_genType_recorder {
	return &MoqBitString_genType_recorder{
		Moq: m,
	}
}

func (m *MoqBitString_genType_recorder) At(param1 int) *MoqBitString_genType_At_fnRecorder {
	return &MoqBitString_genType_At_fnRecorder{
		Params: MoqBitString_genType_At_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBitString_genType_At_fnRecorder) Any() *MoqBitString_genType_At_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_At(r.Params))
		return nil
	}
	return &MoqBitString_genType_At_anyParams{Recorder: r}
}

func (a *MoqBitString_genType_At_anyParams) Param1() *MoqBitString_genType_At_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqBitString_genType_At_fnRecorder) Seq() *MoqBitString_genType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_At(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBitString_genType_At_fnRecorder) NoSeq() *MoqBitString_genType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_At(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBitString_genType_At_fnRecorder) ReturnResults(result1 int) *MoqBitString_genType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqBitString_genType_At_doFn
		DoReturnFn MoqBitString_genType_At_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBitString_genType_At_fnRecorder) AndDo(fn MoqBitString_genType_At_doFn) *MoqBitString_genType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBitString_genType_At_fnRecorder) DoReturnResults(fn MoqBitString_genType_At_doReturnFn) *MoqBitString_genType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqBitString_genType_At_doFn
		DoReturnFn MoqBitString_genType_At_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBitString_genType_At_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBitString_genType_At_resultsByParams
	for n, res := range r.Moq.ResultsByParams_At {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBitString_genType_At_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBitString_genType_At_paramsKey]*MoqBitString_genType_At_results{},
		}
		r.Moq.ResultsByParams_At = append(r.Moq.ResultsByParams_At, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_At) {
			copy(r.Moq.ResultsByParams_At[insertAt+1:], r.Moq.ResultsByParams_At[insertAt:0])
			r.Moq.ResultsByParams_At[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_At(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBitString_genType_At_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBitString_genType_At_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBitString_genType_At_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqBitString_genType_At_doFn
				DoReturnFn MoqBitString_genType_At_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBitString_genType) PrettyParams_At(params MoqBitString_genType_At_params) string {
	return fmt.Sprintf("At(%#v)", params.Param1)
}

func (m *MoqBitString_genType) ParamsKey_At(params MoqBitString_genType_At_params, anyParams uint64) MoqBitString_genType_At_paramsKey {
	m.Scene.T.Helper()
	var param1Used int
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.At.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqBitString_genType_At_paramsKey{
		Params: struct{ Param1 int }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqBitString_genType_recorder) RightAlign() *MoqBitString_genType_RightAlign_fnRecorder {
	return &MoqBitString_genType_RightAlign_fnRecorder{
		Params:   MoqBitString_genType_RightAlign_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBitString_genType_RightAlign_fnRecorder) Any() *MoqBitString_genType_RightAlign_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RightAlign(r.Params))
		return nil
	}
	return &MoqBitString_genType_RightAlign_anyParams{Recorder: r}
}

func (r *MoqBitString_genType_RightAlign_fnRecorder) Seq() *MoqBitString_genType_RightAlign_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RightAlign(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBitString_genType_RightAlign_fnRecorder) NoSeq() *MoqBitString_genType_RightAlign_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RightAlign(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBitString_genType_RightAlign_fnRecorder) ReturnResults(result1 []byte) *MoqBitString_genType_RightAlign_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqBitString_genType_RightAlign_doFn
		DoReturnFn MoqBitString_genType_RightAlign_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBitString_genType_RightAlign_fnRecorder) AndDo(fn MoqBitString_genType_RightAlign_doFn) *MoqBitString_genType_RightAlign_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBitString_genType_RightAlign_fnRecorder) DoReturnResults(fn MoqBitString_genType_RightAlign_doReturnFn) *MoqBitString_genType_RightAlign_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqBitString_genType_RightAlign_doFn
		DoReturnFn MoqBitString_genType_RightAlign_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBitString_genType_RightAlign_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBitString_genType_RightAlign_resultsByParams
	for n, res := range r.Moq.ResultsByParams_RightAlign {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBitString_genType_RightAlign_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBitString_genType_RightAlign_paramsKey]*MoqBitString_genType_RightAlign_results{},
		}
		r.Moq.ResultsByParams_RightAlign = append(r.Moq.ResultsByParams_RightAlign, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_RightAlign) {
			copy(r.Moq.ResultsByParams_RightAlign[insertAt+1:], r.Moq.ResultsByParams_RightAlign[insertAt:0])
			r.Moq.ResultsByParams_RightAlign[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_RightAlign(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBitString_genType_RightAlign_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBitString_genType_RightAlign_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBitString_genType_RightAlign_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
				}
				Sequence   uint32
				DoFn       MoqBitString_genType_RightAlign_doFn
				DoReturnFn MoqBitString_genType_RightAlign_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBitString_genType) PrettyParams_RightAlign(params MoqBitString_genType_RightAlign_params) string {
	return fmt.Sprintf("RightAlign()")
}

func (m *MoqBitString_genType) ParamsKey_RightAlign(params MoqBitString_genType_RightAlign_params, anyParams uint64) MoqBitString_genType_RightAlign_paramsKey {
	m.Scene.T.Helper()
	return MoqBitString_genType_RightAlign_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqBitString_genType) Reset() {
	m.ResultsByParams_At = nil
	m.ResultsByParams_RightAlign = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqBitString_genType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_At {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_At(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_RightAlign {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_RightAlign(results.Params))
			}
		}
	}
}
