// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package json

import (
	"encoding/json"
	"fmt"
	"io"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that json.Decoder_starGenType is mocked
// completely
var _ Decoder_starGenType = (*MoqDecoder_starGenType_mock)(nil)

// Decoder_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Decoder_starGenType interface {
	UseNumber()
	DisallowUnknownFields()
	Decode(v interface{}) error
	Buffered() io.Reader
	Token() (json.Token, error)
	More() bool
	InputOffset() int64
}

// MoqDecoder_starGenType holds the state of a moq of the Decoder_starGenType
// type
type MoqDecoder_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqDecoder_starGenType_mock

	ResultsByParams_UseNumber             []MoqDecoder_starGenType_UseNumber_resultsByParams
	ResultsByParams_DisallowUnknownFields []MoqDecoder_starGenType_DisallowUnknownFields_resultsByParams
	ResultsByParams_Decode                []MoqDecoder_starGenType_Decode_resultsByParams
	ResultsByParams_Buffered              []MoqDecoder_starGenType_Buffered_resultsByParams
	ResultsByParams_Token                 []MoqDecoder_starGenType_Token_resultsByParams
	ResultsByParams_More                  []MoqDecoder_starGenType_More_resultsByParams
	ResultsByParams_InputOffset           []MoqDecoder_starGenType_InputOffset_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			UseNumber             struct{}
			DisallowUnknownFields struct{}
			Decode                struct {
				V moq.ParamIndexing
			}
			Buffered    struct{}
			Token       struct{}
			More        struct{}
			InputOffset struct{}
		}
	}
}

// MoqDecoder_starGenType_mock isolates the mock interface of the
// Decoder_starGenType type
type MoqDecoder_starGenType_mock struct {
	Moq *MoqDecoder_starGenType
}

// MoqDecoder_starGenType_recorder isolates the recorder interface of the
// Decoder_starGenType type
type MoqDecoder_starGenType_recorder struct {
	Moq *MoqDecoder_starGenType
}

// MoqDecoder_starGenType_UseNumber_params holds the params of the
// Decoder_starGenType type
type MoqDecoder_starGenType_UseNumber_params struct{}

// MoqDecoder_starGenType_UseNumber_paramsKey holds the map key params of the
// Decoder_starGenType type
type MoqDecoder_starGenType_UseNumber_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDecoder_starGenType_UseNumber_resultsByParams contains the results for a
// given set of parameters for the Decoder_starGenType type
type MoqDecoder_starGenType_UseNumber_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDecoder_starGenType_UseNumber_paramsKey]*MoqDecoder_starGenType_UseNumber_results
}

// MoqDecoder_starGenType_UseNumber_doFn defines the type of function needed
// when calling AndDo for the Decoder_starGenType type
type MoqDecoder_starGenType_UseNumber_doFn func()

// MoqDecoder_starGenType_UseNumber_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Decoder_starGenType type
type MoqDecoder_starGenType_UseNumber_doReturnFn func()

// MoqDecoder_starGenType_UseNumber_results holds the results of the
// Decoder_starGenType type
type MoqDecoder_starGenType_UseNumber_results struct {
	Params  MoqDecoder_starGenType_UseNumber_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_UseNumber_doFn
		DoReturnFn MoqDecoder_starGenType_UseNumber_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDecoder_starGenType_UseNumber_fnRecorder routes recorded function calls
// to the MoqDecoder_starGenType moq
type MoqDecoder_starGenType_UseNumber_fnRecorder struct {
	Params    MoqDecoder_starGenType_UseNumber_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDecoder_starGenType_UseNumber_results
	Moq       *MoqDecoder_starGenType
}

// MoqDecoder_starGenType_UseNumber_anyParams isolates the any params functions
// of the Decoder_starGenType type
type MoqDecoder_starGenType_UseNumber_anyParams struct {
	Recorder *MoqDecoder_starGenType_UseNumber_fnRecorder
}

// MoqDecoder_starGenType_DisallowUnknownFields_params holds the params of the
// Decoder_starGenType type
type MoqDecoder_starGenType_DisallowUnknownFields_params struct{}

// MoqDecoder_starGenType_DisallowUnknownFields_paramsKey holds the map key
// params of the Decoder_starGenType type
type MoqDecoder_starGenType_DisallowUnknownFields_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDecoder_starGenType_DisallowUnknownFields_resultsByParams contains the
// results for a given set of parameters for the Decoder_starGenType type
type MoqDecoder_starGenType_DisallowUnknownFields_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDecoder_starGenType_DisallowUnknownFields_paramsKey]*MoqDecoder_starGenType_DisallowUnknownFields_results
}

// MoqDecoder_starGenType_DisallowUnknownFields_doFn defines the type of
// function needed when calling AndDo for the Decoder_starGenType type
type MoqDecoder_starGenType_DisallowUnknownFields_doFn func()

// MoqDecoder_starGenType_DisallowUnknownFields_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Decoder_starGenType
// type
type MoqDecoder_starGenType_DisallowUnknownFields_doReturnFn func()

// MoqDecoder_starGenType_DisallowUnknownFields_results holds the results of
// the Decoder_starGenType type
type MoqDecoder_starGenType_DisallowUnknownFields_results struct {
	Params  MoqDecoder_starGenType_DisallowUnknownFields_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_DisallowUnknownFields_doFn
		DoReturnFn MoqDecoder_starGenType_DisallowUnknownFields_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder routes recorded
// function calls to the MoqDecoder_starGenType moq
type MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder struct {
	Params    MoqDecoder_starGenType_DisallowUnknownFields_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDecoder_starGenType_DisallowUnknownFields_results
	Moq       *MoqDecoder_starGenType
}

// MoqDecoder_starGenType_DisallowUnknownFields_anyParams isolates the any
// params functions of the Decoder_starGenType type
type MoqDecoder_starGenType_DisallowUnknownFields_anyParams struct {
	Recorder *MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder
}

// MoqDecoder_starGenType_Decode_params holds the params of the
// Decoder_starGenType type
type MoqDecoder_starGenType_Decode_params struct{ V interface{} }

// MoqDecoder_starGenType_Decode_paramsKey holds the map key params of the
// Decoder_starGenType type
type MoqDecoder_starGenType_Decode_paramsKey struct {
	Params struct{ V interface{} }
	Hashes struct{ V hash.Hash }
}

// MoqDecoder_starGenType_Decode_resultsByParams contains the results for a
// given set of parameters for the Decoder_starGenType type
type MoqDecoder_starGenType_Decode_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDecoder_starGenType_Decode_paramsKey]*MoqDecoder_starGenType_Decode_results
}

// MoqDecoder_starGenType_Decode_doFn defines the type of function needed when
// calling AndDo for the Decoder_starGenType type
type MoqDecoder_starGenType_Decode_doFn func(v interface{})

// MoqDecoder_starGenType_Decode_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Decoder_starGenType type
type MoqDecoder_starGenType_Decode_doReturnFn func(v interface{}) error

// MoqDecoder_starGenType_Decode_results holds the results of the
// Decoder_starGenType type
type MoqDecoder_starGenType_Decode_results struct {
	Params  MoqDecoder_starGenType_Decode_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_Decode_doFn
		DoReturnFn MoqDecoder_starGenType_Decode_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDecoder_starGenType_Decode_fnRecorder routes recorded function calls to
// the MoqDecoder_starGenType moq
type MoqDecoder_starGenType_Decode_fnRecorder struct {
	Params    MoqDecoder_starGenType_Decode_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDecoder_starGenType_Decode_results
	Moq       *MoqDecoder_starGenType
}

// MoqDecoder_starGenType_Decode_anyParams isolates the any params functions of
// the Decoder_starGenType type
type MoqDecoder_starGenType_Decode_anyParams struct {
	Recorder *MoqDecoder_starGenType_Decode_fnRecorder
}

// MoqDecoder_starGenType_Buffered_params holds the params of the
// Decoder_starGenType type
type MoqDecoder_starGenType_Buffered_params struct{}

// MoqDecoder_starGenType_Buffered_paramsKey holds the map key params of the
// Decoder_starGenType type
type MoqDecoder_starGenType_Buffered_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDecoder_starGenType_Buffered_resultsByParams contains the results for a
// given set of parameters for the Decoder_starGenType type
type MoqDecoder_starGenType_Buffered_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDecoder_starGenType_Buffered_paramsKey]*MoqDecoder_starGenType_Buffered_results
}

// MoqDecoder_starGenType_Buffered_doFn defines the type of function needed
// when calling AndDo for the Decoder_starGenType type
type MoqDecoder_starGenType_Buffered_doFn func()

// MoqDecoder_starGenType_Buffered_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Decoder_starGenType type
type MoqDecoder_starGenType_Buffered_doReturnFn func() io.Reader

// MoqDecoder_starGenType_Buffered_results holds the results of the
// Decoder_starGenType type
type MoqDecoder_starGenType_Buffered_results struct {
	Params  MoqDecoder_starGenType_Buffered_params
	Results []struct {
		Values *struct {
			Result1 io.Reader
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_Buffered_doFn
		DoReturnFn MoqDecoder_starGenType_Buffered_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDecoder_starGenType_Buffered_fnRecorder routes recorded function calls to
// the MoqDecoder_starGenType moq
type MoqDecoder_starGenType_Buffered_fnRecorder struct {
	Params    MoqDecoder_starGenType_Buffered_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDecoder_starGenType_Buffered_results
	Moq       *MoqDecoder_starGenType
}

// MoqDecoder_starGenType_Buffered_anyParams isolates the any params functions
// of the Decoder_starGenType type
type MoqDecoder_starGenType_Buffered_anyParams struct {
	Recorder *MoqDecoder_starGenType_Buffered_fnRecorder
}

// MoqDecoder_starGenType_Token_params holds the params of the
// Decoder_starGenType type
type MoqDecoder_starGenType_Token_params struct{}

// MoqDecoder_starGenType_Token_paramsKey holds the map key params of the
// Decoder_starGenType type
type MoqDecoder_starGenType_Token_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDecoder_starGenType_Token_resultsByParams contains the results for a
// given set of parameters for the Decoder_starGenType type
type MoqDecoder_starGenType_Token_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDecoder_starGenType_Token_paramsKey]*MoqDecoder_starGenType_Token_results
}

// MoqDecoder_starGenType_Token_doFn defines the type of function needed when
// calling AndDo for the Decoder_starGenType type
type MoqDecoder_starGenType_Token_doFn func()

// MoqDecoder_starGenType_Token_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Decoder_starGenType type
type MoqDecoder_starGenType_Token_doReturnFn func() (json.Token, error)

// MoqDecoder_starGenType_Token_results holds the results of the
// Decoder_starGenType type
type MoqDecoder_starGenType_Token_results struct {
	Params  MoqDecoder_starGenType_Token_params
	Results []struct {
		Values *struct {
			Result1 json.Token
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_Token_doFn
		DoReturnFn MoqDecoder_starGenType_Token_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDecoder_starGenType_Token_fnRecorder routes recorded function calls to
// the MoqDecoder_starGenType moq
type MoqDecoder_starGenType_Token_fnRecorder struct {
	Params    MoqDecoder_starGenType_Token_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDecoder_starGenType_Token_results
	Moq       *MoqDecoder_starGenType
}

// MoqDecoder_starGenType_Token_anyParams isolates the any params functions of
// the Decoder_starGenType type
type MoqDecoder_starGenType_Token_anyParams struct {
	Recorder *MoqDecoder_starGenType_Token_fnRecorder
}

// MoqDecoder_starGenType_More_params holds the params of the
// Decoder_starGenType type
type MoqDecoder_starGenType_More_params struct{}

// MoqDecoder_starGenType_More_paramsKey holds the map key params of the
// Decoder_starGenType type
type MoqDecoder_starGenType_More_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDecoder_starGenType_More_resultsByParams contains the results for a given
// set of parameters for the Decoder_starGenType type
type MoqDecoder_starGenType_More_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDecoder_starGenType_More_paramsKey]*MoqDecoder_starGenType_More_results
}

// MoqDecoder_starGenType_More_doFn defines the type of function needed when
// calling AndDo for the Decoder_starGenType type
type MoqDecoder_starGenType_More_doFn func()

// MoqDecoder_starGenType_More_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Decoder_starGenType type
type MoqDecoder_starGenType_More_doReturnFn func() bool

// MoqDecoder_starGenType_More_results holds the results of the
// Decoder_starGenType type
type MoqDecoder_starGenType_More_results struct {
	Params  MoqDecoder_starGenType_More_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_More_doFn
		DoReturnFn MoqDecoder_starGenType_More_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDecoder_starGenType_More_fnRecorder routes recorded function calls to the
// MoqDecoder_starGenType moq
type MoqDecoder_starGenType_More_fnRecorder struct {
	Params    MoqDecoder_starGenType_More_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDecoder_starGenType_More_results
	Moq       *MoqDecoder_starGenType
}

// MoqDecoder_starGenType_More_anyParams isolates the any params functions of
// the Decoder_starGenType type
type MoqDecoder_starGenType_More_anyParams struct {
	Recorder *MoqDecoder_starGenType_More_fnRecorder
}

// MoqDecoder_starGenType_InputOffset_params holds the params of the
// Decoder_starGenType type
type MoqDecoder_starGenType_InputOffset_params struct{}

// MoqDecoder_starGenType_InputOffset_paramsKey holds the map key params of the
// Decoder_starGenType type
type MoqDecoder_starGenType_InputOffset_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDecoder_starGenType_InputOffset_resultsByParams contains the results for
// a given set of parameters for the Decoder_starGenType type
type MoqDecoder_starGenType_InputOffset_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDecoder_starGenType_InputOffset_paramsKey]*MoqDecoder_starGenType_InputOffset_results
}

// MoqDecoder_starGenType_InputOffset_doFn defines the type of function needed
// when calling AndDo for the Decoder_starGenType type
type MoqDecoder_starGenType_InputOffset_doFn func()

// MoqDecoder_starGenType_InputOffset_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Decoder_starGenType type
type MoqDecoder_starGenType_InputOffset_doReturnFn func() int64

// MoqDecoder_starGenType_InputOffset_results holds the results of the
// Decoder_starGenType type
type MoqDecoder_starGenType_InputOffset_results struct {
	Params  MoqDecoder_starGenType_InputOffset_params
	Results []struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_InputOffset_doFn
		DoReturnFn MoqDecoder_starGenType_InputOffset_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDecoder_starGenType_InputOffset_fnRecorder routes recorded function calls
// to the MoqDecoder_starGenType moq
type MoqDecoder_starGenType_InputOffset_fnRecorder struct {
	Params    MoqDecoder_starGenType_InputOffset_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDecoder_starGenType_InputOffset_results
	Moq       *MoqDecoder_starGenType
}

// MoqDecoder_starGenType_InputOffset_anyParams isolates the any params
// functions of the Decoder_starGenType type
type MoqDecoder_starGenType_InputOffset_anyParams struct {
	Recorder *MoqDecoder_starGenType_InputOffset_fnRecorder
}

// NewMoqDecoder_starGenType creates a new moq of the Decoder_starGenType type
func NewMoqDecoder_starGenType(scene *moq.Scene, config *moq.Config) *MoqDecoder_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqDecoder_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqDecoder_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				UseNumber             struct{}
				DisallowUnknownFields struct{}
				Decode                struct {
					V moq.ParamIndexing
				}
				Buffered    struct{}
				Token       struct{}
				More        struct{}
				InputOffset struct{}
			}
		}{ParameterIndexing: struct {
			UseNumber             struct{}
			DisallowUnknownFields struct{}
			Decode                struct {
				V moq.ParamIndexing
			}
			Buffered    struct{}
			Token       struct{}
			More        struct{}
			InputOffset struct{}
		}{
			UseNumber:             struct{}{},
			DisallowUnknownFields: struct{}{},
			Decode: struct {
				V moq.ParamIndexing
			}{
				V: moq.ParamIndexByHash,
			},
			Buffered:    struct{}{},
			Token:       struct{}{},
			More:        struct{}{},
			InputOffset: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Decoder_starGenType type
func (m *MoqDecoder_starGenType) Mock() *MoqDecoder_starGenType_mock { return m.Moq }

func (m *MoqDecoder_starGenType_mock) UseNumber() {
	m.Moq.Scene.T.Helper()
	params := MoqDecoder_starGenType_UseNumber_params{}
	var results *MoqDecoder_starGenType_UseNumber_results
	for _, resultsByParams := range m.Moq.ResultsByParams_UseNumber {
		paramsKey := m.Moq.ParamsKey_UseNumber(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_UseNumber(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_UseNumber(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_UseNumber(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqDecoder_starGenType_mock) DisallowUnknownFields() {
	m.Moq.Scene.T.Helper()
	params := MoqDecoder_starGenType_DisallowUnknownFields_params{}
	var results *MoqDecoder_starGenType_DisallowUnknownFields_results
	for _, resultsByParams := range m.Moq.ResultsByParams_DisallowUnknownFields {
		paramsKey := m.Moq.ParamsKey_DisallowUnknownFields(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_DisallowUnknownFields(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_DisallowUnknownFields(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_DisallowUnknownFields(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqDecoder_starGenType_mock) Decode(v interface{}) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqDecoder_starGenType_Decode_params{
		V: v,
	}
	var results *MoqDecoder_starGenType_Decode_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Decode {
		paramsKey := m.Moq.ParamsKey_Decode(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Decode(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Decode(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Decode(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(v)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(v)
	}
	return
}

func (m *MoqDecoder_starGenType_mock) Buffered() (result1 io.Reader) {
	m.Moq.Scene.T.Helper()
	params := MoqDecoder_starGenType_Buffered_params{}
	var results *MoqDecoder_starGenType_Buffered_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Buffered {
		paramsKey := m.Moq.ParamsKey_Buffered(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Buffered(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Buffered(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Buffered(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqDecoder_starGenType_mock) Token() (result1 json.Token, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqDecoder_starGenType_Token_params{}
	var results *MoqDecoder_starGenType_Token_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Token {
		paramsKey := m.Moq.ParamsKey_Token(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Token(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Token(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Token(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqDecoder_starGenType_mock) More() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqDecoder_starGenType_More_params{}
	var results *MoqDecoder_starGenType_More_results
	for _, resultsByParams := range m.Moq.ResultsByParams_More {
		paramsKey := m.Moq.ParamsKey_More(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_More(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_More(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_More(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqDecoder_starGenType_mock) InputOffset() (result1 int64) {
	m.Moq.Scene.T.Helper()
	params := MoqDecoder_starGenType_InputOffset_params{}
	var results *MoqDecoder_starGenType_InputOffset_results
	for _, resultsByParams := range m.Moq.ResultsByParams_InputOffset {
		paramsKey := m.Moq.ParamsKey_InputOffset(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_InputOffset(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_InputOffset(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_InputOffset(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Decoder_starGenType type
func (m *MoqDecoder_starGenType) OnCall() *MoqDecoder_starGenType_recorder {
	return &MoqDecoder_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqDecoder_starGenType_recorder) UseNumber() *MoqDecoder_starGenType_UseNumber_fnRecorder {
	return &MoqDecoder_starGenType_UseNumber_fnRecorder{
		Params:   MoqDecoder_starGenType_UseNumber_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDecoder_starGenType_UseNumber_fnRecorder) Any() *MoqDecoder_starGenType_UseNumber_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UseNumber(r.Params))
		return nil
	}
	return &MoqDecoder_starGenType_UseNumber_anyParams{Recorder: r}
}

func (r *MoqDecoder_starGenType_UseNumber_fnRecorder) Seq() *MoqDecoder_starGenType_UseNumber_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UseNumber(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDecoder_starGenType_UseNumber_fnRecorder) NoSeq() *MoqDecoder_starGenType_UseNumber_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UseNumber(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDecoder_starGenType_UseNumber_fnRecorder) ReturnResults() *MoqDecoder_starGenType_UseNumber_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_UseNumber_doFn
		DoReturnFn MoqDecoder_starGenType_UseNumber_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDecoder_starGenType_UseNumber_fnRecorder) AndDo(fn MoqDecoder_starGenType_UseNumber_doFn) *MoqDecoder_starGenType_UseNumber_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDecoder_starGenType_UseNumber_fnRecorder) DoReturnResults(fn MoqDecoder_starGenType_UseNumber_doReturnFn) *MoqDecoder_starGenType_UseNumber_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_UseNumber_doFn
		DoReturnFn MoqDecoder_starGenType_UseNumber_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDecoder_starGenType_UseNumber_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDecoder_starGenType_UseNumber_resultsByParams
	for n, res := range r.Moq.ResultsByParams_UseNumber {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDecoder_starGenType_UseNumber_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDecoder_starGenType_UseNumber_paramsKey]*MoqDecoder_starGenType_UseNumber_results{},
		}
		r.Moq.ResultsByParams_UseNumber = append(r.Moq.ResultsByParams_UseNumber, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_UseNumber) {
			copy(r.Moq.ResultsByParams_UseNumber[insertAt+1:], r.Moq.ResultsByParams_UseNumber[insertAt:0])
			r.Moq.ResultsByParams_UseNumber[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_UseNumber(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDecoder_starGenType_UseNumber_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDecoder_starGenType_UseNumber_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDecoder_starGenType_UseNumber_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqDecoder_starGenType_UseNumber_doFn
				DoReturnFn MoqDecoder_starGenType_UseNumber_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDecoder_starGenType) PrettyParams_UseNumber(params MoqDecoder_starGenType_UseNumber_params) string {
	return fmt.Sprintf("UseNumber()")
}

func (m *MoqDecoder_starGenType) ParamsKey_UseNumber(params MoqDecoder_starGenType_UseNumber_params, anyParams uint64) MoqDecoder_starGenType_UseNumber_paramsKey {
	m.Scene.T.Helper()
	return MoqDecoder_starGenType_UseNumber_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqDecoder_starGenType_recorder) DisallowUnknownFields() *MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder {
	return &MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder{
		Params:   MoqDecoder_starGenType_DisallowUnknownFields_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder) Any() *MoqDecoder_starGenType_DisallowUnknownFields_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DisallowUnknownFields(r.Params))
		return nil
	}
	return &MoqDecoder_starGenType_DisallowUnknownFields_anyParams{Recorder: r}
}

func (r *MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder) Seq() *MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DisallowUnknownFields(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder) NoSeq() *MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DisallowUnknownFields(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder) ReturnResults() *MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_DisallowUnknownFields_doFn
		DoReturnFn MoqDecoder_starGenType_DisallowUnknownFields_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder) AndDo(fn MoqDecoder_starGenType_DisallowUnknownFields_doFn) *MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder) DoReturnResults(fn MoqDecoder_starGenType_DisallowUnknownFields_doReturnFn) *MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_DisallowUnknownFields_doFn
		DoReturnFn MoqDecoder_starGenType_DisallowUnknownFields_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDecoder_starGenType_DisallowUnknownFields_resultsByParams
	for n, res := range r.Moq.ResultsByParams_DisallowUnknownFields {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDecoder_starGenType_DisallowUnknownFields_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDecoder_starGenType_DisallowUnknownFields_paramsKey]*MoqDecoder_starGenType_DisallowUnknownFields_results{},
		}
		r.Moq.ResultsByParams_DisallowUnknownFields = append(r.Moq.ResultsByParams_DisallowUnknownFields, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_DisallowUnknownFields) {
			copy(r.Moq.ResultsByParams_DisallowUnknownFields[insertAt+1:], r.Moq.ResultsByParams_DisallowUnknownFields[insertAt:0])
			r.Moq.ResultsByParams_DisallowUnknownFields[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_DisallowUnknownFields(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDecoder_starGenType_DisallowUnknownFields_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDecoder_starGenType_DisallowUnknownFields_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqDecoder_starGenType_DisallowUnknownFields_doFn
				DoReturnFn MoqDecoder_starGenType_DisallowUnknownFields_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDecoder_starGenType) PrettyParams_DisallowUnknownFields(params MoqDecoder_starGenType_DisallowUnknownFields_params) string {
	return fmt.Sprintf("DisallowUnknownFields()")
}

func (m *MoqDecoder_starGenType) ParamsKey_DisallowUnknownFields(params MoqDecoder_starGenType_DisallowUnknownFields_params, anyParams uint64) MoqDecoder_starGenType_DisallowUnknownFields_paramsKey {
	m.Scene.T.Helper()
	return MoqDecoder_starGenType_DisallowUnknownFields_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqDecoder_starGenType_recorder) Decode(v interface{}) *MoqDecoder_starGenType_Decode_fnRecorder {
	return &MoqDecoder_starGenType_Decode_fnRecorder{
		Params: MoqDecoder_starGenType_Decode_params{
			V: v,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDecoder_starGenType_Decode_fnRecorder) Any() *MoqDecoder_starGenType_Decode_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Decode(r.Params))
		return nil
	}
	return &MoqDecoder_starGenType_Decode_anyParams{Recorder: r}
}

func (a *MoqDecoder_starGenType_Decode_anyParams) V() *MoqDecoder_starGenType_Decode_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqDecoder_starGenType_Decode_fnRecorder) Seq() *MoqDecoder_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Decode(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDecoder_starGenType_Decode_fnRecorder) NoSeq() *MoqDecoder_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Decode(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDecoder_starGenType_Decode_fnRecorder) ReturnResults(result1 error) *MoqDecoder_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_Decode_doFn
		DoReturnFn MoqDecoder_starGenType_Decode_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDecoder_starGenType_Decode_fnRecorder) AndDo(fn MoqDecoder_starGenType_Decode_doFn) *MoqDecoder_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDecoder_starGenType_Decode_fnRecorder) DoReturnResults(fn MoqDecoder_starGenType_Decode_doReturnFn) *MoqDecoder_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_Decode_doFn
		DoReturnFn MoqDecoder_starGenType_Decode_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDecoder_starGenType_Decode_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDecoder_starGenType_Decode_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Decode {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDecoder_starGenType_Decode_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDecoder_starGenType_Decode_paramsKey]*MoqDecoder_starGenType_Decode_results{},
		}
		r.Moq.ResultsByParams_Decode = append(r.Moq.ResultsByParams_Decode, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Decode) {
			copy(r.Moq.ResultsByParams_Decode[insertAt+1:], r.Moq.ResultsByParams_Decode[insertAt:0])
			r.Moq.ResultsByParams_Decode[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Decode(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDecoder_starGenType_Decode_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDecoder_starGenType_Decode_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDecoder_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqDecoder_starGenType_Decode_doFn
				DoReturnFn MoqDecoder_starGenType_Decode_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDecoder_starGenType) PrettyParams_Decode(params MoqDecoder_starGenType_Decode_params) string {
	return fmt.Sprintf("Decode(%#v)", params.V)
}

func (m *MoqDecoder_starGenType) ParamsKey_Decode(params MoqDecoder_starGenType_Decode_params, anyParams uint64) MoqDecoder_starGenType_Decode_paramsKey {
	m.Scene.T.Helper()
	var vUsed interface{}
	var vUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Decode.V == moq.ParamIndexByValue {
			vUsed = params.V
		} else {
			vUsedHash = hash.DeepHash(params.V)
		}
	}
	return MoqDecoder_starGenType_Decode_paramsKey{
		Params: struct{ V interface{} }{
			V: vUsed,
		},
		Hashes: struct{ V hash.Hash }{
			V: vUsedHash,
		},
	}
}

func (m *MoqDecoder_starGenType_recorder) Buffered() *MoqDecoder_starGenType_Buffered_fnRecorder {
	return &MoqDecoder_starGenType_Buffered_fnRecorder{
		Params:   MoqDecoder_starGenType_Buffered_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDecoder_starGenType_Buffered_fnRecorder) Any() *MoqDecoder_starGenType_Buffered_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Buffered(r.Params))
		return nil
	}
	return &MoqDecoder_starGenType_Buffered_anyParams{Recorder: r}
}

func (r *MoqDecoder_starGenType_Buffered_fnRecorder) Seq() *MoqDecoder_starGenType_Buffered_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Buffered(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDecoder_starGenType_Buffered_fnRecorder) NoSeq() *MoqDecoder_starGenType_Buffered_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Buffered(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDecoder_starGenType_Buffered_fnRecorder) ReturnResults(result1 io.Reader) *MoqDecoder_starGenType_Buffered_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.Reader
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_Buffered_doFn
		DoReturnFn MoqDecoder_starGenType_Buffered_doReturnFn
	}{
		Values: &struct {
			Result1 io.Reader
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDecoder_starGenType_Buffered_fnRecorder) AndDo(fn MoqDecoder_starGenType_Buffered_doFn) *MoqDecoder_starGenType_Buffered_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDecoder_starGenType_Buffered_fnRecorder) DoReturnResults(fn MoqDecoder_starGenType_Buffered_doReturnFn) *MoqDecoder_starGenType_Buffered_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.Reader
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_Buffered_doFn
		DoReturnFn MoqDecoder_starGenType_Buffered_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDecoder_starGenType_Buffered_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDecoder_starGenType_Buffered_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Buffered {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDecoder_starGenType_Buffered_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDecoder_starGenType_Buffered_paramsKey]*MoqDecoder_starGenType_Buffered_results{},
		}
		r.Moq.ResultsByParams_Buffered = append(r.Moq.ResultsByParams_Buffered, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Buffered) {
			copy(r.Moq.ResultsByParams_Buffered[insertAt+1:], r.Moq.ResultsByParams_Buffered[insertAt:0])
			r.Moq.ResultsByParams_Buffered[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Buffered(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDecoder_starGenType_Buffered_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDecoder_starGenType_Buffered_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDecoder_starGenType_Buffered_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 io.Reader
				}
				Sequence   uint32
				DoFn       MoqDecoder_starGenType_Buffered_doFn
				DoReturnFn MoqDecoder_starGenType_Buffered_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDecoder_starGenType) PrettyParams_Buffered(params MoqDecoder_starGenType_Buffered_params) string {
	return fmt.Sprintf("Buffered()")
}

func (m *MoqDecoder_starGenType) ParamsKey_Buffered(params MoqDecoder_starGenType_Buffered_params, anyParams uint64) MoqDecoder_starGenType_Buffered_paramsKey {
	m.Scene.T.Helper()
	return MoqDecoder_starGenType_Buffered_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqDecoder_starGenType_recorder) Token() *MoqDecoder_starGenType_Token_fnRecorder {
	return &MoqDecoder_starGenType_Token_fnRecorder{
		Params:   MoqDecoder_starGenType_Token_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDecoder_starGenType_Token_fnRecorder) Any() *MoqDecoder_starGenType_Token_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Token(r.Params))
		return nil
	}
	return &MoqDecoder_starGenType_Token_anyParams{Recorder: r}
}

func (r *MoqDecoder_starGenType_Token_fnRecorder) Seq() *MoqDecoder_starGenType_Token_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Token(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDecoder_starGenType_Token_fnRecorder) NoSeq() *MoqDecoder_starGenType_Token_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Token(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDecoder_starGenType_Token_fnRecorder) ReturnResults(result1 json.Token, result2 error) *MoqDecoder_starGenType_Token_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 json.Token
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_Token_doFn
		DoReturnFn MoqDecoder_starGenType_Token_doReturnFn
	}{
		Values: &struct {
			Result1 json.Token
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDecoder_starGenType_Token_fnRecorder) AndDo(fn MoqDecoder_starGenType_Token_doFn) *MoqDecoder_starGenType_Token_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDecoder_starGenType_Token_fnRecorder) DoReturnResults(fn MoqDecoder_starGenType_Token_doReturnFn) *MoqDecoder_starGenType_Token_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 json.Token
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_Token_doFn
		DoReturnFn MoqDecoder_starGenType_Token_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDecoder_starGenType_Token_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDecoder_starGenType_Token_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Token {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDecoder_starGenType_Token_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDecoder_starGenType_Token_paramsKey]*MoqDecoder_starGenType_Token_results{},
		}
		r.Moq.ResultsByParams_Token = append(r.Moq.ResultsByParams_Token, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Token) {
			copy(r.Moq.ResultsByParams_Token[insertAt+1:], r.Moq.ResultsByParams_Token[insertAt:0])
			r.Moq.ResultsByParams_Token[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Token(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDecoder_starGenType_Token_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDecoder_starGenType_Token_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDecoder_starGenType_Token_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 json.Token
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqDecoder_starGenType_Token_doFn
				DoReturnFn MoqDecoder_starGenType_Token_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDecoder_starGenType) PrettyParams_Token(params MoqDecoder_starGenType_Token_params) string {
	return fmt.Sprintf("Token()")
}

func (m *MoqDecoder_starGenType) ParamsKey_Token(params MoqDecoder_starGenType_Token_params, anyParams uint64) MoqDecoder_starGenType_Token_paramsKey {
	m.Scene.T.Helper()
	return MoqDecoder_starGenType_Token_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqDecoder_starGenType_recorder) More() *MoqDecoder_starGenType_More_fnRecorder {
	return &MoqDecoder_starGenType_More_fnRecorder{
		Params:   MoqDecoder_starGenType_More_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDecoder_starGenType_More_fnRecorder) Any() *MoqDecoder_starGenType_More_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_More(r.Params))
		return nil
	}
	return &MoqDecoder_starGenType_More_anyParams{Recorder: r}
}

func (r *MoqDecoder_starGenType_More_fnRecorder) Seq() *MoqDecoder_starGenType_More_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_More(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDecoder_starGenType_More_fnRecorder) NoSeq() *MoqDecoder_starGenType_More_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_More(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDecoder_starGenType_More_fnRecorder) ReturnResults(result1 bool) *MoqDecoder_starGenType_More_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_More_doFn
		DoReturnFn MoqDecoder_starGenType_More_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDecoder_starGenType_More_fnRecorder) AndDo(fn MoqDecoder_starGenType_More_doFn) *MoqDecoder_starGenType_More_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDecoder_starGenType_More_fnRecorder) DoReturnResults(fn MoqDecoder_starGenType_More_doReturnFn) *MoqDecoder_starGenType_More_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_More_doFn
		DoReturnFn MoqDecoder_starGenType_More_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDecoder_starGenType_More_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDecoder_starGenType_More_resultsByParams
	for n, res := range r.Moq.ResultsByParams_More {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDecoder_starGenType_More_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDecoder_starGenType_More_paramsKey]*MoqDecoder_starGenType_More_results{},
		}
		r.Moq.ResultsByParams_More = append(r.Moq.ResultsByParams_More, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_More) {
			copy(r.Moq.ResultsByParams_More[insertAt+1:], r.Moq.ResultsByParams_More[insertAt:0])
			r.Moq.ResultsByParams_More[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_More(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDecoder_starGenType_More_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDecoder_starGenType_More_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDecoder_starGenType_More_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqDecoder_starGenType_More_doFn
				DoReturnFn MoqDecoder_starGenType_More_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDecoder_starGenType) PrettyParams_More(params MoqDecoder_starGenType_More_params) string {
	return fmt.Sprintf("More()")
}

func (m *MoqDecoder_starGenType) ParamsKey_More(params MoqDecoder_starGenType_More_params, anyParams uint64) MoqDecoder_starGenType_More_paramsKey {
	m.Scene.T.Helper()
	return MoqDecoder_starGenType_More_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqDecoder_starGenType_recorder) InputOffset() *MoqDecoder_starGenType_InputOffset_fnRecorder {
	return &MoqDecoder_starGenType_InputOffset_fnRecorder{
		Params:   MoqDecoder_starGenType_InputOffset_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDecoder_starGenType_InputOffset_fnRecorder) Any() *MoqDecoder_starGenType_InputOffset_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_InputOffset(r.Params))
		return nil
	}
	return &MoqDecoder_starGenType_InputOffset_anyParams{Recorder: r}
}

func (r *MoqDecoder_starGenType_InputOffset_fnRecorder) Seq() *MoqDecoder_starGenType_InputOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_InputOffset(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDecoder_starGenType_InputOffset_fnRecorder) NoSeq() *MoqDecoder_starGenType_InputOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_InputOffset(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDecoder_starGenType_InputOffset_fnRecorder) ReturnResults(result1 int64) *MoqDecoder_starGenType_InputOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_InputOffset_doFn
		DoReturnFn MoqDecoder_starGenType_InputOffset_doReturnFn
	}{
		Values: &struct {
			Result1 int64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDecoder_starGenType_InputOffset_fnRecorder) AndDo(fn MoqDecoder_starGenType_InputOffset_doFn) *MoqDecoder_starGenType_InputOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDecoder_starGenType_InputOffset_fnRecorder) DoReturnResults(fn MoqDecoder_starGenType_InputOffset_doReturnFn) *MoqDecoder_starGenType_InputOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int64
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_InputOffset_doFn
		DoReturnFn MoqDecoder_starGenType_InputOffset_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDecoder_starGenType_InputOffset_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDecoder_starGenType_InputOffset_resultsByParams
	for n, res := range r.Moq.ResultsByParams_InputOffset {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDecoder_starGenType_InputOffset_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDecoder_starGenType_InputOffset_paramsKey]*MoqDecoder_starGenType_InputOffset_results{},
		}
		r.Moq.ResultsByParams_InputOffset = append(r.Moq.ResultsByParams_InputOffset, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_InputOffset) {
			copy(r.Moq.ResultsByParams_InputOffset[insertAt+1:], r.Moq.ResultsByParams_InputOffset[insertAt:0])
			r.Moq.ResultsByParams_InputOffset[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_InputOffset(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDecoder_starGenType_InputOffset_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDecoder_starGenType_InputOffset_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDecoder_starGenType_InputOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int64
				}
				Sequence   uint32
				DoFn       MoqDecoder_starGenType_InputOffset_doFn
				DoReturnFn MoqDecoder_starGenType_InputOffset_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDecoder_starGenType) PrettyParams_InputOffset(params MoqDecoder_starGenType_InputOffset_params) string {
	return fmt.Sprintf("InputOffset()")
}

func (m *MoqDecoder_starGenType) ParamsKey_InputOffset(params MoqDecoder_starGenType_InputOffset_params, anyParams uint64) MoqDecoder_starGenType_InputOffset_paramsKey {
	m.Scene.T.Helper()
	return MoqDecoder_starGenType_InputOffset_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqDecoder_starGenType) Reset() {
	m.ResultsByParams_UseNumber = nil
	m.ResultsByParams_DisallowUnknownFields = nil
	m.ResultsByParams_Decode = nil
	m.ResultsByParams_Buffered = nil
	m.ResultsByParams_Token = nil
	m.ResultsByParams_More = nil
	m.ResultsByParams_InputOffset = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqDecoder_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_UseNumber {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_UseNumber(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_DisallowUnknownFields {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_DisallowUnknownFields(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Decode {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Decode(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Buffered {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Buffered(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Token {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Token(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_More {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_More(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_InputOffset {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_InputOffset(results.Params))
			}
		}
	}
}
