// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package xml

import (
	"encoding/xml"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that xml.Encoder_starGenType is mocked
// completely
var _ Encoder_starGenType = (*MoqEncoder_starGenType_mock)(nil)

// Encoder_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Encoder_starGenType interface {
	Indent(prefix, indent string)
	Encode(v any) error
	EncodeElement(v any, start xml.StartElement) error
	EncodeToken(t xml.Token) error
	Flush() error
}

// MoqEncoder_starGenType holds the state of a moq of the Encoder_starGenType
// type
type MoqEncoder_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqEncoder_starGenType_mock

	ResultsByParams_Indent        []MoqEncoder_starGenType_Indent_resultsByParams
	ResultsByParams_Encode        []MoqEncoder_starGenType_Encode_resultsByParams
	ResultsByParams_EncodeElement []MoqEncoder_starGenType_EncodeElement_resultsByParams
	ResultsByParams_EncodeToken   []MoqEncoder_starGenType_EncodeToken_resultsByParams
	ResultsByParams_Flush         []MoqEncoder_starGenType_Flush_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Indent struct {
				Prefix moq.ParamIndexing
				Indent moq.ParamIndexing
			}
			Encode struct {
				V moq.ParamIndexing
			}
			EncodeElement struct {
				V     moq.ParamIndexing
				Start moq.ParamIndexing
			}
			EncodeToken struct {
				T moq.ParamIndexing
			}
			Flush struct{}
		}
	}
}

// MoqEncoder_starGenType_mock isolates the mock interface of the
// Encoder_starGenType type
type MoqEncoder_starGenType_mock struct {
	Moq *MoqEncoder_starGenType
}

// MoqEncoder_starGenType_recorder isolates the recorder interface of the
// Encoder_starGenType type
type MoqEncoder_starGenType_recorder struct {
	Moq *MoqEncoder_starGenType
}

// MoqEncoder_starGenType_Indent_params holds the params of the
// Encoder_starGenType type
type MoqEncoder_starGenType_Indent_params struct{ Prefix, Indent string }

// MoqEncoder_starGenType_Indent_paramsKey holds the map key params of the
// Encoder_starGenType type
type MoqEncoder_starGenType_Indent_paramsKey struct {
	Params struct{ Prefix, Indent string }
	Hashes struct{ Prefix, Indent hash.Hash }
}

// MoqEncoder_starGenType_Indent_resultsByParams contains the results for a
// given set of parameters for the Encoder_starGenType type
type MoqEncoder_starGenType_Indent_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqEncoder_starGenType_Indent_paramsKey]*MoqEncoder_starGenType_Indent_results
}

// MoqEncoder_starGenType_Indent_doFn defines the type of function needed when
// calling AndDo for the Encoder_starGenType type
type MoqEncoder_starGenType_Indent_doFn func(prefix, indent string)

// MoqEncoder_starGenType_Indent_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Encoder_starGenType type
type MoqEncoder_starGenType_Indent_doReturnFn func(prefix, indent string)

// MoqEncoder_starGenType_Indent_results holds the results of the
// Encoder_starGenType type
type MoqEncoder_starGenType_Indent_results struct {
	Params  MoqEncoder_starGenType_Indent_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqEncoder_starGenType_Indent_doFn
		DoReturnFn MoqEncoder_starGenType_Indent_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqEncoder_starGenType_Indent_fnRecorder routes recorded function calls to
// the MoqEncoder_starGenType moq
type MoqEncoder_starGenType_Indent_fnRecorder struct {
	Params    MoqEncoder_starGenType_Indent_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqEncoder_starGenType_Indent_results
	Moq       *MoqEncoder_starGenType
}

// MoqEncoder_starGenType_Indent_anyParams isolates the any params functions of
// the Encoder_starGenType type
type MoqEncoder_starGenType_Indent_anyParams struct {
	Recorder *MoqEncoder_starGenType_Indent_fnRecorder
}

// MoqEncoder_starGenType_Encode_params holds the params of the
// Encoder_starGenType type
type MoqEncoder_starGenType_Encode_params struct{ V any }

// MoqEncoder_starGenType_Encode_paramsKey holds the map key params of the
// Encoder_starGenType type
type MoqEncoder_starGenType_Encode_paramsKey struct {
	Params struct{ V any }
	Hashes struct{ V hash.Hash }
}

// MoqEncoder_starGenType_Encode_resultsByParams contains the results for a
// given set of parameters for the Encoder_starGenType type
type MoqEncoder_starGenType_Encode_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqEncoder_starGenType_Encode_paramsKey]*MoqEncoder_starGenType_Encode_results
}

// MoqEncoder_starGenType_Encode_doFn defines the type of function needed when
// calling AndDo for the Encoder_starGenType type
type MoqEncoder_starGenType_Encode_doFn func(v any)

// MoqEncoder_starGenType_Encode_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Encoder_starGenType type
type MoqEncoder_starGenType_Encode_doReturnFn func(v any) error

// MoqEncoder_starGenType_Encode_results holds the results of the
// Encoder_starGenType type
type MoqEncoder_starGenType_Encode_results struct {
	Params  MoqEncoder_starGenType_Encode_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqEncoder_starGenType_Encode_doFn
		DoReturnFn MoqEncoder_starGenType_Encode_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqEncoder_starGenType_Encode_fnRecorder routes recorded function calls to
// the MoqEncoder_starGenType moq
type MoqEncoder_starGenType_Encode_fnRecorder struct {
	Params    MoqEncoder_starGenType_Encode_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqEncoder_starGenType_Encode_results
	Moq       *MoqEncoder_starGenType
}

// MoqEncoder_starGenType_Encode_anyParams isolates the any params functions of
// the Encoder_starGenType type
type MoqEncoder_starGenType_Encode_anyParams struct {
	Recorder *MoqEncoder_starGenType_Encode_fnRecorder
}

// MoqEncoder_starGenType_EncodeElement_params holds the params of the
// Encoder_starGenType type
type MoqEncoder_starGenType_EncodeElement_params struct {
	V     any
	Start xml.StartElement
}

// MoqEncoder_starGenType_EncodeElement_paramsKey holds the map key params of
// the Encoder_starGenType type
type MoqEncoder_starGenType_EncodeElement_paramsKey struct {
	Params struct{ V any }
	Hashes struct {
		V     hash.Hash
		Start hash.Hash
	}
}

// MoqEncoder_starGenType_EncodeElement_resultsByParams contains the results
// for a given set of parameters for the Encoder_starGenType type
type MoqEncoder_starGenType_EncodeElement_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqEncoder_starGenType_EncodeElement_paramsKey]*MoqEncoder_starGenType_EncodeElement_results
}

// MoqEncoder_starGenType_EncodeElement_doFn defines the type of function
// needed when calling AndDo for the Encoder_starGenType type
type MoqEncoder_starGenType_EncodeElement_doFn func(v any, start xml.StartElement)

// MoqEncoder_starGenType_EncodeElement_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Encoder_starGenType type
type MoqEncoder_starGenType_EncodeElement_doReturnFn func(v any, start xml.StartElement) error

// MoqEncoder_starGenType_EncodeElement_results holds the results of the
// Encoder_starGenType type
type MoqEncoder_starGenType_EncodeElement_results struct {
	Params  MoqEncoder_starGenType_EncodeElement_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqEncoder_starGenType_EncodeElement_doFn
		DoReturnFn MoqEncoder_starGenType_EncodeElement_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqEncoder_starGenType_EncodeElement_fnRecorder routes recorded function
// calls to the MoqEncoder_starGenType moq
type MoqEncoder_starGenType_EncodeElement_fnRecorder struct {
	Params    MoqEncoder_starGenType_EncodeElement_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqEncoder_starGenType_EncodeElement_results
	Moq       *MoqEncoder_starGenType
}

// MoqEncoder_starGenType_EncodeElement_anyParams isolates the any params
// functions of the Encoder_starGenType type
type MoqEncoder_starGenType_EncodeElement_anyParams struct {
	Recorder *MoqEncoder_starGenType_EncodeElement_fnRecorder
}

// MoqEncoder_starGenType_EncodeToken_params holds the params of the
// Encoder_starGenType type
type MoqEncoder_starGenType_EncodeToken_params struct{ T xml.Token }

// MoqEncoder_starGenType_EncodeToken_paramsKey holds the map key params of the
// Encoder_starGenType type
type MoqEncoder_starGenType_EncodeToken_paramsKey struct {
	Params struct{ T xml.Token }
	Hashes struct{ T hash.Hash }
}

// MoqEncoder_starGenType_EncodeToken_resultsByParams contains the results for
// a given set of parameters for the Encoder_starGenType type
type MoqEncoder_starGenType_EncodeToken_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqEncoder_starGenType_EncodeToken_paramsKey]*MoqEncoder_starGenType_EncodeToken_results
}

// MoqEncoder_starGenType_EncodeToken_doFn defines the type of function needed
// when calling AndDo for the Encoder_starGenType type
type MoqEncoder_starGenType_EncodeToken_doFn func(t xml.Token)

// MoqEncoder_starGenType_EncodeToken_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Encoder_starGenType type
type MoqEncoder_starGenType_EncodeToken_doReturnFn func(t xml.Token) error

// MoqEncoder_starGenType_EncodeToken_results holds the results of the
// Encoder_starGenType type
type MoqEncoder_starGenType_EncodeToken_results struct {
	Params  MoqEncoder_starGenType_EncodeToken_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqEncoder_starGenType_EncodeToken_doFn
		DoReturnFn MoqEncoder_starGenType_EncodeToken_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqEncoder_starGenType_EncodeToken_fnRecorder routes recorded function calls
// to the MoqEncoder_starGenType moq
type MoqEncoder_starGenType_EncodeToken_fnRecorder struct {
	Params    MoqEncoder_starGenType_EncodeToken_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqEncoder_starGenType_EncodeToken_results
	Moq       *MoqEncoder_starGenType
}

// MoqEncoder_starGenType_EncodeToken_anyParams isolates the any params
// functions of the Encoder_starGenType type
type MoqEncoder_starGenType_EncodeToken_anyParams struct {
	Recorder *MoqEncoder_starGenType_EncodeToken_fnRecorder
}

// MoqEncoder_starGenType_Flush_params holds the params of the
// Encoder_starGenType type
type MoqEncoder_starGenType_Flush_params struct{}

// MoqEncoder_starGenType_Flush_paramsKey holds the map key params of the
// Encoder_starGenType type
type MoqEncoder_starGenType_Flush_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqEncoder_starGenType_Flush_resultsByParams contains the results for a
// given set of parameters for the Encoder_starGenType type
type MoqEncoder_starGenType_Flush_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqEncoder_starGenType_Flush_paramsKey]*MoqEncoder_starGenType_Flush_results
}

// MoqEncoder_starGenType_Flush_doFn defines the type of function needed when
// calling AndDo for the Encoder_starGenType type
type MoqEncoder_starGenType_Flush_doFn func()

// MoqEncoder_starGenType_Flush_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Encoder_starGenType type
type MoqEncoder_starGenType_Flush_doReturnFn func() error

// MoqEncoder_starGenType_Flush_results holds the results of the
// Encoder_starGenType type
type MoqEncoder_starGenType_Flush_results struct {
	Params  MoqEncoder_starGenType_Flush_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqEncoder_starGenType_Flush_doFn
		DoReturnFn MoqEncoder_starGenType_Flush_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqEncoder_starGenType_Flush_fnRecorder routes recorded function calls to
// the MoqEncoder_starGenType moq
type MoqEncoder_starGenType_Flush_fnRecorder struct {
	Params    MoqEncoder_starGenType_Flush_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqEncoder_starGenType_Flush_results
	Moq       *MoqEncoder_starGenType
}

// MoqEncoder_starGenType_Flush_anyParams isolates the any params functions of
// the Encoder_starGenType type
type MoqEncoder_starGenType_Flush_anyParams struct {
	Recorder *MoqEncoder_starGenType_Flush_fnRecorder
}

// NewMoqEncoder_starGenType creates a new moq of the Encoder_starGenType type
func NewMoqEncoder_starGenType(scene *moq.Scene, config *moq.Config) *MoqEncoder_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqEncoder_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqEncoder_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Indent struct {
					Prefix moq.ParamIndexing
					Indent moq.ParamIndexing
				}
				Encode struct {
					V moq.ParamIndexing
				}
				EncodeElement struct {
					V     moq.ParamIndexing
					Start moq.ParamIndexing
				}
				EncodeToken struct {
					T moq.ParamIndexing
				}
				Flush struct{}
			}
		}{ParameterIndexing: struct {
			Indent struct {
				Prefix moq.ParamIndexing
				Indent moq.ParamIndexing
			}
			Encode struct {
				V moq.ParamIndexing
			}
			EncodeElement struct {
				V     moq.ParamIndexing
				Start moq.ParamIndexing
			}
			EncodeToken struct {
				T moq.ParamIndexing
			}
			Flush struct{}
		}{
			Indent: struct {
				Prefix moq.ParamIndexing
				Indent moq.ParamIndexing
			}{
				Prefix: moq.ParamIndexByValue,
				Indent: moq.ParamIndexByValue,
			},
			Encode: struct {
				V moq.ParamIndexing
			}{
				V: moq.ParamIndexByValue,
			},
			EncodeElement: struct {
				V     moq.ParamIndexing
				Start moq.ParamIndexing
			}{
				V:     moq.ParamIndexByValue,
				Start: moq.ParamIndexByHash,
			},
			EncodeToken: struct {
				T moq.ParamIndexing
			}{
				T: moq.ParamIndexByValue,
			},
			Flush: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Encoder_starGenType type
func (m *MoqEncoder_starGenType) Mock() *MoqEncoder_starGenType_mock { return m.Moq }

func (m *MoqEncoder_starGenType_mock) Indent(prefix, indent string) {
	m.Moq.Scene.T.Helper()
	params := MoqEncoder_starGenType_Indent_params{
		Prefix: prefix,
		Indent: indent,
	}
	var results *MoqEncoder_starGenType_Indent_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Indent {
		paramsKey := m.Moq.ParamsKey_Indent(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Indent(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Indent(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Indent(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(prefix, indent)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(prefix, indent)
	}
	return
}

func (m *MoqEncoder_starGenType_mock) Encode(v any) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqEncoder_starGenType_Encode_params{
		V: v,
	}
	var results *MoqEncoder_starGenType_Encode_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Encode {
		paramsKey := m.Moq.ParamsKey_Encode(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Encode(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Encode(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Encode(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(v)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(v)
	}
	return
}

func (m *MoqEncoder_starGenType_mock) EncodeElement(v any, start xml.StartElement) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqEncoder_starGenType_EncodeElement_params{
		V:     v,
		Start: start,
	}
	var results *MoqEncoder_starGenType_EncodeElement_results
	for _, resultsByParams := range m.Moq.ResultsByParams_EncodeElement {
		paramsKey := m.Moq.ParamsKey_EncodeElement(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_EncodeElement(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_EncodeElement(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_EncodeElement(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(v, start)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(v, start)
	}
	return
}

func (m *MoqEncoder_starGenType_mock) EncodeToken(t xml.Token) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqEncoder_starGenType_EncodeToken_params{
		T: t,
	}
	var results *MoqEncoder_starGenType_EncodeToken_results
	for _, resultsByParams := range m.Moq.ResultsByParams_EncodeToken {
		paramsKey := m.Moq.ParamsKey_EncodeToken(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_EncodeToken(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_EncodeToken(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_EncodeToken(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(t)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(t)
	}
	return
}

func (m *MoqEncoder_starGenType_mock) Flush() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqEncoder_starGenType_Flush_params{}
	var results *MoqEncoder_starGenType_Flush_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Flush {
		paramsKey := m.Moq.ParamsKey_Flush(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Flush(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Flush(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Flush(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Encoder_starGenType type
func (m *MoqEncoder_starGenType) OnCall() *MoqEncoder_starGenType_recorder {
	return &MoqEncoder_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqEncoder_starGenType_recorder) Indent(prefix, indent string) *MoqEncoder_starGenType_Indent_fnRecorder {
	return &MoqEncoder_starGenType_Indent_fnRecorder{
		Params: MoqEncoder_starGenType_Indent_params{
			Prefix: prefix,
			Indent: indent,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqEncoder_starGenType_Indent_fnRecorder) Any() *MoqEncoder_starGenType_Indent_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Indent(r.Params))
		return nil
	}
	return &MoqEncoder_starGenType_Indent_anyParams{Recorder: r}
}

func (a *MoqEncoder_starGenType_Indent_anyParams) Prefix() *MoqEncoder_starGenType_Indent_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqEncoder_starGenType_Indent_anyParams) Indent() *MoqEncoder_starGenType_Indent_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqEncoder_starGenType_Indent_fnRecorder) Seq() *MoqEncoder_starGenType_Indent_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Indent(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqEncoder_starGenType_Indent_fnRecorder) NoSeq() *MoqEncoder_starGenType_Indent_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Indent(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqEncoder_starGenType_Indent_fnRecorder) ReturnResults() *MoqEncoder_starGenType_Indent_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqEncoder_starGenType_Indent_doFn
		DoReturnFn MoqEncoder_starGenType_Indent_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqEncoder_starGenType_Indent_fnRecorder) AndDo(fn MoqEncoder_starGenType_Indent_doFn) *MoqEncoder_starGenType_Indent_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqEncoder_starGenType_Indent_fnRecorder) DoReturnResults(fn MoqEncoder_starGenType_Indent_doReturnFn) *MoqEncoder_starGenType_Indent_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqEncoder_starGenType_Indent_doFn
		DoReturnFn MoqEncoder_starGenType_Indent_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqEncoder_starGenType_Indent_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqEncoder_starGenType_Indent_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Indent {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqEncoder_starGenType_Indent_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqEncoder_starGenType_Indent_paramsKey]*MoqEncoder_starGenType_Indent_results{},
		}
		r.Moq.ResultsByParams_Indent = append(r.Moq.ResultsByParams_Indent, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Indent) {
			copy(r.Moq.ResultsByParams_Indent[insertAt+1:], r.Moq.ResultsByParams_Indent[insertAt:0])
			r.Moq.ResultsByParams_Indent[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Indent(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqEncoder_starGenType_Indent_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqEncoder_starGenType_Indent_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqEncoder_starGenType_Indent_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqEncoder_starGenType_Indent_doFn
				DoReturnFn MoqEncoder_starGenType_Indent_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqEncoder_starGenType) PrettyParams_Indent(params MoqEncoder_starGenType_Indent_params) string {
	return fmt.Sprintf("Indent(%#v, %#v)", params.Prefix, params.Indent)
}

func (m *MoqEncoder_starGenType) ParamsKey_Indent(params MoqEncoder_starGenType_Indent_params, anyParams uint64) MoqEncoder_starGenType_Indent_paramsKey {
	m.Scene.T.Helper()
	var prefixUsed string
	var prefixUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Indent.Prefix == moq.ParamIndexByValue {
			prefixUsed = params.Prefix
		} else {
			prefixUsedHash = hash.DeepHash(params.Prefix)
		}
	}
	var indentUsed string
	var indentUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Indent.Indent == moq.ParamIndexByValue {
			indentUsed = params.Indent
		} else {
			indentUsedHash = hash.DeepHash(params.Indent)
		}
	}
	return MoqEncoder_starGenType_Indent_paramsKey{
		Params: struct{ Prefix, Indent string }{
			Prefix: prefixUsed,
			Indent: indentUsed,
		},
		Hashes: struct{ Prefix, Indent hash.Hash }{
			Prefix: prefixUsedHash,
			Indent: indentUsedHash,
		},
	}
}

func (m *MoqEncoder_starGenType_recorder) Encode(v any) *MoqEncoder_starGenType_Encode_fnRecorder {
	return &MoqEncoder_starGenType_Encode_fnRecorder{
		Params: MoqEncoder_starGenType_Encode_params{
			V: v,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqEncoder_starGenType_Encode_fnRecorder) Any() *MoqEncoder_starGenType_Encode_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Encode(r.Params))
		return nil
	}
	return &MoqEncoder_starGenType_Encode_anyParams{Recorder: r}
}

func (a *MoqEncoder_starGenType_Encode_anyParams) V() *MoqEncoder_starGenType_Encode_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqEncoder_starGenType_Encode_fnRecorder) Seq() *MoqEncoder_starGenType_Encode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Encode(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqEncoder_starGenType_Encode_fnRecorder) NoSeq() *MoqEncoder_starGenType_Encode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Encode(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqEncoder_starGenType_Encode_fnRecorder) ReturnResults(result1 error) *MoqEncoder_starGenType_Encode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqEncoder_starGenType_Encode_doFn
		DoReturnFn MoqEncoder_starGenType_Encode_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqEncoder_starGenType_Encode_fnRecorder) AndDo(fn MoqEncoder_starGenType_Encode_doFn) *MoqEncoder_starGenType_Encode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqEncoder_starGenType_Encode_fnRecorder) DoReturnResults(fn MoqEncoder_starGenType_Encode_doReturnFn) *MoqEncoder_starGenType_Encode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqEncoder_starGenType_Encode_doFn
		DoReturnFn MoqEncoder_starGenType_Encode_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqEncoder_starGenType_Encode_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqEncoder_starGenType_Encode_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Encode {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqEncoder_starGenType_Encode_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqEncoder_starGenType_Encode_paramsKey]*MoqEncoder_starGenType_Encode_results{},
		}
		r.Moq.ResultsByParams_Encode = append(r.Moq.ResultsByParams_Encode, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Encode) {
			copy(r.Moq.ResultsByParams_Encode[insertAt+1:], r.Moq.ResultsByParams_Encode[insertAt:0])
			r.Moq.ResultsByParams_Encode[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Encode(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqEncoder_starGenType_Encode_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqEncoder_starGenType_Encode_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqEncoder_starGenType_Encode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqEncoder_starGenType_Encode_doFn
				DoReturnFn MoqEncoder_starGenType_Encode_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqEncoder_starGenType) PrettyParams_Encode(params MoqEncoder_starGenType_Encode_params) string {
	return fmt.Sprintf("Encode(%#v)", params.V)
}

func (m *MoqEncoder_starGenType) ParamsKey_Encode(params MoqEncoder_starGenType_Encode_params, anyParams uint64) MoqEncoder_starGenType_Encode_paramsKey {
	m.Scene.T.Helper()
	var vUsed any
	var vUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Encode.V == moq.ParamIndexByValue {
			vUsed = params.V
		} else {
			vUsedHash = hash.DeepHash(params.V)
		}
	}
	return MoqEncoder_starGenType_Encode_paramsKey{
		Params: struct{ V any }{
			V: vUsed,
		},
		Hashes: struct{ V hash.Hash }{
			V: vUsedHash,
		},
	}
}

func (m *MoqEncoder_starGenType_recorder) EncodeElement(v any, start xml.StartElement) *MoqEncoder_starGenType_EncodeElement_fnRecorder {
	return &MoqEncoder_starGenType_EncodeElement_fnRecorder{
		Params: MoqEncoder_starGenType_EncodeElement_params{
			V:     v,
			Start: start,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqEncoder_starGenType_EncodeElement_fnRecorder) Any() *MoqEncoder_starGenType_EncodeElement_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_EncodeElement(r.Params))
		return nil
	}
	return &MoqEncoder_starGenType_EncodeElement_anyParams{Recorder: r}
}

func (a *MoqEncoder_starGenType_EncodeElement_anyParams) V() *MoqEncoder_starGenType_EncodeElement_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqEncoder_starGenType_EncodeElement_anyParams) Start() *MoqEncoder_starGenType_EncodeElement_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqEncoder_starGenType_EncodeElement_fnRecorder) Seq() *MoqEncoder_starGenType_EncodeElement_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_EncodeElement(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqEncoder_starGenType_EncodeElement_fnRecorder) NoSeq() *MoqEncoder_starGenType_EncodeElement_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_EncodeElement(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqEncoder_starGenType_EncodeElement_fnRecorder) ReturnResults(result1 error) *MoqEncoder_starGenType_EncodeElement_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqEncoder_starGenType_EncodeElement_doFn
		DoReturnFn MoqEncoder_starGenType_EncodeElement_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqEncoder_starGenType_EncodeElement_fnRecorder) AndDo(fn MoqEncoder_starGenType_EncodeElement_doFn) *MoqEncoder_starGenType_EncodeElement_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqEncoder_starGenType_EncodeElement_fnRecorder) DoReturnResults(fn MoqEncoder_starGenType_EncodeElement_doReturnFn) *MoqEncoder_starGenType_EncodeElement_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqEncoder_starGenType_EncodeElement_doFn
		DoReturnFn MoqEncoder_starGenType_EncodeElement_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqEncoder_starGenType_EncodeElement_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqEncoder_starGenType_EncodeElement_resultsByParams
	for n, res := range r.Moq.ResultsByParams_EncodeElement {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqEncoder_starGenType_EncodeElement_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqEncoder_starGenType_EncodeElement_paramsKey]*MoqEncoder_starGenType_EncodeElement_results{},
		}
		r.Moq.ResultsByParams_EncodeElement = append(r.Moq.ResultsByParams_EncodeElement, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_EncodeElement) {
			copy(r.Moq.ResultsByParams_EncodeElement[insertAt+1:], r.Moq.ResultsByParams_EncodeElement[insertAt:0])
			r.Moq.ResultsByParams_EncodeElement[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_EncodeElement(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqEncoder_starGenType_EncodeElement_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqEncoder_starGenType_EncodeElement_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqEncoder_starGenType_EncodeElement_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqEncoder_starGenType_EncodeElement_doFn
				DoReturnFn MoqEncoder_starGenType_EncodeElement_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqEncoder_starGenType) PrettyParams_EncodeElement(params MoqEncoder_starGenType_EncodeElement_params) string {
	return fmt.Sprintf("EncodeElement(%#v, %#v)", params.V, params.Start)
}

func (m *MoqEncoder_starGenType) ParamsKey_EncodeElement(params MoqEncoder_starGenType_EncodeElement_params, anyParams uint64) MoqEncoder_starGenType_EncodeElement_paramsKey {
	m.Scene.T.Helper()
	var vUsed any
	var vUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.EncodeElement.V == moq.ParamIndexByValue {
			vUsed = params.V
		} else {
			vUsedHash = hash.DeepHash(params.V)
		}
	}
	var startUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.EncodeElement.Start == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The start parameter of the EncodeElement function can't be indexed by value")
		}
		startUsedHash = hash.DeepHash(params.Start)
	}
	return MoqEncoder_starGenType_EncodeElement_paramsKey{
		Params: struct{ V any }{
			V: vUsed,
		},
		Hashes: struct {
			V     hash.Hash
			Start hash.Hash
		}{
			V:     vUsedHash,
			Start: startUsedHash,
		},
	}
}

func (m *MoqEncoder_starGenType_recorder) EncodeToken(t xml.Token) *MoqEncoder_starGenType_EncodeToken_fnRecorder {
	return &MoqEncoder_starGenType_EncodeToken_fnRecorder{
		Params: MoqEncoder_starGenType_EncodeToken_params{
			T: t,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqEncoder_starGenType_EncodeToken_fnRecorder) Any() *MoqEncoder_starGenType_EncodeToken_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_EncodeToken(r.Params))
		return nil
	}
	return &MoqEncoder_starGenType_EncodeToken_anyParams{Recorder: r}
}

func (a *MoqEncoder_starGenType_EncodeToken_anyParams) T() *MoqEncoder_starGenType_EncodeToken_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqEncoder_starGenType_EncodeToken_fnRecorder) Seq() *MoqEncoder_starGenType_EncodeToken_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_EncodeToken(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqEncoder_starGenType_EncodeToken_fnRecorder) NoSeq() *MoqEncoder_starGenType_EncodeToken_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_EncodeToken(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqEncoder_starGenType_EncodeToken_fnRecorder) ReturnResults(result1 error) *MoqEncoder_starGenType_EncodeToken_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqEncoder_starGenType_EncodeToken_doFn
		DoReturnFn MoqEncoder_starGenType_EncodeToken_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqEncoder_starGenType_EncodeToken_fnRecorder) AndDo(fn MoqEncoder_starGenType_EncodeToken_doFn) *MoqEncoder_starGenType_EncodeToken_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqEncoder_starGenType_EncodeToken_fnRecorder) DoReturnResults(fn MoqEncoder_starGenType_EncodeToken_doReturnFn) *MoqEncoder_starGenType_EncodeToken_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqEncoder_starGenType_EncodeToken_doFn
		DoReturnFn MoqEncoder_starGenType_EncodeToken_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqEncoder_starGenType_EncodeToken_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqEncoder_starGenType_EncodeToken_resultsByParams
	for n, res := range r.Moq.ResultsByParams_EncodeToken {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqEncoder_starGenType_EncodeToken_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqEncoder_starGenType_EncodeToken_paramsKey]*MoqEncoder_starGenType_EncodeToken_results{},
		}
		r.Moq.ResultsByParams_EncodeToken = append(r.Moq.ResultsByParams_EncodeToken, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_EncodeToken) {
			copy(r.Moq.ResultsByParams_EncodeToken[insertAt+1:], r.Moq.ResultsByParams_EncodeToken[insertAt:0])
			r.Moq.ResultsByParams_EncodeToken[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_EncodeToken(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqEncoder_starGenType_EncodeToken_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqEncoder_starGenType_EncodeToken_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqEncoder_starGenType_EncodeToken_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqEncoder_starGenType_EncodeToken_doFn
				DoReturnFn MoqEncoder_starGenType_EncodeToken_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqEncoder_starGenType) PrettyParams_EncodeToken(params MoqEncoder_starGenType_EncodeToken_params) string {
	return fmt.Sprintf("EncodeToken(%#v)", params.T)
}

func (m *MoqEncoder_starGenType) ParamsKey_EncodeToken(params MoqEncoder_starGenType_EncodeToken_params, anyParams uint64) MoqEncoder_starGenType_EncodeToken_paramsKey {
	m.Scene.T.Helper()
	var tUsed xml.Token
	var tUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.EncodeToken.T == moq.ParamIndexByValue {
			tUsed = params.T
		} else {
			tUsedHash = hash.DeepHash(params.T)
		}
	}
	return MoqEncoder_starGenType_EncodeToken_paramsKey{
		Params: struct{ T xml.Token }{
			T: tUsed,
		},
		Hashes: struct{ T hash.Hash }{
			T: tUsedHash,
		},
	}
}

func (m *MoqEncoder_starGenType_recorder) Flush() *MoqEncoder_starGenType_Flush_fnRecorder {
	return &MoqEncoder_starGenType_Flush_fnRecorder{
		Params:   MoqEncoder_starGenType_Flush_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqEncoder_starGenType_Flush_fnRecorder) Any() *MoqEncoder_starGenType_Flush_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Flush(r.Params))
		return nil
	}
	return &MoqEncoder_starGenType_Flush_anyParams{Recorder: r}
}

func (r *MoqEncoder_starGenType_Flush_fnRecorder) Seq() *MoqEncoder_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Flush(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqEncoder_starGenType_Flush_fnRecorder) NoSeq() *MoqEncoder_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Flush(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqEncoder_starGenType_Flush_fnRecorder) ReturnResults(result1 error) *MoqEncoder_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqEncoder_starGenType_Flush_doFn
		DoReturnFn MoqEncoder_starGenType_Flush_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqEncoder_starGenType_Flush_fnRecorder) AndDo(fn MoqEncoder_starGenType_Flush_doFn) *MoqEncoder_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqEncoder_starGenType_Flush_fnRecorder) DoReturnResults(fn MoqEncoder_starGenType_Flush_doReturnFn) *MoqEncoder_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqEncoder_starGenType_Flush_doFn
		DoReturnFn MoqEncoder_starGenType_Flush_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqEncoder_starGenType_Flush_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqEncoder_starGenType_Flush_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Flush {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqEncoder_starGenType_Flush_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqEncoder_starGenType_Flush_paramsKey]*MoqEncoder_starGenType_Flush_results{},
		}
		r.Moq.ResultsByParams_Flush = append(r.Moq.ResultsByParams_Flush, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Flush) {
			copy(r.Moq.ResultsByParams_Flush[insertAt+1:], r.Moq.ResultsByParams_Flush[insertAt:0])
			r.Moq.ResultsByParams_Flush[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Flush(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqEncoder_starGenType_Flush_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqEncoder_starGenType_Flush_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqEncoder_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqEncoder_starGenType_Flush_doFn
				DoReturnFn MoqEncoder_starGenType_Flush_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqEncoder_starGenType) PrettyParams_Flush(params MoqEncoder_starGenType_Flush_params) string {
	return fmt.Sprintf("Flush()")
}

func (m *MoqEncoder_starGenType) ParamsKey_Flush(params MoqEncoder_starGenType_Flush_params, anyParams uint64) MoqEncoder_starGenType_Flush_paramsKey {
	m.Scene.T.Helper()
	return MoqEncoder_starGenType_Flush_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqEncoder_starGenType) Reset() {
	m.ResultsByParams_Indent = nil
	m.ResultsByParams_Encode = nil
	m.ResultsByParams_EncodeElement = nil
	m.ResultsByParams_EncodeToken = nil
	m.ResultsByParams_Flush = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqEncoder_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Indent {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Indent(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Encode {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Encode(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_EncodeElement {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_EncodeElement(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_EncodeToken {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_EncodeToken(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Flush {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Flush(results.Params))
			}
		}
	}
}
