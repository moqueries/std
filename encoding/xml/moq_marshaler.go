// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package xml

import (
	"encoding/xml"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that xml.Marshaler is mocked completely
var _ xml.Marshaler = (*MoqMarshaler_mock)(nil)

// MoqMarshaler holds the state of a moq of the Marshaler type
type MoqMarshaler struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqMarshaler_mock

	ResultsByParams_MarshalXML []MoqMarshaler_MarshalXML_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			MarshalXML struct {
				E     moq.ParamIndexing
				Start moq.ParamIndexing
			}
		}
	}
	// MoqMarshaler_mock isolates the mock interface of the Marshaler type
}

type MoqMarshaler_mock struct {
	Moq *MoqMarshaler
}

// MoqMarshaler_recorder isolates the recorder interface of the Marshaler type
type MoqMarshaler_recorder struct {
	Moq *MoqMarshaler
}

// MoqMarshaler_MarshalXML_params holds the params of the Marshaler type
type MoqMarshaler_MarshalXML_params struct {
	E     *xml.Encoder
	Start xml.StartElement
}

// MoqMarshaler_MarshalXML_paramsKey holds the map key params of the Marshaler
// type
type MoqMarshaler_MarshalXML_paramsKey struct {
	Params struct{ E *xml.Encoder }
	Hashes struct {
		E     hash.Hash
		Start hash.Hash
	}
}

// MoqMarshaler_MarshalXML_resultsByParams contains the results for a given set
// of parameters for the Marshaler type
type MoqMarshaler_MarshalXML_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqMarshaler_MarshalXML_paramsKey]*MoqMarshaler_MarshalXML_results
}

// MoqMarshaler_MarshalXML_doFn defines the type of function needed when
// calling AndDo for the Marshaler type
type MoqMarshaler_MarshalXML_doFn func(e *xml.Encoder, start xml.StartElement)

// MoqMarshaler_MarshalXML_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Marshaler type
type MoqMarshaler_MarshalXML_doReturnFn func(e *xml.Encoder, start xml.StartElement) error

// MoqMarshaler_MarshalXML_results holds the results of the Marshaler type
type MoqMarshaler_MarshalXML_results struct {
	Params  MoqMarshaler_MarshalXML_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqMarshaler_MarshalXML_doFn
		DoReturnFn MoqMarshaler_MarshalXML_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqMarshaler_MarshalXML_fnRecorder routes recorded function calls to the
// MoqMarshaler moq
type MoqMarshaler_MarshalXML_fnRecorder struct {
	Params    MoqMarshaler_MarshalXML_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqMarshaler_MarshalXML_results
	Moq       *MoqMarshaler
}

// MoqMarshaler_MarshalXML_anyParams isolates the any params functions of the
// Marshaler type
type MoqMarshaler_MarshalXML_anyParams struct {
	Recorder *MoqMarshaler_MarshalXML_fnRecorder
}

// NewMoqMarshaler creates a new moq of the Marshaler type
func NewMoqMarshaler(scene *moq.Scene, config *moq.Config) *MoqMarshaler {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqMarshaler{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqMarshaler_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				MarshalXML struct {
					E     moq.ParamIndexing
					Start moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			MarshalXML struct {
				E     moq.ParamIndexing
				Start moq.ParamIndexing
			}
		}{
			MarshalXML: struct {
				E     moq.ParamIndexing
				Start moq.ParamIndexing
			}{
				E:     moq.ParamIndexByHash,
				Start: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Marshaler type
func (m *MoqMarshaler) Mock() *MoqMarshaler_mock { return m.Moq }

func (m *MoqMarshaler_mock) MarshalXML(e *xml.Encoder, start xml.StartElement) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqMarshaler_MarshalXML_params{
		E:     e,
		Start: start,
	}
	var results *MoqMarshaler_MarshalXML_results
	for _, resultsByParams := range m.Moq.ResultsByParams_MarshalXML {
		paramsKey := m.Moq.ParamsKey_MarshalXML(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_MarshalXML(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_MarshalXML(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_MarshalXML(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(e, start)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(e, start)
	}
	return
}

// OnCall returns the recorder implementation of the Marshaler type
func (m *MoqMarshaler) OnCall() *MoqMarshaler_recorder {
	return &MoqMarshaler_recorder{
		Moq: m,
	}
}

func (m *MoqMarshaler_recorder) MarshalXML(e *xml.Encoder, start xml.StartElement) *MoqMarshaler_MarshalXML_fnRecorder {
	return &MoqMarshaler_MarshalXML_fnRecorder{
		Params: MoqMarshaler_MarshalXML_params{
			E:     e,
			Start: start,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqMarshaler_MarshalXML_fnRecorder) Any() *MoqMarshaler_MarshalXML_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MarshalXML(r.Params))
		return nil
	}
	return &MoqMarshaler_MarshalXML_anyParams{Recorder: r}
}

func (a *MoqMarshaler_MarshalXML_anyParams) E() *MoqMarshaler_MarshalXML_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqMarshaler_MarshalXML_anyParams) Start() *MoqMarshaler_MarshalXML_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqMarshaler_MarshalXML_fnRecorder) Seq() *MoqMarshaler_MarshalXML_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MarshalXML(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqMarshaler_MarshalXML_fnRecorder) NoSeq() *MoqMarshaler_MarshalXML_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_MarshalXML(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqMarshaler_MarshalXML_fnRecorder) ReturnResults(result1 error) *MoqMarshaler_MarshalXML_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqMarshaler_MarshalXML_doFn
		DoReturnFn MoqMarshaler_MarshalXML_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqMarshaler_MarshalXML_fnRecorder) AndDo(fn MoqMarshaler_MarshalXML_doFn) *MoqMarshaler_MarshalXML_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqMarshaler_MarshalXML_fnRecorder) DoReturnResults(fn MoqMarshaler_MarshalXML_doReturnFn) *MoqMarshaler_MarshalXML_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqMarshaler_MarshalXML_doFn
		DoReturnFn MoqMarshaler_MarshalXML_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqMarshaler_MarshalXML_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqMarshaler_MarshalXML_resultsByParams
	for n, res := range r.Moq.ResultsByParams_MarshalXML {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqMarshaler_MarshalXML_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqMarshaler_MarshalXML_paramsKey]*MoqMarshaler_MarshalXML_results{},
		}
		r.Moq.ResultsByParams_MarshalXML = append(r.Moq.ResultsByParams_MarshalXML, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_MarshalXML) {
			copy(r.Moq.ResultsByParams_MarshalXML[insertAt+1:], r.Moq.ResultsByParams_MarshalXML[insertAt:0])
			r.Moq.ResultsByParams_MarshalXML[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_MarshalXML(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqMarshaler_MarshalXML_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqMarshaler_MarshalXML_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqMarshaler_MarshalXML_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqMarshaler_MarshalXML_doFn
				DoReturnFn MoqMarshaler_MarshalXML_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqMarshaler) PrettyParams_MarshalXML(params MoqMarshaler_MarshalXML_params) string {
	return fmt.Sprintf("MarshalXML(%#v, %#v)", params.E, params.Start)
}

func (m *MoqMarshaler) ParamsKey_MarshalXML(params MoqMarshaler_MarshalXML_params, anyParams uint64) MoqMarshaler_MarshalXML_paramsKey {
	m.Scene.T.Helper()
	var eUsed *xml.Encoder
	var eUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.MarshalXML.E == moq.ParamIndexByValue {
			eUsed = params.E
		} else {
			eUsedHash = hash.DeepHash(params.E)
		}
	}
	var startUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.MarshalXML.Start == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The start parameter of the MarshalXML function can't be indexed by value")
		}
		startUsedHash = hash.DeepHash(params.Start)
	}
	return MoqMarshaler_MarshalXML_paramsKey{
		Params: struct{ E *xml.Encoder }{
			E: eUsed,
		},
		Hashes: struct {
			E     hash.Hash
			Start hash.Hash
		}{
			E:     eUsedHash,
			Start: startUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqMarshaler) Reset() { m.ResultsByParams_MarshalXML = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqMarshaler) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_MarshalXML {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_MarshalXML(results.Params))
			}
		}
	}
}
