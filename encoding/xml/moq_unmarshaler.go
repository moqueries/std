// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package xml

import (
	"encoding/xml"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that xml.Unmarshaler is mocked
// completely
var _ xml.Unmarshaler = (*MoqUnmarshaler_mock)(nil)

// MoqUnmarshaler holds the state of a moq of the Unmarshaler type
type MoqUnmarshaler struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqUnmarshaler_mock

	ResultsByParams_UnmarshalXML []MoqUnmarshaler_UnmarshalXML_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			UnmarshalXML struct {
				D     moq.ParamIndexing
				Start moq.ParamIndexing
			}
		}
	}
	// MoqUnmarshaler_mock isolates the mock interface of the Unmarshaler type
}

type MoqUnmarshaler_mock struct {
	Moq *MoqUnmarshaler
}

// MoqUnmarshaler_recorder isolates the recorder interface of the Unmarshaler
// type
type MoqUnmarshaler_recorder struct {
	Moq *MoqUnmarshaler
}

// MoqUnmarshaler_UnmarshalXML_params holds the params of the Unmarshaler type
type MoqUnmarshaler_UnmarshalXML_params struct {
	D     *xml.Decoder
	Start xml.StartElement
}

// MoqUnmarshaler_UnmarshalXML_paramsKey holds the map key params of the
// Unmarshaler type
type MoqUnmarshaler_UnmarshalXML_paramsKey struct {
	Params struct{ D *xml.Decoder }
	Hashes struct {
		D     hash.Hash
		Start hash.Hash
	}
}

// MoqUnmarshaler_UnmarshalXML_resultsByParams contains the results for a given
// set of parameters for the Unmarshaler type
type MoqUnmarshaler_UnmarshalXML_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUnmarshaler_UnmarshalXML_paramsKey]*MoqUnmarshaler_UnmarshalXML_results
}

// MoqUnmarshaler_UnmarshalXML_doFn defines the type of function needed when
// calling AndDo for the Unmarshaler type
type MoqUnmarshaler_UnmarshalXML_doFn func(d *xml.Decoder, start xml.StartElement)

// MoqUnmarshaler_UnmarshalXML_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Unmarshaler type
type MoqUnmarshaler_UnmarshalXML_doReturnFn func(d *xml.Decoder, start xml.StartElement) error

// MoqUnmarshaler_UnmarshalXML_results holds the results of the Unmarshaler
// type
type MoqUnmarshaler_UnmarshalXML_results struct {
	Params  MoqUnmarshaler_UnmarshalXML_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqUnmarshaler_UnmarshalXML_doFn
		DoReturnFn MoqUnmarshaler_UnmarshalXML_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUnmarshaler_UnmarshalXML_fnRecorder routes recorded function calls to the
// MoqUnmarshaler moq
type MoqUnmarshaler_UnmarshalXML_fnRecorder struct {
	Params    MoqUnmarshaler_UnmarshalXML_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUnmarshaler_UnmarshalXML_results
	Moq       *MoqUnmarshaler
}

// MoqUnmarshaler_UnmarshalXML_anyParams isolates the any params functions of
// the Unmarshaler type
type MoqUnmarshaler_UnmarshalXML_anyParams struct {
	Recorder *MoqUnmarshaler_UnmarshalXML_fnRecorder
}

// NewMoqUnmarshaler creates a new moq of the Unmarshaler type
func NewMoqUnmarshaler(scene *moq.Scene, config *moq.Config) *MoqUnmarshaler {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqUnmarshaler{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqUnmarshaler_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				UnmarshalXML struct {
					D     moq.ParamIndexing
					Start moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			UnmarshalXML struct {
				D     moq.ParamIndexing
				Start moq.ParamIndexing
			}
		}{
			UnmarshalXML: struct {
				D     moq.ParamIndexing
				Start moq.ParamIndexing
			}{
				D:     moq.ParamIndexByHash,
				Start: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Unmarshaler type
func (m *MoqUnmarshaler) Mock() *MoqUnmarshaler_mock { return m.Moq }

func (m *MoqUnmarshaler_mock) UnmarshalXML(d *xml.Decoder, start xml.StartElement) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqUnmarshaler_UnmarshalXML_params{
		D:     d,
		Start: start,
	}
	var results *MoqUnmarshaler_UnmarshalXML_results
	for _, resultsByParams := range m.Moq.ResultsByParams_UnmarshalXML {
		paramsKey := m.Moq.ParamsKey_UnmarshalXML(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_UnmarshalXML(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_UnmarshalXML(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_UnmarshalXML(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(d, start)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(d, start)
	}
	return
}

// OnCall returns the recorder implementation of the Unmarshaler type
func (m *MoqUnmarshaler) OnCall() *MoqUnmarshaler_recorder {
	return &MoqUnmarshaler_recorder{
		Moq: m,
	}
}

func (m *MoqUnmarshaler_recorder) UnmarshalXML(d *xml.Decoder, start xml.StartElement) *MoqUnmarshaler_UnmarshalXML_fnRecorder {
	return &MoqUnmarshaler_UnmarshalXML_fnRecorder{
		Params: MoqUnmarshaler_UnmarshalXML_params{
			D:     d,
			Start: start,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUnmarshaler_UnmarshalXML_fnRecorder) Any() *MoqUnmarshaler_UnmarshalXML_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnmarshalXML(r.Params))
		return nil
	}
	return &MoqUnmarshaler_UnmarshalXML_anyParams{Recorder: r}
}

func (a *MoqUnmarshaler_UnmarshalXML_anyParams) D() *MoqUnmarshaler_UnmarshalXML_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUnmarshaler_UnmarshalXML_anyParams) Start() *MoqUnmarshaler_UnmarshalXML_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUnmarshaler_UnmarshalXML_fnRecorder) Seq() *MoqUnmarshaler_UnmarshalXML_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnmarshalXML(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUnmarshaler_UnmarshalXML_fnRecorder) NoSeq() *MoqUnmarshaler_UnmarshalXML_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnmarshalXML(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUnmarshaler_UnmarshalXML_fnRecorder) ReturnResults(result1 error) *MoqUnmarshaler_UnmarshalXML_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqUnmarshaler_UnmarshalXML_doFn
		DoReturnFn MoqUnmarshaler_UnmarshalXML_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUnmarshaler_UnmarshalXML_fnRecorder) AndDo(fn MoqUnmarshaler_UnmarshalXML_doFn) *MoqUnmarshaler_UnmarshalXML_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUnmarshaler_UnmarshalXML_fnRecorder) DoReturnResults(fn MoqUnmarshaler_UnmarshalXML_doReturnFn) *MoqUnmarshaler_UnmarshalXML_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqUnmarshaler_UnmarshalXML_doFn
		DoReturnFn MoqUnmarshaler_UnmarshalXML_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUnmarshaler_UnmarshalXML_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUnmarshaler_UnmarshalXML_resultsByParams
	for n, res := range r.Moq.ResultsByParams_UnmarshalXML {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUnmarshaler_UnmarshalXML_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUnmarshaler_UnmarshalXML_paramsKey]*MoqUnmarshaler_UnmarshalXML_results{},
		}
		r.Moq.ResultsByParams_UnmarshalXML = append(r.Moq.ResultsByParams_UnmarshalXML, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_UnmarshalXML) {
			copy(r.Moq.ResultsByParams_UnmarshalXML[insertAt+1:], r.Moq.ResultsByParams_UnmarshalXML[insertAt:0])
			r.Moq.ResultsByParams_UnmarshalXML[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_UnmarshalXML(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUnmarshaler_UnmarshalXML_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUnmarshaler_UnmarshalXML_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUnmarshaler_UnmarshalXML_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqUnmarshaler_UnmarshalXML_doFn
				DoReturnFn MoqUnmarshaler_UnmarshalXML_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUnmarshaler) PrettyParams_UnmarshalXML(params MoqUnmarshaler_UnmarshalXML_params) string {
	return fmt.Sprintf("UnmarshalXML(%#v, %#v)", params.D, params.Start)
}

func (m *MoqUnmarshaler) ParamsKey_UnmarshalXML(params MoqUnmarshaler_UnmarshalXML_params, anyParams uint64) MoqUnmarshaler_UnmarshalXML_paramsKey {
	m.Scene.T.Helper()
	var dUsed *xml.Decoder
	var dUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.UnmarshalXML.D == moq.ParamIndexByValue {
			dUsed = params.D
		} else {
			dUsedHash = hash.DeepHash(params.D)
		}
	}
	var startUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.UnmarshalXML.Start == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The start parameter of the UnmarshalXML function can't be indexed by value")
		}
		startUsedHash = hash.DeepHash(params.Start)
	}
	return MoqUnmarshaler_UnmarshalXML_paramsKey{
		Params: struct{ D *xml.Decoder }{
			D: dUsed,
		},
		Hashes: struct {
			D     hash.Hash
			Start hash.Hash
		}{
			D:     dUsedHash,
			Start: startUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqUnmarshaler) Reset() { m.ResultsByParams_UnmarshalXML = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqUnmarshaler) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_UnmarshalXML {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_UnmarshalXML(results.Params))
			}
		}
	}
}
