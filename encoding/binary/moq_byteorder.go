// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package binary

import (
	"encoding/binary"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that binary.ByteOrder is mocked
// completely
var _ binary.ByteOrder = (*MoqByteOrder_mock)(nil)

// MoqByteOrder holds the state of a moq of the ByteOrder type
type MoqByteOrder struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqByteOrder_mock

	ResultsByParams_Uint16    []MoqByteOrder_Uint16_resultsByParams
	ResultsByParams_Uint32    []MoqByteOrder_Uint32_resultsByParams
	ResultsByParams_Uint64    []MoqByteOrder_Uint64_resultsByParams
	ResultsByParams_PutUint16 []MoqByteOrder_PutUint16_resultsByParams
	ResultsByParams_PutUint32 []MoqByteOrder_PutUint32_resultsByParams
	ResultsByParams_PutUint64 []MoqByteOrder_PutUint64_resultsByParams
	ResultsByParams_String    []MoqByteOrder_String_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Uint16 struct {
				Param1 moq.ParamIndexing
			}
			Uint32 struct {
				Param1 moq.ParamIndexing
			}
			Uint64 struct {
				Param1 moq.ParamIndexing
			}
			PutUint16 struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}
			PutUint32 struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}
			PutUint64 struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}
			String struct{}
		}
	}
}

// MoqByteOrder_mock isolates the mock interface of the ByteOrder type
type MoqByteOrder_mock struct {
	Moq *MoqByteOrder
}

// MoqByteOrder_recorder isolates the recorder interface of the ByteOrder type
type MoqByteOrder_recorder struct {
	Moq *MoqByteOrder
}

// MoqByteOrder_Uint16_params holds the params of the ByteOrder type
type MoqByteOrder_Uint16_params struct{ Param1 []byte }

// MoqByteOrder_Uint16_paramsKey holds the map key params of the ByteOrder type
type MoqByteOrder_Uint16_paramsKey struct {
	Params struct{}
	Hashes struct{ Param1 hash.Hash }
}

// MoqByteOrder_Uint16_resultsByParams contains the results for a given set of
// parameters for the ByteOrder type
type MoqByteOrder_Uint16_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqByteOrder_Uint16_paramsKey]*MoqByteOrder_Uint16_results
}

// MoqByteOrder_Uint16_doFn defines the type of function needed when calling
// AndDo for the ByteOrder type
type MoqByteOrder_Uint16_doFn func([]byte)

// MoqByteOrder_Uint16_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ByteOrder type
type MoqByteOrder_Uint16_doReturnFn func([]byte) uint16

// MoqByteOrder_Uint16_results holds the results of the ByteOrder type
type MoqByteOrder_Uint16_results struct {
	Params  MoqByteOrder_Uint16_params
	Results []struct {
		Values *struct {
			Result1 uint16
		}
		Sequence   uint32
		DoFn       MoqByteOrder_Uint16_doFn
		DoReturnFn MoqByteOrder_Uint16_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqByteOrder_Uint16_fnRecorder routes recorded function calls to the
// MoqByteOrder moq
type MoqByteOrder_Uint16_fnRecorder struct {
	Params    MoqByteOrder_Uint16_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqByteOrder_Uint16_results
	Moq       *MoqByteOrder
}

// MoqByteOrder_Uint16_anyParams isolates the any params functions of the
// ByteOrder type
type MoqByteOrder_Uint16_anyParams struct {
	Recorder *MoqByteOrder_Uint16_fnRecorder
}

// MoqByteOrder_Uint32_params holds the params of the ByteOrder type
type MoqByteOrder_Uint32_params struct{ Param1 []byte }

// MoqByteOrder_Uint32_paramsKey holds the map key params of the ByteOrder type
type MoqByteOrder_Uint32_paramsKey struct {
	Params struct{}
	Hashes struct{ Param1 hash.Hash }
}

// MoqByteOrder_Uint32_resultsByParams contains the results for a given set of
// parameters for the ByteOrder type
type MoqByteOrder_Uint32_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqByteOrder_Uint32_paramsKey]*MoqByteOrder_Uint32_results
}

// MoqByteOrder_Uint32_doFn defines the type of function needed when calling
// AndDo for the ByteOrder type
type MoqByteOrder_Uint32_doFn func([]byte)

// MoqByteOrder_Uint32_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ByteOrder type
type MoqByteOrder_Uint32_doReturnFn func([]byte) uint32

// MoqByteOrder_Uint32_results holds the results of the ByteOrder type
type MoqByteOrder_Uint32_results struct {
	Params  MoqByteOrder_Uint32_params
	Results []struct {
		Values *struct {
			Result1 uint32
		}
		Sequence   uint32
		DoFn       MoqByteOrder_Uint32_doFn
		DoReturnFn MoqByteOrder_Uint32_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqByteOrder_Uint32_fnRecorder routes recorded function calls to the
// MoqByteOrder moq
type MoqByteOrder_Uint32_fnRecorder struct {
	Params    MoqByteOrder_Uint32_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqByteOrder_Uint32_results
	Moq       *MoqByteOrder
}

// MoqByteOrder_Uint32_anyParams isolates the any params functions of the
// ByteOrder type
type MoqByteOrder_Uint32_anyParams struct {
	Recorder *MoqByteOrder_Uint32_fnRecorder
}

// MoqByteOrder_Uint64_params holds the params of the ByteOrder type
type MoqByteOrder_Uint64_params struct{ Param1 []byte }

// MoqByteOrder_Uint64_paramsKey holds the map key params of the ByteOrder type
type MoqByteOrder_Uint64_paramsKey struct {
	Params struct{}
	Hashes struct{ Param1 hash.Hash }
}

// MoqByteOrder_Uint64_resultsByParams contains the results for a given set of
// parameters for the ByteOrder type
type MoqByteOrder_Uint64_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqByteOrder_Uint64_paramsKey]*MoqByteOrder_Uint64_results
}

// MoqByteOrder_Uint64_doFn defines the type of function needed when calling
// AndDo for the ByteOrder type
type MoqByteOrder_Uint64_doFn func([]byte)

// MoqByteOrder_Uint64_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ByteOrder type
type MoqByteOrder_Uint64_doReturnFn func([]byte) uint64

// MoqByteOrder_Uint64_results holds the results of the ByteOrder type
type MoqByteOrder_Uint64_results struct {
	Params  MoqByteOrder_Uint64_params
	Results []struct {
		Values *struct {
			Result1 uint64
		}
		Sequence   uint32
		DoFn       MoqByteOrder_Uint64_doFn
		DoReturnFn MoqByteOrder_Uint64_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqByteOrder_Uint64_fnRecorder routes recorded function calls to the
// MoqByteOrder moq
type MoqByteOrder_Uint64_fnRecorder struct {
	Params    MoqByteOrder_Uint64_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqByteOrder_Uint64_results
	Moq       *MoqByteOrder
}

// MoqByteOrder_Uint64_anyParams isolates the any params functions of the
// ByteOrder type
type MoqByteOrder_Uint64_anyParams struct {
	Recorder *MoqByteOrder_Uint64_fnRecorder
}

// MoqByteOrder_PutUint16_params holds the params of the ByteOrder type
type MoqByteOrder_PutUint16_params struct {
	Param1 []byte
	Param2 uint16
}

// MoqByteOrder_PutUint16_paramsKey holds the map key params of the ByteOrder
// type
type MoqByteOrder_PutUint16_paramsKey struct {
	Params struct{ Param2 uint16 }
	Hashes struct {
		Param1 hash.Hash
		Param2 hash.Hash
	}
}

// MoqByteOrder_PutUint16_resultsByParams contains the results for a given set
// of parameters for the ByteOrder type
type MoqByteOrder_PutUint16_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqByteOrder_PutUint16_paramsKey]*MoqByteOrder_PutUint16_results
}

// MoqByteOrder_PutUint16_doFn defines the type of function needed when calling
// AndDo for the ByteOrder type
type MoqByteOrder_PutUint16_doFn func([]byte, uint16)

// MoqByteOrder_PutUint16_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ByteOrder type
type MoqByteOrder_PutUint16_doReturnFn func([]byte, uint16)

// MoqByteOrder_PutUint16_results holds the results of the ByteOrder type
type MoqByteOrder_PutUint16_results struct {
	Params  MoqByteOrder_PutUint16_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqByteOrder_PutUint16_doFn
		DoReturnFn MoqByteOrder_PutUint16_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqByteOrder_PutUint16_fnRecorder routes recorded function calls to the
// MoqByteOrder moq
type MoqByteOrder_PutUint16_fnRecorder struct {
	Params    MoqByteOrder_PutUint16_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqByteOrder_PutUint16_results
	Moq       *MoqByteOrder
}

// MoqByteOrder_PutUint16_anyParams isolates the any params functions of the
// ByteOrder type
type MoqByteOrder_PutUint16_anyParams struct {
	Recorder *MoqByteOrder_PutUint16_fnRecorder
}

// MoqByteOrder_PutUint32_params holds the params of the ByteOrder type
type MoqByteOrder_PutUint32_params struct {
	Param1 []byte
	Param2 uint32
}

// MoqByteOrder_PutUint32_paramsKey holds the map key params of the ByteOrder
// type
type MoqByteOrder_PutUint32_paramsKey struct {
	Params struct{ Param2 uint32 }
	Hashes struct {
		Param1 hash.Hash
		Param2 hash.Hash
	}
}

// MoqByteOrder_PutUint32_resultsByParams contains the results for a given set
// of parameters for the ByteOrder type
type MoqByteOrder_PutUint32_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqByteOrder_PutUint32_paramsKey]*MoqByteOrder_PutUint32_results
}

// MoqByteOrder_PutUint32_doFn defines the type of function needed when calling
// AndDo for the ByteOrder type
type MoqByteOrder_PutUint32_doFn func([]byte, uint32)

// MoqByteOrder_PutUint32_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ByteOrder type
type MoqByteOrder_PutUint32_doReturnFn func([]byte, uint32)

// MoqByteOrder_PutUint32_results holds the results of the ByteOrder type
type MoqByteOrder_PutUint32_results struct {
	Params  MoqByteOrder_PutUint32_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqByteOrder_PutUint32_doFn
		DoReturnFn MoqByteOrder_PutUint32_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqByteOrder_PutUint32_fnRecorder routes recorded function calls to the
// MoqByteOrder moq
type MoqByteOrder_PutUint32_fnRecorder struct {
	Params    MoqByteOrder_PutUint32_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqByteOrder_PutUint32_results
	Moq       *MoqByteOrder
}

// MoqByteOrder_PutUint32_anyParams isolates the any params functions of the
// ByteOrder type
type MoqByteOrder_PutUint32_anyParams struct {
	Recorder *MoqByteOrder_PutUint32_fnRecorder
}

// MoqByteOrder_PutUint64_params holds the params of the ByteOrder type
type MoqByteOrder_PutUint64_params struct {
	Param1 []byte
	Param2 uint64
}

// MoqByteOrder_PutUint64_paramsKey holds the map key params of the ByteOrder
// type
type MoqByteOrder_PutUint64_paramsKey struct {
	Params struct{ Param2 uint64 }
	Hashes struct {
		Param1 hash.Hash
		Param2 hash.Hash
	}
}

// MoqByteOrder_PutUint64_resultsByParams contains the results for a given set
// of parameters for the ByteOrder type
type MoqByteOrder_PutUint64_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqByteOrder_PutUint64_paramsKey]*MoqByteOrder_PutUint64_results
}

// MoqByteOrder_PutUint64_doFn defines the type of function needed when calling
// AndDo for the ByteOrder type
type MoqByteOrder_PutUint64_doFn func([]byte, uint64)

// MoqByteOrder_PutUint64_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ByteOrder type
type MoqByteOrder_PutUint64_doReturnFn func([]byte, uint64)

// MoqByteOrder_PutUint64_results holds the results of the ByteOrder type
type MoqByteOrder_PutUint64_results struct {
	Params  MoqByteOrder_PutUint64_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqByteOrder_PutUint64_doFn
		DoReturnFn MoqByteOrder_PutUint64_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqByteOrder_PutUint64_fnRecorder routes recorded function calls to the
// MoqByteOrder moq
type MoqByteOrder_PutUint64_fnRecorder struct {
	Params    MoqByteOrder_PutUint64_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqByteOrder_PutUint64_results
	Moq       *MoqByteOrder
}

// MoqByteOrder_PutUint64_anyParams isolates the any params functions of the
// ByteOrder type
type MoqByteOrder_PutUint64_anyParams struct {
	Recorder *MoqByteOrder_PutUint64_fnRecorder
}

// MoqByteOrder_String_params holds the params of the ByteOrder type
type MoqByteOrder_String_params struct{}

// MoqByteOrder_String_paramsKey holds the map key params of the ByteOrder type
type MoqByteOrder_String_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqByteOrder_String_resultsByParams contains the results for a given set of
// parameters for the ByteOrder type
type MoqByteOrder_String_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqByteOrder_String_paramsKey]*MoqByteOrder_String_results
}

// MoqByteOrder_String_doFn defines the type of function needed when calling
// AndDo for the ByteOrder type
type MoqByteOrder_String_doFn func()

// MoqByteOrder_String_doReturnFn defines the type of function needed when
// calling DoReturnResults for the ByteOrder type
type MoqByteOrder_String_doReturnFn func() string

// MoqByteOrder_String_results holds the results of the ByteOrder type
type MoqByteOrder_String_results struct {
	Params  MoqByteOrder_String_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqByteOrder_String_doFn
		DoReturnFn MoqByteOrder_String_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqByteOrder_String_fnRecorder routes recorded function calls to the
// MoqByteOrder moq
type MoqByteOrder_String_fnRecorder struct {
	Params    MoqByteOrder_String_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqByteOrder_String_results
	Moq       *MoqByteOrder
}

// MoqByteOrder_String_anyParams isolates the any params functions of the
// ByteOrder type
type MoqByteOrder_String_anyParams struct {
	Recorder *MoqByteOrder_String_fnRecorder
}

// NewMoqByteOrder creates a new moq of the ByteOrder type
func NewMoqByteOrder(scene *moq.Scene, config *moq.Config) *MoqByteOrder {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqByteOrder{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqByteOrder_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Uint16 struct {
					Param1 moq.ParamIndexing
				}
				Uint32 struct {
					Param1 moq.ParamIndexing
				}
				Uint64 struct {
					Param1 moq.ParamIndexing
				}
				PutUint16 struct {
					Param1 moq.ParamIndexing
					Param2 moq.ParamIndexing
				}
				PutUint32 struct {
					Param1 moq.ParamIndexing
					Param2 moq.ParamIndexing
				}
				PutUint64 struct {
					Param1 moq.ParamIndexing
					Param2 moq.ParamIndexing
				}
				String struct{}
			}
		}{ParameterIndexing: struct {
			Uint16 struct {
				Param1 moq.ParamIndexing
			}
			Uint32 struct {
				Param1 moq.ParamIndexing
			}
			Uint64 struct {
				Param1 moq.ParamIndexing
			}
			PutUint16 struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}
			PutUint32 struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}
			PutUint64 struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}
			String struct{}
		}{
			Uint16: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
			},
			Uint32: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
			},
			Uint64: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
			},
			PutUint16: struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
				Param2: moq.ParamIndexByValue,
			},
			PutUint32: struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
				Param2: moq.ParamIndexByValue,
			},
			PutUint64: struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
				Param2: moq.ParamIndexByValue,
			},
			String: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the ByteOrder type
func (m *MoqByteOrder) Mock() *MoqByteOrder_mock { return m.Moq }

func (m *MoqByteOrder_mock) Uint16(param1 []byte) (result1 uint16) {
	m.Moq.Scene.T.Helper()
	params := MoqByteOrder_Uint16_params{
		Param1: param1,
	}
	var results *MoqByteOrder_Uint16_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Uint16 {
		paramsKey := m.Moq.ParamsKey_Uint16(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Uint16(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Uint16(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Uint16(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqByteOrder_mock) Uint32(param1 []byte) (result1 uint32) {
	m.Moq.Scene.T.Helper()
	params := MoqByteOrder_Uint32_params{
		Param1: param1,
	}
	var results *MoqByteOrder_Uint32_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Uint32 {
		paramsKey := m.Moq.ParamsKey_Uint32(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Uint32(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Uint32(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Uint32(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqByteOrder_mock) Uint64(param1 []byte) (result1 uint64) {
	m.Moq.Scene.T.Helper()
	params := MoqByteOrder_Uint64_params{
		Param1: param1,
	}
	var results *MoqByteOrder_Uint64_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Uint64 {
		paramsKey := m.Moq.ParamsKey_Uint64(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Uint64(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Uint64(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Uint64(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqByteOrder_mock) PutUint16(param1 []byte, param2 uint16) {
	m.Moq.Scene.T.Helper()
	params := MoqByteOrder_PutUint16_params{
		Param1: param1,
		Param2: param2,
	}
	var results *MoqByteOrder_PutUint16_results
	for _, resultsByParams := range m.Moq.ResultsByParams_PutUint16 {
		paramsKey := m.Moq.ParamsKey_PutUint16(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_PutUint16(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_PutUint16(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_PutUint16(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1, param2)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(param1, param2)
	}
	return
}

func (m *MoqByteOrder_mock) PutUint32(param1 []byte, param2 uint32) {
	m.Moq.Scene.T.Helper()
	params := MoqByteOrder_PutUint32_params{
		Param1: param1,
		Param2: param2,
	}
	var results *MoqByteOrder_PutUint32_results
	for _, resultsByParams := range m.Moq.ResultsByParams_PutUint32 {
		paramsKey := m.Moq.ParamsKey_PutUint32(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_PutUint32(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_PutUint32(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_PutUint32(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1, param2)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(param1, param2)
	}
	return
}

func (m *MoqByteOrder_mock) PutUint64(param1 []byte, param2 uint64) {
	m.Moq.Scene.T.Helper()
	params := MoqByteOrder_PutUint64_params{
		Param1: param1,
		Param2: param2,
	}
	var results *MoqByteOrder_PutUint64_results
	for _, resultsByParams := range m.Moq.ResultsByParams_PutUint64 {
		paramsKey := m.Moq.ParamsKey_PutUint64(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_PutUint64(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_PutUint64(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_PutUint64(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1, param2)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(param1, param2)
	}
	return
}

func (m *MoqByteOrder_mock) String() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqByteOrder_String_params{}
	var results *MoqByteOrder_String_results
	for _, resultsByParams := range m.Moq.ResultsByParams_String {
		paramsKey := m.Moq.ParamsKey_String(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_String(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_String(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_String(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the ByteOrder type
func (m *MoqByteOrder) OnCall() *MoqByteOrder_recorder {
	return &MoqByteOrder_recorder{
		Moq: m,
	}
}

func (m *MoqByteOrder_recorder) Uint16(param1 []byte) *MoqByteOrder_Uint16_fnRecorder {
	return &MoqByteOrder_Uint16_fnRecorder{
		Params: MoqByteOrder_Uint16_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqByteOrder_Uint16_fnRecorder) Any() *MoqByteOrder_Uint16_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint16(r.Params))
		return nil
	}
	return &MoqByteOrder_Uint16_anyParams{Recorder: r}
}

func (a *MoqByteOrder_Uint16_anyParams) Param1() *MoqByteOrder_Uint16_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqByteOrder_Uint16_fnRecorder) Seq() *MoqByteOrder_Uint16_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint16(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqByteOrder_Uint16_fnRecorder) NoSeq() *MoqByteOrder_Uint16_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint16(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqByteOrder_Uint16_fnRecorder) ReturnResults(result1 uint16) *MoqByteOrder_Uint16_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint16
		}
		Sequence   uint32
		DoFn       MoqByteOrder_Uint16_doFn
		DoReturnFn MoqByteOrder_Uint16_doReturnFn
	}{
		Values: &struct {
			Result1 uint16
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqByteOrder_Uint16_fnRecorder) AndDo(fn MoqByteOrder_Uint16_doFn) *MoqByteOrder_Uint16_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqByteOrder_Uint16_fnRecorder) DoReturnResults(fn MoqByteOrder_Uint16_doReturnFn) *MoqByteOrder_Uint16_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint16
		}
		Sequence   uint32
		DoFn       MoqByteOrder_Uint16_doFn
		DoReturnFn MoqByteOrder_Uint16_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqByteOrder_Uint16_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqByteOrder_Uint16_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Uint16 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqByteOrder_Uint16_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqByteOrder_Uint16_paramsKey]*MoqByteOrder_Uint16_results{},
		}
		r.Moq.ResultsByParams_Uint16 = append(r.Moq.ResultsByParams_Uint16, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Uint16) {
			copy(r.Moq.ResultsByParams_Uint16[insertAt+1:], r.Moq.ResultsByParams_Uint16[insertAt:0])
			r.Moq.ResultsByParams_Uint16[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Uint16(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqByteOrder_Uint16_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqByteOrder_Uint16_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqByteOrder_Uint16_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 uint16
				}
				Sequence   uint32
				DoFn       MoqByteOrder_Uint16_doFn
				DoReturnFn MoqByteOrder_Uint16_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqByteOrder) PrettyParams_Uint16(params MoqByteOrder_Uint16_params) string {
	return fmt.Sprintf("Uint16(%#v)", params.Param1)
}

func (m *MoqByteOrder) ParamsKey_Uint16(params MoqByteOrder_Uint16_params, anyParams uint64) MoqByteOrder_Uint16_paramsKey {
	m.Scene.T.Helper()
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Uint16.Param1 == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The param1 parameter of the Uint16 function can't be indexed by value")
		}
		param1UsedHash = hash.DeepHash(params.Param1)
	}
	return MoqByteOrder_Uint16_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqByteOrder_recorder) Uint32(param1 []byte) *MoqByteOrder_Uint32_fnRecorder {
	return &MoqByteOrder_Uint32_fnRecorder{
		Params: MoqByteOrder_Uint32_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqByteOrder_Uint32_fnRecorder) Any() *MoqByteOrder_Uint32_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint32(r.Params))
		return nil
	}
	return &MoqByteOrder_Uint32_anyParams{Recorder: r}
}

func (a *MoqByteOrder_Uint32_anyParams) Param1() *MoqByteOrder_Uint32_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqByteOrder_Uint32_fnRecorder) Seq() *MoqByteOrder_Uint32_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint32(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqByteOrder_Uint32_fnRecorder) NoSeq() *MoqByteOrder_Uint32_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint32(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqByteOrder_Uint32_fnRecorder) ReturnResults(result1 uint32) *MoqByteOrder_Uint32_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint32
		}
		Sequence   uint32
		DoFn       MoqByteOrder_Uint32_doFn
		DoReturnFn MoqByteOrder_Uint32_doReturnFn
	}{
		Values: &struct {
			Result1 uint32
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqByteOrder_Uint32_fnRecorder) AndDo(fn MoqByteOrder_Uint32_doFn) *MoqByteOrder_Uint32_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqByteOrder_Uint32_fnRecorder) DoReturnResults(fn MoqByteOrder_Uint32_doReturnFn) *MoqByteOrder_Uint32_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint32
		}
		Sequence   uint32
		DoFn       MoqByteOrder_Uint32_doFn
		DoReturnFn MoqByteOrder_Uint32_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqByteOrder_Uint32_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqByteOrder_Uint32_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Uint32 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqByteOrder_Uint32_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqByteOrder_Uint32_paramsKey]*MoqByteOrder_Uint32_results{},
		}
		r.Moq.ResultsByParams_Uint32 = append(r.Moq.ResultsByParams_Uint32, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Uint32) {
			copy(r.Moq.ResultsByParams_Uint32[insertAt+1:], r.Moq.ResultsByParams_Uint32[insertAt:0])
			r.Moq.ResultsByParams_Uint32[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Uint32(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqByteOrder_Uint32_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqByteOrder_Uint32_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqByteOrder_Uint32_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 uint32
				}
				Sequence   uint32
				DoFn       MoqByteOrder_Uint32_doFn
				DoReturnFn MoqByteOrder_Uint32_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqByteOrder) PrettyParams_Uint32(params MoqByteOrder_Uint32_params) string {
	return fmt.Sprintf("Uint32(%#v)", params.Param1)
}

func (m *MoqByteOrder) ParamsKey_Uint32(params MoqByteOrder_Uint32_params, anyParams uint64) MoqByteOrder_Uint32_paramsKey {
	m.Scene.T.Helper()
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Uint32.Param1 == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The param1 parameter of the Uint32 function can't be indexed by value")
		}
		param1UsedHash = hash.DeepHash(params.Param1)
	}
	return MoqByteOrder_Uint32_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqByteOrder_recorder) Uint64(param1 []byte) *MoqByteOrder_Uint64_fnRecorder {
	return &MoqByteOrder_Uint64_fnRecorder{
		Params: MoqByteOrder_Uint64_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqByteOrder_Uint64_fnRecorder) Any() *MoqByteOrder_Uint64_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint64(r.Params))
		return nil
	}
	return &MoqByteOrder_Uint64_anyParams{Recorder: r}
}

func (a *MoqByteOrder_Uint64_anyParams) Param1() *MoqByteOrder_Uint64_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqByteOrder_Uint64_fnRecorder) Seq() *MoqByteOrder_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint64(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqByteOrder_Uint64_fnRecorder) NoSeq() *MoqByteOrder_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint64(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqByteOrder_Uint64_fnRecorder) ReturnResults(result1 uint64) *MoqByteOrder_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint64
		}
		Sequence   uint32
		DoFn       MoqByteOrder_Uint64_doFn
		DoReturnFn MoqByteOrder_Uint64_doReturnFn
	}{
		Values: &struct {
			Result1 uint64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqByteOrder_Uint64_fnRecorder) AndDo(fn MoqByteOrder_Uint64_doFn) *MoqByteOrder_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqByteOrder_Uint64_fnRecorder) DoReturnResults(fn MoqByteOrder_Uint64_doReturnFn) *MoqByteOrder_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint64
		}
		Sequence   uint32
		DoFn       MoqByteOrder_Uint64_doFn
		DoReturnFn MoqByteOrder_Uint64_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqByteOrder_Uint64_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqByteOrder_Uint64_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Uint64 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqByteOrder_Uint64_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqByteOrder_Uint64_paramsKey]*MoqByteOrder_Uint64_results{},
		}
		r.Moq.ResultsByParams_Uint64 = append(r.Moq.ResultsByParams_Uint64, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Uint64) {
			copy(r.Moq.ResultsByParams_Uint64[insertAt+1:], r.Moq.ResultsByParams_Uint64[insertAt:0])
			r.Moq.ResultsByParams_Uint64[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Uint64(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqByteOrder_Uint64_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqByteOrder_Uint64_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqByteOrder_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 uint64
				}
				Sequence   uint32
				DoFn       MoqByteOrder_Uint64_doFn
				DoReturnFn MoqByteOrder_Uint64_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqByteOrder) PrettyParams_Uint64(params MoqByteOrder_Uint64_params) string {
	return fmt.Sprintf("Uint64(%#v)", params.Param1)
}

func (m *MoqByteOrder) ParamsKey_Uint64(params MoqByteOrder_Uint64_params, anyParams uint64) MoqByteOrder_Uint64_paramsKey {
	m.Scene.T.Helper()
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Uint64.Param1 == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The param1 parameter of the Uint64 function can't be indexed by value")
		}
		param1UsedHash = hash.DeepHash(params.Param1)
	}
	return MoqByteOrder_Uint64_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqByteOrder_recorder) PutUint16(param1 []byte, param2 uint16) *MoqByteOrder_PutUint16_fnRecorder {
	return &MoqByteOrder_PutUint16_fnRecorder{
		Params: MoqByteOrder_PutUint16_params{
			Param1: param1,
			Param2: param2,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqByteOrder_PutUint16_fnRecorder) Any() *MoqByteOrder_PutUint16_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PutUint16(r.Params))
		return nil
	}
	return &MoqByteOrder_PutUint16_anyParams{Recorder: r}
}

func (a *MoqByteOrder_PutUint16_anyParams) Param1() *MoqByteOrder_PutUint16_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqByteOrder_PutUint16_anyParams) Param2() *MoqByteOrder_PutUint16_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqByteOrder_PutUint16_fnRecorder) Seq() *MoqByteOrder_PutUint16_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PutUint16(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqByteOrder_PutUint16_fnRecorder) NoSeq() *MoqByteOrder_PutUint16_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PutUint16(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqByteOrder_PutUint16_fnRecorder) ReturnResults() *MoqByteOrder_PutUint16_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqByteOrder_PutUint16_doFn
		DoReturnFn MoqByteOrder_PutUint16_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqByteOrder_PutUint16_fnRecorder) AndDo(fn MoqByteOrder_PutUint16_doFn) *MoqByteOrder_PutUint16_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqByteOrder_PutUint16_fnRecorder) DoReturnResults(fn MoqByteOrder_PutUint16_doReturnFn) *MoqByteOrder_PutUint16_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqByteOrder_PutUint16_doFn
		DoReturnFn MoqByteOrder_PutUint16_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqByteOrder_PutUint16_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqByteOrder_PutUint16_resultsByParams
	for n, res := range r.Moq.ResultsByParams_PutUint16 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqByteOrder_PutUint16_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqByteOrder_PutUint16_paramsKey]*MoqByteOrder_PutUint16_results{},
		}
		r.Moq.ResultsByParams_PutUint16 = append(r.Moq.ResultsByParams_PutUint16, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_PutUint16) {
			copy(r.Moq.ResultsByParams_PutUint16[insertAt+1:], r.Moq.ResultsByParams_PutUint16[insertAt:0])
			r.Moq.ResultsByParams_PutUint16[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_PutUint16(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqByteOrder_PutUint16_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqByteOrder_PutUint16_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqByteOrder_PutUint16_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqByteOrder_PutUint16_doFn
				DoReturnFn MoqByteOrder_PutUint16_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqByteOrder) PrettyParams_PutUint16(params MoqByteOrder_PutUint16_params) string {
	return fmt.Sprintf("PutUint16(%#v, %#v)", params.Param1, params.Param2)
}

func (m *MoqByteOrder) ParamsKey_PutUint16(params MoqByteOrder_PutUint16_params, anyParams uint64) MoqByteOrder_PutUint16_paramsKey {
	m.Scene.T.Helper()
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.PutUint16.Param1 == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The param1 parameter of the PutUint16 function can't be indexed by value")
		}
		param1UsedHash = hash.DeepHash(params.Param1)
	}
	var param2Used uint16
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.PutUint16.Param2 == moq.ParamIndexByValue {
			param2Used = params.Param2
		} else {
			param2UsedHash = hash.DeepHash(params.Param2)
		}
	}
	return MoqByteOrder_PutUint16_paramsKey{
		Params: struct{ Param2 uint16 }{
			Param2: param2Used,
		},
		Hashes: struct {
			Param1 hash.Hash
			Param2 hash.Hash
		}{
			Param1: param1UsedHash,
			Param2: param2UsedHash,
		},
	}
}

func (m *MoqByteOrder_recorder) PutUint32(param1 []byte, param2 uint32) *MoqByteOrder_PutUint32_fnRecorder {
	return &MoqByteOrder_PutUint32_fnRecorder{
		Params: MoqByteOrder_PutUint32_params{
			Param1: param1,
			Param2: param2,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqByteOrder_PutUint32_fnRecorder) Any() *MoqByteOrder_PutUint32_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PutUint32(r.Params))
		return nil
	}
	return &MoqByteOrder_PutUint32_anyParams{Recorder: r}
}

func (a *MoqByteOrder_PutUint32_anyParams) Param1() *MoqByteOrder_PutUint32_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqByteOrder_PutUint32_anyParams) Param2() *MoqByteOrder_PutUint32_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqByteOrder_PutUint32_fnRecorder) Seq() *MoqByteOrder_PutUint32_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PutUint32(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqByteOrder_PutUint32_fnRecorder) NoSeq() *MoqByteOrder_PutUint32_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PutUint32(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqByteOrder_PutUint32_fnRecorder) ReturnResults() *MoqByteOrder_PutUint32_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqByteOrder_PutUint32_doFn
		DoReturnFn MoqByteOrder_PutUint32_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqByteOrder_PutUint32_fnRecorder) AndDo(fn MoqByteOrder_PutUint32_doFn) *MoqByteOrder_PutUint32_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqByteOrder_PutUint32_fnRecorder) DoReturnResults(fn MoqByteOrder_PutUint32_doReturnFn) *MoqByteOrder_PutUint32_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqByteOrder_PutUint32_doFn
		DoReturnFn MoqByteOrder_PutUint32_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqByteOrder_PutUint32_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqByteOrder_PutUint32_resultsByParams
	for n, res := range r.Moq.ResultsByParams_PutUint32 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqByteOrder_PutUint32_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqByteOrder_PutUint32_paramsKey]*MoqByteOrder_PutUint32_results{},
		}
		r.Moq.ResultsByParams_PutUint32 = append(r.Moq.ResultsByParams_PutUint32, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_PutUint32) {
			copy(r.Moq.ResultsByParams_PutUint32[insertAt+1:], r.Moq.ResultsByParams_PutUint32[insertAt:0])
			r.Moq.ResultsByParams_PutUint32[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_PutUint32(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqByteOrder_PutUint32_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqByteOrder_PutUint32_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqByteOrder_PutUint32_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqByteOrder_PutUint32_doFn
				DoReturnFn MoqByteOrder_PutUint32_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqByteOrder) PrettyParams_PutUint32(params MoqByteOrder_PutUint32_params) string {
	return fmt.Sprintf("PutUint32(%#v, %#v)", params.Param1, params.Param2)
}

func (m *MoqByteOrder) ParamsKey_PutUint32(params MoqByteOrder_PutUint32_params, anyParams uint64) MoqByteOrder_PutUint32_paramsKey {
	m.Scene.T.Helper()
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.PutUint32.Param1 == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The param1 parameter of the PutUint32 function can't be indexed by value")
		}
		param1UsedHash = hash.DeepHash(params.Param1)
	}
	var param2Used uint32
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.PutUint32.Param2 == moq.ParamIndexByValue {
			param2Used = params.Param2
		} else {
			param2UsedHash = hash.DeepHash(params.Param2)
		}
	}
	return MoqByteOrder_PutUint32_paramsKey{
		Params: struct{ Param2 uint32 }{
			Param2: param2Used,
		},
		Hashes: struct {
			Param1 hash.Hash
			Param2 hash.Hash
		}{
			Param1: param1UsedHash,
			Param2: param2UsedHash,
		},
	}
}

func (m *MoqByteOrder_recorder) PutUint64(param1 []byte, param2 uint64) *MoqByteOrder_PutUint64_fnRecorder {
	return &MoqByteOrder_PutUint64_fnRecorder{
		Params: MoqByteOrder_PutUint64_params{
			Param1: param1,
			Param2: param2,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqByteOrder_PutUint64_fnRecorder) Any() *MoqByteOrder_PutUint64_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PutUint64(r.Params))
		return nil
	}
	return &MoqByteOrder_PutUint64_anyParams{Recorder: r}
}

func (a *MoqByteOrder_PutUint64_anyParams) Param1() *MoqByteOrder_PutUint64_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqByteOrder_PutUint64_anyParams) Param2() *MoqByteOrder_PutUint64_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqByteOrder_PutUint64_fnRecorder) Seq() *MoqByteOrder_PutUint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PutUint64(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqByteOrder_PutUint64_fnRecorder) NoSeq() *MoqByteOrder_PutUint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PutUint64(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqByteOrder_PutUint64_fnRecorder) ReturnResults() *MoqByteOrder_PutUint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqByteOrder_PutUint64_doFn
		DoReturnFn MoqByteOrder_PutUint64_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqByteOrder_PutUint64_fnRecorder) AndDo(fn MoqByteOrder_PutUint64_doFn) *MoqByteOrder_PutUint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqByteOrder_PutUint64_fnRecorder) DoReturnResults(fn MoqByteOrder_PutUint64_doReturnFn) *MoqByteOrder_PutUint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqByteOrder_PutUint64_doFn
		DoReturnFn MoqByteOrder_PutUint64_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqByteOrder_PutUint64_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqByteOrder_PutUint64_resultsByParams
	for n, res := range r.Moq.ResultsByParams_PutUint64 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqByteOrder_PutUint64_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqByteOrder_PutUint64_paramsKey]*MoqByteOrder_PutUint64_results{},
		}
		r.Moq.ResultsByParams_PutUint64 = append(r.Moq.ResultsByParams_PutUint64, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_PutUint64) {
			copy(r.Moq.ResultsByParams_PutUint64[insertAt+1:], r.Moq.ResultsByParams_PutUint64[insertAt:0])
			r.Moq.ResultsByParams_PutUint64[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_PutUint64(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqByteOrder_PutUint64_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqByteOrder_PutUint64_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqByteOrder_PutUint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqByteOrder_PutUint64_doFn
				DoReturnFn MoqByteOrder_PutUint64_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqByteOrder) PrettyParams_PutUint64(params MoqByteOrder_PutUint64_params) string {
	return fmt.Sprintf("PutUint64(%#v, %#v)", params.Param1, params.Param2)
}

func (m *MoqByteOrder) ParamsKey_PutUint64(params MoqByteOrder_PutUint64_params, anyParams uint64) MoqByteOrder_PutUint64_paramsKey {
	m.Scene.T.Helper()
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.PutUint64.Param1 == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The param1 parameter of the PutUint64 function can't be indexed by value")
		}
		param1UsedHash = hash.DeepHash(params.Param1)
	}
	var param2Used uint64
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.PutUint64.Param2 == moq.ParamIndexByValue {
			param2Used = params.Param2
		} else {
			param2UsedHash = hash.DeepHash(params.Param2)
		}
	}
	return MoqByteOrder_PutUint64_paramsKey{
		Params: struct{ Param2 uint64 }{
			Param2: param2Used,
		},
		Hashes: struct {
			Param1 hash.Hash
			Param2 hash.Hash
		}{
			Param1: param1UsedHash,
			Param2: param2UsedHash,
		},
	}
}

func (m *MoqByteOrder_recorder) String() *MoqByteOrder_String_fnRecorder {
	return &MoqByteOrder_String_fnRecorder{
		Params:   MoqByteOrder_String_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqByteOrder_String_fnRecorder) Any() *MoqByteOrder_String_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	return &MoqByteOrder_String_anyParams{Recorder: r}
}

func (r *MoqByteOrder_String_fnRecorder) Seq() *MoqByteOrder_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqByteOrder_String_fnRecorder) NoSeq() *MoqByteOrder_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_String(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqByteOrder_String_fnRecorder) ReturnResults(result1 string) *MoqByteOrder_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqByteOrder_String_doFn
		DoReturnFn MoqByteOrder_String_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqByteOrder_String_fnRecorder) AndDo(fn MoqByteOrder_String_doFn) *MoqByteOrder_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqByteOrder_String_fnRecorder) DoReturnResults(fn MoqByteOrder_String_doReturnFn) *MoqByteOrder_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqByteOrder_String_doFn
		DoReturnFn MoqByteOrder_String_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqByteOrder_String_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqByteOrder_String_resultsByParams
	for n, res := range r.Moq.ResultsByParams_String {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqByteOrder_String_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqByteOrder_String_paramsKey]*MoqByteOrder_String_results{},
		}
		r.Moq.ResultsByParams_String = append(r.Moq.ResultsByParams_String, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_String) {
			copy(r.Moq.ResultsByParams_String[insertAt+1:], r.Moq.ResultsByParams_String[insertAt:0])
			r.Moq.ResultsByParams_String[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_String(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqByteOrder_String_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqByteOrder_String_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqByteOrder_String_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqByteOrder_String_doFn
				DoReturnFn MoqByteOrder_String_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqByteOrder) PrettyParams_String(params MoqByteOrder_String_params) string {
	return fmt.Sprintf("String()")
}

func (m *MoqByteOrder) ParamsKey_String(params MoqByteOrder_String_params, anyParams uint64) MoqByteOrder_String_paramsKey {
	m.Scene.T.Helper()
	return MoqByteOrder_String_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqByteOrder) Reset() {
	m.ResultsByParams_Uint16 = nil
	m.ResultsByParams_Uint32 = nil
	m.ResultsByParams_Uint64 = nil
	m.ResultsByParams_PutUint16 = nil
	m.ResultsByParams_PutUint32 = nil
	m.ResultsByParams_PutUint64 = nil
	m.ResultsByParams_String = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqByteOrder) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Uint16 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Uint16(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Uint32 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Uint32(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Uint64 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Uint64(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_PutUint16 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_PutUint16(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_PutUint32 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_PutUint32(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_PutUint64 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_PutUint64(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_String {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_String(results.Params))
			}
		}
	}
}
