// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package gob

import (
	"fmt"
	"math/bits"
	"reflect"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that gob.Decoder_starGenType is mocked
// completely
var _ Decoder_starGenType = (*MoqDecoder_starGenType_mock)(nil)

// Decoder_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Decoder_starGenType interface {
	Decode(e any) error
	DecodeValue(v reflect.Value) error
}

// MoqDecoder_starGenType holds the state of a moq of the Decoder_starGenType
// type
type MoqDecoder_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqDecoder_starGenType_mock

	ResultsByParams_Decode      []MoqDecoder_starGenType_Decode_resultsByParams
	ResultsByParams_DecodeValue []MoqDecoder_starGenType_DecodeValue_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Decode struct {
				E moq.ParamIndexing
			}
			DecodeValue struct {
				V moq.ParamIndexing
			}
		}
	}
	// MoqDecoder_starGenType_mock isolates the mock interface of the
}

// Decoder_starGenType type
type MoqDecoder_starGenType_mock struct {
	Moq *MoqDecoder_starGenType
}

// MoqDecoder_starGenType_recorder isolates the recorder interface of the
// Decoder_starGenType type
type MoqDecoder_starGenType_recorder struct {
	Moq *MoqDecoder_starGenType
}

// MoqDecoder_starGenType_Decode_params holds the params of the
// Decoder_starGenType type
type MoqDecoder_starGenType_Decode_params struct{ E any }

// MoqDecoder_starGenType_Decode_paramsKey holds the map key params of the
// Decoder_starGenType type
type MoqDecoder_starGenType_Decode_paramsKey struct {
	Params struct{ E any }
	Hashes struct{ E hash.Hash }
}

// MoqDecoder_starGenType_Decode_resultsByParams contains the results for a
// given set of parameters for the Decoder_starGenType type
type MoqDecoder_starGenType_Decode_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDecoder_starGenType_Decode_paramsKey]*MoqDecoder_starGenType_Decode_results
}

// MoqDecoder_starGenType_Decode_doFn defines the type of function needed when
// calling AndDo for the Decoder_starGenType type
type MoqDecoder_starGenType_Decode_doFn func(e any)

// MoqDecoder_starGenType_Decode_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Decoder_starGenType type
type MoqDecoder_starGenType_Decode_doReturnFn func(e any) error

// MoqDecoder_starGenType_Decode_results holds the results of the
// Decoder_starGenType type
type MoqDecoder_starGenType_Decode_results struct {
	Params  MoqDecoder_starGenType_Decode_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_Decode_doFn
		DoReturnFn MoqDecoder_starGenType_Decode_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDecoder_starGenType_Decode_fnRecorder routes recorded function calls to
// the MoqDecoder_starGenType moq
type MoqDecoder_starGenType_Decode_fnRecorder struct {
	Params    MoqDecoder_starGenType_Decode_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDecoder_starGenType_Decode_results
	Moq       *MoqDecoder_starGenType
}

// MoqDecoder_starGenType_Decode_anyParams isolates the any params functions of
// the Decoder_starGenType type
type MoqDecoder_starGenType_Decode_anyParams struct {
	Recorder *MoqDecoder_starGenType_Decode_fnRecorder
}

// MoqDecoder_starGenType_DecodeValue_params holds the params of the
// Decoder_starGenType type
type MoqDecoder_starGenType_DecodeValue_params struct{ V reflect.Value }

// MoqDecoder_starGenType_DecodeValue_paramsKey holds the map key params of the
// Decoder_starGenType type
type MoqDecoder_starGenType_DecodeValue_paramsKey struct {
	Params struct{ V reflect.Value }
	Hashes struct{ V hash.Hash }
}

// MoqDecoder_starGenType_DecodeValue_resultsByParams contains the results for
// a given set of parameters for the Decoder_starGenType type
type MoqDecoder_starGenType_DecodeValue_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDecoder_starGenType_DecodeValue_paramsKey]*MoqDecoder_starGenType_DecodeValue_results
}

// MoqDecoder_starGenType_DecodeValue_doFn defines the type of function needed
// when calling AndDo for the Decoder_starGenType type
type MoqDecoder_starGenType_DecodeValue_doFn func(v reflect.Value)

// MoqDecoder_starGenType_DecodeValue_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Decoder_starGenType type
type MoqDecoder_starGenType_DecodeValue_doReturnFn func(v reflect.Value) error

// MoqDecoder_starGenType_DecodeValue_results holds the results of the
// Decoder_starGenType type
type MoqDecoder_starGenType_DecodeValue_results struct {
	Params  MoqDecoder_starGenType_DecodeValue_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_DecodeValue_doFn
		DoReturnFn MoqDecoder_starGenType_DecodeValue_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDecoder_starGenType_DecodeValue_fnRecorder routes recorded function calls
// to the MoqDecoder_starGenType moq
type MoqDecoder_starGenType_DecodeValue_fnRecorder struct {
	Params    MoqDecoder_starGenType_DecodeValue_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDecoder_starGenType_DecodeValue_results
	Moq       *MoqDecoder_starGenType
}

// MoqDecoder_starGenType_DecodeValue_anyParams isolates the any params
// functions of the Decoder_starGenType type
type MoqDecoder_starGenType_DecodeValue_anyParams struct {
	Recorder *MoqDecoder_starGenType_DecodeValue_fnRecorder
}

// NewMoqDecoder_starGenType creates a new moq of the Decoder_starGenType type
func NewMoqDecoder_starGenType(scene *moq.Scene, config *moq.Config) *MoqDecoder_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqDecoder_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqDecoder_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Decode struct {
					E moq.ParamIndexing
				}
				DecodeValue struct {
					V moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Decode struct {
				E moq.ParamIndexing
			}
			DecodeValue struct {
				V moq.ParamIndexing
			}
		}{
			Decode: struct {
				E moq.ParamIndexing
			}{
				E: moq.ParamIndexByValue,
			},
			DecodeValue: struct {
				V moq.ParamIndexing
			}{
				V: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Decoder_starGenType type
func (m *MoqDecoder_starGenType) Mock() *MoqDecoder_starGenType_mock { return m.Moq }

func (m *MoqDecoder_starGenType_mock) Decode(e any) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqDecoder_starGenType_Decode_params{
		E: e,
	}
	var results *MoqDecoder_starGenType_Decode_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Decode {
		paramsKey := m.Moq.ParamsKey_Decode(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Decode(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Decode(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Decode(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(e)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(e)
	}
	return
}

func (m *MoqDecoder_starGenType_mock) DecodeValue(v reflect.Value) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqDecoder_starGenType_DecodeValue_params{
		V: v,
	}
	var results *MoqDecoder_starGenType_DecodeValue_results
	for _, resultsByParams := range m.Moq.ResultsByParams_DecodeValue {
		paramsKey := m.Moq.ParamsKey_DecodeValue(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_DecodeValue(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_DecodeValue(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_DecodeValue(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(v)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(v)
	}
	return
}

// OnCall returns the recorder implementation of the Decoder_starGenType type
func (m *MoqDecoder_starGenType) OnCall() *MoqDecoder_starGenType_recorder {
	return &MoqDecoder_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqDecoder_starGenType_recorder) Decode(e any) *MoqDecoder_starGenType_Decode_fnRecorder {
	return &MoqDecoder_starGenType_Decode_fnRecorder{
		Params: MoqDecoder_starGenType_Decode_params{
			E: e,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDecoder_starGenType_Decode_fnRecorder) Any() *MoqDecoder_starGenType_Decode_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Decode(r.Params))
		return nil
	}
	return &MoqDecoder_starGenType_Decode_anyParams{Recorder: r}
}

func (a *MoqDecoder_starGenType_Decode_anyParams) E() *MoqDecoder_starGenType_Decode_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqDecoder_starGenType_Decode_fnRecorder) Seq() *MoqDecoder_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Decode(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDecoder_starGenType_Decode_fnRecorder) NoSeq() *MoqDecoder_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Decode(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDecoder_starGenType_Decode_fnRecorder) ReturnResults(result1 error) *MoqDecoder_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_Decode_doFn
		DoReturnFn MoqDecoder_starGenType_Decode_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDecoder_starGenType_Decode_fnRecorder) AndDo(fn MoqDecoder_starGenType_Decode_doFn) *MoqDecoder_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDecoder_starGenType_Decode_fnRecorder) DoReturnResults(fn MoqDecoder_starGenType_Decode_doReturnFn) *MoqDecoder_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_Decode_doFn
		DoReturnFn MoqDecoder_starGenType_Decode_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDecoder_starGenType_Decode_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDecoder_starGenType_Decode_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Decode {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDecoder_starGenType_Decode_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDecoder_starGenType_Decode_paramsKey]*MoqDecoder_starGenType_Decode_results{},
		}
		r.Moq.ResultsByParams_Decode = append(r.Moq.ResultsByParams_Decode, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Decode) {
			copy(r.Moq.ResultsByParams_Decode[insertAt+1:], r.Moq.ResultsByParams_Decode[insertAt:0])
			r.Moq.ResultsByParams_Decode[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Decode(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDecoder_starGenType_Decode_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDecoder_starGenType_Decode_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDecoder_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqDecoder_starGenType_Decode_doFn
				DoReturnFn MoqDecoder_starGenType_Decode_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDecoder_starGenType) PrettyParams_Decode(params MoqDecoder_starGenType_Decode_params) string {
	return fmt.Sprintf("Decode(%#v)", params.E)
}

func (m *MoqDecoder_starGenType) ParamsKey_Decode(params MoqDecoder_starGenType_Decode_params, anyParams uint64) MoqDecoder_starGenType_Decode_paramsKey {
	m.Scene.T.Helper()
	var eUsed any
	var eUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Decode.E == moq.ParamIndexByValue {
			eUsed = params.E
		} else {
			eUsedHash = hash.DeepHash(params.E)
		}
	}
	return MoqDecoder_starGenType_Decode_paramsKey{
		Params: struct{ E any }{
			E: eUsed,
		},
		Hashes: struct{ E hash.Hash }{
			E: eUsedHash,
		},
	}
}

func (m *MoqDecoder_starGenType_recorder) DecodeValue(v reflect.Value) *MoqDecoder_starGenType_DecodeValue_fnRecorder {
	return &MoqDecoder_starGenType_DecodeValue_fnRecorder{
		Params: MoqDecoder_starGenType_DecodeValue_params{
			V: v,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDecoder_starGenType_DecodeValue_fnRecorder) Any() *MoqDecoder_starGenType_DecodeValue_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DecodeValue(r.Params))
		return nil
	}
	return &MoqDecoder_starGenType_DecodeValue_anyParams{Recorder: r}
}

func (a *MoqDecoder_starGenType_DecodeValue_anyParams) V() *MoqDecoder_starGenType_DecodeValue_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqDecoder_starGenType_DecodeValue_fnRecorder) Seq() *MoqDecoder_starGenType_DecodeValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DecodeValue(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDecoder_starGenType_DecodeValue_fnRecorder) NoSeq() *MoqDecoder_starGenType_DecodeValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DecodeValue(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDecoder_starGenType_DecodeValue_fnRecorder) ReturnResults(result1 error) *MoqDecoder_starGenType_DecodeValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_DecodeValue_doFn
		DoReturnFn MoqDecoder_starGenType_DecodeValue_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDecoder_starGenType_DecodeValue_fnRecorder) AndDo(fn MoqDecoder_starGenType_DecodeValue_doFn) *MoqDecoder_starGenType_DecodeValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDecoder_starGenType_DecodeValue_fnRecorder) DoReturnResults(fn MoqDecoder_starGenType_DecodeValue_doReturnFn) *MoqDecoder_starGenType_DecodeValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqDecoder_starGenType_DecodeValue_doFn
		DoReturnFn MoqDecoder_starGenType_DecodeValue_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDecoder_starGenType_DecodeValue_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDecoder_starGenType_DecodeValue_resultsByParams
	for n, res := range r.Moq.ResultsByParams_DecodeValue {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDecoder_starGenType_DecodeValue_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDecoder_starGenType_DecodeValue_paramsKey]*MoqDecoder_starGenType_DecodeValue_results{},
		}
		r.Moq.ResultsByParams_DecodeValue = append(r.Moq.ResultsByParams_DecodeValue, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_DecodeValue) {
			copy(r.Moq.ResultsByParams_DecodeValue[insertAt+1:], r.Moq.ResultsByParams_DecodeValue[insertAt:0])
			r.Moq.ResultsByParams_DecodeValue[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_DecodeValue(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDecoder_starGenType_DecodeValue_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDecoder_starGenType_DecodeValue_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDecoder_starGenType_DecodeValue_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqDecoder_starGenType_DecodeValue_doFn
				DoReturnFn MoqDecoder_starGenType_DecodeValue_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDecoder_starGenType) PrettyParams_DecodeValue(params MoqDecoder_starGenType_DecodeValue_params) string {
	return fmt.Sprintf("DecodeValue(%#v)", params.V)
}

func (m *MoqDecoder_starGenType) ParamsKey_DecodeValue(params MoqDecoder_starGenType_DecodeValue_params, anyParams uint64) MoqDecoder_starGenType_DecodeValue_paramsKey {
	m.Scene.T.Helper()
	var vUsed reflect.Value
	var vUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.DecodeValue.V == moq.ParamIndexByValue {
			vUsed = params.V
		} else {
			vUsedHash = hash.DeepHash(params.V)
		}
	}
	return MoqDecoder_starGenType_DecodeValue_paramsKey{
		Params: struct{ V reflect.Value }{
			V: vUsed,
		},
		Hashes: struct{ V hash.Hash }{
			V: vUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqDecoder_starGenType) Reset() {
	m.ResultsByParams_Decode = nil
	m.ResultsByParams_DecodeValue = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqDecoder_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Decode {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Decode(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_DecodeValue {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_DecodeValue(results.Params))
			}
		}
	}
}
