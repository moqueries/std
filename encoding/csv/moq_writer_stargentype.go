// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package csv

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that csv.Writer_starGenType is mocked
// completely
var _ Writer_starGenType = (*MoqWriter_starGenType_mock)(nil)

// Writer_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Writer_starGenType interface {
	Write(record []string) error
	Flush()
	Error() error
	WriteAll(records [][]string) error
}

// MoqWriter_starGenType holds the state of a moq of the Writer_starGenType
// type
type MoqWriter_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqWriter_starGenType_mock

	ResultsByParams_Write    []MoqWriter_starGenType_Write_resultsByParams
	ResultsByParams_Flush    []MoqWriter_starGenType_Flush_resultsByParams
	ResultsByParams_Error    []MoqWriter_starGenType_Error_resultsByParams
	ResultsByParams_WriteAll []MoqWriter_starGenType_WriteAll_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Write struct {
				Record moq.ParamIndexing
			}
			Flush    struct{}
			Error    struct{}
			WriteAll struct {
				Records moq.ParamIndexing
			}
		}
	}
	// MoqWriter_starGenType_mock isolates the mock interface of the
}

// Writer_starGenType type
type MoqWriter_starGenType_mock struct {
	Moq *MoqWriter_starGenType
}

// MoqWriter_starGenType_recorder isolates the recorder interface of the
// Writer_starGenType type
type MoqWriter_starGenType_recorder struct {
	Moq *MoqWriter_starGenType
}

// MoqWriter_starGenType_Write_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Write_params struct{ Record []string }

// MoqWriter_starGenType_Write_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Write_paramsKey struct {
	Params struct{}
	Hashes struct{ Record hash.Hash }
}

// MoqWriter_starGenType_Write_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Write_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Write_paramsKey]*MoqWriter_starGenType_Write_results
}

// MoqWriter_starGenType_Write_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Write_doFn func(record []string)

// MoqWriter_starGenType_Write_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Write_doReturnFn func(record []string) error

// MoqWriter_starGenType_Write_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Write_results struct {
	Params  MoqWriter_starGenType_Write_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Write_doFn
		DoReturnFn MoqWriter_starGenType_Write_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Write_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Write_fnRecorder struct {
	Params    MoqWriter_starGenType_Write_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Write_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Write_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Write_anyParams struct {
	Recorder *MoqWriter_starGenType_Write_fnRecorder
}

// MoqWriter_starGenType_Flush_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Flush_params struct{}

// MoqWriter_starGenType_Flush_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Flush_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWriter_starGenType_Flush_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Flush_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Flush_paramsKey]*MoqWriter_starGenType_Flush_results
}

// MoqWriter_starGenType_Flush_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Flush_doFn func()

// MoqWriter_starGenType_Flush_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Flush_doReturnFn func()

// MoqWriter_starGenType_Flush_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Flush_results struct {
	Params  MoqWriter_starGenType_Flush_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Flush_doFn
		DoReturnFn MoqWriter_starGenType_Flush_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Flush_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Flush_fnRecorder struct {
	Params    MoqWriter_starGenType_Flush_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Flush_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Flush_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Flush_anyParams struct {
	Recorder *MoqWriter_starGenType_Flush_fnRecorder
}

// MoqWriter_starGenType_Error_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Error_params struct{}

// MoqWriter_starGenType_Error_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Error_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWriter_starGenType_Error_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Error_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Error_paramsKey]*MoqWriter_starGenType_Error_results
}

// MoqWriter_starGenType_Error_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Error_doFn func()

// MoqWriter_starGenType_Error_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Error_doReturnFn func() error

// MoqWriter_starGenType_Error_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Error_results struct {
	Params  MoqWriter_starGenType_Error_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Error_doFn
		DoReturnFn MoqWriter_starGenType_Error_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Error_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Error_fnRecorder struct {
	Params    MoqWriter_starGenType_Error_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Error_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Error_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Error_anyParams struct {
	Recorder *MoqWriter_starGenType_Error_fnRecorder
}

// MoqWriter_starGenType_WriteAll_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_WriteAll_params struct{ Records [][]string }

// MoqWriter_starGenType_WriteAll_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_WriteAll_paramsKey struct {
	Params struct{}
	Hashes struct{ Records hash.Hash }
}

// MoqWriter_starGenType_WriteAll_resultsByParams contains the results for a
// given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_WriteAll_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_WriteAll_paramsKey]*MoqWriter_starGenType_WriteAll_results
}

// MoqWriter_starGenType_WriteAll_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_WriteAll_doFn func(records [][]string)

// MoqWriter_starGenType_WriteAll_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_WriteAll_doReturnFn func(records [][]string) error

// MoqWriter_starGenType_WriteAll_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_WriteAll_results struct {
	Params  MoqWriter_starGenType_WriteAll_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_WriteAll_doFn
		DoReturnFn MoqWriter_starGenType_WriteAll_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_WriteAll_fnRecorder routes recorded function calls to
// the MoqWriter_starGenType moq
type MoqWriter_starGenType_WriteAll_fnRecorder struct {
	Params    MoqWriter_starGenType_WriteAll_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_WriteAll_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_WriteAll_anyParams isolates the any params functions
// of the Writer_starGenType type
type MoqWriter_starGenType_WriteAll_anyParams struct {
	Recorder *MoqWriter_starGenType_WriteAll_fnRecorder
}

// NewMoqWriter_starGenType creates a new moq of the Writer_starGenType type
func NewMoqWriter_starGenType(scene *moq.Scene, config *moq.Config) *MoqWriter_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqWriter_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqWriter_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Write struct {
					Record moq.ParamIndexing
				}
				Flush    struct{}
				Error    struct{}
				WriteAll struct {
					Records moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Write struct {
				Record moq.ParamIndexing
			}
			Flush    struct{}
			Error    struct{}
			WriteAll struct {
				Records moq.ParamIndexing
			}
		}{
			Write: struct {
				Record moq.ParamIndexing
			}{
				Record: moq.ParamIndexByHash,
			},
			Flush: struct{}{},
			Error: struct{}{},
			WriteAll: struct {
				Records moq.ParamIndexing
			}{
				Records: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Writer_starGenType type
func (m *MoqWriter_starGenType) Mock() *MoqWriter_starGenType_mock { return m.Moq }

func (m *MoqWriter_starGenType_mock) Write(record []string) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Write_params{
		Record: record,
	}
	var results *MoqWriter_starGenType_Write_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Write {
		paramsKey := m.Moq.ParamsKey_Write(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Write(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Write(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Write(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(record)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(record)
	}
	return
}

func (m *MoqWriter_starGenType_mock) Flush() {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Flush_params{}
	var results *MoqWriter_starGenType_Flush_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Flush {
		paramsKey := m.Moq.ParamsKey_Flush(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Flush(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Flush(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Flush(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqWriter_starGenType_mock) Error() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Error_params{}
	var results *MoqWriter_starGenType_Error_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Error {
		paramsKey := m.Moq.ParamsKey_Error(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Error(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Error(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Error(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWriter_starGenType_mock) WriteAll(records [][]string) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_WriteAll_params{
		Records: records,
	}
	var results *MoqWriter_starGenType_WriteAll_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteAll {
		paramsKey := m.Moq.ParamsKey_WriteAll(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteAll(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteAll(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteAll(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(records)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(records)
	}
	return
}

// OnCall returns the recorder implementation of the Writer_starGenType type
func (m *MoqWriter_starGenType) OnCall() *MoqWriter_starGenType_recorder {
	return &MoqWriter_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqWriter_starGenType_recorder) Write(record []string) *MoqWriter_starGenType_Write_fnRecorder {
	return &MoqWriter_starGenType_Write_fnRecorder{
		Params: MoqWriter_starGenType_Write_params{
			Record: record,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Write_fnRecorder) Any() *MoqWriter_starGenType_Write_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Write_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_Write_anyParams) Record() *MoqWriter_starGenType_Write_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_Write_fnRecorder) Seq() *MoqWriter_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Write_fnRecorder) NoSeq() *MoqWriter_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Write_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Write_doFn
		DoReturnFn MoqWriter_starGenType_Write_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Write_fnRecorder) AndDo(fn MoqWriter_starGenType_Write_doFn) *MoqWriter_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Write_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Write_doReturnFn) *MoqWriter_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Write_doFn
		DoReturnFn MoqWriter_starGenType_Write_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Write_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Write_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Write {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Write_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Write_paramsKey]*MoqWriter_starGenType_Write_results{},
		}
		r.Moq.ResultsByParams_Write = append(r.Moq.ResultsByParams_Write, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Write) {
			copy(r.Moq.ResultsByParams_Write[insertAt+1:], r.Moq.ResultsByParams_Write[insertAt:0])
			r.Moq.ResultsByParams_Write[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Write(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Write_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Write_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Write_doFn
				DoReturnFn MoqWriter_starGenType_Write_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Write(params MoqWriter_starGenType_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.Record)
}

func (m *MoqWriter_starGenType) ParamsKey_Write(params MoqWriter_starGenType_Write_params, anyParams uint64) MoqWriter_starGenType_Write_paramsKey {
	m.Scene.T.Helper()
	var recordUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Write.Record == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The record parameter of the Write function can't be indexed by value")
		}
		recordUsedHash = hash.DeepHash(params.Record)
	}
	return MoqWriter_starGenType_Write_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Record hash.Hash }{
			Record: recordUsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) Flush() *MoqWriter_starGenType_Flush_fnRecorder {
	return &MoqWriter_starGenType_Flush_fnRecorder{
		Params:   MoqWriter_starGenType_Flush_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) Any() *MoqWriter_starGenType_Flush_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Flush(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Flush_anyParams{Recorder: r}
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) Seq() *MoqWriter_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Flush(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) NoSeq() *MoqWriter_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Flush(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) ReturnResults() *MoqWriter_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Flush_doFn
		DoReturnFn MoqWriter_starGenType_Flush_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) AndDo(fn MoqWriter_starGenType_Flush_doFn) *MoqWriter_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Flush_doReturnFn) *MoqWriter_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Flush_doFn
		DoReturnFn MoqWriter_starGenType_Flush_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Flush_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Flush {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Flush_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Flush_paramsKey]*MoqWriter_starGenType_Flush_results{},
		}
		r.Moq.ResultsByParams_Flush = append(r.Moq.ResultsByParams_Flush, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Flush) {
			copy(r.Moq.ResultsByParams_Flush[insertAt+1:], r.Moq.ResultsByParams_Flush[insertAt:0])
			r.Moq.ResultsByParams_Flush[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Flush(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Flush_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Flush_doFn
				DoReturnFn MoqWriter_starGenType_Flush_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Flush(params MoqWriter_starGenType_Flush_params) string {
	return fmt.Sprintf("Flush()")
}

func (m *MoqWriter_starGenType) ParamsKey_Flush(params MoqWriter_starGenType_Flush_params, anyParams uint64) MoqWriter_starGenType_Flush_paramsKey {
	m.Scene.T.Helper()
	return MoqWriter_starGenType_Flush_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWriter_starGenType_recorder) Error() *MoqWriter_starGenType_Error_fnRecorder {
	return &MoqWriter_starGenType_Error_fnRecorder{
		Params:   MoqWriter_starGenType_Error_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Error_fnRecorder) Any() *MoqWriter_starGenType_Error_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Error(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Error_anyParams{Recorder: r}
}

func (r *MoqWriter_starGenType_Error_fnRecorder) Seq() *MoqWriter_starGenType_Error_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Error(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Error_fnRecorder) NoSeq() *MoqWriter_starGenType_Error_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Error(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Error_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_Error_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Error_doFn
		DoReturnFn MoqWriter_starGenType_Error_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Error_fnRecorder) AndDo(fn MoqWriter_starGenType_Error_doFn) *MoqWriter_starGenType_Error_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Error_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Error_doReturnFn) *MoqWriter_starGenType_Error_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Error_doFn
		DoReturnFn MoqWriter_starGenType_Error_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Error_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Error_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Error {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Error_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Error_paramsKey]*MoqWriter_starGenType_Error_results{},
		}
		r.Moq.ResultsByParams_Error = append(r.Moq.ResultsByParams_Error, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Error) {
			copy(r.Moq.ResultsByParams_Error[insertAt+1:], r.Moq.ResultsByParams_Error[insertAt:0])
			r.Moq.ResultsByParams_Error[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Error(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Error_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Error_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Error_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Error_doFn
				DoReturnFn MoqWriter_starGenType_Error_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Error(params MoqWriter_starGenType_Error_params) string {
	return fmt.Sprintf("Error()")
}

func (m *MoqWriter_starGenType) ParamsKey_Error(params MoqWriter_starGenType_Error_params, anyParams uint64) MoqWriter_starGenType_Error_paramsKey {
	m.Scene.T.Helper()
	return MoqWriter_starGenType_Error_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWriter_starGenType_recorder) WriteAll(records [][]string) *MoqWriter_starGenType_WriteAll_fnRecorder {
	return &MoqWriter_starGenType_WriteAll_fnRecorder{
		Params: MoqWriter_starGenType_WriteAll_params{
			Records: records,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_WriteAll_fnRecorder) Any() *MoqWriter_starGenType_WriteAll_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteAll(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_WriteAll_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_WriteAll_anyParams) Records() *MoqWriter_starGenType_WriteAll_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_WriteAll_fnRecorder) Seq() *MoqWriter_starGenType_WriteAll_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteAll(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_WriteAll_fnRecorder) NoSeq() *MoqWriter_starGenType_WriteAll_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteAll(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_WriteAll_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_WriteAll_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_WriteAll_doFn
		DoReturnFn MoqWriter_starGenType_WriteAll_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_WriteAll_fnRecorder) AndDo(fn MoqWriter_starGenType_WriteAll_doFn) *MoqWriter_starGenType_WriteAll_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_WriteAll_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_WriteAll_doReturnFn) *MoqWriter_starGenType_WriteAll_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_WriteAll_doFn
		DoReturnFn MoqWriter_starGenType_WriteAll_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_WriteAll_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_WriteAll_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteAll {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_WriteAll_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_WriteAll_paramsKey]*MoqWriter_starGenType_WriteAll_results{},
		}
		r.Moq.ResultsByParams_WriteAll = append(r.Moq.ResultsByParams_WriteAll, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteAll) {
			copy(r.Moq.ResultsByParams_WriteAll[insertAt+1:], r.Moq.ResultsByParams_WriteAll[insertAt:0])
			r.Moq.ResultsByParams_WriteAll[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteAll(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_WriteAll_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_WriteAll_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_WriteAll_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_WriteAll_doFn
				DoReturnFn MoqWriter_starGenType_WriteAll_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_WriteAll(params MoqWriter_starGenType_WriteAll_params) string {
	return fmt.Sprintf("WriteAll(%#v)", params.Records)
}

func (m *MoqWriter_starGenType) ParamsKey_WriteAll(params MoqWriter_starGenType_WriteAll_params, anyParams uint64) MoqWriter_starGenType_WriteAll_paramsKey {
	m.Scene.T.Helper()
	var recordsUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteAll.Records == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The records parameter of the WriteAll function can't be indexed by value")
		}
		recordsUsedHash = hash.DeepHash(params.Records)
	}
	return MoqWriter_starGenType_WriteAll_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Records hash.Hash }{
			Records: recordsUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqWriter_starGenType) Reset() {
	m.ResultsByParams_Write = nil
	m.ResultsByParams_Flush = nil
	m.ResultsByParams_Error = nil
	m.ResultsByParams_WriteAll = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqWriter_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Write {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Write(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Flush {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Flush(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Error {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Error(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteAll {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteAll(results.Params))
			}
		}
	}
}
