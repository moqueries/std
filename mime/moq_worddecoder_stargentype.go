// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package mime

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that mime.WordDecoder_starGenType is
// mocked completely
var _ WordDecoder_starGenType = (*MoqWordDecoder_starGenType_mock)(nil)

// WordDecoder_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type WordDecoder_starGenType interface {
	Decode(word string) (string, error)
	DecodeHeader(header string) (string, error)
}

// MoqWordDecoder_starGenType holds the state of a moq of the
// WordDecoder_starGenType type
type MoqWordDecoder_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqWordDecoder_starGenType_mock

	ResultsByParams_Decode       []MoqWordDecoder_starGenType_Decode_resultsByParams
	ResultsByParams_DecodeHeader []MoqWordDecoder_starGenType_DecodeHeader_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Decode struct {
				Word moq.ParamIndexing
			}
			DecodeHeader struct {
				Header moq.ParamIndexing
			}
		}
	}
	// MoqWordDecoder_starGenType_mock isolates the mock interface of the
}

// WordDecoder_starGenType type
type MoqWordDecoder_starGenType_mock struct {
	Moq *MoqWordDecoder_starGenType
}

// MoqWordDecoder_starGenType_recorder isolates the recorder interface of the
// WordDecoder_starGenType type
type MoqWordDecoder_starGenType_recorder struct {
	Moq *MoqWordDecoder_starGenType
}

// MoqWordDecoder_starGenType_Decode_params holds the params of the
// WordDecoder_starGenType type
type MoqWordDecoder_starGenType_Decode_params struct{ Word string }

// MoqWordDecoder_starGenType_Decode_paramsKey holds the map key params of the
// WordDecoder_starGenType type
type MoqWordDecoder_starGenType_Decode_paramsKey struct {
	Params struct{ Word string }
	Hashes struct{ Word hash.Hash }
}

// MoqWordDecoder_starGenType_Decode_resultsByParams contains the results for a
// given set of parameters for the WordDecoder_starGenType type
type MoqWordDecoder_starGenType_Decode_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWordDecoder_starGenType_Decode_paramsKey]*MoqWordDecoder_starGenType_Decode_results
}

// MoqWordDecoder_starGenType_Decode_doFn defines the type of function needed
// when calling AndDo for the WordDecoder_starGenType type
type MoqWordDecoder_starGenType_Decode_doFn func(word string)

// MoqWordDecoder_starGenType_Decode_doReturnFn defines the type of function
// needed when calling DoReturnResults for the WordDecoder_starGenType type
type MoqWordDecoder_starGenType_Decode_doReturnFn func(word string) (string, error)

// MoqWordDecoder_starGenType_Decode_results holds the results of the
// WordDecoder_starGenType type
type MoqWordDecoder_starGenType_Decode_results struct {
	Params  MoqWordDecoder_starGenType_Decode_params
	Results []struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWordDecoder_starGenType_Decode_doFn
		DoReturnFn MoqWordDecoder_starGenType_Decode_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWordDecoder_starGenType_Decode_fnRecorder routes recorded function calls
// to the MoqWordDecoder_starGenType moq
type MoqWordDecoder_starGenType_Decode_fnRecorder struct {
	Params    MoqWordDecoder_starGenType_Decode_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWordDecoder_starGenType_Decode_results
	Moq       *MoqWordDecoder_starGenType
}

// MoqWordDecoder_starGenType_Decode_anyParams isolates the any params
// functions of the WordDecoder_starGenType type
type MoqWordDecoder_starGenType_Decode_anyParams struct {
	Recorder *MoqWordDecoder_starGenType_Decode_fnRecorder
}

// MoqWordDecoder_starGenType_DecodeHeader_params holds the params of the
// WordDecoder_starGenType type
type MoqWordDecoder_starGenType_DecodeHeader_params struct{ Header string }

// MoqWordDecoder_starGenType_DecodeHeader_paramsKey holds the map key params
// of the WordDecoder_starGenType type
type MoqWordDecoder_starGenType_DecodeHeader_paramsKey struct {
	Params struct{ Header string }
	Hashes struct{ Header hash.Hash }
}

// MoqWordDecoder_starGenType_DecodeHeader_resultsByParams contains the results
// for a given set of parameters for the WordDecoder_starGenType type
type MoqWordDecoder_starGenType_DecodeHeader_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWordDecoder_starGenType_DecodeHeader_paramsKey]*MoqWordDecoder_starGenType_DecodeHeader_results
}

// MoqWordDecoder_starGenType_DecodeHeader_doFn defines the type of function
// needed when calling AndDo for the WordDecoder_starGenType type
type MoqWordDecoder_starGenType_DecodeHeader_doFn func(header string)

// MoqWordDecoder_starGenType_DecodeHeader_doReturnFn defines the type of
// function needed when calling DoReturnResults for the WordDecoder_starGenType
// type
type MoqWordDecoder_starGenType_DecodeHeader_doReturnFn func(header string) (string, error)

// MoqWordDecoder_starGenType_DecodeHeader_results holds the results of the
// WordDecoder_starGenType type
type MoqWordDecoder_starGenType_DecodeHeader_results struct {
	Params  MoqWordDecoder_starGenType_DecodeHeader_params
	Results []struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWordDecoder_starGenType_DecodeHeader_doFn
		DoReturnFn MoqWordDecoder_starGenType_DecodeHeader_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWordDecoder_starGenType_DecodeHeader_fnRecorder routes recorded function
// calls to the MoqWordDecoder_starGenType moq
type MoqWordDecoder_starGenType_DecodeHeader_fnRecorder struct {
	Params    MoqWordDecoder_starGenType_DecodeHeader_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWordDecoder_starGenType_DecodeHeader_results
	Moq       *MoqWordDecoder_starGenType
}

// MoqWordDecoder_starGenType_DecodeHeader_anyParams isolates the any params
// functions of the WordDecoder_starGenType type
type MoqWordDecoder_starGenType_DecodeHeader_anyParams struct {
	Recorder *MoqWordDecoder_starGenType_DecodeHeader_fnRecorder
}

// NewMoqWordDecoder_starGenType creates a new moq of the
// WordDecoder_starGenType type
func NewMoqWordDecoder_starGenType(scene *moq.Scene, config *moq.Config) *MoqWordDecoder_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqWordDecoder_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqWordDecoder_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Decode struct {
					Word moq.ParamIndexing
				}
				DecodeHeader struct {
					Header moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Decode struct {
				Word moq.ParamIndexing
			}
			DecodeHeader struct {
				Header moq.ParamIndexing
			}
		}{
			Decode: struct {
				Word moq.ParamIndexing
			}{
				Word: moq.ParamIndexByValue,
			},
			DecodeHeader: struct {
				Header moq.ParamIndexing
			}{
				Header: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the WordDecoder_starGenType type
func (m *MoqWordDecoder_starGenType) Mock() *MoqWordDecoder_starGenType_mock { return m.Moq }

func (m *MoqWordDecoder_starGenType_mock) Decode(word string) (result1 string, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWordDecoder_starGenType_Decode_params{
		Word: word,
	}
	var results *MoqWordDecoder_starGenType_Decode_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Decode {
		paramsKey := m.Moq.ParamsKey_Decode(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Decode(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Decode(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Decode(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(word)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(word)
	}
	return
}

func (m *MoqWordDecoder_starGenType_mock) DecodeHeader(header string) (result1 string, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWordDecoder_starGenType_DecodeHeader_params{
		Header: header,
	}
	var results *MoqWordDecoder_starGenType_DecodeHeader_results
	for _, resultsByParams := range m.Moq.ResultsByParams_DecodeHeader {
		paramsKey := m.Moq.ParamsKey_DecodeHeader(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_DecodeHeader(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_DecodeHeader(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_DecodeHeader(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(header)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(header)
	}
	return
}

// OnCall returns the recorder implementation of the WordDecoder_starGenType
// type
func (m *MoqWordDecoder_starGenType) OnCall() *MoqWordDecoder_starGenType_recorder {
	return &MoqWordDecoder_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqWordDecoder_starGenType_recorder) Decode(word string) *MoqWordDecoder_starGenType_Decode_fnRecorder {
	return &MoqWordDecoder_starGenType_Decode_fnRecorder{
		Params: MoqWordDecoder_starGenType_Decode_params{
			Word: word,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWordDecoder_starGenType_Decode_fnRecorder) Any() *MoqWordDecoder_starGenType_Decode_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Decode(r.Params))
		return nil
	}
	return &MoqWordDecoder_starGenType_Decode_anyParams{Recorder: r}
}

func (a *MoqWordDecoder_starGenType_Decode_anyParams) Word() *MoqWordDecoder_starGenType_Decode_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWordDecoder_starGenType_Decode_fnRecorder) Seq() *MoqWordDecoder_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Decode(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWordDecoder_starGenType_Decode_fnRecorder) NoSeq() *MoqWordDecoder_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Decode(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWordDecoder_starGenType_Decode_fnRecorder) ReturnResults(result1 string, result2 error) *MoqWordDecoder_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWordDecoder_starGenType_Decode_doFn
		DoReturnFn MoqWordDecoder_starGenType_Decode_doReturnFn
	}{
		Values: &struct {
			Result1 string
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWordDecoder_starGenType_Decode_fnRecorder) AndDo(fn MoqWordDecoder_starGenType_Decode_doFn) *MoqWordDecoder_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWordDecoder_starGenType_Decode_fnRecorder) DoReturnResults(fn MoqWordDecoder_starGenType_Decode_doReturnFn) *MoqWordDecoder_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWordDecoder_starGenType_Decode_doFn
		DoReturnFn MoqWordDecoder_starGenType_Decode_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWordDecoder_starGenType_Decode_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWordDecoder_starGenType_Decode_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Decode {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWordDecoder_starGenType_Decode_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWordDecoder_starGenType_Decode_paramsKey]*MoqWordDecoder_starGenType_Decode_results{},
		}
		r.Moq.ResultsByParams_Decode = append(r.Moq.ResultsByParams_Decode, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Decode) {
			copy(r.Moq.ResultsByParams_Decode[insertAt+1:], r.Moq.ResultsByParams_Decode[insertAt:0])
			r.Moq.ResultsByParams_Decode[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Decode(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWordDecoder_starGenType_Decode_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWordDecoder_starGenType_Decode_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWordDecoder_starGenType_Decode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqWordDecoder_starGenType_Decode_doFn
				DoReturnFn MoqWordDecoder_starGenType_Decode_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWordDecoder_starGenType) PrettyParams_Decode(params MoqWordDecoder_starGenType_Decode_params) string {
	return fmt.Sprintf("Decode(%#v)", params.Word)
}

func (m *MoqWordDecoder_starGenType) ParamsKey_Decode(params MoqWordDecoder_starGenType_Decode_params, anyParams uint64) MoqWordDecoder_starGenType_Decode_paramsKey {
	m.Scene.T.Helper()
	var wordUsed string
	var wordUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Decode.Word == moq.ParamIndexByValue {
			wordUsed = params.Word
		} else {
			wordUsedHash = hash.DeepHash(params.Word)
		}
	}
	return MoqWordDecoder_starGenType_Decode_paramsKey{
		Params: struct{ Word string }{
			Word: wordUsed,
		},
		Hashes: struct{ Word hash.Hash }{
			Word: wordUsedHash,
		},
	}
}

func (m *MoqWordDecoder_starGenType_recorder) DecodeHeader(header string) *MoqWordDecoder_starGenType_DecodeHeader_fnRecorder {
	return &MoqWordDecoder_starGenType_DecodeHeader_fnRecorder{
		Params: MoqWordDecoder_starGenType_DecodeHeader_params{
			Header: header,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWordDecoder_starGenType_DecodeHeader_fnRecorder) Any() *MoqWordDecoder_starGenType_DecodeHeader_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DecodeHeader(r.Params))
		return nil
	}
	return &MoqWordDecoder_starGenType_DecodeHeader_anyParams{Recorder: r}
}

func (a *MoqWordDecoder_starGenType_DecodeHeader_anyParams) Header() *MoqWordDecoder_starGenType_DecodeHeader_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWordDecoder_starGenType_DecodeHeader_fnRecorder) Seq() *MoqWordDecoder_starGenType_DecodeHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DecodeHeader(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWordDecoder_starGenType_DecodeHeader_fnRecorder) NoSeq() *MoqWordDecoder_starGenType_DecodeHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DecodeHeader(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWordDecoder_starGenType_DecodeHeader_fnRecorder) ReturnResults(result1 string, result2 error) *MoqWordDecoder_starGenType_DecodeHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWordDecoder_starGenType_DecodeHeader_doFn
		DoReturnFn MoqWordDecoder_starGenType_DecodeHeader_doReturnFn
	}{
		Values: &struct {
			Result1 string
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWordDecoder_starGenType_DecodeHeader_fnRecorder) AndDo(fn MoqWordDecoder_starGenType_DecodeHeader_doFn) *MoqWordDecoder_starGenType_DecodeHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWordDecoder_starGenType_DecodeHeader_fnRecorder) DoReturnResults(fn MoqWordDecoder_starGenType_DecodeHeader_doReturnFn) *MoqWordDecoder_starGenType_DecodeHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWordDecoder_starGenType_DecodeHeader_doFn
		DoReturnFn MoqWordDecoder_starGenType_DecodeHeader_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWordDecoder_starGenType_DecodeHeader_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWordDecoder_starGenType_DecodeHeader_resultsByParams
	for n, res := range r.Moq.ResultsByParams_DecodeHeader {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWordDecoder_starGenType_DecodeHeader_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWordDecoder_starGenType_DecodeHeader_paramsKey]*MoqWordDecoder_starGenType_DecodeHeader_results{},
		}
		r.Moq.ResultsByParams_DecodeHeader = append(r.Moq.ResultsByParams_DecodeHeader, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_DecodeHeader) {
			copy(r.Moq.ResultsByParams_DecodeHeader[insertAt+1:], r.Moq.ResultsByParams_DecodeHeader[insertAt:0])
			r.Moq.ResultsByParams_DecodeHeader[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_DecodeHeader(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWordDecoder_starGenType_DecodeHeader_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWordDecoder_starGenType_DecodeHeader_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWordDecoder_starGenType_DecodeHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqWordDecoder_starGenType_DecodeHeader_doFn
				DoReturnFn MoqWordDecoder_starGenType_DecodeHeader_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWordDecoder_starGenType) PrettyParams_DecodeHeader(params MoqWordDecoder_starGenType_DecodeHeader_params) string {
	return fmt.Sprintf("DecodeHeader(%#v)", params.Header)
}

func (m *MoqWordDecoder_starGenType) ParamsKey_DecodeHeader(params MoqWordDecoder_starGenType_DecodeHeader_params, anyParams uint64) MoqWordDecoder_starGenType_DecodeHeader_paramsKey {
	m.Scene.T.Helper()
	var headerUsed string
	var headerUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.DecodeHeader.Header == moq.ParamIndexByValue {
			headerUsed = params.Header
		} else {
			headerUsedHash = hash.DeepHash(params.Header)
		}
	}
	return MoqWordDecoder_starGenType_DecodeHeader_paramsKey{
		Params: struct{ Header string }{
			Header: headerUsed,
		},
		Hashes: struct{ Header hash.Hash }{
			Header: headerUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqWordDecoder_starGenType) Reset() {
	m.ResultsByParams_Decode = nil
	m.ResultsByParams_DecodeHeader = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqWordDecoder_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Decode {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Decode(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_DecodeHeader {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_DecodeHeader(results.Params))
			}
		}
	}
}
