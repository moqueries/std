// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package multipart

import (
	"fmt"
	"io"
	"math/bits"
	"net/textproto"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that multipart.Writer_starGenType is
// mocked completely
var _ Writer_starGenType = (*MoqWriter_starGenType_mock)(nil)

// Writer_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Writer_starGenType interface {
	Boundary() string
	SetBoundary(boundary string) error
	FormDataContentType() string
	CreatePart(header textproto.MIMEHeader) (io.Writer, error)
	CreateFormFile(fieldname, filename string) (io.Writer, error)
	CreateFormField(fieldname string) (io.Writer, error)
	WriteField(fieldname, value string) error
	Close() error
}

// MoqWriter_starGenType holds the state of a moq of the Writer_starGenType
// type
type MoqWriter_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqWriter_starGenType_mock

	ResultsByParams_Boundary            []MoqWriter_starGenType_Boundary_resultsByParams
	ResultsByParams_SetBoundary         []MoqWriter_starGenType_SetBoundary_resultsByParams
	ResultsByParams_FormDataContentType []MoqWriter_starGenType_FormDataContentType_resultsByParams
	ResultsByParams_CreatePart          []MoqWriter_starGenType_CreatePart_resultsByParams
	ResultsByParams_CreateFormFile      []MoqWriter_starGenType_CreateFormFile_resultsByParams
	ResultsByParams_CreateFormField     []MoqWriter_starGenType_CreateFormField_resultsByParams
	ResultsByParams_WriteField          []MoqWriter_starGenType_WriteField_resultsByParams
	ResultsByParams_Close               []MoqWriter_starGenType_Close_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Boundary    struct{}
			SetBoundary struct {
				Boundary moq.ParamIndexing
			}
			FormDataContentType struct{}
			CreatePart          struct {
				Header moq.ParamIndexing
			}
			CreateFormFile struct {
				Fieldname moq.ParamIndexing
				Filename  moq.ParamIndexing
			}
			CreateFormField struct {
				Fieldname moq.ParamIndexing
			}
			WriteField struct {
				Fieldname moq.ParamIndexing
				Value     moq.ParamIndexing
			}
			Close struct{}
		}
	}
}

// MoqWriter_starGenType_mock isolates the mock interface of the
// Writer_starGenType type
type MoqWriter_starGenType_mock struct {
	Moq *MoqWriter_starGenType
}

// MoqWriter_starGenType_recorder isolates the recorder interface of the
// Writer_starGenType type
type MoqWriter_starGenType_recorder struct {
	Moq *MoqWriter_starGenType
}

// MoqWriter_starGenType_Boundary_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Boundary_params struct{}

// MoqWriter_starGenType_Boundary_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Boundary_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWriter_starGenType_Boundary_resultsByParams contains the results for a
// given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Boundary_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Boundary_paramsKey]*MoqWriter_starGenType_Boundary_results
}

// MoqWriter_starGenType_Boundary_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Boundary_doFn func()

// MoqWriter_starGenType_Boundary_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Boundary_doReturnFn func() string

// MoqWriter_starGenType_Boundary_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Boundary_results struct {
	Params  MoqWriter_starGenType_Boundary_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Boundary_doFn
		DoReturnFn MoqWriter_starGenType_Boundary_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Boundary_fnRecorder routes recorded function calls to
// the MoqWriter_starGenType moq
type MoqWriter_starGenType_Boundary_fnRecorder struct {
	Params    MoqWriter_starGenType_Boundary_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Boundary_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Boundary_anyParams isolates the any params functions
// of the Writer_starGenType type
type MoqWriter_starGenType_Boundary_anyParams struct {
	Recorder *MoqWriter_starGenType_Boundary_fnRecorder
}

// MoqWriter_starGenType_SetBoundary_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_SetBoundary_params struct{ Boundary string }

// MoqWriter_starGenType_SetBoundary_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_SetBoundary_paramsKey struct {
	Params struct{ Boundary string }
	Hashes struct{ Boundary hash.Hash }
}

// MoqWriter_starGenType_SetBoundary_resultsByParams contains the results for a
// given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_SetBoundary_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_SetBoundary_paramsKey]*MoqWriter_starGenType_SetBoundary_results
}

// MoqWriter_starGenType_SetBoundary_doFn defines the type of function needed
// when calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_SetBoundary_doFn func(boundary string)

// MoqWriter_starGenType_SetBoundary_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_SetBoundary_doReturnFn func(boundary string) error

// MoqWriter_starGenType_SetBoundary_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_SetBoundary_results struct {
	Params  MoqWriter_starGenType_SetBoundary_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_SetBoundary_doFn
		DoReturnFn MoqWriter_starGenType_SetBoundary_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_SetBoundary_fnRecorder routes recorded function calls
// to the MoqWriter_starGenType moq
type MoqWriter_starGenType_SetBoundary_fnRecorder struct {
	Params    MoqWriter_starGenType_SetBoundary_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_SetBoundary_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_SetBoundary_anyParams isolates the any params
// functions of the Writer_starGenType type
type MoqWriter_starGenType_SetBoundary_anyParams struct {
	Recorder *MoqWriter_starGenType_SetBoundary_fnRecorder
}

// MoqWriter_starGenType_FormDataContentType_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_FormDataContentType_params struct{}

// MoqWriter_starGenType_FormDataContentType_paramsKey holds the map key params
// of the Writer_starGenType type
type MoqWriter_starGenType_FormDataContentType_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWriter_starGenType_FormDataContentType_resultsByParams contains the
// results for a given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_FormDataContentType_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_FormDataContentType_paramsKey]*MoqWriter_starGenType_FormDataContentType_results
}

// MoqWriter_starGenType_FormDataContentType_doFn defines the type of function
// needed when calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_FormDataContentType_doFn func()

// MoqWriter_starGenType_FormDataContentType_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_FormDataContentType_doReturnFn func() string

// MoqWriter_starGenType_FormDataContentType_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_FormDataContentType_results struct {
	Params  MoqWriter_starGenType_FormDataContentType_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_FormDataContentType_doFn
		DoReturnFn MoqWriter_starGenType_FormDataContentType_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_FormDataContentType_fnRecorder routes recorded
// function calls to the MoqWriter_starGenType moq
type MoqWriter_starGenType_FormDataContentType_fnRecorder struct {
	Params    MoqWriter_starGenType_FormDataContentType_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_FormDataContentType_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_FormDataContentType_anyParams isolates the any params
// functions of the Writer_starGenType type
type MoqWriter_starGenType_FormDataContentType_anyParams struct {
	Recorder *MoqWriter_starGenType_FormDataContentType_fnRecorder
}

// MoqWriter_starGenType_CreatePart_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_CreatePart_params struct{ Header textproto.MIMEHeader }

// MoqWriter_starGenType_CreatePart_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_CreatePart_paramsKey struct {
	Params struct{}
	Hashes struct{ Header hash.Hash }
}

// MoqWriter_starGenType_CreatePart_resultsByParams contains the results for a
// given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_CreatePart_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_CreatePart_paramsKey]*MoqWriter_starGenType_CreatePart_results
}

// MoqWriter_starGenType_CreatePart_doFn defines the type of function needed
// when calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_CreatePart_doFn func(header textproto.MIMEHeader)

// MoqWriter_starGenType_CreatePart_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_CreatePart_doReturnFn func(header textproto.MIMEHeader) (io.Writer, error)

// MoqWriter_starGenType_CreatePart_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_CreatePart_results struct {
	Params  MoqWriter_starGenType_CreatePart_params
	Results []struct {
		Values *struct {
			Result1 io.Writer
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_CreatePart_doFn
		DoReturnFn MoqWriter_starGenType_CreatePart_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_CreatePart_fnRecorder routes recorded function calls
// to the MoqWriter_starGenType moq
type MoqWriter_starGenType_CreatePart_fnRecorder struct {
	Params    MoqWriter_starGenType_CreatePart_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_CreatePart_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_CreatePart_anyParams isolates the any params functions
// of the Writer_starGenType type
type MoqWriter_starGenType_CreatePart_anyParams struct {
	Recorder *MoqWriter_starGenType_CreatePart_fnRecorder
}

// MoqWriter_starGenType_CreateFormFile_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_CreateFormFile_params struct{ Fieldname, Filename string }

// MoqWriter_starGenType_CreateFormFile_paramsKey holds the map key params of
// the Writer_starGenType type
type MoqWriter_starGenType_CreateFormFile_paramsKey struct {
	Params struct{ Fieldname, Filename string }
	Hashes struct{ Fieldname, Filename hash.Hash }
}

// MoqWriter_starGenType_CreateFormFile_resultsByParams contains the results
// for a given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_CreateFormFile_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_CreateFormFile_paramsKey]*MoqWriter_starGenType_CreateFormFile_results
}

// MoqWriter_starGenType_CreateFormFile_doFn defines the type of function
// needed when calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_CreateFormFile_doFn func(fieldname, filename string)

// MoqWriter_starGenType_CreateFormFile_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_CreateFormFile_doReturnFn func(fieldname, filename string) (io.Writer, error)

// MoqWriter_starGenType_CreateFormFile_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_CreateFormFile_results struct {
	Params  MoqWriter_starGenType_CreateFormFile_params
	Results []struct {
		Values *struct {
			Result1 io.Writer
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_CreateFormFile_doFn
		DoReturnFn MoqWriter_starGenType_CreateFormFile_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_CreateFormFile_fnRecorder routes recorded function
// calls to the MoqWriter_starGenType moq
type MoqWriter_starGenType_CreateFormFile_fnRecorder struct {
	Params    MoqWriter_starGenType_CreateFormFile_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_CreateFormFile_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_CreateFormFile_anyParams isolates the any params
// functions of the Writer_starGenType type
type MoqWriter_starGenType_CreateFormFile_anyParams struct {
	Recorder *MoqWriter_starGenType_CreateFormFile_fnRecorder
}

// MoqWriter_starGenType_CreateFormField_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_CreateFormField_params struct{ Fieldname string }

// MoqWriter_starGenType_CreateFormField_paramsKey holds the map key params of
// the Writer_starGenType type
type MoqWriter_starGenType_CreateFormField_paramsKey struct {
	Params struct{ Fieldname string }
	Hashes struct{ Fieldname hash.Hash }
}

// MoqWriter_starGenType_CreateFormField_resultsByParams contains the results
// for a given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_CreateFormField_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_CreateFormField_paramsKey]*MoqWriter_starGenType_CreateFormField_results
}

// MoqWriter_starGenType_CreateFormField_doFn defines the type of function
// needed when calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_CreateFormField_doFn func(fieldname string)

// MoqWriter_starGenType_CreateFormField_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_CreateFormField_doReturnFn func(fieldname string) (io.Writer, error)

// MoqWriter_starGenType_CreateFormField_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_CreateFormField_results struct {
	Params  MoqWriter_starGenType_CreateFormField_params
	Results []struct {
		Values *struct {
			Result1 io.Writer
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_CreateFormField_doFn
		DoReturnFn MoqWriter_starGenType_CreateFormField_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_CreateFormField_fnRecorder routes recorded function
// calls to the MoqWriter_starGenType moq
type MoqWriter_starGenType_CreateFormField_fnRecorder struct {
	Params    MoqWriter_starGenType_CreateFormField_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_CreateFormField_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_CreateFormField_anyParams isolates the any params
// functions of the Writer_starGenType type
type MoqWriter_starGenType_CreateFormField_anyParams struct {
	Recorder *MoqWriter_starGenType_CreateFormField_fnRecorder
}

// MoqWriter_starGenType_WriteField_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_WriteField_params struct{ Fieldname, Value string }

// MoqWriter_starGenType_WriteField_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_WriteField_paramsKey struct {
	Params struct{ Fieldname, Value string }
	Hashes struct{ Fieldname, Value hash.Hash }
}

// MoqWriter_starGenType_WriteField_resultsByParams contains the results for a
// given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_WriteField_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_WriteField_paramsKey]*MoqWriter_starGenType_WriteField_results
}

// MoqWriter_starGenType_WriteField_doFn defines the type of function needed
// when calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_WriteField_doFn func(fieldname, value string)

// MoqWriter_starGenType_WriteField_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_WriteField_doReturnFn func(fieldname, value string) error

// MoqWriter_starGenType_WriteField_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_WriteField_results struct {
	Params  MoqWriter_starGenType_WriteField_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_WriteField_doFn
		DoReturnFn MoqWriter_starGenType_WriteField_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_WriteField_fnRecorder routes recorded function calls
// to the MoqWriter_starGenType moq
type MoqWriter_starGenType_WriteField_fnRecorder struct {
	Params    MoqWriter_starGenType_WriteField_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_WriteField_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_WriteField_anyParams isolates the any params functions
// of the Writer_starGenType type
type MoqWriter_starGenType_WriteField_anyParams struct {
	Recorder *MoqWriter_starGenType_WriteField_fnRecorder
}

// MoqWriter_starGenType_Close_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Close_params struct{}

// MoqWriter_starGenType_Close_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWriter_starGenType_Close_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Close_paramsKey]*MoqWriter_starGenType_Close_results
}

// MoqWriter_starGenType_Close_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Close_doFn func()

// MoqWriter_starGenType_Close_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Close_doReturnFn func() error

// MoqWriter_starGenType_Close_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Close_results struct {
	Params  MoqWriter_starGenType_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Close_doFn
		DoReturnFn MoqWriter_starGenType_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Close_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Close_fnRecorder struct {
	Params    MoqWriter_starGenType_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Close_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Close_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Close_anyParams struct {
	Recorder *MoqWriter_starGenType_Close_fnRecorder
}

// NewMoqWriter_starGenType creates a new moq of the Writer_starGenType type
func NewMoqWriter_starGenType(scene *moq.Scene, config *moq.Config) *MoqWriter_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqWriter_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqWriter_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Boundary    struct{}
				SetBoundary struct {
					Boundary moq.ParamIndexing
				}
				FormDataContentType struct{}
				CreatePart          struct {
					Header moq.ParamIndexing
				}
				CreateFormFile struct {
					Fieldname moq.ParamIndexing
					Filename  moq.ParamIndexing
				}
				CreateFormField struct {
					Fieldname moq.ParamIndexing
				}
				WriteField struct {
					Fieldname moq.ParamIndexing
					Value     moq.ParamIndexing
				}
				Close struct{}
			}
		}{ParameterIndexing: struct {
			Boundary    struct{}
			SetBoundary struct {
				Boundary moq.ParamIndexing
			}
			FormDataContentType struct{}
			CreatePart          struct {
				Header moq.ParamIndexing
			}
			CreateFormFile struct {
				Fieldname moq.ParamIndexing
				Filename  moq.ParamIndexing
			}
			CreateFormField struct {
				Fieldname moq.ParamIndexing
			}
			WriteField struct {
				Fieldname moq.ParamIndexing
				Value     moq.ParamIndexing
			}
			Close struct{}
		}{
			Boundary: struct{}{},
			SetBoundary: struct {
				Boundary moq.ParamIndexing
			}{
				Boundary: moq.ParamIndexByValue,
			},
			FormDataContentType: struct{}{},
			CreatePart: struct {
				Header moq.ParamIndexing
			}{
				Header: moq.ParamIndexByHash,
			},
			CreateFormFile: struct {
				Fieldname moq.ParamIndexing
				Filename  moq.ParamIndexing
			}{
				Fieldname: moq.ParamIndexByValue,
				Filename:  moq.ParamIndexByValue,
			},
			CreateFormField: struct {
				Fieldname moq.ParamIndexing
			}{
				Fieldname: moq.ParamIndexByValue,
			},
			WriteField: struct {
				Fieldname moq.ParamIndexing
				Value     moq.ParamIndexing
			}{
				Fieldname: moq.ParamIndexByValue,
				Value:     moq.ParamIndexByValue,
			},
			Close: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Writer_starGenType type
func (m *MoqWriter_starGenType) Mock() *MoqWriter_starGenType_mock { return m.Moq }

func (m *MoqWriter_starGenType_mock) Boundary() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Boundary_params{}
	var results *MoqWriter_starGenType_Boundary_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Boundary {
		paramsKey := m.Moq.ParamsKey_Boundary(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Boundary(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Boundary(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Boundary(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWriter_starGenType_mock) SetBoundary(boundary string) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_SetBoundary_params{
		Boundary: boundary,
	}
	var results *MoqWriter_starGenType_SetBoundary_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetBoundary {
		paramsKey := m.Moq.ParamsKey_SetBoundary(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetBoundary(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetBoundary(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetBoundary(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(boundary)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(boundary)
	}
	return
}

func (m *MoqWriter_starGenType_mock) FormDataContentType() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_FormDataContentType_params{}
	var results *MoqWriter_starGenType_FormDataContentType_results
	for _, resultsByParams := range m.Moq.ResultsByParams_FormDataContentType {
		paramsKey := m.Moq.ParamsKey_FormDataContentType(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_FormDataContentType(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_FormDataContentType(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_FormDataContentType(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWriter_starGenType_mock) CreatePart(header textproto.MIMEHeader) (result1 io.Writer, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_CreatePart_params{
		Header: header,
	}
	var results *MoqWriter_starGenType_CreatePart_results
	for _, resultsByParams := range m.Moq.ResultsByParams_CreatePart {
		paramsKey := m.Moq.ParamsKey_CreatePart(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_CreatePart(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_CreatePart(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_CreatePart(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(header)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(header)
	}
	return
}

func (m *MoqWriter_starGenType_mock) CreateFormFile(fieldname, filename string) (result1 io.Writer, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_CreateFormFile_params{
		Fieldname: fieldname,
		Filename:  filename,
	}
	var results *MoqWriter_starGenType_CreateFormFile_results
	for _, resultsByParams := range m.Moq.ResultsByParams_CreateFormFile {
		paramsKey := m.Moq.ParamsKey_CreateFormFile(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_CreateFormFile(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_CreateFormFile(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_CreateFormFile(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(fieldname, filename)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(fieldname, filename)
	}
	return
}

func (m *MoqWriter_starGenType_mock) CreateFormField(fieldname string) (result1 io.Writer, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_CreateFormField_params{
		Fieldname: fieldname,
	}
	var results *MoqWriter_starGenType_CreateFormField_results
	for _, resultsByParams := range m.Moq.ResultsByParams_CreateFormField {
		paramsKey := m.Moq.ParamsKey_CreateFormField(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_CreateFormField(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_CreateFormField(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_CreateFormField(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(fieldname)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(fieldname)
	}
	return
}

func (m *MoqWriter_starGenType_mock) WriteField(fieldname, value string) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_WriteField_params{
		Fieldname: fieldname,
		Value:     value,
	}
	var results *MoqWriter_starGenType_WriteField_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteField {
		paramsKey := m.Moq.ParamsKey_WriteField(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteField(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteField(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteField(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(fieldname, value)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(fieldname, value)
	}
	return
}

func (m *MoqWriter_starGenType_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Close_params{}
	var results *MoqWriter_starGenType_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Writer_starGenType type
func (m *MoqWriter_starGenType) OnCall() *MoqWriter_starGenType_recorder {
	return &MoqWriter_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqWriter_starGenType_recorder) Boundary() *MoqWriter_starGenType_Boundary_fnRecorder {
	return &MoqWriter_starGenType_Boundary_fnRecorder{
		Params:   MoqWriter_starGenType_Boundary_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Boundary_fnRecorder) Any() *MoqWriter_starGenType_Boundary_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Boundary(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Boundary_anyParams{Recorder: r}
}

func (r *MoqWriter_starGenType_Boundary_fnRecorder) Seq() *MoqWriter_starGenType_Boundary_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Boundary(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Boundary_fnRecorder) NoSeq() *MoqWriter_starGenType_Boundary_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Boundary(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Boundary_fnRecorder) ReturnResults(result1 string) *MoqWriter_starGenType_Boundary_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Boundary_doFn
		DoReturnFn MoqWriter_starGenType_Boundary_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Boundary_fnRecorder) AndDo(fn MoqWriter_starGenType_Boundary_doFn) *MoqWriter_starGenType_Boundary_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Boundary_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Boundary_doReturnFn) *MoqWriter_starGenType_Boundary_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Boundary_doFn
		DoReturnFn MoqWriter_starGenType_Boundary_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Boundary_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Boundary_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Boundary {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Boundary_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Boundary_paramsKey]*MoqWriter_starGenType_Boundary_results{},
		}
		r.Moq.ResultsByParams_Boundary = append(r.Moq.ResultsByParams_Boundary, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Boundary) {
			copy(r.Moq.ResultsByParams_Boundary[insertAt+1:], r.Moq.ResultsByParams_Boundary[insertAt:0])
			r.Moq.ResultsByParams_Boundary[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Boundary(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Boundary_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Boundary_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Boundary_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Boundary_doFn
				DoReturnFn MoqWriter_starGenType_Boundary_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Boundary(params MoqWriter_starGenType_Boundary_params) string {
	return fmt.Sprintf("Boundary()")
}

func (m *MoqWriter_starGenType) ParamsKey_Boundary(params MoqWriter_starGenType_Boundary_params, anyParams uint64) MoqWriter_starGenType_Boundary_paramsKey {
	m.Scene.T.Helper()
	return MoqWriter_starGenType_Boundary_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWriter_starGenType_recorder) SetBoundary(boundary string) *MoqWriter_starGenType_SetBoundary_fnRecorder {
	return &MoqWriter_starGenType_SetBoundary_fnRecorder{
		Params: MoqWriter_starGenType_SetBoundary_params{
			Boundary: boundary,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_SetBoundary_fnRecorder) Any() *MoqWriter_starGenType_SetBoundary_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetBoundary(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_SetBoundary_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_SetBoundary_anyParams) Boundary() *MoqWriter_starGenType_SetBoundary_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_SetBoundary_fnRecorder) Seq() *MoqWriter_starGenType_SetBoundary_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetBoundary(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_SetBoundary_fnRecorder) NoSeq() *MoqWriter_starGenType_SetBoundary_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetBoundary(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_SetBoundary_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_SetBoundary_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_SetBoundary_doFn
		DoReturnFn MoqWriter_starGenType_SetBoundary_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_SetBoundary_fnRecorder) AndDo(fn MoqWriter_starGenType_SetBoundary_doFn) *MoqWriter_starGenType_SetBoundary_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_SetBoundary_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_SetBoundary_doReturnFn) *MoqWriter_starGenType_SetBoundary_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_SetBoundary_doFn
		DoReturnFn MoqWriter_starGenType_SetBoundary_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_SetBoundary_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_SetBoundary_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetBoundary {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_SetBoundary_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_SetBoundary_paramsKey]*MoqWriter_starGenType_SetBoundary_results{},
		}
		r.Moq.ResultsByParams_SetBoundary = append(r.Moq.ResultsByParams_SetBoundary, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetBoundary) {
			copy(r.Moq.ResultsByParams_SetBoundary[insertAt+1:], r.Moq.ResultsByParams_SetBoundary[insertAt:0])
			r.Moq.ResultsByParams_SetBoundary[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetBoundary(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_SetBoundary_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_SetBoundary_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_SetBoundary_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_SetBoundary_doFn
				DoReturnFn MoqWriter_starGenType_SetBoundary_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_SetBoundary(params MoqWriter_starGenType_SetBoundary_params) string {
	return fmt.Sprintf("SetBoundary(%#v)", params.Boundary)
}

func (m *MoqWriter_starGenType) ParamsKey_SetBoundary(params MoqWriter_starGenType_SetBoundary_params, anyParams uint64) MoqWriter_starGenType_SetBoundary_paramsKey {
	m.Scene.T.Helper()
	var boundaryUsed string
	var boundaryUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetBoundary.Boundary == moq.ParamIndexByValue {
			boundaryUsed = params.Boundary
		} else {
			boundaryUsedHash = hash.DeepHash(params.Boundary)
		}
	}
	return MoqWriter_starGenType_SetBoundary_paramsKey{
		Params: struct{ Boundary string }{
			Boundary: boundaryUsed,
		},
		Hashes: struct{ Boundary hash.Hash }{
			Boundary: boundaryUsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) FormDataContentType() *MoqWriter_starGenType_FormDataContentType_fnRecorder {
	return &MoqWriter_starGenType_FormDataContentType_fnRecorder{
		Params:   MoqWriter_starGenType_FormDataContentType_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_FormDataContentType_fnRecorder) Any() *MoqWriter_starGenType_FormDataContentType_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FormDataContentType(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_FormDataContentType_anyParams{Recorder: r}
}

func (r *MoqWriter_starGenType_FormDataContentType_fnRecorder) Seq() *MoqWriter_starGenType_FormDataContentType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FormDataContentType(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_FormDataContentType_fnRecorder) NoSeq() *MoqWriter_starGenType_FormDataContentType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FormDataContentType(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_FormDataContentType_fnRecorder) ReturnResults(result1 string) *MoqWriter_starGenType_FormDataContentType_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_FormDataContentType_doFn
		DoReturnFn MoqWriter_starGenType_FormDataContentType_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_FormDataContentType_fnRecorder) AndDo(fn MoqWriter_starGenType_FormDataContentType_doFn) *MoqWriter_starGenType_FormDataContentType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_FormDataContentType_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_FormDataContentType_doReturnFn) *MoqWriter_starGenType_FormDataContentType_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_FormDataContentType_doFn
		DoReturnFn MoqWriter_starGenType_FormDataContentType_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_FormDataContentType_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_FormDataContentType_resultsByParams
	for n, res := range r.Moq.ResultsByParams_FormDataContentType {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_FormDataContentType_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_FormDataContentType_paramsKey]*MoqWriter_starGenType_FormDataContentType_results{},
		}
		r.Moq.ResultsByParams_FormDataContentType = append(r.Moq.ResultsByParams_FormDataContentType, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_FormDataContentType) {
			copy(r.Moq.ResultsByParams_FormDataContentType[insertAt+1:], r.Moq.ResultsByParams_FormDataContentType[insertAt:0])
			r.Moq.ResultsByParams_FormDataContentType[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_FormDataContentType(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_FormDataContentType_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_FormDataContentType_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_FormDataContentType_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_FormDataContentType_doFn
				DoReturnFn MoqWriter_starGenType_FormDataContentType_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_FormDataContentType(params MoqWriter_starGenType_FormDataContentType_params) string {
	return fmt.Sprintf("FormDataContentType()")
}

func (m *MoqWriter_starGenType) ParamsKey_FormDataContentType(params MoqWriter_starGenType_FormDataContentType_params, anyParams uint64) MoqWriter_starGenType_FormDataContentType_paramsKey {
	m.Scene.T.Helper()
	return MoqWriter_starGenType_FormDataContentType_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWriter_starGenType_recorder) CreatePart(header textproto.MIMEHeader) *MoqWriter_starGenType_CreatePart_fnRecorder {
	return &MoqWriter_starGenType_CreatePart_fnRecorder{
		Params: MoqWriter_starGenType_CreatePart_params{
			Header: header,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_CreatePart_fnRecorder) Any() *MoqWriter_starGenType_CreatePart_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CreatePart(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_CreatePart_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_CreatePart_anyParams) Header() *MoqWriter_starGenType_CreatePart_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_CreatePart_fnRecorder) Seq() *MoqWriter_starGenType_CreatePart_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CreatePart(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_CreatePart_fnRecorder) NoSeq() *MoqWriter_starGenType_CreatePart_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CreatePart(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_CreatePart_fnRecorder) ReturnResults(result1 io.Writer, result2 error) *MoqWriter_starGenType_CreatePart_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.Writer
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_CreatePart_doFn
		DoReturnFn MoqWriter_starGenType_CreatePart_doReturnFn
	}{
		Values: &struct {
			Result1 io.Writer
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_CreatePart_fnRecorder) AndDo(fn MoqWriter_starGenType_CreatePart_doFn) *MoqWriter_starGenType_CreatePart_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_CreatePart_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_CreatePart_doReturnFn) *MoqWriter_starGenType_CreatePart_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.Writer
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_CreatePart_doFn
		DoReturnFn MoqWriter_starGenType_CreatePart_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_CreatePart_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_CreatePart_resultsByParams
	for n, res := range r.Moq.ResultsByParams_CreatePart {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_CreatePart_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_CreatePart_paramsKey]*MoqWriter_starGenType_CreatePart_results{},
		}
		r.Moq.ResultsByParams_CreatePart = append(r.Moq.ResultsByParams_CreatePart, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_CreatePart) {
			copy(r.Moq.ResultsByParams_CreatePart[insertAt+1:], r.Moq.ResultsByParams_CreatePart[insertAt:0])
			r.Moq.ResultsByParams_CreatePart[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_CreatePart(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_CreatePart_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_CreatePart_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_CreatePart_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 io.Writer
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_CreatePart_doFn
				DoReturnFn MoqWriter_starGenType_CreatePart_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_CreatePart(params MoqWriter_starGenType_CreatePart_params) string {
	return fmt.Sprintf("CreatePart(%#v)", params.Header)
}

func (m *MoqWriter_starGenType) ParamsKey_CreatePart(params MoqWriter_starGenType_CreatePart_params, anyParams uint64) MoqWriter_starGenType_CreatePart_paramsKey {
	m.Scene.T.Helper()
	var headerUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.CreatePart.Header == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The header parameter of the CreatePart function can't be indexed by value")
		}
		headerUsedHash = hash.DeepHash(params.Header)
	}
	return MoqWriter_starGenType_CreatePart_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Header hash.Hash }{
			Header: headerUsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) CreateFormFile(fieldname, filename string) *MoqWriter_starGenType_CreateFormFile_fnRecorder {
	return &MoqWriter_starGenType_CreateFormFile_fnRecorder{
		Params: MoqWriter_starGenType_CreateFormFile_params{
			Fieldname: fieldname,
			Filename:  filename,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_CreateFormFile_fnRecorder) Any() *MoqWriter_starGenType_CreateFormFile_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CreateFormFile(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_CreateFormFile_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_CreateFormFile_anyParams) Fieldname() *MoqWriter_starGenType_CreateFormFile_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqWriter_starGenType_CreateFormFile_anyParams) Filename() *MoqWriter_starGenType_CreateFormFile_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqWriter_starGenType_CreateFormFile_fnRecorder) Seq() *MoqWriter_starGenType_CreateFormFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CreateFormFile(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_CreateFormFile_fnRecorder) NoSeq() *MoqWriter_starGenType_CreateFormFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CreateFormFile(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_CreateFormFile_fnRecorder) ReturnResults(result1 io.Writer, result2 error) *MoqWriter_starGenType_CreateFormFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.Writer
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_CreateFormFile_doFn
		DoReturnFn MoqWriter_starGenType_CreateFormFile_doReturnFn
	}{
		Values: &struct {
			Result1 io.Writer
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_CreateFormFile_fnRecorder) AndDo(fn MoqWriter_starGenType_CreateFormFile_doFn) *MoqWriter_starGenType_CreateFormFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_CreateFormFile_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_CreateFormFile_doReturnFn) *MoqWriter_starGenType_CreateFormFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.Writer
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_CreateFormFile_doFn
		DoReturnFn MoqWriter_starGenType_CreateFormFile_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_CreateFormFile_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_CreateFormFile_resultsByParams
	for n, res := range r.Moq.ResultsByParams_CreateFormFile {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_CreateFormFile_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_CreateFormFile_paramsKey]*MoqWriter_starGenType_CreateFormFile_results{},
		}
		r.Moq.ResultsByParams_CreateFormFile = append(r.Moq.ResultsByParams_CreateFormFile, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_CreateFormFile) {
			copy(r.Moq.ResultsByParams_CreateFormFile[insertAt+1:], r.Moq.ResultsByParams_CreateFormFile[insertAt:0])
			r.Moq.ResultsByParams_CreateFormFile[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_CreateFormFile(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_CreateFormFile_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_CreateFormFile_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_CreateFormFile_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 io.Writer
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_CreateFormFile_doFn
				DoReturnFn MoqWriter_starGenType_CreateFormFile_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_CreateFormFile(params MoqWriter_starGenType_CreateFormFile_params) string {
	return fmt.Sprintf("CreateFormFile(%#v, %#v)", params.Fieldname, params.Filename)
}

func (m *MoqWriter_starGenType) ParamsKey_CreateFormFile(params MoqWriter_starGenType_CreateFormFile_params, anyParams uint64) MoqWriter_starGenType_CreateFormFile_paramsKey {
	m.Scene.T.Helper()
	var fieldnameUsed string
	var fieldnameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.CreateFormFile.Fieldname == moq.ParamIndexByValue {
			fieldnameUsed = params.Fieldname
		} else {
			fieldnameUsedHash = hash.DeepHash(params.Fieldname)
		}
	}
	var filenameUsed string
	var filenameUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.CreateFormFile.Filename == moq.ParamIndexByValue {
			filenameUsed = params.Filename
		} else {
			filenameUsedHash = hash.DeepHash(params.Filename)
		}
	}
	return MoqWriter_starGenType_CreateFormFile_paramsKey{
		Params: struct{ Fieldname, Filename string }{
			Fieldname: fieldnameUsed,
			Filename:  filenameUsed,
		},
		Hashes: struct{ Fieldname, Filename hash.Hash }{
			Fieldname: fieldnameUsedHash,
			Filename:  filenameUsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) CreateFormField(fieldname string) *MoqWriter_starGenType_CreateFormField_fnRecorder {
	return &MoqWriter_starGenType_CreateFormField_fnRecorder{
		Params: MoqWriter_starGenType_CreateFormField_params{
			Fieldname: fieldname,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_CreateFormField_fnRecorder) Any() *MoqWriter_starGenType_CreateFormField_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CreateFormField(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_CreateFormField_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_CreateFormField_anyParams) Fieldname() *MoqWriter_starGenType_CreateFormField_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_CreateFormField_fnRecorder) Seq() *MoqWriter_starGenType_CreateFormField_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CreateFormField(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_CreateFormField_fnRecorder) NoSeq() *MoqWriter_starGenType_CreateFormField_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CreateFormField(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_CreateFormField_fnRecorder) ReturnResults(result1 io.Writer, result2 error) *MoqWriter_starGenType_CreateFormField_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.Writer
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_CreateFormField_doFn
		DoReturnFn MoqWriter_starGenType_CreateFormField_doReturnFn
	}{
		Values: &struct {
			Result1 io.Writer
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_CreateFormField_fnRecorder) AndDo(fn MoqWriter_starGenType_CreateFormField_doFn) *MoqWriter_starGenType_CreateFormField_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_CreateFormField_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_CreateFormField_doReturnFn) *MoqWriter_starGenType_CreateFormField_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.Writer
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_CreateFormField_doFn
		DoReturnFn MoqWriter_starGenType_CreateFormField_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_CreateFormField_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_CreateFormField_resultsByParams
	for n, res := range r.Moq.ResultsByParams_CreateFormField {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_CreateFormField_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_CreateFormField_paramsKey]*MoqWriter_starGenType_CreateFormField_results{},
		}
		r.Moq.ResultsByParams_CreateFormField = append(r.Moq.ResultsByParams_CreateFormField, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_CreateFormField) {
			copy(r.Moq.ResultsByParams_CreateFormField[insertAt+1:], r.Moq.ResultsByParams_CreateFormField[insertAt:0])
			r.Moq.ResultsByParams_CreateFormField[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_CreateFormField(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_CreateFormField_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_CreateFormField_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_CreateFormField_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 io.Writer
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_CreateFormField_doFn
				DoReturnFn MoqWriter_starGenType_CreateFormField_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_CreateFormField(params MoqWriter_starGenType_CreateFormField_params) string {
	return fmt.Sprintf("CreateFormField(%#v)", params.Fieldname)
}

func (m *MoqWriter_starGenType) ParamsKey_CreateFormField(params MoqWriter_starGenType_CreateFormField_params, anyParams uint64) MoqWriter_starGenType_CreateFormField_paramsKey {
	m.Scene.T.Helper()
	var fieldnameUsed string
	var fieldnameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.CreateFormField.Fieldname == moq.ParamIndexByValue {
			fieldnameUsed = params.Fieldname
		} else {
			fieldnameUsedHash = hash.DeepHash(params.Fieldname)
		}
	}
	return MoqWriter_starGenType_CreateFormField_paramsKey{
		Params: struct{ Fieldname string }{
			Fieldname: fieldnameUsed,
		},
		Hashes: struct{ Fieldname hash.Hash }{
			Fieldname: fieldnameUsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) WriteField(fieldname, value string) *MoqWriter_starGenType_WriteField_fnRecorder {
	return &MoqWriter_starGenType_WriteField_fnRecorder{
		Params: MoqWriter_starGenType_WriteField_params{
			Fieldname: fieldname,
			Value:     value,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_WriteField_fnRecorder) Any() *MoqWriter_starGenType_WriteField_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteField(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_WriteField_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_WriteField_anyParams) Fieldname() *MoqWriter_starGenType_WriteField_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqWriter_starGenType_WriteField_anyParams) Value() *MoqWriter_starGenType_WriteField_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqWriter_starGenType_WriteField_fnRecorder) Seq() *MoqWriter_starGenType_WriteField_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteField(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_WriteField_fnRecorder) NoSeq() *MoqWriter_starGenType_WriteField_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteField(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_WriteField_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_WriteField_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_WriteField_doFn
		DoReturnFn MoqWriter_starGenType_WriteField_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_WriteField_fnRecorder) AndDo(fn MoqWriter_starGenType_WriteField_doFn) *MoqWriter_starGenType_WriteField_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_WriteField_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_WriteField_doReturnFn) *MoqWriter_starGenType_WriteField_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_WriteField_doFn
		DoReturnFn MoqWriter_starGenType_WriteField_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_WriteField_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_WriteField_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteField {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_WriteField_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_WriteField_paramsKey]*MoqWriter_starGenType_WriteField_results{},
		}
		r.Moq.ResultsByParams_WriteField = append(r.Moq.ResultsByParams_WriteField, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteField) {
			copy(r.Moq.ResultsByParams_WriteField[insertAt+1:], r.Moq.ResultsByParams_WriteField[insertAt:0])
			r.Moq.ResultsByParams_WriteField[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteField(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_WriteField_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_WriteField_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_WriteField_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_WriteField_doFn
				DoReturnFn MoqWriter_starGenType_WriteField_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_WriteField(params MoqWriter_starGenType_WriteField_params) string {
	return fmt.Sprintf("WriteField(%#v, %#v)", params.Fieldname, params.Value)
}

func (m *MoqWriter_starGenType) ParamsKey_WriteField(params MoqWriter_starGenType_WriteField_params, anyParams uint64) MoqWriter_starGenType_WriteField_paramsKey {
	m.Scene.T.Helper()
	var fieldnameUsed string
	var fieldnameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteField.Fieldname == moq.ParamIndexByValue {
			fieldnameUsed = params.Fieldname
		} else {
			fieldnameUsedHash = hash.DeepHash(params.Fieldname)
		}
	}
	var valueUsed string
	var valueUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.WriteField.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	return MoqWriter_starGenType_WriteField_paramsKey{
		Params: struct{ Fieldname, Value string }{
			Fieldname: fieldnameUsed,
			Value:     valueUsed,
		},
		Hashes: struct{ Fieldname, Value hash.Hash }{
			Fieldname: fieldnameUsedHash,
			Value:     valueUsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) Close() *MoqWriter_starGenType_Close_fnRecorder {
	return &MoqWriter_starGenType_Close_fnRecorder{
		Params:   MoqWriter_starGenType_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Close_fnRecorder) Any() *MoqWriter_starGenType_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Close_anyParams{Recorder: r}
}

func (r *MoqWriter_starGenType_Close_fnRecorder) Seq() *MoqWriter_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Close_fnRecorder) NoSeq() *MoqWriter_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Close_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Close_doFn
		DoReturnFn MoqWriter_starGenType_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Close_fnRecorder) AndDo(fn MoqWriter_starGenType_Close_doFn) *MoqWriter_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Close_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Close_doReturnFn) *MoqWriter_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Close_doFn
		DoReturnFn MoqWriter_starGenType_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Close_paramsKey]*MoqWriter_starGenType_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Close_doFn
				DoReturnFn MoqWriter_starGenType_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Close(params MoqWriter_starGenType_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqWriter_starGenType) ParamsKey_Close(params MoqWriter_starGenType_Close_params, anyParams uint64) MoqWriter_starGenType_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqWriter_starGenType_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqWriter_starGenType) Reset() {
	m.ResultsByParams_Boundary = nil
	m.ResultsByParams_SetBoundary = nil
	m.ResultsByParams_FormDataContentType = nil
	m.ResultsByParams_CreatePart = nil
	m.ResultsByParams_CreateFormFile = nil
	m.ResultsByParams_CreateFormField = nil
	m.ResultsByParams_WriteField = nil
	m.ResultsByParams_Close = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqWriter_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Boundary {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Boundary(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetBoundary {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetBoundary(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_FormDataContentType {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_FormDataContentType(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_CreatePart {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_CreatePart(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_CreateFormFile {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_CreateFormFile(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_CreateFormField {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_CreateFormField(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteField {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteField(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
}
