// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package multipart

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that multipart.Part_starGenType is
// mocked completely
var _ Part_starGenType = (*MoqPart_starGenType_mock)(nil)

// Part_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Part_starGenType interface {
	FormName() string
	FileName() string
	Read(d []byte) (n int, err error)
	Close() error
}

// MoqPart_starGenType holds the state of a moq of the Part_starGenType type
type MoqPart_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqPart_starGenType_mock

	ResultsByParams_FormName []MoqPart_starGenType_FormName_resultsByParams
	ResultsByParams_FileName []MoqPart_starGenType_FileName_resultsByParams
	ResultsByParams_Read     []MoqPart_starGenType_Read_resultsByParams
	ResultsByParams_Close    []MoqPart_starGenType_Close_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			FormName struct{}
			FileName struct{}
			Read     struct {
				D moq.ParamIndexing
			}
			Close struct{}
		}
	}
}

// MoqPart_starGenType_mock isolates the mock interface of the Part_starGenType
// type
type MoqPart_starGenType_mock struct {
	Moq *MoqPart_starGenType
}

// MoqPart_starGenType_recorder isolates the recorder interface of the
// Part_starGenType type
type MoqPart_starGenType_recorder struct {
	Moq *MoqPart_starGenType
}

// MoqPart_starGenType_FormName_params holds the params of the Part_starGenType
// type
type MoqPart_starGenType_FormName_params struct{}

// MoqPart_starGenType_FormName_paramsKey holds the map key params of the
// Part_starGenType type
type MoqPart_starGenType_FormName_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPart_starGenType_FormName_resultsByParams contains the results for a
// given set of parameters for the Part_starGenType type
type MoqPart_starGenType_FormName_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPart_starGenType_FormName_paramsKey]*MoqPart_starGenType_FormName_results
}

// MoqPart_starGenType_FormName_doFn defines the type of function needed when
// calling AndDo for the Part_starGenType type
type MoqPart_starGenType_FormName_doFn func()

// MoqPart_starGenType_FormName_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Part_starGenType type
type MoqPart_starGenType_FormName_doReturnFn func() string

// MoqPart_starGenType_FormName_results holds the results of the
// Part_starGenType type
type MoqPart_starGenType_FormName_results struct {
	Params  MoqPart_starGenType_FormName_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPart_starGenType_FormName_doFn
		DoReturnFn MoqPart_starGenType_FormName_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPart_starGenType_FormName_fnRecorder routes recorded function calls to
// the MoqPart_starGenType moq
type MoqPart_starGenType_FormName_fnRecorder struct {
	Params    MoqPart_starGenType_FormName_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPart_starGenType_FormName_results
	Moq       *MoqPart_starGenType
}

// MoqPart_starGenType_FormName_anyParams isolates the any params functions of
// the Part_starGenType type
type MoqPart_starGenType_FormName_anyParams struct {
	Recorder *MoqPart_starGenType_FormName_fnRecorder
}

// MoqPart_starGenType_FileName_params holds the params of the Part_starGenType
// type
type MoqPart_starGenType_FileName_params struct{}

// MoqPart_starGenType_FileName_paramsKey holds the map key params of the
// Part_starGenType type
type MoqPart_starGenType_FileName_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPart_starGenType_FileName_resultsByParams contains the results for a
// given set of parameters for the Part_starGenType type
type MoqPart_starGenType_FileName_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPart_starGenType_FileName_paramsKey]*MoqPart_starGenType_FileName_results
}

// MoqPart_starGenType_FileName_doFn defines the type of function needed when
// calling AndDo for the Part_starGenType type
type MoqPart_starGenType_FileName_doFn func()

// MoqPart_starGenType_FileName_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Part_starGenType type
type MoqPart_starGenType_FileName_doReturnFn func() string

// MoqPart_starGenType_FileName_results holds the results of the
// Part_starGenType type
type MoqPart_starGenType_FileName_results struct {
	Params  MoqPart_starGenType_FileName_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPart_starGenType_FileName_doFn
		DoReturnFn MoqPart_starGenType_FileName_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPart_starGenType_FileName_fnRecorder routes recorded function calls to
// the MoqPart_starGenType moq
type MoqPart_starGenType_FileName_fnRecorder struct {
	Params    MoqPart_starGenType_FileName_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPart_starGenType_FileName_results
	Moq       *MoqPart_starGenType
}

// MoqPart_starGenType_FileName_anyParams isolates the any params functions of
// the Part_starGenType type
type MoqPart_starGenType_FileName_anyParams struct {
	Recorder *MoqPart_starGenType_FileName_fnRecorder
}

// MoqPart_starGenType_Read_params holds the params of the Part_starGenType
// type
type MoqPart_starGenType_Read_params struct{ D []byte }

// MoqPart_starGenType_Read_paramsKey holds the map key params of the
// Part_starGenType type
type MoqPart_starGenType_Read_paramsKey struct {
	Params struct{}
	Hashes struct{ D hash.Hash }
}

// MoqPart_starGenType_Read_resultsByParams contains the results for a given
// set of parameters for the Part_starGenType type
type MoqPart_starGenType_Read_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPart_starGenType_Read_paramsKey]*MoqPart_starGenType_Read_results
}

// MoqPart_starGenType_Read_doFn defines the type of function needed when
// calling AndDo for the Part_starGenType type
type MoqPart_starGenType_Read_doFn func(d []byte)

// MoqPart_starGenType_Read_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Part_starGenType type
type MoqPart_starGenType_Read_doReturnFn func(d []byte) (n int, err error)

// MoqPart_starGenType_Read_results holds the results of the Part_starGenType
// type
type MoqPart_starGenType_Read_results struct {
	Params  MoqPart_starGenType_Read_params
	Results []struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqPart_starGenType_Read_doFn
		DoReturnFn MoqPart_starGenType_Read_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPart_starGenType_Read_fnRecorder routes recorded function calls to the
// MoqPart_starGenType moq
type MoqPart_starGenType_Read_fnRecorder struct {
	Params    MoqPart_starGenType_Read_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPart_starGenType_Read_results
	Moq       *MoqPart_starGenType
}

// MoqPart_starGenType_Read_anyParams isolates the any params functions of the
// Part_starGenType type
type MoqPart_starGenType_Read_anyParams struct {
	Recorder *MoqPart_starGenType_Read_fnRecorder
}

// MoqPart_starGenType_Close_params holds the params of the Part_starGenType
// type
type MoqPart_starGenType_Close_params struct{}

// MoqPart_starGenType_Close_paramsKey holds the map key params of the
// Part_starGenType type
type MoqPart_starGenType_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPart_starGenType_Close_resultsByParams contains the results for a given
// set of parameters for the Part_starGenType type
type MoqPart_starGenType_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPart_starGenType_Close_paramsKey]*MoqPart_starGenType_Close_results
}

// MoqPart_starGenType_Close_doFn defines the type of function needed when
// calling AndDo for the Part_starGenType type
type MoqPart_starGenType_Close_doFn func()

// MoqPart_starGenType_Close_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Part_starGenType type
type MoqPart_starGenType_Close_doReturnFn func() error

// MoqPart_starGenType_Close_results holds the results of the Part_starGenType
// type
type MoqPart_starGenType_Close_results struct {
	Params  MoqPart_starGenType_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqPart_starGenType_Close_doFn
		DoReturnFn MoqPart_starGenType_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPart_starGenType_Close_fnRecorder routes recorded function calls to the
// MoqPart_starGenType moq
type MoqPart_starGenType_Close_fnRecorder struct {
	Params    MoqPart_starGenType_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPart_starGenType_Close_results
	Moq       *MoqPart_starGenType
}

// MoqPart_starGenType_Close_anyParams isolates the any params functions of the
// Part_starGenType type
type MoqPart_starGenType_Close_anyParams struct {
	Recorder *MoqPart_starGenType_Close_fnRecorder
}

// NewMoqPart_starGenType creates a new moq of the Part_starGenType type
func NewMoqPart_starGenType(scene *moq.Scene, config *moq.Config) *MoqPart_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqPart_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqPart_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				FormName struct{}
				FileName struct{}
				Read     struct {
					D moq.ParamIndexing
				}
				Close struct{}
			}
		}{ParameterIndexing: struct {
			FormName struct{}
			FileName struct{}
			Read     struct {
				D moq.ParamIndexing
			}
			Close struct{}
		}{
			FormName: struct{}{},
			FileName: struct{}{},
			Read: struct {
				D moq.ParamIndexing
			}{
				D: moq.ParamIndexByHash,
			},
			Close: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Part_starGenType type
func (m *MoqPart_starGenType) Mock() *MoqPart_starGenType_mock { return m.Moq }

func (m *MoqPart_starGenType_mock) FormName() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqPart_starGenType_FormName_params{}
	var results *MoqPart_starGenType_FormName_results
	for _, resultsByParams := range m.Moq.ResultsByParams_FormName {
		paramsKey := m.Moq.ParamsKey_FormName(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_FormName(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_FormName(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_FormName(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqPart_starGenType_mock) FileName() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqPart_starGenType_FileName_params{}
	var results *MoqPart_starGenType_FileName_results
	for _, resultsByParams := range m.Moq.ResultsByParams_FileName {
		paramsKey := m.Moq.ParamsKey_FileName(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_FileName(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_FileName(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_FileName(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqPart_starGenType_mock) Read(d []byte) (n int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqPart_starGenType_Read_params{
		D: d,
	}
	var results *MoqPart_starGenType_Read_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Read {
		paramsKey := m.Moq.ParamsKey_Read(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Read(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Read(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Read(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(d)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(d)
	}
	return
}

func (m *MoqPart_starGenType_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqPart_starGenType_Close_params{}
	var results *MoqPart_starGenType_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Part_starGenType type
func (m *MoqPart_starGenType) OnCall() *MoqPart_starGenType_recorder {
	return &MoqPart_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqPart_starGenType_recorder) FormName() *MoqPart_starGenType_FormName_fnRecorder {
	return &MoqPart_starGenType_FormName_fnRecorder{
		Params:   MoqPart_starGenType_FormName_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPart_starGenType_FormName_fnRecorder) Any() *MoqPart_starGenType_FormName_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FormName(r.Params))
		return nil
	}
	return &MoqPart_starGenType_FormName_anyParams{Recorder: r}
}

func (r *MoqPart_starGenType_FormName_fnRecorder) Seq() *MoqPart_starGenType_FormName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FormName(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPart_starGenType_FormName_fnRecorder) NoSeq() *MoqPart_starGenType_FormName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FormName(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPart_starGenType_FormName_fnRecorder) ReturnResults(result1 string) *MoqPart_starGenType_FormName_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPart_starGenType_FormName_doFn
		DoReturnFn MoqPart_starGenType_FormName_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPart_starGenType_FormName_fnRecorder) AndDo(fn MoqPart_starGenType_FormName_doFn) *MoqPart_starGenType_FormName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPart_starGenType_FormName_fnRecorder) DoReturnResults(fn MoqPart_starGenType_FormName_doReturnFn) *MoqPart_starGenType_FormName_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPart_starGenType_FormName_doFn
		DoReturnFn MoqPart_starGenType_FormName_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPart_starGenType_FormName_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPart_starGenType_FormName_resultsByParams
	for n, res := range r.Moq.ResultsByParams_FormName {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPart_starGenType_FormName_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPart_starGenType_FormName_paramsKey]*MoqPart_starGenType_FormName_results{},
		}
		r.Moq.ResultsByParams_FormName = append(r.Moq.ResultsByParams_FormName, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_FormName) {
			copy(r.Moq.ResultsByParams_FormName[insertAt+1:], r.Moq.ResultsByParams_FormName[insertAt:0])
			r.Moq.ResultsByParams_FormName[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_FormName(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPart_starGenType_FormName_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPart_starGenType_FormName_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPart_starGenType_FormName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqPart_starGenType_FormName_doFn
				DoReturnFn MoqPart_starGenType_FormName_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPart_starGenType) PrettyParams_FormName(params MoqPart_starGenType_FormName_params) string {
	return fmt.Sprintf("FormName()")
}

func (m *MoqPart_starGenType) ParamsKey_FormName(params MoqPart_starGenType_FormName_params, anyParams uint64) MoqPart_starGenType_FormName_paramsKey {
	m.Scene.T.Helper()
	return MoqPart_starGenType_FormName_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPart_starGenType_recorder) FileName() *MoqPart_starGenType_FileName_fnRecorder {
	return &MoqPart_starGenType_FileName_fnRecorder{
		Params:   MoqPart_starGenType_FileName_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPart_starGenType_FileName_fnRecorder) Any() *MoqPart_starGenType_FileName_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FileName(r.Params))
		return nil
	}
	return &MoqPart_starGenType_FileName_anyParams{Recorder: r}
}

func (r *MoqPart_starGenType_FileName_fnRecorder) Seq() *MoqPart_starGenType_FileName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FileName(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPart_starGenType_FileName_fnRecorder) NoSeq() *MoqPart_starGenType_FileName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FileName(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPart_starGenType_FileName_fnRecorder) ReturnResults(result1 string) *MoqPart_starGenType_FileName_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPart_starGenType_FileName_doFn
		DoReturnFn MoqPart_starGenType_FileName_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPart_starGenType_FileName_fnRecorder) AndDo(fn MoqPart_starGenType_FileName_doFn) *MoqPart_starGenType_FileName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPart_starGenType_FileName_fnRecorder) DoReturnResults(fn MoqPart_starGenType_FileName_doReturnFn) *MoqPart_starGenType_FileName_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqPart_starGenType_FileName_doFn
		DoReturnFn MoqPart_starGenType_FileName_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPart_starGenType_FileName_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPart_starGenType_FileName_resultsByParams
	for n, res := range r.Moq.ResultsByParams_FileName {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPart_starGenType_FileName_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPart_starGenType_FileName_paramsKey]*MoqPart_starGenType_FileName_results{},
		}
		r.Moq.ResultsByParams_FileName = append(r.Moq.ResultsByParams_FileName, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_FileName) {
			copy(r.Moq.ResultsByParams_FileName[insertAt+1:], r.Moq.ResultsByParams_FileName[insertAt:0])
			r.Moq.ResultsByParams_FileName[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_FileName(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPart_starGenType_FileName_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPart_starGenType_FileName_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPart_starGenType_FileName_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqPart_starGenType_FileName_doFn
				DoReturnFn MoqPart_starGenType_FileName_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPart_starGenType) PrettyParams_FileName(params MoqPart_starGenType_FileName_params) string {
	return fmt.Sprintf("FileName()")
}

func (m *MoqPart_starGenType) ParamsKey_FileName(params MoqPart_starGenType_FileName_params, anyParams uint64) MoqPart_starGenType_FileName_paramsKey {
	m.Scene.T.Helper()
	return MoqPart_starGenType_FileName_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPart_starGenType_recorder) Read(d []byte) *MoqPart_starGenType_Read_fnRecorder {
	return &MoqPart_starGenType_Read_fnRecorder{
		Params: MoqPart_starGenType_Read_params{
			D: d,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPart_starGenType_Read_fnRecorder) Any() *MoqPart_starGenType_Read_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	return &MoqPart_starGenType_Read_anyParams{Recorder: r}
}

func (a *MoqPart_starGenType_Read_anyParams) D() *MoqPart_starGenType_Read_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPart_starGenType_Read_fnRecorder) Seq() *MoqPart_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPart_starGenType_Read_fnRecorder) NoSeq() *MoqPart_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPart_starGenType_Read_fnRecorder) ReturnResults(n int, err error) *MoqPart_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqPart_starGenType_Read_doFn
		DoReturnFn MoqPart_starGenType_Read_doReturnFn
	}{
		Values: &struct {
			N   int
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPart_starGenType_Read_fnRecorder) AndDo(fn MoqPart_starGenType_Read_doFn) *MoqPart_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPart_starGenType_Read_fnRecorder) DoReturnResults(fn MoqPart_starGenType_Read_doReturnFn) *MoqPart_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqPart_starGenType_Read_doFn
		DoReturnFn MoqPart_starGenType_Read_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPart_starGenType_Read_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPart_starGenType_Read_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Read {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPart_starGenType_Read_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPart_starGenType_Read_paramsKey]*MoqPart_starGenType_Read_results{},
		}
		r.Moq.ResultsByParams_Read = append(r.Moq.ResultsByParams_Read, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Read) {
			copy(r.Moq.ResultsByParams_Read[insertAt+1:], r.Moq.ResultsByParams_Read[insertAt:0])
			r.Moq.ResultsByParams_Read[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Read(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPart_starGenType_Read_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPart_starGenType_Read_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPart_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int
					Err error
				}
				Sequence   uint32
				DoFn       MoqPart_starGenType_Read_doFn
				DoReturnFn MoqPart_starGenType_Read_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPart_starGenType) PrettyParams_Read(params MoqPart_starGenType_Read_params) string {
	return fmt.Sprintf("Read(%#v)", params.D)
}

func (m *MoqPart_starGenType) ParamsKey_Read(params MoqPart_starGenType_Read_params, anyParams uint64) MoqPart_starGenType_Read_paramsKey {
	m.Scene.T.Helper()
	var dUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Read.D == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The d parameter of the Read function can't be indexed by value")
		}
		dUsedHash = hash.DeepHash(params.D)
	}
	return MoqPart_starGenType_Read_paramsKey{
		Params: struct{}{},
		Hashes: struct{ D hash.Hash }{
			D: dUsedHash,
		},
	}
}

func (m *MoqPart_starGenType_recorder) Close() *MoqPart_starGenType_Close_fnRecorder {
	return &MoqPart_starGenType_Close_fnRecorder{
		Params:   MoqPart_starGenType_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPart_starGenType_Close_fnRecorder) Any() *MoqPart_starGenType_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqPart_starGenType_Close_anyParams{Recorder: r}
}

func (r *MoqPart_starGenType_Close_fnRecorder) Seq() *MoqPart_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPart_starGenType_Close_fnRecorder) NoSeq() *MoqPart_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPart_starGenType_Close_fnRecorder) ReturnResults(result1 error) *MoqPart_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqPart_starGenType_Close_doFn
		DoReturnFn MoqPart_starGenType_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPart_starGenType_Close_fnRecorder) AndDo(fn MoqPart_starGenType_Close_doFn) *MoqPart_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPart_starGenType_Close_fnRecorder) DoReturnResults(fn MoqPart_starGenType_Close_doReturnFn) *MoqPart_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqPart_starGenType_Close_doFn
		DoReturnFn MoqPart_starGenType_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPart_starGenType_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPart_starGenType_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPart_starGenType_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPart_starGenType_Close_paramsKey]*MoqPart_starGenType_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPart_starGenType_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPart_starGenType_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPart_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqPart_starGenType_Close_doFn
				DoReturnFn MoqPart_starGenType_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPart_starGenType) PrettyParams_Close(params MoqPart_starGenType_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqPart_starGenType) ParamsKey_Close(params MoqPart_starGenType_Close_params, anyParams uint64) MoqPart_starGenType_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqPart_starGenType_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqPart_starGenType) Reset() {
	m.ResultsByParams_FormName = nil
	m.ResultsByParams_FileName = nil
	m.ResultsByParams_Read = nil
	m.ResultsByParams_Close = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqPart_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_FormName {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_FormName(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_FileName {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_FileName(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Read {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Read(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
}
