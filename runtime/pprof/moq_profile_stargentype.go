// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package pprof

import (
	"fmt"
	"io"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that pprof.Profile_starGenType is
// mocked completely
var _ Profile_starGenType = (*MoqProfile_starGenType_mock)(nil)

// Profile_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Profile_starGenType interface {
	Name() string
	Count() int
	Add(value interface{}, skip int)
	Remove(value interface{})
	WriteTo(w io.Writer, debug int) error
}

// MoqProfile_starGenType holds the state of a moq of the Profile_starGenType
// type
type MoqProfile_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqProfile_starGenType_mock

	ResultsByParams_Name    []MoqProfile_starGenType_Name_resultsByParams
	ResultsByParams_Count   []MoqProfile_starGenType_Count_resultsByParams
	ResultsByParams_Add     []MoqProfile_starGenType_Add_resultsByParams
	ResultsByParams_Remove  []MoqProfile_starGenType_Remove_resultsByParams
	ResultsByParams_WriteTo []MoqProfile_starGenType_WriteTo_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Name  struct{}
			Count struct{}
			Add   struct {
				Value moq.ParamIndexing
				Skip  moq.ParamIndexing
			}
			Remove struct {
				Value moq.ParamIndexing
			}
			WriteTo struct {
				W     moq.ParamIndexing
				Debug moq.ParamIndexing
			}
		}
	}
	// MoqProfile_starGenType_mock isolates the mock interface of the
}

// Profile_starGenType type
type MoqProfile_starGenType_mock struct {
	Moq *MoqProfile_starGenType
}

// MoqProfile_starGenType_recorder isolates the recorder interface of the
// Profile_starGenType type
type MoqProfile_starGenType_recorder struct {
	Moq *MoqProfile_starGenType
}

// MoqProfile_starGenType_Name_params holds the params of the
// Profile_starGenType type
type MoqProfile_starGenType_Name_params struct{}

// MoqProfile_starGenType_Name_paramsKey holds the map key params of the
// Profile_starGenType type
type MoqProfile_starGenType_Name_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqProfile_starGenType_Name_resultsByParams contains the results for a given
// set of parameters for the Profile_starGenType type
type MoqProfile_starGenType_Name_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqProfile_starGenType_Name_paramsKey]*MoqProfile_starGenType_Name_results
}

// MoqProfile_starGenType_Name_doFn defines the type of function needed when
// calling AndDo for the Profile_starGenType type
type MoqProfile_starGenType_Name_doFn func()

// MoqProfile_starGenType_Name_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Profile_starGenType type
type MoqProfile_starGenType_Name_doReturnFn func() string

// MoqProfile_starGenType_Name_results holds the results of the
// Profile_starGenType type
type MoqProfile_starGenType_Name_results struct {
	Params  MoqProfile_starGenType_Name_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqProfile_starGenType_Name_doFn
		DoReturnFn MoqProfile_starGenType_Name_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqProfile_starGenType_Name_fnRecorder routes recorded function calls to the
// MoqProfile_starGenType moq
type MoqProfile_starGenType_Name_fnRecorder struct {
	Params    MoqProfile_starGenType_Name_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqProfile_starGenType_Name_results
	Moq       *MoqProfile_starGenType
}

// MoqProfile_starGenType_Name_anyParams isolates the any params functions of
// the Profile_starGenType type
type MoqProfile_starGenType_Name_anyParams struct {
	Recorder *MoqProfile_starGenType_Name_fnRecorder
}

// MoqProfile_starGenType_Count_params holds the params of the
// Profile_starGenType type
type MoqProfile_starGenType_Count_params struct{}

// MoqProfile_starGenType_Count_paramsKey holds the map key params of the
// Profile_starGenType type
type MoqProfile_starGenType_Count_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqProfile_starGenType_Count_resultsByParams contains the results for a
// given set of parameters for the Profile_starGenType type
type MoqProfile_starGenType_Count_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqProfile_starGenType_Count_paramsKey]*MoqProfile_starGenType_Count_results
}

// MoqProfile_starGenType_Count_doFn defines the type of function needed when
// calling AndDo for the Profile_starGenType type
type MoqProfile_starGenType_Count_doFn func()

// MoqProfile_starGenType_Count_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Profile_starGenType type
type MoqProfile_starGenType_Count_doReturnFn func() int

// MoqProfile_starGenType_Count_results holds the results of the
// Profile_starGenType type
type MoqProfile_starGenType_Count_results struct {
	Params  MoqProfile_starGenType_Count_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqProfile_starGenType_Count_doFn
		DoReturnFn MoqProfile_starGenType_Count_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqProfile_starGenType_Count_fnRecorder routes recorded function calls to
// the MoqProfile_starGenType moq
type MoqProfile_starGenType_Count_fnRecorder struct {
	Params    MoqProfile_starGenType_Count_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqProfile_starGenType_Count_results
	Moq       *MoqProfile_starGenType
}

// MoqProfile_starGenType_Count_anyParams isolates the any params functions of
// the Profile_starGenType type
type MoqProfile_starGenType_Count_anyParams struct {
	Recorder *MoqProfile_starGenType_Count_fnRecorder
}

// MoqProfile_starGenType_Add_params holds the params of the
// Profile_starGenType type
type MoqProfile_starGenType_Add_params struct {
	Value interface{}
	Skip  int
}

// MoqProfile_starGenType_Add_paramsKey holds the map key params of the
// Profile_starGenType type
type MoqProfile_starGenType_Add_paramsKey struct {
	Params struct {
		Value interface{}
		Skip  int
	}
	Hashes struct {
		Value hash.Hash
		Skip  hash.Hash
	}
}

// MoqProfile_starGenType_Add_resultsByParams contains the results for a given
// set of parameters for the Profile_starGenType type
type MoqProfile_starGenType_Add_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqProfile_starGenType_Add_paramsKey]*MoqProfile_starGenType_Add_results
}

// MoqProfile_starGenType_Add_doFn defines the type of function needed when
// calling AndDo for the Profile_starGenType type
type MoqProfile_starGenType_Add_doFn func(value interface{}, skip int)

// MoqProfile_starGenType_Add_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Profile_starGenType type
type MoqProfile_starGenType_Add_doReturnFn func(value interface{}, skip int)

// MoqProfile_starGenType_Add_results holds the results of the
// Profile_starGenType type
type MoqProfile_starGenType_Add_results struct {
	Params  MoqProfile_starGenType_Add_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqProfile_starGenType_Add_doFn
		DoReturnFn MoqProfile_starGenType_Add_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqProfile_starGenType_Add_fnRecorder routes recorded function calls to the
// MoqProfile_starGenType moq
type MoqProfile_starGenType_Add_fnRecorder struct {
	Params    MoqProfile_starGenType_Add_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqProfile_starGenType_Add_results
	Moq       *MoqProfile_starGenType
}

// MoqProfile_starGenType_Add_anyParams isolates the any params functions of
// the Profile_starGenType type
type MoqProfile_starGenType_Add_anyParams struct {
	Recorder *MoqProfile_starGenType_Add_fnRecorder
}

// MoqProfile_starGenType_Remove_params holds the params of the
// Profile_starGenType type
type MoqProfile_starGenType_Remove_params struct{ Value interface{} }

// MoqProfile_starGenType_Remove_paramsKey holds the map key params of the
// Profile_starGenType type
type MoqProfile_starGenType_Remove_paramsKey struct {
	Params struct{ Value interface{} }
	Hashes struct{ Value hash.Hash }
}

// MoqProfile_starGenType_Remove_resultsByParams contains the results for a
// given set of parameters for the Profile_starGenType type
type MoqProfile_starGenType_Remove_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqProfile_starGenType_Remove_paramsKey]*MoqProfile_starGenType_Remove_results
}

// MoqProfile_starGenType_Remove_doFn defines the type of function needed when
// calling AndDo for the Profile_starGenType type
type MoqProfile_starGenType_Remove_doFn func(value interface{})

// MoqProfile_starGenType_Remove_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Profile_starGenType type
type MoqProfile_starGenType_Remove_doReturnFn func(value interface{})

// MoqProfile_starGenType_Remove_results holds the results of the
// Profile_starGenType type
type MoqProfile_starGenType_Remove_results struct {
	Params  MoqProfile_starGenType_Remove_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqProfile_starGenType_Remove_doFn
		DoReturnFn MoqProfile_starGenType_Remove_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqProfile_starGenType_Remove_fnRecorder routes recorded function calls to
// the MoqProfile_starGenType moq
type MoqProfile_starGenType_Remove_fnRecorder struct {
	Params    MoqProfile_starGenType_Remove_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqProfile_starGenType_Remove_results
	Moq       *MoqProfile_starGenType
}

// MoqProfile_starGenType_Remove_anyParams isolates the any params functions of
// the Profile_starGenType type
type MoqProfile_starGenType_Remove_anyParams struct {
	Recorder *MoqProfile_starGenType_Remove_fnRecorder
}

// MoqProfile_starGenType_WriteTo_params holds the params of the
// Profile_starGenType type
type MoqProfile_starGenType_WriteTo_params struct {
	W     io.Writer
	Debug int
}

// MoqProfile_starGenType_WriteTo_paramsKey holds the map key params of the
// Profile_starGenType type
type MoqProfile_starGenType_WriteTo_paramsKey struct {
	Params struct {
		W     io.Writer
		Debug int
	}
	Hashes struct {
		W     hash.Hash
		Debug hash.Hash
	}
}

// MoqProfile_starGenType_WriteTo_resultsByParams contains the results for a
// given set of parameters for the Profile_starGenType type
type MoqProfile_starGenType_WriteTo_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqProfile_starGenType_WriteTo_paramsKey]*MoqProfile_starGenType_WriteTo_results
}

// MoqProfile_starGenType_WriteTo_doFn defines the type of function needed when
// calling AndDo for the Profile_starGenType type
type MoqProfile_starGenType_WriteTo_doFn func(w io.Writer, debug int)

// MoqProfile_starGenType_WriteTo_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Profile_starGenType type
type MoqProfile_starGenType_WriteTo_doReturnFn func(w io.Writer, debug int) error

// MoqProfile_starGenType_WriteTo_results holds the results of the
// Profile_starGenType type
type MoqProfile_starGenType_WriteTo_results struct {
	Params  MoqProfile_starGenType_WriteTo_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqProfile_starGenType_WriteTo_doFn
		DoReturnFn MoqProfile_starGenType_WriteTo_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqProfile_starGenType_WriteTo_fnRecorder routes recorded function calls to
// the MoqProfile_starGenType moq
type MoqProfile_starGenType_WriteTo_fnRecorder struct {
	Params    MoqProfile_starGenType_WriteTo_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqProfile_starGenType_WriteTo_results
	Moq       *MoqProfile_starGenType
}

// MoqProfile_starGenType_WriteTo_anyParams isolates the any params functions
// of the Profile_starGenType type
type MoqProfile_starGenType_WriteTo_anyParams struct {
	Recorder *MoqProfile_starGenType_WriteTo_fnRecorder
}

// NewMoqProfile_starGenType creates a new moq of the Profile_starGenType type
func NewMoqProfile_starGenType(scene *moq.Scene, config *moq.Config) *MoqProfile_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqProfile_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqProfile_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Name  struct{}
				Count struct{}
				Add   struct {
					Value moq.ParamIndexing
					Skip  moq.ParamIndexing
				}
				Remove struct {
					Value moq.ParamIndexing
				}
				WriteTo struct {
					W     moq.ParamIndexing
					Debug moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Name  struct{}
			Count struct{}
			Add   struct {
				Value moq.ParamIndexing
				Skip  moq.ParamIndexing
			}
			Remove struct {
				Value moq.ParamIndexing
			}
			WriteTo struct {
				W     moq.ParamIndexing
				Debug moq.ParamIndexing
			}
		}{
			Name:  struct{}{},
			Count: struct{}{},
			Add: struct {
				Value moq.ParamIndexing
				Skip  moq.ParamIndexing
			}{
				Value: moq.ParamIndexByHash,
				Skip:  moq.ParamIndexByValue,
			},
			Remove: struct {
				Value moq.ParamIndexing
			}{
				Value: moq.ParamIndexByHash,
			},
			WriteTo: struct {
				W     moq.ParamIndexing
				Debug moq.ParamIndexing
			}{
				W:     moq.ParamIndexByHash,
				Debug: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Profile_starGenType type
func (m *MoqProfile_starGenType) Mock() *MoqProfile_starGenType_mock { return m.Moq }

func (m *MoqProfile_starGenType_mock) Name() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqProfile_starGenType_Name_params{}
	var results *MoqProfile_starGenType_Name_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Name {
		paramsKey := m.Moq.ParamsKey_Name(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Name(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Name(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Name(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqProfile_starGenType_mock) Count() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqProfile_starGenType_Count_params{}
	var results *MoqProfile_starGenType_Count_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Count {
		paramsKey := m.Moq.ParamsKey_Count(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Count(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Count(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Count(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqProfile_starGenType_mock) Add(value interface{}, skip int) {
	m.Moq.Scene.T.Helper()
	params := MoqProfile_starGenType_Add_params{
		Value: value,
		Skip:  skip,
	}
	var results *MoqProfile_starGenType_Add_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Add {
		paramsKey := m.Moq.ParamsKey_Add(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Add(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Add(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Add(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(value, skip)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(value, skip)
	}
	return
}

func (m *MoqProfile_starGenType_mock) Remove(value interface{}) {
	m.Moq.Scene.T.Helper()
	params := MoqProfile_starGenType_Remove_params{
		Value: value,
	}
	var results *MoqProfile_starGenType_Remove_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Remove {
		paramsKey := m.Moq.ParamsKey_Remove(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Remove(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Remove(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Remove(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(value)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(value)
	}
	return
}

func (m *MoqProfile_starGenType_mock) WriteTo(w io.Writer, debug int) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqProfile_starGenType_WriteTo_params{
		W:     w,
		Debug: debug,
	}
	var results *MoqProfile_starGenType_WriteTo_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteTo {
		paramsKey := m.Moq.ParamsKey_WriteTo(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteTo(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteTo(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteTo(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(w, debug)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(w, debug)
	}
	return
}

// OnCall returns the recorder implementation of the Profile_starGenType type
func (m *MoqProfile_starGenType) OnCall() *MoqProfile_starGenType_recorder {
	return &MoqProfile_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqProfile_starGenType_recorder) Name() *MoqProfile_starGenType_Name_fnRecorder {
	return &MoqProfile_starGenType_Name_fnRecorder{
		Params:   MoqProfile_starGenType_Name_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqProfile_starGenType_Name_fnRecorder) Any() *MoqProfile_starGenType_Name_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	return &MoqProfile_starGenType_Name_anyParams{Recorder: r}
}

func (r *MoqProfile_starGenType_Name_fnRecorder) Seq() *MoqProfile_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqProfile_starGenType_Name_fnRecorder) NoSeq() *MoqProfile_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqProfile_starGenType_Name_fnRecorder) ReturnResults(result1 string) *MoqProfile_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqProfile_starGenType_Name_doFn
		DoReturnFn MoqProfile_starGenType_Name_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqProfile_starGenType_Name_fnRecorder) AndDo(fn MoqProfile_starGenType_Name_doFn) *MoqProfile_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqProfile_starGenType_Name_fnRecorder) DoReturnResults(fn MoqProfile_starGenType_Name_doReturnFn) *MoqProfile_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqProfile_starGenType_Name_doFn
		DoReturnFn MoqProfile_starGenType_Name_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqProfile_starGenType_Name_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqProfile_starGenType_Name_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Name {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqProfile_starGenType_Name_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqProfile_starGenType_Name_paramsKey]*MoqProfile_starGenType_Name_results{},
		}
		r.Moq.ResultsByParams_Name = append(r.Moq.ResultsByParams_Name, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Name) {
			copy(r.Moq.ResultsByParams_Name[insertAt+1:], r.Moq.ResultsByParams_Name[insertAt:0])
			r.Moq.ResultsByParams_Name[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Name(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqProfile_starGenType_Name_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqProfile_starGenType_Name_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqProfile_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqProfile_starGenType_Name_doFn
				DoReturnFn MoqProfile_starGenType_Name_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqProfile_starGenType) PrettyParams_Name(params MoqProfile_starGenType_Name_params) string {
	return fmt.Sprintf("Name()")
}

func (m *MoqProfile_starGenType) ParamsKey_Name(params MoqProfile_starGenType_Name_params, anyParams uint64) MoqProfile_starGenType_Name_paramsKey {
	m.Scene.T.Helper()
	return MoqProfile_starGenType_Name_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqProfile_starGenType_recorder) Count() *MoqProfile_starGenType_Count_fnRecorder {
	return &MoqProfile_starGenType_Count_fnRecorder{
		Params:   MoqProfile_starGenType_Count_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqProfile_starGenType_Count_fnRecorder) Any() *MoqProfile_starGenType_Count_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Count(r.Params))
		return nil
	}
	return &MoqProfile_starGenType_Count_anyParams{Recorder: r}
}

func (r *MoqProfile_starGenType_Count_fnRecorder) Seq() *MoqProfile_starGenType_Count_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Count(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqProfile_starGenType_Count_fnRecorder) NoSeq() *MoqProfile_starGenType_Count_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Count(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqProfile_starGenType_Count_fnRecorder) ReturnResults(result1 int) *MoqProfile_starGenType_Count_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqProfile_starGenType_Count_doFn
		DoReturnFn MoqProfile_starGenType_Count_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqProfile_starGenType_Count_fnRecorder) AndDo(fn MoqProfile_starGenType_Count_doFn) *MoqProfile_starGenType_Count_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqProfile_starGenType_Count_fnRecorder) DoReturnResults(fn MoqProfile_starGenType_Count_doReturnFn) *MoqProfile_starGenType_Count_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqProfile_starGenType_Count_doFn
		DoReturnFn MoqProfile_starGenType_Count_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqProfile_starGenType_Count_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqProfile_starGenType_Count_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Count {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqProfile_starGenType_Count_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqProfile_starGenType_Count_paramsKey]*MoqProfile_starGenType_Count_results{},
		}
		r.Moq.ResultsByParams_Count = append(r.Moq.ResultsByParams_Count, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Count) {
			copy(r.Moq.ResultsByParams_Count[insertAt+1:], r.Moq.ResultsByParams_Count[insertAt:0])
			r.Moq.ResultsByParams_Count[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Count(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqProfile_starGenType_Count_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqProfile_starGenType_Count_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqProfile_starGenType_Count_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqProfile_starGenType_Count_doFn
				DoReturnFn MoqProfile_starGenType_Count_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqProfile_starGenType) PrettyParams_Count(params MoqProfile_starGenType_Count_params) string {
	return fmt.Sprintf("Count()")
}

func (m *MoqProfile_starGenType) ParamsKey_Count(params MoqProfile_starGenType_Count_params, anyParams uint64) MoqProfile_starGenType_Count_paramsKey {
	m.Scene.T.Helper()
	return MoqProfile_starGenType_Count_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqProfile_starGenType_recorder) Add(value interface{}, skip int) *MoqProfile_starGenType_Add_fnRecorder {
	return &MoqProfile_starGenType_Add_fnRecorder{
		Params: MoqProfile_starGenType_Add_params{
			Value: value,
			Skip:  skip,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqProfile_starGenType_Add_fnRecorder) Any() *MoqProfile_starGenType_Add_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	return &MoqProfile_starGenType_Add_anyParams{Recorder: r}
}

func (a *MoqProfile_starGenType_Add_anyParams) Value() *MoqProfile_starGenType_Add_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqProfile_starGenType_Add_anyParams) Skip() *MoqProfile_starGenType_Add_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqProfile_starGenType_Add_fnRecorder) Seq() *MoqProfile_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqProfile_starGenType_Add_fnRecorder) NoSeq() *MoqProfile_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqProfile_starGenType_Add_fnRecorder) ReturnResults() *MoqProfile_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqProfile_starGenType_Add_doFn
		DoReturnFn MoqProfile_starGenType_Add_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqProfile_starGenType_Add_fnRecorder) AndDo(fn MoqProfile_starGenType_Add_doFn) *MoqProfile_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqProfile_starGenType_Add_fnRecorder) DoReturnResults(fn MoqProfile_starGenType_Add_doReturnFn) *MoqProfile_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqProfile_starGenType_Add_doFn
		DoReturnFn MoqProfile_starGenType_Add_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqProfile_starGenType_Add_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqProfile_starGenType_Add_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Add {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqProfile_starGenType_Add_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqProfile_starGenType_Add_paramsKey]*MoqProfile_starGenType_Add_results{},
		}
		r.Moq.ResultsByParams_Add = append(r.Moq.ResultsByParams_Add, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Add) {
			copy(r.Moq.ResultsByParams_Add[insertAt+1:], r.Moq.ResultsByParams_Add[insertAt:0])
			r.Moq.ResultsByParams_Add[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Add(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqProfile_starGenType_Add_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqProfile_starGenType_Add_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqProfile_starGenType_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqProfile_starGenType_Add_doFn
				DoReturnFn MoqProfile_starGenType_Add_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqProfile_starGenType) PrettyParams_Add(params MoqProfile_starGenType_Add_params) string {
	return fmt.Sprintf("Add(%#v, %#v)", params.Value, params.Skip)
}

func (m *MoqProfile_starGenType) ParamsKey_Add(params MoqProfile_starGenType_Add_params, anyParams uint64) MoqProfile_starGenType_Add_paramsKey {
	m.Scene.T.Helper()
	var valueUsed interface{}
	var valueUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Add.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	var skipUsed int
	var skipUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Add.Skip == moq.ParamIndexByValue {
			skipUsed = params.Skip
		} else {
			skipUsedHash = hash.DeepHash(params.Skip)
		}
	}
	return MoqProfile_starGenType_Add_paramsKey{
		Params: struct {
			Value interface{}
			Skip  int
		}{
			Value: valueUsed,
			Skip:  skipUsed,
		},
		Hashes: struct {
			Value hash.Hash
			Skip  hash.Hash
		}{
			Value: valueUsedHash,
			Skip:  skipUsedHash,
		},
	}
}

func (m *MoqProfile_starGenType_recorder) Remove(value interface{}) *MoqProfile_starGenType_Remove_fnRecorder {
	return &MoqProfile_starGenType_Remove_fnRecorder{
		Params: MoqProfile_starGenType_Remove_params{
			Value: value,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqProfile_starGenType_Remove_fnRecorder) Any() *MoqProfile_starGenType_Remove_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Remove(r.Params))
		return nil
	}
	return &MoqProfile_starGenType_Remove_anyParams{Recorder: r}
}

func (a *MoqProfile_starGenType_Remove_anyParams) Value() *MoqProfile_starGenType_Remove_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqProfile_starGenType_Remove_fnRecorder) Seq() *MoqProfile_starGenType_Remove_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Remove(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqProfile_starGenType_Remove_fnRecorder) NoSeq() *MoqProfile_starGenType_Remove_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Remove(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqProfile_starGenType_Remove_fnRecorder) ReturnResults() *MoqProfile_starGenType_Remove_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqProfile_starGenType_Remove_doFn
		DoReturnFn MoqProfile_starGenType_Remove_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqProfile_starGenType_Remove_fnRecorder) AndDo(fn MoqProfile_starGenType_Remove_doFn) *MoqProfile_starGenType_Remove_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqProfile_starGenType_Remove_fnRecorder) DoReturnResults(fn MoqProfile_starGenType_Remove_doReturnFn) *MoqProfile_starGenType_Remove_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqProfile_starGenType_Remove_doFn
		DoReturnFn MoqProfile_starGenType_Remove_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqProfile_starGenType_Remove_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqProfile_starGenType_Remove_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Remove {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqProfile_starGenType_Remove_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqProfile_starGenType_Remove_paramsKey]*MoqProfile_starGenType_Remove_results{},
		}
		r.Moq.ResultsByParams_Remove = append(r.Moq.ResultsByParams_Remove, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Remove) {
			copy(r.Moq.ResultsByParams_Remove[insertAt+1:], r.Moq.ResultsByParams_Remove[insertAt:0])
			r.Moq.ResultsByParams_Remove[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Remove(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqProfile_starGenType_Remove_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqProfile_starGenType_Remove_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqProfile_starGenType_Remove_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqProfile_starGenType_Remove_doFn
				DoReturnFn MoqProfile_starGenType_Remove_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqProfile_starGenType) PrettyParams_Remove(params MoqProfile_starGenType_Remove_params) string {
	return fmt.Sprintf("Remove(%#v)", params.Value)
}

func (m *MoqProfile_starGenType) ParamsKey_Remove(params MoqProfile_starGenType_Remove_params, anyParams uint64) MoqProfile_starGenType_Remove_paramsKey {
	m.Scene.T.Helper()
	var valueUsed interface{}
	var valueUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Remove.Value == moq.ParamIndexByValue {
			valueUsed = params.Value
		} else {
			valueUsedHash = hash.DeepHash(params.Value)
		}
	}
	return MoqProfile_starGenType_Remove_paramsKey{
		Params: struct{ Value interface{} }{
			Value: valueUsed,
		},
		Hashes: struct{ Value hash.Hash }{
			Value: valueUsedHash,
		},
	}
}

func (m *MoqProfile_starGenType_recorder) WriteTo(w io.Writer, debug int) *MoqProfile_starGenType_WriteTo_fnRecorder {
	return &MoqProfile_starGenType_WriteTo_fnRecorder{
		Params: MoqProfile_starGenType_WriteTo_params{
			W:     w,
			Debug: debug,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqProfile_starGenType_WriteTo_fnRecorder) Any() *MoqProfile_starGenType_WriteTo_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteTo(r.Params))
		return nil
	}
	return &MoqProfile_starGenType_WriteTo_anyParams{Recorder: r}
}

func (a *MoqProfile_starGenType_WriteTo_anyParams) W() *MoqProfile_starGenType_WriteTo_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqProfile_starGenType_WriteTo_anyParams) Debug() *MoqProfile_starGenType_WriteTo_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqProfile_starGenType_WriteTo_fnRecorder) Seq() *MoqProfile_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteTo(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqProfile_starGenType_WriteTo_fnRecorder) NoSeq() *MoqProfile_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteTo(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqProfile_starGenType_WriteTo_fnRecorder) ReturnResults(result1 error) *MoqProfile_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqProfile_starGenType_WriteTo_doFn
		DoReturnFn MoqProfile_starGenType_WriteTo_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqProfile_starGenType_WriteTo_fnRecorder) AndDo(fn MoqProfile_starGenType_WriteTo_doFn) *MoqProfile_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqProfile_starGenType_WriteTo_fnRecorder) DoReturnResults(fn MoqProfile_starGenType_WriteTo_doReturnFn) *MoqProfile_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqProfile_starGenType_WriteTo_doFn
		DoReturnFn MoqProfile_starGenType_WriteTo_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqProfile_starGenType_WriteTo_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqProfile_starGenType_WriteTo_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteTo {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqProfile_starGenType_WriteTo_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqProfile_starGenType_WriteTo_paramsKey]*MoqProfile_starGenType_WriteTo_results{},
		}
		r.Moq.ResultsByParams_WriteTo = append(r.Moq.ResultsByParams_WriteTo, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteTo) {
			copy(r.Moq.ResultsByParams_WriteTo[insertAt+1:], r.Moq.ResultsByParams_WriteTo[insertAt:0])
			r.Moq.ResultsByParams_WriteTo[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteTo(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqProfile_starGenType_WriteTo_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqProfile_starGenType_WriteTo_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqProfile_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqProfile_starGenType_WriteTo_doFn
				DoReturnFn MoqProfile_starGenType_WriteTo_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqProfile_starGenType) PrettyParams_WriteTo(params MoqProfile_starGenType_WriteTo_params) string {
	return fmt.Sprintf("WriteTo(%#v, %#v)", params.W, params.Debug)
}

func (m *MoqProfile_starGenType) ParamsKey_WriteTo(params MoqProfile_starGenType_WriteTo_params, anyParams uint64) MoqProfile_starGenType_WriteTo_paramsKey {
	m.Scene.T.Helper()
	var wUsed io.Writer
	var wUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteTo.W == moq.ParamIndexByValue {
			wUsed = params.W
		} else {
			wUsedHash = hash.DeepHash(params.W)
		}
	}
	var debugUsed int
	var debugUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.WriteTo.Debug == moq.ParamIndexByValue {
			debugUsed = params.Debug
		} else {
			debugUsedHash = hash.DeepHash(params.Debug)
		}
	}
	return MoqProfile_starGenType_WriteTo_paramsKey{
		Params: struct {
			W     io.Writer
			Debug int
		}{
			W:     wUsed,
			Debug: debugUsed,
		},
		Hashes: struct {
			W     hash.Hash
			Debug hash.Hash
		}{
			W:     wUsedHash,
			Debug: debugUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqProfile_starGenType) Reset() {
	m.ResultsByParams_Name = nil
	m.ResultsByParams_Count = nil
	m.ResultsByParams_Add = nil
	m.ResultsByParams_Remove = nil
	m.ResultsByParams_WriteTo = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqProfile_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Name {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Name(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Count {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Count(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Add {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Add(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Remove {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Remove(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteTo {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteTo(results.Params))
			}
		}
	}
}
