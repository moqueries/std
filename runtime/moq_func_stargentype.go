// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package runtime

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that runtime.Func_starGenType is mocked
// completely
var _ Func_starGenType = (*MoqFunc_starGenType_mock)(nil)

// Func_starGenType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Func_starGenType interface {
	Name() string
	Entry() uintptr
	FileLine(pc uintptr) (file string, line int)
}

// MoqFunc_starGenType holds the state of a moq of the Func_starGenType type
type MoqFunc_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqFunc_starGenType_mock

	ResultsByParams_Name     []MoqFunc_starGenType_Name_resultsByParams
	ResultsByParams_Entry    []MoqFunc_starGenType_Entry_resultsByParams
	ResultsByParams_FileLine []MoqFunc_starGenType_FileLine_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Name     struct{}
			Entry    struct{}
			FileLine struct {
				Pc moq.ParamIndexing
			}
		}
	}
	// MoqFunc_starGenType_mock isolates the mock interface of the Func_starGenType
}

// type
type MoqFunc_starGenType_mock struct {
	Moq *MoqFunc_starGenType
}

// MoqFunc_starGenType_recorder isolates the recorder interface of the
// Func_starGenType type
type MoqFunc_starGenType_recorder struct {
	Moq *MoqFunc_starGenType
}

// MoqFunc_starGenType_Name_params holds the params of the Func_starGenType
// type
type MoqFunc_starGenType_Name_params struct{}

// MoqFunc_starGenType_Name_paramsKey holds the map key params of the
// Func_starGenType type
type MoqFunc_starGenType_Name_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFunc_starGenType_Name_resultsByParams contains the results for a given
// set of parameters for the Func_starGenType type
type MoqFunc_starGenType_Name_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFunc_starGenType_Name_paramsKey]*MoqFunc_starGenType_Name_results
}

// MoqFunc_starGenType_Name_doFn defines the type of function needed when
// calling AndDo for the Func_starGenType type
type MoqFunc_starGenType_Name_doFn func()

// MoqFunc_starGenType_Name_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Func_starGenType type
type MoqFunc_starGenType_Name_doReturnFn func() string

// MoqFunc_starGenType_Name_results holds the results of the Func_starGenType
// type
type MoqFunc_starGenType_Name_results struct {
	Params  MoqFunc_starGenType_Name_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqFunc_starGenType_Name_doFn
		DoReturnFn MoqFunc_starGenType_Name_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFunc_starGenType_Name_fnRecorder routes recorded function calls to the
// MoqFunc_starGenType moq
type MoqFunc_starGenType_Name_fnRecorder struct {
	Params    MoqFunc_starGenType_Name_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFunc_starGenType_Name_results
	Moq       *MoqFunc_starGenType
}

// MoqFunc_starGenType_Name_anyParams isolates the any params functions of the
// Func_starGenType type
type MoqFunc_starGenType_Name_anyParams struct {
	Recorder *MoqFunc_starGenType_Name_fnRecorder
}

// MoqFunc_starGenType_Entry_params holds the params of the Func_starGenType
// type
type MoqFunc_starGenType_Entry_params struct{}

// MoqFunc_starGenType_Entry_paramsKey holds the map key params of the
// Func_starGenType type
type MoqFunc_starGenType_Entry_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFunc_starGenType_Entry_resultsByParams contains the results for a given
// set of parameters for the Func_starGenType type
type MoqFunc_starGenType_Entry_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFunc_starGenType_Entry_paramsKey]*MoqFunc_starGenType_Entry_results
}

// MoqFunc_starGenType_Entry_doFn defines the type of function needed when
// calling AndDo for the Func_starGenType type
type MoqFunc_starGenType_Entry_doFn func()

// MoqFunc_starGenType_Entry_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Func_starGenType type
type MoqFunc_starGenType_Entry_doReturnFn func() uintptr

// MoqFunc_starGenType_Entry_results holds the results of the Func_starGenType
// type
type MoqFunc_starGenType_Entry_results struct {
	Params  MoqFunc_starGenType_Entry_params
	Results []struct {
		Values *struct {
			Result1 uintptr
		}
		Sequence   uint32
		DoFn       MoqFunc_starGenType_Entry_doFn
		DoReturnFn MoqFunc_starGenType_Entry_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFunc_starGenType_Entry_fnRecorder routes recorded function calls to the
// MoqFunc_starGenType moq
type MoqFunc_starGenType_Entry_fnRecorder struct {
	Params    MoqFunc_starGenType_Entry_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFunc_starGenType_Entry_results
	Moq       *MoqFunc_starGenType
}

// MoqFunc_starGenType_Entry_anyParams isolates the any params functions of the
// Func_starGenType type
type MoqFunc_starGenType_Entry_anyParams struct {
	Recorder *MoqFunc_starGenType_Entry_fnRecorder
}

// MoqFunc_starGenType_FileLine_params holds the params of the Func_starGenType
// type
type MoqFunc_starGenType_FileLine_params struct{ Pc uintptr }

// MoqFunc_starGenType_FileLine_paramsKey holds the map key params of the
// Func_starGenType type
type MoqFunc_starGenType_FileLine_paramsKey struct {
	Params struct{ Pc uintptr }
	Hashes struct{ Pc hash.Hash }
}

// MoqFunc_starGenType_FileLine_resultsByParams contains the results for a
// given set of parameters for the Func_starGenType type
type MoqFunc_starGenType_FileLine_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFunc_starGenType_FileLine_paramsKey]*MoqFunc_starGenType_FileLine_results
}

// MoqFunc_starGenType_FileLine_doFn defines the type of function needed when
// calling AndDo for the Func_starGenType type
type MoqFunc_starGenType_FileLine_doFn func(pc uintptr)

// MoqFunc_starGenType_FileLine_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Func_starGenType type
type MoqFunc_starGenType_FileLine_doReturnFn func(pc uintptr) (file string, line int)

// MoqFunc_starGenType_FileLine_results holds the results of the
// Func_starGenType type
type MoqFunc_starGenType_FileLine_results struct {
	Params  MoqFunc_starGenType_FileLine_params
	Results []struct {
		Values *struct {
			File string
			Line int
		}
		Sequence   uint32
		DoFn       MoqFunc_starGenType_FileLine_doFn
		DoReturnFn MoqFunc_starGenType_FileLine_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFunc_starGenType_FileLine_fnRecorder routes recorded function calls to
// the MoqFunc_starGenType moq
type MoqFunc_starGenType_FileLine_fnRecorder struct {
	Params    MoqFunc_starGenType_FileLine_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFunc_starGenType_FileLine_results
	Moq       *MoqFunc_starGenType
}

// MoqFunc_starGenType_FileLine_anyParams isolates the any params functions of
// the Func_starGenType type
type MoqFunc_starGenType_FileLine_anyParams struct {
	Recorder *MoqFunc_starGenType_FileLine_fnRecorder
}

// NewMoqFunc_starGenType creates a new moq of the Func_starGenType type
func NewMoqFunc_starGenType(scene *moq.Scene, config *moq.Config) *MoqFunc_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqFunc_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqFunc_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Name     struct{}
				Entry    struct{}
				FileLine struct {
					Pc moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Name     struct{}
			Entry    struct{}
			FileLine struct {
				Pc moq.ParamIndexing
			}
		}{
			Name:  struct{}{},
			Entry: struct{}{},
			FileLine: struct {
				Pc moq.ParamIndexing
			}{
				Pc: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Func_starGenType type
func (m *MoqFunc_starGenType) Mock() *MoqFunc_starGenType_mock { return m.Moq }

func (m *MoqFunc_starGenType_mock) Name() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqFunc_starGenType_Name_params{}
	var results *MoqFunc_starGenType_Name_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Name {
		paramsKey := m.Moq.ParamsKey_Name(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Name(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Name(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Name(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqFunc_starGenType_mock) Entry() (result1 uintptr) {
	m.Moq.Scene.T.Helper()
	params := MoqFunc_starGenType_Entry_params{}
	var results *MoqFunc_starGenType_Entry_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Entry {
		paramsKey := m.Moq.ParamsKey_Entry(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Entry(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Entry(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Entry(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqFunc_starGenType_mock) FileLine(pc uintptr) (file string, line int) {
	m.Moq.Scene.T.Helper()
	params := MoqFunc_starGenType_FileLine_params{
		Pc: pc,
	}
	var results *MoqFunc_starGenType_FileLine_results
	for _, resultsByParams := range m.Moq.ResultsByParams_FileLine {
		paramsKey := m.Moq.ParamsKey_FileLine(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_FileLine(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_FileLine(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_FileLine(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(pc)
	}

	if result.Values != nil {
		file = result.Values.File
		line = result.Values.Line
	}
	if result.DoReturnFn != nil {
		file, line = result.DoReturnFn(pc)
	}
	return
}

// OnCall returns the recorder implementation of the Func_starGenType type
func (m *MoqFunc_starGenType) OnCall() *MoqFunc_starGenType_recorder {
	return &MoqFunc_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqFunc_starGenType_recorder) Name() *MoqFunc_starGenType_Name_fnRecorder {
	return &MoqFunc_starGenType_Name_fnRecorder{
		Params:   MoqFunc_starGenType_Name_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFunc_starGenType_Name_fnRecorder) Any() *MoqFunc_starGenType_Name_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	return &MoqFunc_starGenType_Name_anyParams{Recorder: r}
}

func (r *MoqFunc_starGenType_Name_fnRecorder) Seq() *MoqFunc_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFunc_starGenType_Name_fnRecorder) NoSeq() *MoqFunc_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Name(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFunc_starGenType_Name_fnRecorder) ReturnResults(result1 string) *MoqFunc_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqFunc_starGenType_Name_doFn
		DoReturnFn MoqFunc_starGenType_Name_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFunc_starGenType_Name_fnRecorder) AndDo(fn MoqFunc_starGenType_Name_doFn) *MoqFunc_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFunc_starGenType_Name_fnRecorder) DoReturnResults(fn MoqFunc_starGenType_Name_doReturnFn) *MoqFunc_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqFunc_starGenType_Name_doFn
		DoReturnFn MoqFunc_starGenType_Name_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFunc_starGenType_Name_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFunc_starGenType_Name_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Name {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFunc_starGenType_Name_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFunc_starGenType_Name_paramsKey]*MoqFunc_starGenType_Name_results{},
		}
		r.Moq.ResultsByParams_Name = append(r.Moq.ResultsByParams_Name, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Name) {
			copy(r.Moq.ResultsByParams_Name[insertAt+1:], r.Moq.ResultsByParams_Name[insertAt:0])
			r.Moq.ResultsByParams_Name[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Name(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFunc_starGenType_Name_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFunc_starGenType_Name_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFunc_starGenType_Name_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqFunc_starGenType_Name_doFn
				DoReturnFn MoqFunc_starGenType_Name_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFunc_starGenType) PrettyParams_Name(params MoqFunc_starGenType_Name_params) string {
	return fmt.Sprintf("Name()")
}

func (m *MoqFunc_starGenType) ParamsKey_Name(params MoqFunc_starGenType_Name_params, anyParams uint64) MoqFunc_starGenType_Name_paramsKey {
	m.Scene.T.Helper()
	return MoqFunc_starGenType_Name_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFunc_starGenType_recorder) Entry() *MoqFunc_starGenType_Entry_fnRecorder {
	return &MoqFunc_starGenType_Entry_fnRecorder{
		Params:   MoqFunc_starGenType_Entry_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFunc_starGenType_Entry_fnRecorder) Any() *MoqFunc_starGenType_Entry_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Entry(r.Params))
		return nil
	}
	return &MoqFunc_starGenType_Entry_anyParams{Recorder: r}
}

func (r *MoqFunc_starGenType_Entry_fnRecorder) Seq() *MoqFunc_starGenType_Entry_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Entry(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFunc_starGenType_Entry_fnRecorder) NoSeq() *MoqFunc_starGenType_Entry_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Entry(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFunc_starGenType_Entry_fnRecorder) ReturnResults(result1 uintptr) *MoqFunc_starGenType_Entry_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uintptr
		}
		Sequence   uint32
		DoFn       MoqFunc_starGenType_Entry_doFn
		DoReturnFn MoqFunc_starGenType_Entry_doReturnFn
	}{
		Values: &struct {
			Result1 uintptr
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFunc_starGenType_Entry_fnRecorder) AndDo(fn MoqFunc_starGenType_Entry_doFn) *MoqFunc_starGenType_Entry_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFunc_starGenType_Entry_fnRecorder) DoReturnResults(fn MoqFunc_starGenType_Entry_doReturnFn) *MoqFunc_starGenType_Entry_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uintptr
		}
		Sequence   uint32
		DoFn       MoqFunc_starGenType_Entry_doFn
		DoReturnFn MoqFunc_starGenType_Entry_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFunc_starGenType_Entry_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFunc_starGenType_Entry_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Entry {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFunc_starGenType_Entry_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFunc_starGenType_Entry_paramsKey]*MoqFunc_starGenType_Entry_results{},
		}
		r.Moq.ResultsByParams_Entry = append(r.Moq.ResultsByParams_Entry, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Entry) {
			copy(r.Moq.ResultsByParams_Entry[insertAt+1:], r.Moq.ResultsByParams_Entry[insertAt:0])
			r.Moq.ResultsByParams_Entry[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Entry(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFunc_starGenType_Entry_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFunc_starGenType_Entry_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFunc_starGenType_Entry_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 uintptr
				}
				Sequence   uint32
				DoFn       MoqFunc_starGenType_Entry_doFn
				DoReturnFn MoqFunc_starGenType_Entry_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFunc_starGenType) PrettyParams_Entry(params MoqFunc_starGenType_Entry_params) string {
	return fmt.Sprintf("Entry()")
}

func (m *MoqFunc_starGenType) ParamsKey_Entry(params MoqFunc_starGenType_Entry_params, anyParams uint64) MoqFunc_starGenType_Entry_paramsKey {
	m.Scene.T.Helper()
	return MoqFunc_starGenType_Entry_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFunc_starGenType_recorder) FileLine(pc uintptr) *MoqFunc_starGenType_FileLine_fnRecorder {
	return &MoqFunc_starGenType_FileLine_fnRecorder{
		Params: MoqFunc_starGenType_FileLine_params{
			Pc: pc,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFunc_starGenType_FileLine_fnRecorder) Any() *MoqFunc_starGenType_FileLine_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FileLine(r.Params))
		return nil
	}
	return &MoqFunc_starGenType_FileLine_anyParams{Recorder: r}
}

func (a *MoqFunc_starGenType_FileLine_anyParams) Pc() *MoqFunc_starGenType_FileLine_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqFunc_starGenType_FileLine_fnRecorder) Seq() *MoqFunc_starGenType_FileLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FileLine(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFunc_starGenType_FileLine_fnRecorder) NoSeq() *MoqFunc_starGenType_FileLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FileLine(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFunc_starGenType_FileLine_fnRecorder) ReturnResults(file string, line int) *MoqFunc_starGenType_FileLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			File string
			Line int
		}
		Sequence   uint32
		DoFn       MoqFunc_starGenType_FileLine_doFn
		DoReturnFn MoqFunc_starGenType_FileLine_doReturnFn
	}{
		Values: &struct {
			File string
			Line int
		}{
			File: file,
			Line: line,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFunc_starGenType_FileLine_fnRecorder) AndDo(fn MoqFunc_starGenType_FileLine_doFn) *MoqFunc_starGenType_FileLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFunc_starGenType_FileLine_fnRecorder) DoReturnResults(fn MoqFunc_starGenType_FileLine_doReturnFn) *MoqFunc_starGenType_FileLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			File string
			Line int
		}
		Sequence   uint32
		DoFn       MoqFunc_starGenType_FileLine_doFn
		DoReturnFn MoqFunc_starGenType_FileLine_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFunc_starGenType_FileLine_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFunc_starGenType_FileLine_resultsByParams
	for n, res := range r.Moq.ResultsByParams_FileLine {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFunc_starGenType_FileLine_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFunc_starGenType_FileLine_paramsKey]*MoqFunc_starGenType_FileLine_results{},
		}
		r.Moq.ResultsByParams_FileLine = append(r.Moq.ResultsByParams_FileLine, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_FileLine) {
			copy(r.Moq.ResultsByParams_FileLine[insertAt+1:], r.Moq.ResultsByParams_FileLine[insertAt:0])
			r.Moq.ResultsByParams_FileLine[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_FileLine(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFunc_starGenType_FileLine_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFunc_starGenType_FileLine_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFunc_starGenType_FileLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					File string
					Line int
				}
				Sequence   uint32
				DoFn       MoqFunc_starGenType_FileLine_doFn
				DoReturnFn MoqFunc_starGenType_FileLine_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFunc_starGenType) PrettyParams_FileLine(params MoqFunc_starGenType_FileLine_params) string {
	return fmt.Sprintf("FileLine(%#v)", params.Pc)
}

func (m *MoqFunc_starGenType) ParamsKey_FileLine(params MoqFunc_starGenType_FileLine_params, anyParams uint64) MoqFunc_starGenType_FileLine_paramsKey {
	m.Scene.T.Helper()
	var pcUsed uintptr
	var pcUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.FileLine.Pc == moq.ParamIndexByValue {
			pcUsed = params.Pc
		} else {
			pcUsedHash = hash.DeepHash(params.Pc)
		}
	}
	return MoqFunc_starGenType_FileLine_paramsKey{
		Params: struct{ Pc uintptr }{
			Pc: pcUsed,
		},
		Hashes: struct{ Pc hash.Hash }{
			Pc: pcUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqFunc_starGenType) Reset() {
	m.ResultsByParams_Name = nil
	m.ResultsByParams_Entry = nil
	m.ResultsByParams_FileLine = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqFunc_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Name {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Name(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Entry {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Entry(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_FileLine {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_FileLine(results.Params))
			}
		}
	}
}
