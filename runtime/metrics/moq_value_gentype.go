// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package metrics

import (
	"fmt"
	"math/bits"
	"runtime/metrics"
	"sync/atomic"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that metrics.Value_genType is mocked
// completely
var _ Value_genType = (*MoqValue_genType_mock)(nil)

// Value_genType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Value_genType interface {
	Kind() metrics.ValueKind
	Uint64() uint64
	Float64() float64
	Float64Histogram() *metrics.Float64Histogram
}

// MoqValue_genType holds the state of a moq of the Value_genType type
type MoqValue_genType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqValue_genType_mock

	ResultsByParams_Kind             []MoqValue_genType_Kind_resultsByParams
	ResultsByParams_Uint64           []MoqValue_genType_Uint64_resultsByParams
	ResultsByParams_Float64          []MoqValue_genType_Float64_resultsByParams
	ResultsByParams_Float64Histogram []MoqValue_genType_Float64Histogram_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Kind             struct{}
			Uint64           struct{}
			Float64          struct{}
			Float64Histogram struct{}
		}
	}
}

// MoqValue_genType_mock isolates the mock interface of the Value_genType type
type MoqValue_genType_mock struct {
	Moq *MoqValue_genType
}

// MoqValue_genType_recorder isolates the recorder interface of the
// Value_genType type
type MoqValue_genType_recorder struct {
	Moq *MoqValue_genType
}

// MoqValue_genType_Kind_params holds the params of the Value_genType type
type MoqValue_genType_Kind_params struct{}

// MoqValue_genType_Kind_paramsKey holds the map key params of the
// Value_genType type
type MoqValue_genType_Kind_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqValue_genType_Kind_resultsByParams contains the results for a given set
// of parameters for the Value_genType type
type MoqValue_genType_Kind_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqValue_genType_Kind_paramsKey]*MoqValue_genType_Kind_results
}

// MoqValue_genType_Kind_doFn defines the type of function needed when calling
// AndDo for the Value_genType type
type MoqValue_genType_Kind_doFn func()

// MoqValue_genType_Kind_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Value_genType type
type MoqValue_genType_Kind_doReturnFn func() metrics.ValueKind

// MoqValue_genType_Kind_results holds the results of the Value_genType type
type MoqValue_genType_Kind_results struct {
	Params  MoqValue_genType_Kind_params
	Results []struct {
		Values *struct {
			Result1 metrics.ValueKind
		}
		Sequence   uint32
		DoFn       MoqValue_genType_Kind_doFn
		DoReturnFn MoqValue_genType_Kind_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqValue_genType_Kind_fnRecorder routes recorded function calls to the
// MoqValue_genType moq
type MoqValue_genType_Kind_fnRecorder struct {
	Params    MoqValue_genType_Kind_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqValue_genType_Kind_results
	Moq       *MoqValue_genType
}

// MoqValue_genType_Kind_anyParams isolates the any params functions of the
// Value_genType type
type MoqValue_genType_Kind_anyParams struct {
	Recorder *MoqValue_genType_Kind_fnRecorder
}

// MoqValue_genType_Uint64_params holds the params of the Value_genType type
type MoqValue_genType_Uint64_params struct{}

// MoqValue_genType_Uint64_paramsKey holds the map key params of the
// Value_genType type
type MoqValue_genType_Uint64_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqValue_genType_Uint64_resultsByParams contains the results for a given set
// of parameters for the Value_genType type
type MoqValue_genType_Uint64_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqValue_genType_Uint64_paramsKey]*MoqValue_genType_Uint64_results
}

// MoqValue_genType_Uint64_doFn defines the type of function needed when
// calling AndDo for the Value_genType type
type MoqValue_genType_Uint64_doFn func()

// MoqValue_genType_Uint64_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Value_genType type
type MoqValue_genType_Uint64_doReturnFn func() uint64

// MoqValue_genType_Uint64_results holds the results of the Value_genType type
type MoqValue_genType_Uint64_results struct {
	Params  MoqValue_genType_Uint64_params
	Results []struct {
		Values *struct {
			Result1 uint64
		}
		Sequence   uint32
		DoFn       MoqValue_genType_Uint64_doFn
		DoReturnFn MoqValue_genType_Uint64_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqValue_genType_Uint64_fnRecorder routes recorded function calls to the
// MoqValue_genType moq
type MoqValue_genType_Uint64_fnRecorder struct {
	Params    MoqValue_genType_Uint64_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqValue_genType_Uint64_results
	Moq       *MoqValue_genType
}

// MoqValue_genType_Uint64_anyParams isolates the any params functions of the
// Value_genType type
type MoqValue_genType_Uint64_anyParams struct {
	Recorder *MoqValue_genType_Uint64_fnRecorder
}

// MoqValue_genType_Float64_params holds the params of the Value_genType type
type MoqValue_genType_Float64_params struct{}

// MoqValue_genType_Float64_paramsKey holds the map key params of the
// Value_genType type
type MoqValue_genType_Float64_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqValue_genType_Float64_resultsByParams contains the results for a given
// set of parameters for the Value_genType type
type MoqValue_genType_Float64_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqValue_genType_Float64_paramsKey]*MoqValue_genType_Float64_results
}

// MoqValue_genType_Float64_doFn defines the type of function needed when
// calling AndDo for the Value_genType type
type MoqValue_genType_Float64_doFn func()

// MoqValue_genType_Float64_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Value_genType type
type MoqValue_genType_Float64_doReturnFn func() float64

// MoqValue_genType_Float64_results holds the results of the Value_genType type
type MoqValue_genType_Float64_results struct {
	Params  MoqValue_genType_Float64_params
	Results []struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqValue_genType_Float64_doFn
		DoReturnFn MoqValue_genType_Float64_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqValue_genType_Float64_fnRecorder routes recorded function calls to the
// MoqValue_genType moq
type MoqValue_genType_Float64_fnRecorder struct {
	Params    MoqValue_genType_Float64_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqValue_genType_Float64_results
	Moq       *MoqValue_genType
}

// MoqValue_genType_Float64_anyParams isolates the any params functions of the
// Value_genType type
type MoqValue_genType_Float64_anyParams struct {
	Recorder *MoqValue_genType_Float64_fnRecorder
}

// MoqValue_genType_Float64Histogram_params holds the params of the
// Value_genType type
type MoqValue_genType_Float64Histogram_params struct{}

// MoqValue_genType_Float64Histogram_paramsKey holds the map key params of the
// Value_genType type
type MoqValue_genType_Float64Histogram_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqValue_genType_Float64Histogram_resultsByParams contains the results for a
// given set of parameters for the Value_genType type
type MoqValue_genType_Float64Histogram_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqValue_genType_Float64Histogram_paramsKey]*MoqValue_genType_Float64Histogram_results
}

// MoqValue_genType_Float64Histogram_doFn defines the type of function needed
// when calling AndDo for the Value_genType type
type MoqValue_genType_Float64Histogram_doFn func()

// MoqValue_genType_Float64Histogram_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Value_genType type
type MoqValue_genType_Float64Histogram_doReturnFn func() *metrics.Float64Histogram

// MoqValue_genType_Float64Histogram_results holds the results of the
// Value_genType type
type MoqValue_genType_Float64Histogram_results struct {
	Params  MoqValue_genType_Float64Histogram_params
	Results []struct {
		Values *struct {
			Result1 *metrics.Float64Histogram
		}
		Sequence   uint32
		DoFn       MoqValue_genType_Float64Histogram_doFn
		DoReturnFn MoqValue_genType_Float64Histogram_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqValue_genType_Float64Histogram_fnRecorder routes recorded function calls
// to the MoqValue_genType moq
type MoqValue_genType_Float64Histogram_fnRecorder struct {
	Params    MoqValue_genType_Float64Histogram_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqValue_genType_Float64Histogram_results
	Moq       *MoqValue_genType
}

// MoqValue_genType_Float64Histogram_anyParams isolates the any params
// functions of the Value_genType type
type MoqValue_genType_Float64Histogram_anyParams struct {
	Recorder *MoqValue_genType_Float64Histogram_fnRecorder
}

// NewMoqValue_genType creates a new moq of the Value_genType type
func NewMoqValue_genType(scene *moq.Scene, config *moq.Config) *MoqValue_genType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqValue_genType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqValue_genType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Kind             struct{}
				Uint64           struct{}
				Float64          struct{}
				Float64Histogram struct{}
			}
		}{ParameterIndexing: struct {
			Kind             struct{}
			Uint64           struct{}
			Float64          struct{}
			Float64Histogram struct{}
		}{
			Kind:             struct{}{},
			Uint64:           struct{}{},
			Float64:          struct{}{},
			Float64Histogram: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Value_genType type
func (m *MoqValue_genType) Mock() *MoqValue_genType_mock { return m.Moq }

func (m *MoqValue_genType_mock) Kind() (result1 metrics.ValueKind) {
	m.Moq.Scene.T.Helper()
	params := MoqValue_genType_Kind_params{}
	var results *MoqValue_genType_Kind_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Kind {
		paramsKey := m.Moq.ParamsKey_Kind(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Kind(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Kind(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Kind(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqValue_genType_mock) Uint64() (result1 uint64) {
	m.Moq.Scene.T.Helper()
	params := MoqValue_genType_Uint64_params{}
	var results *MoqValue_genType_Uint64_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Uint64 {
		paramsKey := m.Moq.ParamsKey_Uint64(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Uint64(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Uint64(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Uint64(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqValue_genType_mock) Float64() (result1 float64) {
	m.Moq.Scene.T.Helper()
	params := MoqValue_genType_Float64_params{}
	var results *MoqValue_genType_Float64_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Float64 {
		paramsKey := m.Moq.ParamsKey_Float64(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Float64(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Float64(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Float64(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqValue_genType_mock) Float64Histogram() (result1 *metrics.Float64Histogram) {
	m.Moq.Scene.T.Helper()
	params := MoqValue_genType_Float64Histogram_params{}
	var results *MoqValue_genType_Float64Histogram_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Float64Histogram {
		paramsKey := m.Moq.ParamsKey_Float64Histogram(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Float64Histogram(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Float64Histogram(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Float64Histogram(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Value_genType type
func (m *MoqValue_genType) OnCall() *MoqValue_genType_recorder {
	return &MoqValue_genType_recorder{
		Moq: m,
	}
}

func (m *MoqValue_genType_recorder) Kind() *MoqValue_genType_Kind_fnRecorder {
	return &MoqValue_genType_Kind_fnRecorder{
		Params:   MoqValue_genType_Kind_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqValue_genType_Kind_fnRecorder) Any() *MoqValue_genType_Kind_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Kind(r.Params))
		return nil
	}
	return &MoqValue_genType_Kind_anyParams{Recorder: r}
}

func (r *MoqValue_genType_Kind_fnRecorder) Seq() *MoqValue_genType_Kind_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Kind(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqValue_genType_Kind_fnRecorder) NoSeq() *MoqValue_genType_Kind_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Kind(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqValue_genType_Kind_fnRecorder) ReturnResults(result1 metrics.ValueKind) *MoqValue_genType_Kind_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 metrics.ValueKind
		}
		Sequence   uint32
		DoFn       MoqValue_genType_Kind_doFn
		DoReturnFn MoqValue_genType_Kind_doReturnFn
	}{
		Values: &struct {
			Result1 metrics.ValueKind
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqValue_genType_Kind_fnRecorder) AndDo(fn MoqValue_genType_Kind_doFn) *MoqValue_genType_Kind_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqValue_genType_Kind_fnRecorder) DoReturnResults(fn MoqValue_genType_Kind_doReturnFn) *MoqValue_genType_Kind_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 metrics.ValueKind
		}
		Sequence   uint32
		DoFn       MoqValue_genType_Kind_doFn
		DoReturnFn MoqValue_genType_Kind_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqValue_genType_Kind_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqValue_genType_Kind_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Kind {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqValue_genType_Kind_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqValue_genType_Kind_paramsKey]*MoqValue_genType_Kind_results{},
		}
		r.Moq.ResultsByParams_Kind = append(r.Moq.ResultsByParams_Kind, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Kind) {
			copy(r.Moq.ResultsByParams_Kind[insertAt+1:], r.Moq.ResultsByParams_Kind[insertAt:0])
			r.Moq.ResultsByParams_Kind[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Kind(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqValue_genType_Kind_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqValue_genType_Kind_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqValue_genType_Kind_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 metrics.ValueKind
				}
				Sequence   uint32
				DoFn       MoqValue_genType_Kind_doFn
				DoReturnFn MoqValue_genType_Kind_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqValue_genType) PrettyParams_Kind(params MoqValue_genType_Kind_params) string {
	return fmt.Sprintf("Kind()")
}

func (m *MoqValue_genType) ParamsKey_Kind(params MoqValue_genType_Kind_params, anyParams uint64) MoqValue_genType_Kind_paramsKey {
	m.Scene.T.Helper()
	return MoqValue_genType_Kind_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqValue_genType_recorder) Uint64() *MoqValue_genType_Uint64_fnRecorder {
	return &MoqValue_genType_Uint64_fnRecorder{
		Params:   MoqValue_genType_Uint64_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqValue_genType_Uint64_fnRecorder) Any() *MoqValue_genType_Uint64_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint64(r.Params))
		return nil
	}
	return &MoqValue_genType_Uint64_anyParams{Recorder: r}
}

func (r *MoqValue_genType_Uint64_fnRecorder) Seq() *MoqValue_genType_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint64(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqValue_genType_Uint64_fnRecorder) NoSeq() *MoqValue_genType_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Uint64(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqValue_genType_Uint64_fnRecorder) ReturnResults(result1 uint64) *MoqValue_genType_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint64
		}
		Sequence   uint32
		DoFn       MoqValue_genType_Uint64_doFn
		DoReturnFn MoqValue_genType_Uint64_doReturnFn
	}{
		Values: &struct {
			Result1 uint64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqValue_genType_Uint64_fnRecorder) AndDo(fn MoqValue_genType_Uint64_doFn) *MoqValue_genType_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqValue_genType_Uint64_fnRecorder) DoReturnResults(fn MoqValue_genType_Uint64_doReturnFn) *MoqValue_genType_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 uint64
		}
		Sequence   uint32
		DoFn       MoqValue_genType_Uint64_doFn
		DoReturnFn MoqValue_genType_Uint64_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqValue_genType_Uint64_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqValue_genType_Uint64_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Uint64 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqValue_genType_Uint64_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqValue_genType_Uint64_paramsKey]*MoqValue_genType_Uint64_results{},
		}
		r.Moq.ResultsByParams_Uint64 = append(r.Moq.ResultsByParams_Uint64, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Uint64) {
			copy(r.Moq.ResultsByParams_Uint64[insertAt+1:], r.Moq.ResultsByParams_Uint64[insertAt:0])
			r.Moq.ResultsByParams_Uint64[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Uint64(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqValue_genType_Uint64_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqValue_genType_Uint64_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqValue_genType_Uint64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 uint64
				}
				Sequence   uint32
				DoFn       MoqValue_genType_Uint64_doFn
				DoReturnFn MoqValue_genType_Uint64_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqValue_genType) PrettyParams_Uint64(params MoqValue_genType_Uint64_params) string {
	return fmt.Sprintf("Uint64()")
}

func (m *MoqValue_genType) ParamsKey_Uint64(params MoqValue_genType_Uint64_params, anyParams uint64) MoqValue_genType_Uint64_paramsKey {
	m.Scene.T.Helper()
	return MoqValue_genType_Uint64_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqValue_genType_recorder) Float64() *MoqValue_genType_Float64_fnRecorder {
	return &MoqValue_genType_Float64_fnRecorder{
		Params:   MoqValue_genType_Float64_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqValue_genType_Float64_fnRecorder) Any() *MoqValue_genType_Float64_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Float64(r.Params))
		return nil
	}
	return &MoqValue_genType_Float64_anyParams{Recorder: r}
}

func (r *MoqValue_genType_Float64_fnRecorder) Seq() *MoqValue_genType_Float64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Float64(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqValue_genType_Float64_fnRecorder) NoSeq() *MoqValue_genType_Float64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Float64(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqValue_genType_Float64_fnRecorder) ReturnResults(result1 float64) *MoqValue_genType_Float64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqValue_genType_Float64_doFn
		DoReturnFn MoqValue_genType_Float64_doReturnFn
	}{
		Values: &struct {
			Result1 float64
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqValue_genType_Float64_fnRecorder) AndDo(fn MoqValue_genType_Float64_doFn) *MoqValue_genType_Float64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqValue_genType_Float64_fnRecorder) DoReturnResults(fn MoqValue_genType_Float64_doReturnFn) *MoqValue_genType_Float64_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 float64
		}
		Sequence   uint32
		DoFn       MoqValue_genType_Float64_doFn
		DoReturnFn MoqValue_genType_Float64_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqValue_genType_Float64_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqValue_genType_Float64_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Float64 {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqValue_genType_Float64_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqValue_genType_Float64_paramsKey]*MoqValue_genType_Float64_results{},
		}
		r.Moq.ResultsByParams_Float64 = append(r.Moq.ResultsByParams_Float64, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Float64) {
			copy(r.Moq.ResultsByParams_Float64[insertAt+1:], r.Moq.ResultsByParams_Float64[insertAt:0])
			r.Moq.ResultsByParams_Float64[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Float64(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqValue_genType_Float64_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqValue_genType_Float64_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqValue_genType_Float64_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 float64
				}
				Sequence   uint32
				DoFn       MoqValue_genType_Float64_doFn
				DoReturnFn MoqValue_genType_Float64_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqValue_genType) PrettyParams_Float64(params MoqValue_genType_Float64_params) string {
	return fmt.Sprintf("Float64()")
}

func (m *MoqValue_genType) ParamsKey_Float64(params MoqValue_genType_Float64_params, anyParams uint64) MoqValue_genType_Float64_paramsKey {
	m.Scene.T.Helper()
	return MoqValue_genType_Float64_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqValue_genType_recorder) Float64Histogram() *MoqValue_genType_Float64Histogram_fnRecorder {
	return &MoqValue_genType_Float64Histogram_fnRecorder{
		Params:   MoqValue_genType_Float64Histogram_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqValue_genType_Float64Histogram_fnRecorder) Any() *MoqValue_genType_Float64Histogram_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Float64Histogram(r.Params))
		return nil
	}
	return &MoqValue_genType_Float64Histogram_anyParams{Recorder: r}
}

func (r *MoqValue_genType_Float64Histogram_fnRecorder) Seq() *MoqValue_genType_Float64Histogram_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Float64Histogram(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqValue_genType_Float64Histogram_fnRecorder) NoSeq() *MoqValue_genType_Float64Histogram_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Float64Histogram(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqValue_genType_Float64Histogram_fnRecorder) ReturnResults(result1 *metrics.Float64Histogram) *MoqValue_genType_Float64Histogram_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *metrics.Float64Histogram
		}
		Sequence   uint32
		DoFn       MoqValue_genType_Float64Histogram_doFn
		DoReturnFn MoqValue_genType_Float64Histogram_doReturnFn
	}{
		Values: &struct {
			Result1 *metrics.Float64Histogram
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqValue_genType_Float64Histogram_fnRecorder) AndDo(fn MoqValue_genType_Float64Histogram_doFn) *MoqValue_genType_Float64Histogram_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqValue_genType_Float64Histogram_fnRecorder) DoReturnResults(fn MoqValue_genType_Float64Histogram_doReturnFn) *MoqValue_genType_Float64Histogram_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *metrics.Float64Histogram
		}
		Sequence   uint32
		DoFn       MoqValue_genType_Float64Histogram_doFn
		DoReturnFn MoqValue_genType_Float64Histogram_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqValue_genType_Float64Histogram_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqValue_genType_Float64Histogram_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Float64Histogram {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqValue_genType_Float64Histogram_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqValue_genType_Float64Histogram_paramsKey]*MoqValue_genType_Float64Histogram_results{},
		}
		r.Moq.ResultsByParams_Float64Histogram = append(r.Moq.ResultsByParams_Float64Histogram, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Float64Histogram) {
			copy(r.Moq.ResultsByParams_Float64Histogram[insertAt+1:], r.Moq.ResultsByParams_Float64Histogram[insertAt:0])
			r.Moq.ResultsByParams_Float64Histogram[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Float64Histogram(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqValue_genType_Float64Histogram_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqValue_genType_Float64Histogram_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqValue_genType_Float64Histogram_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *metrics.Float64Histogram
				}
				Sequence   uint32
				DoFn       MoqValue_genType_Float64Histogram_doFn
				DoReturnFn MoqValue_genType_Float64Histogram_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqValue_genType) PrettyParams_Float64Histogram(params MoqValue_genType_Float64Histogram_params) string {
	return fmt.Sprintf("Float64Histogram()")
}

func (m *MoqValue_genType) ParamsKey_Float64Histogram(params MoqValue_genType_Float64Histogram_params, anyParams uint64) MoqValue_genType_Float64Histogram_paramsKey {
	m.Scene.T.Helper()
	return MoqValue_genType_Float64Histogram_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqValue_genType) Reset() {
	m.ResultsByParams_Kind = nil
	m.ResultsByParams_Uint64 = nil
	m.ResultsByParams_Float64 = nil
	m.ResultsByParams_Float64Histogram = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqValue_genType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Kind {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Kind(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Uint64 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Uint64(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Float64 {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Float64(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Float64Histogram {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Float64Histogram(results.Params))
			}
		}
	}
}
