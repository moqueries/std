// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package bufio

import (
	"fmt"
	"io"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that bufio.Reader_starGenType is mocked
// completely
var _ Reader_starGenType = (*MoqReader_starGenType_mock)(nil)

// Reader_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Reader_starGenType interface {
	Size() int
	Reset(r io.Reader)
	Peek(n int) ([]byte, error)
	Discard(n int) (discarded int, err error)
	Read(p []byte) (n int, err error)
	ReadByte() (byte, error)
	UnreadByte() error
	ReadRune() (r rune, size int, err error)
	UnreadRune() error
	Buffered() int
	ReadSlice(delim byte) (line []byte, err error)
	ReadLine() (line []byte, isPrefix bool, err error)
	ReadBytes(delim byte) ([]byte, error)
	ReadString(delim byte) (string, error)
	WriteTo(w io.Writer) (n int64, err error)
}

// MoqReader_starGenType holds the state of a moq of the Reader_starGenType
// type
type MoqReader_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqReader_starGenType_mock

	ResultsByParams_Size       []MoqReader_starGenType_Size_resultsByParams
	ResultsByParams_Reset      []MoqReader_starGenType_Reset_resultsByParams
	ResultsByParams_Peek       []MoqReader_starGenType_Peek_resultsByParams
	ResultsByParams_Discard    []MoqReader_starGenType_Discard_resultsByParams
	ResultsByParams_Read       []MoqReader_starGenType_Read_resultsByParams
	ResultsByParams_ReadByte   []MoqReader_starGenType_ReadByte_resultsByParams
	ResultsByParams_UnreadByte []MoqReader_starGenType_UnreadByte_resultsByParams
	ResultsByParams_ReadRune   []MoqReader_starGenType_ReadRune_resultsByParams
	ResultsByParams_UnreadRune []MoqReader_starGenType_UnreadRune_resultsByParams
	ResultsByParams_Buffered   []MoqReader_starGenType_Buffered_resultsByParams
	ResultsByParams_ReadSlice  []MoqReader_starGenType_ReadSlice_resultsByParams
	ResultsByParams_ReadLine   []MoqReader_starGenType_ReadLine_resultsByParams
	ResultsByParams_ReadBytes  []MoqReader_starGenType_ReadBytes_resultsByParams
	ResultsByParams_ReadString []MoqReader_starGenType_ReadString_resultsByParams
	ResultsByParams_WriteTo    []MoqReader_starGenType_WriteTo_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Size  struct{}
			Reset struct {
				Param1 moq.ParamIndexing
			}
			Peek struct {
				N moq.ParamIndexing
			}
			Discard struct {
				N moq.ParamIndexing
			}
			Read struct {
				P moq.ParamIndexing
			}
			ReadByte   struct{}
			UnreadByte struct{}
			ReadRune   struct{}
			UnreadRune struct{}
			Buffered   struct{}
			ReadSlice  struct {
				Delim moq.ParamIndexing
			}
			ReadLine  struct{}
			ReadBytes struct {
				Delim moq.ParamIndexing
			}
			ReadString struct {
				Delim moq.ParamIndexing
			}
			WriteTo struct {
				W moq.ParamIndexing
			}
		}
	}
	// MoqReader_starGenType_mock isolates the mock interface of the
}

// Reader_starGenType type
type MoqReader_starGenType_mock struct {
	Moq *MoqReader_starGenType
}

// MoqReader_starGenType_recorder isolates the recorder interface of the
// Reader_starGenType type
type MoqReader_starGenType_recorder struct {
	Moq *MoqReader_starGenType
}

// MoqReader_starGenType_Size_params holds the params of the Reader_starGenType
// type
type MoqReader_starGenType_Size_params struct{}

// MoqReader_starGenType_Size_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_Size_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_Size_resultsByParams contains the results for a given
// set of parameters for the Reader_starGenType type
type MoqReader_starGenType_Size_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_Size_paramsKey]*MoqReader_starGenType_Size_results
}

// MoqReader_starGenType_Size_doFn defines the type of function needed when
// calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_Size_doFn func()

// MoqReader_starGenType_Size_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_Size_doReturnFn func() int

// MoqReader_starGenType_Size_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_Size_results struct {
	Params  MoqReader_starGenType_Size_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Size_doFn
		DoReturnFn MoqReader_starGenType_Size_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_Size_fnRecorder routes recorded function calls to the
// MoqReader_starGenType moq
type MoqReader_starGenType_Size_fnRecorder struct {
	Params    MoqReader_starGenType_Size_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_Size_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_Size_anyParams isolates the any params functions of
// the Reader_starGenType type
type MoqReader_starGenType_Size_anyParams struct {
	Recorder *MoqReader_starGenType_Size_fnRecorder
}

// MoqReader_starGenType_Reset_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_Reset_params struct{ Param1 io.Reader }

// MoqReader_starGenType_Reset_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_Reset_paramsKey struct {
	Params struct{ Param1 io.Reader }
	Hashes struct{ Param1 hash.Hash }
}

// MoqReader_starGenType_Reset_resultsByParams contains the results for a given
// set of parameters for the Reader_starGenType type
type MoqReader_starGenType_Reset_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_Reset_paramsKey]*MoqReader_starGenType_Reset_results
}

// MoqReader_starGenType_Reset_doFn defines the type of function needed when
// calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_Reset_doFn func(r io.Reader)

// MoqReader_starGenType_Reset_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_Reset_doReturnFn func(r io.Reader)

// MoqReader_starGenType_Reset_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_Reset_results struct {
	Params  MoqReader_starGenType_Reset_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Reset_doFn
		DoReturnFn MoqReader_starGenType_Reset_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_Reset_fnRecorder routes recorded function calls to the
// MoqReader_starGenType moq
type MoqReader_starGenType_Reset_fnRecorder struct {
	Params    MoqReader_starGenType_Reset_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_Reset_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_Reset_anyParams isolates the any params functions of
// the Reader_starGenType type
type MoqReader_starGenType_Reset_anyParams struct {
	Recorder *MoqReader_starGenType_Reset_fnRecorder
}

// MoqReader_starGenType_Peek_params holds the params of the Reader_starGenType
// type
type MoqReader_starGenType_Peek_params struct{ N int }

// MoqReader_starGenType_Peek_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_Peek_paramsKey struct {
	Params struct{ N int }
	Hashes struct{ N hash.Hash }
}

// MoqReader_starGenType_Peek_resultsByParams contains the results for a given
// set of parameters for the Reader_starGenType type
type MoqReader_starGenType_Peek_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_Peek_paramsKey]*MoqReader_starGenType_Peek_results
}

// MoqReader_starGenType_Peek_doFn defines the type of function needed when
// calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_Peek_doFn func(n int)

// MoqReader_starGenType_Peek_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_Peek_doReturnFn func(n int) ([]byte, error)

// MoqReader_starGenType_Peek_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_Peek_results struct {
	Params  MoqReader_starGenType_Peek_params
	Results []struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Peek_doFn
		DoReturnFn MoqReader_starGenType_Peek_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_Peek_fnRecorder routes recorded function calls to the
// MoqReader_starGenType moq
type MoqReader_starGenType_Peek_fnRecorder struct {
	Params    MoqReader_starGenType_Peek_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_Peek_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_Peek_anyParams isolates the any params functions of
// the Reader_starGenType type
type MoqReader_starGenType_Peek_anyParams struct {
	Recorder *MoqReader_starGenType_Peek_fnRecorder
}

// MoqReader_starGenType_Discard_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_Discard_params struct{ N int }

// MoqReader_starGenType_Discard_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_Discard_paramsKey struct {
	Params struct{ N int }
	Hashes struct{ N hash.Hash }
}

// MoqReader_starGenType_Discard_resultsByParams contains the results for a
// given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_Discard_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_Discard_paramsKey]*MoqReader_starGenType_Discard_results
}

// MoqReader_starGenType_Discard_doFn defines the type of function needed when
// calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_Discard_doFn func(n int)

// MoqReader_starGenType_Discard_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_Discard_doReturnFn func(n int) (discarded int, err error)

// MoqReader_starGenType_Discard_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_Discard_results struct {
	Params  MoqReader_starGenType_Discard_params
	Results []struct {
		Values *struct {
			Discarded int
			Err       error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Discard_doFn
		DoReturnFn MoqReader_starGenType_Discard_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_Discard_fnRecorder routes recorded function calls to
// the MoqReader_starGenType moq
type MoqReader_starGenType_Discard_fnRecorder struct {
	Params    MoqReader_starGenType_Discard_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_Discard_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_Discard_anyParams isolates the any params functions of
// the Reader_starGenType type
type MoqReader_starGenType_Discard_anyParams struct {
	Recorder *MoqReader_starGenType_Discard_fnRecorder
}

// MoqReader_starGenType_Read_params holds the params of the Reader_starGenType
// type
type MoqReader_starGenType_Read_params struct{ P []byte }

// MoqReader_starGenType_Read_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_Read_paramsKey struct {
	Params struct{}
	Hashes struct{ P hash.Hash }
}

// MoqReader_starGenType_Read_resultsByParams contains the results for a given
// set of parameters for the Reader_starGenType type
type MoqReader_starGenType_Read_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_Read_paramsKey]*MoqReader_starGenType_Read_results
}

// MoqReader_starGenType_Read_doFn defines the type of function needed when
// calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_Read_doFn func(p []byte)

// MoqReader_starGenType_Read_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_Read_doReturnFn func(p []byte) (n int, err error)

// MoqReader_starGenType_Read_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_Read_results struct {
	Params  MoqReader_starGenType_Read_params
	Results []struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Read_doFn
		DoReturnFn MoqReader_starGenType_Read_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_Read_fnRecorder routes recorded function calls to the
// MoqReader_starGenType moq
type MoqReader_starGenType_Read_fnRecorder struct {
	Params    MoqReader_starGenType_Read_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_Read_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_Read_anyParams isolates the any params functions of
// the Reader_starGenType type
type MoqReader_starGenType_Read_anyParams struct {
	Recorder *MoqReader_starGenType_Read_fnRecorder
}

// MoqReader_starGenType_ReadByte_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadByte_params struct{}

// MoqReader_starGenType_ReadByte_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadByte_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_ReadByte_resultsByParams contains the results for a
// given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_ReadByte_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_ReadByte_paramsKey]*MoqReader_starGenType_ReadByte_results
}

// MoqReader_starGenType_ReadByte_doFn defines the type of function needed when
// calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_ReadByte_doFn func()

// MoqReader_starGenType_ReadByte_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_ReadByte_doReturnFn func() (byte, error)

// MoqReader_starGenType_ReadByte_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_ReadByte_results struct {
	Params  MoqReader_starGenType_ReadByte_params
	Results []struct {
		Values *struct {
			Result1 byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadByte_doFn
		DoReturnFn MoqReader_starGenType_ReadByte_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_ReadByte_fnRecorder routes recorded function calls to
// the MoqReader_starGenType moq
type MoqReader_starGenType_ReadByte_fnRecorder struct {
	Params    MoqReader_starGenType_ReadByte_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_ReadByte_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_ReadByte_anyParams isolates the any params functions
// of the Reader_starGenType type
type MoqReader_starGenType_ReadByte_anyParams struct {
	Recorder *MoqReader_starGenType_ReadByte_fnRecorder
}

// MoqReader_starGenType_UnreadByte_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_UnreadByte_params struct{}

// MoqReader_starGenType_UnreadByte_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_UnreadByte_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_UnreadByte_resultsByParams contains the results for a
// given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_UnreadByte_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_UnreadByte_paramsKey]*MoqReader_starGenType_UnreadByte_results
}

// MoqReader_starGenType_UnreadByte_doFn defines the type of function needed
// when calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_UnreadByte_doFn func()

// MoqReader_starGenType_UnreadByte_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_UnreadByte_doReturnFn func() error

// MoqReader_starGenType_UnreadByte_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_UnreadByte_results struct {
	Params  MoqReader_starGenType_UnreadByte_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_UnreadByte_doFn
		DoReturnFn MoqReader_starGenType_UnreadByte_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_UnreadByte_fnRecorder routes recorded function calls
// to the MoqReader_starGenType moq
type MoqReader_starGenType_UnreadByte_fnRecorder struct {
	Params    MoqReader_starGenType_UnreadByte_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_UnreadByte_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_UnreadByte_anyParams isolates the any params functions
// of the Reader_starGenType type
type MoqReader_starGenType_UnreadByte_anyParams struct {
	Recorder *MoqReader_starGenType_UnreadByte_fnRecorder
}

// MoqReader_starGenType_ReadRune_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadRune_params struct{}

// MoqReader_starGenType_ReadRune_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadRune_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_ReadRune_resultsByParams contains the results for a
// given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_ReadRune_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_ReadRune_paramsKey]*MoqReader_starGenType_ReadRune_results
}

// MoqReader_starGenType_ReadRune_doFn defines the type of function needed when
// calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_ReadRune_doFn func()

// MoqReader_starGenType_ReadRune_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_ReadRune_doReturnFn func() (r rune, size int, err error)

// MoqReader_starGenType_ReadRune_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_ReadRune_results struct {
	Params  MoqReader_starGenType_ReadRune_params
	Results []struct {
		Values *struct {
			Result1 rune
			Size    int
			Err     error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadRune_doFn
		DoReturnFn MoqReader_starGenType_ReadRune_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_ReadRune_fnRecorder routes recorded function calls to
// the MoqReader_starGenType moq
type MoqReader_starGenType_ReadRune_fnRecorder struct {
	Params    MoqReader_starGenType_ReadRune_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_ReadRune_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_ReadRune_anyParams isolates the any params functions
// of the Reader_starGenType type
type MoqReader_starGenType_ReadRune_anyParams struct {
	Recorder *MoqReader_starGenType_ReadRune_fnRecorder
}

// MoqReader_starGenType_UnreadRune_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_UnreadRune_params struct{}

// MoqReader_starGenType_UnreadRune_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_UnreadRune_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_UnreadRune_resultsByParams contains the results for a
// given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_UnreadRune_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_UnreadRune_paramsKey]*MoqReader_starGenType_UnreadRune_results
}

// MoqReader_starGenType_UnreadRune_doFn defines the type of function needed
// when calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_UnreadRune_doFn func()

// MoqReader_starGenType_UnreadRune_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_UnreadRune_doReturnFn func() error

// MoqReader_starGenType_UnreadRune_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_UnreadRune_results struct {
	Params  MoqReader_starGenType_UnreadRune_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_UnreadRune_doFn
		DoReturnFn MoqReader_starGenType_UnreadRune_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_UnreadRune_fnRecorder routes recorded function calls
// to the MoqReader_starGenType moq
type MoqReader_starGenType_UnreadRune_fnRecorder struct {
	Params    MoqReader_starGenType_UnreadRune_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_UnreadRune_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_UnreadRune_anyParams isolates the any params functions
// of the Reader_starGenType type
type MoqReader_starGenType_UnreadRune_anyParams struct {
	Recorder *MoqReader_starGenType_UnreadRune_fnRecorder
}

// MoqReader_starGenType_Buffered_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_Buffered_params struct{}

// MoqReader_starGenType_Buffered_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_Buffered_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_Buffered_resultsByParams contains the results for a
// given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_Buffered_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_Buffered_paramsKey]*MoqReader_starGenType_Buffered_results
}

// MoqReader_starGenType_Buffered_doFn defines the type of function needed when
// calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_Buffered_doFn func()

// MoqReader_starGenType_Buffered_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_Buffered_doReturnFn func() int

// MoqReader_starGenType_Buffered_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_Buffered_results struct {
	Params  MoqReader_starGenType_Buffered_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Buffered_doFn
		DoReturnFn MoqReader_starGenType_Buffered_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_Buffered_fnRecorder routes recorded function calls to
// the MoqReader_starGenType moq
type MoqReader_starGenType_Buffered_fnRecorder struct {
	Params    MoqReader_starGenType_Buffered_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_Buffered_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_Buffered_anyParams isolates the any params functions
// of the Reader_starGenType type
type MoqReader_starGenType_Buffered_anyParams struct {
	Recorder *MoqReader_starGenType_Buffered_fnRecorder
}

// MoqReader_starGenType_ReadSlice_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadSlice_params struct{ Delim byte }

// MoqReader_starGenType_ReadSlice_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadSlice_paramsKey struct {
	Params struct{ Delim byte }
	Hashes struct{ Delim hash.Hash }
}

// MoqReader_starGenType_ReadSlice_resultsByParams contains the results for a
// given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_ReadSlice_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_ReadSlice_paramsKey]*MoqReader_starGenType_ReadSlice_results
}

// MoqReader_starGenType_ReadSlice_doFn defines the type of function needed
// when calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_ReadSlice_doFn func(delim byte)

// MoqReader_starGenType_ReadSlice_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_ReadSlice_doReturnFn func(delim byte) (line []byte, err error)

// MoqReader_starGenType_ReadSlice_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_ReadSlice_results struct {
	Params  MoqReader_starGenType_ReadSlice_params
	Results []struct {
		Values *struct {
			Line []byte
			Err  error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadSlice_doFn
		DoReturnFn MoqReader_starGenType_ReadSlice_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_ReadSlice_fnRecorder routes recorded function calls to
// the MoqReader_starGenType moq
type MoqReader_starGenType_ReadSlice_fnRecorder struct {
	Params    MoqReader_starGenType_ReadSlice_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_ReadSlice_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_ReadSlice_anyParams isolates the any params functions
// of the Reader_starGenType type
type MoqReader_starGenType_ReadSlice_anyParams struct {
	Recorder *MoqReader_starGenType_ReadSlice_fnRecorder
}

// MoqReader_starGenType_ReadLine_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadLine_params struct{}

// MoqReader_starGenType_ReadLine_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadLine_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqReader_starGenType_ReadLine_resultsByParams contains the results for a
// given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_ReadLine_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_ReadLine_paramsKey]*MoqReader_starGenType_ReadLine_results
}

// MoqReader_starGenType_ReadLine_doFn defines the type of function needed when
// calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_ReadLine_doFn func()

// MoqReader_starGenType_ReadLine_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_ReadLine_doReturnFn func() (line []byte, isPrefix bool, err error)

// MoqReader_starGenType_ReadLine_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_ReadLine_results struct {
	Params  MoqReader_starGenType_ReadLine_params
	Results []struct {
		Values *struct {
			Line     []byte
			IsPrefix bool
			Err      error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadLine_doFn
		DoReturnFn MoqReader_starGenType_ReadLine_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_ReadLine_fnRecorder routes recorded function calls to
// the MoqReader_starGenType moq
type MoqReader_starGenType_ReadLine_fnRecorder struct {
	Params    MoqReader_starGenType_ReadLine_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_ReadLine_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_ReadLine_anyParams isolates the any params functions
// of the Reader_starGenType type
type MoqReader_starGenType_ReadLine_anyParams struct {
	Recorder *MoqReader_starGenType_ReadLine_fnRecorder
}

// MoqReader_starGenType_ReadBytes_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadBytes_params struct{ Delim byte }

// MoqReader_starGenType_ReadBytes_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadBytes_paramsKey struct {
	Params struct{ Delim byte }
	Hashes struct{ Delim hash.Hash }
}

// MoqReader_starGenType_ReadBytes_resultsByParams contains the results for a
// given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_ReadBytes_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_ReadBytes_paramsKey]*MoqReader_starGenType_ReadBytes_results
}

// MoqReader_starGenType_ReadBytes_doFn defines the type of function needed
// when calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_ReadBytes_doFn func(delim byte)

// MoqReader_starGenType_ReadBytes_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_ReadBytes_doReturnFn func(delim byte) ([]byte, error)

// MoqReader_starGenType_ReadBytes_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_ReadBytes_results struct {
	Params  MoqReader_starGenType_ReadBytes_params
	Results []struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadBytes_doFn
		DoReturnFn MoqReader_starGenType_ReadBytes_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_ReadBytes_fnRecorder routes recorded function calls to
// the MoqReader_starGenType moq
type MoqReader_starGenType_ReadBytes_fnRecorder struct {
	Params    MoqReader_starGenType_ReadBytes_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_ReadBytes_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_ReadBytes_anyParams isolates the any params functions
// of the Reader_starGenType type
type MoqReader_starGenType_ReadBytes_anyParams struct {
	Recorder *MoqReader_starGenType_ReadBytes_fnRecorder
}

// MoqReader_starGenType_ReadString_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadString_params struct{ Delim byte }

// MoqReader_starGenType_ReadString_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_ReadString_paramsKey struct {
	Params struct{ Delim byte }
	Hashes struct{ Delim hash.Hash }
}

// MoqReader_starGenType_ReadString_resultsByParams contains the results for a
// given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_ReadString_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_ReadString_paramsKey]*MoqReader_starGenType_ReadString_results
}

// MoqReader_starGenType_ReadString_doFn defines the type of function needed
// when calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_ReadString_doFn func(delim byte)

// MoqReader_starGenType_ReadString_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_ReadString_doReturnFn func(delim byte) (string, error)

// MoqReader_starGenType_ReadString_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_ReadString_results struct {
	Params  MoqReader_starGenType_ReadString_params
	Results []struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadString_doFn
		DoReturnFn MoqReader_starGenType_ReadString_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_ReadString_fnRecorder routes recorded function calls
// to the MoqReader_starGenType moq
type MoqReader_starGenType_ReadString_fnRecorder struct {
	Params    MoqReader_starGenType_ReadString_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_ReadString_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_ReadString_anyParams isolates the any params functions
// of the Reader_starGenType type
type MoqReader_starGenType_ReadString_anyParams struct {
	Recorder *MoqReader_starGenType_ReadString_fnRecorder
}

// MoqReader_starGenType_WriteTo_params holds the params of the
// Reader_starGenType type
type MoqReader_starGenType_WriteTo_params struct{ W io.Writer }

// MoqReader_starGenType_WriteTo_paramsKey holds the map key params of the
// Reader_starGenType type
type MoqReader_starGenType_WriteTo_paramsKey struct {
	Params struct{ W io.Writer }
	Hashes struct{ W hash.Hash }
}

// MoqReader_starGenType_WriteTo_resultsByParams contains the results for a
// given set of parameters for the Reader_starGenType type
type MoqReader_starGenType_WriteTo_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReader_starGenType_WriteTo_paramsKey]*MoqReader_starGenType_WriteTo_results
}

// MoqReader_starGenType_WriteTo_doFn defines the type of function needed when
// calling AndDo for the Reader_starGenType type
type MoqReader_starGenType_WriteTo_doFn func(w io.Writer)

// MoqReader_starGenType_WriteTo_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Reader_starGenType type
type MoqReader_starGenType_WriteTo_doReturnFn func(w io.Writer) (n int64, err error)

// MoqReader_starGenType_WriteTo_results holds the results of the
// Reader_starGenType type
type MoqReader_starGenType_WriteTo_results struct {
	Params  MoqReader_starGenType_WriteTo_params
	Results []struct {
		Values *struct {
			N   int64
			Err error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_WriteTo_doFn
		DoReturnFn MoqReader_starGenType_WriteTo_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReader_starGenType_WriteTo_fnRecorder routes recorded function calls to
// the MoqReader_starGenType moq
type MoqReader_starGenType_WriteTo_fnRecorder struct {
	Params    MoqReader_starGenType_WriteTo_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReader_starGenType_WriteTo_results
	Moq       *MoqReader_starGenType
}

// MoqReader_starGenType_WriteTo_anyParams isolates the any params functions of
// the Reader_starGenType type
type MoqReader_starGenType_WriteTo_anyParams struct {
	Recorder *MoqReader_starGenType_WriteTo_fnRecorder
}

// NewMoqReader_starGenType creates a new moq of the Reader_starGenType type
func NewMoqReader_starGenType(scene *moq.Scene, config *moq.Config) *MoqReader_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqReader_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqReader_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Size  struct{}
				Reset struct {
					Param1 moq.ParamIndexing
				}
				Peek struct {
					N moq.ParamIndexing
				}
				Discard struct {
					N moq.ParamIndexing
				}
				Read struct {
					P moq.ParamIndexing
				}
				ReadByte   struct{}
				UnreadByte struct{}
				ReadRune   struct{}
				UnreadRune struct{}
				Buffered   struct{}
				ReadSlice  struct {
					Delim moq.ParamIndexing
				}
				ReadLine  struct{}
				ReadBytes struct {
					Delim moq.ParamIndexing
				}
				ReadString struct {
					Delim moq.ParamIndexing
				}
				WriteTo struct {
					W moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Size  struct{}
			Reset struct {
				Param1 moq.ParamIndexing
			}
			Peek struct {
				N moq.ParamIndexing
			}
			Discard struct {
				N moq.ParamIndexing
			}
			Read struct {
				P moq.ParamIndexing
			}
			ReadByte   struct{}
			UnreadByte struct{}
			ReadRune   struct{}
			UnreadRune struct{}
			Buffered   struct{}
			ReadSlice  struct {
				Delim moq.ParamIndexing
			}
			ReadLine  struct{}
			ReadBytes struct {
				Delim moq.ParamIndexing
			}
			ReadString struct {
				Delim moq.ParamIndexing
			}
			WriteTo struct {
				W moq.ParamIndexing
			}
		}{
			Size: struct{}{},
			Reset: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
			},
			Peek: struct {
				N moq.ParamIndexing
			}{
				N: moq.ParamIndexByValue,
			},
			Discard: struct {
				N moq.ParamIndexing
			}{
				N: moq.ParamIndexByValue,
			},
			Read: struct {
				P moq.ParamIndexing
			}{
				P: moq.ParamIndexByHash,
			},
			ReadByte:   struct{}{},
			UnreadByte: struct{}{},
			ReadRune:   struct{}{},
			UnreadRune: struct{}{},
			Buffered:   struct{}{},
			ReadSlice: struct {
				Delim moq.ParamIndexing
			}{
				Delim: moq.ParamIndexByValue,
			},
			ReadLine: struct{}{},
			ReadBytes: struct {
				Delim moq.ParamIndexing
			}{
				Delim: moq.ParamIndexByValue,
			},
			ReadString: struct {
				Delim moq.ParamIndexing
			}{
				Delim: moq.ParamIndexByValue,
			},
			WriteTo: struct {
				W moq.ParamIndexing
			}{
				W: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Reader_starGenType type
func (m *MoqReader_starGenType) Mock() *MoqReader_starGenType_mock { return m.Moq }

func (m *MoqReader_starGenType_mock) Size() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_Size_params{}
	var results *MoqReader_starGenType_Size_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Size {
		paramsKey := m.Moq.ParamsKey_Size(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Size(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Size(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Size(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqReader_starGenType_mock) Reset(param1 io.Reader) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_Reset_params{
		Param1: param1,
	}
	var results *MoqReader_starGenType_Reset_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Reset {
		paramsKey := m.Moq.ParamsKey_Reset(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Reset(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Reset(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Reset(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(param1)
	}
	return
}

func (m *MoqReader_starGenType_mock) Peek(n int) (result1 []byte, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_Peek_params{
		N: n,
	}
	var results *MoqReader_starGenType_Peek_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Peek {
		paramsKey := m.Moq.ParamsKey_Peek(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Peek(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Peek(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Peek(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(n)
	}
	return
}

func (m *MoqReader_starGenType_mock) Discard(n int) (discarded int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_Discard_params{
		N: n,
	}
	var results *MoqReader_starGenType_Discard_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Discard {
		paramsKey := m.Moq.ParamsKey_Discard(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Discard(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Discard(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Discard(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n)
	}

	if result.Values != nil {
		discarded = result.Values.Discarded
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		discarded, err = result.DoReturnFn(n)
	}
	return
}

func (m *MoqReader_starGenType_mock) Read(p []byte) (n int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_Read_params{
		P: p,
	}
	var results *MoqReader_starGenType_Read_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Read {
		paramsKey := m.Moq.ParamsKey_Read(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Read(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Read(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Read(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(p)
	}
	return
}

func (m *MoqReader_starGenType_mock) ReadByte() (result1 byte, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_ReadByte_params{}
	var results *MoqReader_starGenType_ReadByte_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadByte {
		paramsKey := m.Moq.ParamsKey_ReadByte(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadByte(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadByte(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadByte(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn()
	}
	return
}

func (m *MoqReader_starGenType_mock) UnreadByte() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_UnreadByte_params{}
	var results *MoqReader_starGenType_UnreadByte_results
	for _, resultsByParams := range m.Moq.ResultsByParams_UnreadByte {
		paramsKey := m.Moq.ParamsKey_UnreadByte(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_UnreadByte(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_UnreadByte(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_UnreadByte(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqReader_starGenType_mock) ReadRune() (result1 rune, size int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_ReadRune_params{}
	var results *MoqReader_starGenType_ReadRune_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadRune {
		paramsKey := m.Moq.ParamsKey_ReadRune(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadRune(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadRune(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadRune(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		size = result.Values.Size
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		result1, size, err = result.DoReturnFn()
	}
	return
}

func (m *MoqReader_starGenType_mock) UnreadRune() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_UnreadRune_params{}
	var results *MoqReader_starGenType_UnreadRune_results
	for _, resultsByParams := range m.Moq.ResultsByParams_UnreadRune {
		paramsKey := m.Moq.ParamsKey_UnreadRune(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_UnreadRune(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_UnreadRune(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_UnreadRune(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqReader_starGenType_mock) Buffered() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_Buffered_params{}
	var results *MoqReader_starGenType_Buffered_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Buffered {
		paramsKey := m.Moq.ParamsKey_Buffered(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Buffered(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Buffered(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Buffered(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqReader_starGenType_mock) ReadSlice(delim byte) (line []byte, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_ReadSlice_params{
		Delim: delim,
	}
	var results *MoqReader_starGenType_ReadSlice_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadSlice {
		paramsKey := m.Moq.ParamsKey_ReadSlice(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadSlice(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadSlice(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadSlice(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(delim)
	}

	if result.Values != nil {
		line = result.Values.Line
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		line, err = result.DoReturnFn(delim)
	}
	return
}

func (m *MoqReader_starGenType_mock) ReadLine() (line []byte, isPrefix bool, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_ReadLine_params{}
	var results *MoqReader_starGenType_ReadLine_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadLine {
		paramsKey := m.Moq.ParamsKey_ReadLine(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadLine(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadLine(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadLine(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		line = result.Values.Line
		isPrefix = result.Values.IsPrefix
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		line, isPrefix, err = result.DoReturnFn()
	}
	return
}

func (m *MoqReader_starGenType_mock) ReadBytes(delim byte) (result1 []byte, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_ReadBytes_params{
		Delim: delim,
	}
	var results *MoqReader_starGenType_ReadBytes_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadBytes {
		paramsKey := m.Moq.ParamsKey_ReadBytes(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadBytes(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadBytes(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadBytes(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(delim)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(delim)
	}
	return
}

func (m *MoqReader_starGenType_mock) ReadString(delim byte) (result1 string, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_ReadString_params{
		Delim: delim,
	}
	var results *MoqReader_starGenType_ReadString_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadString {
		paramsKey := m.Moq.ParamsKey_ReadString(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadString(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadString(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadString(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(delim)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(delim)
	}
	return
}

func (m *MoqReader_starGenType_mock) WriteTo(w io.Writer) (n int64, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqReader_starGenType_WriteTo_params{
		W: w,
	}
	var results *MoqReader_starGenType_WriteTo_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteTo {
		paramsKey := m.Moq.ParamsKey_WriteTo(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteTo(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteTo(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteTo(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(w)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(w)
	}
	return
}

// OnCall returns the recorder implementation of the Reader_starGenType type
func (m *MoqReader_starGenType) OnCall() *MoqReader_starGenType_recorder {
	return &MoqReader_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqReader_starGenType_recorder) Size() *MoqReader_starGenType_Size_fnRecorder {
	return &MoqReader_starGenType_Size_fnRecorder{
		Params:   MoqReader_starGenType_Size_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_Size_fnRecorder) Any() *MoqReader_starGenType_Size_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Size(r.Params))
		return nil
	}
	return &MoqReader_starGenType_Size_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_Size_fnRecorder) Seq() *MoqReader_starGenType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Size(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_Size_fnRecorder) NoSeq() *MoqReader_starGenType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Size(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_Size_fnRecorder) ReturnResults(result1 int) *MoqReader_starGenType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Size_doFn
		DoReturnFn MoqReader_starGenType_Size_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_Size_fnRecorder) AndDo(fn MoqReader_starGenType_Size_doFn) *MoqReader_starGenType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_Size_fnRecorder) DoReturnResults(fn MoqReader_starGenType_Size_doReturnFn) *MoqReader_starGenType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Size_doFn
		DoReturnFn MoqReader_starGenType_Size_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_Size_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_Size_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Size {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_Size_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_Size_paramsKey]*MoqReader_starGenType_Size_results{},
		}
		r.Moq.ResultsByParams_Size = append(r.Moq.ResultsByParams_Size, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Size) {
			copy(r.Moq.ResultsByParams_Size[insertAt+1:], r.Moq.ResultsByParams_Size[insertAt:0])
			r.Moq.ResultsByParams_Size[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Size(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_Size_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_Size_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_Size_doFn
				DoReturnFn MoqReader_starGenType_Size_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_Size(params MoqReader_starGenType_Size_params) string {
	return fmt.Sprintf("Size()")
}

func (m *MoqReader_starGenType) ParamsKey_Size(params MoqReader_starGenType_Size_params, anyParams uint64) MoqReader_starGenType_Size_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_Size_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_starGenType_recorder) Reset(param1 io.Reader) *MoqReader_starGenType_Reset_fnRecorder {
	return &MoqReader_starGenType_Reset_fnRecorder{
		Params: MoqReader_starGenType_Reset_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_Reset_fnRecorder) Any() *MoqReader_starGenType_Reset_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	return &MoqReader_starGenType_Reset_anyParams{Recorder: r}
}

func (a *MoqReader_starGenType_Reset_anyParams) Param1() *MoqReader_starGenType_Reset_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqReader_starGenType_Reset_fnRecorder) Seq() *MoqReader_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_Reset_fnRecorder) NoSeq() *MoqReader_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_Reset_fnRecorder) ReturnResults() *MoqReader_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Reset_doFn
		DoReturnFn MoqReader_starGenType_Reset_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_Reset_fnRecorder) AndDo(fn MoqReader_starGenType_Reset_doFn) *MoqReader_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_Reset_fnRecorder) DoReturnResults(fn MoqReader_starGenType_Reset_doReturnFn) *MoqReader_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Reset_doFn
		DoReturnFn MoqReader_starGenType_Reset_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_Reset_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_Reset_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Reset {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_Reset_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_Reset_paramsKey]*MoqReader_starGenType_Reset_results{},
		}
		r.Moq.ResultsByParams_Reset = append(r.Moq.ResultsByParams_Reset, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Reset) {
			copy(r.Moq.ResultsByParams_Reset[insertAt+1:], r.Moq.ResultsByParams_Reset[insertAt:0])
			r.Moq.ResultsByParams_Reset[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Reset(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_Reset_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_Reset_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqReader_starGenType_Reset_doFn
				DoReturnFn MoqReader_starGenType_Reset_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_Reset(params MoqReader_starGenType_Reset_params) string {
	return fmt.Sprintf("Reset(%#v)", params.Param1)
}

func (m *MoqReader_starGenType) ParamsKey_Reset(params MoqReader_starGenType_Reset_params, anyParams uint64) MoqReader_starGenType_Reset_paramsKey {
	m.Scene.T.Helper()
	var param1Used io.Reader
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Reset.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqReader_starGenType_Reset_paramsKey{
		Params: struct{ Param1 io.Reader }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqReader_starGenType_recorder) Peek(n int) *MoqReader_starGenType_Peek_fnRecorder {
	return &MoqReader_starGenType_Peek_fnRecorder{
		Params: MoqReader_starGenType_Peek_params{
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_Peek_fnRecorder) Any() *MoqReader_starGenType_Peek_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Peek(r.Params))
		return nil
	}
	return &MoqReader_starGenType_Peek_anyParams{Recorder: r}
}

func (a *MoqReader_starGenType_Peek_anyParams) N() *MoqReader_starGenType_Peek_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqReader_starGenType_Peek_fnRecorder) Seq() *MoqReader_starGenType_Peek_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Peek(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_Peek_fnRecorder) NoSeq() *MoqReader_starGenType_Peek_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Peek(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_Peek_fnRecorder) ReturnResults(result1 []byte, result2 error) *MoqReader_starGenType_Peek_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Peek_doFn
		DoReturnFn MoqReader_starGenType_Peek_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_Peek_fnRecorder) AndDo(fn MoqReader_starGenType_Peek_doFn) *MoqReader_starGenType_Peek_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_Peek_fnRecorder) DoReturnResults(fn MoqReader_starGenType_Peek_doReturnFn) *MoqReader_starGenType_Peek_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Peek_doFn
		DoReturnFn MoqReader_starGenType_Peek_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_Peek_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_Peek_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Peek {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_Peek_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_Peek_paramsKey]*MoqReader_starGenType_Peek_results{},
		}
		r.Moq.ResultsByParams_Peek = append(r.Moq.ResultsByParams_Peek, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Peek) {
			copy(r.Moq.ResultsByParams_Peek[insertAt+1:], r.Moq.ResultsByParams_Peek[insertAt:0])
			r.Moq.ResultsByParams_Peek[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Peek(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_Peek_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_Peek_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_Peek_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_Peek_doFn
				DoReturnFn MoqReader_starGenType_Peek_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_Peek(params MoqReader_starGenType_Peek_params) string {
	return fmt.Sprintf("Peek(%#v)", params.N)
}

func (m *MoqReader_starGenType) ParamsKey_Peek(params MoqReader_starGenType_Peek_params, anyParams uint64) MoqReader_starGenType_Peek_paramsKey {
	m.Scene.T.Helper()
	var nUsed int
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Peek.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqReader_starGenType_Peek_paramsKey{
		Params: struct{ N int }{
			N: nUsed,
		},
		Hashes: struct{ N hash.Hash }{
			N: nUsedHash,
		},
	}
}

func (m *MoqReader_starGenType_recorder) Discard(n int) *MoqReader_starGenType_Discard_fnRecorder {
	return &MoqReader_starGenType_Discard_fnRecorder{
		Params: MoqReader_starGenType_Discard_params{
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_Discard_fnRecorder) Any() *MoqReader_starGenType_Discard_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Discard(r.Params))
		return nil
	}
	return &MoqReader_starGenType_Discard_anyParams{Recorder: r}
}

func (a *MoqReader_starGenType_Discard_anyParams) N() *MoqReader_starGenType_Discard_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqReader_starGenType_Discard_fnRecorder) Seq() *MoqReader_starGenType_Discard_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Discard(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_Discard_fnRecorder) NoSeq() *MoqReader_starGenType_Discard_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Discard(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_Discard_fnRecorder) ReturnResults(discarded int, err error) *MoqReader_starGenType_Discard_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Discarded int
			Err       error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Discard_doFn
		DoReturnFn MoqReader_starGenType_Discard_doReturnFn
	}{
		Values: &struct {
			Discarded int
			Err       error
		}{
			Discarded: discarded,
			Err:       err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_Discard_fnRecorder) AndDo(fn MoqReader_starGenType_Discard_doFn) *MoqReader_starGenType_Discard_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_Discard_fnRecorder) DoReturnResults(fn MoqReader_starGenType_Discard_doReturnFn) *MoqReader_starGenType_Discard_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Discarded int
			Err       error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Discard_doFn
		DoReturnFn MoqReader_starGenType_Discard_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_Discard_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_Discard_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Discard {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_Discard_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_Discard_paramsKey]*MoqReader_starGenType_Discard_results{},
		}
		r.Moq.ResultsByParams_Discard = append(r.Moq.ResultsByParams_Discard, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Discard) {
			copy(r.Moq.ResultsByParams_Discard[insertAt+1:], r.Moq.ResultsByParams_Discard[insertAt:0])
			r.Moq.ResultsByParams_Discard[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Discard(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_Discard_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_Discard_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_Discard_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Discarded int
					Err       error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_Discard_doFn
				DoReturnFn MoqReader_starGenType_Discard_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_Discard(params MoqReader_starGenType_Discard_params) string {
	return fmt.Sprintf("Discard(%#v)", params.N)
}

func (m *MoqReader_starGenType) ParamsKey_Discard(params MoqReader_starGenType_Discard_params, anyParams uint64) MoqReader_starGenType_Discard_paramsKey {
	m.Scene.T.Helper()
	var nUsed int
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Discard.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqReader_starGenType_Discard_paramsKey{
		Params: struct{ N int }{
			N: nUsed,
		},
		Hashes: struct{ N hash.Hash }{
			N: nUsedHash,
		},
	}
}

func (m *MoqReader_starGenType_recorder) Read(p []byte) *MoqReader_starGenType_Read_fnRecorder {
	return &MoqReader_starGenType_Read_fnRecorder{
		Params: MoqReader_starGenType_Read_params{
			P: p,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_Read_fnRecorder) Any() *MoqReader_starGenType_Read_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	return &MoqReader_starGenType_Read_anyParams{Recorder: r}
}

func (a *MoqReader_starGenType_Read_anyParams) P() *MoqReader_starGenType_Read_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqReader_starGenType_Read_fnRecorder) Seq() *MoqReader_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_Read_fnRecorder) NoSeq() *MoqReader_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_Read_fnRecorder) ReturnResults(n int, err error) *MoqReader_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Read_doFn
		DoReturnFn MoqReader_starGenType_Read_doReturnFn
	}{
		Values: &struct {
			N   int
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_Read_fnRecorder) AndDo(fn MoqReader_starGenType_Read_doFn) *MoqReader_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_Read_fnRecorder) DoReturnResults(fn MoqReader_starGenType_Read_doReturnFn) *MoqReader_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int
			Err error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Read_doFn
		DoReturnFn MoqReader_starGenType_Read_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_Read_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_Read_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Read {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_Read_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_Read_paramsKey]*MoqReader_starGenType_Read_results{},
		}
		r.Moq.ResultsByParams_Read = append(r.Moq.ResultsByParams_Read, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Read) {
			copy(r.Moq.ResultsByParams_Read[insertAt+1:], r.Moq.ResultsByParams_Read[insertAt:0])
			r.Moq.ResultsByParams_Read[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Read(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_Read_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_Read_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int
					Err error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_Read_doFn
				DoReturnFn MoqReader_starGenType_Read_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_Read(params MoqReader_starGenType_Read_params) string {
	return fmt.Sprintf("Read(%#v)", params.P)
}

func (m *MoqReader_starGenType) ParamsKey_Read(params MoqReader_starGenType_Read_params, anyParams uint64) MoqReader_starGenType_Read_paramsKey {
	m.Scene.T.Helper()
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Read.P == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The p parameter of the Read function can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.P)
	}
	return MoqReader_starGenType_Read_paramsKey{
		Params: struct{}{},
		Hashes: struct{ P hash.Hash }{
			P: pUsedHash,
		},
	}
}

func (m *MoqReader_starGenType_recorder) ReadByte() *MoqReader_starGenType_ReadByte_fnRecorder {
	return &MoqReader_starGenType_ReadByte_fnRecorder{
		Params:   MoqReader_starGenType_ReadByte_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_ReadByte_fnRecorder) Any() *MoqReader_starGenType_ReadByte_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadByte(r.Params))
		return nil
	}
	return &MoqReader_starGenType_ReadByte_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_ReadByte_fnRecorder) Seq() *MoqReader_starGenType_ReadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadByte(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_ReadByte_fnRecorder) NoSeq() *MoqReader_starGenType_ReadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadByte(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_ReadByte_fnRecorder) ReturnResults(result1 byte, result2 error) *MoqReader_starGenType_ReadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadByte_doFn
		DoReturnFn MoqReader_starGenType_ReadByte_doReturnFn
	}{
		Values: &struct {
			Result1 byte
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_ReadByte_fnRecorder) AndDo(fn MoqReader_starGenType_ReadByte_doFn) *MoqReader_starGenType_ReadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_ReadByte_fnRecorder) DoReturnResults(fn MoqReader_starGenType_ReadByte_doReturnFn) *MoqReader_starGenType_ReadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadByte_doFn
		DoReturnFn MoqReader_starGenType_ReadByte_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_ReadByte_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_ReadByte_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadByte {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_ReadByte_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_ReadByte_paramsKey]*MoqReader_starGenType_ReadByte_results{},
		}
		r.Moq.ResultsByParams_ReadByte = append(r.Moq.ResultsByParams_ReadByte, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadByte) {
			copy(r.Moq.ResultsByParams_ReadByte[insertAt+1:], r.Moq.ResultsByParams_ReadByte[insertAt:0])
			r.Moq.ResultsByParams_ReadByte[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadByte(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_ReadByte_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_ReadByte_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_ReadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 byte
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_ReadByte_doFn
				DoReturnFn MoqReader_starGenType_ReadByte_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_ReadByte(params MoqReader_starGenType_ReadByte_params) string {
	return fmt.Sprintf("ReadByte()")
}

func (m *MoqReader_starGenType) ParamsKey_ReadByte(params MoqReader_starGenType_ReadByte_params, anyParams uint64) MoqReader_starGenType_ReadByte_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_ReadByte_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_starGenType_recorder) UnreadByte() *MoqReader_starGenType_UnreadByte_fnRecorder {
	return &MoqReader_starGenType_UnreadByte_fnRecorder{
		Params:   MoqReader_starGenType_UnreadByte_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_UnreadByte_fnRecorder) Any() *MoqReader_starGenType_UnreadByte_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnreadByte(r.Params))
		return nil
	}
	return &MoqReader_starGenType_UnreadByte_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_UnreadByte_fnRecorder) Seq() *MoqReader_starGenType_UnreadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnreadByte(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_UnreadByte_fnRecorder) NoSeq() *MoqReader_starGenType_UnreadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnreadByte(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_UnreadByte_fnRecorder) ReturnResults(result1 error) *MoqReader_starGenType_UnreadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_UnreadByte_doFn
		DoReturnFn MoqReader_starGenType_UnreadByte_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_UnreadByte_fnRecorder) AndDo(fn MoqReader_starGenType_UnreadByte_doFn) *MoqReader_starGenType_UnreadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_UnreadByte_fnRecorder) DoReturnResults(fn MoqReader_starGenType_UnreadByte_doReturnFn) *MoqReader_starGenType_UnreadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_UnreadByte_doFn
		DoReturnFn MoqReader_starGenType_UnreadByte_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_UnreadByte_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_UnreadByte_resultsByParams
	for n, res := range r.Moq.ResultsByParams_UnreadByte {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_UnreadByte_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_UnreadByte_paramsKey]*MoqReader_starGenType_UnreadByte_results{},
		}
		r.Moq.ResultsByParams_UnreadByte = append(r.Moq.ResultsByParams_UnreadByte, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_UnreadByte) {
			copy(r.Moq.ResultsByParams_UnreadByte[insertAt+1:], r.Moq.ResultsByParams_UnreadByte[insertAt:0])
			r.Moq.ResultsByParams_UnreadByte[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_UnreadByte(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_UnreadByte_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_UnreadByte_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_UnreadByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_UnreadByte_doFn
				DoReturnFn MoqReader_starGenType_UnreadByte_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_UnreadByte(params MoqReader_starGenType_UnreadByte_params) string {
	return fmt.Sprintf("UnreadByte()")
}

func (m *MoqReader_starGenType) ParamsKey_UnreadByte(params MoqReader_starGenType_UnreadByte_params, anyParams uint64) MoqReader_starGenType_UnreadByte_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_UnreadByte_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_starGenType_recorder) ReadRune() *MoqReader_starGenType_ReadRune_fnRecorder {
	return &MoqReader_starGenType_ReadRune_fnRecorder{
		Params:   MoqReader_starGenType_ReadRune_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_ReadRune_fnRecorder) Any() *MoqReader_starGenType_ReadRune_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadRune(r.Params))
		return nil
	}
	return &MoqReader_starGenType_ReadRune_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_ReadRune_fnRecorder) Seq() *MoqReader_starGenType_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadRune(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_ReadRune_fnRecorder) NoSeq() *MoqReader_starGenType_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadRune(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_ReadRune_fnRecorder) ReturnResults(result1 rune, size int, err error) *MoqReader_starGenType_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 rune
			Size    int
			Err     error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadRune_doFn
		DoReturnFn MoqReader_starGenType_ReadRune_doReturnFn
	}{
		Values: &struct {
			Result1 rune
			Size    int
			Err     error
		}{
			Result1: result1,
			Size:    size,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_ReadRune_fnRecorder) AndDo(fn MoqReader_starGenType_ReadRune_doFn) *MoqReader_starGenType_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_ReadRune_fnRecorder) DoReturnResults(fn MoqReader_starGenType_ReadRune_doReturnFn) *MoqReader_starGenType_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 rune
			Size    int
			Err     error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadRune_doFn
		DoReturnFn MoqReader_starGenType_ReadRune_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_ReadRune_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_ReadRune_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadRune {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_ReadRune_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_ReadRune_paramsKey]*MoqReader_starGenType_ReadRune_results{},
		}
		r.Moq.ResultsByParams_ReadRune = append(r.Moq.ResultsByParams_ReadRune, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadRune) {
			copy(r.Moq.ResultsByParams_ReadRune[insertAt+1:], r.Moq.ResultsByParams_ReadRune[insertAt:0])
			r.Moq.ResultsByParams_ReadRune[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadRune(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_ReadRune_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_ReadRune_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_ReadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 rune
					Size    int
					Err     error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_ReadRune_doFn
				DoReturnFn MoqReader_starGenType_ReadRune_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_ReadRune(params MoqReader_starGenType_ReadRune_params) string {
	return fmt.Sprintf("ReadRune()")
}

func (m *MoqReader_starGenType) ParamsKey_ReadRune(params MoqReader_starGenType_ReadRune_params, anyParams uint64) MoqReader_starGenType_ReadRune_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_ReadRune_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_starGenType_recorder) UnreadRune() *MoqReader_starGenType_UnreadRune_fnRecorder {
	return &MoqReader_starGenType_UnreadRune_fnRecorder{
		Params:   MoqReader_starGenType_UnreadRune_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_UnreadRune_fnRecorder) Any() *MoqReader_starGenType_UnreadRune_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnreadRune(r.Params))
		return nil
	}
	return &MoqReader_starGenType_UnreadRune_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_UnreadRune_fnRecorder) Seq() *MoqReader_starGenType_UnreadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnreadRune(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_UnreadRune_fnRecorder) NoSeq() *MoqReader_starGenType_UnreadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_UnreadRune(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_UnreadRune_fnRecorder) ReturnResults(result1 error) *MoqReader_starGenType_UnreadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_UnreadRune_doFn
		DoReturnFn MoqReader_starGenType_UnreadRune_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_UnreadRune_fnRecorder) AndDo(fn MoqReader_starGenType_UnreadRune_doFn) *MoqReader_starGenType_UnreadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_UnreadRune_fnRecorder) DoReturnResults(fn MoqReader_starGenType_UnreadRune_doReturnFn) *MoqReader_starGenType_UnreadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_UnreadRune_doFn
		DoReturnFn MoqReader_starGenType_UnreadRune_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_UnreadRune_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_UnreadRune_resultsByParams
	for n, res := range r.Moq.ResultsByParams_UnreadRune {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_UnreadRune_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_UnreadRune_paramsKey]*MoqReader_starGenType_UnreadRune_results{},
		}
		r.Moq.ResultsByParams_UnreadRune = append(r.Moq.ResultsByParams_UnreadRune, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_UnreadRune) {
			copy(r.Moq.ResultsByParams_UnreadRune[insertAt+1:], r.Moq.ResultsByParams_UnreadRune[insertAt:0])
			r.Moq.ResultsByParams_UnreadRune[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_UnreadRune(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_UnreadRune_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_UnreadRune_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_UnreadRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_UnreadRune_doFn
				DoReturnFn MoqReader_starGenType_UnreadRune_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_UnreadRune(params MoqReader_starGenType_UnreadRune_params) string {
	return fmt.Sprintf("UnreadRune()")
}

func (m *MoqReader_starGenType) ParamsKey_UnreadRune(params MoqReader_starGenType_UnreadRune_params, anyParams uint64) MoqReader_starGenType_UnreadRune_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_UnreadRune_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_starGenType_recorder) Buffered() *MoqReader_starGenType_Buffered_fnRecorder {
	return &MoqReader_starGenType_Buffered_fnRecorder{
		Params:   MoqReader_starGenType_Buffered_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_Buffered_fnRecorder) Any() *MoqReader_starGenType_Buffered_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Buffered(r.Params))
		return nil
	}
	return &MoqReader_starGenType_Buffered_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_Buffered_fnRecorder) Seq() *MoqReader_starGenType_Buffered_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Buffered(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_Buffered_fnRecorder) NoSeq() *MoqReader_starGenType_Buffered_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Buffered(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_Buffered_fnRecorder) ReturnResults(result1 int) *MoqReader_starGenType_Buffered_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Buffered_doFn
		DoReturnFn MoqReader_starGenType_Buffered_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_Buffered_fnRecorder) AndDo(fn MoqReader_starGenType_Buffered_doFn) *MoqReader_starGenType_Buffered_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_Buffered_fnRecorder) DoReturnResults(fn MoqReader_starGenType_Buffered_doReturnFn) *MoqReader_starGenType_Buffered_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_Buffered_doFn
		DoReturnFn MoqReader_starGenType_Buffered_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_Buffered_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_Buffered_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Buffered {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_Buffered_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_Buffered_paramsKey]*MoqReader_starGenType_Buffered_results{},
		}
		r.Moq.ResultsByParams_Buffered = append(r.Moq.ResultsByParams_Buffered, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Buffered) {
			copy(r.Moq.ResultsByParams_Buffered[insertAt+1:], r.Moq.ResultsByParams_Buffered[insertAt:0])
			r.Moq.ResultsByParams_Buffered[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Buffered(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_Buffered_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_Buffered_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_Buffered_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_Buffered_doFn
				DoReturnFn MoqReader_starGenType_Buffered_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_Buffered(params MoqReader_starGenType_Buffered_params) string {
	return fmt.Sprintf("Buffered()")
}

func (m *MoqReader_starGenType) ParamsKey_Buffered(params MoqReader_starGenType_Buffered_params, anyParams uint64) MoqReader_starGenType_Buffered_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_Buffered_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_starGenType_recorder) ReadSlice(delim byte) *MoqReader_starGenType_ReadSlice_fnRecorder {
	return &MoqReader_starGenType_ReadSlice_fnRecorder{
		Params: MoqReader_starGenType_ReadSlice_params{
			Delim: delim,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_ReadSlice_fnRecorder) Any() *MoqReader_starGenType_ReadSlice_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadSlice(r.Params))
		return nil
	}
	return &MoqReader_starGenType_ReadSlice_anyParams{Recorder: r}
}

func (a *MoqReader_starGenType_ReadSlice_anyParams) Delim() *MoqReader_starGenType_ReadSlice_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqReader_starGenType_ReadSlice_fnRecorder) Seq() *MoqReader_starGenType_ReadSlice_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadSlice(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_ReadSlice_fnRecorder) NoSeq() *MoqReader_starGenType_ReadSlice_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadSlice(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_ReadSlice_fnRecorder) ReturnResults(line []byte, err error) *MoqReader_starGenType_ReadSlice_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Line []byte
			Err  error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadSlice_doFn
		DoReturnFn MoqReader_starGenType_ReadSlice_doReturnFn
	}{
		Values: &struct {
			Line []byte
			Err  error
		}{
			Line: line,
			Err:  err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_ReadSlice_fnRecorder) AndDo(fn MoqReader_starGenType_ReadSlice_doFn) *MoqReader_starGenType_ReadSlice_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_ReadSlice_fnRecorder) DoReturnResults(fn MoqReader_starGenType_ReadSlice_doReturnFn) *MoqReader_starGenType_ReadSlice_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Line []byte
			Err  error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadSlice_doFn
		DoReturnFn MoqReader_starGenType_ReadSlice_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_ReadSlice_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_ReadSlice_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadSlice {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_ReadSlice_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_ReadSlice_paramsKey]*MoqReader_starGenType_ReadSlice_results{},
		}
		r.Moq.ResultsByParams_ReadSlice = append(r.Moq.ResultsByParams_ReadSlice, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadSlice) {
			copy(r.Moq.ResultsByParams_ReadSlice[insertAt+1:], r.Moq.ResultsByParams_ReadSlice[insertAt:0])
			r.Moq.ResultsByParams_ReadSlice[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadSlice(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_ReadSlice_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_ReadSlice_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_ReadSlice_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Line []byte
					Err  error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_ReadSlice_doFn
				DoReturnFn MoqReader_starGenType_ReadSlice_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_ReadSlice(params MoqReader_starGenType_ReadSlice_params) string {
	return fmt.Sprintf("ReadSlice(%#v)", params.Delim)
}

func (m *MoqReader_starGenType) ParamsKey_ReadSlice(params MoqReader_starGenType_ReadSlice_params, anyParams uint64) MoqReader_starGenType_ReadSlice_paramsKey {
	m.Scene.T.Helper()
	var delimUsed byte
	var delimUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadSlice.Delim == moq.ParamIndexByValue {
			delimUsed = params.Delim
		} else {
			delimUsedHash = hash.DeepHash(params.Delim)
		}
	}
	return MoqReader_starGenType_ReadSlice_paramsKey{
		Params: struct{ Delim byte }{
			Delim: delimUsed,
		},
		Hashes: struct{ Delim hash.Hash }{
			Delim: delimUsedHash,
		},
	}
}

func (m *MoqReader_starGenType_recorder) ReadLine() *MoqReader_starGenType_ReadLine_fnRecorder {
	return &MoqReader_starGenType_ReadLine_fnRecorder{
		Params:   MoqReader_starGenType_ReadLine_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_ReadLine_fnRecorder) Any() *MoqReader_starGenType_ReadLine_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadLine(r.Params))
		return nil
	}
	return &MoqReader_starGenType_ReadLine_anyParams{Recorder: r}
}

func (r *MoqReader_starGenType_ReadLine_fnRecorder) Seq() *MoqReader_starGenType_ReadLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadLine(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_ReadLine_fnRecorder) NoSeq() *MoqReader_starGenType_ReadLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadLine(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_ReadLine_fnRecorder) ReturnResults(line []byte, isPrefix bool, err error) *MoqReader_starGenType_ReadLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Line     []byte
			IsPrefix bool
			Err      error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadLine_doFn
		DoReturnFn MoqReader_starGenType_ReadLine_doReturnFn
	}{
		Values: &struct {
			Line     []byte
			IsPrefix bool
			Err      error
		}{
			Line:     line,
			IsPrefix: isPrefix,
			Err:      err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_ReadLine_fnRecorder) AndDo(fn MoqReader_starGenType_ReadLine_doFn) *MoqReader_starGenType_ReadLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_ReadLine_fnRecorder) DoReturnResults(fn MoqReader_starGenType_ReadLine_doReturnFn) *MoqReader_starGenType_ReadLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Line     []byte
			IsPrefix bool
			Err      error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadLine_doFn
		DoReturnFn MoqReader_starGenType_ReadLine_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_ReadLine_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_ReadLine_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadLine {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_ReadLine_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_ReadLine_paramsKey]*MoqReader_starGenType_ReadLine_results{},
		}
		r.Moq.ResultsByParams_ReadLine = append(r.Moq.ResultsByParams_ReadLine, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadLine) {
			copy(r.Moq.ResultsByParams_ReadLine[insertAt+1:], r.Moq.ResultsByParams_ReadLine[insertAt:0])
			r.Moq.ResultsByParams_ReadLine[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadLine(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_ReadLine_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_ReadLine_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_ReadLine_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Line     []byte
					IsPrefix bool
					Err      error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_ReadLine_doFn
				DoReturnFn MoqReader_starGenType_ReadLine_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_ReadLine(params MoqReader_starGenType_ReadLine_params) string {
	return fmt.Sprintf("ReadLine()")
}

func (m *MoqReader_starGenType) ParamsKey_ReadLine(params MoqReader_starGenType_ReadLine_params, anyParams uint64) MoqReader_starGenType_ReadLine_paramsKey {
	m.Scene.T.Helper()
	return MoqReader_starGenType_ReadLine_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqReader_starGenType_recorder) ReadBytes(delim byte) *MoqReader_starGenType_ReadBytes_fnRecorder {
	return &MoqReader_starGenType_ReadBytes_fnRecorder{
		Params: MoqReader_starGenType_ReadBytes_params{
			Delim: delim,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_ReadBytes_fnRecorder) Any() *MoqReader_starGenType_ReadBytes_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadBytes(r.Params))
		return nil
	}
	return &MoqReader_starGenType_ReadBytes_anyParams{Recorder: r}
}

func (a *MoqReader_starGenType_ReadBytes_anyParams) Delim() *MoqReader_starGenType_ReadBytes_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqReader_starGenType_ReadBytes_fnRecorder) Seq() *MoqReader_starGenType_ReadBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadBytes(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_ReadBytes_fnRecorder) NoSeq() *MoqReader_starGenType_ReadBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadBytes(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_ReadBytes_fnRecorder) ReturnResults(result1 []byte, result2 error) *MoqReader_starGenType_ReadBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadBytes_doFn
		DoReturnFn MoqReader_starGenType_ReadBytes_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_ReadBytes_fnRecorder) AndDo(fn MoqReader_starGenType_ReadBytes_doFn) *MoqReader_starGenType_ReadBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_ReadBytes_fnRecorder) DoReturnResults(fn MoqReader_starGenType_ReadBytes_doReturnFn) *MoqReader_starGenType_ReadBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadBytes_doFn
		DoReturnFn MoqReader_starGenType_ReadBytes_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_ReadBytes_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_ReadBytes_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadBytes {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_ReadBytes_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_ReadBytes_paramsKey]*MoqReader_starGenType_ReadBytes_results{},
		}
		r.Moq.ResultsByParams_ReadBytes = append(r.Moq.ResultsByParams_ReadBytes, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadBytes) {
			copy(r.Moq.ResultsByParams_ReadBytes[insertAt+1:], r.Moq.ResultsByParams_ReadBytes[insertAt:0])
			r.Moq.ResultsByParams_ReadBytes[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadBytes(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_ReadBytes_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_ReadBytes_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_ReadBytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_ReadBytes_doFn
				DoReturnFn MoqReader_starGenType_ReadBytes_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_ReadBytes(params MoqReader_starGenType_ReadBytes_params) string {
	return fmt.Sprintf("ReadBytes(%#v)", params.Delim)
}

func (m *MoqReader_starGenType) ParamsKey_ReadBytes(params MoqReader_starGenType_ReadBytes_params, anyParams uint64) MoqReader_starGenType_ReadBytes_paramsKey {
	m.Scene.T.Helper()
	var delimUsed byte
	var delimUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadBytes.Delim == moq.ParamIndexByValue {
			delimUsed = params.Delim
		} else {
			delimUsedHash = hash.DeepHash(params.Delim)
		}
	}
	return MoqReader_starGenType_ReadBytes_paramsKey{
		Params: struct{ Delim byte }{
			Delim: delimUsed,
		},
		Hashes: struct{ Delim hash.Hash }{
			Delim: delimUsedHash,
		},
	}
}

func (m *MoqReader_starGenType_recorder) ReadString(delim byte) *MoqReader_starGenType_ReadString_fnRecorder {
	return &MoqReader_starGenType_ReadString_fnRecorder{
		Params: MoqReader_starGenType_ReadString_params{
			Delim: delim,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_ReadString_fnRecorder) Any() *MoqReader_starGenType_ReadString_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadString(r.Params))
		return nil
	}
	return &MoqReader_starGenType_ReadString_anyParams{Recorder: r}
}

func (a *MoqReader_starGenType_ReadString_anyParams) Delim() *MoqReader_starGenType_ReadString_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqReader_starGenType_ReadString_fnRecorder) Seq() *MoqReader_starGenType_ReadString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadString(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_ReadString_fnRecorder) NoSeq() *MoqReader_starGenType_ReadString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadString(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_ReadString_fnRecorder) ReturnResults(result1 string, result2 error) *MoqReader_starGenType_ReadString_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadString_doFn
		DoReturnFn MoqReader_starGenType_ReadString_doReturnFn
	}{
		Values: &struct {
			Result1 string
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_ReadString_fnRecorder) AndDo(fn MoqReader_starGenType_ReadString_doFn) *MoqReader_starGenType_ReadString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_ReadString_fnRecorder) DoReturnResults(fn MoqReader_starGenType_ReadString_doReturnFn) *MoqReader_starGenType_ReadString_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_ReadString_doFn
		DoReturnFn MoqReader_starGenType_ReadString_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_ReadString_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_ReadString_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadString {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_ReadString_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_ReadString_paramsKey]*MoqReader_starGenType_ReadString_results{},
		}
		r.Moq.ResultsByParams_ReadString = append(r.Moq.ResultsByParams_ReadString, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadString) {
			copy(r.Moq.ResultsByParams_ReadString[insertAt+1:], r.Moq.ResultsByParams_ReadString[insertAt:0])
			r.Moq.ResultsByParams_ReadString[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadString(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_ReadString_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_ReadString_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_ReadString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_ReadString_doFn
				DoReturnFn MoqReader_starGenType_ReadString_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_ReadString(params MoqReader_starGenType_ReadString_params) string {
	return fmt.Sprintf("ReadString(%#v)", params.Delim)
}

func (m *MoqReader_starGenType) ParamsKey_ReadString(params MoqReader_starGenType_ReadString_params, anyParams uint64) MoqReader_starGenType_ReadString_paramsKey {
	m.Scene.T.Helper()
	var delimUsed byte
	var delimUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadString.Delim == moq.ParamIndexByValue {
			delimUsed = params.Delim
		} else {
			delimUsedHash = hash.DeepHash(params.Delim)
		}
	}
	return MoqReader_starGenType_ReadString_paramsKey{
		Params: struct{ Delim byte }{
			Delim: delimUsed,
		},
		Hashes: struct{ Delim hash.Hash }{
			Delim: delimUsedHash,
		},
	}
}

func (m *MoqReader_starGenType_recorder) WriteTo(w io.Writer) *MoqReader_starGenType_WriteTo_fnRecorder {
	return &MoqReader_starGenType_WriteTo_fnRecorder{
		Params: MoqReader_starGenType_WriteTo_params{
			W: w,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReader_starGenType_WriteTo_fnRecorder) Any() *MoqReader_starGenType_WriteTo_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteTo(r.Params))
		return nil
	}
	return &MoqReader_starGenType_WriteTo_anyParams{Recorder: r}
}

func (a *MoqReader_starGenType_WriteTo_anyParams) W() *MoqReader_starGenType_WriteTo_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqReader_starGenType_WriteTo_fnRecorder) Seq() *MoqReader_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteTo(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReader_starGenType_WriteTo_fnRecorder) NoSeq() *MoqReader_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteTo(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReader_starGenType_WriteTo_fnRecorder) ReturnResults(n int64, err error) *MoqReader_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int64
			Err error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_WriteTo_doFn
		DoReturnFn MoqReader_starGenType_WriteTo_doReturnFn
	}{
		Values: &struct {
			N   int64
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReader_starGenType_WriteTo_fnRecorder) AndDo(fn MoqReader_starGenType_WriteTo_doFn) *MoqReader_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReader_starGenType_WriteTo_fnRecorder) DoReturnResults(fn MoqReader_starGenType_WriteTo_doReturnFn) *MoqReader_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int64
			Err error
		}
		Sequence   uint32
		DoFn       MoqReader_starGenType_WriteTo_doFn
		DoReturnFn MoqReader_starGenType_WriteTo_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReader_starGenType_WriteTo_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReader_starGenType_WriteTo_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteTo {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReader_starGenType_WriteTo_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReader_starGenType_WriteTo_paramsKey]*MoqReader_starGenType_WriteTo_results{},
		}
		r.Moq.ResultsByParams_WriteTo = append(r.Moq.ResultsByParams_WriteTo, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteTo) {
			copy(r.Moq.ResultsByParams_WriteTo[insertAt+1:], r.Moq.ResultsByParams_WriteTo[insertAt:0])
			r.Moq.ResultsByParams_WriteTo[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteTo(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReader_starGenType_WriteTo_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReader_starGenType_WriteTo_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReader_starGenType_WriteTo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int64
					Err error
				}
				Sequence   uint32
				DoFn       MoqReader_starGenType_WriteTo_doFn
				DoReturnFn MoqReader_starGenType_WriteTo_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReader_starGenType) PrettyParams_WriteTo(params MoqReader_starGenType_WriteTo_params) string {
	return fmt.Sprintf("WriteTo(%#v)", params.W)
}

func (m *MoqReader_starGenType) ParamsKey_WriteTo(params MoqReader_starGenType_WriteTo_params, anyParams uint64) MoqReader_starGenType_WriteTo_paramsKey {
	m.Scene.T.Helper()
	var wUsed io.Writer
	var wUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteTo.W == moq.ParamIndexByValue {
			wUsed = params.W
		} else {
			wUsedHash = hash.DeepHash(params.W)
		}
	}
	return MoqReader_starGenType_WriteTo_paramsKey{
		Params: struct{ W io.Writer }{
			W: wUsed,
		},
		Hashes: struct{ W hash.Hash }{
			W: wUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqReader_starGenType) Reset() {
	m.ResultsByParams_Size = nil
	m.ResultsByParams_Reset = nil
	m.ResultsByParams_Peek = nil
	m.ResultsByParams_Discard = nil
	m.ResultsByParams_Read = nil
	m.ResultsByParams_ReadByte = nil
	m.ResultsByParams_UnreadByte = nil
	m.ResultsByParams_ReadRune = nil
	m.ResultsByParams_UnreadRune = nil
	m.ResultsByParams_Buffered = nil
	m.ResultsByParams_ReadSlice = nil
	m.ResultsByParams_ReadLine = nil
	m.ResultsByParams_ReadBytes = nil
	m.ResultsByParams_ReadString = nil
	m.ResultsByParams_WriteTo = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqReader_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Size {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Size(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Reset {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Reset(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Peek {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Peek(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Discard {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Discard(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Read {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Read(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadByte {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadByte(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_UnreadByte {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_UnreadByte(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadRune {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadRune(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_UnreadRune {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_UnreadRune(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Buffered {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Buffered(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadSlice {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadSlice(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadLine {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadLine(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadBytes {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadBytes(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadString {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadString(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteTo {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteTo(results.Params))
			}
		}
	}
}
