// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package bufio

import (
	"fmt"
	"io"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that bufio.Writer_starGenType is mocked
// completely
var _ Writer_starGenType = (*MoqWriter_starGenType_mock)(nil)

// Writer_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Writer_starGenType interface {
	Size() int
	Reset(w io.Writer)
	Flush() error
	Available() int
	AvailableBuffer() []byte
	Buffered() int
	Write(p []byte) (nn int, err error)
	WriteByte(c byte) error
	WriteRune(r rune) (size int, err error)
	WriteString(s string) (int, error)
	ReadFrom(r io.Reader) (n int64, err error)
}

// MoqWriter_starGenType holds the state of a moq of the Writer_starGenType
// type
type MoqWriter_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqWriter_starGenType_mock

	ResultsByParams_Size            []MoqWriter_starGenType_Size_resultsByParams
	ResultsByParams_Reset           []MoqWriter_starGenType_Reset_resultsByParams
	ResultsByParams_Flush           []MoqWriter_starGenType_Flush_resultsByParams
	ResultsByParams_Available       []MoqWriter_starGenType_Available_resultsByParams
	ResultsByParams_AvailableBuffer []MoqWriter_starGenType_AvailableBuffer_resultsByParams
	ResultsByParams_Buffered        []MoqWriter_starGenType_Buffered_resultsByParams
	ResultsByParams_Write           []MoqWriter_starGenType_Write_resultsByParams
	ResultsByParams_WriteByte       []MoqWriter_starGenType_WriteByte_resultsByParams
	ResultsByParams_WriteRune       []MoqWriter_starGenType_WriteRune_resultsByParams
	ResultsByParams_WriteString     []MoqWriter_starGenType_WriteString_resultsByParams
	ResultsByParams_ReadFrom        []MoqWriter_starGenType_ReadFrom_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Size  struct{}
			Reset struct {
				W moq.ParamIndexing
			}
			Flush           struct{}
			Available       struct{}
			AvailableBuffer struct{}
			Buffered        struct{}
			Write           struct {
				P moq.ParamIndexing
			}
			WriteByte struct {
				C moq.ParamIndexing
			}
			WriteRune struct {
				Param1 moq.ParamIndexing
			}
			WriteString struct {
				S moq.ParamIndexing
			}
			ReadFrom struct {
				Param1 moq.ParamIndexing
			}
		}
	}
	// MoqWriter_starGenType_mock isolates the mock interface of the
}

// Writer_starGenType type
type MoqWriter_starGenType_mock struct {
	Moq *MoqWriter_starGenType
}

// MoqWriter_starGenType_recorder isolates the recorder interface of the
// Writer_starGenType type
type MoqWriter_starGenType_recorder struct {
	Moq *MoqWriter_starGenType
}

// MoqWriter_starGenType_Size_params holds the params of the Writer_starGenType
// type
type MoqWriter_starGenType_Size_params struct{}

// MoqWriter_starGenType_Size_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Size_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWriter_starGenType_Size_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Size_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Size_paramsKey]*MoqWriter_starGenType_Size_results
}

// MoqWriter_starGenType_Size_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Size_doFn func()

// MoqWriter_starGenType_Size_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Size_doReturnFn func() int

// MoqWriter_starGenType_Size_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Size_results struct {
	Params  MoqWriter_starGenType_Size_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Size_doFn
		DoReturnFn MoqWriter_starGenType_Size_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Size_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Size_fnRecorder struct {
	Params    MoqWriter_starGenType_Size_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Size_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Size_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Size_anyParams struct {
	Recorder *MoqWriter_starGenType_Size_fnRecorder
}

// MoqWriter_starGenType_Reset_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Reset_params struct{ W io.Writer }

// MoqWriter_starGenType_Reset_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Reset_paramsKey struct {
	Params struct{ W io.Writer }
	Hashes struct{ W hash.Hash }
}

// MoqWriter_starGenType_Reset_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Reset_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Reset_paramsKey]*MoqWriter_starGenType_Reset_results
}

// MoqWriter_starGenType_Reset_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Reset_doFn func(w io.Writer)

// MoqWriter_starGenType_Reset_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Reset_doReturnFn func(w io.Writer)

// MoqWriter_starGenType_Reset_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Reset_results struct {
	Params  MoqWriter_starGenType_Reset_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Reset_doFn
		DoReturnFn MoqWriter_starGenType_Reset_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Reset_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Reset_fnRecorder struct {
	Params    MoqWriter_starGenType_Reset_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Reset_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Reset_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Reset_anyParams struct {
	Recorder *MoqWriter_starGenType_Reset_fnRecorder
}

// MoqWriter_starGenType_Flush_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Flush_params struct{}

// MoqWriter_starGenType_Flush_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Flush_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWriter_starGenType_Flush_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Flush_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Flush_paramsKey]*MoqWriter_starGenType_Flush_results
}

// MoqWriter_starGenType_Flush_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Flush_doFn func()

// MoqWriter_starGenType_Flush_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Flush_doReturnFn func() error

// MoqWriter_starGenType_Flush_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Flush_results struct {
	Params  MoqWriter_starGenType_Flush_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Flush_doFn
		DoReturnFn MoqWriter_starGenType_Flush_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Flush_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Flush_fnRecorder struct {
	Params    MoqWriter_starGenType_Flush_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Flush_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Flush_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Flush_anyParams struct {
	Recorder *MoqWriter_starGenType_Flush_fnRecorder
}

// MoqWriter_starGenType_Available_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Available_params struct{}

// MoqWriter_starGenType_Available_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Available_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWriter_starGenType_Available_resultsByParams contains the results for a
// given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Available_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Available_paramsKey]*MoqWriter_starGenType_Available_results
}

// MoqWriter_starGenType_Available_doFn defines the type of function needed
// when calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Available_doFn func()

// MoqWriter_starGenType_Available_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Available_doReturnFn func() int

// MoqWriter_starGenType_Available_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Available_results struct {
	Params  MoqWriter_starGenType_Available_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Available_doFn
		DoReturnFn MoqWriter_starGenType_Available_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Available_fnRecorder routes recorded function calls to
// the MoqWriter_starGenType moq
type MoqWriter_starGenType_Available_fnRecorder struct {
	Params    MoqWriter_starGenType_Available_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Available_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Available_anyParams isolates the any params functions
// of the Writer_starGenType type
type MoqWriter_starGenType_Available_anyParams struct {
	Recorder *MoqWriter_starGenType_Available_fnRecorder
}

// MoqWriter_starGenType_AvailableBuffer_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_AvailableBuffer_params struct{}

// MoqWriter_starGenType_AvailableBuffer_paramsKey holds the map key params of
// the Writer_starGenType type
type MoqWriter_starGenType_AvailableBuffer_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWriter_starGenType_AvailableBuffer_resultsByParams contains the results
// for a given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_AvailableBuffer_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_AvailableBuffer_paramsKey]*MoqWriter_starGenType_AvailableBuffer_results
}

// MoqWriter_starGenType_AvailableBuffer_doFn defines the type of function
// needed when calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_AvailableBuffer_doFn func()

// MoqWriter_starGenType_AvailableBuffer_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_AvailableBuffer_doReturnFn func() []byte

// MoqWriter_starGenType_AvailableBuffer_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_AvailableBuffer_results struct {
	Params  MoqWriter_starGenType_AvailableBuffer_params
	Results []struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_AvailableBuffer_doFn
		DoReturnFn MoqWriter_starGenType_AvailableBuffer_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_AvailableBuffer_fnRecorder routes recorded function
// calls to the MoqWriter_starGenType moq
type MoqWriter_starGenType_AvailableBuffer_fnRecorder struct {
	Params    MoqWriter_starGenType_AvailableBuffer_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_AvailableBuffer_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_AvailableBuffer_anyParams isolates the any params
// functions of the Writer_starGenType type
type MoqWriter_starGenType_AvailableBuffer_anyParams struct {
	Recorder *MoqWriter_starGenType_AvailableBuffer_fnRecorder
}

// MoqWriter_starGenType_Buffered_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Buffered_params struct{}

// MoqWriter_starGenType_Buffered_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Buffered_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWriter_starGenType_Buffered_resultsByParams contains the results for a
// given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Buffered_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Buffered_paramsKey]*MoqWriter_starGenType_Buffered_results
}

// MoqWriter_starGenType_Buffered_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Buffered_doFn func()

// MoqWriter_starGenType_Buffered_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Buffered_doReturnFn func() int

// MoqWriter_starGenType_Buffered_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Buffered_results struct {
	Params  MoqWriter_starGenType_Buffered_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Buffered_doFn
		DoReturnFn MoqWriter_starGenType_Buffered_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Buffered_fnRecorder routes recorded function calls to
// the MoqWriter_starGenType moq
type MoqWriter_starGenType_Buffered_fnRecorder struct {
	Params    MoqWriter_starGenType_Buffered_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Buffered_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Buffered_anyParams isolates the any params functions
// of the Writer_starGenType type
type MoqWriter_starGenType_Buffered_anyParams struct {
	Recorder *MoqWriter_starGenType_Buffered_fnRecorder
}

// MoqWriter_starGenType_Write_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Write_params struct{ P []byte }

// MoqWriter_starGenType_Write_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Write_paramsKey struct {
	Params struct{}
	Hashes struct{ P hash.Hash }
}

// MoqWriter_starGenType_Write_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Write_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Write_paramsKey]*MoqWriter_starGenType_Write_results
}

// MoqWriter_starGenType_Write_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Write_doFn func(p []byte)

// MoqWriter_starGenType_Write_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Write_doReturnFn func(p []byte) (nn int, err error)

// MoqWriter_starGenType_Write_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Write_results struct {
	Params  MoqWriter_starGenType_Write_params
	Results []struct {
		Values *struct {
			Nn  int
			Err error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Write_doFn
		DoReturnFn MoqWriter_starGenType_Write_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Write_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Write_fnRecorder struct {
	Params    MoqWriter_starGenType_Write_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Write_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Write_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Write_anyParams struct {
	Recorder *MoqWriter_starGenType_Write_fnRecorder
}

// MoqWriter_starGenType_WriteByte_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_WriteByte_params struct{ C byte }

// MoqWriter_starGenType_WriteByte_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_WriteByte_paramsKey struct {
	Params struct{ C byte }
	Hashes struct{ C hash.Hash }
}

// MoqWriter_starGenType_WriteByte_resultsByParams contains the results for a
// given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_WriteByte_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_WriteByte_paramsKey]*MoqWriter_starGenType_WriteByte_results
}

// MoqWriter_starGenType_WriteByte_doFn defines the type of function needed
// when calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_WriteByte_doFn func(c byte)

// MoqWriter_starGenType_WriteByte_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_WriteByte_doReturnFn func(c byte) error

// MoqWriter_starGenType_WriteByte_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_WriteByte_results struct {
	Params  MoqWriter_starGenType_WriteByte_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_WriteByte_doFn
		DoReturnFn MoqWriter_starGenType_WriteByte_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_WriteByte_fnRecorder routes recorded function calls to
// the MoqWriter_starGenType moq
type MoqWriter_starGenType_WriteByte_fnRecorder struct {
	Params    MoqWriter_starGenType_WriteByte_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_WriteByte_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_WriteByte_anyParams isolates the any params functions
// of the Writer_starGenType type
type MoqWriter_starGenType_WriteByte_anyParams struct {
	Recorder *MoqWriter_starGenType_WriteByte_fnRecorder
}

// MoqWriter_starGenType_WriteRune_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_WriteRune_params struct{ Param1 rune }

// MoqWriter_starGenType_WriteRune_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_WriteRune_paramsKey struct {
	Params struct{ Param1 rune }
	Hashes struct{ Param1 hash.Hash }
}

// MoqWriter_starGenType_WriteRune_resultsByParams contains the results for a
// given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_WriteRune_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_WriteRune_paramsKey]*MoqWriter_starGenType_WriteRune_results
}

// MoqWriter_starGenType_WriteRune_doFn defines the type of function needed
// when calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_WriteRune_doFn func(r rune)

// MoqWriter_starGenType_WriteRune_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_WriteRune_doReturnFn func(r rune) (size int, err error)

// MoqWriter_starGenType_WriteRune_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_WriteRune_results struct {
	Params  MoqWriter_starGenType_WriteRune_params
	Results []struct {
		Values *struct {
			Size int
			Err  error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_WriteRune_doFn
		DoReturnFn MoqWriter_starGenType_WriteRune_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_WriteRune_fnRecorder routes recorded function calls to
// the MoqWriter_starGenType moq
type MoqWriter_starGenType_WriteRune_fnRecorder struct {
	Params    MoqWriter_starGenType_WriteRune_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_WriteRune_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_WriteRune_anyParams isolates the any params functions
// of the Writer_starGenType type
type MoqWriter_starGenType_WriteRune_anyParams struct {
	Recorder *MoqWriter_starGenType_WriteRune_fnRecorder
}

// MoqWriter_starGenType_WriteString_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_WriteString_params struct{ S string }

// MoqWriter_starGenType_WriteString_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_WriteString_paramsKey struct {
	Params struct{ S string }
	Hashes struct{ S hash.Hash }
}

// MoqWriter_starGenType_WriteString_resultsByParams contains the results for a
// given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_WriteString_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_WriteString_paramsKey]*MoqWriter_starGenType_WriteString_results
}

// MoqWriter_starGenType_WriteString_doFn defines the type of function needed
// when calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_WriteString_doFn func(s string)

// MoqWriter_starGenType_WriteString_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_WriteString_doReturnFn func(s string) (int, error)

// MoqWriter_starGenType_WriteString_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_WriteString_results struct {
	Params  MoqWriter_starGenType_WriteString_params
	Results []struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_WriteString_doFn
		DoReturnFn MoqWriter_starGenType_WriteString_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_WriteString_fnRecorder routes recorded function calls
// to the MoqWriter_starGenType moq
type MoqWriter_starGenType_WriteString_fnRecorder struct {
	Params    MoqWriter_starGenType_WriteString_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_WriteString_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_WriteString_anyParams isolates the any params
// functions of the Writer_starGenType type
type MoqWriter_starGenType_WriteString_anyParams struct {
	Recorder *MoqWriter_starGenType_WriteString_fnRecorder
}

// MoqWriter_starGenType_ReadFrom_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_ReadFrom_params struct{ Param1 io.Reader }

// MoqWriter_starGenType_ReadFrom_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_ReadFrom_paramsKey struct {
	Params struct{ Param1 io.Reader }
	Hashes struct{ Param1 hash.Hash }
}

// MoqWriter_starGenType_ReadFrom_resultsByParams contains the results for a
// given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_ReadFrom_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_ReadFrom_paramsKey]*MoqWriter_starGenType_ReadFrom_results
}

// MoqWriter_starGenType_ReadFrom_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_ReadFrom_doFn func(r io.Reader)

// MoqWriter_starGenType_ReadFrom_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_ReadFrom_doReturnFn func(r io.Reader) (n int64, err error)

// MoqWriter_starGenType_ReadFrom_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_ReadFrom_results struct {
	Params  MoqWriter_starGenType_ReadFrom_params
	Results []struct {
		Values *struct {
			N   int64
			Err error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_ReadFrom_doFn
		DoReturnFn MoqWriter_starGenType_ReadFrom_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_ReadFrom_fnRecorder routes recorded function calls to
// the MoqWriter_starGenType moq
type MoqWriter_starGenType_ReadFrom_fnRecorder struct {
	Params    MoqWriter_starGenType_ReadFrom_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_ReadFrom_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_ReadFrom_anyParams isolates the any params functions
// of the Writer_starGenType type
type MoqWriter_starGenType_ReadFrom_anyParams struct {
	Recorder *MoqWriter_starGenType_ReadFrom_fnRecorder
}

// NewMoqWriter_starGenType creates a new moq of the Writer_starGenType type
func NewMoqWriter_starGenType(scene *moq.Scene, config *moq.Config) *MoqWriter_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqWriter_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqWriter_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Size  struct{}
				Reset struct {
					W moq.ParamIndexing
				}
				Flush           struct{}
				Available       struct{}
				AvailableBuffer struct{}
				Buffered        struct{}
				Write           struct {
					P moq.ParamIndexing
				}
				WriteByte struct {
					C moq.ParamIndexing
				}
				WriteRune struct {
					Param1 moq.ParamIndexing
				}
				WriteString struct {
					S moq.ParamIndexing
				}
				ReadFrom struct {
					Param1 moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Size  struct{}
			Reset struct {
				W moq.ParamIndexing
			}
			Flush           struct{}
			Available       struct{}
			AvailableBuffer struct{}
			Buffered        struct{}
			Write           struct {
				P moq.ParamIndexing
			}
			WriteByte struct {
				C moq.ParamIndexing
			}
			WriteRune struct {
				Param1 moq.ParamIndexing
			}
			WriteString struct {
				S moq.ParamIndexing
			}
			ReadFrom struct {
				Param1 moq.ParamIndexing
			}
		}{
			Size: struct{}{},
			Reset: struct {
				W moq.ParamIndexing
			}{
				W: moq.ParamIndexByHash,
			},
			Flush:           struct{}{},
			Available:       struct{}{},
			AvailableBuffer: struct{}{},
			Buffered:        struct{}{},
			Write: struct {
				P moq.ParamIndexing
			}{
				P: moq.ParamIndexByHash,
			},
			WriteByte: struct {
				C moq.ParamIndexing
			}{
				C: moq.ParamIndexByValue,
			},
			WriteRune: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
			},
			WriteString: struct {
				S moq.ParamIndexing
			}{
				S: moq.ParamIndexByValue,
			},
			ReadFrom: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Writer_starGenType type
func (m *MoqWriter_starGenType) Mock() *MoqWriter_starGenType_mock { return m.Moq }

func (m *MoqWriter_starGenType_mock) Size() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Size_params{}
	var results *MoqWriter_starGenType_Size_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Size {
		paramsKey := m.Moq.ParamsKey_Size(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Size(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Size(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Size(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWriter_starGenType_mock) Reset(w io.Writer) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Reset_params{
		W: w,
	}
	var results *MoqWriter_starGenType_Reset_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Reset {
		paramsKey := m.Moq.ParamsKey_Reset(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Reset(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Reset(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Reset(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(w)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(w)
	}
	return
}

func (m *MoqWriter_starGenType_mock) Flush() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Flush_params{}
	var results *MoqWriter_starGenType_Flush_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Flush {
		paramsKey := m.Moq.ParamsKey_Flush(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Flush(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Flush(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Flush(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWriter_starGenType_mock) Available() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Available_params{}
	var results *MoqWriter_starGenType_Available_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Available {
		paramsKey := m.Moq.ParamsKey_Available(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Available(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Available(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Available(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWriter_starGenType_mock) AvailableBuffer() (result1 []byte) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_AvailableBuffer_params{}
	var results *MoqWriter_starGenType_AvailableBuffer_results
	for _, resultsByParams := range m.Moq.ResultsByParams_AvailableBuffer {
		paramsKey := m.Moq.ParamsKey_AvailableBuffer(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_AvailableBuffer(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_AvailableBuffer(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_AvailableBuffer(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWriter_starGenType_mock) Buffered() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Buffered_params{}
	var results *MoqWriter_starGenType_Buffered_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Buffered {
		paramsKey := m.Moq.ParamsKey_Buffered(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Buffered(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Buffered(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Buffered(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWriter_starGenType_mock) Write(p []byte) (nn int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Write_params{
		P: p,
	}
	var results *MoqWriter_starGenType_Write_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Write {
		paramsKey := m.Moq.ParamsKey_Write(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Write(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Write(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Write(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p)
	}

	if result.Values != nil {
		nn = result.Values.Nn
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		nn, err = result.DoReturnFn(p)
	}
	return
}

func (m *MoqWriter_starGenType_mock) WriteByte(c byte) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_WriteByte_params{
		C: c,
	}
	var results *MoqWriter_starGenType_WriteByte_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteByte {
		paramsKey := m.Moq.ParamsKey_WriteByte(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteByte(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteByte(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteByte(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(c)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(c)
	}
	return
}

func (m *MoqWriter_starGenType_mock) WriteRune(param1 rune) (size int, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_WriteRune_params{
		Param1: param1,
	}
	var results *MoqWriter_starGenType_WriteRune_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteRune {
		paramsKey := m.Moq.ParamsKey_WriteRune(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteRune(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteRune(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteRune(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		size = result.Values.Size
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		size, err = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqWriter_starGenType_mock) WriteString(s string) (result1 int, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_WriteString_params{
		S: s,
	}
	var results *MoqWriter_starGenType_WriteString_results
	for _, resultsByParams := range m.Moq.ResultsByParams_WriteString {
		paramsKey := m.Moq.ParamsKey_WriteString(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_WriteString(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_WriteString(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_WriteString(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(s)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(s)
	}
	return
}

func (m *MoqWriter_starGenType_mock) ReadFrom(param1 io.Reader) (n int64, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_ReadFrom_params{
		Param1: param1,
	}
	var results *MoqWriter_starGenType_ReadFrom_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ReadFrom {
		paramsKey := m.Moq.ParamsKey_ReadFrom(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ReadFrom(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ReadFrom(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ReadFrom(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		n = result.Values.N
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		n, err = result.DoReturnFn(param1)
	}
	return
}

// OnCall returns the recorder implementation of the Writer_starGenType type
func (m *MoqWriter_starGenType) OnCall() *MoqWriter_starGenType_recorder {
	return &MoqWriter_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqWriter_starGenType_recorder) Size() *MoqWriter_starGenType_Size_fnRecorder {
	return &MoqWriter_starGenType_Size_fnRecorder{
		Params:   MoqWriter_starGenType_Size_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Size_fnRecorder) Any() *MoqWriter_starGenType_Size_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Size(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Size_anyParams{Recorder: r}
}

func (r *MoqWriter_starGenType_Size_fnRecorder) Seq() *MoqWriter_starGenType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Size(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Size_fnRecorder) NoSeq() *MoqWriter_starGenType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Size(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Size_fnRecorder) ReturnResults(result1 int) *MoqWriter_starGenType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Size_doFn
		DoReturnFn MoqWriter_starGenType_Size_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Size_fnRecorder) AndDo(fn MoqWriter_starGenType_Size_doFn) *MoqWriter_starGenType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Size_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Size_doReturnFn) *MoqWriter_starGenType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Size_doFn
		DoReturnFn MoqWriter_starGenType_Size_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Size_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Size_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Size {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Size_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Size_paramsKey]*MoqWriter_starGenType_Size_results{},
		}
		r.Moq.ResultsByParams_Size = append(r.Moq.ResultsByParams_Size, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Size) {
			copy(r.Moq.ResultsByParams_Size[insertAt+1:], r.Moq.ResultsByParams_Size[insertAt:0])
			r.Moq.ResultsByParams_Size[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Size(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Size_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Size_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Size_doFn
				DoReturnFn MoqWriter_starGenType_Size_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Size(params MoqWriter_starGenType_Size_params) string {
	return fmt.Sprintf("Size()")
}

func (m *MoqWriter_starGenType) ParamsKey_Size(params MoqWriter_starGenType_Size_params, anyParams uint64) MoqWriter_starGenType_Size_paramsKey {
	m.Scene.T.Helper()
	return MoqWriter_starGenType_Size_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWriter_starGenType_recorder) Reset(w io.Writer) *MoqWriter_starGenType_Reset_fnRecorder {
	return &MoqWriter_starGenType_Reset_fnRecorder{
		Params: MoqWriter_starGenType_Reset_params{
			W: w,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Reset_fnRecorder) Any() *MoqWriter_starGenType_Reset_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Reset_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_Reset_anyParams) W() *MoqWriter_starGenType_Reset_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_Reset_fnRecorder) Seq() *MoqWriter_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Reset_fnRecorder) NoSeq() *MoqWriter_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Reset(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Reset_fnRecorder) ReturnResults() *MoqWriter_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Reset_doFn
		DoReturnFn MoqWriter_starGenType_Reset_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Reset_fnRecorder) AndDo(fn MoqWriter_starGenType_Reset_doFn) *MoqWriter_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Reset_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Reset_doReturnFn) *MoqWriter_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Reset_doFn
		DoReturnFn MoqWriter_starGenType_Reset_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Reset_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Reset_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Reset {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Reset_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Reset_paramsKey]*MoqWriter_starGenType_Reset_results{},
		}
		r.Moq.ResultsByParams_Reset = append(r.Moq.ResultsByParams_Reset, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Reset) {
			copy(r.Moq.ResultsByParams_Reset[insertAt+1:], r.Moq.ResultsByParams_Reset[insertAt:0])
			r.Moq.ResultsByParams_Reset[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Reset(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Reset_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Reset_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Reset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Reset_doFn
				DoReturnFn MoqWriter_starGenType_Reset_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Reset(params MoqWriter_starGenType_Reset_params) string {
	return fmt.Sprintf("Reset(%#v)", params.W)
}

func (m *MoqWriter_starGenType) ParamsKey_Reset(params MoqWriter_starGenType_Reset_params, anyParams uint64) MoqWriter_starGenType_Reset_paramsKey {
	m.Scene.T.Helper()
	var wUsed io.Writer
	var wUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Reset.W == moq.ParamIndexByValue {
			wUsed = params.W
		} else {
			wUsedHash = hash.DeepHash(params.W)
		}
	}
	return MoqWriter_starGenType_Reset_paramsKey{
		Params: struct{ W io.Writer }{
			W: wUsed,
		},
		Hashes: struct{ W hash.Hash }{
			W: wUsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) Flush() *MoqWriter_starGenType_Flush_fnRecorder {
	return &MoqWriter_starGenType_Flush_fnRecorder{
		Params:   MoqWriter_starGenType_Flush_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) Any() *MoqWriter_starGenType_Flush_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Flush(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Flush_anyParams{Recorder: r}
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) Seq() *MoqWriter_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Flush(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) NoSeq() *MoqWriter_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Flush(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Flush_doFn
		DoReturnFn MoqWriter_starGenType_Flush_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) AndDo(fn MoqWriter_starGenType_Flush_doFn) *MoqWriter_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Flush_doReturnFn) *MoqWriter_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Flush_doFn
		DoReturnFn MoqWriter_starGenType_Flush_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Flush_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Flush {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Flush_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Flush_paramsKey]*MoqWriter_starGenType_Flush_results{},
		}
		r.Moq.ResultsByParams_Flush = append(r.Moq.ResultsByParams_Flush, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Flush) {
			copy(r.Moq.ResultsByParams_Flush[insertAt+1:], r.Moq.ResultsByParams_Flush[insertAt:0])
			r.Moq.ResultsByParams_Flush[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Flush(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Flush_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Flush_doFn
				DoReturnFn MoqWriter_starGenType_Flush_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Flush(params MoqWriter_starGenType_Flush_params) string {
	return fmt.Sprintf("Flush()")
}

func (m *MoqWriter_starGenType) ParamsKey_Flush(params MoqWriter_starGenType_Flush_params, anyParams uint64) MoqWriter_starGenType_Flush_paramsKey {
	m.Scene.T.Helper()
	return MoqWriter_starGenType_Flush_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWriter_starGenType_recorder) Available() *MoqWriter_starGenType_Available_fnRecorder {
	return &MoqWriter_starGenType_Available_fnRecorder{
		Params:   MoqWriter_starGenType_Available_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Available_fnRecorder) Any() *MoqWriter_starGenType_Available_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Available(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Available_anyParams{Recorder: r}
}

func (r *MoqWriter_starGenType_Available_fnRecorder) Seq() *MoqWriter_starGenType_Available_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Available(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Available_fnRecorder) NoSeq() *MoqWriter_starGenType_Available_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Available(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Available_fnRecorder) ReturnResults(result1 int) *MoqWriter_starGenType_Available_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Available_doFn
		DoReturnFn MoqWriter_starGenType_Available_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Available_fnRecorder) AndDo(fn MoqWriter_starGenType_Available_doFn) *MoqWriter_starGenType_Available_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Available_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Available_doReturnFn) *MoqWriter_starGenType_Available_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Available_doFn
		DoReturnFn MoqWriter_starGenType_Available_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Available_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Available_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Available {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Available_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Available_paramsKey]*MoqWriter_starGenType_Available_results{},
		}
		r.Moq.ResultsByParams_Available = append(r.Moq.ResultsByParams_Available, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Available) {
			copy(r.Moq.ResultsByParams_Available[insertAt+1:], r.Moq.ResultsByParams_Available[insertAt:0])
			r.Moq.ResultsByParams_Available[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Available(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Available_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Available_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Available_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Available_doFn
				DoReturnFn MoqWriter_starGenType_Available_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Available(params MoqWriter_starGenType_Available_params) string {
	return fmt.Sprintf("Available()")
}

func (m *MoqWriter_starGenType) ParamsKey_Available(params MoqWriter_starGenType_Available_params, anyParams uint64) MoqWriter_starGenType_Available_paramsKey {
	m.Scene.T.Helper()
	return MoqWriter_starGenType_Available_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWriter_starGenType_recorder) AvailableBuffer() *MoqWriter_starGenType_AvailableBuffer_fnRecorder {
	return &MoqWriter_starGenType_AvailableBuffer_fnRecorder{
		Params:   MoqWriter_starGenType_AvailableBuffer_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_AvailableBuffer_fnRecorder) Any() *MoqWriter_starGenType_AvailableBuffer_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AvailableBuffer(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_AvailableBuffer_anyParams{Recorder: r}
}

func (r *MoqWriter_starGenType_AvailableBuffer_fnRecorder) Seq() *MoqWriter_starGenType_AvailableBuffer_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AvailableBuffer(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_AvailableBuffer_fnRecorder) NoSeq() *MoqWriter_starGenType_AvailableBuffer_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AvailableBuffer(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_AvailableBuffer_fnRecorder) ReturnResults(result1 []byte) *MoqWriter_starGenType_AvailableBuffer_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_AvailableBuffer_doFn
		DoReturnFn MoqWriter_starGenType_AvailableBuffer_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_AvailableBuffer_fnRecorder) AndDo(fn MoqWriter_starGenType_AvailableBuffer_doFn) *MoqWriter_starGenType_AvailableBuffer_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_AvailableBuffer_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_AvailableBuffer_doReturnFn) *MoqWriter_starGenType_AvailableBuffer_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_AvailableBuffer_doFn
		DoReturnFn MoqWriter_starGenType_AvailableBuffer_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_AvailableBuffer_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_AvailableBuffer_resultsByParams
	for n, res := range r.Moq.ResultsByParams_AvailableBuffer {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_AvailableBuffer_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_AvailableBuffer_paramsKey]*MoqWriter_starGenType_AvailableBuffer_results{},
		}
		r.Moq.ResultsByParams_AvailableBuffer = append(r.Moq.ResultsByParams_AvailableBuffer, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_AvailableBuffer) {
			copy(r.Moq.ResultsByParams_AvailableBuffer[insertAt+1:], r.Moq.ResultsByParams_AvailableBuffer[insertAt:0])
			r.Moq.ResultsByParams_AvailableBuffer[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_AvailableBuffer(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_AvailableBuffer_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_AvailableBuffer_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_AvailableBuffer_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_AvailableBuffer_doFn
				DoReturnFn MoqWriter_starGenType_AvailableBuffer_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_AvailableBuffer(params MoqWriter_starGenType_AvailableBuffer_params) string {
	return fmt.Sprintf("AvailableBuffer()")
}

func (m *MoqWriter_starGenType) ParamsKey_AvailableBuffer(params MoqWriter_starGenType_AvailableBuffer_params, anyParams uint64) MoqWriter_starGenType_AvailableBuffer_paramsKey {
	m.Scene.T.Helper()
	return MoqWriter_starGenType_AvailableBuffer_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWriter_starGenType_recorder) Buffered() *MoqWriter_starGenType_Buffered_fnRecorder {
	return &MoqWriter_starGenType_Buffered_fnRecorder{
		Params:   MoqWriter_starGenType_Buffered_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Buffered_fnRecorder) Any() *MoqWriter_starGenType_Buffered_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Buffered(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Buffered_anyParams{Recorder: r}
}

func (r *MoqWriter_starGenType_Buffered_fnRecorder) Seq() *MoqWriter_starGenType_Buffered_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Buffered(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Buffered_fnRecorder) NoSeq() *MoqWriter_starGenType_Buffered_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Buffered(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Buffered_fnRecorder) ReturnResults(result1 int) *MoqWriter_starGenType_Buffered_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Buffered_doFn
		DoReturnFn MoqWriter_starGenType_Buffered_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Buffered_fnRecorder) AndDo(fn MoqWriter_starGenType_Buffered_doFn) *MoqWriter_starGenType_Buffered_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Buffered_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Buffered_doReturnFn) *MoqWriter_starGenType_Buffered_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Buffered_doFn
		DoReturnFn MoqWriter_starGenType_Buffered_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Buffered_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Buffered_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Buffered {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Buffered_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Buffered_paramsKey]*MoqWriter_starGenType_Buffered_results{},
		}
		r.Moq.ResultsByParams_Buffered = append(r.Moq.ResultsByParams_Buffered, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Buffered) {
			copy(r.Moq.ResultsByParams_Buffered[insertAt+1:], r.Moq.ResultsByParams_Buffered[insertAt:0])
			r.Moq.ResultsByParams_Buffered[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Buffered(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Buffered_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Buffered_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Buffered_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Buffered_doFn
				DoReturnFn MoqWriter_starGenType_Buffered_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Buffered(params MoqWriter_starGenType_Buffered_params) string {
	return fmt.Sprintf("Buffered()")
}

func (m *MoqWriter_starGenType) ParamsKey_Buffered(params MoqWriter_starGenType_Buffered_params, anyParams uint64) MoqWriter_starGenType_Buffered_paramsKey {
	m.Scene.T.Helper()
	return MoqWriter_starGenType_Buffered_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWriter_starGenType_recorder) Write(p []byte) *MoqWriter_starGenType_Write_fnRecorder {
	return &MoqWriter_starGenType_Write_fnRecorder{
		Params: MoqWriter_starGenType_Write_params{
			P: p,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Write_fnRecorder) Any() *MoqWriter_starGenType_Write_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Write_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_Write_anyParams) P() *MoqWriter_starGenType_Write_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_Write_fnRecorder) Seq() *MoqWriter_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Write_fnRecorder) NoSeq() *MoqWriter_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Write_fnRecorder) ReturnResults(nn int, err error) *MoqWriter_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Nn  int
			Err error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Write_doFn
		DoReturnFn MoqWriter_starGenType_Write_doReturnFn
	}{
		Values: &struct {
			Nn  int
			Err error
		}{
			Nn:  nn,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Write_fnRecorder) AndDo(fn MoqWriter_starGenType_Write_doFn) *MoqWriter_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Write_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Write_doReturnFn) *MoqWriter_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Nn  int
			Err error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Write_doFn
		DoReturnFn MoqWriter_starGenType_Write_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Write_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Write_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Write {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Write_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Write_paramsKey]*MoqWriter_starGenType_Write_results{},
		}
		r.Moq.ResultsByParams_Write = append(r.Moq.ResultsByParams_Write, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Write) {
			copy(r.Moq.ResultsByParams_Write[insertAt+1:], r.Moq.ResultsByParams_Write[insertAt:0])
			r.Moq.ResultsByParams_Write[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Write(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Write_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Write_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Nn  int
					Err error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Write_doFn
				DoReturnFn MoqWriter_starGenType_Write_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Write(params MoqWriter_starGenType_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.P)
}

func (m *MoqWriter_starGenType) ParamsKey_Write(params MoqWriter_starGenType_Write_params, anyParams uint64) MoqWriter_starGenType_Write_paramsKey {
	m.Scene.T.Helper()
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Write.P == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The p parameter of the Write function can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.P)
	}
	return MoqWriter_starGenType_Write_paramsKey{
		Params: struct{}{},
		Hashes: struct{ P hash.Hash }{
			P: pUsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) WriteByte(c byte) *MoqWriter_starGenType_WriteByte_fnRecorder {
	return &MoqWriter_starGenType_WriteByte_fnRecorder{
		Params: MoqWriter_starGenType_WriteByte_params{
			C: c,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_WriteByte_fnRecorder) Any() *MoqWriter_starGenType_WriteByte_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteByte(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_WriteByte_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_WriteByte_anyParams) C() *MoqWriter_starGenType_WriteByte_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_WriteByte_fnRecorder) Seq() *MoqWriter_starGenType_WriteByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteByte(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_WriteByte_fnRecorder) NoSeq() *MoqWriter_starGenType_WriteByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteByte(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_WriteByte_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_WriteByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_WriteByte_doFn
		DoReturnFn MoqWriter_starGenType_WriteByte_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_WriteByte_fnRecorder) AndDo(fn MoqWriter_starGenType_WriteByte_doFn) *MoqWriter_starGenType_WriteByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_WriteByte_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_WriteByte_doReturnFn) *MoqWriter_starGenType_WriteByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_WriteByte_doFn
		DoReturnFn MoqWriter_starGenType_WriteByte_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_WriteByte_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_WriteByte_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteByte {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_WriteByte_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_WriteByte_paramsKey]*MoqWriter_starGenType_WriteByte_results{},
		}
		r.Moq.ResultsByParams_WriteByte = append(r.Moq.ResultsByParams_WriteByte, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteByte) {
			copy(r.Moq.ResultsByParams_WriteByte[insertAt+1:], r.Moq.ResultsByParams_WriteByte[insertAt:0])
			r.Moq.ResultsByParams_WriteByte[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteByte(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_WriteByte_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_WriteByte_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_WriteByte_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_WriteByte_doFn
				DoReturnFn MoqWriter_starGenType_WriteByte_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_WriteByte(params MoqWriter_starGenType_WriteByte_params) string {
	return fmt.Sprintf("WriteByte(%#v)", params.C)
}

func (m *MoqWriter_starGenType) ParamsKey_WriteByte(params MoqWriter_starGenType_WriteByte_params, anyParams uint64) MoqWriter_starGenType_WriteByte_paramsKey {
	m.Scene.T.Helper()
	var cUsed byte
	var cUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteByte.C == moq.ParamIndexByValue {
			cUsed = params.C
		} else {
			cUsedHash = hash.DeepHash(params.C)
		}
	}
	return MoqWriter_starGenType_WriteByte_paramsKey{
		Params: struct{ C byte }{
			C: cUsed,
		},
		Hashes: struct{ C hash.Hash }{
			C: cUsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) WriteRune(param1 rune) *MoqWriter_starGenType_WriteRune_fnRecorder {
	return &MoqWriter_starGenType_WriteRune_fnRecorder{
		Params: MoqWriter_starGenType_WriteRune_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_WriteRune_fnRecorder) Any() *MoqWriter_starGenType_WriteRune_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteRune(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_WriteRune_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_WriteRune_anyParams) Param1() *MoqWriter_starGenType_WriteRune_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_WriteRune_fnRecorder) Seq() *MoqWriter_starGenType_WriteRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteRune(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_WriteRune_fnRecorder) NoSeq() *MoqWriter_starGenType_WriteRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteRune(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_WriteRune_fnRecorder) ReturnResults(size int, err error) *MoqWriter_starGenType_WriteRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Size int
			Err  error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_WriteRune_doFn
		DoReturnFn MoqWriter_starGenType_WriteRune_doReturnFn
	}{
		Values: &struct {
			Size int
			Err  error
		}{
			Size: size,
			Err:  err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_WriteRune_fnRecorder) AndDo(fn MoqWriter_starGenType_WriteRune_doFn) *MoqWriter_starGenType_WriteRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_WriteRune_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_WriteRune_doReturnFn) *MoqWriter_starGenType_WriteRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Size int
			Err  error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_WriteRune_doFn
		DoReturnFn MoqWriter_starGenType_WriteRune_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_WriteRune_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_WriteRune_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteRune {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_WriteRune_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_WriteRune_paramsKey]*MoqWriter_starGenType_WriteRune_results{},
		}
		r.Moq.ResultsByParams_WriteRune = append(r.Moq.ResultsByParams_WriteRune, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteRune) {
			copy(r.Moq.ResultsByParams_WriteRune[insertAt+1:], r.Moq.ResultsByParams_WriteRune[insertAt:0])
			r.Moq.ResultsByParams_WriteRune[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteRune(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_WriteRune_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_WriteRune_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_WriteRune_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Size int
					Err  error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_WriteRune_doFn
				DoReturnFn MoqWriter_starGenType_WriteRune_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_WriteRune(params MoqWriter_starGenType_WriteRune_params) string {
	return fmt.Sprintf("WriteRune(%#v)", params.Param1)
}

func (m *MoqWriter_starGenType) ParamsKey_WriteRune(params MoqWriter_starGenType_WriteRune_params, anyParams uint64) MoqWriter_starGenType_WriteRune_paramsKey {
	m.Scene.T.Helper()
	var param1Used rune
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteRune.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqWriter_starGenType_WriteRune_paramsKey{
		Params: struct{ Param1 rune }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) WriteString(s string) *MoqWriter_starGenType_WriteString_fnRecorder {
	return &MoqWriter_starGenType_WriteString_fnRecorder{
		Params: MoqWriter_starGenType_WriteString_params{
			S: s,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_WriteString_fnRecorder) Any() *MoqWriter_starGenType_WriteString_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteString(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_WriteString_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_WriteString_anyParams) S() *MoqWriter_starGenType_WriteString_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_WriteString_fnRecorder) Seq() *MoqWriter_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteString(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_WriteString_fnRecorder) NoSeq() *MoqWriter_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_WriteString(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_WriteString_fnRecorder) ReturnResults(result1 int, result2 error) *MoqWriter_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_WriteString_doFn
		DoReturnFn MoqWriter_starGenType_WriteString_doReturnFn
	}{
		Values: &struct {
			Result1 int
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_WriteString_fnRecorder) AndDo(fn MoqWriter_starGenType_WriteString_doFn) *MoqWriter_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_WriteString_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_WriteString_doReturnFn) *MoqWriter_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_WriteString_doFn
		DoReturnFn MoqWriter_starGenType_WriteString_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_WriteString_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_WriteString_resultsByParams
	for n, res := range r.Moq.ResultsByParams_WriteString {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_WriteString_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_WriteString_paramsKey]*MoqWriter_starGenType_WriteString_results{},
		}
		r.Moq.ResultsByParams_WriteString = append(r.Moq.ResultsByParams_WriteString, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_WriteString) {
			copy(r.Moq.ResultsByParams_WriteString[insertAt+1:], r.Moq.ResultsByParams_WriteString[insertAt:0])
			r.Moq.ResultsByParams_WriteString[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_WriteString(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_WriteString_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_WriteString_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_WriteString_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_WriteString_doFn
				DoReturnFn MoqWriter_starGenType_WriteString_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_WriteString(params MoqWriter_starGenType_WriteString_params) string {
	return fmt.Sprintf("WriteString(%#v)", params.S)
}

func (m *MoqWriter_starGenType) ParamsKey_WriteString(params MoqWriter_starGenType_WriteString_params, anyParams uint64) MoqWriter_starGenType_WriteString_paramsKey {
	m.Scene.T.Helper()
	var sUsed string
	var sUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.WriteString.S == moq.ParamIndexByValue {
			sUsed = params.S
		} else {
			sUsedHash = hash.DeepHash(params.S)
		}
	}
	return MoqWriter_starGenType_WriteString_paramsKey{
		Params: struct{ S string }{
			S: sUsed,
		},
		Hashes: struct{ S hash.Hash }{
			S: sUsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) ReadFrom(param1 io.Reader) *MoqWriter_starGenType_ReadFrom_fnRecorder {
	return &MoqWriter_starGenType_ReadFrom_fnRecorder{
		Params: MoqWriter_starGenType_ReadFrom_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_ReadFrom_fnRecorder) Any() *MoqWriter_starGenType_ReadFrom_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFrom(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_ReadFrom_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_ReadFrom_anyParams) Param1() *MoqWriter_starGenType_ReadFrom_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_ReadFrom_fnRecorder) Seq() *MoqWriter_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFrom(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_ReadFrom_fnRecorder) NoSeq() *MoqWriter_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ReadFrom(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_ReadFrom_fnRecorder) ReturnResults(n int64, err error) *MoqWriter_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int64
			Err error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_ReadFrom_doFn
		DoReturnFn MoqWriter_starGenType_ReadFrom_doReturnFn
	}{
		Values: &struct {
			N   int64
			Err error
		}{
			N:   n,
			Err: err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_ReadFrom_fnRecorder) AndDo(fn MoqWriter_starGenType_ReadFrom_doFn) *MoqWriter_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_ReadFrom_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_ReadFrom_doReturnFn) *MoqWriter_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			N   int64
			Err error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_ReadFrom_doFn
		DoReturnFn MoqWriter_starGenType_ReadFrom_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_ReadFrom_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_ReadFrom_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ReadFrom {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_ReadFrom_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_ReadFrom_paramsKey]*MoqWriter_starGenType_ReadFrom_results{},
		}
		r.Moq.ResultsByParams_ReadFrom = append(r.Moq.ResultsByParams_ReadFrom, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ReadFrom) {
			copy(r.Moq.ResultsByParams_ReadFrom[insertAt+1:], r.Moq.ResultsByParams_ReadFrom[insertAt:0])
			r.Moq.ResultsByParams_ReadFrom[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ReadFrom(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_ReadFrom_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_ReadFrom_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_ReadFrom_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					N   int64
					Err error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_ReadFrom_doFn
				DoReturnFn MoqWriter_starGenType_ReadFrom_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_ReadFrom(params MoqWriter_starGenType_ReadFrom_params) string {
	return fmt.Sprintf("ReadFrom(%#v)", params.Param1)
}

func (m *MoqWriter_starGenType) ParamsKey_ReadFrom(params MoqWriter_starGenType_ReadFrom_params, anyParams uint64) MoqWriter_starGenType_ReadFrom_paramsKey {
	m.Scene.T.Helper()
	var param1Used io.Reader
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ReadFrom.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqWriter_starGenType_ReadFrom_paramsKey{
		Params: struct{ Param1 io.Reader }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqWriter_starGenType) Reset() {
	m.ResultsByParams_Size = nil
	m.ResultsByParams_Reset = nil
	m.ResultsByParams_Flush = nil
	m.ResultsByParams_Available = nil
	m.ResultsByParams_AvailableBuffer = nil
	m.ResultsByParams_Buffered = nil
	m.ResultsByParams_Write = nil
	m.ResultsByParams_WriteByte = nil
	m.ResultsByParams_WriteRune = nil
	m.ResultsByParams_WriteString = nil
	m.ResultsByParams_ReadFrom = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqWriter_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Size {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Size(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Reset {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Reset(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Flush {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Flush(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Available {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Available(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_AvailableBuffer {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_AvailableBuffer(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Buffered {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Buffered(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Write {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Write(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteByte {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteByte(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteRune {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteRune(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_WriteString {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_WriteString(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ReadFrom {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ReadFrom(results.Params))
			}
		}
	}
}
