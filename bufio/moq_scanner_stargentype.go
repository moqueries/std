// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package bufio

import (
	"bufio"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that bufio.Scanner_starGenType is
// mocked completely
var _ Scanner_starGenType = (*MoqScanner_starGenType_mock)(nil)

// Scanner_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Scanner_starGenType interface {
	Err() error
	Bytes() []byte
	Text() string
	Scan() bool
	Buffer(buf []byte, max int)
	Split(split bufio.SplitFunc)
}

// MoqScanner_starGenType holds the state of a moq of the Scanner_starGenType
// type
type MoqScanner_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqScanner_starGenType_mock

	ResultsByParams_Err    []MoqScanner_starGenType_Err_resultsByParams
	ResultsByParams_Bytes  []MoqScanner_starGenType_Bytes_resultsByParams
	ResultsByParams_Text   []MoqScanner_starGenType_Text_resultsByParams
	ResultsByParams_Scan   []MoqScanner_starGenType_Scan_resultsByParams
	ResultsByParams_Buffer []MoqScanner_starGenType_Buffer_resultsByParams
	ResultsByParams_Split  []MoqScanner_starGenType_Split_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Err    struct{}
			Bytes  struct{}
			Text   struct{}
			Scan   struct{}
			Buffer struct {
				Buf moq.ParamIndexing
				Max moq.ParamIndexing
			}
			Split struct {
				Split moq.ParamIndexing
			}
		}
	}
	// MoqScanner_starGenType_mock isolates the mock interface of the
}

// Scanner_starGenType type
type MoqScanner_starGenType_mock struct {
	Moq *MoqScanner_starGenType
}

// MoqScanner_starGenType_recorder isolates the recorder interface of the
// Scanner_starGenType type
type MoqScanner_starGenType_recorder struct {
	Moq *MoqScanner_starGenType
}

// MoqScanner_starGenType_Err_params holds the params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Err_params struct{}

// MoqScanner_starGenType_Err_paramsKey holds the map key params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Err_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqScanner_starGenType_Err_resultsByParams contains the results for a given
// set of parameters for the Scanner_starGenType type
type MoqScanner_starGenType_Err_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScanner_starGenType_Err_paramsKey]*MoqScanner_starGenType_Err_results
}

// MoqScanner_starGenType_Err_doFn defines the type of function needed when
// calling AndDo for the Scanner_starGenType type
type MoqScanner_starGenType_Err_doFn func()

// MoqScanner_starGenType_Err_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Scanner_starGenType type
type MoqScanner_starGenType_Err_doReturnFn func() error

// MoqScanner_starGenType_Err_results holds the results of the
// Scanner_starGenType type
type MoqScanner_starGenType_Err_results struct {
	Params  MoqScanner_starGenType_Err_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Err_doFn
		DoReturnFn MoqScanner_starGenType_Err_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScanner_starGenType_Err_fnRecorder routes recorded function calls to the
// MoqScanner_starGenType moq
type MoqScanner_starGenType_Err_fnRecorder struct {
	Params    MoqScanner_starGenType_Err_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScanner_starGenType_Err_results
	Moq       *MoqScanner_starGenType
}

// MoqScanner_starGenType_Err_anyParams isolates the any params functions of
// the Scanner_starGenType type
type MoqScanner_starGenType_Err_anyParams struct {
	Recorder *MoqScanner_starGenType_Err_fnRecorder
}

// MoqScanner_starGenType_Bytes_params holds the params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Bytes_params struct{}

// MoqScanner_starGenType_Bytes_paramsKey holds the map key params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Bytes_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqScanner_starGenType_Bytes_resultsByParams contains the results for a
// given set of parameters for the Scanner_starGenType type
type MoqScanner_starGenType_Bytes_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScanner_starGenType_Bytes_paramsKey]*MoqScanner_starGenType_Bytes_results
}

// MoqScanner_starGenType_Bytes_doFn defines the type of function needed when
// calling AndDo for the Scanner_starGenType type
type MoqScanner_starGenType_Bytes_doFn func()

// MoqScanner_starGenType_Bytes_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Scanner_starGenType type
type MoqScanner_starGenType_Bytes_doReturnFn func() []byte

// MoqScanner_starGenType_Bytes_results holds the results of the
// Scanner_starGenType type
type MoqScanner_starGenType_Bytes_results struct {
	Params  MoqScanner_starGenType_Bytes_params
	Results []struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Bytes_doFn
		DoReturnFn MoqScanner_starGenType_Bytes_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScanner_starGenType_Bytes_fnRecorder routes recorded function calls to
// the MoqScanner_starGenType moq
type MoqScanner_starGenType_Bytes_fnRecorder struct {
	Params    MoqScanner_starGenType_Bytes_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScanner_starGenType_Bytes_results
	Moq       *MoqScanner_starGenType
}

// MoqScanner_starGenType_Bytes_anyParams isolates the any params functions of
// the Scanner_starGenType type
type MoqScanner_starGenType_Bytes_anyParams struct {
	Recorder *MoqScanner_starGenType_Bytes_fnRecorder
}

// MoqScanner_starGenType_Text_params holds the params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Text_params struct{}

// MoqScanner_starGenType_Text_paramsKey holds the map key params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Text_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqScanner_starGenType_Text_resultsByParams contains the results for a given
// set of parameters for the Scanner_starGenType type
type MoqScanner_starGenType_Text_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScanner_starGenType_Text_paramsKey]*MoqScanner_starGenType_Text_results
}

// MoqScanner_starGenType_Text_doFn defines the type of function needed when
// calling AndDo for the Scanner_starGenType type
type MoqScanner_starGenType_Text_doFn func()

// MoqScanner_starGenType_Text_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Scanner_starGenType type
type MoqScanner_starGenType_Text_doReturnFn func() string

// MoqScanner_starGenType_Text_results holds the results of the
// Scanner_starGenType type
type MoqScanner_starGenType_Text_results struct {
	Params  MoqScanner_starGenType_Text_params
	Results []struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Text_doFn
		DoReturnFn MoqScanner_starGenType_Text_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScanner_starGenType_Text_fnRecorder routes recorded function calls to the
// MoqScanner_starGenType moq
type MoqScanner_starGenType_Text_fnRecorder struct {
	Params    MoqScanner_starGenType_Text_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScanner_starGenType_Text_results
	Moq       *MoqScanner_starGenType
}

// MoqScanner_starGenType_Text_anyParams isolates the any params functions of
// the Scanner_starGenType type
type MoqScanner_starGenType_Text_anyParams struct {
	Recorder *MoqScanner_starGenType_Text_fnRecorder
}

// MoqScanner_starGenType_Scan_params holds the params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Scan_params struct{}

// MoqScanner_starGenType_Scan_paramsKey holds the map key params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Scan_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqScanner_starGenType_Scan_resultsByParams contains the results for a given
// set of parameters for the Scanner_starGenType type
type MoqScanner_starGenType_Scan_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScanner_starGenType_Scan_paramsKey]*MoqScanner_starGenType_Scan_results
}

// MoqScanner_starGenType_Scan_doFn defines the type of function needed when
// calling AndDo for the Scanner_starGenType type
type MoqScanner_starGenType_Scan_doFn func()

// MoqScanner_starGenType_Scan_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Scanner_starGenType type
type MoqScanner_starGenType_Scan_doReturnFn func() bool

// MoqScanner_starGenType_Scan_results holds the results of the
// Scanner_starGenType type
type MoqScanner_starGenType_Scan_results struct {
	Params  MoqScanner_starGenType_Scan_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Scan_doFn
		DoReturnFn MoqScanner_starGenType_Scan_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScanner_starGenType_Scan_fnRecorder routes recorded function calls to the
// MoqScanner_starGenType moq
type MoqScanner_starGenType_Scan_fnRecorder struct {
	Params    MoqScanner_starGenType_Scan_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScanner_starGenType_Scan_results
	Moq       *MoqScanner_starGenType
}

// MoqScanner_starGenType_Scan_anyParams isolates the any params functions of
// the Scanner_starGenType type
type MoqScanner_starGenType_Scan_anyParams struct {
	Recorder *MoqScanner_starGenType_Scan_fnRecorder
}

// MoqScanner_starGenType_Buffer_params holds the params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Buffer_params struct {
	Buf []byte
	Max int
}

// MoqScanner_starGenType_Buffer_paramsKey holds the map key params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Buffer_paramsKey struct {
	Params struct{ Max int }
	Hashes struct {
		Buf hash.Hash
		Max hash.Hash
	}
}

// MoqScanner_starGenType_Buffer_resultsByParams contains the results for a
// given set of parameters for the Scanner_starGenType type
type MoqScanner_starGenType_Buffer_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScanner_starGenType_Buffer_paramsKey]*MoqScanner_starGenType_Buffer_results
}

// MoqScanner_starGenType_Buffer_doFn defines the type of function needed when
// calling AndDo for the Scanner_starGenType type
type MoqScanner_starGenType_Buffer_doFn func(buf []byte, max int)

// MoqScanner_starGenType_Buffer_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Scanner_starGenType type
type MoqScanner_starGenType_Buffer_doReturnFn func(buf []byte, max int)

// MoqScanner_starGenType_Buffer_results holds the results of the
// Scanner_starGenType type
type MoqScanner_starGenType_Buffer_results struct {
	Params  MoqScanner_starGenType_Buffer_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Buffer_doFn
		DoReturnFn MoqScanner_starGenType_Buffer_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScanner_starGenType_Buffer_fnRecorder routes recorded function calls to
// the MoqScanner_starGenType moq
type MoqScanner_starGenType_Buffer_fnRecorder struct {
	Params    MoqScanner_starGenType_Buffer_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScanner_starGenType_Buffer_results
	Moq       *MoqScanner_starGenType
}

// MoqScanner_starGenType_Buffer_anyParams isolates the any params functions of
// the Scanner_starGenType type
type MoqScanner_starGenType_Buffer_anyParams struct {
	Recorder *MoqScanner_starGenType_Buffer_fnRecorder
}

// MoqScanner_starGenType_Split_params holds the params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Split_params struct{ Split bufio.SplitFunc }

// MoqScanner_starGenType_Split_paramsKey holds the map key params of the
// Scanner_starGenType type
type MoqScanner_starGenType_Split_paramsKey struct {
	Params struct{}
	Hashes struct{ Split hash.Hash }
}

// MoqScanner_starGenType_Split_resultsByParams contains the results for a
// given set of parameters for the Scanner_starGenType type
type MoqScanner_starGenType_Split_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqScanner_starGenType_Split_paramsKey]*MoqScanner_starGenType_Split_results
}

// MoqScanner_starGenType_Split_doFn defines the type of function needed when
// calling AndDo for the Scanner_starGenType type
type MoqScanner_starGenType_Split_doFn func(split bufio.SplitFunc)

// MoqScanner_starGenType_Split_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Scanner_starGenType type
type MoqScanner_starGenType_Split_doReturnFn func(split bufio.SplitFunc)

// MoqScanner_starGenType_Split_results holds the results of the
// Scanner_starGenType type
type MoqScanner_starGenType_Split_results struct {
	Params  MoqScanner_starGenType_Split_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Split_doFn
		DoReturnFn MoqScanner_starGenType_Split_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqScanner_starGenType_Split_fnRecorder routes recorded function calls to
// the MoqScanner_starGenType moq
type MoqScanner_starGenType_Split_fnRecorder struct {
	Params    MoqScanner_starGenType_Split_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqScanner_starGenType_Split_results
	Moq       *MoqScanner_starGenType
}

// MoqScanner_starGenType_Split_anyParams isolates the any params functions of
// the Scanner_starGenType type
type MoqScanner_starGenType_Split_anyParams struct {
	Recorder *MoqScanner_starGenType_Split_fnRecorder
}

// NewMoqScanner_starGenType creates a new moq of the Scanner_starGenType type
func NewMoqScanner_starGenType(scene *moq.Scene, config *moq.Config) *MoqScanner_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqScanner_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqScanner_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Err    struct{}
				Bytes  struct{}
				Text   struct{}
				Scan   struct{}
				Buffer struct {
					Buf moq.ParamIndexing
					Max moq.ParamIndexing
				}
				Split struct {
					Split moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Err    struct{}
			Bytes  struct{}
			Text   struct{}
			Scan   struct{}
			Buffer struct {
				Buf moq.ParamIndexing
				Max moq.ParamIndexing
			}
			Split struct {
				Split moq.ParamIndexing
			}
		}{
			Err:   struct{}{},
			Bytes: struct{}{},
			Text:  struct{}{},
			Scan:  struct{}{},
			Buffer: struct {
				Buf moq.ParamIndexing
				Max moq.ParamIndexing
			}{
				Buf: moq.ParamIndexByHash,
				Max: moq.ParamIndexByValue,
			},
			Split: struct {
				Split moq.ParamIndexing
			}{
				Split: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Scanner_starGenType type
func (m *MoqScanner_starGenType) Mock() *MoqScanner_starGenType_mock { return m.Moq }

func (m *MoqScanner_starGenType_mock) Err() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqScanner_starGenType_Err_params{}
	var results *MoqScanner_starGenType_Err_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Err {
		paramsKey := m.Moq.ParamsKey_Err(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Err(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Err(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Err(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqScanner_starGenType_mock) Bytes() (result1 []byte) {
	m.Moq.Scene.T.Helper()
	params := MoqScanner_starGenType_Bytes_params{}
	var results *MoqScanner_starGenType_Bytes_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Bytes {
		paramsKey := m.Moq.ParamsKey_Bytes(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Bytes(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Bytes(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Bytes(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqScanner_starGenType_mock) Text() (result1 string) {
	m.Moq.Scene.T.Helper()
	params := MoqScanner_starGenType_Text_params{}
	var results *MoqScanner_starGenType_Text_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Text {
		paramsKey := m.Moq.ParamsKey_Text(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Text(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Text(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Text(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqScanner_starGenType_mock) Scan() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqScanner_starGenType_Scan_params{}
	var results *MoqScanner_starGenType_Scan_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Scan {
		paramsKey := m.Moq.ParamsKey_Scan(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Scan(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Scan(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Scan(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqScanner_starGenType_mock) Buffer(buf []byte, max int) {
	m.Moq.Scene.T.Helper()
	params := MoqScanner_starGenType_Buffer_params{
		Buf: buf,
		Max: max,
	}
	var results *MoqScanner_starGenType_Buffer_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Buffer {
		paramsKey := m.Moq.ParamsKey_Buffer(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Buffer(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Buffer(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Buffer(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(buf, max)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(buf, max)
	}
	return
}

func (m *MoqScanner_starGenType_mock) Split(split bufio.SplitFunc) {
	m.Moq.Scene.T.Helper()
	params := MoqScanner_starGenType_Split_params{
		Split: split,
	}
	var results *MoqScanner_starGenType_Split_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Split {
		paramsKey := m.Moq.ParamsKey_Split(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Split(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Split(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Split(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(split)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(split)
	}
	return
}

// OnCall returns the recorder implementation of the Scanner_starGenType type
func (m *MoqScanner_starGenType) OnCall() *MoqScanner_starGenType_recorder {
	return &MoqScanner_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqScanner_starGenType_recorder) Err() *MoqScanner_starGenType_Err_fnRecorder {
	return &MoqScanner_starGenType_Err_fnRecorder{
		Params:   MoqScanner_starGenType_Err_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScanner_starGenType_Err_fnRecorder) Any() *MoqScanner_starGenType_Err_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Err(r.Params))
		return nil
	}
	return &MoqScanner_starGenType_Err_anyParams{Recorder: r}
}

func (r *MoqScanner_starGenType_Err_fnRecorder) Seq() *MoqScanner_starGenType_Err_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Err(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScanner_starGenType_Err_fnRecorder) NoSeq() *MoqScanner_starGenType_Err_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Err(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScanner_starGenType_Err_fnRecorder) ReturnResults(result1 error) *MoqScanner_starGenType_Err_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Err_doFn
		DoReturnFn MoqScanner_starGenType_Err_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScanner_starGenType_Err_fnRecorder) AndDo(fn MoqScanner_starGenType_Err_doFn) *MoqScanner_starGenType_Err_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScanner_starGenType_Err_fnRecorder) DoReturnResults(fn MoqScanner_starGenType_Err_doReturnFn) *MoqScanner_starGenType_Err_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Err_doFn
		DoReturnFn MoqScanner_starGenType_Err_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScanner_starGenType_Err_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScanner_starGenType_Err_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Err {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScanner_starGenType_Err_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScanner_starGenType_Err_paramsKey]*MoqScanner_starGenType_Err_results{},
		}
		r.Moq.ResultsByParams_Err = append(r.Moq.ResultsByParams_Err, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Err) {
			copy(r.Moq.ResultsByParams_Err[insertAt+1:], r.Moq.ResultsByParams_Err[insertAt:0])
			r.Moq.ResultsByParams_Err[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Err(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScanner_starGenType_Err_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScanner_starGenType_Err_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScanner_starGenType_Err_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqScanner_starGenType_Err_doFn
				DoReturnFn MoqScanner_starGenType_Err_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScanner_starGenType) PrettyParams_Err(params MoqScanner_starGenType_Err_params) string {
	return fmt.Sprintf("Err()")
}

func (m *MoqScanner_starGenType) ParamsKey_Err(params MoqScanner_starGenType_Err_params, anyParams uint64) MoqScanner_starGenType_Err_paramsKey {
	m.Scene.T.Helper()
	return MoqScanner_starGenType_Err_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqScanner_starGenType_recorder) Bytes() *MoqScanner_starGenType_Bytes_fnRecorder {
	return &MoqScanner_starGenType_Bytes_fnRecorder{
		Params:   MoqScanner_starGenType_Bytes_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScanner_starGenType_Bytes_fnRecorder) Any() *MoqScanner_starGenType_Bytes_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bytes(r.Params))
		return nil
	}
	return &MoqScanner_starGenType_Bytes_anyParams{Recorder: r}
}

func (r *MoqScanner_starGenType_Bytes_fnRecorder) Seq() *MoqScanner_starGenType_Bytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bytes(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScanner_starGenType_Bytes_fnRecorder) NoSeq() *MoqScanner_starGenType_Bytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bytes(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScanner_starGenType_Bytes_fnRecorder) ReturnResults(result1 []byte) *MoqScanner_starGenType_Bytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Bytes_doFn
		DoReturnFn MoqScanner_starGenType_Bytes_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScanner_starGenType_Bytes_fnRecorder) AndDo(fn MoqScanner_starGenType_Bytes_doFn) *MoqScanner_starGenType_Bytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScanner_starGenType_Bytes_fnRecorder) DoReturnResults(fn MoqScanner_starGenType_Bytes_doReturnFn) *MoqScanner_starGenType_Bytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Bytes_doFn
		DoReturnFn MoqScanner_starGenType_Bytes_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScanner_starGenType_Bytes_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScanner_starGenType_Bytes_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Bytes {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScanner_starGenType_Bytes_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScanner_starGenType_Bytes_paramsKey]*MoqScanner_starGenType_Bytes_results{},
		}
		r.Moq.ResultsByParams_Bytes = append(r.Moq.ResultsByParams_Bytes, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Bytes) {
			copy(r.Moq.ResultsByParams_Bytes[insertAt+1:], r.Moq.ResultsByParams_Bytes[insertAt:0])
			r.Moq.ResultsByParams_Bytes[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Bytes(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScanner_starGenType_Bytes_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScanner_starGenType_Bytes_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScanner_starGenType_Bytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
				}
				Sequence   uint32
				DoFn       MoqScanner_starGenType_Bytes_doFn
				DoReturnFn MoqScanner_starGenType_Bytes_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScanner_starGenType) PrettyParams_Bytes(params MoqScanner_starGenType_Bytes_params) string {
	return fmt.Sprintf("Bytes()")
}

func (m *MoqScanner_starGenType) ParamsKey_Bytes(params MoqScanner_starGenType_Bytes_params, anyParams uint64) MoqScanner_starGenType_Bytes_paramsKey {
	m.Scene.T.Helper()
	return MoqScanner_starGenType_Bytes_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqScanner_starGenType_recorder) Text() *MoqScanner_starGenType_Text_fnRecorder {
	return &MoqScanner_starGenType_Text_fnRecorder{
		Params:   MoqScanner_starGenType_Text_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScanner_starGenType_Text_fnRecorder) Any() *MoqScanner_starGenType_Text_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Text(r.Params))
		return nil
	}
	return &MoqScanner_starGenType_Text_anyParams{Recorder: r}
}

func (r *MoqScanner_starGenType_Text_fnRecorder) Seq() *MoqScanner_starGenType_Text_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Text(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScanner_starGenType_Text_fnRecorder) NoSeq() *MoqScanner_starGenType_Text_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Text(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScanner_starGenType_Text_fnRecorder) ReturnResults(result1 string) *MoqScanner_starGenType_Text_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Text_doFn
		DoReturnFn MoqScanner_starGenType_Text_doReturnFn
	}{
		Values: &struct {
			Result1 string
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScanner_starGenType_Text_fnRecorder) AndDo(fn MoqScanner_starGenType_Text_doFn) *MoqScanner_starGenType_Text_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScanner_starGenType_Text_fnRecorder) DoReturnResults(fn MoqScanner_starGenType_Text_doReturnFn) *MoqScanner_starGenType_Text_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Text_doFn
		DoReturnFn MoqScanner_starGenType_Text_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScanner_starGenType_Text_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScanner_starGenType_Text_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Text {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScanner_starGenType_Text_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScanner_starGenType_Text_paramsKey]*MoqScanner_starGenType_Text_results{},
		}
		r.Moq.ResultsByParams_Text = append(r.Moq.ResultsByParams_Text, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Text) {
			copy(r.Moq.ResultsByParams_Text[insertAt+1:], r.Moq.ResultsByParams_Text[insertAt:0])
			r.Moq.ResultsByParams_Text[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Text(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScanner_starGenType_Text_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScanner_starGenType_Text_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScanner_starGenType_Text_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
				}
				Sequence   uint32
				DoFn       MoqScanner_starGenType_Text_doFn
				DoReturnFn MoqScanner_starGenType_Text_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScanner_starGenType) PrettyParams_Text(params MoqScanner_starGenType_Text_params) string {
	return fmt.Sprintf("Text()")
}

func (m *MoqScanner_starGenType) ParamsKey_Text(params MoqScanner_starGenType_Text_params, anyParams uint64) MoqScanner_starGenType_Text_paramsKey {
	m.Scene.T.Helper()
	return MoqScanner_starGenType_Text_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqScanner_starGenType_recorder) Scan() *MoqScanner_starGenType_Scan_fnRecorder {
	return &MoqScanner_starGenType_Scan_fnRecorder{
		Params:   MoqScanner_starGenType_Scan_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScanner_starGenType_Scan_fnRecorder) Any() *MoqScanner_starGenType_Scan_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Scan(r.Params))
		return nil
	}
	return &MoqScanner_starGenType_Scan_anyParams{Recorder: r}
}

func (r *MoqScanner_starGenType_Scan_fnRecorder) Seq() *MoqScanner_starGenType_Scan_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Scan(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScanner_starGenType_Scan_fnRecorder) NoSeq() *MoqScanner_starGenType_Scan_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Scan(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScanner_starGenType_Scan_fnRecorder) ReturnResults(result1 bool) *MoqScanner_starGenType_Scan_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Scan_doFn
		DoReturnFn MoqScanner_starGenType_Scan_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScanner_starGenType_Scan_fnRecorder) AndDo(fn MoqScanner_starGenType_Scan_doFn) *MoqScanner_starGenType_Scan_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScanner_starGenType_Scan_fnRecorder) DoReturnResults(fn MoqScanner_starGenType_Scan_doReturnFn) *MoqScanner_starGenType_Scan_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Scan_doFn
		DoReturnFn MoqScanner_starGenType_Scan_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScanner_starGenType_Scan_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScanner_starGenType_Scan_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Scan {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScanner_starGenType_Scan_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScanner_starGenType_Scan_paramsKey]*MoqScanner_starGenType_Scan_results{},
		}
		r.Moq.ResultsByParams_Scan = append(r.Moq.ResultsByParams_Scan, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Scan) {
			copy(r.Moq.ResultsByParams_Scan[insertAt+1:], r.Moq.ResultsByParams_Scan[insertAt:0])
			r.Moq.ResultsByParams_Scan[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Scan(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScanner_starGenType_Scan_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScanner_starGenType_Scan_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScanner_starGenType_Scan_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqScanner_starGenType_Scan_doFn
				DoReturnFn MoqScanner_starGenType_Scan_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScanner_starGenType) PrettyParams_Scan(params MoqScanner_starGenType_Scan_params) string {
	return fmt.Sprintf("Scan()")
}

func (m *MoqScanner_starGenType) ParamsKey_Scan(params MoqScanner_starGenType_Scan_params, anyParams uint64) MoqScanner_starGenType_Scan_paramsKey {
	m.Scene.T.Helper()
	return MoqScanner_starGenType_Scan_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqScanner_starGenType_recorder) Buffer(buf []byte, max int) *MoqScanner_starGenType_Buffer_fnRecorder {
	return &MoqScanner_starGenType_Buffer_fnRecorder{
		Params: MoqScanner_starGenType_Buffer_params{
			Buf: buf,
			Max: max,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScanner_starGenType_Buffer_fnRecorder) Any() *MoqScanner_starGenType_Buffer_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Buffer(r.Params))
		return nil
	}
	return &MoqScanner_starGenType_Buffer_anyParams{Recorder: r}
}

func (a *MoqScanner_starGenType_Buffer_anyParams) Buf() *MoqScanner_starGenType_Buffer_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqScanner_starGenType_Buffer_anyParams) Max() *MoqScanner_starGenType_Buffer_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqScanner_starGenType_Buffer_fnRecorder) Seq() *MoqScanner_starGenType_Buffer_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Buffer(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScanner_starGenType_Buffer_fnRecorder) NoSeq() *MoqScanner_starGenType_Buffer_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Buffer(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScanner_starGenType_Buffer_fnRecorder) ReturnResults() *MoqScanner_starGenType_Buffer_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Buffer_doFn
		DoReturnFn MoqScanner_starGenType_Buffer_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScanner_starGenType_Buffer_fnRecorder) AndDo(fn MoqScanner_starGenType_Buffer_doFn) *MoqScanner_starGenType_Buffer_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScanner_starGenType_Buffer_fnRecorder) DoReturnResults(fn MoqScanner_starGenType_Buffer_doReturnFn) *MoqScanner_starGenType_Buffer_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Buffer_doFn
		DoReturnFn MoqScanner_starGenType_Buffer_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScanner_starGenType_Buffer_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScanner_starGenType_Buffer_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Buffer {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScanner_starGenType_Buffer_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScanner_starGenType_Buffer_paramsKey]*MoqScanner_starGenType_Buffer_results{},
		}
		r.Moq.ResultsByParams_Buffer = append(r.Moq.ResultsByParams_Buffer, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Buffer) {
			copy(r.Moq.ResultsByParams_Buffer[insertAt+1:], r.Moq.ResultsByParams_Buffer[insertAt:0])
			r.Moq.ResultsByParams_Buffer[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Buffer(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScanner_starGenType_Buffer_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScanner_starGenType_Buffer_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScanner_starGenType_Buffer_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqScanner_starGenType_Buffer_doFn
				DoReturnFn MoqScanner_starGenType_Buffer_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScanner_starGenType) PrettyParams_Buffer(params MoqScanner_starGenType_Buffer_params) string {
	return fmt.Sprintf("Buffer(%#v, %#v)", params.Buf, params.Max)
}

func (m *MoqScanner_starGenType) ParamsKey_Buffer(params MoqScanner_starGenType_Buffer_params, anyParams uint64) MoqScanner_starGenType_Buffer_paramsKey {
	m.Scene.T.Helper()
	var bufUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Buffer.Buf == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The buf parameter of the Buffer function can't be indexed by value")
		}
		bufUsedHash = hash.DeepHash(params.Buf)
	}
	var maxUsed int
	var maxUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Buffer.Max == moq.ParamIndexByValue {
			maxUsed = params.Max
		} else {
			maxUsedHash = hash.DeepHash(params.Max)
		}
	}
	return MoqScanner_starGenType_Buffer_paramsKey{
		Params: struct{ Max int }{
			Max: maxUsed,
		},
		Hashes: struct {
			Buf hash.Hash
			Max hash.Hash
		}{
			Buf: bufUsedHash,
			Max: maxUsedHash,
		},
	}
}

func (m *MoqScanner_starGenType_recorder) Split(split bufio.SplitFunc) *MoqScanner_starGenType_Split_fnRecorder {
	return &MoqScanner_starGenType_Split_fnRecorder{
		Params: MoqScanner_starGenType_Split_params{
			Split: split,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqScanner_starGenType_Split_fnRecorder) Any() *MoqScanner_starGenType_Split_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Split(r.Params))
		return nil
	}
	return &MoqScanner_starGenType_Split_anyParams{Recorder: r}
}

func (a *MoqScanner_starGenType_Split_anyParams) Split() *MoqScanner_starGenType_Split_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqScanner_starGenType_Split_fnRecorder) Seq() *MoqScanner_starGenType_Split_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Split(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqScanner_starGenType_Split_fnRecorder) NoSeq() *MoqScanner_starGenType_Split_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Split(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqScanner_starGenType_Split_fnRecorder) ReturnResults() *MoqScanner_starGenType_Split_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Split_doFn
		DoReturnFn MoqScanner_starGenType_Split_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqScanner_starGenType_Split_fnRecorder) AndDo(fn MoqScanner_starGenType_Split_doFn) *MoqScanner_starGenType_Split_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqScanner_starGenType_Split_fnRecorder) DoReturnResults(fn MoqScanner_starGenType_Split_doReturnFn) *MoqScanner_starGenType_Split_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqScanner_starGenType_Split_doFn
		DoReturnFn MoqScanner_starGenType_Split_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqScanner_starGenType_Split_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqScanner_starGenType_Split_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Split {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqScanner_starGenType_Split_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqScanner_starGenType_Split_paramsKey]*MoqScanner_starGenType_Split_results{},
		}
		r.Moq.ResultsByParams_Split = append(r.Moq.ResultsByParams_Split, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Split) {
			copy(r.Moq.ResultsByParams_Split[insertAt+1:], r.Moq.ResultsByParams_Split[insertAt:0])
			r.Moq.ResultsByParams_Split[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Split(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqScanner_starGenType_Split_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqScanner_starGenType_Split_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqScanner_starGenType_Split_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqScanner_starGenType_Split_doFn
				DoReturnFn MoqScanner_starGenType_Split_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqScanner_starGenType) PrettyParams_Split(params MoqScanner_starGenType_Split_params) string {
	return fmt.Sprintf("Split(%#v)", params.Split)
}

func (m *MoqScanner_starGenType) ParamsKey_Split(params MoqScanner_starGenType_Split_params, anyParams uint64) MoqScanner_starGenType_Split_paramsKey {
	m.Scene.T.Helper()
	var splitUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Split.Split == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The split parameter of the Split function can't be indexed by value")
		}
		splitUsedHash = hash.DeepHash(params.Split)
	}
	return MoqScanner_starGenType_Split_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Split hash.Hash }{
			Split: splitUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqScanner_starGenType) Reset() {
	m.ResultsByParams_Err = nil
	m.ResultsByParams_Bytes = nil
	m.ResultsByParams_Text = nil
	m.ResultsByParams_Scan = nil
	m.ResultsByParams_Buffer = nil
	m.ResultsByParams_Split = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqScanner_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Err {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Err(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Bytes {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Bytes(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Text {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Text(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Scan {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Scan(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Buffer {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Buffer(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Split {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Split(results.Params))
			}
		}
	}
}
