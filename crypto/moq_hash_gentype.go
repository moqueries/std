// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package crypto

import (
	"crypto"
	"fmt"
	"hash"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that crypto.Hash_genType is mocked
// completely
var _ Hash_genType = (*MoqHash_genType_mock)(nil)

// Hash_genType is the fabricated implementation type of this mock (emitted
// when mocking a collections of methods directly and not from an interface
// type)
type Hash_genType interface {
	HashFunc() crypto.Hash
	Size() int
	New() hash.Hash
	Available() bool
}

// MoqHash_genType holds the state of a moq of the Hash_genType type
type MoqHash_genType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqHash_genType_mock

	ResultsByParams_HashFunc  []MoqHash_genType_HashFunc_resultsByParams
	ResultsByParams_Size      []MoqHash_genType_Size_resultsByParams
	ResultsByParams_New       []MoqHash_genType_New_resultsByParams
	ResultsByParams_Available []MoqHash_genType_Available_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			HashFunc  struct{}
			Size      struct{}
			New       struct{}
			Available struct{}
		}
	}
}

// MoqHash_genType_mock isolates the mock interface of the Hash_genType type
type MoqHash_genType_mock struct {
	Moq *MoqHash_genType
}

// MoqHash_genType_recorder isolates the recorder interface of the Hash_genType
// type
type MoqHash_genType_recorder struct {
	Moq *MoqHash_genType
}

// MoqHash_genType_HashFunc_params holds the params of the Hash_genType type
type MoqHash_genType_HashFunc_params struct{}

// MoqHash_genType_HashFunc_paramsKey holds the map key params of the
// Hash_genType type
type MoqHash_genType_HashFunc_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqHash_genType_HashFunc_resultsByParams contains the results for a given
// set of parameters for the Hash_genType type
type MoqHash_genType_HashFunc_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_genType_HashFunc_paramsKey]*MoqHash_genType_HashFunc_results
}

// MoqHash_genType_HashFunc_doFn defines the type of function needed when
// calling AndDo for the Hash_genType type
type MoqHash_genType_HashFunc_doFn func()

// MoqHash_genType_HashFunc_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Hash_genType type
type MoqHash_genType_HashFunc_doReturnFn func() crypto.Hash

// MoqHash_genType_HashFunc_results holds the results of the Hash_genType type
type MoqHash_genType_HashFunc_results struct {
	Params  MoqHash_genType_HashFunc_params
	Results []struct {
		Values *struct {
			Result1 crypto.Hash
		}
		Sequence   uint32
		DoFn       MoqHash_genType_HashFunc_doFn
		DoReturnFn MoqHash_genType_HashFunc_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_genType_HashFunc_fnRecorder routes recorded function calls to the
// MoqHash_genType moq
type MoqHash_genType_HashFunc_fnRecorder struct {
	Params    MoqHash_genType_HashFunc_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_genType_HashFunc_results
	Moq       *MoqHash_genType
}

// MoqHash_genType_HashFunc_anyParams isolates the any params functions of the
// Hash_genType type
type MoqHash_genType_HashFunc_anyParams struct {
	Recorder *MoqHash_genType_HashFunc_fnRecorder
}

// MoqHash_genType_Size_params holds the params of the Hash_genType type
type MoqHash_genType_Size_params struct{}

// MoqHash_genType_Size_paramsKey holds the map key params of the Hash_genType
// type
type MoqHash_genType_Size_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqHash_genType_Size_resultsByParams contains the results for a given set of
// parameters for the Hash_genType type
type MoqHash_genType_Size_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_genType_Size_paramsKey]*MoqHash_genType_Size_results
}

// MoqHash_genType_Size_doFn defines the type of function needed when calling
// AndDo for the Hash_genType type
type MoqHash_genType_Size_doFn func()

// MoqHash_genType_Size_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Hash_genType type
type MoqHash_genType_Size_doReturnFn func() int

// MoqHash_genType_Size_results holds the results of the Hash_genType type
type MoqHash_genType_Size_results struct {
	Params  MoqHash_genType_Size_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqHash_genType_Size_doFn
		DoReturnFn MoqHash_genType_Size_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_genType_Size_fnRecorder routes recorded function calls to the
// MoqHash_genType moq
type MoqHash_genType_Size_fnRecorder struct {
	Params    MoqHash_genType_Size_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_genType_Size_results
	Moq       *MoqHash_genType
}

// MoqHash_genType_Size_anyParams isolates the any params functions of the
// Hash_genType type
type MoqHash_genType_Size_anyParams struct {
	Recorder *MoqHash_genType_Size_fnRecorder
}

// MoqHash_genType_New_params holds the params of the Hash_genType type
type MoqHash_genType_New_params struct{}

// MoqHash_genType_New_paramsKey holds the map key params of the Hash_genType
// type
type MoqHash_genType_New_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqHash_genType_New_resultsByParams contains the results for a given set of
// parameters for the Hash_genType type
type MoqHash_genType_New_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_genType_New_paramsKey]*MoqHash_genType_New_results
}

// MoqHash_genType_New_doFn defines the type of function needed when calling
// AndDo for the Hash_genType type
type MoqHash_genType_New_doFn func()

// MoqHash_genType_New_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Hash_genType type
type MoqHash_genType_New_doReturnFn func() hash.Hash

// MoqHash_genType_New_results holds the results of the Hash_genType type
type MoqHash_genType_New_results struct {
	Params  MoqHash_genType_New_params
	Results []struct {
		Values *struct {
			Result1 hash.Hash
		}
		Sequence   uint32
		DoFn       MoqHash_genType_New_doFn
		DoReturnFn MoqHash_genType_New_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_genType_New_fnRecorder routes recorded function calls to the
// MoqHash_genType moq
type MoqHash_genType_New_fnRecorder struct {
	Params    MoqHash_genType_New_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_genType_New_results
	Moq       *MoqHash_genType
}

// MoqHash_genType_New_anyParams isolates the any params functions of the
// Hash_genType type
type MoqHash_genType_New_anyParams struct {
	Recorder *MoqHash_genType_New_fnRecorder
}

// MoqHash_genType_Available_params holds the params of the Hash_genType type
type MoqHash_genType_Available_params struct{}

// MoqHash_genType_Available_paramsKey holds the map key params of the
// Hash_genType type
type MoqHash_genType_Available_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqHash_genType_Available_resultsByParams contains the results for a given
// set of parameters for the Hash_genType type
type MoqHash_genType_Available_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqHash_genType_Available_paramsKey]*MoqHash_genType_Available_results
}

// MoqHash_genType_Available_doFn defines the type of function needed when
// calling AndDo for the Hash_genType type
type MoqHash_genType_Available_doFn func()

// MoqHash_genType_Available_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Hash_genType type
type MoqHash_genType_Available_doReturnFn func() bool

// MoqHash_genType_Available_results holds the results of the Hash_genType type
type MoqHash_genType_Available_results struct {
	Params  MoqHash_genType_Available_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqHash_genType_Available_doFn
		DoReturnFn MoqHash_genType_Available_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqHash_genType_Available_fnRecorder routes recorded function calls to the
// MoqHash_genType moq
type MoqHash_genType_Available_fnRecorder struct {
	Params    MoqHash_genType_Available_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqHash_genType_Available_results
	Moq       *MoqHash_genType
}

// MoqHash_genType_Available_anyParams isolates the any params functions of the
// Hash_genType type
type MoqHash_genType_Available_anyParams struct {
	Recorder *MoqHash_genType_Available_fnRecorder
}

// NewMoqHash_genType creates a new moq of the Hash_genType type
func NewMoqHash_genType(scene *moq.Scene, config *moq.Config) *MoqHash_genType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqHash_genType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqHash_genType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				HashFunc  struct{}
				Size      struct{}
				New       struct{}
				Available struct{}
			}
		}{ParameterIndexing: struct {
			HashFunc  struct{}
			Size      struct{}
			New       struct{}
			Available struct{}
		}{
			HashFunc:  struct{}{},
			Size:      struct{}{},
			New:       struct{}{},
			Available: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Hash_genType type
func (m *MoqHash_genType) Mock() *MoqHash_genType_mock { return m.Moq }

func (m *MoqHash_genType_mock) HashFunc() (result1 crypto.Hash) {
	m.Moq.Scene.T.Helper()
	params := MoqHash_genType_HashFunc_params{}
	var results *MoqHash_genType_HashFunc_results
	for _, resultsByParams := range m.Moq.ResultsByParams_HashFunc {
		paramsKey := m.Moq.ParamsKey_HashFunc(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_HashFunc(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_HashFunc(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_HashFunc(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqHash_genType_mock) Size() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqHash_genType_Size_params{}
	var results *MoqHash_genType_Size_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Size {
		paramsKey := m.Moq.ParamsKey_Size(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Size(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Size(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Size(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqHash_genType_mock) New() (result1 hash.Hash) {
	m.Moq.Scene.T.Helper()
	params := MoqHash_genType_New_params{}
	var results *MoqHash_genType_New_results
	for _, resultsByParams := range m.Moq.ResultsByParams_New {
		paramsKey := m.Moq.ParamsKey_New(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_New(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_New(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_New(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqHash_genType_mock) Available() (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqHash_genType_Available_params{}
	var results *MoqHash_genType_Available_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Available {
		paramsKey := m.Moq.ParamsKey_Available(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Available(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Available(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Available(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Hash_genType type
func (m *MoqHash_genType) OnCall() *MoqHash_genType_recorder {
	return &MoqHash_genType_recorder{
		Moq: m,
	}
}

func (m *MoqHash_genType_recorder) HashFunc() *MoqHash_genType_HashFunc_fnRecorder {
	return &MoqHash_genType_HashFunc_fnRecorder{
		Params:   MoqHash_genType_HashFunc_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_genType_HashFunc_fnRecorder) Any() *MoqHash_genType_HashFunc_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_HashFunc(r.Params))
		return nil
	}
	return &MoqHash_genType_HashFunc_anyParams{Recorder: r}
}

func (r *MoqHash_genType_HashFunc_fnRecorder) Seq() *MoqHash_genType_HashFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_HashFunc(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_genType_HashFunc_fnRecorder) NoSeq() *MoqHash_genType_HashFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_HashFunc(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_genType_HashFunc_fnRecorder) ReturnResults(result1 crypto.Hash) *MoqHash_genType_HashFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 crypto.Hash
		}
		Sequence   uint32
		DoFn       MoqHash_genType_HashFunc_doFn
		DoReturnFn MoqHash_genType_HashFunc_doReturnFn
	}{
		Values: &struct {
			Result1 crypto.Hash
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_genType_HashFunc_fnRecorder) AndDo(fn MoqHash_genType_HashFunc_doFn) *MoqHash_genType_HashFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_genType_HashFunc_fnRecorder) DoReturnResults(fn MoqHash_genType_HashFunc_doReturnFn) *MoqHash_genType_HashFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 crypto.Hash
		}
		Sequence   uint32
		DoFn       MoqHash_genType_HashFunc_doFn
		DoReturnFn MoqHash_genType_HashFunc_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_genType_HashFunc_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_genType_HashFunc_resultsByParams
	for n, res := range r.Moq.ResultsByParams_HashFunc {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_genType_HashFunc_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_genType_HashFunc_paramsKey]*MoqHash_genType_HashFunc_results{},
		}
		r.Moq.ResultsByParams_HashFunc = append(r.Moq.ResultsByParams_HashFunc, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_HashFunc) {
			copy(r.Moq.ResultsByParams_HashFunc[insertAt+1:], r.Moq.ResultsByParams_HashFunc[insertAt:0])
			r.Moq.ResultsByParams_HashFunc[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_HashFunc(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_genType_HashFunc_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_genType_HashFunc_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_genType_HashFunc_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 crypto.Hash
				}
				Sequence   uint32
				DoFn       MoqHash_genType_HashFunc_doFn
				DoReturnFn MoqHash_genType_HashFunc_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash_genType) PrettyParams_HashFunc(params MoqHash_genType_HashFunc_params) string {
	return fmt.Sprintf("HashFunc()")
}

func (m *MoqHash_genType) ParamsKey_HashFunc(params MoqHash_genType_HashFunc_params, anyParams uint64) MoqHash_genType_HashFunc_paramsKey {
	m.Scene.T.Helper()
	return MoqHash_genType_HashFunc_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqHash_genType_recorder) Size() *MoqHash_genType_Size_fnRecorder {
	return &MoqHash_genType_Size_fnRecorder{
		Params:   MoqHash_genType_Size_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_genType_Size_fnRecorder) Any() *MoqHash_genType_Size_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Size(r.Params))
		return nil
	}
	return &MoqHash_genType_Size_anyParams{Recorder: r}
}

func (r *MoqHash_genType_Size_fnRecorder) Seq() *MoqHash_genType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Size(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_genType_Size_fnRecorder) NoSeq() *MoqHash_genType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Size(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_genType_Size_fnRecorder) ReturnResults(result1 int) *MoqHash_genType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqHash_genType_Size_doFn
		DoReturnFn MoqHash_genType_Size_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_genType_Size_fnRecorder) AndDo(fn MoqHash_genType_Size_doFn) *MoqHash_genType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_genType_Size_fnRecorder) DoReturnResults(fn MoqHash_genType_Size_doReturnFn) *MoqHash_genType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqHash_genType_Size_doFn
		DoReturnFn MoqHash_genType_Size_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_genType_Size_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_genType_Size_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Size {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_genType_Size_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_genType_Size_paramsKey]*MoqHash_genType_Size_results{},
		}
		r.Moq.ResultsByParams_Size = append(r.Moq.ResultsByParams_Size, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Size) {
			copy(r.Moq.ResultsByParams_Size[insertAt+1:], r.Moq.ResultsByParams_Size[insertAt:0])
			r.Moq.ResultsByParams_Size[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Size(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_genType_Size_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_genType_Size_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_genType_Size_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqHash_genType_Size_doFn
				DoReturnFn MoqHash_genType_Size_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash_genType) PrettyParams_Size(params MoqHash_genType_Size_params) string {
	return fmt.Sprintf("Size()")
}

func (m *MoqHash_genType) ParamsKey_Size(params MoqHash_genType_Size_params, anyParams uint64) MoqHash_genType_Size_paramsKey {
	m.Scene.T.Helper()
	return MoqHash_genType_Size_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqHash_genType_recorder) New() *MoqHash_genType_New_fnRecorder {
	return &MoqHash_genType_New_fnRecorder{
		Params:   MoqHash_genType_New_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_genType_New_fnRecorder) Any() *MoqHash_genType_New_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_New(r.Params))
		return nil
	}
	return &MoqHash_genType_New_anyParams{Recorder: r}
}

func (r *MoqHash_genType_New_fnRecorder) Seq() *MoqHash_genType_New_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_New(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_genType_New_fnRecorder) NoSeq() *MoqHash_genType_New_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_New(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_genType_New_fnRecorder) ReturnResults(result1 hash.Hash) *MoqHash_genType_New_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 hash.Hash
		}
		Sequence   uint32
		DoFn       MoqHash_genType_New_doFn
		DoReturnFn MoqHash_genType_New_doReturnFn
	}{
		Values: &struct {
			Result1 hash.Hash
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_genType_New_fnRecorder) AndDo(fn MoqHash_genType_New_doFn) *MoqHash_genType_New_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_genType_New_fnRecorder) DoReturnResults(fn MoqHash_genType_New_doReturnFn) *MoqHash_genType_New_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 hash.Hash
		}
		Sequence   uint32
		DoFn       MoqHash_genType_New_doFn
		DoReturnFn MoqHash_genType_New_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_genType_New_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_genType_New_resultsByParams
	for n, res := range r.Moq.ResultsByParams_New {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_genType_New_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_genType_New_paramsKey]*MoqHash_genType_New_results{},
		}
		r.Moq.ResultsByParams_New = append(r.Moq.ResultsByParams_New, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_New) {
			copy(r.Moq.ResultsByParams_New[insertAt+1:], r.Moq.ResultsByParams_New[insertAt:0])
			r.Moq.ResultsByParams_New[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_New(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_genType_New_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_genType_New_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_genType_New_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 hash.Hash
				}
				Sequence   uint32
				DoFn       MoqHash_genType_New_doFn
				DoReturnFn MoqHash_genType_New_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash_genType) PrettyParams_New(params MoqHash_genType_New_params) string {
	return fmt.Sprintf("New()")
}

func (m *MoqHash_genType) ParamsKey_New(params MoqHash_genType_New_params, anyParams uint64) MoqHash_genType_New_paramsKey {
	m.Scene.T.Helper()
	return MoqHash_genType_New_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqHash_genType_recorder) Available() *MoqHash_genType_Available_fnRecorder {
	return &MoqHash_genType_Available_fnRecorder{
		Params:   MoqHash_genType_Available_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqHash_genType_Available_fnRecorder) Any() *MoqHash_genType_Available_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Available(r.Params))
		return nil
	}
	return &MoqHash_genType_Available_anyParams{Recorder: r}
}

func (r *MoqHash_genType_Available_fnRecorder) Seq() *MoqHash_genType_Available_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Available(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqHash_genType_Available_fnRecorder) NoSeq() *MoqHash_genType_Available_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Available(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqHash_genType_Available_fnRecorder) ReturnResults(result1 bool) *MoqHash_genType_Available_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqHash_genType_Available_doFn
		DoReturnFn MoqHash_genType_Available_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqHash_genType_Available_fnRecorder) AndDo(fn MoqHash_genType_Available_doFn) *MoqHash_genType_Available_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqHash_genType_Available_fnRecorder) DoReturnResults(fn MoqHash_genType_Available_doReturnFn) *MoqHash_genType_Available_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqHash_genType_Available_doFn
		DoReturnFn MoqHash_genType_Available_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqHash_genType_Available_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqHash_genType_Available_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Available {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqHash_genType_Available_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqHash_genType_Available_paramsKey]*MoqHash_genType_Available_results{},
		}
		r.Moq.ResultsByParams_Available = append(r.Moq.ResultsByParams_Available, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Available) {
			copy(r.Moq.ResultsByParams_Available[insertAt+1:], r.Moq.ResultsByParams_Available[insertAt:0])
			r.Moq.ResultsByParams_Available[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Available(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqHash_genType_Available_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqHash_genType_Available_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqHash_genType_Available_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqHash_genType_Available_doFn
				DoReturnFn MoqHash_genType_Available_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqHash_genType) PrettyParams_Available(params MoqHash_genType_Available_params) string {
	return fmt.Sprintf("Available()")
}

func (m *MoqHash_genType) ParamsKey_Available(params MoqHash_genType_Available_params, anyParams uint64) MoqHash_genType_Available_paramsKey {
	m.Scene.T.Helper()
	return MoqHash_genType_Available_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqHash_genType) Reset() {
	m.ResultsByParams_HashFunc = nil
	m.ResultsByParams_Size = nil
	m.ResultsByParams_New = nil
	m.ResultsByParams_Available = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqHash_genType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_HashFunc {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_HashFunc(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Size {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Size(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_New {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_New(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Available {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Available(results.Params))
			}
		}
	}
}
