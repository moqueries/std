// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package tls

import (
	"context"
	"fmt"
	"math/bits"
	"net"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that tls.Dialer_starGenType is mocked
// completely
var _ Dialer_starGenType = (*MoqDialer_starGenType_mock)(nil)

// Dialer_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Dialer_starGenType interface {
	Dial(network, addr string) (net.Conn, error)
	DialContext(ctx context.Context, network, addr string) (net.Conn, error)
}

// MoqDialer_starGenType holds the state of a moq of the Dialer_starGenType
// type
type MoqDialer_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqDialer_starGenType_mock

	ResultsByParams_Dial        []MoqDialer_starGenType_Dial_resultsByParams
	ResultsByParams_DialContext []MoqDialer_starGenType_DialContext_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Dial struct {
				Network moq.ParamIndexing
				Addr    moq.ParamIndexing
			}
			DialContext struct {
				Ctx     moq.ParamIndexing
				Network moq.ParamIndexing
				Addr    moq.ParamIndexing
			}
		}
	}
	// MoqDialer_starGenType_mock isolates the mock interface of the
}

// Dialer_starGenType type
type MoqDialer_starGenType_mock struct {
	Moq *MoqDialer_starGenType
}

// MoqDialer_starGenType_recorder isolates the recorder interface of the
// Dialer_starGenType type
type MoqDialer_starGenType_recorder struct {
	Moq *MoqDialer_starGenType
}

// MoqDialer_starGenType_Dial_params holds the params of the Dialer_starGenType
// type
type MoqDialer_starGenType_Dial_params struct{ Network, Addr string }

// MoqDialer_starGenType_Dial_paramsKey holds the map key params of the
// Dialer_starGenType type
type MoqDialer_starGenType_Dial_paramsKey struct {
	Params struct{ Network, Addr string }
	Hashes struct{ Network, Addr hash.Hash }
}

// MoqDialer_starGenType_Dial_resultsByParams contains the results for a given
// set of parameters for the Dialer_starGenType type
type MoqDialer_starGenType_Dial_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDialer_starGenType_Dial_paramsKey]*MoqDialer_starGenType_Dial_results
}

// MoqDialer_starGenType_Dial_doFn defines the type of function needed when
// calling AndDo for the Dialer_starGenType type
type MoqDialer_starGenType_Dial_doFn func(network, addr string)

// MoqDialer_starGenType_Dial_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Dialer_starGenType type
type MoqDialer_starGenType_Dial_doReturnFn func(network, addr string) (net.Conn, error)

// MoqDialer_starGenType_Dial_results holds the results of the
// Dialer_starGenType type
type MoqDialer_starGenType_Dial_results struct {
	Params  MoqDialer_starGenType_Dial_params
	Results []struct {
		Values *struct {
			Result1 net.Conn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDialer_starGenType_Dial_doFn
		DoReturnFn MoqDialer_starGenType_Dial_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDialer_starGenType_Dial_fnRecorder routes recorded function calls to the
// MoqDialer_starGenType moq
type MoqDialer_starGenType_Dial_fnRecorder struct {
	Params    MoqDialer_starGenType_Dial_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDialer_starGenType_Dial_results
	Moq       *MoqDialer_starGenType
}

// MoqDialer_starGenType_Dial_anyParams isolates the any params functions of
// the Dialer_starGenType type
type MoqDialer_starGenType_Dial_anyParams struct {
	Recorder *MoqDialer_starGenType_Dial_fnRecorder
}

// MoqDialer_starGenType_DialContext_params holds the params of the
// Dialer_starGenType type
type MoqDialer_starGenType_DialContext_params struct {
	Ctx           context.Context
	Network, Addr string
}

// MoqDialer_starGenType_DialContext_paramsKey holds the map key params of the
// Dialer_starGenType type
type MoqDialer_starGenType_DialContext_paramsKey struct {
	Params struct {
		Ctx           context.Context
		Network, Addr string
	}
	Hashes struct {
		Ctx           hash.Hash
		Network, Addr hash.Hash
	}
}

// MoqDialer_starGenType_DialContext_resultsByParams contains the results for a
// given set of parameters for the Dialer_starGenType type
type MoqDialer_starGenType_DialContext_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDialer_starGenType_DialContext_paramsKey]*MoqDialer_starGenType_DialContext_results
}

// MoqDialer_starGenType_DialContext_doFn defines the type of function needed
// when calling AndDo for the Dialer_starGenType type
type MoqDialer_starGenType_DialContext_doFn func(ctx context.Context, network, addr string)

// MoqDialer_starGenType_DialContext_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Dialer_starGenType type
type MoqDialer_starGenType_DialContext_doReturnFn func(ctx context.Context, network, addr string) (net.Conn, error)

// MoqDialer_starGenType_DialContext_results holds the results of the
// Dialer_starGenType type
type MoqDialer_starGenType_DialContext_results struct {
	Params  MoqDialer_starGenType_DialContext_params
	Results []struct {
		Values *struct {
			Result1 net.Conn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDialer_starGenType_DialContext_doFn
		DoReturnFn MoqDialer_starGenType_DialContext_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDialer_starGenType_DialContext_fnRecorder routes recorded function calls
// to the MoqDialer_starGenType moq
type MoqDialer_starGenType_DialContext_fnRecorder struct {
	Params    MoqDialer_starGenType_DialContext_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDialer_starGenType_DialContext_results
	Moq       *MoqDialer_starGenType
}

// MoqDialer_starGenType_DialContext_anyParams isolates the any params
// functions of the Dialer_starGenType type
type MoqDialer_starGenType_DialContext_anyParams struct {
	Recorder *MoqDialer_starGenType_DialContext_fnRecorder
}

// NewMoqDialer_starGenType creates a new moq of the Dialer_starGenType type
func NewMoqDialer_starGenType(scene *moq.Scene, config *moq.Config) *MoqDialer_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqDialer_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqDialer_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Dial struct {
					Network moq.ParamIndexing
					Addr    moq.ParamIndexing
				}
				DialContext struct {
					Ctx     moq.ParamIndexing
					Network moq.ParamIndexing
					Addr    moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Dial struct {
				Network moq.ParamIndexing
				Addr    moq.ParamIndexing
			}
			DialContext struct {
				Ctx     moq.ParamIndexing
				Network moq.ParamIndexing
				Addr    moq.ParamIndexing
			}
		}{
			Dial: struct {
				Network moq.ParamIndexing
				Addr    moq.ParamIndexing
			}{
				Network: moq.ParamIndexByValue,
				Addr:    moq.ParamIndexByValue,
			},
			DialContext: struct {
				Ctx     moq.ParamIndexing
				Network moq.ParamIndexing
				Addr    moq.ParamIndexing
			}{
				Ctx:     moq.ParamIndexByHash,
				Network: moq.ParamIndexByValue,
				Addr:    moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Dialer_starGenType type
func (m *MoqDialer_starGenType) Mock() *MoqDialer_starGenType_mock { return m.Moq }

func (m *MoqDialer_starGenType_mock) Dial(network, addr string) (result1 net.Conn, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqDialer_starGenType_Dial_params{
		Network: network,
		Addr:    addr,
	}
	var results *MoqDialer_starGenType_Dial_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Dial {
		paramsKey := m.Moq.ParamsKey_Dial(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Dial(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Dial(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Dial(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(network, addr)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(network, addr)
	}
	return
}

func (m *MoqDialer_starGenType_mock) DialContext(ctx context.Context, network, addr string) (result1 net.Conn, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqDialer_starGenType_DialContext_params{
		Ctx:     ctx,
		Network: network,
		Addr:    addr,
	}
	var results *MoqDialer_starGenType_DialContext_results
	for _, resultsByParams := range m.Moq.ResultsByParams_DialContext {
		paramsKey := m.Moq.ParamsKey_DialContext(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_DialContext(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_DialContext(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_DialContext(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(ctx, network, addr)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(ctx, network, addr)
	}
	return
}

// OnCall returns the recorder implementation of the Dialer_starGenType type
func (m *MoqDialer_starGenType) OnCall() *MoqDialer_starGenType_recorder {
	return &MoqDialer_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqDialer_starGenType_recorder) Dial(network, addr string) *MoqDialer_starGenType_Dial_fnRecorder {
	return &MoqDialer_starGenType_Dial_fnRecorder{
		Params: MoqDialer_starGenType_Dial_params{
			Network: network,
			Addr:    addr,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDialer_starGenType_Dial_fnRecorder) Any() *MoqDialer_starGenType_Dial_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Dial(r.Params))
		return nil
	}
	return &MoqDialer_starGenType_Dial_anyParams{Recorder: r}
}

func (a *MoqDialer_starGenType_Dial_anyParams) Network() *MoqDialer_starGenType_Dial_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqDialer_starGenType_Dial_anyParams) Addr() *MoqDialer_starGenType_Dial_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqDialer_starGenType_Dial_fnRecorder) Seq() *MoqDialer_starGenType_Dial_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Dial(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDialer_starGenType_Dial_fnRecorder) NoSeq() *MoqDialer_starGenType_Dial_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Dial(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDialer_starGenType_Dial_fnRecorder) ReturnResults(result1 net.Conn, result2 error) *MoqDialer_starGenType_Dial_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.Conn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDialer_starGenType_Dial_doFn
		DoReturnFn MoqDialer_starGenType_Dial_doReturnFn
	}{
		Values: &struct {
			Result1 net.Conn
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDialer_starGenType_Dial_fnRecorder) AndDo(fn MoqDialer_starGenType_Dial_doFn) *MoqDialer_starGenType_Dial_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDialer_starGenType_Dial_fnRecorder) DoReturnResults(fn MoqDialer_starGenType_Dial_doReturnFn) *MoqDialer_starGenType_Dial_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.Conn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDialer_starGenType_Dial_doFn
		DoReturnFn MoqDialer_starGenType_Dial_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDialer_starGenType_Dial_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDialer_starGenType_Dial_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Dial {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDialer_starGenType_Dial_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDialer_starGenType_Dial_paramsKey]*MoqDialer_starGenType_Dial_results{},
		}
		r.Moq.ResultsByParams_Dial = append(r.Moq.ResultsByParams_Dial, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Dial) {
			copy(r.Moq.ResultsByParams_Dial[insertAt+1:], r.Moq.ResultsByParams_Dial[insertAt:0])
			r.Moq.ResultsByParams_Dial[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Dial(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDialer_starGenType_Dial_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDialer_starGenType_Dial_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDialer_starGenType_Dial_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 net.Conn
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqDialer_starGenType_Dial_doFn
				DoReturnFn MoqDialer_starGenType_Dial_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDialer_starGenType) PrettyParams_Dial(params MoqDialer_starGenType_Dial_params) string {
	return fmt.Sprintf("Dial(%#v, %#v)", params.Network, params.Addr)
}

func (m *MoqDialer_starGenType) ParamsKey_Dial(params MoqDialer_starGenType_Dial_params, anyParams uint64) MoqDialer_starGenType_Dial_paramsKey {
	m.Scene.T.Helper()
	var networkUsed string
	var networkUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Dial.Network == moq.ParamIndexByValue {
			networkUsed = params.Network
		} else {
			networkUsedHash = hash.DeepHash(params.Network)
		}
	}
	var addrUsed string
	var addrUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Dial.Addr == moq.ParamIndexByValue {
			addrUsed = params.Addr
		} else {
			addrUsedHash = hash.DeepHash(params.Addr)
		}
	}
	return MoqDialer_starGenType_Dial_paramsKey{
		Params: struct{ Network, Addr string }{
			Network: networkUsed,
			Addr:    addrUsed,
		},
		Hashes: struct{ Network, Addr hash.Hash }{
			Network: networkUsedHash,
			Addr:    addrUsedHash,
		},
	}
}

func (m *MoqDialer_starGenType_recorder) DialContext(ctx context.Context, network, addr string) *MoqDialer_starGenType_DialContext_fnRecorder {
	return &MoqDialer_starGenType_DialContext_fnRecorder{
		Params: MoqDialer_starGenType_DialContext_params{
			Ctx:     ctx,
			Network: network,
			Addr:    addr,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDialer_starGenType_DialContext_fnRecorder) Any() *MoqDialer_starGenType_DialContext_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DialContext(r.Params))
		return nil
	}
	return &MoqDialer_starGenType_DialContext_anyParams{Recorder: r}
}

func (a *MoqDialer_starGenType_DialContext_anyParams) Ctx() *MoqDialer_starGenType_DialContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqDialer_starGenType_DialContext_anyParams) Network() *MoqDialer_starGenType_DialContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqDialer_starGenType_DialContext_anyParams) Addr() *MoqDialer_starGenType_DialContext_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqDialer_starGenType_DialContext_fnRecorder) Seq() *MoqDialer_starGenType_DialContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DialContext(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDialer_starGenType_DialContext_fnRecorder) NoSeq() *MoqDialer_starGenType_DialContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DialContext(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDialer_starGenType_DialContext_fnRecorder) ReturnResults(result1 net.Conn, result2 error) *MoqDialer_starGenType_DialContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.Conn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDialer_starGenType_DialContext_doFn
		DoReturnFn MoqDialer_starGenType_DialContext_doReturnFn
	}{
		Values: &struct {
			Result1 net.Conn
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDialer_starGenType_DialContext_fnRecorder) AndDo(fn MoqDialer_starGenType_DialContext_doFn) *MoqDialer_starGenType_DialContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDialer_starGenType_DialContext_fnRecorder) DoReturnResults(fn MoqDialer_starGenType_DialContext_doReturnFn) *MoqDialer_starGenType_DialContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 net.Conn
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqDialer_starGenType_DialContext_doFn
		DoReturnFn MoqDialer_starGenType_DialContext_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDialer_starGenType_DialContext_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDialer_starGenType_DialContext_resultsByParams
	for n, res := range r.Moq.ResultsByParams_DialContext {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDialer_starGenType_DialContext_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDialer_starGenType_DialContext_paramsKey]*MoqDialer_starGenType_DialContext_results{},
		}
		r.Moq.ResultsByParams_DialContext = append(r.Moq.ResultsByParams_DialContext, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_DialContext) {
			copy(r.Moq.ResultsByParams_DialContext[insertAt+1:], r.Moq.ResultsByParams_DialContext[insertAt:0])
			r.Moq.ResultsByParams_DialContext[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_DialContext(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDialer_starGenType_DialContext_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDialer_starGenType_DialContext_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDialer_starGenType_DialContext_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 net.Conn
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqDialer_starGenType_DialContext_doFn
				DoReturnFn MoqDialer_starGenType_DialContext_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDialer_starGenType) PrettyParams_DialContext(params MoqDialer_starGenType_DialContext_params) string {
	return fmt.Sprintf("DialContext(%#v, %#v, %#v)", params.Ctx, params.Network, params.Addr)
}

func (m *MoqDialer_starGenType) ParamsKey_DialContext(params MoqDialer_starGenType_DialContext_params, anyParams uint64) MoqDialer_starGenType_DialContext_paramsKey {
	m.Scene.T.Helper()
	var ctxUsed context.Context
	var ctxUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.DialContext.Ctx == moq.ParamIndexByValue {
			ctxUsed = params.Ctx
		} else {
			ctxUsedHash = hash.DeepHash(params.Ctx)
		}
	}
	var networkUsed string
	var networkUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.DialContext.Network == moq.ParamIndexByValue {
			networkUsed = params.Network
		} else {
			networkUsedHash = hash.DeepHash(params.Network)
		}
	}
	var addrUsed string
	var addrUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.DialContext.Addr == moq.ParamIndexByValue {
			addrUsed = params.Addr
		} else {
			addrUsedHash = hash.DeepHash(params.Addr)
		}
	}
	return MoqDialer_starGenType_DialContext_paramsKey{
		Params: struct {
			Ctx           context.Context
			Network, Addr string
		}{
			Ctx:     ctxUsed,
			Network: networkUsed,
			Addr:    addrUsed,
		},
		Hashes: struct {
			Ctx           hash.Hash
			Network, Addr hash.Hash
		}{
			Ctx:     ctxUsedHash,
			Network: networkUsedHash,
			Addr:    addrUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqDialer_starGenType) Reset() {
	m.ResultsByParams_Dial = nil
	m.ResultsByParams_DialContext = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqDialer_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Dial {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Dial(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_DialContext {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_DialContext(results.Params))
			}
		}
	}
}
