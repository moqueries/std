// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package tls

import (
	"crypto/tls"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that tls.ClientSessionCache is mocked
// completely
var _ tls.ClientSessionCache = (*MoqClientSessionCache_mock)(nil)

// MoqClientSessionCache holds the state of a moq of the ClientSessionCache
// type
type MoqClientSessionCache struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqClientSessionCache_mock

	ResultsByParams_Get []MoqClientSessionCache_Get_resultsByParams
	ResultsByParams_Put []MoqClientSessionCache_Put_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Get struct {
				SessionKey moq.ParamIndexing
			}
			Put struct {
				SessionKey moq.ParamIndexing
				Cs         moq.ParamIndexing
			}
		}
	}
	// MoqClientSessionCache_mock isolates the mock interface of the
}

// ClientSessionCache type
type MoqClientSessionCache_mock struct {
	Moq *MoqClientSessionCache
}

// MoqClientSessionCache_recorder isolates the recorder interface of the
// ClientSessionCache type
type MoqClientSessionCache_recorder struct {
	Moq *MoqClientSessionCache
}

// MoqClientSessionCache_Get_params holds the params of the ClientSessionCache
// type
type MoqClientSessionCache_Get_params struct{ SessionKey string }

// MoqClientSessionCache_Get_paramsKey holds the map key params of the
// ClientSessionCache type
type MoqClientSessionCache_Get_paramsKey struct {
	Params struct{ SessionKey string }
	Hashes struct{ SessionKey hash.Hash }
}

// MoqClientSessionCache_Get_resultsByParams contains the results for a given
// set of parameters for the ClientSessionCache type
type MoqClientSessionCache_Get_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqClientSessionCache_Get_paramsKey]*MoqClientSessionCache_Get_results
}

// MoqClientSessionCache_Get_doFn defines the type of function needed when
// calling AndDo for the ClientSessionCache type
type MoqClientSessionCache_Get_doFn func(sessionKey string)

// MoqClientSessionCache_Get_doReturnFn defines the type of function needed
// when calling DoReturnResults for the ClientSessionCache type
type MoqClientSessionCache_Get_doReturnFn func(sessionKey string) (session *tls.ClientSessionState, ok bool)

// MoqClientSessionCache_Get_results holds the results of the
// ClientSessionCache type
type MoqClientSessionCache_Get_results struct {
	Params  MoqClientSessionCache_Get_params
	Results []struct {
		Values *struct {
			Session *tls.ClientSessionState
			Ok      bool
		}
		Sequence   uint32
		DoFn       MoqClientSessionCache_Get_doFn
		DoReturnFn MoqClientSessionCache_Get_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqClientSessionCache_Get_fnRecorder routes recorded function calls to the
// MoqClientSessionCache moq
type MoqClientSessionCache_Get_fnRecorder struct {
	Params    MoqClientSessionCache_Get_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqClientSessionCache_Get_results
	Moq       *MoqClientSessionCache
}

// MoqClientSessionCache_Get_anyParams isolates the any params functions of the
// ClientSessionCache type
type MoqClientSessionCache_Get_anyParams struct {
	Recorder *MoqClientSessionCache_Get_fnRecorder
}

// MoqClientSessionCache_Put_params holds the params of the ClientSessionCache
// type
type MoqClientSessionCache_Put_params struct {
	SessionKey string
	Cs         *tls.ClientSessionState
}

// MoqClientSessionCache_Put_paramsKey holds the map key params of the
// ClientSessionCache type
type MoqClientSessionCache_Put_paramsKey struct {
	Params struct {
		SessionKey string
		Cs         *tls.ClientSessionState
	}
	Hashes struct {
		SessionKey hash.Hash
		Cs         hash.Hash
	}
}

// MoqClientSessionCache_Put_resultsByParams contains the results for a given
// set of parameters for the ClientSessionCache type
type MoqClientSessionCache_Put_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqClientSessionCache_Put_paramsKey]*MoqClientSessionCache_Put_results
}

// MoqClientSessionCache_Put_doFn defines the type of function needed when
// calling AndDo for the ClientSessionCache type
type MoqClientSessionCache_Put_doFn func(sessionKey string, cs *tls.ClientSessionState)

// MoqClientSessionCache_Put_doReturnFn defines the type of function needed
// when calling DoReturnResults for the ClientSessionCache type
type MoqClientSessionCache_Put_doReturnFn func(sessionKey string, cs *tls.ClientSessionState)

// MoqClientSessionCache_Put_results holds the results of the
// ClientSessionCache type
type MoqClientSessionCache_Put_results struct {
	Params  MoqClientSessionCache_Put_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqClientSessionCache_Put_doFn
		DoReturnFn MoqClientSessionCache_Put_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqClientSessionCache_Put_fnRecorder routes recorded function calls to the
// MoqClientSessionCache moq
type MoqClientSessionCache_Put_fnRecorder struct {
	Params    MoqClientSessionCache_Put_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqClientSessionCache_Put_results
	Moq       *MoqClientSessionCache
}

// MoqClientSessionCache_Put_anyParams isolates the any params functions of the
// ClientSessionCache type
type MoqClientSessionCache_Put_anyParams struct {
	Recorder *MoqClientSessionCache_Put_fnRecorder
}

// NewMoqClientSessionCache creates a new moq of the ClientSessionCache type
func NewMoqClientSessionCache(scene *moq.Scene, config *moq.Config) *MoqClientSessionCache {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqClientSessionCache{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqClientSessionCache_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Get struct {
					SessionKey moq.ParamIndexing
				}
				Put struct {
					SessionKey moq.ParamIndexing
					Cs         moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Get struct {
				SessionKey moq.ParamIndexing
			}
			Put struct {
				SessionKey moq.ParamIndexing
				Cs         moq.ParamIndexing
			}
		}{
			Get: struct {
				SessionKey moq.ParamIndexing
			}{
				SessionKey: moq.ParamIndexByValue,
			},
			Put: struct {
				SessionKey moq.ParamIndexing
				Cs         moq.ParamIndexing
			}{
				SessionKey: moq.ParamIndexByValue,
				Cs:         moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the ClientSessionCache type
func (m *MoqClientSessionCache) Mock() *MoqClientSessionCache_mock { return m.Moq }

func (m *MoqClientSessionCache_mock) Get(sessionKey string) (session *tls.ClientSessionState, ok bool) {
	m.Moq.Scene.T.Helper()
	params := MoqClientSessionCache_Get_params{
		SessionKey: sessionKey,
	}
	var results *MoqClientSessionCache_Get_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Get {
		paramsKey := m.Moq.ParamsKey_Get(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Get(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Get(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Get(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(sessionKey)
	}

	if result.Values != nil {
		session = result.Values.Session
		ok = result.Values.Ok
	}
	if result.DoReturnFn != nil {
		session, ok = result.DoReturnFn(sessionKey)
	}
	return
}

func (m *MoqClientSessionCache_mock) Put(sessionKey string, cs *tls.ClientSessionState) {
	m.Moq.Scene.T.Helper()
	params := MoqClientSessionCache_Put_params{
		SessionKey: sessionKey,
		Cs:         cs,
	}
	var results *MoqClientSessionCache_Put_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Put {
		paramsKey := m.Moq.ParamsKey_Put(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Put(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Put(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Put(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(sessionKey, cs)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(sessionKey, cs)
	}
	return
}

// OnCall returns the recorder implementation of the ClientSessionCache type
func (m *MoqClientSessionCache) OnCall() *MoqClientSessionCache_recorder {
	return &MoqClientSessionCache_recorder{
		Moq: m,
	}
}

func (m *MoqClientSessionCache_recorder) Get(sessionKey string) *MoqClientSessionCache_Get_fnRecorder {
	return &MoqClientSessionCache_Get_fnRecorder{
		Params: MoqClientSessionCache_Get_params{
			SessionKey: sessionKey,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqClientSessionCache_Get_fnRecorder) Any() *MoqClientSessionCache_Get_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Get(r.Params))
		return nil
	}
	return &MoqClientSessionCache_Get_anyParams{Recorder: r}
}

func (a *MoqClientSessionCache_Get_anyParams) SessionKey() *MoqClientSessionCache_Get_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqClientSessionCache_Get_fnRecorder) Seq() *MoqClientSessionCache_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Get(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqClientSessionCache_Get_fnRecorder) NoSeq() *MoqClientSessionCache_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Get(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqClientSessionCache_Get_fnRecorder) ReturnResults(session *tls.ClientSessionState, ok bool) *MoqClientSessionCache_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Session *tls.ClientSessionState
			Ok      bool
		}
		Sequence   uint32
		DoFn       MoqClientSessionCache_Get_doFn
		DoReturnFn MoqClientSessionCache_Get_doReturnFn
	}{
		Values: &struct {
			Session *tls.ClientSessionState
			Ok      bool
		}{
			Session: session,
			Ok:      ok,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqClientSessionCache_Get_fnRecorder) AndDo(fn MoqClientSessionCache_Get_doFn) *MoqClientSessionCache_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqClientSessionCache_Get_fnRecorder) DoReturnResults(fn MoqClientSessionCache_Get_doReturnFn) *MoqClientSessionCache_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Session *tls.ClientSessionState
			Ok      bool
		}
		Sequence   uint32
		DoFn       MoqClientSessionCache_Get_doFn
		DoReturnFn MoqClientSessionCache_Get_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqClientSessionCache_Get_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqClientSessionCache_Get_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Get {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqClientSessionCache_Get_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqClientSessionCache_Get_paramsKey]*MoqClientSessionCache_Get_results{},
		}
		r.Moq.ResultsByParams_Get = append(r.Moq.ResultsByParams_Get, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Get) {
			copy(r.Moq.ResultsByParams_Get[insertAt+1:], r.Moq.ResultsByParams_Get[insertAt:0])
			r.Moq.ResultsByParams_Get[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Get(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqClientSessionCache_Get_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqClientSessionCache_Get_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqClientSessionCache_Get_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Session *tls.ClientSessionState
					Ok      bool
				}
				Sequence   uint32
				DoFn       MoqClientSessionCache_Get_doFn
				DoReturnFn MoqClientSessionCache_Get_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqClientSessionCache) PrettyParams_Get(params MoqClientSessionCache_Get_params) string {
	return fmt.Sprintf("Get(%#v)", params.SessionKey)
}

func (m *MoqClientSessionCache) ParamsKey_Get(params MoqClientSessionCache_Get_params, anyParams uint64) MoqClientSessionCache_Get_paramsKey {
	m.Scene.T.Helper()
	var sessionKeyUsed string
	var sessionKeyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Get.SessionKey == moq.ParamIndexByValue {
			sessionKeyUsed = params.SessionKey
		} else {
			sessionKeyUsedHash = hash.DeepHash(params.SessionKey)
		}
	}
	return MoqClientSessionCache_Get_paramsKey{
		Params: struct{ SessionKey string }{
			SessionKey: sessionKeyUsed,
		},
		Hashes: struct{ SessionKey hash.Hash }{
			SessionKey: sessionKeyUsedHash,
		},
	}
}

func (m *MoqClientSessionCache_recorder) Put(sessionKey string, cs *tls.ClientSessionState) *MoqClientSessionCache_Put_fnRecorder {
	return &MoqClientSessionCache_Put_fnRecorder{
		Params: MoqClientSessionCache_Put_params{
			SessionKey: sessionKey,
			Cs:         cs,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqClientSessionCache_Put_fnRecorder) Any() *MoqClientSessionCache_Put_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Put(r.Params))
		return nil
	}
	return &MoqClientSessionCache_Put_anyParams{Recorder: r}
}

func (a *MoqClientSessionCache_Put_anyParams) SessionKey() *MoqClientSessionCache_Put_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqClientSessionCache_Put_anyParams) Cs() *MoqClientSessionCache_Put_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqClientSessionCache_Put_fnRecorder) Seq() *MoqClientSessionCache_Put_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Put(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqClientSessionCache_Put_fnRecorder) NoSeq() *MoqClientSessionCache_Put_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Put(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqClientSessionCache_Put_fnRecorder) ReturnResults() *MoqClientSessionCache_Put_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqClientSessionCache_Put_doFn
		DoReturnFn MoqClientSessionCache_Put_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqClientSessionCache_Put_fnRecorder) AndDo(fn MoqClientSessionCache_Put_doFn) *MoqClientSessionCache_Put_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqClientSessionCache_Put_fnRecorder) DoReturnResults(fn MoqClientSessionCache_Put_doReturnFn) *MoqClientSessionCache_Put_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqClientSessionCache_Put_doFn
		DoReturnFn MoqClientSessionCache_Put_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqClientSessionCache_Put_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqClientSessionCache_Put_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Put {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqClientSessionCache_Put_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqClientSessionCache_Put_paramsKey]*MoqClientSessionCache_Put_results{},
		}
		r.Moq.ResultsByParams_Put = append(r.Moq.ResultsByParams_Put, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Put) {
			copy(r.Moq.ResultsByParams_Put[insertAt+1:], r.Moq.ResultsByParams_Put[insertAt:0])
			r.Moq.ResultsByParams_Put[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Put(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqClientSessionCache_Put_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqClientSessionCache_Put_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqClientSessionCache_Put_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqClientSessionCache_Put_doFn
				DoReturnFn MoqClientSessionCache_Put_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqClientSessionCache) PrettyParams_Put(params MoqClientSessionCache_Put_params) string {
	return fmt.Sprintf("Put(%#v, %#v)", params.SessionKey, params.Cs)
}

func (m *MoqClientSessionCache) ParamsKey_Put(params MoqClientSessionCache_Put_params, anyParams uint64) MoqClientSessionCache_Put_paramsKey {
	m.Scene.T.Helper()
	var sessionKeyUsed string
	var sessionKeyUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Put.SessionKey == moq.ParamIndexByValue {
			sessionKeyUsed = params.SessionKey
		} else {
			sessionKeyUsedHash = hash.DeepHash(params.SessionKey)
		}
	}
	var csUsed *tls.ClientSessionState
	var csUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Put.Cs == moq.ParamIndexByValue {
			csUsed = params.Cs
		} else {
			csUsedHash = hash.DeepHash(params.Cs)
		}
	}
	return MoqClientSessionCache_Put_paramsKey{
		Params: struct {
			SessionKey string
			Cs         *tls.ClientSessionState
		}{
			SessionKey: sessionKeyUsed,
			Cs:         csUsed,
		},
		Hashes: struct {
			SessionKey hash.Hash
			Cs         hash.Hash
		}{
			SessionKey: sessionKeyUsedHash,
			Cs:         csUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqClientSessionCache) Reset() { m.ResultsByParams_Get = nil; m.ResultsByParams_Put = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqClientSessionCache) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Get {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Get(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Put {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Put(results.Params))
			}
		}
	}
}
