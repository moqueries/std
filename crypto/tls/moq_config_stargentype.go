// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package tls

import (
	"crypto/tls"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that tls.Config_starGenType is mocked
// completely
var _ Config_starGenType = (*MoqConfig_starGenType_mock)(nil)

// Config_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Config_starGenType interface {
	Clone() *tls.Config
	SetSessionTicketKeys(keys [][32]byte)
	BuildNameToCertificate()
}

// MoqConfig_starGenType holds the state of a moq of the Config_starGenType
// type
type MoqConfig_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqConfig_starGenType_mock

	ResultsByParams_Clone                  []MoqConfig_starGenType_Clone_resultsByParams
	ResultsByParams_SetSessionTicketKeys   []MoqConfig_starGenType_SetSessionTicketKeys_resultsByParams
	ResultsByParams_BuildNameToCertificate []MoqConfig_starGenType_BuildNameToCertificate_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Clone                struct{}
			SetSessionTicketKeys struct {
				Keys moq.ParamIndexing
			}
			BuildNameToCertificate struct{}
		}
	}
}

// MoqConfig_starGenType_mock isolates the mock interface of the
// Config_starGenType type
type MoqConfig_starGenType_mock struct {
	Moq *MoqConfig_starGenType
}

// MoqConfig_starGenType_recorder isolates the recorder interface of the
// Config_starGenType type
type MoqConfig_starGenType_recorder struct {
	Moq *MoqConfig_starGenType
}

// MoqConfig_starGenType_Clone_params holds the params of the
// Config_starGenType type
type MoqConfig_starGenType_Clone_params struct{}

// MoqConfig_starGenType_Clone_paramsKey holds the map key params of the
// Config_starGenType type
type MoqConfig_starGenType_Clone_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqConfig_starGenType_Clone_resultsByParams contains the results for a given
// set of parameters for the Config_starGenType type
type MoqConfig_starGenType_Clone_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConfig_starGenType_Clone_paramsKey]*MoqConfig_starGenType_Clone_results
}

// MoqConfig_starGenType_Clone_doFn defines the type of function needed when
// calling AndDo for the Config_starGenType type
type MoqConfig_starGenType_Clone_doFn func()

// MoqConfig_starGenType_Clone_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Config_starGenType type
type MoqConfig_starGenType_Clone_doReturnFn func() *tls.Config

// MoqConfig_starGenType_Clone_results holds the results of the
// Config_starGenType type
type MoqConfig_starGenType_Clone_results struct {
	Params  MoqConfig_starGenType_Clone_params
	Results []struct {
		Values *struct {
			Result1 *tls.Config
		}
		Sequence   uint32
		DoFn       MoqConfig_starGenType_Clone_doFn
		DoReturnFn MoqConfig_starGenType_Clone_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConfig_starGenType_Clone_fnRecorder routes recorded function calls to the
// MoqConfig_starGenType moq
type MoqConfig_starGenType_Clone_fnRecorder struct {
	Params    MoqConfig_starGenType_Clone_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConfig_starGenType_Clone_results
	Moq       *MoqConfig_starGenType
}

// MoqConfig_starGenType_Clone_anyParams isolates the any params functions of
// the Config_starGenType type
type MoqConfig_starGenType_Clone_anyParams struct {
	Recorder *MoqConfig_starGenType_Clone_fnRecorder
}

// MoqConfig_starGenType_SetSessionTicketKeys_params holds the params of the
// Config_starGenType type
type MoqConfig_starGenType_SetSessionTicketKeys_params struct{ Keys [][32]byte }

// MoqConfig_starGenType_SetSessionTicketKeys_paramsKey holds the map key
// params of the Config_starGenType type
type MoqConfig_starGenType_SetSessionTicketKeys_paramsKey struct {
	Params struct{}
	Hashes struct{ Keys hash.Hash }
}

// MoqConfig_starGenType_SetSessionTicketKeys_resultsByParams contains the
// results for a given set of parameters for the Config_starGenType type
type MoqConfig_starGenType_SetSessionTicketKeys_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConfig_starGenType_SetSessionTicketKeys_paramsKey]*MoqConfig_starGenType_SetSessionTicketKeys_results
}

// MoqConfig_starGenType_SetSessionTicketKeys_doFn defines the type of function
// needed when calling AndDo for the Config_starGenType type
type MoqConfig_starGenType_SetSessionTicketKeys_doFn func(keys [][32]byte)

// MoqConfig_starGenType_SetSessionTicketKeys_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Config_starGenType type
type MoqConfig_starGenType_SetSessionTicketKeys_doReturnFn func(keys [][32]byte)

// MoqConfig_starGenType_SetSessionTicketKeys_results holds the results of the
// Config_starGenType type
type MoqConfig_starGenType_SetSessionTicketKeys_results struct {
	Params  MoqConfig_starGenType_SetSessionTicketKeys_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqConfig_starGenType_SetSessionTicketKeys_doFn
		DoReturnFn MoqConfig_starGenType_SetSessionTicketKeys_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder routes recorded
// function calls to the MoqConfig_starGenType moq
type MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder struct {
	Params    MoqConfig_starGenType_SetSessionTicketKeys_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConfig_starGenType_SetSessionTicketKeys_results
	Moq       *MoqConfig_starGenType
}

// MoqConfig_starGenType_SetSessionTicketKeys_anyParams isolates the any params
// functions of the Config_starGenType type
type MoqConfig_starGenType_SetSessionTicketKeys_anyParams struct {
	Recorder *MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder
}

// MoqConfig_starGenType_BuildNameToCertificate_params holds the params of the
// Config_starGenType type
type MoqConfig_starGenType_BuildNameToCertificate_params struct{}

// MoqConfig_starGenType_BuildNameToCertificate_paramsKey holds the map key
// params of the Config_starGenType type
type MoqConfig_starGenType_BuildNameToCertificate_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqConfig_starGenType_BuildNameToCertificate_resultsByParams contains the
// results for a given set of parameters for the Config_starGenType type
type MoqConfig_starGenType_BuildNameToCertificate_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqConfig_starGenType_BuildNameToCertificate_paramsKey]*MoqConfig_starGenType_BuildNameToCertificate_results
}

// MoqConfig_starGenType_BuildNameToCertificate_doFn defines the type of
// function needed when calling AndDo for the Config_starGenType type
type MoqConfig_starGenType_BuildNameToCertificate_doFn func()

// MoqConfig_starGenType_BuildNameToCertificate_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Config_starGenType type
type MoqConfig_starGenType_BuildNameToCertificate_doReturnFn func()

// MoqConfig_starGenType_BuildNameToCertificate_results holds the results of
// the Config_starGenType type
type MoqConfig_starGenType_BuildNameToCertificate_results struct {
	Params  MoqConfig_starGenType_BuildNameToCertificate_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqConfig_starGenType_BuildNameToCertificate_doFn
		DoReturnFn MoqConfig_starGenType_BuildNameToCertificate_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqConfig_starGenType_BuildNameToCertificate_fnRecorder routes recorded
// function calls to the MoqConfig_starGenType moq
type MoqConfig_starGenType_BuildNameToCertificate_fnRecorder struct {
	Params    MoqConfig_starGenType_BuildNameToCertificate_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqConfig_starGenType_BuildNameToCertificate_results
	Moq       *MoqConfig_starGenType
}

// MoqConfig_starGenType_BuildNameToCertificate_anyParams isolates the any
// params functions of the Config_starGenType type
type MoqConfig_starGenType_BuildNameToCertificate_anyParams struct {
	Recorder *MoqConfig_starGenType_BuildNameToCertificate_fnRecorder
}

// NewMoqConfig_starGenType creates a new moq of the Config_starGenType type
func NewMoqConfig_starGenType(scene *moq.Scene, config *moq.Config) *MoqConfig_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqConfig_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqConfig_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Clone                struct{}
				SetSessionTicketKeys struct {
					Keys moq.ParamIndexing
				}
				BuildNameToCertificate struct{}
			}
		}{ParameterIndexing: struct {
			Clone                struct{}
			SetSessionTicketKeys struct {
				Keys moq.ParamIndexing
			}
			BuildNameToCertificate struct{}
		}{
			Clone: struct{}{},
			SetSessionTicketKeys: struct {
				Keys moq.ParamIndexing
			}{
				Keys: moq.ParamIndexByHash,
			},
			BuildNameToCertificate: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Config_starGenType type
func (m *MoqConfig_starGenType) Mock() *MoqConfig_starGenType_mock { return m.Moq }

func (m *MoqConfig_starGenType_mock) Clone() (result1 *tls.Config) {
	m.Moq.Scene.T.Helper()
	params := MoqConfig_starGenType_Clone_params{}
	var results *MoqConfig_starGenType_Clone_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Clone {
		paramsKey := m.Moq.ParamsKey_Clone(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Clone(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Clone(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Clone(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqConfig_starGenType_mock) SetSessionTicketKeys(keys [][32]byte) {
	m.Moq.Scene.T.Helper()
	params := MoqConfig_starGenType_SetSessionTicketKeys_params{
		Keys: keys,
	}
	var results *MoqConfig_starGenType_SetSessionTicketKeys_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetSessionTicketKeys {
		paramsKey := m.Moq.ParamsKey_SetSessionTicketKeys(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetSessionTicketKeys(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetSessionTicketKeys(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetSessionTicketKeys(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(keys)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(keys)
	}
	return
}

func (m *MoqConfig_starGenType_mock) BuildNameToCertificate() {
	m.Moq.Scene.T.Helper()
	params := MoqConfig_starGenType_BuildNameToCertificate_params{}
	var results *MoqConfig_starGenType_BuildNameToCertificate_results
	for _, resultsByParams := range m.Moq.ResultsByParams_BuildNameToCertificate {
		paramsKey := m.Moq.ParamsKey_BuildNameToCertificate(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_BuildNameToCertificate(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_BuildNameToCertificate(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_BuildNameToCertificate(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Config_starGenType type
func (m *MoqConfig_starGenType) OnCall() *MoqConfig_starGenType_recorder {
	return &MoqConfig_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqConfig_starGenType_recorder) Clone() *MoqConfig_starGenType_Clone_fnRecorder {
	return &MoqConfig_starGenType_Clone_fnRecorder{
		Params:   MoqConfig_starGenType_Clone_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConfig_starGenType_Clone_fnRecorder) Any() *MoqConfig_starGenType_Clone_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Clone(r.Params))
		return nil
	}
	return &MoqConfig_starGenType_Clone_anyParams{Recorder: r}
}

func (r *MoqConfig_starGenType_Clone_fnRecorder) Seq() *MoqConfig_starGenType_Clone_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Clone(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConfig_starGenType_Clone_fnRecorder) NoSeq() *MoqConfig_starGenType_Clone_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Clone(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConfig_starGenType_Clone_fnRecorder) ReturnResults(result1 *tls.Config) *MoqConfig_starGenType_Clone_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *tls.Config
		}
		Sequence   uint32
		DoFn       MoqConfig_starGenType_Clone_doFn
		DoReturnFn MoqConfig_starGenType_Clone_doReturnFn
	}{
		Values: &struct {
			Result1 *tls.Config
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConfig_starGenType_Clone_fnRecorder) AndDo(fn MoqConfig_starGenType_Clone_doFn) *MoqConfig_starGenType_Clone_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConfig_starGenType_Clone_fnRecorder) DoReturnResults(fn MoqConfig_starGenType_Clone_doReturnFn) *MoqConfig_starGenType_Clone_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *tls.Config
		}
		Sequence   uint32
		DoFn       MoqConfig_starGenType_Clone_doFn
		DoReturnFn MoqConfig_starGenType_Clone_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConfig_starGenType_Clone_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConfig_starGenType_Clone_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Clone {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConfig_starGenType_Clone_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConfig_starGenType_Clone_paramsKey]*MoqConfig_starGenType_Clone_results{},
		}
		r.Moq.ResultsByParams_Clone = append(r.Moq.ResultsByParams_Clone, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Clone) {
			copy(r.Moq.ResultsByParams_Clone[insertAt+1:], r.Moq.ResultsByParams_Clone[insertAt:0])
			r.Moq.ResultsByParams_Clone[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Clone(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConfig_starGenType_Clone_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConfig_starGenType_Clone_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConfig_starGenType_Clone_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *tls.Config
				}
				Sequence   uint32
				DoFn       MoqConfig_starGenType_Clone_doFn
				DoReturnFn MoqConfig_starGenType_Clone_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConfig_starGenType) PrettyParams_Clone(params MoqConfig_starGenType_Clone_params) string {
	return fmt.Sprintf("Clone()")
}

func (m *MoqConfig_starGenType) ParamsKey_Clone(params MoqConfig_starGenType_Clone_params, anyParams uint64) MoqConfig_starGenType_Clone_paramsKey {
	m.Scene.T.Helper()
	return MoqConfig_starGenType_Clone_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqConfig_starGenType_recorder) SetSessionTicketKeys(keys [][32]byte) *MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder {
	return &MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder{
		Params: MoqConfig_starGenType_SetSessionTicketKeys_params{
			Keys: keys,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder) Any() *MoqConfig_starGenType_SetSessionTicketKeys_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetSessionTicketKeys(r.Params))
		return nil
	}
	return &MoqConfig_starGenType_SetSessionTicketKeys_anyParams{Recorder: r}
}

func (a *MoqConfig_starGenType_SetSessionTicketKeys_anyParams) Keys() *MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder) Seq() *MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetSessionTicketKeys(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder) NoSeq() *MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetSessionTicketKeys(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder) ReturnResults() *MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqConfig_starGenType_SetSessionTicketKeys_doFn
		DoReturnFn MoqConfig_starGenType_SetSessionTicketKeys_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder) AndDo(fn MoqConfig_starGenType_SetSessionTicketKeys_doFn) *MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder) DoReturnResults(fn MoqConfig_starGenType_SetSessionTicketKeys_doReturnFn) *MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqConfig_starGenType_SetSessionTicketKeys_doFn
		DoReturnFn MoqConfig_starGenType_SetSessionTicketKeys_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConfig_starGenType_SetSessionTicketKeys_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetSessionTicketKeys {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConfig_starGenType_SetSessionTicketKeys_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConfig_starGenType_SetSessionTicketKeys_paramsKey]*MoqConfig_starGenType_SetSessionTicketKeys_results{},
		}
		r.Moq.ResultsByParams_SetSessionTicketKeys = append(r.Moq.ResultsByParams_SetSessionTicketKeys, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetSessionTicketKeys) {
			copy(r.Moq.ResultsByParams_SetSessionTicketKeys[insertAt+1:], r.Moq.ResultsByParams_SetSessionTicketKeys[insertAt:0])
			r.Moq.ResultsByParams_SetSessionTicketKeys[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetSessionTicketKeys(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConfig_starGenType_SetSessionTicketKeys_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConfig_starGenType_SetSessionTicketKeys_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqConfig_starGenType_SetSessionTicketKeys_doFn
				DoReturnFn MoqConfig_starGenType_SetSessionTicketKeys_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConfig_starGenType) PrettyParams_SetSessionTicketKeys(params MoqConfig_starGenType_SetSessionTicketKeys_params) string {
	return fmt.Sprintf("SetSessionTicketKeys(%#v)", params.Keys)
}

func (m *MoqConfig_starGenType) ParamsKey_SetSessionTicketKeys(params MoqConfig_starGenType_SetSessionTicketKeys_params, anyParams uint64) MoqConfig_starGenType_SetSessionTicketKeys_paramsKey {
	m.Scene.T.Helper()
	var keysUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetSessionTicketKeys.Keys == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The keys parameter of the SetSessionTicketKeys function can't be indexed by value")
		}
		keysUsedHash = hash.DeepHash(params.Keys)
	}
	return MoqConfig_starGenType_SetSessionTicketKeys_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Keys hash.Hash }{
			Keys: keysUsedHash,
		},
	}
}

func (m *MoqConfig_starGenType_recorder) BuildNameToCertificate() *MoqConfig_starGenType_BuildNameToCertificate_fnRecorder {
	return &MoqConfig_starGenType_BuildNameToCertificate_fnRecorder{
		Params:   MoqConfig_starGenType_BuildNameToCertificate_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqConfig_starGenType_BuildNameToCertificate_fnRecorder) Any() *MoqConfig_starGenType_BuildNameToCertificate_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BuildNameToCertificate(r.Params))
		return nil
	}
	return &MoqConfig_starGenType_BuildNameToCertificate_anyParams{Recorder: r}
}

func (r *MoqConfig_starGenType_BuildNameToCertificate_fnRecorder) Seq() *MoqConfig_starGenType_BuildNameToCertificate_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BuildNameToCertificate(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqConfig_starGenType_BuildNameToCertificate_fnRecorder) NoSeq() *MoqConfig_starGenType_BuildNameToCertificate_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BuildNameToCertificate(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqConfig_starGenType_BuildNameToCertificate_fnRecorder) ReturnResults() *MoqConfig_starGenType_BuildNameToCertificate_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqConfig_starGenType_BuildNameToCertificate_doFn
		DoReturnFn MoqConfig_starGenType_BuildNameToCertificate_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqConfig_starGenType_BuildNameToCertificate_fnRecorder) AndDo(fn MoqConfig_starGenType_BuildNameToCertificate_doFn) *MoqConfig_starGenType_BuildNameToCertificate_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqConfig_starGenType_BuildNameToCertificate_fnRecorder) DoReturnResults(fn MoqConfig_starGenType_BuildNameToCertificate_doReturnFn) *MoqConfig_starGenType_BuildNameToCertificate_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqConfig_starGenType_BuildNameToCertificate_doFn
		DoReturnFn MoqConfig_starGenType_BuildNameToCertificate_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqConfig_starGenType_BuildNameToCertificate_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqConfig_starGenType_BuildNameToCertificate_resultsByParams
	for n, res := range r.Moq.ResultsByParams_BuildNameToCertificate {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqConfig_starGenType_BuildNameToCertificate_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqConfig_starGenType_BuildNameToCertificate_paramsKey]*MoqConfig_starGenType_BuildNameToCertificate_results{},
		}
		r.Moq.ResultsByParams_BuildNameToCertificate = append(r.Moq.ResultsByParams_BuildNameToCertificate, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_BuildNameToCertificate) {
			copy(r.Moq.ResultsByParams_BuildNameToCertificate[insertAt+1:], r.Moq.ResultsByParams_BuildNameToCertificate[insertAt:0])
			r.Moq.ResultsByParams_BuildNameToCertificate[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_BuildNameToCertificate(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqConfig_starGenType_BuildNameToCertificate_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqConfig_starGenType_BuildNameToCertificate_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqConfig_starGenType_BuildNameToCertificate_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqConfig_starGenType_BuildNameToCertificate_doFn
				DoReturnFn MoqConfig_starGenType_BuildNameToCertificate_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqConfig_starGenType) PrettyParams_BuildNameToCertificate(params MoqConfig_starGenType_BuildNameToCertificate_params) string {
	return fmt.Sprintf("BuildNameToCertificate()")
}

func (m *MoqConfig_starGenType) ParamsKey_BuildNameToCertificate(params MoqConfig_starGenType_BuildNameToCertificate_params, anyParams uint64) MoqConfig_starGenType_BuildNameToCertificate_paramsKey {
	m.Scene.T.Helper()
	return MoqConfig_starGenType_BuildNameToCertificate_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqConfig_starGenType) Reset() {
	m.ResultsByParams_Clone = nil
	m.ResultsByParams_SetSessionTicketKeys = nil
	m.ResultsByParams_BuildNameToCertificate = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqConfig_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Clone {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Clone(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetSessionTicketKeys {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetSessionTicketKeys(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_BuildNameToCertificate {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_BuildNameToCertificate(results.Params))
			}
		}
	}
}
