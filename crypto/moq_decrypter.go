// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package crypto

import (
	"crypto"
	"fmt"
	"io"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that crypto.Decrypter is mocked
// completely
var _ crypto.Decrypter = (*MoqDecrypter_mock)(nil)

// MoqDecrypter holds the state of a moq of the Decrypter type
type MoqDecrypter struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqDecrypter_mock

	ResultsByParams_Public  []MoqDecrypter_Public_resultsByParams
	ResultsByParams_Decrypt []MoqDecrypter_Decrypt_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Public  struct{}
			Decrypt struct {
				Rand moq.ParamIndexing
				Msg  moq.ParamIndexing
				Opts moq.ParamIndexing
			}
		}
	}
	// MoqDecrypter_mock isolates the mock interface of the Decrypter type
}

type MoqDecrypter_mock struct {
	Moq *MoqDecrypter
}

// MoqDecrypter_recorder isolates the recorder interface of the Decrypter type
type MoqDecrypter_recorder struct {
	Moq *MoqDecrypter
}

// MoqDecrypter_Public_params holds the params of the Decrypter type
type MoqDecrypter_Public_params struct{}

// MoqDecrypter_Public_paramsKey holds the map key params of the Decrypter type
type MoqDecrypter_Public_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDecrypter_Public_resultsByParams contains the results for a given set of
// parameters for the Decrypter type
type MoqDecrypter_Public_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDecrypter_Public_paramsKey]*MoqDecrypter_Public_results
}

// MoqDecrypter_Public_doFn defines the type of function needed when calling
// AndDo for the Decrypter type
type MoqDecrypter_Public_doFn func()

// MoqDecrypter_Public_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Decrypter type
type MoqDecrypter_Public_doReturnFn func() crypto.PublicKey

// MoqDecrypter_Public_results holds the results of the Decrypter type
type MoqDecrypter_Public_results struct {
	Params  MoqDecrypter_Public_params
	Results []struct {
		Values *struct {
			Result1 crypto.PublicKey
		}
		Sequence   uint32
		DoFn       MoqDecrypter_Public_doFn
		DoReturnFn MoqDecrypter_Public_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDecrypter_Public_fnRecorder routes recorded function calls to the
// MoqDecrypter moq
type MoqDecrypter_Public_fnRecorder struct {
	Params    MoqDecrypter_Public_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDecrypter_Public_results
	Moq       *MoqDecrypter
}

// MoqDecrypter_Public_anyParams isolates the any params functions of the
// Decrypter type
type MoqDecrypter_Public_anyParams struct {
	Recorder *MoqDecrypter_Public_fnRecorder
}

// MoqDecrypter_Decrypt_params holds the params of the Decrypter type
type MoqDecrypter_Decrypt_params struct {
	Rand io.Reader
	Msg  []byte
	Opts crypto.DecrypterOpts
}

// MoqDecrypter_Decrypt_paramsKey holds the map key params of the Decrypter
// type
type MoqDecrypter_Decrypt_paramsKey struct {
	Params struct {
		Rand io.Reader
		Opts crypto.DecrypterOpts
	}
	Hashes struct {
		Rand hash.Hash
		Msg  hash.Hash
		Opts hash.Hash
	}
}

// MoqDecrypter_Decrypt_resultsByParams contains the results for a given set of
// parameters for the Decrypter type
type MoqDecrypter_Decrypt_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDecrypter_Decrypt_paramsKey]*MoqDecrypter_Decrypt_results
}

// MoqDecrypter_Decrypt_doFn defines the type of function needed when calling
// AndDo for the Decrypter type
type MoqDecrypter_Decrypt_doFn func(rand io.Reader, msg []byte, opts crypto.DecrypterOpts)

// MoqDecrypter_Decrypt_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Decrypter type
type MoqDecrypter_Decrypt_doReturnFn func(rand io.Reader, msg []byte, opts crypto.DecrypterOpts) (plaintext []byte, err error)

// MoqDecrypter_Decrypt_results holds the results of the Decrypter type
type MoqDecrypter_Decrypt_results struct {
	Params  MoqDecrypter_Decrypt_params
	Results []struct {
		Values *struct {
			Plaintext []byte
			Err       error
		}
		Sequence   uint32
		DoFn       MoqDecrypter_Decrypt_doFn
		DoReturnFn MoqDecrypter_Decrypt_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDecrypter_Decrypt_fnRecorder routes recorded function calls to the
// MoqDecrypter moq
type MoqDecrypter_Decrypt_fnRecorder struct {
	Params    MoqDecrypter_Decrypt_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDecrypter_Decrypt_results
	Moq       *MoqDecrypter
}

// MoqDecrypter_Decrypt_anyParams isolates the any params functions of the
// Decrypter type
type MoqDecrypter_Decrypt_anyParams struct {
	Recorder *MoqDecrypter_Decrypt_fnRecorder
}

// NewMoqDecrypter creates a new moq of the Decrypter type
func NewMoqDecrypter(scene *moq.Scene, config *moq.Config) *MoqDecrypter {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqDecrypter{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqDecrypter_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Public  struct{}
				Decrypt struct {
					Rand moq.ParamIndexing
					Msg  moq.ParamIndexing
					Opts moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Public  struct{}
			Decrypt struct {
				Rand moq.ParamIndexing
				Msg  moq.ParamIndexing
				Opts moq.ParamIndexing
			}
		}{
			Public: struct{}{},
			Decrypt: struct {
				Rand moq.ParamIndexing
				Msg  moq.ParamIndexing
				Opts moq.ParamIndexing
			}{
				Rand: moq.ParamIndexByHash,
				Msg:  moq.ParamIndexByHash,
				Opts: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Decrypter type
func (m *MoqDecrypter) Mock() *MoqDecrypter_mock { return m.Moq }

func (m *MoqDecrypter_mock) Public() (result1 crypto.PublicKey) {
	m.Moq.Scene.T.Helper()
	params := MoqDecrypter_Public_params{}
	var results *MoqDecrypter_Public_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Public {
		paramsKey := m.Moq.ParamsKey_Public(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Public(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Public(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Public(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqDecrypter_mock) Decrypt(rand io.Reader, msg []byte, opts crypto.DecrypterOpts) (plaintext []byte, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqDecrypter_Decrypt_params{
		Rand: rand,
		Msg:  msg,
		Opts: opts,
	}
	var results *MoqDecrypter_Decrypt_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Decrypt {
		paramsKey := m.Moq.ParamsKey_Decrypt(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Decrypt(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Decrypt(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Decrypt(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(rand, msg, opts)
	}

	if result.Values != nil {
		plaintext = result.Values.Plaintext
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		plaintext, err = result.DoReturnFn(rand, msg, opts)
	}
	return
}

// OnCall returns the recorder implementation of the Decrypter type
func (m *MoqDecrypter) OnCall() *MoqDecrypter_recorder {
	return &MoqDecrypter_recorder{
		Moq: m,
	}
}

func (m *MoqDecrypter_recorder) Public() *MoqDecrypter_Public_fnRecorder {
	return &MoqDecrypter_Public_fnRecorder{
		Params:   MoqDecrypter_Public_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDecrypter_Public_fnRecorder) Any() *MoqDecrypter_Public_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Public(r.Params))
		return nil
	}
	return &MoqDecrypter_Public_anyParams{Recorder: r}
}

func (r *MoqDecrypter_Public_fnRecorder) Seq() *MoqDecrypter_Public_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Public(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDecrypter_Public_fnRecorder) NoSeq() *MoqDecrypter_Public_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Public(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDecrypter_Public_fnRecorder) ReturnResults(result1 crypto.PublicKey) *MoqDecrypter_Public_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 crypto.PublicKey
		}
		Sequence   uint32
		DoFn       MoqDecrypter_Public_doFn
		DoReturnFn MoqDecrypter_Public_doReturnFn
	}{
		Values: &struct {
			Result1 crypto.PublicKey
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDecrypter_Public_fnRecorder) AndDo(fn MoqDecrypter_Public_doFn) *MoqDecrypter_Public_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDecrypter_Public_fnRecorder) DoReturnResults(fn MoqDecrypter_Public_doReturnFn) *MoqDecrypter_Public_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 crypto.PublicKey
		}
		Sequence   uint32
		DoFn       MoqDecrypter_Public_doFn
		DoReturnFn MoqDecrypter_Public_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDecrypter_Public_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDecrypter_Public_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Public {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDecrypter_Public_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDecrypter_Public_paramsKey]*MoqDecrypter_Public_results{},
		}
		r.Moq.ResultsByParams_Public = append(r.Moq.ResultsByParams_Public, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Public) {
			copy(r.Moq.ResultsByParams_Public[insertAt+1:], r.Moq.ResultsByParams_Public[insertAt:0])
			r.Moq.ResultsByParams_Public[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Public(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDecrypter_Public_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDecrypter_Public_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDecrypter_Public_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 crypto.PublicKey
				}
				Sequence   uint32
				DoFn       MoqDecrypter_Public_doFn
				DoReturnFn MoqDecrypter_Public_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDecrypter) PrettyParams_Public(params MoqDecrypter_Public_params) string {
	return fmt.Sprintf("Public()")
}

func (m *MoqDecrypter) ParamsKey_Public(params MoqDecrypter_Public_params, anyParams uint64) MoqDecrypter_Public_paramsKey {
	m.Scene.T.Helper()
	return MoqDecrypter_Public_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqDecrypter_recorder) Decrypt(rand io.Reader, msg []byte, opts crypto.DecrypterOpts) *MoqDecrypter_Decrypt_fnRecorder {
	return &MoqDecrypter_Decrypt_fnRecorder{
		Params: MoqDecrypter_Decrypt_params{
			Rand: rand,
			Msg:  msg,
			Opts: opts,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqDecrypter_Decrypt_fnRecorder) Any() *MoqDecrypter_Decrypt_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Decrypt(r.Params))
		return nil
	}
	return &MoqDecrypter_Decrypt_anyParams{Recorder: r}
}

func (a *MoqDecrypter_Decrypt_anyParams) Rand() *MoqDecrypter_Decrypt_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqDecrypter_Decrypt_anyParams) Msg() *MoqDecrypter_Decrypt_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqDecrypter_Decrypt_anyParams) Opts() *MoqDecrypter_Decrypt_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqDecrypter_Decrypt_fnRecorder) Seq() *MoqDecrypter_Decrypt_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Decrypt(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDecrypter_Decrypt_fnRecorder) NoSeq() *MoqDecrypter_Decrypt_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Decrypt(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDecrypter_Decrypt_fnRecorder) ReturnResults(plaintext []byte, err error) *MoqDecrypter_Decrypt_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Plaintext []byte
			Err       error
		}
		Sequence   uint32
		DoFn       MoqDecrypter_Decrypt_doFn
		DoReturnFn MoqDecrypter_Decrypt_doReturnFn
	}{
		Values: &struct {
			Plaintext []byte
			Err       error
		}{
			Plaintext: plaintext,
			Err:       err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDecrypter_Decrypt_fnRecorder) AndDo(fn MoqDecrypter_Decrypt_doFn) *MoqDecrypter_Decrypt_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDecrypter_Decrypt_fnRecorder) DoReturnResults(fn MoqDecrypter_Decrypt_doReturnFn) *MoqDecrypter_Decrypt_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Plaintext []byte
			Err       error
		}
		Sequence   uint32
		DoFn       MoqDecrypter_Decrypt_doFn
		DoReturnFn MoqDecrypter_Decrypt_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDecrypter_Decrypt_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDecrypter_Decrypt_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Decrypt {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDecrypter_Decrypt_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDecrypter_Decrypt_paramsKey]*MoqDecrypter_Decrypt_results{},
		}
		r.Moq.ResultsByParams_Decrypt = append(r.Moq.ResultsByParams_Decrypt, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Decrypt) {
			copy(r.Moq.ResultsByParams_Decrypt[insertAt+1:], r.Moq.ResultsByParams_Decrypt[insertAt:0])
			r.Moq.ResultsByParams_Decrypt[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Decrypt(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDecrypter_Decrypt_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDecrypter_Decrypt_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDecrypter_Decrypt_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Plaintext []byte
					Err       error
				}
				Sequence   uint32
				DoFn       MoqDecrypter_Decrypt_doFn
				DoReturnFn MoqDecrypter_Decrypt_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDecrypter) PrettyParams_Decrypt(params MoqDecrypter_Decrypt_params) string {
	return fmt.Sprintf("Decrypt(%#v, %#v, %#v)", params.Rand, params.Msg, params.Opts)
}

func (m *MoqDecrypter) ParamsKey_Decrypt(params MoqDecrypter_Decrypt_params, anyParams uint64) MoqDecrypter_Decrypt_paramsKey {
	m.Scene.T.Helper()
	var randUsed io.Reader
	var randUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Decrypt.Rand == moq.ParamIndexByValue {
			randUsed = params.Rand
		} else {
			randUsedHash = hash.DeepHash(params.Rand)
		}
	}
	var msgUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Decrypt.Msg == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The msg parameter of the Decrypt function can't be indexed by value")
		}
		msgUsedHash = hash.DeepHash(params.Msg)
	}
	var optsUsed crypto.DecrypterOpts
	var optsUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Decrypt.Opts == moq.ParamIndexByValue {
			optsUsed = params.Opts
		} else {
			optsUsedHash = hash.DeepHash(params.Opts)
		}
	}
	return MoqDecrypter_Decrypt_paramsKey{
		Params: struct {
			Rand io.Reader
			Opts crypto.DecrypterOpts
		}{
			Rand: randUsed,
			Opts: optsUsed,
		},
		Hashes: struct {
			Rand hash.Hash
			Msg  hash.Hash
			Opts hash.Hash
		}{
			Rand: randUsedHash,
			Msg:  msgUsedHash,
			Opts: optsUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqDecrypter) Reset() { m.ResultsByParams_Public = nil; m.ResultsByParams_Decrypt = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqDecrypter) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Public {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Public(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Decrypt {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Decrypt(results.Params))
			}
		}
	}
}
