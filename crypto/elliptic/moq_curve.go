// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package elliptic

import (
	"crypto/elliptic"
	"fmt"
	"math/big"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that elliptic.Curve is mocked
// completely
var _ elliptic.Curve = (*MoqCurve_mock)(nil)

// MoqCurve holds the state of a moq of the Curve type
type MoqCurve struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqCurve_mock

	ResultsByParams_Params         []MoqCurve_Params_resultsByParams
	ResultsByParams_IsOnCurve      []MoqCurve_IsOnCurve_resultsByParams
	ResultsByParams_Add            []MoqCurve_Add_resultsByParams
	ResultsByParams_Double         []MoqCurve_Double_resultsByParams
	ResultsByParams_ScalarMult     []MoqCurve_ScalarMult_resultsByParams
	ResultsByParams_ScalarBaseMult []MoqCurve_ScalarBaseMult_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Params    struct{}
			IsOnCurve struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}
			Add struct {
				X1 moq.ParamIndexing
				Y1 moq.ParamIndexing
				X2 moq.ParamIndexing
				Y2 moq.ParamIndexing
			}
			Double struct {
				X1 moq.ParamIndexing
				Y1 moq.ParamIndexing
			}
			ScalarMult struct {
				X1 moq.ParamIndexing
				Y1 moq.ParamIndexing
				K  moq.ParamIndexing
			}
			ScalarBaseMult struct {
				K moq.ParamIndexing
			}
		}
	}
	// MoqCurve_mock isolates the mock interface of the Curve type
}

type MoqCurve_mock struct {
	Moq *MoqCurve
}

// MoqCurve_recorder isolates the recorder interface of the Curve type
type MoqCurve_recorder struct {
	Moq *MoqCurve
}

// MoqCurve_Params_params holds the params of the Curve type
type MoqCurve_Params_params struct{}

// MoqCurve_Params_paramsKey holds the map key params of the Curve type
type MoqCurve_Params_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqCurve_Params_resultsByParams contains the results for a given set of
// parameters for the Curve type
type MoqCurve_Params_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCurve_Params_paramsKey]*MoqCurve_Params_results
}

// MoqCurve_Params_doFn defines the type of function needed when calling AndDo
// for the Curve type
type MoqCurve_Params_doFn func()

// MoqCurve_Params_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Curve type
type MoqCurve_Params_doReturnFn func() *elliptic.CurveParams

// MoqCurve_Params_results holds the results of the Curve type
type MoqCurve_Params_results struct {
	Params  MoqCurve_Params_params
	Results []struct {
		Values *struct {
			Result1 *elliptic.CurveParams
		}
		Sequence   uint32
		DoFn       MoqCurve_Params_doFn
		DoReturnFn MoqCurve_Params_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCurve_Params_fnRecorder routes recorded function calls to the MoqCurve
// moq
type MoqCurve_Params_fnRecorder struct {
	Params    MoqCurve_Params_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCurve_Params_results
	Moq       *MoqCurve
}

// MoqCurve_Params_anyParams isolates the any params functions of the Curve
// type
type MoqCurve_Params_anyParams struct {
	Recorder *MoqCurve_Params_fnRecorder
}

// MoqCurve_IsOnCurve_params holds the params of the Curve type
type MoqCurve_IsOnCurve_params struct{ X, Y *big.Int }

// MoqCurve_IsOnCurve_paramsKey holds the map key params of the Curve type
type MoqCurve_IsOnCurve_paramsKey struct {
	Params struct{ X, Y *big.Int }
	Hashes struct{ X, Y hash.Hash }
}

// MoqCurve_IsOnCurve_resultsByParams contains the results for a given set of
// parameters for the Curve type
type MoqCurve_IsOnCurve_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCurve_IsOnCurve_paramsKey]*MoqCurve_IsOnCurve_results
}

// MoqCurve_IsOnCurve_doFn defines the type of function needed when calling
// AndDo for the Curve type
type MoqCurve_IsOnCurve_doFn func(x, y *big.Int)

// MoqCurve_IsOnCurve_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Curve type
type MoqCurve_IsOnCurve_doReturnFn func(x, y *big.Int) bool

// MoqCurve_IsOnCurve_results holds the results of the Curve type
type MoqCurve_IsOnCurve_results struct {
	Params  MoqCurve_IsOnCurve_params
	Results []struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqCurve_IsOnCurve_doFn
		DoReturnFn MoqCurve_IsOnCurve_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCurve_IsOnCurve_fnRecorder routes recorded function calls to the MoqCurve
// moq
type MoqCurve_IsOnCurve_fnRecorder struct {
	Params    MoqCurve_IsOnCurve_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCurve_IsOnCurve_results
	Moq       *MoqCurve
}

// MoqCurve_IsOnCurve_anyParams isolates the any params functions of the Curve
// type
type MoqCurve_IsOnCurve_anyParams struct {
	Recorder *MoqCurve_IsOnCurve_fnRecorder
}

// MoqCurve_Add_params holds the params of the Curve type
type MoqCurve_Add_params struct{ X1, Y1, X2, Y2 *big.Int }

// MoqCurve_Add_paramsKey holds the map key params of the Curve type
type MoqCurve_Add_paramsKey struct {
	Params struct{ X1, Y1, X2, Y2 *big.Int }
	Hashes struct{ X1, Y1, X2, Y2 hash.Hash }
}

// MoqCurve_Add_resultsByParams contains the results for a given set of
// parameters for the Curve type
type MoqCurve_Add_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCurve_Add_paramsKey]*MoqCurve_Add_results
}

// MoqCurve_Add_doFn defines the type of function needed when calling AndDo for
// the Curve type
type MoqCurve_Add_doFn func(x1, y1, x2, y2 *big.Int)

// MoqCurve_Add_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Curve type
type MoqCurve_Add_doReturnFn func(x1, y1, x2, y2 *big.Int) (x, y *big.Int)

// MoqCurve_Add_results holds the results of the Curve type
type MoqCurve_Add_results struct {
	Params  MoqCurve_Add_params
	Results []struct {
		Values     *struct{ X, Y *big.Int }
		Sequence   uint32
		DoFn       MoqCurve_Add_doFn
		DoReturnFn MoqCurve_Add_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCurve_Add_fnRecorder routes recorded function calls to the MoqCurve moq
type MoqCurve_Add_fnRecorder struct {
	Params    MoqCurve_Add_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCurve_Add_results
	Moq       *MoqCurve
}

// MoqCurve_Add_anyParams isolates the any params functions of the Curve type
type MoqCurve_Add_anyParams struct {
	Recorder *MoqCurve_Add_fnRecorder
}

// MoqCurve_Double_params holds the params of the Curve type
type MoqCurve_Double_params struct{ X1, Y1 *big.Int }

// MoqCurve_Double_paramsKey holds the map key params of the Curve type
type MoqCurve_Double_paramsKey struct {
	Params struct{ X1, Y1 *big.Int }
	Hashes struct{ X1, Y1 hash.Hash }
}

// MoqCurve_Double_resultsByParams contains the results for a given set of
// parameters for the Curve type
type MoqCurve_Double_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCurve_Double_paramsKey]*MoqCurve_Double_results
}

// MoqCurve_Double_doFn defines the type of function needed when calling AndDo
// for the Curve type
type MoqCurve_Double_doFn func(x1, y1 *big.Int)

// MoqCurve_Double_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Curve type
type MoqCurve_Double_doReturnFn func(x1, y1 *big.Int) (x, y *big.Int)

// MoqCurve_Double_results holds the results of the Curve type
type MoqCurve_Double_results struct {
	Params  MoqCurve_Double_params
	Results []struct {
		Values     *struct{ X, Y *big.Int }
		Sequence   uint32
		DoFn       MoqCurve_Double_doFn
		DoReturnFn MoqCurve_Double_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCurve_Double_fnRecorder routes recorded function calls to the MoqCurve
// moq
type MoqCurve_Double_fnRecorder struct {
	Params    MoqCurve_Double_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCurve_Double_results
	Moq       *MoqCurve
}

// MoqCurve_Double_anyParams isolates the any params functions of the Curve
// type
type MoqCurve_Double_anyParams struct {
	Recorder *MoqCurve_Double_fnRecorder
}

// MoqCurve_ScalarMult_params holds the params of the Curve type
type MoqCurve_ScalarMult_params struct {
	X1, Y1 *big.Int
	K      []byte
}

// MoqCurve_ScalarMult_paramsKey holds the map key params of the Curve type
type MoqCurve_ScalarMult_paramsKey struct {
	Params struct{ X1, Y1 *big.Int }
	Hashes struct {
		X1, Y1 hash.Hash
		K      hash.Hash
	}
}

// MoqCurve_ScalarMult_resultsByParams contains the results for a given set of
// parameters for the Curve type
type MoqCurve_ScalarMult_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCurve_ScalarMult_paramsKey]*MoqCurve_ScalarMult_results
}

// MoqCurve_ScalarMult_doFn defines the type of function needed when calling
// AndDo for the Curve type
type MoqCurve_ScalarMult_doFn func(x1, y1 *big.Int, k []byte)

// MoqCurve_ScalarMult_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Curve type
type MoqCurve_ScalarMult_doReturnFn func(x1, y1 *big.Int, k []byte) (x, y *big.Int)

// MoqCurve_ScalarMult_results holds the results of the Curve type
type MoqCurve_ScalarMult_results struct {
	Params  MoqCurve_ScalarMult_params
	Results []struct {
		Values     *struct{ X, Y *big.Int }
		Sequence   uint32
		DoFn       MoqCurve_ScalarMult_doFn
		DoReturnFn MoqCurve_ScalarMult_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCurve_ScalarMult_fnRecorder routes recorded function calls to the
// MoqCurve moq
type MoqCurve_ScalarMult_fnRecorder struct {
	Params    MoqCurve_ScalarMult_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCurve_ScalarMult_results
	Moq       *MoqCurve
}

// MoqCurve_ScalarMult_anyParams isolates the any params functions of the Curve
// type
type MoqCurve_ScalarMult_anyParams struct {
	Recorder *MoqCurve_ScalarMult_fnRecorder
}

// MoqCurve_ScalarBaseMult_params holds the params of the Curve type
type MoqCurve_ScalarBaseMult_params struct{ K []byte }

// MoqCurve_ScalarBaseMult_paramsKey holds the map key params of the Curve type
type MoqCurve_ScalarBaseMult_paramsKey struct {
	Params struct{}
	Hashes struct{ K hash.Hash }
}

// MoqCurve_ScalarBaseMult_resultsByParams contains the results for a given set
// of parameters for the Curve type
type MoqCurve_ScalarBaseMult_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCurve_ScalarBaseMult_paramsKey]*MoqCurve_ScalarBaseMult_results
}

// MoqCurve_ScalarBaseMult_doFn defines the type of function needed when
// calling AndDo for the Curve type
type MoqCurve_ScalarBaseMult_doFn func(k []byte)

// MoqCurve_ScalarBaseMult_doReturnFn defines the type of function needed when
// calling DoReturnResults for the Curve type
type MoqCurve_ScalarBaseMult_doReturnFn func(k []byte) (x, y *big.Int)

// MoqCurve_ScalarBaseMult_results holds the results of the Curve type
type MoqCurve_ScalarBaseMult_results struct {
	Params  MoqCurve_ScalarBaseMult_params
	Results []struct {
		Values     *struct{ X, Y *big.Int }
		Sequence   uint32
		DoFn       MoqCurve_ScalarBaseMult_doFn
		DoReturnFn MoqCurve_ScalarBaseMult_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCurve_ScalarBaseMult_fnRecorder routes recorded function calls to the
// MoqCurve moq
type MoqCurve_ScalarBaseMult_fnRecorder struct {
	Params    MoqCurve_ScalarBaseMult_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCurve_ScalarBaseMult_results
	Moq       *MoqCurve
}

// MoqCurve_ScalarBaseMult_anyParams isolates the any params functions of the
// Curve type
type MoqCurve_ScalarBaseMult_anyParams struct {
	Recorder *MoqCurve_ScalarBaseMult_fnRecorder
}

// NewMoqCurve creates a new moq of the Curve type
func NewMoqCurve(scene *moq.Scene, config *moq.Config) *MoqCurve {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqCurve{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqCurve_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Params    struct{}
				IsOnCurve struct {
					X moq.ParamIndexing
					Y moq.ParamIndexing
				}
				Add struct {
					X1 moq.ParamIndexing
					Y1 moq.ParamIndexing
					X2 moq.ParamIndexing
					Y2 moq.ParamIndexing
				}
				Double struct {
					X1 moq.ParamIndexing
					Y1 moq.ParamIndexing
				}
				ScalarMult struct {
					X1 moq.ParamIndexing
					Y1 moq.ParamIndexing
					K  moq.ParamIndexing
				}
				ScalarBaseMult struct {
					K moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Params    struct{}
			IsOnCurve struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}
			Add struct {
				X1 moq.ParamIndexing
				Y1 moq.ParamIndexing
				X2 moq.ParamIndexing
				Y2 moq.ParamIndexing
			}
			Double struct {
				X1 moq.ParamIndexing
				Y1 moq.ParamIndexing
			}
			ScalarMult struct {
				X1 moq.ParamIndexing
				Y1 moq.ParamIndexing
				K  moq.ParamIndexing
			}
			ScalarBaseMult struct {
				K moq.ParamIndexing
			}
		}{
			Params: struct{}{},
			IsOnCurve: struct {
				X moq.ParamIndexing
				Y moq.ParamIndexing
			}{
				X: moq.ParamIndexByHash,
				Y: moq.ParamIndexByHash,
			},
			Add: struct {
				X1 moq.ParamIndexing
				Y1 moq.ParamIndexing
				X2 moq.ParamIndexing
				Y2 moq.ParamIndexing
			}{
				X1: moq.ParamIndexByHash,
				Y1: moq.ParamIndexByHash,
				X2: moq.ParamIndexByHash,
				Y2: moq.ParamIndexByHash,
			},
			Double: struct {
				X1 moq.ParamIndexing
				Y1 moq.ParamIndexing
			}{
				X1: moq.ParamIndexByHash,
				Y1: moq.ParamIndexByHash,
			},
			ScalarMult: struct {
				X1 moq.ParamIndexing
				Y1 moq.ParamIndexing
				K  moq.ParamIndexing
			}{
				X1: moq.ParamIndexByHash,
				Y1: moq.ParamIndexByHash,
				K:  moq.ParamIndexByHash,
			},
			ScalarBaseMult: struct {
				K moq.ParamIndexing
			}{
				K: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Curve type
func (m *MoqCurve) Mock() *MoqCurve_mock { return m.Moq }

func (m *MoqCurve_mock) Params() (result1 *elliptic.CurveParams) {
	m.Moq.Scene.T.Helper()
	params := MoqCurve_Params_params{}
	var results *MoqCurve_Params_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Params {
		paramsKey := m.Moq.ParamsKey_Params(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Params(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Params(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Params(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqCurve_mock) IsOnCurve(x, y *big.Int) (result1 bool) {
	m.Moq.Scene.T.Helper()
	params := MoqCurve_IsOnCurve_params{
		X: x,
		Y: y,
	}
	var results *MoqCurve_IsOnCurve_results
	for _, resultsByParams := range m.Moq.ResultsByParams_IsOnCurve {
		paramsKey := m.Moq.ParamsKey_IsOnCurve(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_IsOnCurve(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_IsOnCurve(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_IsOnCurve(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x, y)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(x, y)
	}
	return
}

func (m *MoqCurve_mock) Add(x1, y1, x2, y2 *big.Int) (x, y *big.Int) {
	m.Moq.Scene.T.Helper()
	params := MoqCurve_Add_params{
		X1: x1,
		Y1: y1,
		X2: x2,
		Y2: y2,
	}
	var results *MoqCurve_Add_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Add {
		paramsKey := m.Moq.ParamsKey_Add(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Add(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Add(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Add(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x1, y1, x2, y2)
	}

	if result.Values != nil {
		x = result.Values.X
		y = result.Values.Y
	}
	if result.DoReturnFn != nil {
		x, y = result.DoReturnFn(x1, y1, x2, y2)
	}
	return
}

func (m *MoqCurve_mock) Double(x1, y1 *big.Int) (x, y *big.Int) {
	m.Moq.Scene.T.Helper()
	params := MoqCurve_Double_params{
		X1: x1,
		Y1: y1,
	}
	var results *MoqCurve_Double_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Double {
		paramsKey := m.Moq.ParamsKey_Double(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Double(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Double(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Double(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x1, y1)
	}

	if result.Values != nil {
		x = result.Values.X
		y = result.Values.Y
	}
	if result.DoReturnFn != nil {
		x, y = result.DoReturnFn(x1, y1)
	}
	return
}

func (m *MoqCurve_mock) ScalarMult(x1, y1 *big.Int, k []byte) (x, y *big.Int) {
	m.Moq.Scene.T.Helper()
	params := MoqCurve_ScalarMult_params{
		X1: x1,
		Y1: y1,
		K:  k,
	}
	var results *MoqCurve_ScalarMult_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ScalarMult {
		paramsKey := m.Moq.ParamsKey_ScalarMult(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ScalarMult(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ScalarMult(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ScalarMult(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(x1, y1, k)
	}

	if result.Values != nil {
		x = result.Values.X
		y = result.Values.Y
	}
	if result.DoReturnFn != nil {
		x, y = result.DoReturnFn(x1, y1, k)
	}
	return
}

func (m *MoqCurve_mock) ScalarBaseMult(k []byte) (x, y *big.Int) {
	m.Moq.Scene.T.Helper()
	params := MoqCurve_ScalarBaseMult_params{
		K: k,
	}
	var results *MoqCurve_ScalarBaseMult_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ScalarBaseMult {
		paramsKey := m.Moq.ParamsKey_ScalarBaseMult(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ScalarBaseMult(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ScalarBaseMult(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ScalarBaseMult(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(k)
	}

	if result.Values != nil {
		x = result.Values.X
		y = result.Values.Y
	}
	if result.DoReturnFn != nil {
		x, y = result.DoReturnFn(k)
	}
	return
}

// OnCall returns the recorder implementation of the Curve type
func (m *MoqCurve) OnCall() *MoqCurve_recorder {
	return &MoqCurve_recorder{
		Moq: m,
	}
}

func (m *MoqCurve_recorder) Params() *MoqCurve_Params_fnRecorder {
	return &MoqCurve_Params_fnRecorder{
		Params:   MoqCurve_Params_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCurve_Params_fnRecorder) Any() *MoqCurve_Params_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Params(r.Params))
		return nil
	}
	return &MoqCurve_Params_anyParams{Recorder: r}
}

func (r *MoqCurve_Params_fnRecorder) Seq() *MoqCurve_Params_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Params(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCurve_Params_fnRecorder) NoSeq() *MoqCurve_Params_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Params(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCurve_Params_fnRecorder) ReturnResults(result1 *elliptic.CurveParams) *MoqCurve_Params_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *elliptic.CurveParams
		}
		Sequence   uint32
		DoFn       MoqCurve_Params_doFn
		DoReturnFn MoqCurve_Params_doReturnFn
	}{
		Values: &struct {
			Result1 *elliptic.CurveParams
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCurve_Params_fnRecorder) AndDo(fn MoqCurve_Params_doFn) *MoqCurve_Params_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCurve_Params_fnRecorder) DoReturnResults(fn MoqCurve_Params_doReturnFn) *MoqCurve_Params_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 *elliptic.CurveParams
		}
		Sequence   uint32
		DoFn       MoqCurve_Params_doFn
		DoReturnFn MoqCurve_Params_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCurve_Params_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCurve_Params_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Params {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCurve_Params_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCurve_Params_paramsKey]*MoqCurve_Params_results{},
		}
		r.Moq.ResultsByParams_Params = append(r.Moq.ResultsByParams_Params, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Params) {
			copy(r.Moq.ResultsByParams_Params[insertAt+1:], r.Moq.ResultsByParams_Params[insertAt:0])
			r.Moq.ResultsByParams_Params[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Params(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCurve_Params_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCurve_Params_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCurve_Params_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 *elliptic.CurveParams
				}
				Sequence   uint32
				DoFn       MoqCurve_Params_doFn
				DoReturnFn MoqCurve_Params_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCurve) PrettyParams_Params(params MoqCurve_Params_params) string {
	return fmt.Sprintf("Params()")
}

func (m *MoqCurve) ParamsKey_Params(params MoqCurve_Params_params, anyParams uint64) MoqCurve_Params_paramsKey {
	m.Scene.T.Helper()
	return MoqCurve_Params_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqCurve_recorder) IsOnCurve(x, y *big.Int) *MoqCurve_IsOnCurve_fnRecorder {
	return &MoqCurve_IsOnCurve_fnRecorder{
		Params: MoqCurve_IsOnCurve_params{
			X: x,
			Y: y,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCurve_IsOnCurve_fnRecorder) Any() *MoqCurve_IsOnCurve_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsOnCurve(r.Params))
		return nil
	}
	return &MoqCurve_IsOnCurve_anyParams{Recorder: r}
}

func (a *MoqCurve_IsOnCurve_anyParams) X() *MoqCurve_IsOnCurve_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqCurve_IsOnCurve_anyParams) Y() *MoqCurve_IsOnCurve_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqCurve_IsOnCurve_fnRecorder) Seq() *MoqCurve_IsOnCurve_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsOnCurve(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCurve_IsOnCurve_fnRecorder) NoSeq() *MoqCurve_IsOnCurve_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_IsOnCurve(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCurve_IsOnCurve_fnRecorder) ReturnResults(result1 bool) *MoqCurve_IsOnCurve_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqCurve_IsOnCurve_doFn
		DoReturnFn MoqCurve_IsOnCurve_doReturnFn
	}{
		Values: &struct {
			Result1 bool
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCurve_IsOnCurve_fnRecorder) AndDo(fn MoqCurve_IsOnCurve_doFn) *MoqCurve_IsOnCurve_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCurve_IsOnCurve_fnRecorder) DoReturnResults(fn MoqCurve_IsOnCurve_doReturnFn) *MoqCurve_IsOnCurve_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 bool
		}
		Sequence   uint32
		DoFn       MoqCurve_IsOnCurve_doFn
		DoReturnFn MoqCurve_IsOnCurve_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCurve_IsOnCurve_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCurve_IsOnCurve_resultsByParams
	for n, res := range r.Moq.ResultsByParams_IsOnCurve {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCurve_IsOnCurve_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCurve_IsOnCurve_paramsKey]*MoqCurve_IsOnCurve_results{},
		}
		r.Moq.ResultsByParams_IsOnCurve = append(r.Moq.ResultsByParams_IsOnCurve, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_IsOnCurve) {
			copy(r.Moq.ResultsByParams_IsOnCurve[insertAt+1:], r.Moq.ResultsByParams_IsOnCurve[insertAt:0])
			r.Moq.ResultsByParams_IsOnCurve[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_IsOnCurve(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCurve_IsOnCurve_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCurve_IsOnCurve_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCurve_IsOnCurve_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 bool
				}
				Sequence   uint32
				DoFn       MoqCurve_IsOnCurve_doFn
				DoReturnFn MoqCurve_IsOnCurve_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCurve) PrettyParams_IsOnCurve(params MoqCurve_IsOnCurve_params) string {
	return fmt.Sprintf("IsOnCurve(%#v, %#v)", params.X, params.Y)
}

func (m *MoqCurve) ParamsKey_IsOnCurve(params MoqCurve_IsOnCurve_params, anyParams uint64) MoqCurve_IsOnCurve_paramsKey {
	m.Scene.T.Helper()
	var xUsed *big.Int
	var xUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.IsOnCurve.X == moq.ParamIndexByValue {
			xUsed = params.X
		} else {
			xUsedHash = hash.DeepHash(params.X)
		}
	}
	var yUsed *big.Int
	var yUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.IsOnCurve.Y == moq.ParamIndexByValue {
			yUsed = params.Y
		} else {
			yUsedHash = hash.DeepHash(params.Y)
		}
	}
	return MoqCurve_IsOnCurve_paramsKey{
		Params: struct{ X, Y *big.Int }{
			X: xUsed,
			Y: yUsed,
		},
		Hashes: struct{ X, Y hash.Hash }{
			X: xUsedHash,
			Y: yUsedHash,
		},
	}
}

func (m *MoqCurve_recorder) Add(x1, y1, x2, y2 *big.Int) *MoqCurve_Add_fnRecorder {
	return &MoqCurve_Add_fnRecorder{
		Params: MoqCurve_Add_params{
			X1: x1,
			Y1: y1,
			X2: x2,
			Y2: y2,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCurve_Add_fnRecorder) Any() *MoqCurve_Add_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	return &MoqCurve_Add_anyParams{Recorder: r}
}

func (a *MoqCurve_Add_anyParams) X1() *MoqCurve_Add_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqCurve_Add_anyParams) Y1() *MoqCurve_Add_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqCurve_Add_anyParams) X2() *MoqCurve_Add_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (a *MoqCurve_Add_anyParams) Y2() *MoqCurve_Add_fnRecorder {
	a.Recorder.AnyParams |= 1 << 3
	return a.Recorder
}

func (r *MoqCurve_Add_fnRecorder) Seq() *MoqCurve_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCurve_Add_fnRecorder) NoSeq() *MoqCurve_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Add(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCurve_Add_fnRecorder) ReturnResults(x, y *big.Int) *MoqCurve_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ X, Y *big.Int }
		Sequence   uint32
		DoFn       MoqCurve_Add_doFn
		DoReturnFn MoqCurve_Add_doReturnFn
	}{
		Values: &struct{ X, Y *big.Int }{
			X: x,
			Y: y,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCurve_Add_fnRecorder) AndDo(fn MoqCurve_Add_doFn) *MoqCurve_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCurve_Add_fnRecorder) DoReturnResults(fn MoqCurve_Add_doReturnFn) *MoqCurve_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ X, Y *big.Int }
		Sequence   uint32
		DoFn       MoqCurve_Add_doFn
		DoReturnFn MoqCurve_Add_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCurve_Add_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCurve_Add_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Add {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCurve_Add_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCurve_Add_paramsKey]*MoqCurve_Add_results{},
		}
		r.Moq.ResultsByParams_Add = append(r.Moq.ResultsByParams_Add, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Add) {
			copy(r.Moq.ResultsByParams_Add[insertAt+1:], r.Moq.ResultsByParams_Add[insertAt:0])
			r.Moq.ResultsByParams_Add[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Add(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCurve_Add_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCurve_Add_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCurve_Add_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ X, Y *big.Int }
				Sequence   uint32
				DoFn       MoqCurve_Add_doFn
				DoReturnFn MoqCurve_Add_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCurve) PrettyParams_Add(params MoqCurve_Add_params) string {
	return fmt.Sprintf("Add(%#v, %#v, %#v, %#v)", params.X1, params.Y1, params.X2, params.Y2)
}

func (m *MoqCurve) ParamsKey_Add(params MoqCurve_Add_params, anyParams uint64) MoqCurve_Add_paramsKey {
	m.Scene.T.Helper()
	var x1Used *big.Int
	var x1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Add.X1 == moq.ParamIndexByValue {
			x1Used = params.X1
		} else {
			x1UsedHash = hash.DeepHash(params.X1)
		}
	}
	var y1Used *big.Int
	var y1UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Add.Y1 == moq.ParamIndexByValue {
			y1Used = params.Y1
		} else {
			y1UsedHash = hash.DeepHash(params.Y1)
		}
	}
	var x2Used *big.Int
	var x2UsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Add.X2 == moq.ParamIndexByValue {
			x2Used = params.X2
		} else {
			x2UsedHash = hash.DeepHash(params.X2)
		}
	}
	var y2Used *big.Int
	var y2UsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.Runtime.ParameterIndexing.Add.Y2 == moq.ParamIndexByValue {
			y2Used = params.Y2
		} else {
			y2UsedHash = hash.DeepHash(params.Y2)
		}
	}
	return MoqCurve_Add_paramsKey{
		Params: struct{ X1, Y1, X2, Y2 *big.Int }{
			X1: x1Used,
			Y1: y1Used,
			X2: x2Used,
			Y2: y2Used,
		},
		Hashes: struct{ X1, Y1, X2, Y2 hash.Hash }{
			X1: x1UsedHash,
			Y1: y1UsedHash,
			X2: x2UsedHash,
			Y2: y2UsedHash,
		},
	}
}

func (m *MoqCurve_recorder) Double(x1, y1 *big.Int) *MoqCurve_Double_fnRecorder {
	return &MoqCurve_Double_fnRecorder{
		Params: MoqCurve_Double_params{
			X1: x1,
			Y1: y1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCurve_Double_fnRecorder) Any() *MoqCurve_Double_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Double(r.Params))
		return nil
	}
	return &MoqCurve_Double_anyParams{Recorder: r}
}

func (a *MoqCurve_Double_anyParams) X1() *MoqCurve_Double_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqCurve_Double_anyParams) Y1() *MoqCurve_Double_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqCurve_Double_fnRecorder) Seq() *MoqCurve_Double_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Double(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCurve_Double_fnRecorder) NoSeq() *MoqCurve_Double_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Double(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCurve_Double_fnRecorder) ReturnResults(x, y *big.Int) *MoqCurve_Double_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ X, Y *big.Int }
		Sequence   uint32
		DoFn       MoqCurve_Double_doFn
		DoReturnFn MoqCurve_Double_doReturnFn
	}{
		Values: &struct{ X, Y *big.Int }{
			X: x,
			Y: y,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCurve_Double_fnRecorder) AndDo(fn MoqCurve_Double_doFn) *MoqCurve_Double_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCurve_Double_fnRecorder) DoReturnResults(fn MoqCurve_Double_doReturnFn) *MoqCurve_Double_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ X, Y *big.Int }
		Sequence   uint32
		DoFn       MoqCurve_Double_doFn
		DoReturnFn MoqCurve_Double_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCurve_Double_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCurve_Double_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Double {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCurve_Double_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCurve_Double_paramsKey]*MoqCurve_Double_results{},
		}
		r.Moq.ResultsByParams_Double = append(r.Moq.ResultsByParams_Double, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Double) {
			copy(r.Moq.ResultsByParams_Double[insertAt+1:], r.Moq.ResultsByParams_Double[insertAt:0])
			r.Moq.ResultsByParams_Double[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Double(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCurve_Double_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCurve_Double_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCurve_Double_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ X, Y *big.Int }
				Sequence   uint32
				DoFn       MoqCurve_Double_doFn
				DoReturnFn MoqCurve_Double_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCurve) PrettyParams_Double(params MoqCurve_Double_params) string {
	return fmt.Sprintf("Double(%#v, %#v)", params.X1, params.Y1)
}

func (m *MoqCurve) ParamsKey_Double(params MoqCurve_Double_params, anyParams uint64) MoqCurve_Double_paramsKey {
	m.Scene.T.Helper()
	var x1Used *big.Int
	var x1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Double.X1 == moq.ParamIndexByValue {
			x1Used = params.X1
		} else {
			x1UsedHash = hash.DeepHash(params.X1)
		}
	}
	var y1Used *big.Int
	var y1UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Double.Y1 == moq.ParamIndexByValue {
			y1Used = params.Y1
		} else {
			y1UsedHash = hash.DeepHash(params.Y1)
		}
	}
	return MoqCurve_Double_paramsKey{
		Params: struct{ X1, Y1 *big.Int }{
			X1: x1Used,
			Y1: y1Used,
		},
		Hashes: struct{ X1, Y1 hash.Hash }{
			X1: x1UsedHash,
			Y1: y1UsedHash,
		},
	}
}

func (m *MoqCurve_recorder) ScalarMult(x1, y1 *big.Int, k []byte) *MoqCurve_ScalarMult_fnRecorder {
	return &MoqCurve_ScalarMult_fnRecorder{
		Params: MoqCurve_ScalarMult_params{
			X1: x1,
			Y1: y1,
			K:  k,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCurve_ScalarMult_fnRecorder) Any() *MoqCurve_ScalarMult_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ScalarMult(r.Params))
		return nil
	}
	return &MoqCurve_ScalarMult_anyParams{Recorder: r}
}

func (a *MoqCurve_ScalarMult_anyParams) X1() *MoqCurve_ScalarMult_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqCurve_ScalarMult_anyParams) Y1() *MoqCurve_ScalarMult_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqCurve_ScalarMult_anyParams) K() *MoqCurve_ScalarMult_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqCurve_ScalarMult_fnRecorder) Seq() *MoqCurve_ScalarMult_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ScalarMult(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCurve_ScalarMult_fnRecorder) NoSeq() *MoqCurve_ScalarMult_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ScalarMult(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCurve_ScalarMult_fnRecorder) ReturnResults(x, y *big.Int) *MoqCurve_ScalarMult_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ X, Y *big.Int }
		Sequence   uint32
		DoFn       MoqCurve_ScalarMult_doFn
		DoReturnFn MoqCurve_ScalarMult_doReturnFn
	}{
		Values: &struct{ X, Y *big.Int }{
			X: x,
			Y: y,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCurve_ScalarMult_fnRecorder) AndDo(fn MoqCurve_ScalarMult_doFn) *MoqCurve_ScalarMult_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCurve_ScalarMult_fnRecorder) DoReturnResults(fn MoqCurve_ScalarMult_doReturnFn) *MoqCurve_ScalarMult_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ X, Y *big.Int }
		Sequence   uint32
		DoFn       MoqCurve_ScalarMult_doFn
		DoReturnFn MoqCurve_ScalarMult_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCurve_ScalarMult_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCurve_ScalarMult_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ScalarMult {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCurve_ScalarMult_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCurve_ScalarMult_paramsKey]*MoqCurve_ScalarMult_results{},
		}
		r.Moq.ResultsByParams_ScalarMult = append(r.Moq.ResultsByParams_ScalarMult, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ScalarMult) {
			copy(r.Moq.ResultsByParams_ScalarMult[insertAt+1:], r.Moq.ResultsByParams_ScalarMult[insertAt:0])
			r.Moq.ResultsByParams_ScalarMult[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ScalarMult(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCurve_ScalarMult_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCurve_ScalarMult_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCurve_ScalarMult_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ X, Y *big.Int }
				Sequence   uint32
				DoFn       MoqCurve_ScalarMult_doFn
				DoReturnFn MoqCurve_ScalarMult_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCurve) PrettyParams_ScalarMult(params MoqCurve_ScalarMult_params) string {
	return fmt.Sprintf("ScalarMult(%#v, %#v, %#v)", params.X1, params.Y1, params.K)
}

func (m *MoqCurve) ParamsKey_ScalarMult(params MoqCurve_ScalarMult_params, anyParams uint64) MoqCurve_ScalarMult_paramsKey {
	m.Scene.T.Helper()
	var x1Used *big.Int
	var x1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ScalarMult.X1 == moq.ParamIndexByValue {
			x1Used = params.X1
		} else {
			x1UsedHash = hash.DeepHash(params.X1)
		}
	}
	var y1Used *big.Int
	var y1UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.ScalarMult.Y1 == moq.ParamIndexByValue {
			y1Used = params.Y1
		} else {
			y1UsedHash = hash.DeepHash(params.Y1)
		}
	}
	var kUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.ScalarMult.K == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The k parameter of the ScalarMult function can't be indexed by value")
		}
		kUsedHash = hash.DeepHash(params.K)
	}
	return MoqCurve_ScalarMult_paramsKey{
		Params: struct{ X1, Y1 *big.Int }{
			X1: x1Used,
			Y1: y1Used,
		},
		Hashes: struct {
			X1, Y1 hash.Hash
			K      hash.Hash
		}{
			X1: x1UsedHash,
			Y1: y1UsedHash,
			K:  kUsedHash,
		},
	}
}

func (m *MoqCurve_recorder) ScalarBaseMult(k []byte) *MoqCurve_ScalarBaseMult_fnRecorder {
	return &MoqCurve_ScalarBaseMult_fnRecorder{
		Params: MoqCurve_ScalarBaseMult_params{
			K: k,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCurve_ScalarBaseMult_fnRecorder) Any() *MoqCurve_ScalarBaseMult_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ScalarBaseMult(r.Params))
		return nil
	}
	return &MoqCurve_ScalarBaseMult_anyParams{Recorder: r}
}

func (a *MoqCurve_ScalarBaseMult_anyParams) K() *MoqCurve_ScalarBaseMult_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqCurve_ScalarBaseMult_fnRecorder) Seq() *MoqCurve_ScalarBaseMult_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ScalarBaseMult(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCurve_ScalarBaseMult_fnRecorder) NoSeq() *MoqCurve_ScalarBaseMult_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ScalarBaseMult(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCurve_ScalarBaseMult_fnRecorder) ReturnResults(x, y *big.Int) *MoqCurve_ScalarBaseMult_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ X, Y *big.Int }
		Sequence   uint32
		DoFn       MoqCurve_ScalarBaseMult_doFn
		DoReturnFn MoqCurve_ScalarBaseMult_doReturnFn
	}{
		Values: &struct{ X, Y *big.Int }{
			X: x,
			Y: y,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCurve_ScalarBaseMult_fnRecorder) AndDo(fn MoqCurve_ScalarBaseMult_doFn) *MoqCurve_ScalarBaseMult_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCurve_ScalarBaseMult_fnRecorder) DoReturnResults(fn MoqCurve_ScalarBaseMult_doReturnFn) *MoqCurve_ScalarBaseMult_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ X, Y *big.Int }
		Sequence   uint32
		DoFn       MoqCurve_ScalarBaseMult_doFn
		DoReturnFn MoqCurve_ScalarBaseMult_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCurve_ScalarBaseMult_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCurve_ScalarBaseMult_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ScalarBaseMult {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCurve_ScalarBaseMult_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCurve_ScalarBaseMult_paramsKey]*MoqCurve_ScalarBaseMult_results{},
		}
		r.Moq.ResultsByParams_ScalarBaseMult = append(r.Moq.ResultsByParams_ScalarBaseMult, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ScalarBaseMult) {
			copy(r.Moq.ResultsByParams_ScalarBaseMult[insertAt+1:], r.Moq.ResultsByParams_ScalarBaseMult[insertAt:0])
			r.Moq.ResultsByParams_ScalarBaseMult[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ScalarBaseMult(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCurve_ScalarBaseMult_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCurve_ScalarBaseMult_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCurve_ScalarBaseMult_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ X, Y *big.Int }
				Sequence   uint32
				DoFn       MoqCurve_ScalarBaseMult_doFn
				DoReturnFn MoqCurve_ScalarBaseMult_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCurve) PrettyParams_ScalarBaseMult(params MoqCurve_ScalarBaseMult_params) string {
	return fmt.Sprintf("ScalarBaseMult(%#v)", params.K)
}

func (m *MoqCurve) ParamsKey_ScalarBaseMult(params MoqCurve_ScalarBaseMult_params, anyParams uint64) MoqCurve_ScalarBaseMult_paramsKey {
	m.Scene.T.Helper()
	var kUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.ScalarBaseMult.K == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The k parameter of the ScalarBaseMult function can't be indexed by value")
		}
		kUsedHash = hash.DeepHash(params.K)
	}
	return MoqCurve_ScalarBaseMult_paramsKey{
		Params: struct{}{},
		Hashes: struct{ K hash.Hash }{
			K: kUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqCurve) Reset() {
	m.ResultsByParams_Params = nil
	m.ResultsByParams_IsOnCurve = nil
	m.ResultsByParams_Add = nil
	m.ResultsByParams_Double = nil
	m.ResultsByParams_ScalarMult = nil
	m.ResultsByParams_ScalarBaseMult = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqCurve) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Params {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Params(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_IsOnCurve {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_IsOnCurve(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Add {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Add(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Double {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Double(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ScalarMult {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ScalarMult(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ScalarBaseMult {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ScalarBaseMult(results.Params))
			}
		}
	}
}
