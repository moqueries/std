// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package x509

import (
	"crypto/x509"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that x509.CertPool_starGenType is
// mocked completely
var _ CertPool_starGenType = (*MoqCertPool_starGenType_mock)(nil)

// CertPool_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type CertPool_starGenType interface {
	AddCert(cert *x509.Certificate)
	AppendCertsFromPEM(pemCerts []byte) (ok bool)
	Subjects() [][]byte
}

// MoqCertPool_starGenType holds the state of a moq of the CertPool_starGenType
// type
type MoqCertPool_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqCertPool_starGenType_mock

	ResultsByParams_AddCert            []MoqCertPool_starGenType_AddCert_resultsByParams
	ResultsByParams_AppendCertsFromPEM []MoqCertPool_starGenType_AppendCertsFromPEM_resultsByParams
	ResultsByParams_Subjects           []MoqCertPool_starGenType_Subjects_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			AddCert struct {
				Cert moq.ParamIndexing
			}
			AppendCertsFromPEM struct {
				PemCerts moq.ParamIndexing
			}
			Subjects struct{}
		}
	}
}

// MoqCertPool_starGenType_mock isolates the mock interface of the
// CertPool_starGenType type
type MoqCertPool_starGenType_mock struct {
	Moq *MoqCertPool_starGenType
}

// MoqCertPool_starGenType_recorder isolates the recorder interface of the
// CertPool_starGenType type
type MoqCertPool_starGenType_recorder struct {
	Moq *MoqCertPool_starGenType
}

// MoqCertPool_starGenType_AddCert_params holds the params of the
// CertPool_starGenType type
type MoqCertPool_starGenType_AddCert_params struct{ Cert *x509.Certificate }

// MoqCertPool_starGenType_AddCert_paramsKey holds the map key params of the
// CertPool_starGenType type
type MoqCertPool_starGenType_AddCert_paramsKey struct {
	Params struct{ Cert *x509.Certificate }
	Hashes struct{ Cert hash.Hash }
}

// MoqCertPool_starGenType_AddCert_resultsByParams contains the results for a
// given set of parameters for the CertPool_starGenType type
type MoqCertPool_starGenType_AddCert_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCertPool_starGenType_AddCert_paramsKey]*MoqCertPool_starGenType_AddCert_results
}

// MoqCertPool_starGenType_AddCert_doFn defines the type of function needed
// when calling AndDo for the CertPool_starGenType type
type MoqCertPool_starGenType_AddCert_doFn func(cert *x509.Certificate)

// MoqCertPool_starGenType_AddCert_doReturnFn defines the type of function
// needed when calling DoReturnResults for the CertPool_starGenType type
type MoqCertPool_starGenType_AddCert_doReturnFn func(cert *x509.Certificate)

// MoqCertPool_starGenType_AddCert_results holds the results of the
// CertPool_starGenType type
type MoqCertPool_starGenType_AddCert_results struct {
	Params  MoqCertPool_starGenType_AddCert_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqCertPool_starGenType_AddCert_doFn
		DoReturnFn MoqCertPool_starGenType_AddCert_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCertPool_starGenType_AddCert_fnRecorder routes recorded function calls to
// the MoqCertPool_starGenType moq
type MoqCertPool_starGenType_AddCert_fnRecorder struct {
	Params    MoqCertPool_starGenType_AddCert_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCertPool_starGenType_AddCert_results
	Moq       *MoqCertPool_starGenType
}

// MoqCertPool_starGenType_AddCert_anyParams isolates the any params functions
// of the CertPool_starGenType type
type MoqCertPool_starGenType_AddCert_anyParams struct {
	Recorder *MoqCertPool_starGenType_AddCert_fnRecorder
}

// MoqCertPool_starGenType_AppendCertsFromPEM_params holds the params of the
// CertPool_starGenType type
type MoqCertPool_starGenType_AppendCertsFromPEM_params struct{ PemCerts []byte }

// MoqCertPool_starGenType_AppendCertsFromPEM_paramsKey holds the map key
// params of the CertPool_starGenType type
type MoqCertPool_starGenType_AppendCertsFromPEM_paramsKey struct {
	Params struct{}
	Hashes struct{ PemCerts hash.Hash }
}

// MoqCertPool_starGenType_AppendCertsFromPEM_resultsByParams contains the
// results for a given set of parameters for the CertPool_starGenType type
type MoqCertPool_starGenType_AppendCertsFromPEM_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCertPool_starGenType_AppendCertsFromPEM_paramsKey]*MoqCertPool_starGenType_AppendCertsFromPEM_results
}

// MoqCertPool_starGenType_AppendCertsFromPEM_doFn defines the type of function
// needed when calling AndDo for the CertPool_starGenType type
type MoqCertPool_starGenType_AppendCertsFromPEM_doFn func(pemCerts []byte)

// MoqCertPool_starGenType_AppendCertsFromPEM_doReturnFn defines the type of
// function needed when calling DoReturnResults for the CertPool_starGenType
// type
type MoqCertPool_starGenType_AppendCertsFromPEM_doReturnFn func(pemCerts []byte) (ok bool)

// MoqCertPool_starGenType_AppendCertsFromPEM_results holds the results of the
// CertPool_starGenType type
type MoqCertPool_starGenType_AppendCertsFromPEM_results struct {
	Params  MoqCertPool_starGenType_AppendCertsFromPEM_params
	Results []struct {
		Values     *struct{ Ok bool }
		Sequence   uint32
		DoFn       MoqCertPool_starGenType_AppendCertsFromPEM_doFn
		DoReturnFn MoqCertPool_starGenType_AppendCertsFromPEM_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder routes recorded
// function calls to the MoqCertPool_starGenType moq
type MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder struct {
	Params    MoqCertPool_starGenType_AppendCertsFromPEM_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCertPool_starGenType_AppendCertsFromPEM_results
	Moq       *MoqCertPool_starGenType
}

// MoqCertPool_starGenType_AppendCertsFromPEM_anyParams isolates the any params
// functions of the CertPool_starGenType type
type MoqCertPool_starGenType_AppendCertsFromPEM_anyParams struct {
	Recorder *MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder
}

// MoqCertPool_starGenType_Subjects_params holds the params of the
// CertPool_starGenType type
type MoqCertPool_starGenType_Subjects_params struct{}

// MoqCertPool_starGenType_Subjects_paramsKey holds the map key params of the
// CertPool_starGenType type
type MoqCertPool_starGenType_Subjects_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqCertPool_starGenType_Subjects_resultsByParams contains the results for a
// given set of parameters for the CertPool_starGenType type
type MoqCertPool_starGenType_Subjects_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqCertPool_starGenType_Subjects_paramsKey]*MoqCertPool_starGenType_Subjects_results
}

// MoqCertPool_starGenType_Subjects_doFn defines the type of function needed
// when calling AndDo for the CertPool_starGenType type
type MoqCertPool_starGenType_Subjects_doFn func()

// MoqCertPool_starGenType_Subjects_doReturnFn defines the type of function
// needed when calling DoReturnResults for the CertPool_starGenType type
type MoqCertPool_starGenType_Subjects_doReturnFn func() [][]byte

// MoqCertPool_starGenType_Subjects_results holds the results of the
// CertPool_starGenType type
type MoqCertPool_starGenType_Subjects_results struct {
	Params  MoqCertPool_starGenType_Subjects_params
	Results []struct {
		Values *struct {
			Result1 [][]byte
		}
		Sequence   uint32
		DoFn       MoqCertPool_starGenType_Subjects_doFn
		DoReturnFn MoqCertPool_starGenType_Subjects_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqCertPool_starGenType_Subjects_fnRecorder routes recorded function calls
// to the MoqCertPool_starGenType moq
type MoqCertPool_starGenType_Subjects_fnRecorder struct {
	Params    MoqCertPool_starGenType_Subjects_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqCertPool_starGenType_Subjects_results
	Moq       *MoqCertPool_starGenType
}

// MoqCertPool_starGenType_Subjects_anyParams isolates the any params functions
// of the CertPool_starGenType type
type MoqCertPool_starGenType_Subjects_anyParams struct {
	Recorder *MoqCertPool_starGenType_Subjects_fnRecorder
}

// NewMoqCertPool_starGenType creates a new moq of the CertPool_starGenType
// type
func NewMoqCertPool_starGenType(scene *moq.Scene, config *moq.Config) *MoqCertPool_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqCertPool_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqCertPool_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				AddCert struct {
					Cert moq.ParamIndexing
				}
				AppendCertsFromPEM struct {
					PemCerts moq.ParamIndexing
				}
				Subjects struct{}
			}
		}{ParameterIndexing: struct {
			AddCert struct {
				Cert moq.ParamIndexing
			}
			AppendCertsFromPEM struct {
				PemCerts moq.ParamIndexing
			}
			Subjects struct{}
		}{
			AddCert: struct {
				Cert moq.ParamIndexing
			}{
				Cert: moq.ParamIndexByHash,
			},
			AppendCertsFromPEM: struct {
				PemCerts moq.ParamIndexing
			}{
				PemCerts: moq.ParamIndexByHash,
			},
			Subjects: struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the CertPool_starGenType type
func (m *MoqCertPool_starGenType) Mock() *MoqCertPool_starGenType_mock { return m.Moq }

func (m *MoqCertPool_starGenType_mock) AddCert(cert *x509.Certificate) {
	m.Moq.Scene.T.Helper()
	params := MoqCertPool_starGenType_AddCert_params{
		Cert: cert,
	}
	var results *MoqCertPool_starGenType_AddCert_results
	for _, resultsByParams := range m.Moq.ResultsByParams_AddCert {
		paramsKey := m.Moq.ParamsKey_AddCert(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_AddCert(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_AddCert(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_AddCert(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(cert)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(cert)
	}
	return
}

func (m *MoqCertPool_starGenType_mock) AppendCertsFromPEM(pemCerts []byte) (ok bool) {
	m.Moq.Scene.T.Helper()
	params := MoqCertPool_starGenType_AppendCertsFromPEM_params{
		PemCerts: pemCerts,
	}
	var results *MoqCertPool_starGenType_AppendCertsFromPEM_results
	for _, resultsByParams := range m.Moq.ResultsByParams_AppendCertsFromPEM {
		paramsKey := m.Moq.ParamsKey_AppendCertsFromPEM(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_AppendCertsFromPEM(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_AppendCertsFromPEM(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_AppendCertsFromPEM(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(pemCerts)
	}

	if result.Values != nil {
		ok = result.Values.Ok
	}
	if result.DoReturnFn != nil {
		ok = result.DoReturnFn(pemCerts)
	}
	return
}

func (m *MoqCertPool_starGenType_mock) Subjects() (result1 [][]byte) {
	m.Moq.Scene.T.Helper()
	params := MoqCertPool_starGenType_Subjects_params{}
	var results *MoqCertPool_starGenType_Subjects_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Subjects {
		paramsKey := m.Moq.ParamsKey_Subjects(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Subjects(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Subjects(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Subjects(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the CertPool_starGenType type
func (m *MoqCertPool_starGenType) OnCall() *MoqCertPool_starGenType_recorder {
	return &MoqCertPool_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqCertPool_starGenType_recorder) AddCert(cert *x509.Certificate) *MoqCertPool_starGenType_AddCert_fnRecorder {
	return &MoqCertPool_starGenType_AddCert_fnRecorder{
		Params: MoqCertPool_starGenType_AddCert_params{
			Cert: cert,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCertPool_starGenType_AddCert_fnRecorder) Any() *MoqCertPool_starGenType_AddCert_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AddCert(r.Params))
		return nil
	}
	return &MoqCertPool_starGenType_AddCert_anyParams{Recorder: r}
}

func (a *MoqCertPool_starGenType_AddCert_anyParams) Cert() *MoqCertPool_starGenType_AddCert_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqCertPool_starGenType_AddCert_fnRecorder) Seq() *MoqCertPool_starGenType_AddCert_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AddCert(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCertPool_starGenType_AddCert_fnRecorder) NoSeq() *MoqCertPool_starGenType_AddCert_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AddCert(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCertPool_starGenType_AddCert_fnRecorder) ReturnResults() *MoqCertPool_starGenType_AddCert_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqCertPool_starGenType_AddCert_doFn
		DoReturnFn MoqCertPool_starGenType_AddCert_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCertPool_starGenType_AddCert_fnRecorder) AndDo(fn MoqCertPool_starGenType_AddCert_doFn) *MoqCertPool_starGenType_AddCert_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCertPool_starGenType_AddCert_fnRecorder) DoReturnResults(fn MoqCertPool_starGenType_AddCert_doReturnFn) *MoqCertPool_starGenType_AddCert_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqCertPool_starGenType_AddCert_doFn
		DoReturnFn MoqCertPool_starGenType_AddCert_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCertPool_starGenType_AddCert_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCertPool_starGenType_AddCert_resultsByParams
	for n, res := range r.Moq.ResultsByParams_AddCert {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCertPool_starGenType_AddCert_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCertPool_starGenType_AddCert_paramsKey]*MoqCertPool_starGenType_AddCert_results{},
		}
		r.Moq.ResultsByParams_AddCert = append(r.Moq.ResultsByParams_AddCert, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_AddCert) {
			copy(r.Moq.ResultsByParams_AddCert[insertAt+1:], r.Moq.ResultsByParams_AddCert[insertAt:0])
			r.Moq.ResultsByParams_AddCert[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_AddCert(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCertPool_starGenType_AddCert_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCertPool_starGenType_AddCert_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCertPool_starGenType_AddCert_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqCertPool_starGenType_AddCert_doFn
				DoReturnFn MoqCertPool_starGenType_AddCert_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCertPool_starGenType) PrettyParams_AddCert(params MoqCertPool_starGenType_AddCert_params) string {
	return fmt.Sprintf("AddCert(%#v)", params.Cert)
}

func (m *MoqCertPool_starGenType) ParamsKey_AddCert(params MoqCertPool_starGenType_AddCert_params, anyParams uint64) MoqCertPool_starGenType_AddCert_paramsKey {
	m.Scene.T.Helper()
	var certUsed *x509.Certificate
	var certUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.AddCert.Cert == moq.ParamIndexByValue {
			certUsed = params.Cert
		} else {
			certUsedHash = hash.DeepHash(params.Cert)
		}
	}
	return MoqCertPool_starGenType_AddCert_paramsKey{
		Params: struct{ Cert *x509.Certificate }{
			Cert: certUsed,
		},
		Hashes: struct{ Cert hash.Hash }{
			Cert: certUsedHash,
		},
	}
}

func (m *MoqCertPool_starGenType_recorder) AppendCertsFromPEM(pemCerts []byte) *MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder {
	return &MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder{
		Params: MoqCertPool_starGenType_AppendCertsFromPEM_params{
			PemCerts: pemCerts,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder) Any() *MoqCertPool_starGenType_AppendCertsFromPEM_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AppendCertsFromPEM(r.Params))
		return nil
	}
	return &MoqCertPool_starGenType_AppendCertsFromPEM_anyParams{Recorder: r}
}

func (a *MoqCertPool_starGenType_AppendCertsFromPEM_anyParams) PemCerts() *MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder) Seq() *MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AppendCertsFromPEM(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder) NoSeq() *MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_AppendCertsFromPEM(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder) ReturnResults(ok bool) *MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Ok bool }
		Sequence   uint32
		DoFn       MoqCertPool_starGenType_AppendCertsFromPEM_doFn
		DoReturnFn MoqCertPool_starGenType_AppendCertsFromPEM_doReturnFn
	}{
		Values: &struct{ Ok bool }{
			Ok: ok,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder) AndDo(fn MoqCertPool_starGenType_AppendCertsFromPEM_doFn) *MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder) DoReturnResults(fn MoqCertPool_starGenType_AppendCertsFromPEM_doReturnFn) *MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Ok bool }
		Sequence   uint32
		DoFn       MoqCertPool_starGenType_AppendCertsFromPEM_doFn
		DoReturnFn MoqCertPool_starGenType_AppendCertsFromPEM_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCertPool_starGenType_AppendCertsFromPEM_resultsByParams
	for n, res := range r.Moq.ResultsByParams_AppendCertsFromPEM {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCertPool_starGenType_AppendCertsFromPEM_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCertPool_starGenType_AppendCertsFromPEM_paramsKey]*MoqCertPool_starGenType_AppendCertsFromPEM_results{},
		}
		r.Moq.ResultsByParams_AppendCertsFromPEM = append(r.Moq.ResultsByParams_AppendCertsFromPEM, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_AppendCertsFromPEM) {
			copy(r.Moq.ResultsByParams_AppendCertsFromPEM[insertAt+1:], r.Moq.ResultsByParams_AppendCertsFromPEM[insertAt:0])
			r.Moq.ResultsByParams_AppendCertsFromPEM[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_AppendCertsFromPEM(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCertPool_starGenType_AppendCertsFromPEM_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCertPool_starGenType_AppendCertsFromPEM_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ Ok bool }
				Sequence   uint32
				DoFn       MoqCertPool_starGenType_AppendCertsFromPEM_doFn
				DoReturnFn MoqCertPool_starGenType_AppendCertsFromPEM_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCertPool_starGenType) PrettyParams_AppendCertsFromPEM(params MoqCertPool_starGenType_AppendCertsFromPEM_params) string {
	return fmt.Sprintf("AppendCertsFromPEM(%#v)", params.PemCerts)
}

func (m *MoqCertPool_starGenType) ParamsKey_AppendCertsFromPEM(params MoqCertPool_starGenType_AppendCertsFromPEM_params, anyParams uint64) MoqCertPool_starGenType_AppendCertsFromPEM_paramsKey {
	m.Scene.T.Helper()
	var pemCertsUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.AppendCertsFromPEM.PemCerts == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The pemCerts parameter of the AppendCertsFromPEM function can't be indexed by value")
		}
		pemCertsUsedHash = hash.DeepHash(params.PemCerts)
	}
	return MoqCertPool_starGenType_AppendCertsFromPEM_paramsKey{
		Params: struct{}{},
		Hashes: struct{ PemCerts hash.Hash }{
			PemCerts: pemCertsUsedHash,
		},
	}
}

func (m *MoqCertPool_starGenType_recorder) Subjects() *MoqCertPool_starGenType_Subjects_fnRecorder {
	return &MoqCertPool_starGenType_Subjects_fnRecorder{
		Params:   MoqCertPool_starGenType_Subjects_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqCertPool_starGenType_Subjects_fnRecorder) Any() *MoqCertPool_starGenType_Subjects_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Subjects(r.Params))
		return nil
	}
	return &MoqCertPool_starGenType_Subjects_anyParams{Recorder: r}
}

func (r *MoqCertPool_starGenType_Subjects_fnRecorder) Seq() *MoqCertPool_starGenType_Subjects_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Subjects(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqCertPool_starGenType_Subjects_fnRecorder) NoSeq() *MoqCertPool_starGenType_Subjects_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Subjects(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqCertPool_starGenType_Subjects_fnRecorder) ReturnResults(result1 [][]byte) *MoqCertPool_starGenType_Subjects_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 [][]byte
		}
		Sequence   uint32
		DoFn       MoqCertPool_starGenType_Subjects_doFn
		DoReturnFn MoqCertPool_starGenType_Subjects_doReturnFn
	}{
		Values: &struct {
			Result1 [][]byte
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqCertPool_starGenType_Subjects_fnRecorder) AndDo(fn MoqCertPool_starGenType_Subjects_doFn) *MoqCertPool_starGenType_Subjects_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqCertPool_starGenType_Subjects_fnRecorder) DoReturnResults(fn MoqCertPool_starGenType_Subjects_doReturnFn) *MoqCertPool_starGenType_Subjects_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 [][]byte
		}
		Sequence   uint32
		DoFn       MoqCertPool_starGenType_Subjects_doFn
		DoReturnFn MoqCertPool_starGenType_Subjects_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqCertPool_starGenType_Subjects_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqCertPool_starGenType_Subjects_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Subjects {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqCertPool_starGenType_Subjects_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqCertPool_starGenType_Subjects_paramsKey]*MoqCertPool_starGenType_Subjects_results{},
		}
		r.Moq.ResultsByParams_Subjects = append(r.Moq.ResultsByParams_Subjects, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Subjects) {
			copy(r.Moq.ResultsByParams_Subjects[insertAt+1:], r.Moq.ResultsByParams_Subjects[insertAt:0])
			r.Moq.ResultsByParams_Subjects[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Subjects(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqCertPool_starGenType_Subjects_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqCertPool_starGenType_Subjects_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqCertPool_starGenType_Subjects_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 [][]byte
				}
				Sequence   uint32
				DoFn       MoqCertPool_starGenType_Subjects_doFn
				DoReturnFn MoqCertPool_starGenType_Subjects_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqCertPool_starGenType) PrettyParams_Subjects(params MoqCertPool_starGenType_Subjects_params) string {
	return fmt.Sprintf("Subjects()")
}

func (m *MoqCertPool_starGenType) ParamsKey_Subjects(params MoqCertPool_starGenType_Subjects_params, anyParams uint64) MoqCertPool_starGenType_Subjects_paramsKey {
	m.Scene.T.Helper()
	return MoqCertPool_starGenType_Subjects_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqCertPool_starGenType) Reset() {
	m.ResultsByParams_AddCert = nil
	m.ResultsByParams_AppendCertsFromPEM = nil
	m.ResultsByParams_Subjects = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqCertPool_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_AddCert {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_AddCert(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_AppendCertsFromPEM {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_AppendCertsFromPEM(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Subjects {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Subjects(results.Params))
			}
		}
	}
}
