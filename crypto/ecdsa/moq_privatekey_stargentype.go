// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package ecdsa

import (
	"crypto"
	"fmt"
	"io"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that ecdsa.PrivateKey_starGenType is
// mocked completely
var _ PrivateKey_starGenType = (*MoqPrivateKey_starGenType_mock)(nil)

// PrivateKey_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type PrivateKey_starGenType interface {
	Public() crypto.PublicKey
	Sign(rand io.Reader, digest []byte, opts crypto.SignerOpts) ([]byte, error)
}

// MoqPrivateKey_starGenType holds the state of a moq of the
// PrivateKey_starGenType type
type MoqPrivateKey_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqPrivateKey_starGenType_mock

	ResultsByParams_Public []MoqPrivateKey_starGenType_Public_resultsByParams
	ResultsByParams_Sign   []MoqPrivateKey_starGenType_Sign_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Public struct{}
			Sign   struct {
				Rand   moq.ParamIndexing
				Digest moq.ParamIndexing
				Opts   moq.ParamIndexing
			}
		}
	}
	// MoqPrivateKey_starGenType_mock isolates the mock interface of the
}

// PrivateKey_starGenType type
type MoqPrivateKey_starGenType_mock struct {
	Moq *MoqPrivateKey_starGenType
}

// MoqPrivateKey_starGenType_recorder isolates the recorder interface of the
// PrivateKey_starGenType type
type MoqPrivateKey_starGenType_recorder struct {
	Moq *MoqPrivateKey_starGenType
}

// MoqPrivateKey_starGenType_Public_params holds the params of the
// PrivateKey_starGenType type
type MoqPrivateKey_starGenType_Public_params struct{}

// MoqPrivateKey_starGenType_Public_paramsKey holds the map key params of the
// PrivateKey_starGenType type
type MoqPrivateKey_starGenType_Public_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqPrivateKey_starGenType_Public_resultsByParams contains the results for a
// given set of parameters for the PrivateKey_starGenType type
type MoqPrivateKey_starGenType_Public_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPrivateKey_starGenType_Public_paramsKey]*MoqPrivateKey_starGenType_Public_results
}

// MoqPrivateKey_starGenType_Public_doFn defines the type of function needed
// when calling AndDo for the PrivateKey_starGenType type
type MoqPrivateKey_starGenType_Public_doFn func()

// MoqPrivateKey_starGenType_Public_doReturnFn defines the type of function
// needed when calling DoReturnResults for the PrivateKey_starGenType type
type MoqPrivateKey_starGenType_Public_doReturnFn func() crypto.PublicKey

// MoqPrivateKey_starGenType_Public_results holds the results of the
// PrivateKey_starGenType type
type MoqPrivateKey_starGenType_Public_results struct {
	Params  MoqPrivateKey_starGenType_Public_params
	Results []struct {
		Values *struct {
			Result1 crypto.PublicKey
		}
		Sequence   uint32
		DoFn       MoqPrivateKey_starGenType_Public_doFn
		DoReturnFn MoqPrivateKey_starGenType_Public_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPrivateKey_starGenType_Public_fnRecorder routes recorded function calls
// to the MoqPrivateKey_starGenType moq
type MoqPrivateKey_starGenType_Public_fnRecorder struct {
	Params    MoqPrivateKey_starGenType_Public_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPrivateKey_starGenType_Public_results
	Moq       *MoqPrivateKey_starGenType
}

// MoqPrivateKey_starGenType_Public_anyParams isolates the any params functions
// of the PrivateKey_starGenType type
type MoqPrivateKey_starGenType_Public_anyParams struct {
	Recorder *MoqPrivateKey_starGenType_Public_fnRecorder
}

// MoqPrivateKey_starGenType_Sign_params holds the params of the
// PrivateKey_starGenType type
type MoqPrivateKey_starGenType_Sign_params struct {
	Rand   io.Reader
	Digest []byte
	Opts   crypto.SignerOpts
}

// MoqPrivateKey_starGenType_Sign_paramsKey holds the map key params of the
// PrivateKey_starGenType type
type MoqPrivateKey_starGenType_Sign_paramsKey struct {
	Params struct {
		Rand io.Reader
		Opts crypto.SignerOpts
	}
	Hashes struct {
		Rand   hash.Hash
		Digest hash.Hash
		Opts   hash.Hash
	}
}

// MoqPrivateKey_starGenType_Sign_resultsByParams contains the results for a
// given set of parameters for the PrivateKey_starGenType type
type MoqPrivateKey_starGenType_Sign_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPrivateKey_starGenType_Sign_paramsKey]*MoqPrivateKey_starGenType_Sign_results
}

// MoqPrivateKey_starGenType_Sign_doFn defines the type of function needed when
// calling AndDo for the PrivateKey_starGenType type
type MoqPrivateKey_starGenType_Sign_doFn func(rand io.Reader, digest []byte, opts crypto.SignerOpts)

// MoqPrivateKey_starGenType_Sign_doReturnFn defines the type of function
// needed when calling DoReturnResults for the PrivateKey_starGenType type
type MoqPrivateKey_starGenType_Sign_doReturnFn func(rand io.Reader, digest []byte, opts crypto.SignerOpts) ([]byte, error)

// MoqPrivateKey_starGenType_Sign_results holds the results of the
// PrivateKey_starGenType type
type MoqPrivateKey_starGenType_Sign_results struct {
	Params  MoqPrivateKey_starGenType_Sign_params
	Results []struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqPrivateKey_starGenType_Sign_doFn
		DoReturnFn MoqPrivateKey_starGenType_Sign_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPrivateKey_starGenType_Sign_fnRecorder routes recorded function calls to
// the MoqPrivateKey_starGenType moq
type MoqPrivateKey_starGenType_Sign_fnRecorder struct {
	Params    MoqPrivateKey_starGenType_Sign_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPrivateKey_starGenType_Sign_results
	Moq       *MoqPrivateKey_starGenType
}

// MoqPrivateKey_starGenType_Sign_anyParams isolates the any params functions
// of the PrivateKey_starGenType type
type MoqPrivateKey_starGenType_Sign_anyParams struct {
	Recorder *MoqPrivateKey_starGenType_Sign_fnRecorder
}

// NewMoqPrivateKey_starGenType creates a new moq of the PrivateKey_starGenType
// type
func NewMoqPrivateKey_starGenType(scene *moq.Scene, config *moq.Config) *MoqPrivateKey_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqPrivateKey_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqPrivateKey_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Public struct{}
				Sign   struct {
					Rand   moq.ParamIndexing
					Digest moq.ParamIndexing
					Opts   moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Public struct{}
			Sign   struct {
				Rand   moq.ParamIndexing
				Digest moq.ParamIndexing
				Opts   moq.ParamIndexing
			}
		}{
			Public: struct{}{},
			Sign: struct {
				Rand   moq.ParamIndexing
				Digest moq.ParamIndexing
				Opts   moq.ParamIndexing
			}{
				Rand:   moq.ParamIndexByHash,
				Digest: moq.ParamIndexByHash,
				Opts:   moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the PrivateKey_starGenType type
func (m *MoqPrivateKey_starGenType) Mock() *MoqPrivateKey_starGenType_mock { return m.Moq }

func (m *MoqPrivateKey_starGenType_mock) Public() (result1 crypto.PublicKey) {
	m.Moq.Scene.T.Helper()
	params := MoqPrivateKey_starGenType_Public_params{}
	var results *MoqPrivateKey_starGenType_Public_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Public {
		paramsKey := m.Moq.ParamsKey_Public(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Public(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Public(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Public(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqPrivateKey_starGenType_mock) Sign(rand io.Reader, digest []byte, opts crypto.SignerOpts) (result1 []byte, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqPrivateKey_starGenType_Sign_params{
		Rand:   rand,
		Digest: digest,
		Opts:   opts,
	}
	var results *MoqPrivateKey_starGenType_Sign_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Sign {
		paramsKey := m.Moq.ParamsKey_Sign(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Sign(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Sign(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Sign(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(rand, digest, opts)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(rand, digest, opts)
	}
	return
}

// OnCall returns the recorder implementation of the PrivateKey_starGenType
// type
func (m *MoqPrivateKey_starGenType) OnCall() *MoqPrivateKey_starGenType_recorder {
	return &MoqPrivateKey_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqPrivateKey_starGenType_recorder) Public() *MoqPrivateKey_starGenType_Public_fnRecorder {
	return &MoqPrivateKey_starGenType_Public_fnRecorder{
		Params:   MoqPrivateKey_starGenType_Public_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPrivateKey_starGenType_Public_fnRecorder) Any() *MoqPrivateKey_starGenType_Public_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Public(r.Params))
		return nil
	}
	return &MoqPrivateKey_starGenType_Public_anyParams{Recorder: r}
}

func (r *MoqPrivateKey_starGenType_Public_fnRecorder) Seq() *MoqPrivateKey_starGenType_Public_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Public(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPrivateKey_starGenType_Public_fnRecorder) NoSeq() *MoqPrivateKey_starGenType_Public_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Public(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPrivateKey_starGenType_Public_fnRecorder) ReturnResults(result1 crypto.PublicKey) *MoqPrivateKey_starGenType_Public_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 crypto.PublicKey
		}
		Sequence   uint32
		DoFn       MoqPrivateKey_starGenType_Public_doFn
		DoReturnFn MoqPrivateKey_starGenType_Public_doReturnFn
	}{
		Values: &struct {
			Result1 crypto.PublicKey
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPrivateKey_starGenType_Public_fnRecorder) AndDo(fn MoqPrivateKey_starGenType_Public_doFn) *MoqPrivateKey_starGenType_Public_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPrivateKey_starGenType_Public_fnRecorder) DoReturnResults(fn MoqPrivateKey_starGenType_Public_doReturnFn) *MoqPrivateKey_starGenType_Public_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 crypto.PublicKey
		}
		Sequence   uint32
		DoFn       MoqPrivateKey_starGenType_Public_doFn
		DoReturnFn MoqPrivateKey_starGenType_Public_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPrivateKey_starGenType_Public_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPrivateKey_starGenType_Public_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Public {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPrivateKey_starGenType_Public_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPrivateKey_starGenType_Public_paramsKey]*MoqPrivateKey_starGenType_Public_results{},
		}
		r.Moq.ResultsByParams_Public = append(r.Moq.ResultsByParams_Public, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Public) {
			copy(r.Moq.ResultsByParams_Public[insertAt+1:], r.Moq.ResultsByParams_Public[insertAt:0])
			r.Moq.ResultsByParams_Public[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Public(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPrivateKey_starGenType_Public_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPrivateKey_starGenType_Public_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPrivateKey_starGenType_Public_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 crypto.PublicKey
				}
				Sequence   uint32
				DoFn       MoqPrivateKey_starGenType_Public_doFn
				DoReturnFn MoqPrivateKey_starGenType_Public_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPrivateKey_starGenType) PrettyParams_Public(params MoqPrivateKey_starGenType_Public_params) string {
	return fmt.Sprintf("Public()")
}

func (m *MoqPrivateKey_starGenType) ParamsKey_Public(params MoqPrivateKey_starGenType_Public_params, anyParams uint64) MoqPrivateKey_starGenType_Public_paramsKey {
	m.Scene.T.Helper()
	return MoqPrivateKey_starGenType_Public_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqPrivateKey_starGenType_recorder) Sign(rand io.Reader, digest []byte, opts crypto.SignerOpts) *MoqPrivateKey_starGenType_Sign_fnRecorder {
	return &MoqPrivateKey_starGenType_Sign_fnRecorder{
		Params: MoqPrivateKey_starGenType_Sign_params{
			Rand:   rand,
			Digest: digest,
			Opts:   opts,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqPrivateKey_starGenType_Sign_fnRecorder) Any() *MoqPrivateKey_starGenType_Sign_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sign(r.Params))
		return nil
	}
	return &MoqPrivateKey_starGenType_Sign_anyParams{Recorder: r}
}

func (a *MoqPrivateKey_starGenType_Sign_anyParams) Rand() *MoqPrivateKey_starGenType_Sign_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqPrivateKey_starGenType_Sign_anyParams) Digest() *MoqPrivateKey_starGenType_Sign_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqPrivateKey_starGenType_Sign_anyParams) Opts() *MoqPrivateKey_starGenType_Sign_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqPrivateKey_starGenType_Sign_fnRecorder) Seq() *MoqPrivateKey_starGenType_Sign_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sign(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPrivateKey_starGenType_Sign_fnRecorder) NoSeq() *MoqPrivateKey_starGenType_Sign_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Sign(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPrivateKey_starGenType_Sign_fnRecorder) ReturnResults(result1 []byte, result2 error) *MoqPrivateKey_starGenType_Sign_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqPrivateKey_starGenType_Sign_doFn
		DoReturnFn MoqPrivateKey_starGenType_Sign_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPrivateKey_starGenType_Sign_fnRecorder) AndDo(fn MoqPrivateKey_starGenType_Sign_doFn) *MoqPrivateKey_starGenType_Sign_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPrivateKey_starGenType_Sign_fnRecorder) DoReturnResults(fn MoqPrivateKey_starGenType_Sign_doReturnFn) *MoqPrivateKey_starGenType_Sign_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqPrivateKey_starGenType_Sign_doFn
		DoReturnFn MoqPrivateKey_starGenType_Sign_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPrivateKey_starGenType_Sign_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPrivateKey_starGenType_Sign_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Sign {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPrivateKey_starGenType_Sign_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPrivateKey_starGenType_Sign_paramsKey]*MoqPrivateKey_starGenType_Sign_results{},
		}
		r.Moq.ResultsByParams_Sign = append(r.Moq.ResultsByParams_Sign, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Sign) {
			copy(r.Moq.ResultsByParams_Sign[insertAt+1:], r.Moq.ResultsByParams_Sign[insertAt:0])
			r.Moq.ResultsByParams_Sign[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Sign(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPrivateKey_starGenType_Sign_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPrivateKey_starGenType_Sign_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPrivateKey_starGenType_Sign_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqPrivateKey_starGenType_Sign_doFn
				DoReturnFn MoqPrivateKey_starGenType_Sign_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPrivateKey_starGenType) PrettyParams_Sign(params MoqPrivateKey_starGenType_Sign_params) string {
	return fmt.Sprintf("Sign(%#v, %#v, %#v)", params.Rand, params.Digest, params.Opts)
}

func (m *MoqPrivateKey_starGenType) ParamsKey_Sign(params MoqPrivateKey_starGenType_Sign_params, anyParams uint64) MoqPrivateKey_starGenType_Sign_paramsKey {
	m.Scene.T.Helper()
	var randUsed io.Reader
	var randUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Sign.Rand == moq.ParamIndexByValue {
			randUsed = params.Rand
		} else {
			randUsedHash = hash.DeepHash(params.Rand)
		}
	}
	var digestUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Sign.Digest == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The digest parameter of the Sign function can't be indexed by value")
		}
		digestUsedHash = hash.DeepHash(params.Digest)
	}
	var optsUsed crypto.SignerOpts
	var optsUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Sign.Opts == moq.ParamIndexByValue {
			optsUsed = params.Opts
		} else {
			optsUsedHash = hash.DeepHash(params.Opts)
		}
	}
	return MoqPrivateKey_starGenType_Sign_paramsKey{
		Params: struct {
			Rand io.Reader
			Opts crypto.SignerOpts
		}{
			Rand: randUsed,
			Opts: optsUsed,
		},
		Hashes: struct {
			Rand   hash.Hash
			Digest hash.Hash
			Opts   hash.Hash
		}{
			Rand:   randUsedHash,
			Digest: digestUsedHash,
			Opts:   optsUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqPrivateKey_starGenType) Reset() {
	m.ResultsByParams_Public = nil
	m.ResultsByParams_Sign = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqPrivateKey_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Public {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Public(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Sign {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Sign(results.Params))
			}
		}
	}
}
