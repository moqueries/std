// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package cipher

import (
	"crypto/cipher"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that cipher.BlockMode is mocked
// completely
var _ cipher.BlockMode = (*MoqBlockMode_mock)(nil)

// MoqBlockMode holds the state of a moq of the BlockMode type
type MoqBlockMode struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqBlockMode_mock

	ResultsByParams_BlockSize   []MoqBlockMode_BlockSize_resultsByParams
	ResultsByParams_CryptBlocks []MoqBlockMode_CryptBlocks_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			BlockSize   struct{}
			CryptBlocks struct {
				Dst moq.ParamIndexing
				Src moq.ParamIndexing
			}
		}
	}
	// MoqBlockMode_mock isolates the mock interface of the BlockMode type
}

type MoqBlockMode_mock struct {
	Moq *MoqBlockMode
}

// MoqBlockMode_recorder isolates the recorder interface of the BlockMode type
type MoqBlockMode_recorder struct {
	Moq *MoqBlockMode
}

// MoqBlockMode_BlockSize_params holds the params of the BlockMode type
type MoqBlockMode_BlockSize_params struct{}

// MoqBlockMode_BlockSize_paramsKey holds the map key params of the BlockMode
// type
type MoqBlockMode_BlockSize_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqBlockMode_BlockSize_resultsByParams contains the results for a given set
// of parameters for the BlockMode type
type MoqBlockMode_BlockSize_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBlockMode_BlockSize_paramsKey]*MoqBlockMode_BlockSize_results
}

// MoqBlockMode_BlockSize_doFn defines the type of function needed when calling
// AndDo for the BlockMode type
type MoqBlockMode_BlockSize_doFn func()

// MoqBlockMode_BlockSize_doReturnFn defines the type of function needed when
// calling DoReturnResults for the BlockMode type
type MoqBlockMode_BlockSize_doReturnFn func() int

// MoqBlockMode_BlockSize_results holds the results of the BlockMode type
type MoqBlockMode_BlockSize_results struct {
	Params  MoqBlockMode_BlockSize_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqBlockMode_BlockSize_doFn
		DoReturnFn MoqBlockMode_BlockSize_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBlockMode_BlockSize_fnRecorder routes recorded function calls to the
// MoqBlockMode moq
type MoqBlockMode_BlockSize_fnRecorder struct {
	Params    MoqBlockMode_BlockSize_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBlockMode_BlockSize_results
	Moq       *MoqBlockMode
}

// MoqBlockMode_BlockSize_anyParams isolates the any params functions of the
// BlockMode type
type MoqBlockMode_BlockSize_anyParams struct {
	Recorder *MoqBlockMode_BlockSize_fnRecorder
}

// MoqBlockMode_CryptBlocks_params holds the params of the BlockMode type
type MoqBlockMode_CryptBlocks_params struct{ Dst, Src []byte }

// MoqBlockMode_CryptBlocks_paramsKey holds the map key params of the BlockMode
// type
type MoqBlockMode_CryptBlocks_paramsKey struct {
	Params struct{}
	Hashes struct{ Dst, Src hash.Hash }
}

// MoqBlockMode_CryptBlocks_resultsByParams contains the results for a given
// set of parameters for the BlockMode type
type MoqBlockMode_CryptBlocks_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqBlockMode_CryptBlocks_paramsKey]*MoqBlockMode_CryptBlocks_results
}

// MoqBlockMode_CryptBlocks_doFn defines the type of function needed when
// calling AndDo for the BlockMode type
type MoqBlockMode_CryptBlocks_doFn func(dst, src []byte)

// MoqBlockMode_CryptBlocks_doReturnFn defines the type of function needed when
// calling DoReturnResults for the BlockMode type
type MoqBlockMode_CryptBlocks_doReturnFn func(dst, src []byte)

// MoqBlockMode_CryptBlocks_results holds the results of the BlockMode type
type MoqBlockMode_CryptBlocks_results struct {
	Params  MoqBlockMode_CryptBlocks_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqBlockMode_CryptBlocks_doFn
		DoReturnFn MoqBlockMode_CryptBlocks_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqBlockMode_CryptBlocks_fnRecorder routes recorded function calls to the
// MoqBlockMode moq
type MoqBlockMode_CryptBlocks_fnRecorder struct {
	Params    MoqBlockMode_CryptBlocks_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqBlockMode_CryptBlocks_results
	Moq       *MoqBlockMode
}

// MoqBlockMode_CryptBlocks_anyParams isolates the any params functions of the
// BlockMode type
type MoqBlockMode_CryptBlocks_anyParams struct {
	Recorder *MoqBlockMode_CryptBlocks_fnRecorder
}

// NewMoqBlockMode creates a new moq of the BlockMode type
func NewMoqBlockMode(scene *moq.Scene, config *moq.Config) *MoqBlockMode {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqBlockMode{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqBlockMode_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				BlockSize   struct{}
				CryptBlocks struct {
					Dst moq.ParamIndexing
					Src moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			BlockSize   struct{}
			CryptBlocks struct {
				Dst moq.ParamIndexing
				Src moq.ParamIndexing
			}
		}{
			BlockSize: struct{}{},
			CryptBlocks: struct {
				Dst moq.ParamIndexing
				Src moq.ParamIndexing
			}{
				Dst: moq.ParamIndexByHash,
				Src: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the BlockMode type
func (m *MoqBlockMode) Mock() *MoqBlockMode_mock { return m.Moq }

func (m *MoqBlockMode_mock) BlockSize() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqBlockMode_BlockSize_params{}
	var results *MoqBlockMode_BlockSize_results
	for _, resultsByParams := range m.Moq.ResultsByParams_BlockSize {
		paramsKey := m.Moq.ParamsKey_BlockSize(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_BlockSize(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_BlockSize(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_BlockSize(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqBlockMode_mock) CryptBlocks(dst, src []byte) {
	m.Moq.Scene.T.Helper()
	params := MoqBlockMode_CryptBlocks_params{
		Dst: dst,
		Src: src,
	}
	var results *MoqBlockMode_CryptBlocks_results
	for _, resultsByParams := range m.Moq.ResultsByParams_CryptBlocks {
		paramsKey := m.Moq.ParamsKey_CryptBlocks(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_CryptBlocks(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_CryptBlocks(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_CryptBlocks(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(dst, src)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(dst, src)
	}
	return
}

// OnCall returns the recorder implementation of the BlockMode type
func (m *MoqBlockMode) OnCall() *MoqBlockMode_recorder {
	return &MoqBlockMode_recorder{
		Moq: m,
	}
}

func (m *MoqBlockMode_recorder) BlockSize() *MoqBlockMode_BlockSize_fnRecorder {
	return &MoqBlockMode_BlockSize_fnRecorder{
		Params:   MoqBlockMode_BlockSize_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBlockMode_BlockSize_fnRecorder) Any() *MoqBlockMode_BlockSize_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BlockSize(r.Params))
		return nil
	}
	return &MoqBlockMode_BlockSize_anyParams{Recorder: r}
}

func (r *MoqBlockMode_BlockSize_fnRecorder) Seq() *MoqBlockMode_BlockSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BlockSize(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBlockMode_BlockSize_fnRecorder) NoSeq() *MoqBlockMode_BlockSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_BlockSize(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBlockMode_BlockSize_fnRecorder) ReturnResults(result1 int) *MoqBlockMode_BlockSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqBlockMode_BlockSize_doFn
		DoReturnFn MoqBlockMode_BlockSize_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBlockMode_BlockSize_fnRecorder) AndDo(fn MoqBlockMode_BlockSize_doFn) *MoqBlockMode_BlockSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBlockMode_BlockSize_fnRecorder) DoReturnResults(fn MoqBlockMode_BlockSize_doReturnFn) *MoqBlockMode_BlockSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqBlockMode_BlockSize_doFn
		DoReturnFn MoqBlockMode_BlockSize_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBlockMode_BlockSize_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBlockMode_BlockSize_resultsByParams
	for n, res := range r.Moq.ResultsByParams_BlockSize {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBlockMode_BlockSize_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBlockMode_BlockSize_paramsKey]*MoqBlockMode_BlockSize_results{},
		}
		r.Moq.ResultsByParams_BlockSize = append(r.Moq.ResultsByParams_BlockSize, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_BlockSize) {
			copy(r.Moq.ResultsByParams_BlockSize[insertAt+1:], r.Moq.ResultsByParams_BlockSize[insertAt:0])
			r.Moq.ResultsByParams_BlockSize[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_BlockSize(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBlockMode_BlockSize_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBlockMode_BlockSize_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBlockMode_BlockSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqBlockMode_BlockSize_doFn
				DoReturnFn MoqBlockMode_BlockSize_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBlockMode) PrettyParams_BlockSize(params MoqBlockMode_BlockSize_params) string {
	return fmt.Sprintf("BlockSize()")
}

func (m *MoqBlockMode) ParamsKey_BlockSize(params MoqBlockMode_BlockSize_params, anyParams uint64) MoqBlockMode_BlockSize_paramsKey {
	m.Scene.T.Helper()
	return MoqBlockMode_BlockSize_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqBlockMode_recorder) CryptBlocks(dst, src []byte) *MoqBlockMode_CryptBlocks_fnRecorder {
	return &MoqBlockMode_CryptBlocks_fnRecorder{
		Params: MoqBlockMode_CryptBlocks_params{
			Dst: dst,
			Src: src,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqBlockMode_CryptBlocks_fnRecorder) Any() *MoqBlockMode_CryptBlocks_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CryptBlocks(r.Params))
		return nil
	}
	return &MoqBlockMode_CryptBlocks_anyParams{Recorder: r}
}

func (a *MoqBlockMode_CryptBlocks_anyParams) Dst() *MoqBlockMode_CryptBlocks_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqBlockMode_CryptBlocks_anyParams) Src() *MoqBlockMode_CryptBlocks_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqBlockMode_CryptBlocks_fnRecorder) Seq() *MoqBlockMode_CryptBlocks_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CryptBlocks(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqBlockMode_CryptBlocks_fnRecorder) NoSeq() *MoqBlockMode_CryptBlocks_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CryptBlocks(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqBlockMode_CryptBlocks_fnRecorder) ReturnResults() *MoqBlockMode_CryptBlocks_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqBlockMode_CryptBlocks_doFn
		DoReturnFn MoqBlockMode_CryptBlocks_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqBlockMode_CryptBlocks_fnRecorder) AndDo(fn MoqBlockMode_CryptBlocks_doFn) *MoqBlockMode_CryptBlocks_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqBlockMode_CryptBlocks_fnRecorder) DoReturnResults(fn MoqBlockMode_CryptBlocks_doReturnFn) *MoqBlockMode_CryptBlocks_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqBlockMode_CryptBlocks_doFn
		DoReturnFn MoqBlockMode_CryptBlocks_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqBlockMode_CryptBlocks_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqBlockMode_CryptBlocks_resultsByParams
	for n, res := range r.Moq.ResultsByParams_CryptBlocks {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqBlockMode_CryptBlocks_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqBlockMode_CryptBlocks_paramsKey]*MoqBlockMode_CryptBlocks_results{},
		}
		r.Moq.ResultsByParams_CryptBlocks = append(r.Moq.ResultsByParams_CryptBlocks, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_CryptBlocks) {
			copy(r.Moq.ResultsByParams_CryptBlocks[insertAt+1:], r.Moq.ResultsByParams_CryptBlocks[insertAt:0])
			r.Moq.ResultsByParams_CryptBlocks[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_CryptBlocks(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqBlockMode_CryptBlocks_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqBlockMode_CryptBlocks_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqBlockMode_CryptBlocks_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqBlockMode_CryptBlocks_doFn
				DoReturnFn MoqBlockMode_CryptBlocks_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqBlockMode) PrettyParams_CryptBlocks(params MoqBlockMode_CryptBlocks_params) string {
	return fmt.Sprintf("CryptBlocks(%#v, %#v)", params.Dst, params.Src)
}

func (m *MoqBlockMode) ParamsKey_CryptBlocks(params MoqBlockMode_CryptBlocks_params, anyParams uint64) MoqBlockMode_CryptBlocks_paramsKey {
	m.Scene.T.Helper()
	var dstUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.CryptBlocks.Dst == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The dst parameter of the CryptBlocks function can't be indexed by value")
		}
		dstUsedHash = hash.DeepHash(params.Dst)
	}
	var srcUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.CryptBlocks.Src == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The src parameter of the CryptBlocks function can't be indexed by value")
		}
		srcUsedHash = hash.DeepHash(params.Src)
	}
	return MoqBlockMode_CryptBlocks_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Dst, Src hash.Hash }{
			Dst: dstUsedHash,
			Src: srcUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqBlockMode) Reset() {
	m.ResultsByParams_BlockSize = nil
	m.ResultsByParams_CryptBlocks = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqBlockMode) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_BlockSize {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_BlockSize(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_CryptBlocks {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_CryptBlocks(results.Params))
			}
		}
	}
}
