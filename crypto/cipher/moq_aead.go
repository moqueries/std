// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package cipher

import (
	"crypto/cipher"
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that cipher.AEAD is mocked completely
var _ cipher.AEAD = (*MoqAEAD_mock)(nil)

// MoqAEAD holds the state of a moq of the AEAD type
type MoqAEAD struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqAEAD_mock

	ResultsByParams_NonceSize []MoqAEAD_NonceSize_resultsByParams
	ResultsByParams_Overhead  []MoqAEAD_Overhead_resultsByParams
	ResultsByParams_Seal      []MoqAEAD_Seal_resultsByParams
	ResultsByParams_Open      []MoqAEAD_Open_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			NonceSize struct{}
			Overhead  struct{}
			Seal      struct {
				Dst            moq.ParamIndexing
				Nonce          moq.ParamIndexing
				Plaintext      moq.ParamIndexing
				AdditionalData moq.ParamIndexing
			}
			Open struct {
				Dst            moq.ParamIndexing
				Nonce          moq.ParamIndexing
				Ciphertext     moq.ParamIndexing
				AdditionalData moq.ParamIndexing
			}
		}
	}
	// MoqAEAD_mock isolates the mock interface of the AEAD type
}

type MoqAEAD_mock struct {
	Moq *MoqAEAD
}

// MoqAEAD_recorder isolates the recorder interface of the AEAD type
type MoqAEAD_recorder struct {
	Moq *MoqAEAD
}

// MoqAEAD_NonceSize_params holds the params of the AEAD type
type MoqAEAD_NonceSize_params struct{}

// MoqAEAD_NonceSize_paramsKey holds the map key params of the AEAD type
type MoqAEAD_NonceSize_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqAEAD_NonceSize_resultsByParams contains the results for a given set of
// parameters for the AEAD type
type MoqAEAD_NonceSize_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqAEAD_NonceSize_paramsKey]*MoqAEAD_NonceSize_results
}

// MoqAEAD_NonceSize_doFn defines the type of function needed when calling
// AndDo for the AEAD type
type MoqAEAD_NonceSize_doFn func()

// MoqAEAD_NonceSize_doReturnFn defines the type of function needed when
// calling DoReturnResults for the AEAD type
type MoqAEAD_NonceSize_doReturnFn func() int

// MoqAEAD_NonceSize_results holds the results of the AEAD type
type MoqAEAD_NonceSize_results struct {
	Params  MoqAEAD_NonceSize_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqAEAD_NonceSize_doFn
		DoReturnFn MoqAEAD_NonceSize_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqAEAD_NonceSize_fnRecorder routes recorded function calls to the MoqAEAD
// moq
type MoqAEAD_NonceSize_fnRecorder struct {
	Params    MoqAEAD_NonceSize_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqAEAD_NonceSize_results
	Moq       *MoqAEAD
}

// MoqAEAD_NonceSize_anyParams isolates the any params functions of the AEAD
// type
type MoqAEAD_NonceSize_anyParams struct {
	Recorder *MoqAEAD_NonceSize_fnRecorder
}

// MoqAEAD_Overhead_params holds the params of the AEAD type
type MoqAEAD_Overhead_params struct{}

// MoqAEAD_Overhead_paramsKey holds the map key params of the AEAD type
type MoqAEAD_Overhead_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqAEAD_Overhead_resultsByParams contains the results for a given set of
// parameters for the AEAD type
type MoqAEAD_Overhead_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqAEAD_Overhead_paramsKey]*MoqAEAD_Overhead_results
}

// MoqAEAD_Overhead_doFn defines the type of function needed when calling AndDo
// for the AEAD type
type MoqAEAD_Overhead_doFn func()

// MoqAEAD_Overhead_doReturnFn defines the type of function needed when calling
// DoReturnResults for the AEAD type
type MoqAEAD_Overhead_doReturnFn func() int

// MoqAEAD_Overhead_results holds the results of the AEAD type
type MoqAEAD_Overhead_results struct {
	Params  MoqAEAD_Overhead_params
	Results []struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqAEAD_Overhead_doFn
		DoReturnFn MoqAEAD_Overhead_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqAEAD_Overhead_fnRecorder routes recorded function calls to the MoqAEAD
// moq
type MoqAEAD_Overhead_fnRecorder struct {
	Params    MoqAEAD_Overhead_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqAEAD_Overhead_results
	Moq       *MoqAEAD
}

// MoqAEAD_Overhead_anyParams isolates the any params functions of the AEAD
// type
type MoqAEAD_Overhead_anyParams struct {
	Recorder *MoqAEAD_Overhead_fnRecorder
}

// MoqAEAD_Seal_params holds the params of the AEAD type
type MoqAEAD_Seal_params struct{ Dst, Nonce, Plaintext, AdditionalData []byte }

// MoqAEAD_Seal_paramsKey holds the map key params of the AEAD type
type MoqAEAD_Seal_paramsKey struct {
	Params struct{}
	Hashes struct{ Dst, Nonce, Plaintext, AdditionalData hash.Hash }
}

// MoqAEAD_Seal_resultsByParams contains the results for a given set of
// parameters for the AEAD type
type MoqAEAD_Seal_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqAEAD_Seal_paramsKey]*MoqAEAD_Seal_results
}

// MoqAEAD_Seal_doFn defines the type of function needed when calling AndDo for
// the AEAD type
type MoqAEAD_Seal_doFn func(dst, nonce, plaintext, additionalData []byte)

// MoqAEAD_Seal_doReturnFn defines the type of function needed when calling
// DoReturnResults for the AEAD type
type MoqAEAD_Seal_doReturnFn func(dst, nonce, plaintext, additionalData []byte) []byte

// MoqAEAD_Seal_results holds the results of the AEAD type
type MoqAEAD_Seal_results struct {
	Params  MoqAEAD_Seal_params
	Results []struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqAEAD_Seal_doFn
		DoReturnFn MoqAEAD_Seal_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqAEAD_Seal_fnRecorder routes recorded function calls to the MoqAEAD moq
type MoqAEAD_Seal_fnRecorder struct {
	Params    MoqAEAD_Seal_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqAEAD_Seal_results
	Moq       *MoqAEAD
}

// MoqAEAD_Seal_anyParams isolates the any params functions of the AEAD type
type MoqAEAD_Seal_anyParams struct {
	Recorder *MoqAEAD_Seal_fnRecorder
}

// MoqAEAD_Open_params holds the params of the AEAD type
type MoqAEAD_Open_params struct{ Dst, Nonce, Ciphertext, AdditionalData []byte }

// MoqAEAD_Open_paramsKey holds the map key params of the AEAD type
type MoqAEAD_Open_paramsKey struct {
	Params struct{}
	Hashes struct{ Dst, Nonce, Ciphertext, AdditionalData hash.Hash }
}

// MoqAEAD_Open_resultsByParams contains the results for a given set of
// parameters for the AEAD type
type MoqAEAD_Open_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqAEAD_Open_paramsKey]*MoqAEAD_Open_results
}

// MoqAEAD_Open_doFn defines the type of function needed when calling AndDo for
// the AEAD type
type MoqAEAD_Open_doFn func(dst, nonce, ciphertext, additionalData []byte)

// MoqAEAD_Open_doReturnFn defines the type of function needed when calling
// DoReturnResults for the AEAD type
type MoqAEAD_Open_doReturnFn func(dst, nonce, ciphertext, additionalData []byte) ([]byte, error)

// MoqAEAD_Open_results holds the results of the AEAD type
type MoqAEAD_Open_results struct {
	Params  MoqAEAD_Open_params
	Results []struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqAEAD_Open_doFn
		DoReturnFn MoqAEAD_Open_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqAEAD_Open_fnRecorder routes recorded function calls to the MoqAEAD moq
type MoqAEAD_Open_fnRecorder struct {
	Params    MoqAEAD_Open_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqAEAD_Open_results
	Moq       *MoqAEAD
}

// MoqAEAD_Open_anyParams isolates the any params functions of the AEAD type
type MoqAEAD_Open_anyParams struct {
	Recorder *MoqAEAD_Open_fnRecorder
}

// NewMoqAEAD creates a new moq of the AEAD type
func NewMoqAEAD(scene *moq.Scene, config *moq.Config) *MoqAEAD {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqAEAD{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqAEAD_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				NonceSize struct{}
				Overhead  struct{}
				Seal      struct {
					Dst            moq.ParamIndexing
					Nonce          moq.ParamIndexing
					Plaintext      moq.ParamIndexing
					AdditionalData moq.ParamIndexing
				}
				Open struct {
					Dst            moq.ParamIndexing
					Nonce          moq.ParamIndexing
					Ciphertext     moq.ParamIndexing
					AdditionalData moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			NonceSize struct{}
			Overhead  struct{}
			Seal      struct {
				Dst            moq.ParamIndexing
				Nonce          moq.ParamIndexing
				Plaintext      moq.ParamIndexing
				AdditionalData moq.ParamIndexing
			}
			Open struct {
				Dst            moq.ParamIndexing
				Nonce          moq.ParamIndexing
				Ciphertext     moq.ParamIndexing
				AdditionalData moq.ParamIndexing
			}
		}{
			NonceSize: struct{}{},
			Overhead:  struct{}{},
			Seal: struct {
				Dst            moq.ParamIndexing
				Nonce          moq.ParamIndexing
				Plaintext      moq.ParamIndexing
				AdditionalData moq.ParamIndexing
			}{
				Dst:            moq.ParamIndexByHash,
				Nonce:          moq.ParamIndexByHash,
				Plaintext:      moq.ParamIndexByHash,
				AdditionalData: moq.ParamIndexByHash,
			},
			Open: struct {
				Dst            moq.ParamIndexing
				Nonce          moq.ParamIndexing
				Ciphertext     moq.ParamIndexing
				AdditionalData moq.ParamIndexing
			}{
				Dst:            moq.ParamIndexByHash,
				Nonce:          moq.ParamIndexByHash,
				Ciphertext:     moq.ParamIndexByHash,
				AdditionalData: moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the AEAD type
func (m *MoqAEAD) Mock() *MoqAEAD_mock { return m.Moq }

func (m *MoqAEAD_mock) NonceSize() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqAEAD_NonceSize_params{}
	var results *MoqAEAD_NonceSize_results
	for _, resultsByParams := range m.Moq.ResultsByParams_NonceSize {
		paramsKey := m.Moq.ParamsKey_NonceSize(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_NonceSize(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_NonceSize(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_NonceSize(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqAEAD_mock) Overhead() (result1 int) {
	m.Moq.Scene.T.Helper()
	params := MoqAEAD_Overhead_params{}
	var results *MoqAEAD_Overhead_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Overhead {
		paramsKey := m.Moq.ParamsKey_Overhead(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Overhead(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Overhead(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Overhead(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqAEAD_mock) Seal(dst, nonce, plaintext, additionalData []byte) (result1 []byte) {
	m.Moq.Scene.T.Helper()
	params := MoqAEAD_Seal_params{
		Dst:            dst,
		Nonce:          nonce,
		Plaintext:      plaintext,
		AdditionalData: additionalData,
	}
	var results *MoqAEAD_Seal_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Seal {
		paramsKey := m.Moq.ParamsKey_Seal(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Seal(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Seal(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Seal(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(dst, nonce, plaintext, additionalData)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(dst, nonce, plaintext, additionalData)
	}
	return
}

func (m *MoqAEAD_mock) Open(dst, nonce, ciphertext, additionalData []byte) (result1 []byte, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqAEAD_Open_params{
		Dst:            dst,
		Nonce:          nonce,
		Ciphertext:     ciphertext,
		AdditionalData: additionalData,
	}
	var results *MoqAEAD_Open_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Open {
		paramsKey := m.Moq.ParamsKey_Open(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Open(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Open(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Open(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(dst, nonce, ciphertext, additionalData)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(dst, nonce, ciphertext, additionalData)
	}
	return
}

// OnCall returns the recorder implementation of the AEAD type
func (m *MoqAEAD) OnCall() *MoqAEAD_recorder {
	return &MoqAEAD_recorder{
		Moq: m,
	}
}

func (m *MoqAEAD_recorder) NonceSize() *MoqAEAD_NonceSize_fnRecorder {
	return &MoqAEAD_NonceSize_fnRecorder{
		Params:   MoqAEAD_NonceSize_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqAEAD_NonceSize_fnRecorder) Any() *MoqAEAD_NonceSize_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NonceSize(r.Params))
		return nil
	}
	return &MoqAEAD_NonceSize_anyParams{Recorder: r}
}

func (r *MoqAEAD_NonceSize_fnRecorder) Seq() *MoqAEAD_NonceSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NonceSize(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqAEAD_NonceSize_fnRecorder) NoSeq() *MoqAEAD_NonceSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NonceSize(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqAEAD_NonceSize_fnRecorder) ReturnResults(result1 int) *MoqAEAD_NonceSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqAEAD_NonceSize_doFn
		DoReturnFn MoqAEAD_NonceSize_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqAEAD_NonceSize_fnRecorder) AndDo(fn MoqAEAD_NonceSize_doFn) *MoqAEAD_NonceSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqAEAD_NonceSize_fnRecorder) DoReturnResults(fn MoqAEAD_NonceSize_doReturnFn) *MoqAEAD_NonceSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqAEAD_NonceSize_doFn
		DoReturnFn MoqAEAD_NonceSize_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqAEAD_NonceSize_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqAEAD_NonceSize_resultsByParams
	for n, res := range r.Moq.ResultsByParams_NonceSize {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqAEAD_NonceSize_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqAEAD_NonceSize_paramsKey]*MoqAEAD_NonceSize_results{},
		}
		r.Moq.ResultsByParams_NonceSize = append(r.Moq.ResultsByParams_NonceSize, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_NonceSize) {
			copy(r.Moq.ResultsByParams_NonceSize[insertAt+1:], r.Moq.ResultsByParams_NonceSize[insertAt:0])
			r.Moq.ResultsByParams_NonceSize[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_NonceSize(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqAEAD_NonceSize_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqAEAD_NonceSize_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqAEAD_NonceSize_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqAEAD_NonceSize_doFn
				DoReturnFn MoqAEAD_NonceSize_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqAEAD) PrettyParams_NonceSize(params MoqAEAD_NonceSize_params) string {
	return fmt.Sprintf("NonceSize()")
}

func (m *MoqAEAD) ParamsKey_NonceSize(params MoqAEAD_NonceSize_params, anyParams uint64) MoqAEAD_NonceSize_paramsKey {
	m.Scene.T.Helper()
	return MoqAEAD_NonceSize_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqAEAD_recorder) Overhead() *MoqAEAD_Overhead_fnRecorder {
	return &MoqAEAD_Overhead_fnRecorder{
		Params:   MoqAEAD_Overhead_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqAEAD_Overhead_fnRecorder) Any() *MoqAEAD_Overhead_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Overhead(r.Params))
		return nil
	}
	return &MoqAEAD_Overhead_anyParams{Recorder: r}
}

func (r *MoqAEAD_Overhead_fnRecorder) Seq() *MoqAEAD_Overhead_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Overhead(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqAEAD_Overhead_fnRecorder) NoSeq() *MoqAEAD_Overhead_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Overhead(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqAEAD_Overhead_fnRecorder) ReturnResults(result1 int) *MoqAEAD_Overhead_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqAEAD_Overhead_doFn
		DoReturnFn MoqAEAD_Overhead_doReturnFn
	}{
		Values: &struct {
			Result1 int
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqAEAD_Overhead_fnRecorder) AndDo(fn MoqAEAD_Overhead_doFn) *MoqAEAD_Overhead_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqAEAD_Overhead_fnRecorder) DoReturnResults(fn MoqAEAD_Overhead_doReturnFn) *MoqAEAD_Overhead_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 int
		}
		Sequence   uint32
		DoFn       MoqAEAD_Overhead_doFn
		DoReturnFn MoqAEAD_Overhead_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqAEAD_Overhead_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqAEAD_Overhead_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Overhead {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqAEAD_Overhead_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqAEAD_Overhead_paramsKey]*MoqAEAD_Overhead_results{},
		}
		r.Moq.ResultsByParams_Overhead = append(r.Moq.ResultsByParams_Overhead, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Overhead) {
			copy(r.Moq.ResultsByParams_Overhead[insertAt+1:], r.Moq.ResultsByParams_Overhead[insertAt:0])
			r.Moq.ResultsByParams_Overhead[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Overhead(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqAEAD_Overhead_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqAEAD_Overhead_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqAEAD_Overhead_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 int
				}
				Sequence   uint32
				DoFn       MoqAEAD_Overhead_doFn
				DoReturnFn MoqAEAD_Overhead_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqAEAD) PrettyParams_Overhead(params MoqAEAD_Overhead_params) string {
	return fmt.Sprintf("Overhead()")
}

func (m *MoqAEAD) ParamsKey_Overhead(params MoqAEAD_Overhead_params, anyParams uint64) MoqAEAD_Overhead_paramsKey {
	m.Scene.T.Helper()
	return MoqAEAD_Overhead_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqAEAD_recorder) Seal(dst, nonce, plaintext, additionalData []byte) *MoqAEAD_Seal_fnRecorder {
	return &MoqAEAD_Seal_fnRecorder{
		Params: MoqAEAD_Seal_params{
			Dst:            dst,
			Nonce:          nonce,
			Plaintext:      plaintext,
			AdditionalData: additionalData,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqAEAD_Seal_fnRecorder) Any() *MoqAEAD_Seal_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seal(r.Params))
		return nil
	}
	return &MoqAEAD_Seal_anyParams{Recorder: r}
}

func (a *MoqAEAD_Seal_anyParams) Dst() *MoqAEAD_Seal_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqAEAD_Seal_anyParams) Nonce() *MoqAEAD_Seal_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqAEAD_Seal_anyParams) Plaintext() *MoqAEAD_Seal_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (a *MoqAEAD_Seal_anyParams) AdditionalData() *MoqAEAD_Seal_fnRecorder {
	a.Recorder.AnyParams |= 1 << 3
	return a.Recorder
}

func (r *MoqAEAD_Seal_fnRecorder) Seq() *MoqAEAD_Seal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seal(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqAEAD_Seal_fnRecorder) NoSeq() *MoqAEAD_Seal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Seal(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqAEAD_Seal_fnRecorder) ReturnResults(result1 []byte) *MoqAEAD_Seal_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqAEAD_Seal_doFn
		DoReturnFn MoqAEAD_Seal_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqAEAD_Seal_fnRecorder) AndDo(fn MoqAEAD_Seal_doFn) *MoqAEAD_Seal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqAEAD_Seal_fnRecorder) DoReturnResults(fn MoqAEAD_Seal_doReturnFn) *MoqAEAD_Seal_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqAEAD_Seal_doFn
		DoReturnFn MoqAEAD_Seal_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqAEAD_Seal_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqAEAD_Seal_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Seal {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqAEAD_Seal_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqAEAD_Seal_paramsKey]*MoqAEAD_Seal_results{},
		}
		r.Moq.ResultsByParams_Seal = append(r.Moq.ResultsByParams_Seal, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Seal) {
			copy(r.Moq.ResultsByParams_Seal[insertAt+1:], r.Moq.ResultsByParams_Seal[insertAt:0])
			r.Moq.ResultsByParams_Seal[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Seal(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqAEAD_Seal_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqAEAD_Seal_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqAEAD_Seal_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
				}
				Sequence   uint32
				DoFn       MoqAEAD_Seal_doFn
				DoReturnFn MoqAEAD_Seal_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqAEAD) PrettyParams_Seal(params MoqAEAD_Seal_params) string {
	return fmt.Sprintf("Seal(%#v, %#v, %#v, %#v)", params.Dst, params.Nonce, params.Plaintext, params.AdditionalData)
}

func (m *MoqAEAD) ParamsKey_Seal(params MoqAEAD_Seal_params, anyParams uint64) MoqAEAD_Seal_paramsKey {
	m.Scene.T.Helper()
	var dstUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Seal.Dst == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The dst parameter of the Seal function can't be indexed by value")
		}
		dstUsedHash = hash.DeepHash(params.Dst)
	}
	var nonceUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Seal.Nonce == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The nonce parameter of the Seal function can't be indexed by value")
		}
		nonceUsedHash = hash.DeepHash(params.Nonce)
	}
	var plaintextUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Seal.Plaintext == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The plaintext parameter of the Seal function can't be indexed by value")
		}
		plaintextUsedHash = hash.DeepHash(params.Plaintext)
	}
	var additionalDataUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.Runtime.ParameterIndexing.Seal.AdditionalData == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The additionalData parameter of the Seal function can't be indexed by value")
		}
		additionalDataUsedHash = hash.DeepHash(params.AdditionalData)
	}
	return MoqAEAD_Seal_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Dst, Nonce, Plaintext, AdditionalData hash.Hash }{
			Dst:            dstUsedHash,
			Nonce:          nonceUsedHash,
			Plaintext:      plaintextUsedHash,
			AdditionalData: additionalDataUsedHash,
		},
	}
}

func (m *MoqAEAD_recorder) Open(dst, nonce, ciphertext, additionalData []byte) *MoqAEAD_Open_fnRecorder {
	return &MoqAEAD_Open_fnRecorder{
		Params: MoqAEAD_Open_params{
			Dst:            dst,
			Nonce:          nonce,
			Ciphertext:     ciphertext,
			AdditionalData: additionalData,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqAEAD_Open_fnRecorder) Any() *MoqAEAD_Open_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Open(r.Params))
		return nil
	}
	return &MoqAEAD_Open_anyParams{Recorder: r}
}

func (a *MoqAEAD_Open_anyParams) Dst() *MoqAEAD_Open_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqAEAD_Open_anyParams) Nonce() *MoqAEAD_Open_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqAEAD_Open_anyParams) Ciphertext() *MoqAEAD_Open_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (a *MoqAEAD_Open_anyParams) AdditionalData() *MoqAEAD_Open_fnRecorder {
	a.Recorder.AnyParams |= 1 << 3
	return a.Recorder
}

func (r *MoqAEAD_Open_fnRecorder) Seq() *MoqAEAD_Open_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Open(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqAEAD_Open_fnRecorder) NoSeq() *MoqAEAD_Open_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Open(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqAEAD_Open_fnRecorder) ReturnResults(result1 []byte, result2 error) *MoqAEAD_Open_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqAEAD_Open_doFn
		DoReturnFn MoqAEAD_Open_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqAEAD_Open_fnRecorder) AndDo(fn MoqAEAD_Open_doFn) *MoqAEAD_Open_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqAEAD_Open_fnRecorder) DoReturnResults(fn MoqAEAD_Open_doReturnFn) *MoqAEAD_Open_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqAEAD_Open_doFn
		DoReturnFn MoqAEAD_Open_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqAEAD_Open_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqAEAD_Open_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Open {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqAEAD_Open_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqAEAD_Open_paramsKey]*MoqAEAD_Open_results{},
		}
		r.Moq.ResultsByParams_Open = append(r.Moq.ResultsByParams_Open, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Open) {
			copy(r.Moq.ResultsByParams_Open[insertAt+1:], r.Moq.ResultsByParams_Open[insertAt:0])
			r.Moq.ResultsByParams_Open[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Open(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqAEAD_Open_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqAEAD_Open_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqAEAD_Open_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqAEAD_Open_doFn
				DoReturnFn MoqAEAD_Open_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqAEAD) PrettyParams_Open(params MoqAEAD_Open_params) string {
	return fmt.Sprintf("Open(%#v, %#v, %#v, %#v)", params.Dst, params.Nonce, params.Ciphertext, params.AdditionalData)
}

func (m *MoqAEAD) ParamsKey_Open(params MoqAEAD_Open_params, anyParams uint64) MoqAEAD_Open_paramsKey {
	m.Scene.T.Helper()
	var dstUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Open.Dst == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The dst parameter of the Open function can't be indexed by value")
		}
		dstUsedHash = hash.DeepHash(params.Dst)
	}
	var nonceUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Open.Nonce == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The nonce parameter of the Open function can't be indexed by value")
		}
		nonceUsedHash = hash.DeepHash(params.Nonce)
	}
	var ciphertextUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Open.Ciphertext == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The ciphertext parameter of the Open function can't be indexed by value")
		}
		ciphertextUsedHash = hash.DeepHash(params.Ciphertext)
	}
	var additionalDataUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.Runtime.ParameterIndexing.Open.AdditionalData == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The additionalData parameter of the Open function can't be indexed by value")
		}
		additionalDataUsedHash = hash.DeepHash(params.AdditionalData)
	}
	return MoqAEAD_Open_paramsKey{
		Params: struct{}{},
		Hashes: struct{ Dst, Nonce, Ciphertext, AdditionalData hash.Hash }{
			Dst:            dstUsedHash,
			Nonce:          nonceUsedHash,
			Ciphertext:     ciphertextUsedHash,
			AdditionalData: additionalDataUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqAEAD) Reset() {
	m.ResultsByParams_NonceSize = nil
	m.ResultsByParams_Overhead = nil
	m.ResultsByParams_Seal = nil
	m.ResultsByParams_Open = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqAEAD) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_NonceSize {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_NonceSize(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Overhead {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Overhead(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Seal {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Seal(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Open {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Open(results.Params))
			}
		}
	}
}
