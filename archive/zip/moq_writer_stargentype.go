// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package zip

import (
	"archive/zip"
	"fmt"
	"io"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that zip.Writer_starGenType is mocked
// completely
var _ Writer_starGenType = (*MoqWriter_starGenType_mock)(nil)

// Writer_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Writer_starGenType interface {
	SetOffset(n int64)
	Flush() error
	SetComment(comment string) error
	Close() error
	Create(name string) (io.Writer, error)
	CreateHeader(fh *zip.FileHeader) (io.Writer, error)
	CreateRaw(fh *zip.FileHeader) (io.Writer, error)
	Copy(f *zip.File) error
	RegisterCompressor(method uint16, comp zip.Compressor)
}

// MoqWriter_starGenType holds the state of a moq of the Writer_starGenType
// type
type MoqWriter_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqWriter_starGenType_mock

	ResultsByParams_SetOffset          []MoqWriter_starGenType_SetOffset_resultsByParams
	ResultsByParams_Flush              []MoqWriter_starGenType_Flush_resultsByParams
	ResultsByParams_SetComment         []MoqWriter_starGenType_SetComment_resultsByParams
	ResultsByParams_Close              []MoqWriter_starGenType_Close_resultsByParams
	ResultsByParams_Create             []MoqWriter_starGenType_Create_resultsByParams
	ResultsByParams_CreateHeader       []MoqWriter_starGenType_CreateHeader_resultsByParams
	ResultsByParams_CreateRaw          []MoqWriter_starGenType_CreateRaw_resultsByParams
	ResultsByParams_Copy               []MoqWriter_starGenType_Copy_resultsByParams
	ResultsByParams_RegisterCompressor []MoqWriter_starGenType_RegisterCompressor_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			SetOffset struct {
				N moq.ParamIndexing
			}
			Flush      struct{}
			SetComment struct {
				Comment moq.ParamIndexing
			}
			Close  struct{}
			Create struct {
				Name moq.ParamIndexing
			}
			CreateHeader struct {
				Fh moq.ParamIndexing
			}
			CreateRaw struct {
				Fh moq.ParamIndexing
			}
			Copy struct {
				F moq.ParamIndexing
			}
			RegisterCompressor struct {
				Method moq.ParamIndexing
				Comp   moq.ParamIndexing
			}
		}
	}
	// MoqWriter_starGenType_mock isolates the mock interface of the
}

// Writer_starGenType type
type MoqWriter_starGenType_mock struct {
	Moq *MoqWriter_starGenType
}

// MoqWriter_starGenType_recorder isolates the recorder interface of the
// Writer_starGenType type
type MoqWriter_starGenType_recorder struct {
	Moq *MoqWriter_starGenType
}

// MoqWriter_starGenType_SetOffset_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_SetOffset_params struct{ N int64 }

// MoqWriter_starGenType_SetOffset_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_SetOffset_paramsKey struct {
	Params struct{ N int64 }
	Hashes struct{ N hash.Hash }
}

// MoqWriter_starGenType_SetOffset_resultsByParams contains the results for a
// given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_SetOffset_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_SetOffset_paramsKey]*MoqWriter_starGenType_SetOffset_results
}

// MoqWriter_starGenType_SetOffset_doFn defines the type of function needed
// when calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_SetOffset_doFn func(n int64)

// MoqWriter_starGenType_SetOffset_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_SetOffset_doReturnFn func(n int64)

// MoqWriter_starGenType_SetOffset_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_SetOffset_results struct {
	Params  MoqWriter_starGenType_SetOffset_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_SetOffset_doFn
		DoReturnFn MoqWriter_starGenType_SetOffset_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_SetOffset_fnRecorder routes recorded function calls to
// the MoqWriter_starGenType moq
type MoqWriter_starGenType_SetOffset_fnRecorder struct {
	Params    MoqWriter_starGenType_SetOffset_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_SetOffset_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_SetOffset_anyParams isolates the any params functions
// of the Writer_starGenType type
type MoqWriter_starGenType_SetOffset_anyParams struct {
	Recorder *MoqWriter_starGenType_SetOffset_fnRecorder
}

// MoqWriter_starGenType_Flush_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Flush_params struct{}

// MoqWriter_starGenType_Flush_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Flush_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWriter_starGenType_Flush_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Flush_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Flush_paramsKey]*MoqWriter_starGenType_Flush_results
}

// MoqWriter_starGenType_Flush_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Flush_doFn func()

// MoqWriter_starGenType_Flush_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Flush_doReturnFn func() error

// MoqWriter_starGenType_Flush_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Flush_results struct {
	Params  MoqWriter_starGenType_Flush_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Flush_doFn
		DoReturnFn MoqWriter_starGenType_Flush_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Flush_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Flush_fnRecorder struct {
	Params    MoqWriter_starGenType_Flush_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Flush_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Flush_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Flush_anyParams struct {
	Recorder *MoqWriter_starGenType_Flush_fnRecorder
}

// MoqWriter_starGenType_SetComment_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_SetComment_params struct{ Comment string }

// MoqWriter_starGenType_SetComment_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_SetComment_paramsKey struct {
	Params struct{ Comment string }
	Hashes struct{ Comment hash.Hash }
}

// MoqWriter_starGenType_SetComment_resultsByParams contains the results for a
// given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_SetComment_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_SetComment_paramsKey]*MoqWriter_starGenType_SetComment_results
}

// MoqWriter_starGenType_SetComment_doFn defines the type of function needed
// when calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_SetComment_doFn func(comment string)

// MoqWriter_starGenType_SetComment_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_SetComment_doReturnFn func(comment string) error

// MoqWriter_starGenType_SetComment_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_SetComment_results struct {
	Params  MoqWriter_starGenType_SetComment_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_SetComment_doFn
		DoReturnFn MoqWriter_starGenType_SetComment_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_SetComment_fnRecorder routes recorded function calls
// to the MoqWriter_starGenType moq
type MoqWriter_starGenType_SetComment_fnRecorder struct {
	Params    MoqWriter_starGenType_SetComment_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_SetComment_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_SetComment_anyParams isolates the any params functions
// of the Writer_starGenType type
type MoqWriter_starGenType_SetComment_anyParams struct {
	Recorder *MoqWriter_starGenType_SetComment_fnRecorder
}

// MoqWriter_starGenType_Close_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Close_params struct{}

// MoqWriter_starGenType_Close_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Close_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqWriter_starGenType_Close_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Close_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Close_paramsKey]*MoqWriter_starGenType_Close_results
}

// MoqWriter_starGenType_Close_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Close_doFn func()

// MoqWriter_starGenType_Close_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Close_doReturnFn func() error

// MoqWriter_starGenType_Close_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Close_results struct {
	Params  MoqWriter_starGenType_Close_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Close_doFn
		DoReturnFn MoqWriter_starGenType_Close_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Close_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Close_fnRecorder struct {
	Params    MoqWriter_starGenType_Close_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Close_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Close_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Close_anyParams struct {
	Recorder *MoqWriter_starGenType_Close_fnRecorder
}

// MoqWriter_starGenType_Create_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_Create_params struct{ Name string }

// MoqWriter_starGenType_Create_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Create_paramsKey struct {
	Params struct{ Name string }
	Hashes struct{ Name hash.Hash }
}

// MoqWriter_starGenType_Create_resultsByParams contains the results for a
// given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Create_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Create_paramsKey]*MoqWriter_starGenType_Create_results
}

// MoqWriter_starGenType_Create_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Create_doFn func(name string)

// MoqWriter_starGenType_Create_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Create_doReturnFn func(name string) (io.Writer, error)

// MoqWriter_starGenType_Create_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Create_results struct {
	Params  MoqWriter_starGenType_Create_params
	Results []struct {
		Values *struct {
			Result1 io.Writer
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Create_doFn
		DoReturnFn MoqWriter_starGenType_Create_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Create_fnRecorder routes recorded function calls to
// the MoqWriter_starGenType moq
type MoqWriter_starGenType_Create_fnRecorder struct {
	Params    MoqWriter_starGenType_Create_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Create_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Create_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Create_anyParams struct {
	Recorder *MoqWriter_starGenType_Create_fnRecorder
}

// MoqWriter_starGenType_CreateHeader_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_CreateHeader_params struct{ Fh *zip.FileHeader }

// MoqWriter_starGenType_CreateHeader_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_CreateHeader_paramsKey struct {
	Params struct{ Fh *zip.FileHeader }
	Hashes struct{ Fh hash.Hash }
}

// MoqWriter_starGenType_CreateHeader_resultsByParams contains the results for
// a given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_CreateHeader_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_CreateHeader_paramsKey]*MoqWriter_starGenType_CreateHeader_results
}

// MoqWriter_starGenType_CreateHeader_doFn defines the type of function needed
// when calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_CreateHeader_doFn func(fh *zip.FileHeader)

// MoqWriter_starGenType_CreateHeader_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_CreateHeader_doReturnFn func(fh *zip.FileHeader) (io.Writer, error)

// MoqWriter_starGenType_CreateHeader_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_CreateHeader_results struct {
	Params  MoqWriter_starGenType_CreateHeader_params
	Results []struct {
		Values *struct {
			Result1 io.Writer
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_CreateHeader_doFn
		DoReturnFn MoqWriter_starGenType_CreateHeader_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_CreateHeader_fnRecorder routes recorded function calls
// to the MoqWriter_starGenType moq
type MoqWriter_starGenType_CreateHeader_fnRecorder struct {
	Params    MoqWriter_starGenType_CreateHeader_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_CreateHeader_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_CreateHeader_anyParams isolates the any params
// functions of the Writer_starGenType type
type MoqWriter_starGenType_CreateHeader_anyParams struct {
	Recorder *MoqWriter_starGenType_CreateHeader_fnRecorder
}

// MoqWriter_starGenType_CreateRaw_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_CreateRaw_params struct{ Fh *zip.FileHeader }

// MoqWriter_starGenType_CreateRaw_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_CreateRaw_paramsKey struct {
	Params struct{ Fh *zip.FileHeader }
	Hashes struct{ Fh hash.Hash }
}

// MoqWriter_starGenType_CreateRaw_resultsByParams contains the results for a
// given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_CreateRaw_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_CreateRaw_paramsKey]*MoqWriter_starGenType_CreateRaw_results
}

// MoqWriter_starGenType_CreateRaw_doFn defines the type of function needed
// when calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_CreateRaw_doFn func(fh *zip.FileHeader)

// MoqWriter_starGenType_CreateRaw_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_CreateRaw_doReturnFn func(fh *zip.FileHeader) (io.Writer, error)

// MoqWriter_starGenType_CreateRaw_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_CreateRaw_results struct {
	Params  MoqWriter_starGenType_CreateRaw_params
	Results []struct {
		Values *struct {
			Result1 io.Writer
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_CreateRaw_doFn
		DoReturnFn MoqWriter_starGenType_CreateRaw_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_CreateRaw_fnRecorder routes recorded function calls to
// the MoqWriter_starGenType moq
type MoqWriter_starGenType_CreateRaw_fnRecorder struct {
	Params    MoqWriter_starGenType_CreateRaw_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_CreateRaw_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_CreateRaw_anyParams isolates the any params functions
// of the Writer_starGenType type
type MoqWriter_starGenType_CreateRaw_anyParams struct {
	Recorder *MoqWriter_starGenType_CreateRaw_fnRecorder
}

// MoqWriter_starGenType_Copy_params holds the params of the Writer_starGenType
// type
type MoqWriter_starGenType_Copy_params struct{ F *zip.File }

// MoqWriter_starGenType_Copy_paramsKey holds the map key params of the
// Writer_starGenType type
type MoqWriter_starGenType_Copy_paramsKey struct {
	Params struct{ F *zip.File }
	Hashes struct{ F hash.Hash }
}

// MoqWriter_starGenType_Copy_resultsByParams contains the results for a given
// set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_Copy_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_Copy_paramsKey]*MoqWriter_starGenType_Copy_results
}

// MoqWriter_starGenType_Copy_doFn defines the type of function needed when
// calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_Copy_doFn func(f *zip.File)

// MoqWriter_starGenType_Copy_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_Copy_doReturnFn func(f *zip.File) error

// MoqWriter_starGenType_Copy_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_Copy_results struct {
	Params  MoqWriter_starGenType_Copy_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Copy_doFn
		DoReturnFn MoqWriter_starGenType_Copy_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_Copy_fnRecorder routes recorded function calls to the
// MoqWriter_starGenType moq
type MoqWriter_starGenType_Copy_fnRecorder struct {
	Params    MoqWriter_starGenType_Copy_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_Copy_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_Copy_anyParams isolates the any params functions of
// the Writer_starGenType type
type MoqWriter_starGenType_Copy_anyParams struct {
	Recorder *MoqWriter_starGenType_Copy_fnRecorder
}

// MoqWriter_starGenType_RegisterCompressor_params holds the params of the
// Writer_starGenType type
type MoqWriter_starGenType_RegisterCompressor_params struct {
	Method uint16
	Comp   zip.Compressor
}

// MoqWriter_starGenType_RegisterCompressor_paramsKey holds the map key params
// of the Writer_starGenType type
type MoqWriter_starGenType_RegisterCompressor_paramsKey struct {
	Params struct{ Method uint16 }
	Hashes struct {
		Method hash.Hash
		Comp   hash.Hash
	}
}

// MoqWriter_starGenType_RegisterCompressor_resultsByParams contains the
// results for a given set of parameters for the Writer_starGenType type
type MoqWriter_starGenType_RegisterCompressor_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqWriter_starGenType_RegisterCompressor_paramsKey]*MoqWriter_starGenType_RegisterCompressor_results
}

// MoqWriter_starGenType_RegisterCompressor_doFn defines the type of function
// needed when calling AndDo for the Writer_starGenType type
type MoqWriter_starGenType_RegisterCompressor_doFn func(method uint16, comp zip.Compressor)

// MoqWriter_starGenType_RegisterCompressor_doReturnFn defines the type of
// function needed when calling DoReturnResults for the Writer_starGenType type
type MoqWriter_starGenType_RegisterCompressor_doReturnFn func(method uint16, comp zip.Compressor)

// MoqWriter_starGenType_RegisterCompressor_results holds the results of the
// Writer_starGenType type
type MoqWriter_starGenType_RegisterCompressor_results struct {
	Params  MoqWriter_starGenType_RegisterCompressor_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_RegisterCompressor_doFn
		DoReturnFn MoqWriter_starGenType_RegisterCompressor_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqWriter_starGenType_RegisterCompressor_fnRecorder routes recorded function
// calls to the MoqWriter_starGenType moq
type MoqWriter_starGenType_RegisterCompressor_fnRecorder struct {
	Params    MoqWriter_starGenType_RegisterCompressor_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqWriter_starGenType_RegisterCompressor_results
	Moq       *MoqWriter_starGenType
}

// MoqWriter_starGenType_RegisterCompressor_anyParams isolates the any params
// functions of the Writer_starGenType type
type MoqWriter_starGenType_RegisterCompressor_anyParams struct {
	Recorder *MoqWriter_starGenType_RegisterCompressor_fnRecorder
}

// NewMoqWriter_starGenType creates a new moq of the Writer_starGenType type
func NewMoqWriter_starGenType(scene *moq.Scene, config *moq.Config) *MoqWriter_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqWriter_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqWriter_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				SetOffset struct {
					N moq.ParamIndexing
				}
				Flush      struct{}
				SetComment struct {
					Comment moq.ParamIndexing
				}
				Close  struct{}
				Create struct {
					Name moq.ParamIndexing
				}
				CreateHeader struct {
					Fh moq.ParamIndexing
				}
				CreateRaw struct {
					Fh moq.ParamIndexing
				}
				Copy struct {
					F moq.ParamIndexing
				}
				RegisterCompressor struct {
					Method moq.ParamIndexing
					Comp   moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			SetOffset struct {
				N moq.ParamIndexing
			}
			Flush      struct{}
			SetComment struct {
				Comment moq.ParamIndexing
			}
			Close  struct{}
			Create struct {
				Name moq.ParamIndexing
			}
			CreateHeader struct {
				Fh moq.ParamIndexing
			}
			CreateRaw struct {
				Fh moq.ParamIndexing
			}
			Copy struct {
				F moq.ParamIndexing
			}
			RegisterCompressor struct {
				Method moq.ParamIndexing
				Comp   moq.ParamIndexing
			}
		}{
			SetOffset: struct {
				N moq.ParamIndexing
			}{
				N: moq.ParamIndexByValue,
			},
			Flush: struct{}{},
			SetComment: struct {
				Comment moq.ParamIndexing
			}{
				Comment: moq.ParamIndexByValue,
			},
			Close: struct{}{},
			Create: struct {
				Name moq.ParamIndexing
			}{
				Name: moq.ParamIndexByValue,
			},
			CreateHeader: struct {
				Fh moq.ParamIndexing
			}{
				Fh: moq.ParamIndexByHash,
			},
			CreateRaw: struct {
				Fh moq.ParamIndexing
			}{
				Fh: moq.ParamIndexByHash,
			},
			Copy: struct {
				F moq.ParamIndexing
			}{
				F: moq.ParamIndexByHash,
			},
			RegisterCompressor: struct {
				Method moq.ParamIndexing
				Comp   moq.ParamIndexing
			}{
				Method: moq.ParamIndexByValue,
				Comp:   moq.ParamIndexByHash,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Writer_starGenType type
func (m *MoqWriter_starGenType) Mock() *MoqWriter_starGenType_mock { return m.Moq }

func (m *MoqWriter_starGenType_mock) SetOffset(n int64) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_SetOffset_params{
		N: n,
	}
	var results *MoqWriter_starGenType_SetOffset_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetOffset {
		paramsKey := m.Moq.ParamsKey_SetOffset(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetOffset(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetOffset(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetOffset(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(n)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(n)
	}
	return
}

func (m *MoqWriter_starGenType_mock) Flush() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Flush_params{}
	var results *MoqWriter_starGenType_Flush_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Flush {
		paramsKey := m.Moq.ParamsKey_Flush(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Flush(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Flush(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Flush(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWriter_starGenType_mock) SetComment(comment string) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_SetComment_params{
		Comment: comment,
	}
	var results *MoqWriter_starGenType_SetComment_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetComment {
		paramsKey := m.Moq.ParamsKey_SetComment(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetComment(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetComment(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetComment(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(comment)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(comment)
	}
	return
}

func (m *MoqWriter_starGenType_mock) Close() (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Close_params{}
	var results *MoqWriter_starGenType_Close_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Close {
		paramsKey := m.Moq.ParamsKey_Close(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Close(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Close(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqWriter_starGenType_mock) Create(name string) (result1 io.Writer, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Create_params{
		Name: name,
	}
	var results *MoqWriter_starGenType_Create_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Create {
		paramsKey := m.Moq.ParamsKey_Create(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Create(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Create(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Create(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(name)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(name)
	}
	return
}

func (m *MoqWriter_starGenType_mock) CreateHeader(fh *zip.FileHeader) (result1 io.Writer, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_CreateHeader_params{
		Fh: fh,
	}
	var results *MoqWriter_starGenType_CreateHeader_results
	for _, resultsByParams := range m.Moq.ResultsByParams_CreateHeader {
		paramsKey := m.Moq.ParamsKey_CreateHeader(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_CreateHeader(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_CreateHeader(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_CreateHeader(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(fh)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(fh)
	}
	return
}

func (m *MoqWriter_starGenType_mock) CreateRaw(fh *zip.FileHeader) (result1 io.Writer, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_CreateRaw_params{
		Fh: fh,
	}
	var results *MoqWriter_starGenType_CreateRaw_results
	for _, resultsByParams := range m.Moq.ResultsByParams_CreateRaw {
		paramsKey := m.Moq.ParamsKey_CreateRaw(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_CreateRaw(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_CreateRaw(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_CreateRaw(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(fh)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(fh)
	}
	return
}

func (m *MoqWriter_starGenType_mock) Copy(f *zip.File) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_Copy_params{
		F: f,
	}
	var results *MoqWriter_starGenType_Copy_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Copy {
		paramsKey := m.Moq.ParamsKey_Copy(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Copy(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Copy(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Copy(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(f)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(f)
	}
	return
}

func (m *MoqWriter_starGenType_mock) RegisterCompressor(method uint16, comp zip.Compressor) {
	m.Moq.Scene.T.Helper()
	params := MoqWriter_starGenType_RegisterCompressor_params{
		Method: method,
		Comp:   comp,
	}
	var results *MoqWriter_starGenType_RegisterCompressor_results
	for _, resultsByParams := range m.Moq.ResultsByParams_RegisterCompressor {
		paramsKey := m.Moq.ParamsKey_RegisterCompressor(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_RegisterCompressor(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_RegisterCompressor(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_RegisterCompressor(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(method, comp)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(method, comp)
	}
	return
}

// OnCall returns the recorder implementation of the Writer_starGenType type
func (m *MoqWriter_starGenType) OnCall() *MoqWriter_starGenType_recorder {
	return &MoqWriter_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqWriter_starGenType_recorder) SetOffset(n int64) *MoqWriter_starGenType_SetOffset_fnRecorder {
	return &MoqWriter_starGenType_SetOffset_fnRecorder{
		Params: MoqWriter_starGenType_SetOffset_params{
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_SetOffset_fnRecorder) Any() *MoqWriter_starGenType_SetOffset_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetOffset(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_SetOffset_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_SetOffset_anyParams) N() *MoqWriter_starGenType_SetOffset_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_SetOffset_fnRecorder) Seq() *MoqWriter_starGenType_SetOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetOffset(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_SetOffset_fnRecorder) NoSeq() *MoqWriter_starGenType_SetOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetOffset(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_SetOffset_fnRecorder) ReturnResults() *MoqWriter_starGenType_SetOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_SetOffset_doFn
		DoReturnFn MoqWriter_starGenType_SetOffset_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_SetOffset_fnRecorder) AndDo(fn MoqWriter_starGenType_SetOffset_doFn) *MoqWriter_starGenType_SetOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_SetOffset_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_SetOffset_doReturnFn) *MoqWriter_starGenType_SetOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_SetOffset_doFn
		DoReturnFn MoqWriter_starGenType_SetOffset_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_SetOffset_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_SetOffset_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetOffset {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_SetOffset_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_SetOffset_paramsKey]*MoqWriter_starGenType_SetOffset_results{},
		}
		r.Moq.ResultsByParams_SetOffset = append(r.Moq.ResultsByParams_SetOffset, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetOffset) {
			copy(r.Moq.ResultsByParams_SetOffset[insertAt+1:], r.Moq.ResultsByParams_SetOffset[insertAt:0])
			r.Moq.ResultsByParams_SetOffset[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetOffset(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_SetOffset_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_SetOffset_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_SetOffset_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_SetOffset_doFn
				DoReturnFn MoqWriter_starGenType_SetOffset_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_SetOffset(params MoqWriter_starGenType_SetOffset_params) string {
	return fmt.Sprintf("SetOffset(%#v)", params.N)
}

func (m *MoqWriter_starGenType) ParamsKey_SetOffset(params MoqWriter_starGenType_SetOffset_params, anyParams uint64) MoqWriter_starGenType_SetOffset_paramsKey {
	m.Scene.T.Helper()
	var nUsed int64
	var nUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetOffset.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqWriter_starGenType_SetOffset_paramsKey{
		Params: struct{ N int64 }{
			N: nUsed,
		},
		Hashes: struct{ N hash.Hash }{
			N: nUsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) Flush() *MoqWriter_starGenType_Flush_fnRecorder {
	return &MoqWriter_starGenType_Flush_fnRecorder{
		Params:   MoqWriter_starGenType_Flush_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) Any() *MoqWriter_starGenType_Flush_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Flush(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Flush_anyParams{Recorder: r}
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) Seq() *MoqWriter_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Flush(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) NoSeq() *MoqWriter_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Flush(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Flush_doFn
		DoReturnFn MoqWriter_starGenType_Flush_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) AndDo(fn MoqWriter_starGenType_Flush_doFn) *MoqWriter_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Flush_doReturnFn) *MoqWriter_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Flush_doFn
		DoReturnFn MoqWriter_starGenType_Flush_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Flush_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Flush {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Flush_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Flush_paramsKey]*MoqWriter_starGenType_Flush_results{},
		}
		r.Moq.ResultsByParams_Flush = append(r.Moq.ResultsByParams_Flush, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Flush) {
			copy(r.Moq.ResultsByParams_Flush[insertAt+1:], r.Moq.ResultsByParams_Flush[insertAt:0])
			r.Moq.ResultsByParams_Flush[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Flush(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Flush_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Flush_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Flush_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Flush_doFn
				DoReturnFn MoqWriter_starGenType_Flush_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Flush(params MoqWriter_starGenType_Flush_params) string {
	return fmt.Sprintf("Flush()")
}

func (m *MoqWriter_starGenType) ParamsKey_Flush(params MoqWriter_starGenType_Flush_params, anyParams uint64) MoqWriter_starGenType_Flush_paramsKey {
	m.Scene.T.Helper()
	return MoqWriter_starGenType_Flush_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWriter_starGenType_recorder) SetComment(comment string) *MoqWriter_starGenType_SetComment_fnRecorder {
	return &MoqWriter_starGenType_SetComment_fnRecorder{
		Params: MoqWriter_starGenType_SetComment_params{
			Comment: comment,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_SetComment_fnRecorder) Any() *MoqWriter_starGenType_SetComment_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetComment(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_SetComment_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_SetComment_anyParams) Comment() *MoqWriter_starGenType_SetComment_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_SetComment_fnRecorder) Seq() *MoqWriter_starGenType_SetComment_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetComment(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_SetComment_fnRecorder) NoSeq() *MoqWriter_starGenType_SetComment_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetComment(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_SetComment_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_SetComment_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_SetComment_doFn
		DoReturnFn MoqWriter_starGenType_SetComment_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_SetComment_fnRecorder) AndDo(fn MoqWriter_starGenType_SetComment_doFn) *MoqWriter_starGenType_SetComment_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_SetComment_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_SetComment_doReturnFn) *MoqWriter_starGenType_SetComment_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_SetComment_doFn
		DoReturnFn MoqWriter_starGenType_SetComment_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_SetComment_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_SetComment_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetComment {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_SetComment_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_SetComment_paramsKey]*MoqWriter_starGenType_SetComment_results{},
		}
		r.Moq.ResultsByParams_SetComment = append(r.Moq.ResultsByParams_SetComment, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetComment) {
			copy(r.Moq.ResultsByParams_SetComment[insertAt+1:], r.Moq.ResultsByParams_SetComment[insertAt:0])
			r.Moq.ResultsByParams_SetComment[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetComment(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_SetComment_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_SetComment_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_SetComment_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_SetComment_doFn
				DoReturnFn MoqWriter_starGenType_SetComment_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_SetComment(params MoqWriter_starGenType_SetComment_params) string {
	return fmt.Sprintf("SetComment(%#v)", params.Comment)
}

func (m *MoqWriter_starGenType) ParamsKey_SetComment(params MoqWriter_starGenType_SetComment_params, anyParams uint64) MoqWriter_starGenType_SetComment_paramsKey {
	m.Scene.T.Helper()
	var commentUsed string
	var commentUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetComment.Comment == moq.ParamIndexByValue {
			commentUsed = params.Comment
		} else {
			commentUsedHash = hash.DeepHash(params.Comment)
		}
	}
	return MoqWriter_starGenType_SetComment_paramsKey{
		Params: struct{ Comment string }{
			Comment: commentUsed,
		},
		Hashes: struct{ Comment hash.Hash }{
			Comment: commentUsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) Close() *MoqWriter_starGenType_Close_fnRecorder {
	return &MoqWriter_starGenType_Close_fnRecorder{
		Params:   MoqWriter_starGenType_Close_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Close_fnRecorder) Any() *MoqWriter_starGenType_Close_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Close_anyParams{Recorder: r}
}

func (r *MoqWriter_starGenType_Close_fnRecorder) Seq() *MoqWriter_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Close_fnRecorder) NoSeq() *MoqWriter_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Close(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Close_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Close_doFn
		DoReturnFn MoqWriter_starGenType_Close_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Close_fnRecorder) AndDo(fn MoqWriter_starGenType_Close_doFn) *MoqWriter_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Close_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Close_doReturnFn) *MoqWriter_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Close_doFn
		DoReturnFn MoqWriter_starGenType_Close_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Close_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Close_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Close {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Close_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Close_paramsKey]*MoqWriter_starGenType_Close_results{},
		}
		r.Moq.ResultsByParams_Close = append(r.Moq.ResultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Close) {
			copy(r.Moq.ResultsByParams_Close[insertAt+1:], r.Moq.ResultsByParams_Close[insertAt:0])
			r.Moq.ResultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Close(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Close_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Close_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Close_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Close_doFn
				DoReturnFn MoqWriter_starGenType_Close_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Close(params MoqWriter_starGenType_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *MoqWriter_starGenType) ParamsKey_Close(params MoqWriter_starGenType_Close_params, anyParams uint64) MoqWriter_starGenType_Close_paramsKey {
	m.Scene.T.Helper()
	return MoqWriter_starGenType_Close_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqWriter_starGenType_recorder) Create(name string) *MoqWriter_starGenType_Create_fnRecorder {
	return &MoqWriter_starGenType_Create_fnRecorder{
		Params: MoqWriter_starGenType_Create_params{
			Name: name,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Create_fnRecorder) Any() *MoqWriter_starGenType_Create_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Create(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Create_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_Create_anyParams) Name() *MoqWriter_starGenType_Create_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_Create_fnRecorder) Seq() *MoqWriter_starGenType_Create_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Create(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Create_fnRecorder) NoSeq() *MoqWriter_starGenType_Create_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Create(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Create_fnRecorder) ReturnResults(result1 io.Writer, result2 error) *MoqWriter_starGenType_Create_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.Writer
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Create_doFn
		DoReturnFn MoqWriter_starGenType_Create_doReturnFn
	}{
		Values: &struct {
			Result1 io.Writer
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Create_fnRecorder) AndDo(fn MoqWriter_starGenType_Create_doFn) *MoqWriter_starGenType_Create_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Create_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Create_doReturnFn) *MoqWriter_starGenType_Create_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.Writer
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Create_doFn
		DoReturnFn MoqWriter_starGenType_Create_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Create_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Create_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Create {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Create_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Create_paramsKey]*MoqWriter_starGenType_Create_results{},
		}
		r.Moq.ResultsByParams_Create = append(r.Moq.ResultsByParams_Create, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Create) {
			copy(r.Moq.ResultsByParams_Create[insertAt+1:], r.Moq.ResultsByParams_Create[insertAt:0])
			r.Moq.ResultsByParams_Create[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Create(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Create_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Create_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Create_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 io.Writer
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Create_doFn
				DoReturnFn MoqWriter_starGenType_Create_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Create(params MoqWriter_starGenType_Create_params) string {
	return fmt.Sprintf("Create(%#v)", params.Name)
}

func (m *MoqWriter_starGenType) ParamsKey_Create(params MoqWriter_starGenType_Create_params, anyParams uint64) MoqWriter_starGenType_Create_paramsKey {
	m.Scene.T.Helper()
	var nameUsed string
	var nameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Create.Name == moq.ParamIndexByValue {
			nameUsed = params.Name
		} else {
			nameUsedHash = hash.DeepHash(params.Name)
		}
	}
	return MoqWriter_starGenType_Create_paramsKey{
		Params: struct{ Name string }{
			Name: nameUsed,
		},
		Hashes: struct{ Name hash.Hash }{
			Name: nameUsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) CreateHeader(fh *zip.FileHeader) *MoqWriter_starGenType_CreateHeader_fnRecorder {
	return &MoqWriter_starGenType_CreateHeader_fnRecorder{
		Params: MoqWriter_starGenType_CreateHeader_params{
			Fh: fh,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_CreateHeader_fnRecorder) Any() *MoqWriter_starGenType_CreateHeader_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CreateHeader(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_CreateHeader_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_CreateHeader_anyParams) Fh() *MoqWriter_starGenType_CreateHeader_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_CreateHeader_fnRecorder) Seq() *MoqWriter_starGenType_CreateHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CreateHeader(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_CreateHeader_fnRecorder) NoSeq() *MoqWriter_starGenType_CreateHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CreateHeader(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_CreateHeader_fnRecorder) ReturnResults(result1 io.Writer, result2 error) *MoqWriter_starGenType_CreateHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.Writer
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_CreateHeader_doFn
		DoReturnFn MoqWriter_starGenType_CreateHeader_doReturnFn
	}{
		Values: &struct {
			Result1 io.Writer
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_CreateHeader_fnRecorder) AndDo(fn MoqWriter_starGenType_CreateHeader_doFn) *MoqWriter_starGenType_CreateHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_CreateHeader_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_CreateHeader_doReturnFn) *MoqWriter_starGenType_CreateHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.Writer
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_CreateHeader_doFn
		DoReturnFn MoqWriter_starGenType_CreateHeader_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_CreateHeader_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_CreateHeader_resultsByParams
	for n, res := range r.Moq.ResultsByParams_CreateHeader {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_CreateHeader_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_CreateHeader_paramsKey]*MoqWriter_starGenType_CreateHeader_results{},
		}
		r.Moq.ResultsByParams_CreateHeader = append(r.Moq.ResultsByParams_CreateHeader, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_CreateHeader) {
			copy(r.Moq.ResultsByParams_CreateHeader[insertAt+1:], r.Moq.ResultsByParams_CreateHeader[insertAt:0])
			r.Moq.ResultsByParams_CreateHeader[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_CreateHeader(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_CreateHeader_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_CreateHeader_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_CreateHeader_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 io.Writer
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_CreateHeader_doFn
				DoReturnFn MoqWriter_starGenType_CreateHeader_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_CreateHeader(params MoqWriter_starGenType_CreateHeader_params) string {
	return fmt.Sprintf("CreateHeader(%#v)", params.Fh)
}

func (m *MoqWriter_starGenType) ParamsKey_CreateHeader(params MoqWriter_starGenType_CreateHeader_params, anyParams uint64) MoqWriter_starGenType_CreateHeader_paramsKey {
	m.Scene.T.Helper()
	var fhUsed *zip.FileHeader
	var fhUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.CreateHeader.Fh == moq.ParamIndexByValue {
			fhUsed = params.Fh
		} else {
			fhUsedHash = hash.DeepHash(params.Fh)
		}
	}
	return MoqWriter_starGenType_CreateHeader_paramsKey{
		Params: struct{ Fh *zip.FileHeader }{
			Fh: fhUsed,
		},
		Hashes: struct{ Fh hash.Hash }{
			Fh: fhUsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) CreateRaw(fh *zip.FileHeader) *MoqWriter_starGenType_CreateRaw_fnRecorder {
	return &MoqWriter_starGenType_CreateRaw_fnRecorder{
		Params: MoqWriter_starGenType_CreateRaw_params{
			Fh: fh,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_CreateRaw_fnRecorder) Any() *MoqWriter_starGenType_CreateRaw_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CreateRaw(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_CreateRaw_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_CreateRaw_anyParams) Fh() *MoqWriter_starGenType_CreateRaw_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_CreateRaw_fnRecorder) Seq() *MoqWriter_starGenType_CreateRaw_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CreateRaw(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_CreateRaw_fnRecorder) NoSeq() *MoqWriter_starGenType_CreateRaw_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_CreateRaw(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_CreateRaw_fnRecorder) ReturnResults(result1 io.Writer, result2 error) *MoqWriter_starGenType_CreateRaw_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.Writer
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_CreateRaw_doFn
		DoReturnFn MoqWriter_starGenType_CreateRaw_doReturnFn
	}{
		Values: &struct {
			Result1 io.Writer
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_CreateRaw_fnRecorder) AndDo(fn MoqWriter_starGenType_CreateRaw_doFn) *MoqWriter_starGenType_CreateRaw_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_CreateRaw_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_CreateRaw_doReturnFn) *MoqWriter_starGenType_CreateRaw_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 io.Writer
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_CreateRaw_doFn
		DoReturnFn MoqWriter_starGenType_CreateRaw_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_CreateRaw_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_CreateRaw_resultsByParams
	for n, res := range r.Moq.ResultsByParams_CreateRaw {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_CreateRaw_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_CreateRaw_paramsKey]*MoqWriter_starGenType_CreateRaw_results{},
		}
		r.Moq.ResultsByParams_CreateRaw = append(r.Moq.ResultsByParams_CreateRaw, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_CreateRaw) {
			copy(r.Moq.ResultsByParams_CreateRaw[insertAt+1:], r.Moq.ResultsByParams_CreateRaw[insertAt:0])
			r.Moq.ResultsByParams_CreateRaw[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_CreateRaw(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_CreateRaw_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_CreateRaw_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_CreateRaw_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 io.Writer
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_CreateRaw_doFn
				DoReturnFn MoqWriter_starGenType_CreateRaw_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_CreateRaw(params MoqWriter_starGenType_CreateRaw_params) string {
	return fmt.Sprintf("CreateRaw(%#v)", params.Fh)
}

func (m *MoqWriter_starGenType) ParamsKey_CreateRaw(params MoqWriter_starGenType_CreateRaw_params, anyParams uint64) MoqWriter_starGenType_CreateRaw_paramsKey {
	m.Scene.T.Helper()
	var fhUsed *zip.FileHeader
	var fhUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.CreateRaw.Fh == moq.ParamIndexByValue {
			fhUsed = params.Fh
		} else {
			fhUsedHash = hash.DeepHash(params.Fh)
		}
	}
	return MoqWriter_starGenType_CreateRaw_paramsKey{
		Params: struct{ Fh *zip.FileHeader }{
			Fh: fhUsed,
		},
		Hashes: struct{ Fh hash.Hash }{
			Fh: fhUsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) Copy(f *zip.File) *MoqWriter_starGenType_Copy_fnRecorder {
	return &MoqWriter_starGenType_Copy_fnRecorder{
		Params: MoqWriter_starGenType_Copy_params{
			F: f,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_Copy_fnRecorder) Any() *MoqWriter_starGenType_Copy_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Copy(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_Copy_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_Copy_anyParams) F() *MoqWriter_starGenType_Copy_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqWriter_starGenType_Copy_fnRecorder) Seq() *MoqWriter_starGenType_Copy_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Copy(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_Copy_fnRecorder) NoSeq() *MoqWriter_starGenType_Copy_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Copy(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_Copy_fnRecorder) ReturnResults(result1 error) *MoqWriter_starGenType_Copy_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Copy_doFn
		DoReturnFn MoqWriter_starGenType_Copy_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_Copy_fnRecorder) AndDo(fn MoqWriter_starGenType_Copy_doFn) *MoqWriter_starGenType_Copy_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_Copy_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_Copy_doReturnFn) *MoqWriter_starGenType_Copy_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_Copy_doFn
		DoReturnFn MoqWriter_starGenType_Copy_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_Copy_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_Copy_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Copy {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_Copy_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_Copy_paramsKey]*MoqWriter_starGenType_Copy_results{},
		}
		r.Moq.ResultsByParams_Copy = append(r.Moq.ResultsByParams_Copy, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Copy) {
			copy(r.Moq.ResultsByParams_Copy[insertAt+1:], r.Moq.ResultsByParams_Copy[insertAt:0])
			r.Moq.ResultsByParams_Copy[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Copy(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_Copy_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_Copy_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_Copy_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_Copy_doFn
				DoReturnFn MoqWriter_starGenType_Copy_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_Copy(params MoqWriter_starGenType_Copy_params) string {
	return fmt.Sprintf("Copy(%#v)", params.F)
}

func (m *MoqWriter_starGenType) ParamsKey_Copy(params MoqWriter_starGenType_Copy_params, anyParams uint64) MoqWriter_starGenType_Copy_paramsKey {
	m.Scene.T.Helper()
	var fUsed *zip.File
	var fUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Copy.F == moq.ParamIndexByValue {
			fUsed = params.F
		} else {
			fUsedHash = hash.DeepHash(params.F)
		}
	}
	return MoqWriter_starGenType_Copy_paramsKey{
		Params: struct{ F *zip.File }{
			F: fUsed,
		},
		Hashes: struct{ F hash.Hash }{
			F: fUsedHash,
		},
	}
}

func (m *MoqWriter_starGenType_recorder) RegisterCompressor(method uint16, comp zip.Compressor) *MoqWriter_starGenType_RegisterCompressor_fnRecorder {
	return &MoqWriter_starGenType_RegisterCompressor_fnRecorder{
		Params: MoqWriter_starGenType_RegisterCompressor_params{
			Method: method,
			Comp:   comp,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqWriter_starGenType_RegisterCompressor_fnRecorder) Any() *MoqWriter_starGenType_RegisterCompressor_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RegisterCompressor(r.Params))
		return nil
	}
	return &MoqWriter_starGenType_RegisterCompressor_anyParams{Recorder: r}
}

func (a *MoqWriter_starGenType_RegisterCompressor_anyParams) Method() *MoqWriter_starGenType_RegisterCompressor_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqWriter_starGenType_RegisterCompressor_anyParams) Comp() *MoqWriter_starGenType_RegisterCompressor_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqWriter_starGenType_RegisterCompressor_fnRecorder) Seq() *MoqWriter_starGenType_RegisterCompressor_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RegisterCompressor(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqWriter_starGenType_RegisterCompressor_fnRecorder) NoSeq() *MoqWriter_starGenType_RegisterCompressor_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RegisterCompressor(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqWriter_starGenType_RegisterCompressor_fnRecorder) ReturnResults() *MoqWriter_starGenType_RegisterCompressor_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_RegisterCompressor_doFn
		DoReturnFn MoqWriter_starGenType_RegisterCompressor_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqWriter_starGenType_RegisterCompressor_fnRecorder) AndDo(fn MoqWriter_starGenType_RegisterCompressor_doFn) *MoqWriter_starGenType_RegisterCompressor_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqWriter_starGenType_RegisterCompressor_fnRecorder) DoReturnResults(fn MoqWriter_starGenType_RegisterCompressor_doReturnFn) *MoqWriter_starGenType_RegisterCompressor_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqWriter_starGenType_RegisterCompressor_doFn
		DoReturnFn MoqWriter_starGenType_RegisterCompressor_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqWriter_starGenType_RegisterCompressor_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqWriter_starGenType_RegisterCompressor_resultsByParams
	for n, res := range r.Moq.ResultsByParams_RegisterCompressor {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqWriter_starGenType_RegisterCompressor_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqWriter_starGenType_RegisterCompressor_paramsKey]*MoqWriter_starGenType_RegisterCompressor_results{},
		}
		r.Moq.ResultsByParams_RegisterCompressor = append(r.Moq.ResultsByParams_RegisterCompressor, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_RegisterCompressor) {
			copy(r.Moq.ResultsByParams_RegisterCompressor[insertAt+1:], r.Moq.ResultsByParams_RegisterCompressor[insertAt:0])
			r.Moq.ResultsByParams_RegisterCompressor[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_RegisterCompressor(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqWriter_starGenType_RegisterCompressor_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqWriter_starGenType_RegisterCompressor_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqWriter_starGenType_RegisterCompressor_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqWriter_starGenType_RegisterCompressor_doFn
				DoReturnFn MoqWriter_starGenType_RegisterCompressor_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqWriter_starGenType) PrettyParams_RegisterCompressor(params MoqWriter_starGenType_RegisterCompressor_params) string {
	return fmt.Sprintf("RegisterCompressor(%#v, %#v)", params.Method, params.Comp)
}

func (m *MoqWriter_starGenType) ParamsKey_RegisterCompressor(params MoqWriter_starGenType_RegisterCompressor_params, anyParams uint64) MoqWriter_starGenType_RegisterCompressor_paramsKey {
	m.Scene.T.Helper()
	var methodUsed uint16
	var methodUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.RegisterCompressor.Method == moq.ParamIndexByValue {
			methodUsed = params.Method
		} else {
			methodUsedHash = hash.DeepHash(params.Method)
		}
	}
	var compUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.RegisterCompressor.Comp == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The comp parameter of the RegisterCompressor function can't be indexed by value")
		}
		compUsedHash = hash.DeepHash(params.Comp)
	}
	return MoqWriter_starGenType_RegisterCompressor_paramsKey{
		Params: struct{ Method uint16 }{
			Method: methodUsed,
		},
		Hashes: struct {
			Method hash.Hash
			Comp   hash.Hash
		}{
			Method: methodUsedHash,
			Comp:   compUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqWriter_starGenType) Reset() {
	m.ResultsByParams_SetOffset = nil
	m.ResultsByParams_Flush = nil
	m.ResultsByParams_SetComment = nil
	m.ResultsByParams_Close = nil
	m.ResultsByParams_Create = nil
	m.ResultsByParams_CreateHeader = nil
	m.ResultsByParams_CreateRaw = nil
	m.ResultsByParams_Copy = nil
	m.ResultsByParams_RegisterCompressor = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqWriter_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_SetOffset {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetOffset(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Flush {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Flush(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetComment {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetComment(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Close {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Close(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Create {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Create(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_CreateHeader {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_CreateHeader(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_CreateRaw {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_CreateRaw(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Copy {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Copy(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_RegisterCompressor {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_RegisterCompressor(results.Params))
			}
		}
	}
}
