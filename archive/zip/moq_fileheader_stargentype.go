// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package zip

import (
	"fmt"
	"math/bits"
	"os"
	"sync/atomic"
	"time"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that zip.FileHeader_starGenType is
// mocked completely
var _ FileHeader_starGenType = (*MoqFileHeader_starGenType_mock)(nil)

// FileHeader_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type FileHeader_starGenType interface {
	FileInfo() os.FileInfo
	ModTime() time.Time
	SetModTime(t time.Time)
	Mode() (mode os.FileMode)
	SetMode(mode os.FileMode)
}

// MoqFileHeader_starGenType holds the state of a moq of the
// FileHeader_starGenType type
type MoqFileHeader_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqFileHeader_starGenType_mock

	ResultsByParams_FileInfo   []MoqFileHeader_starGenType_FileInfo_resultsByParams
	ResultsByParams_ModTime    []MoqFileHeader_starGenType_ModTime_resultsByParams
	ResultsByParams_SetModTime []MoqFileHeader_starGenType_SetModTime_resultsByParams
	ResultsByParams_Mode       []MoqFileHeader_starGenType_Mode_resultsByParams
	ResultsByParams_SetMode    []MoqFileHeader_starGenType_SetMode_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			FileInfo   struct{}
			ModTime    struct{}
			SetModTime struct {
				T moq.ParamIndexing
			}
			Mode    struct{}
			SetMode struct {
				Mode moq.ParamIndexing
			}
		}
	}
	// MoqFileHeader_starGenType_mock isolates the mock interface of the
}

// FileHeader_starGenType type
type MoqFileHeader_starGenType_mock struct {
	Moq *MoqFileHeader_starGenType
}

// MoqFileHeader_starGenType_recorder isolates the recorder interface of the
// FileHeader_starGenType type
type MoqFileHeader_starGenType_recorder struct {
	Moq *MoqFileHeader_starGenType
}

// MoqFileHeader_starGenType_FileInfo_params holds the params of the
// FileHeader_starGenType type
type MoqFileHeader_starGenType_FileInfo_params struct{}

// MoqFileHeader_starGenType_FileInfo_paramsKey holds the map key params of the
// FileHeader_starGenType type
type MoqFileHeader_starGenType_FileInfo_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFileHeader_starGenType_FileInfo_resultsByParams contains the results for
// a given set of parameters for the FileHeader_starGenType type
type MoqFileHeader_starGenType_FileInfo_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFileHeader_starGenType_FileInfo_paramsKey]*MoqFileHeader_starGenType_FileInfo_results
}

// MoqFileHeader_starGenType_FileInfo_doFn defines the type of function needed
// when calling AndDo for the FileHeader_starGenType type
type MoqFileHeader_starGenType_FileInfo_doFn func()

// MoqFileHeader_starGenType_FileInfo_doReturnFn defines the type of function
// needed when calling DoReturnResults for the FileHeader_starGenType type
type MoqFileHeader_starGenType_FileInfo_doReturnFn func() os.FileInfo

// MoqFileHeader_starGenType_FileInfo_results holds the results of the
// FileHeader_starGenType type
type MoqFileHeader_starGenType_FileInfo_results struct {
	Params  MoqFileHeader_starGenType_FileInfo_params
	Results []struct {
		Values *struct {
			Result1 os.FileInfo
		}
		Sequence   uint32
		DoFn       MoqFileHeader_starGenType_FileInfo_doFn
		DoReturnFn MoqFileHeader_starGenType_FileInfo_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFileHeader_starGenType_FileInfo_fnRecorder routes recorded function calls
// to the MoqFileHeader_starGenType moq
type MoqFileHeader_starGenType_FileInfo_fnRecorder struct {
	Params    MoqFileHeader_starGenType_FileInfo_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFileHeader_starGenType_FileInfo_results
	Moq       *MoqFileHeader_starGenType
}

// MoqFileHeader_starGenType_FileInfo_anyParams isolates the any params
// functions of the FileHeader_starGenType type
type MoqFileHeader_starGenType_FileInfo_anyParams struct {
	Recorder *MoqFileHeader_starGenType_FileInfo_fnRecorder
}

// MoqFileHeader_starGenType_ModTime_params holds the params of the
// FileHeader_starGenType type
type MoqFileHeader_starGenType_ModTime_params struct{}

// MoqFileHeader_starGenType_ModTime_paramsKey holds the map key params of the
// FileHeader_starGenType type
type MoqFileHeader_starGenType_ModTime_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFileHeader_starGenType_ModTime_resultsByParams contains the results for a
// given set of parameters for the FileHeader_starGenType type
type MoqFileHeader_starGenType_ModTime_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFileHeader_starGenType_ModTime_paramsKey]*MoqFileHeader_starGenType_ModTime_results
}

// MoqFileHeader_starGenType_ModTime_doFn defines the type of function needed
// when calling AndDo for the FileHeader_starGenType type
type MoqFileHeader_starGenType_ModTime_doFn func()

// MoqFileHeader_starGenType_ModTime_doReturnFn defines the type of function
// needed when calling DoReturnResults for the FileHeader_starGenType type
type MoqFileHeader_starGenType_ModTime_doReturnFn func() time.Time

// MoqFileHeader_starGenType_ModTime_results holds the results of the
// FileHeader_starGenType type
type MoqFileHeader_starGenType_ModTime_results struct {
	Params  MoqFileHeader_starGenType_ModTime_params
	Results []struct {
		Values *struct {
			Result1 time.Time
		}
		Sequence   uint32
		DoFn       MoqFileHeader_starGenType_ModTime_doFn
		DoReturnFn MoqFileHeader_starGenType_ModTime_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFileHeader_starGenType_ModTime_fnRecorder routes recorded function calls
// to the MoqFileHeader_starGenType moq
type MoqFileHeader_starGenType_ModTime_fnRecorder struct {
	Params    MoqFileHeader_starGenType_ModTime_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFileHeader_starGenType_ModTime_results
	Moq       *MoqFileHeader_starGenType
}

// MoqFileHeader_starGenType_ModTime_anyParams isolates the any params
// functions of the FileHeader_starGenType type
type MoqFileHeader_starGenType_ModTime_anyParams struct {
	Recorder *MoqFileHeader_starGenType_ModTime_fnRecorder
}

// MoqFileHeader_starGenType_SetModTime_params holds the params of the
// FileHeader_starGenType type
type MoqFileHeader_starGenType_SetModTime_params struct{ T time.Time }

// MoqFileHeader_starGenType_SetModTime_paramsKey holds the map key params of
// the FileHeader_starGenType type
type MoqFileHeader_starGenType_SetModTime_paramsKey struct {
	Params struct{ T time.Time }
	Hashes struct{ T hash.Hash }
}

// MoqFileHeader_starGenType_SetModTime_resultsByParams contains the results
// for a given set of parameters for the FileHeader_starGenType type
type MoqFileHeader_starGenType_SetModTime_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFileHeader_starGenType_SetModTime_paramsKey]*MoqFileHeader_starGenType_SetModTime_results
}

// MoqFileHeader_starGenType_SetModTime_doFn defines the type of function
// needed when calling AndDo for the FileHeader_starGenType type
type MoqFileHeader_starGenType_SetModTime_doFn func(t time.Time)

// MoqFileHeader_starGenType_SetModTime_doReturnFn defines the type of function
// needed when calling DoReturnResults for the FileHeader_starGenType type
type MoqFileHeader_starGenType_SetModTime_doReturnFn func(t time.Time)

// MoqFileHeader_starGenType_SetModTime_results holds the results of the
// FileHeader_starGenType type
type MoqFileHeader_starGenType_SetModTime_results struct {
	Params  MoqFileHeader_starGenType_SetModTime_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFileHeader_starGenType_SetModTime_doFn
		DoReturnFn MoqFileHeader_starGenType_SetModTime_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFileHeader_starGenType_SetModTime_fnRecorder routes recorded function
// calls to the MoqFileHeader_starGenType moq
type MoqFileHeader_starGenType_SetModTime_fnRecorder struct {
	Params    MoqFileHeader_starGenType_SetModTime_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFileHeader_starGenType_SetModTime_results
	Moq       *MoqFileHeader_starGenType
}

// MoqFileHeader_starGenType_SetModTime_anyParams isolates the any params
// functions of the FileHeader_starGenType type
type MoqFileHeader_starGenType_SetModTime_anyParams struct {
	Recorder *MoqFileHeader_starGenType_SetModTime_fnRecorder
}

// MoqFileHeader_starGenType_Mode_params holds the params of the
// FileHeader_starGenType type
type MoqFileHeader_starGenType_Mode_params struct{}

// MoqFileHeader_starGenType_Mode_paramsKey holds the map key params of the
// FileHeader_starGenType type
type MoqFileHeader_starGenType_Mode_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqFileHeader_starGenType_Mode_resultsByParams contains the results for a
// given set of parameters for the FileHeader_starGenType type
type MoqFileHeader_starGenType_Mode_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFileHeader_starGenType_Mode_paramsKey]*MoqFileHeader_starGenType_Mode_results
}

// MoqFileHeader_starGenType_Mode_doFn defines the type of function needed when
// calling AndDo for the FileHeader_starGenType type
type MoqFileHeader_starGenType_Mode_doFn func()

// MoqFileHeader_starGenType_Mode_doReturnFn defines the type of function
// needed when calling DoReturnResults for the FileHeader_starGenType type
type MoqFileHeader_starGenType_Mode_doReturnFn func() (mode os.FileMode)

// MoqFileHeader_starGenType_Mode_results holds the results of the
// FileHeader_starGenType type
type MoqFileHeader_starGenType_Mode_results struct {
	Params  MoqFileHeader_starGenType_Mode_params
	Results []struct {
		Values     *struct{ Mode os.FileMode }
		Sequence   uint32
		DoFn       MoqFileHeader_starGenType_Mode_doFn
		DoReturnFn MoqFileHeader_starGenType_Mode_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFileHeader_starGenType_Mode_fnRecorder routes recorded function calls to
// the MoqFileHeader_starGenType moq
type MoqFileHeader_starGenType_Mode_fnRecorder struct {
	Params    MoqFileHeader_starGenType_Mode_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFileHeader_starGenType_Mode_results
	Moq       *MoqFileHeader_starGenType
}

// MoqFileHeader_starGenType_Mode_anyParams isolates the any params functions
// of the FileHeader_starGenType type
type MoqFileHeader_starGenType_Mode_anyParams struct {
	Recorder *MoqFileHeader_starGenType_Mode_fnRecorder
}

// MoqFileHeader_starGenType_SetMode_params holds the params of the
// FileHeader_starGenType type
type MoqFileHeader_starGenType_SetMode_params struct{ Mode os.FileMode }

// MoqFileHeader_starGenType_SetMode_paramsKey holds the map key params of the
// FileHeader_starGenType type
type MoqFileHeader_starGenType_SetMode_paramsKey struct {
	Params struct{ Mode os.FileMode }
	Hashes struct{ Mode hash.Hash }
}

// MoqFileHeader_starGenType_SetMode_resultsByParams contains the results for a
// given set of parameters for the FileHeader_starGenType type
type MoqFileHeader_starGenType_SetMode_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqFileHeader_starGenType_SetMode_paramsKey]*MoqFileHeader_starGenType_SetMode_results
}

// MoqFileHeader_starGenType_SetMode_doFn defines the type of function needed
// when calling AndDo for the FileHeader_starGenType type
type MoqFileHeader_starGenType_SetMode_doFn func(mode os.FileMode)

// MoqFileHeader_starGenType_SetMode_doReturnFn defines the type of function
// needed when calling DoReturnResults for the FileHeader_starGenType type
type MoqFileHeader_starGenType_SetMode_doReturnFn func(mode os.FileMode)

// MoqFileHeader_starGenType_SetMode_results holds the results of the
// FileHeader_starGenType type
type MoqFileHeader_starGenType_SetMode_results struct {
	Params  MoqFileHeader_starGenType_SetMode_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFileHeader_starGenType_SetMode_doFn
		DoReturnFn MoqFileHeader_starGenType_SetMode_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqFileHeader_starGenType_SetMode_fnRecorder routes recorded function calls
// to the MoqFileHeader_starGenType moq
type MoqFileHeader_starGenType_SetMode_fnRecorder struct {
	Params    MoqFileHeader_starGenType_SetMode_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqFileHeader_starGenType_SetMode_results
	Moq       *MoqFileHeader_starGenType
}

// MoqFileHeader_starGenType_SetMode_anyParams isolates the any params
// functions of the FileHeader_starGenType type
type MoqFileHeader_starGenType_SetMode_anyParams struct {
	Recorder *MoqFileHeader_starGenType_SetMode_fnRecorder
}

// NewMoqFileHeader_starGenType creates a new moq of the FileHeader_starGenType
// type
func NewMoqFileHeader_starGenType(scene *moq.Scene, config *moq.Config) *MoqFileHeader_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqFileHeader_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqFileHeader_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				FileInfo   struct{}
				ModTime    struct{}
				SetModTime struct {
					T moq.ParamIndexing
				}
				Mode    struct{}
				SetMode struct {
					Mode moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			FileInfo   struct{}
			ModTime    struct{}
			SetModTime struct {
				T moq.ParamIndexing
			}
			Mode    struct{}
			SetMode struct {
				Mode moq.ParamIndexing
			}
		}{
			FileInfo: struct{}{},
			ModTime:  struct{}{},
			SetModTime: struct {
				T moq.ParamIndexing
			}{
				T: moq.ParamIndexByHash,
			},
			Mode: struct{}{},
			SetMode: struct {
				Mode moq.ParamIndexing
			}{
				Mode: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the FileHeader_starGenType type
func (m *MoqFileHeader_starGenType) Mock() *MoqFileHeader_starGenType_mock { return m.Moq }

func (m *MoqFileHeader_starGenType_mock) FileInfo() (result1 os.FileInfo) {
	m.Moq.Scene.T.Helper()
	params := MoqFileHeader_starGenType_FileInfo_params{}
	var results *MoqFileHeader_starGenType_FileInfo_results
	for _, resultsByParams := range m.Moq.ResultsByParams_FileInfo {
		paramsKey := m.Moq.ParamsKey_FileInfo(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_FileInfo(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_FileInfo(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_FileInfo(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqFileHeader_starGenType_mock) ModTime() (result1 time.Time) {
	m.Moq.Scene.T.Helper()
	params := MoqFileHeader_starGenType_ModTime_params{}
	var results *MoqFileHeader_starGenType_ModTime_results
	for _, resultsByParams := range m.Moq.ResultsByParams_ModTime {
		paramsKey := m.Moq.ParamsKey_ModTime(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_ModTime(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_ModTime(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_ModTime(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqFileHeader_starGenType_mock) SetModTime(t time.Time) {
	m.Moq.Scene.T.Helper()
	params := MoqFileHeader_starGenType_SetModTime_params{
		T: t,
	}
	var results *MoqFileHeader_starGenType_SetModTime_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetModTime {
		paramsKey := m.Moq.ParamsKey_SetModTime(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetModTime(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetModTime(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetModTime(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(t)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(t)
	}
	return
}

func (m *MoqFileHeader_starGenType_mock) Mode() (mode os.FileMode) {
	m.Moq.Scene.T.Helper()
	params := MoqFileHeader_starGenType_Mode_params{}
	var results *MoqFileHeader_starGenType_Mode_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Mode {
		paramsKey := m.Moq.ParamsKey_Mode(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Mode(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Mode(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Mode(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		mode = result.Values.Mode
	}
	if result.DoReturnFn != nil {
		mode = result.DoReturnFn()
	}
	return
}

func (m *MoqFileHeader_starGenType_mock) SetMode(mode os.FileMode) {
	m.Moq.Scene.T.Helper()
	params := MoqFileHeader_starGenType_SetMode_params{
		Mode: mode,
	}
	var results *MoqFileHeader_starGenType_SetMode_results
	for _, resultsByParams := range m.Moq.ResultsByParams_SetMode {
		paramsKey := m.Moq.ParamsKey_SetMode(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_SetMode(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_SetMode(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_SetMode(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(mode)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(mode)
	}
	return
}

// OnCall returns the recorder implementation of the FileHeader_starGenType
// type
func (m *MoqFileHeader_starGenType) OnCall() *MoqFileHeader_starGenType_recorder {
	return &MoqFileHeader_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqFileHeader_starGenType_recorder) FileInfo() *MoqFileHeader_starGenType_FileInfo_fnRecorder {
	return &MoqFileHeader_starGenType_FileInfo_fnRecorder{
		Params:   MoqFileHeader_starGenType_FileInfo_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFileHeader_starGenType_FileInfo_fnRecorder) Any() *MoqFileHeader_starGenType_FileInfo_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FileInfo(r.Params))
		return nil
	}
	return &MoqFileHeader_starGenType_FileInfo_anyParams{Recorder: r}
}

func (r *MoqFileHeader_starGenType_FileInfo_fnRecorder) Seq() *MoqFileHeader_starGenType_FileInfo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FileInfo(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFileHeader_starGenType_FileInfo_fnRecorder) NoSeq() *MoqFileHeader_starGenType_FileInfo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FileInfo(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFileHeader_starGenType_FileInfo_fnRecorder) ReturnResults(result1 os.FileInfo) *MoqFileHeader_starGenType_FileInfo_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 os.FileInfo
		}
		Sequence   uint32
		DoFn       MoqFileHeader_starGenType_FileInfo_doFn
		DoReturnFn MoqFileHeader_starGenType_FileInfo_doReturnFn
	}{
		Values: &struct {
			Result1 os.FileInfo
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFileHeader_starGenType_FileInfo_fnRecorder) AndDo(fn MoqFileHeader_starGenType_FileInfo_doFn) *MoqFileHeader_starGenType_FileInfo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFileHeader_starGenType_FileInfo_fnRecorder) DoReturnResults(fn MoqFileHeader_starGenType_FileInfo_doReturnFn) *MoqFileHeader_starGenType_FileInfo_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 os.FileInfo
		}
		Sequence   uint32
		DoFn       MoqFileHeader_starGenType_FileInfo_doFn
		DoReturnFn MoqFileHeader_starGenType_FileInfo_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFileHeader_starGenType_FileInfo_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFileHeader_starGenType_FileInfo_resultsByParams
	for n, res := range r.Moq.ResultsByParams_FileInfo {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFileHeader_starGenType_FileInfo_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFileHeader_starGenType_FileInfo_paramsKey]*MoqFileHeader_starGenType_FileInfo_results{},
		}
		r.Moq.ResultsByParams_FileInfo = append(r.Moq.ResultsByParams_FileInfo, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_FileInfo) {
			copy(r.Moq.ResultsByParams_FileInfo[insertAt+1:], r.Moq.ResultsByParams_FileInfo[insertAt:0])
			r.Moq.ResultsByParams_FileInfo[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_FileInfo(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFileHeader_starGenType_FileInfo_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFileHeader_starGenType_FileInfo_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFileHeader_starGenType_FileInfo_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 os.FileInfo
				}
				Sequence   uint32
				DoFn       MoqFileHeader_starGenType_FileInfo_doFn
				DoReturnFn MoqFileHeader_starGenType_FileInfo_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFileHeader_starGenType) PrettyParams_FileInfo(params MoqFileHeader_starGenType_FileInfo_params) string {
	return fmt.Sprintf("FileInfo()")
}

func (m *MoqFileHeader_starGenType) ParamsKey_FileInfo(params MoqFileHeader_starGenType_FileInfo_params, anyParams uint64) MoqFileHeader_starGenType_FileInfo_paramsKey {
	m.Scene.T.Helper()
	return MoqFileHeader_starGenType_FileInfo_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFileHeader_starGenType_recorder) ModTime() *MoqFileHeader_starGenType_ModTime_fnRecorder {
	return &MoqFileHeader_starGenType_ModTime_fnRecorder{
		Params:   MoqFileHeader_starGenType_ModTime_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFileHeader_starGenType_ModTime_fnRecorder) Any() *MoqFileHeader_starGenType_ModTime_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ModTime(r.Params))
		return nil
	}
	return &MoqFileHeader_starGenType_ModTime_anyParams{Recorder: r}
}

func (r *MoqFileHeader_starGenType_ModTime_fnRecorder) Seq() *MoqFileHeader_starGenType_ModTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ModTime(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFileHeader_starGenType_ModTime_fnRecorder) NoSeq() *MoqFileHeader_starGenType_ModTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_ModTime(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFileHeader_starGenType_ModTime_fnRecorder) ReturnResults(result1 time.Time) *MoqFileHeader_starGenType_ModTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 time.Time
		}
		Sequence   uint32
		DoFn       MoqFileHeader_starGenType_ModTime_doFn
		DoReturnFn MoqFileHeader_starGenType_ModTime_doReturnFn
	}{
		Values: &struct {
			Result1 time.Time
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFileHeader_starGenType_ModTime_fnRecorder) AndDo(fn MoqFileHeader_starGenType_ModTime_doFn) *MoqFileHeader_starGenType_ModTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFileHeader_starGenType_ModTime_fnRecorder) DoReturnResults(fn MoqFileHeader_starGenType_ModTime_doReturnFn) *MoqFileHeader_starGenType_ModTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 time.Time
		}
		Sequence   uint32
		DoFn       MoqFileHeader_starGenType_ModTime_doFn
		DoReturnFn MoqFileHeader_starGenType_ModTime_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFileHeader_starGenType_ModTime_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFileHeader_starGenType_ModTime_resultsByParams
	for n, res := range r.Moq.ResultsByParams_ModTime {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFileHeader_starGenType_ModTime_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFileHeader_starGenType_ModTime_paramsKey]*MoqFileHeader_starGenType_ModTime_results{},
		}
		r.Moq.ResultsByParams_ModTime = append(r.Moq.ResultsByParams_ModTime, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_ModTime) {
			copy(r.Moq.ResultsByParams_ModTime[insertAt+1:], r.Moq.ResultsByParams_ModTime[insertAt:0])
			r.Moq.ResultsByParams_ModTime[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_ModTime(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFileHeader_starGenType_ModTime_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFileHeader_starGenType_ModTime_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFileHeader_starGenType_ModTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 time.Time
				}
				Sequence   uint32
				DoFn       MoqFileHeader_starGenType_ModTime_doFn
				DoReturnFn MoqFileHeader_starGenType_ModTime_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFileHeader_starGenType) PrettyParams_ModTime(params MoqFileHeader_starGenType_ModTime_params) string {
	return fmt.Sprintf("ModTime()")
}

func (m *MoqFileHeader_starGenType) ParamsKey_ModTime(params MoqFileHeader_starGenType_ModTime_params, anyParams uint64) MoqFileHeader_starGenType_ModTime_paramsKey {
	m.Scene.T.Helper()
	return MoqFileHeader_starGenType_ModTime_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFileHeader_starGenType_recorder) SetModTime(t time.Time) *MoqFileHeader_starGenType_SetModTime_fnRecorder {
	return &MoqFileHeader_starGenType_SetModTime_fnRecorder{
		Params: MoqFileHeader_starGenType_SetModTime_params{
			T: t,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFileHeader_starGenType_SetModTime_fnRecorder) Any() *MoqFileHeader_starGenType_SetModTime_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetModTime(r.Params))
		return nil
	}
	return &MoqFileHeader_starGenType_SetModTime_anyParams{Recorder: r}
}

func (a *MoqFileHeader_starGenType_SetModTime_anyParams) T() *MoqFileHeader_starGenType_SetModTime_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqFileHeader_starGenType_SetModTime_fnRecorder) Seq() *MoqFileHeader_starGenType_SetModTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetModTime(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFileHeader_starGenType_SetModTime_fnRecorder) NoSeq() *MoqFileHeader_starGenType_SetModTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetModTime(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFileHeader_starGenType_SetModTime_fnRecorder) ReturnResults() *MoqFileHeader_starGenType_SetModTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFileHeader_starGenType_SetModTime_doFn
		DoReturnFn MoqFileHeader_starGenType_SetModTime_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFileHeader_starGenType_SetModTime_fnRecorder) AndDo(fn MoqFileHeader_starGenType_SetModTime_doFn) *MoqFileHeader_starGenType_SetModTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFileHeader_starGenType_SetModTime_fnRecorder) DoReturnResults(fn MoqFileHeader_starGenType_SetModTime_doReturnFn) *MoqFileHeader_starGenType_SetModTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFileHeader_starGenType_SetModTime_doFn
		DoReturnFn MoqFileHeader_starGenType_SetModTime_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFileHeader_starGenType_SetModTime_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFileHeader_starGenType_SetModTime_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetModTime {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFileHeader_starGenType_SetModTime_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFileHeader_starGenType_SetModTime_paramsKey]*MoqFileHeader_starGenType_SetModTime_results{},
		}
		r.Moq.ResultsByParams_SetModTime = append(r.Moq.ResultsByParams_SetModTime, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetModTime) {
			copy(r.Moq.ResultsByParams_SetModTime[insertAt+1:], r.Moq.ResultsByParams_SetModTime[insertAt:0])
			r.Moq.ResultsByParams_SetModTime[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetModTime(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFileHeader_starGenType_SetModTime_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFileHeader_starGenType_SetModTime_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFileHeader_starGenType_SetModTime_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFileHeader_starGenType_SetModTime_doFn
				DoReturnFn MoqFileHeader_starGenType_SetModTime_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFileHeader_starGenType) PrettyParams_SetModTime(params MoqFileHeader_starGenType_SetModTime_params) string {
	return fmt.Sprintf("SetModTime(%#v)", params.T)
}

func (m *MoqFileHeader_starGenType) ParamsKey_SetModTime(params MoqFileHeader_starGenType_SetModTime_params, anyParams uint64) MoqFileHeader_starGenType_SetModTime_paramsKey {
	m.Scene.T.Helper()
	var tUsed time.Time
	var tUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetModTime.T == moq.ParamIndexByValue {
			tUsed = params.T
		} else {
			tUsedHash = hash.DeepHash(params.T)
		}
	}
	return MoqFileHeader_starGenType_SetModTime_paramsKey{
		Params: struct{ T time.Time }{
			T: tUsed,
		},
		Hashes: struct{ T hash.Hash }{
			T: tUsedHash,
		},
	}
}

func (m *MoqFileHeader_starGenType_recorder) Mode() *MoqFileHeader_starGenType_Mode_fnRecorder {
	return &MoqFileHeader_starGenType_Mode_fnRecorder{
		Params:   MoqFileHeader_starGenType_Mode_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFileHeader_starGenType_Mode_fnRecorder) Any() *MoqFileHeader_starGenType_Mode_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Mode(r.Params))
		return nil
	}
	return &MoqFileHeader_starGenType_Mode_anyParams{Recorder: r}
}

func (r *MoqFileHeader_starGenType_Mode_fnRecorder) Seq() *MoqFileHeader_starGenType_Mode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Mode(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFileHeader_starGenType_Mode_fnRecorder) NoSeq() *MoqFileHeader_starGenType_Mode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Mode(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFileHeader_starGenType_Mode_fnRecorder) ReturnResults(mode os.FileMode) *MoqFileHeader_starGenType_Mode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Mode os.FileMode }
		Sequence   uint32
		DoFn       MoqFileHeader_starGenType_Mode_doFn
		DoReturnFn MoqFileHeader_starGenType_Mode_doReturnFn
	}{
		Values: &struct{ Mode os.FileMode }{
			Mode: mode,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFileHeader_starGenType_Mode_fnRecorder) AndDo(fn MoqFileHeader_starGenType_Mode_doFn) *MoqFileHeader_starGenType_Mode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFileHeader_starGenType_Mode_fnRecorder) DoReturnResults(fn MoqFileHeader_starGenType_Mode_doReturnFn) *MoqFileHeader_starGenType_Mode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Mode os.FileMode }
		Sequence   uint32
		DoFn       MoqFileHeader_starGenType_Mode_doFn
		DoReturnFn MoqFileHeader_starGenType_Mode_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFileHeader_starGenType_Mode_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFileHeader_starGenType_Mode_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Mode {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFileHeader_starGenType_Mode_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFileHeader_starGenType_Mode_paramsKey]*MoqFileHeader_starGenType_Mode_results{},
		}
		r.Moq.ResultsByParams_Mode = append(r.Moq.ResultsByParams_Mode, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Mode) {
			copy(r.Moq.ResultsByParams_Mode[insertAt+1:], r.Moq.ResultsByParams_Mode[insertAt:0])
			r.Moq.ResultsByParams_Mode[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Mode(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFileHeader_starGenType_Mode_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFileHeader_starGenType_Mode_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFileHeader_starGenType_Mode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ Mode os.FileMode }
				Sequence   uint32
				DoFn       MoqFileHeader_starGenType_Mode_doFn
				DoReturnFn MoqFileHeader_starGenType_Mode_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFileHeader_starGenType) PrettyParams_Mode(params MoqFileHeader_starGenType_Mode_params) string {
	return fmt.Sprintf("Mode()")
}

func (m *MoqFileHeader_starGenType) ParamsKey_Mode(params MoqFileHeader_starGenType_Mode_params, anyParams uint64) MoqFileHeader_starGenType_Mode_paramsKey {
	m.Scene.T.Helper()
	return MoqFileHeader_starGenType_Mode_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqFileHeader_starGenType_recorder) SetMode(mode os.FileMode) *MoqFileHeader_starGenType_SetMode_fnRecorder {
	return &MoqFileHeader_starGenType_SetMode_fnRecorder{
		Params: MoqFileHeader_starGenType_SetMode_params{
			Mode: mode,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqFileHeader_starGenType_SetMode_fnRecorder) Any() *MoqFileHeader_starGenType_SetMode_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetMode(r.Params))
		return nil
	}
	return &MoqFileHeader_starGenType_SetMode_anyParams{Recorder: r}
}

func (a *MoqFileHeader_starGenType_SetMode_anyParams) Mode() *MoqFileHeader_starGenType_SetMode_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqFileHeader_starGenType_SetMode_fnRecorder) Seq() *MoqFileHeader_starGenType_SetMode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetMode(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqFileHeader_starGenType_SetMode_fnRecorder) NoSeq() *MoqFileHeader_starGenType_SetMode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_SetMode(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqFileHeader_starGenType_SetMode_fnRecorder) ReturnResults() *MoqFileHeader_starGenType_SetMode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFileHeader_starGenType_SetMode_doFn
		DoReturnFn MoqFileHeader_starGenType_SetMode_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqFileHeader_starGenType_SetMode_fnRecorder) AndDo(fn MoqFileHeader_starGenType_SetMode_doFn) *MoqFileHeader_starGenType_SetMode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqFileHeader_starGenType_SetMode_fnRecorder) DoReturnResults(fn MoqFileHeader_starGenType_SetMode_doReturnFn) *MoqFileHeader_starGenType_SetMode_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqFileHeader_starGenType_SetMode_doFn
		DoReturnFn MoqFileHeader_starGenType_SetMode_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqFileHeader_starGenType_SetMode_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqFileHeader_starGenType_SetMode_resultsByParams
	for n, res := range r.Moq.ResultsByParams_SetMode {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqFileHeader_starGenType_SetMode_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqFileHeader_starGenType_SetMode_paramsKey]*MoqFileHeader_starGenType_SetMode_results{},
		}
		r.Moq.ResultsByParams_SetMode = append(r.Moq.ResultsByParams_SetMode, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_SetMode) {
			copy(r.Moq.ResultsByParams_SetMode[insertAt+1:], r.Moq.ResultsByParams_SetMode[insertAt:0])
			r.Moq.ResultsByParams_SetMode[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_SetMode(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqFileHeader_starGenType_SetMode_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqFileHeader_starGenType_SetMode_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqFileHeader_starGenType_SetMode_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqFileHeader_starGenType_SetMode_doFn
				DoReturnFn MoqFileHeader_starGenType_SetMode_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqFileHeader_starGenType) PrettyParams_SetMode(params MoqFileHeader_starGenType_SetMode_params) string {
	return fmt.Sprintf("SetMode(%#v)", params.Mode)
}

func (m *MoqFileHeader_starGenType) ParamsKey_SetMode(params MoqFileHeader_starGenType_SetMode_params, anyParams uint64) MoqFileHeader_starGenType_SetMode_paramsKey {
	m.Scene.T.Helper()
	var modeUsed os.FileMode
	var modeUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SetMode.Mode == moq.ParamIndexByValue {
			modeUsed = params.Mode
		} else {
			modeUsedHash = hash.DeepHash(params.Mode)
		}
	}
	return MoqFileHeader_starGenType_SetMode_paramsKey{
		Params: struct{ Mode os.FileMode }{
			Mode: modeUsed,
		},
		Hashes: struct{ Mode hash.Hash }{
			Mode: modeUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqFileHeader_starGenType) Reset() {
	m.ResultsByParams_FileInfo = nil
	m.ResultsByParams_ModTime = nil
	m.ResultsByParams_SetModTime = nil
	m.ResultsByParams_Mode = nil
	m.ResultsByParams_SetMode = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqFileHeader_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_FileInfo {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_FileInfo(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_ModTime {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_ModTime(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetModTime {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetModTime(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Mode {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Mode(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_SetMode {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_SetMode(results.Params))
			}
		}
	}
}
