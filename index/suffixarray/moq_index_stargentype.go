// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package suffixarray

import (
	"fmt"
	"io"
	"math/bits"
	"regexp"
	"sync/atomic"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that suffixarray.Index_starGenType is
// mocked completely
var _ Index_starGenType = (*MoqIndex_starGenType_mock)(nil)

// Index_starGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Index_starGenType interface {
	Read(r io.Reader) error
	Write(w io.Writer) error
	Bytes() []byte
	Lookup(s []byte, n int) (result []int)
	FindAllIndex(r *regexp.Regexp, n int) (result [][]int)
}

// MoqIndex_starGenType holds the state of a moq of the Index_starGenType type
type MoqIndex_starGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqIndex_starGenType_mock

	ResultsByParams_Read         []MoqIndex_starGenType_Read_resultsByParams
	ResultsByParams_Write        []MoqIndex_starGenType_Write_resultsByParams
	ResultsByParams_Bytes        []MoqIndex_starGenType_Bytes_resultsByParams
	ResultsByParams_Lookup       []MoqIndex_starGenType_Lookup_resultsByParams
	ResultsByParams_FindAllIndex []MoqIndex_starGenType_FindAllIndex_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Read struct {
				Param1 moq.ParamIndexing
			}
			Write struct {
				W moq.ParamIndexing
			}
			Bytes  struct{}
			Lookup struct {
				S moq.ParamIndexing
				N moq.ParamIndexing
			}
			FindAllIndex struct {
				Param1 moq.ParamIndexing
				N      moq.ParamIndexing
			}
		}
	}
	// MoqIndex_starGenType_mock isolates the mock interface of the
}

// Index_starGenType type
type MoqIndex_starGenType_mock struct {
	Moq *MoqIndex_starGenType
}

// MoqIndex_starGenType_recorder isolates the recorder interface of the
// Index_starGenType type
type MoqIndex_starGenType_recorder struct {
	Moq *MoqIndex_starGenType
}

// MoqIndex_starGenType_Read_params holds the params of the Index_starGenType
// type
type MoqIndex_starGenType_Read_params struct{ Param1 io.Reader }

// MoqIndex_starGenType_Read_paramsKey holds the map key params of the
// Index_starGenType type
type MoqIndex_starGenType_Read_paramsKey struct {
	Params struct{ Param1 io.Reader }
	Hashes struct{ Param1 hash.Hash }
}

// MoqIndex_starGenType_Read_resultsByParams contains the results for a given
// set of parameters for the Index_starGenType type
type MoqIndex_starGenType_Read_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIndex_starGenType_Read_paramsKey]*MoqIndex_starGenType_Read_results
}

// MoqIndex_starGenType_Read_doFn defines the type of function needed when
// calling AndDo for the Index_starGenType type
type MoqIndex_starGenType_Read_doFn func(r io.Reader)

// MoqIndex_starGenType_Read_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Index_starGenType type
type MoqIndex_starGenType_Read_doReturnFn func(r io.Reader) error

// MoqIndex_starGenType_Read_results holds the results of the Index_starGenType
// type
type MoqIndex_starGenType_Read_results struct {
	Params  MoqIndex_starGenType_Read_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqIndex_starGenType_Read_doFn
		DoReturnFn MoqIndex_starGenType_Read_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIndex_starGenType_Read_fnRecorder routes recorded function calls to the
// MoqIndex_starGenType moq
type MoqIndex_starGenType_Read_fnRecorder struct {
	Params    MoqIndex_starGenType_Read_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIndex_starGenType_Read_results
	Moq       *MoqIndex_starGenType
}

// MoqIndex_starGenType_Read_anyParams isolates the any params functions of the
// Index_starGenType type
type MoqIndex_starGenType_Read_anyParams struct {
	Recorder *MoqIndex_starGenType_Read_fnRecorder
}

// MoqIndex_starGenType_Write_params holds the params of the Index_starGenType
// type
type MoqIndex_starGenType_Write_params struct{ W io.Writer }

// MoqIndex_starGenType_Write_paramsKey holds the map key params of the
// Index_starGenType type
type MoqIndex_starGenType_Write_paramsKey struct {
	Params struct{ W io.Writer }
	Hashes struct{ W hash.Hash }
}

// MoqIndex_starGenType_Write_resultsByParams contains the results for a given
// set of parameters for the Index_starGenType type
type MoqIndex_starGenType_Write_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIndex_starGenType_Write_paramsKey]*MoqIndex_starGenType_Write_results
}

// MoqIndex_starGenType_Write_doFn defines the type of function needed when
// calling AndDo for the Index_starGenType type
type MoqIndex_starGenType_Write_doFn func(w io.Writer)

// MoqIndex_starGenType_Write_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Index_starGenType type
type MoqIndex_starGenType_Write_doReturnFn func(w io.Writer) error

// MoqIndex_starGenType_Write_results holds the results of the
// Index_starGenType type
type MoqIndex_starGenType_Write_results struct {
	Params  MoqIndex_starGenType_Write_params
	Results []struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqIndex_starGenType_Write_doFn
		DoReturnFn MoqIndex_starGenType_Write_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIndex_starGenType_Write_fnRecorder routes recorded function calls to the
// MoqIndex_starGenType moq
type MoqIndex_starGenType_Write_fnRecorder struct {
	Params    MoqIndex_starGenType_Write_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIndex_starGenType_Write_results
	Moq       *MoqIndex_starGenType
}

// MoqIndex_starGenType_Write_anyParams isolates the any params functions of
// the Index_starGenType type
type MoqIndex_starGenType_Write_anyParams struct {
	Recorder *MoqIndex_starGenType_Write_fnRecorder
}

// MoqIndex_starGenType_Bytes_params holds the params of the Index_starGenType
// type
type MoqIndex_starGenType_Bytes_params struct{}

// MoqIndex_starGenType_Bytes_paramsKey holds the map key params of the
// Index_starGenType type
type MoqIndex_starGenType_Bytes_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqIndex_starGenType_Bytes_resultsByParams contains the results for a given
// set of parameters for the Index_starGenType type
type MoqIndex_starGenType_Bytes_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIndex_starGenType_Bytes_paramsKey]*MoqIndex_starGenType_Bytes_results
}

// MoqIndex_starGenType_Bytes_doFn defines the type of function needed when
// calling AndDo for the Index_starGenType type
type MoqIndex_starGenType_Bytes_doFn func()

// MoqIndex_starGenType_Bytes_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Index_starGenType type
type MoqIndex_starGenType_Bytes_doReturnFn func() []byte

// MoqIndex_starGenType_Bytes_results holds the results of the
// Index_starGenType type
type MoqIndex_starGenType_Bytes_results struct {
	Params  MoqIndex_starGenType_Bytes_params
	Results []struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqIndex_starGenType_Bytes_doFn
		DoReturnFn MoqIndex_starGenType_Bytes_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIndex_starGenType_Bytes_fnRecorder routes recorded function calls to the
// MoqIndex_starGenType moq
type MoqIndex_starGenType_Bytes_fnRecorder struct {
	Params    MoqIndex_starGenType_Bytes_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIndex_starGenType_Bytes_results
	Moq       *MoqIndex_starGenType
}

// MoqIndex_starGenType_Bytes_anyParams isolates the any params functions of
// the Index_starGenType type
type MoqIndex_starGenType_Bytes_anyParams struct {
	Recorder *MoqIndex_starGenType_Bytes_fnRecorder
}

// MoqIndex_starGenType_Lookup_params holds the params of the Index_starGenType
// type
type MoqIndex_starGenType_Lookup_params struct {
	S []byte
	N int
}

// MoqIndex_starGenType_Lookup_paramsKey holds the map key params of the
// Index_starGenType type
type MoqIndex_starGenType_Lookup_paramsKey struct {
	Params struct{ N int }
	Hashes struct {
		S hash.Hash
		N hash.Hash
	}
}

// MoqIndex_starGenType_Lookup_resultsByParams contains the results for a given
// set of parameters for the Index_starGenType type
type MoqIndex_starGenType_Lookup_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIndex_starGenType_Lookup_paramsKey]*MoqIndex_starGenType_Lookup_results
}

// MoqIndex_starGenType_Lookup_doFn defines the type of function needed when
// calling AndDo for the Index_starGenType type
type MoqIndex_starGenType_Lookup_doFn func(s []byte, n int)

// MoqIndex_starGenType_Lookup_doReturnFn defines the type of function needed
// when calling DoReturnResults for the Index_starGenType type
type MoqIndex_starGenType_Lookup_doReturnFn func(s []byte, n int) (result []int)

// MoqIndex_starGenType_Lookup_results holds the results of the
// Index_starGenType type
type MoqIndex_starGenType_Lookup_results struct {
	Params  MoqIndex_starGenType_Lookup_params
	Results []struct {
		Values     *struct{ Result1 []int }
		Sequence   uint32
		DoFn       MoqIndex_starGenType_Lookup_doFn
		DoReturnFn MoqIndex_starGenType_Lookup_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIndex_starGenType_Lookup_fnRecorder routes recorded function calls to the
// MoqIndex_starGenType moq
type MoqIndex_starGenType_Lookup_fnRecorder struct {
	Params    MoqIndex_starGenType_Lookup_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIndex_starGenType_Lookup_results
	Moq       *MoqIndex_starGenType
}

// MoqIndex_starGenType_Lookup_anyParams isolates the any params functions of
// the Index_starGenType type
type MoqIndex_starGenType_Lookup_anyParams struct {
	Recorder *MoqIndex_starGenType_Lookup_fnRecorder
}

// MoqIndex_starGenType_FindAllIndex_params holds the params of the
// Index_starGenType type
type MoqIndex_starGenType_FindAllIndex_params struct {
	Param1 *regexp.Regexp
	N      int
}

// MoqIndex_starGenType_FindAllIndex_paramsKey holds the map key params of the
// Index_starGenType type
type MoqIndex_starGenType_FindAllIndex_paramsKey struct {
	Params struct {
		Param1 *regexp.Regexp
		N      int
	}
	Hashes struct {
		Param1 hash.Hash
		N      hash.Hash
	}
}

// MoqIndex_starGenType_FindAllIndex_resultsByParams contains the results for a
// given set of parameters for the Index_starGenType type
type MoqIndex_starGenType_FindAllIndex_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqIndex_starGenType_FindAllIndex_paramsKey]*MoqIndex_starGenType_FindAllIndex_results
}

// MoqIndex_starGenType_FindAllIndex_doFn defines the type of function needed
// when calling AndDo for the Index_starGenType type
type MoqIndex_starGenType_FindAllIndex_doFn func(r *regexp.Regexp, n int)

// MoqIndex_starGenType_FindAllIndex_doReturnFn defines the type of function
// needed when calling DoReturnResults for the Index_starGenType type
type MoqIndex_starGenType_FindAllIndex_doReturnFn func(r *regexp.Regexp, n int) (result [][]int)

// MoqIndex_starGenType_FindAllIndex_results holds the results of the
// Index_starGenType type
type MoqIndex_starGenType_FindAllIndex_results struct {
	Params  MoqIndex_starGenType_FindAllIndex_params
	Results []struct {
		Values     *struct{ Result1 [][]int }
		Sequence   uint32
		DoFn       MoqIndex_starGenType_FindAllIndex_doFn
		DoReturnFn MoqIndex_starGenType_FindAllIndex_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqIndex_starGenType_FindAllIndex_fnRecorder routes recorded function calls
// to the MoqIndex_starGenType moq
type MoqIndex_starGenType_FindAllIndex_fnRecorder struct {
	Params    MoqIndex_starGenType_FindAllIndex_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqIndex_starGenType_FindAllIndex_results
	Moq       *MoqIndex_starGenType
}

// MoqIndex_starGenType_FindAllIndex_anyParams isolates the any params
// functions of the Index_starGenType type
type MoqIndex_starGenType_FindAllIndex_anyParams struct {
	Recorder *MoqIndex_starGenType_FindAllIndex_fnRecorder
}

// NewMoqIndex_starGenType creates a new moq of the Index_starGenType type
func NewMoqIndex_starGenType(scene *moq.Scene, config *moq.Config) *MoqIndex_starGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqIndex_starGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqIndex_starGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Read struct {
					Param1 moq.ParamIndexing
				}
				Write struct {
					W moq.ParamIndexing
				}
				Bytes  struct{}
				Lookup struct {
					S moq.ParamIndexing
					N moq.ParamIndexing
				}
				FindAllIndex struct {
					Param1 moq.ParamIndexing
					N      moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Read struct {
				Param1 moq.ParamIndexing
			}
			Write struct {
				W moq.ParamIndexing
			}
			Bytes  struct{}
			Lookup struct {
				S moq.ParamIndexing
				N moq.ParamIndexing
			}
			FindAllIndex struct {
				Param1 moq.ParamIndexing
				N      moq.ParamIndexing
			}
		}{
			Read: struct {
				Param1 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
			},
			Write: struct {
				W moq.ParamIndexing
			}{
				W: moq.ParamIndexByHash,
			},
			Bytes: struct{}{},
			Lookup: struct {
				S moq.ParamIndexing
				N moq.ParamIndexing
			}{
				S: moq.ParamIndexByHash,
				N: moq.ParamIndexByValue,
			},
			FindAllIndex: struct {
				Param1 moq.ParamIndexing
				N      moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByHash,
				N:      moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Index_starGenType type
func (m *MoqIndex_starGenType) Mock() *MoqIndex_starGenType_mock { return m.Moq }

func (m *MoqIndex_starGenType_mock) Read(param1 io.Reader) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqIndex_starGenType_Read_params{
		Param1: param1,
	}
	var results *MoqIndex_starGenType_Read_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Read {
		paramsKey := m.Moq.ParamsKey_Read(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Read(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Read(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Read(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1)
	}
	return
}

func (m *MoqIndex_starGenType_mock) Write(w io.Writer) (result1 error) {
	m.Moq.Scene.T.Helper()
	params := MoqIndex_starGenType_Write_params{
		W: w,
	}
	var results *MoqIndex_starGenType_Write_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Write {
		paramsKey := m.Moq.ParamsKey_Write(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Write(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Write(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Write(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(w)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(w)
	}
	return
}

func (m *MoqIndex_starGenType_mock) Bytes() (result1 []byte) {
	m.Moq.Scene.T.Helper()
	params := MoqIndex_starGenType_Bytes_params{}
	var results *MoqIndex_starGenType_Bytes_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Bytes {
		paramsKey := m.Moq.ParamsKey_Bytes(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Bytes(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Bytes(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Bytes(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn()
	}
	return
}

func (m *MoqIndex_starGenType_mock) Lookup(s []byte, n int) (result1 []int) {
	m.Moq.Scene.T.Helper()
	params := MoqIndex_starGenType_Lookup_params{
		S: s,
		N: n,
	}
	var results *MoqIndex_starGenType_Lookup_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Lookup {
		paramsKey := m.Moq.ParamsKey_Lookup(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Lookup(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Lookup(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Lookup(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(s, n)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(s, n)
	}
	return
}

func (m *MoqIndex_starGenType_mock) FindAllIndex(param1 *regexp.Regexp, n int) (result1 [][]int) {
	m.Moq.Scene.T.Helper()
	params := MoqIndex_starGenType_FindAllIndex_params{
		Param1: param1,
		N:      n,
	}
	var results *MoqIndex_starGenType_FindAllIndex_results
	for _, resultsByParams := range m.Moq.ResultsByParams_FindAllIndex {
		paramsKey := m.Moq.ParamsKey_FindAllIndex(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_FindAllIndex(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_FindAllIndex(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_FindAllIndex(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1, n)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(param1, n)
	}
	return
}

// OnCall returns the recorder implementation of the Index_starGenType type
func (m *MoqIndex_starGenType) OnCall() *MoqIndex_starGenType_recorder {
	return &MoqIndex_starGenType_recorder{
		Moq: m,
	}
}

func (m *MoqIndex_starGenType_recorder) Read(param1 io.Reader) *MoqIndex_starGenType_Read_fnRecorder {
	return &MoqIndex_starGenType_Read_fnRecorder{
		Params: MoqIndex_starGenType_Read_params{
			Param1: param1,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIndex_starGenType_Read_fnRecorder) Any() *MoqIndex_starGenType_Read_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	return &MoqIndex_starGenType_Read_anyParams{Recorder: r}
}

func (a *MoqIndex_starGenType_Read_anyParams) Param1() *MoqIndex_starGenType_Read_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqIndex_starGenType_Read_fnRecorder) Seq() *MoqIndex_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIndex_starGenType_Read_fnRecorder) NoSeq() *MoqIndex_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Read(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIndex_starGenType_Read_fnRecorder) ReturnResults(result1 error) *MoqIndex_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqIndex_starGenType_Read_doFn
		DoReturnFn MoqIndex_starGenType_Read_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIndex_starGenType_Read_fnRecorder) AndDo(fn MoqIndex_starGenType_Read_doFn) *MoqIndex_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIndex_starGenType_Read_fnRecorder) DoReturnResults(fn MoqIndex_starGenType_Read_doReturnFn) *MoqIndex_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqIndex_starGenType_Read_doFn
		DoReturnFn MoqIndex_starGenType_Read_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIndex_starGenType_Read_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIndex_starGenType_Read_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Read {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIndex_starGenType_Read_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIndex_starGenType_Read_paramsKey]*MoqIndex_starGenType_Read_results{},
		}
		r.Moq.ResultsByParams_Read = append(r.Moq.ResultsByParams_Read, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Read) {
			copy(r.Moq.ResultsByParams_Read[insertAt+1:], r.Moq.ResultsByParams_Read[insertAt:0])
			r.Moq.ResultsByParams_Read[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Read(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIndex_starGenType_Read_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIndex_starGenType_Read_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIndex_starGenType_Read_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqIndex_starGenType_Read_doFn
				DoReturnFn MoqIndex_starGenType_Read_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIndex_starGenType) PrettyParams_Read(params MoqIndex_starGenType_Read_params) string {
	return fmt.Sprintf("Read(%#v)", params.Param1)
}

func (m *MoqIndex_starGenType) ParamsKey_Read(params MoqIndex_starGenType_Read_params, anyParams uint64) MoqIndex_starGenType_Read_paramsKey {
	m.Scene.T.Helper()
	var param1Used io.Reader
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Read.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	return MoqIndex_starGenType_Read_paramsKey{
		Params: struct{ Param1 io.Reader }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

func (m *MoqIndex_starGenType_recorder) Write(w io.Writer) *MoqIndex_starGenType_Write_fnRecorder {
	return &MoqIndex_starGenType_Write_fnRecorder{
		Params: MoqIndex_starGenType_Write_params{
			W: w,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIndex_starGenType_Write_fnRecorder) Any() *MoqIndex_starGenType_Write_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	return &MoqIndex_starGenType_Write_anyParams{Recorder: r}
}

func (a *MoqIndex_starGenType_Write_anyParams) W() *MoqIndex_starGenType_Write_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqIndex_starGenType_Write_fnRecorder) Seq() *MoqIndex_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIndex_starGenType_Write_fnRecorder) NoSeq() *MoqIndex_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Write(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIndex_starGenType_Write_fnRecorder) ReturnResults(result1 error) *MoqIndex_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqIndex_starGenType_Write_doFn
		DoReturnFn MoqIndex_starGenType_Write_doReturnFn
	}{
		Values: &struct {
			Result1 error
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIndex_starGenType_Write_fnRecorder) AndDo(fn MoqIndex_starGenType_Write_doFn) *MoqIndex_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIndex_starGenType_Write_fnRecorder) DoReturnResults(fn MoqIndex_starGenType_Write_doReturnFn) *MoqIndex_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 error
		}
		Sequence   uint32
		DoFn       MoqIndex_starGenType_Write_doFn
		DoReturnFn MoqIndex_starGenType_Write_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIndex_starGenType_Write_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIndex_starGenType_Write_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Write {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIndex_starGenType_Write_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIndex_starGenType_Write_paramsKey]*MoqIndex_starGenType_Write_results{},
		}
		r.Moq.ResultsByParams_Write = append(r.Moq.ResultsByParams_Write, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Write) {
			copy(r.Moq.ResultsByParams_Write[insertAt+1:], r.Moq.ResultsByParams_Write[insertAt:0])
			r.Moq.ResultsByParams_Write[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Write(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIndex_starGenType_Write_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIndex_starGenType_Write_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIndex_starGenType_Write_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 error
				}
				Sequence   uint32
				DoFn       MoqIndex_starGenType_Write_doFn
				DoReturnFn MoqIndex_starGenType_Write_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIndex_starGenType) PrettyParams_Write(params MoqIndex_starGenType_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.W)
}

func (m *MoqIndex_starGenType) ParamsKey_Write(params MoqIndex_starGenType_Write_params, anyParams uint64) MoqIndex_starGenType_Write_paramsKey {
	m.Scene.T.Helper()
	var wUsed io.Writer
	var wUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Write.W == moq.ParamIndexByValue {
			wUsed = params.W
		} else {
			wUsedHash = hash.DeepHash(params.W)
		}
	}
	return MoqIndex_starGenType_Write_paramsKey{
		Params: struct{ W io.Writer }{
			W: wUsed,
		},
		Hashes: struct{ W hash.Hash }{
			W: wUsedHash,
		},
	}
}

func (m *MoqIndex_starGenType_recorder) Bytes() *MoqIndex_starGenType_Bytes_fnRecorder {
	return &MoqIndex_starGenType_Bytes_fnRecorder{
		Params:   MoqIndex_starGenType_Bytes_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIndex_starGenType_Bytes_fnRecorder) Any() *MoqIndex_starGenType_Bytes_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bytes(r.Params))
		return nil
	}
	return &MoqIndex_starGenType_Bytes_anyParams{Recorder: r}
}

func (r *MoqIndex_starGenType_Bytes_fnRecorder) Seq() *MoqIndex_starGenType_Bytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bytes(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIndex_starGenType_Bytes_fnRecorder) NoSeq() *MoqIndex_starGenType_Bytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Bytes(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIndex_starGenType_Bytes_fnRecorder) ReturnResults(result1 []byte) *MoqIndex_starGenType_Bytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqIndex_starGenType_Bytes_doFn
		DoReturnFn MoqIndex_starGenType_Bytes_doReturnFn
	}{
		Values: &struct {
			Result1 []byte
		}{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIndex_starGenType_Bytes_fnRecorder) AndDo(fn MoqIndex_starGenType_Bytes_doFn) *MoqIndex_starGenType_Bytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIndex_starGenType_Bytes_fnRecorder) DoReturnResults(fn MoqIndex_starGenType_Bytes_doReturnFn) *MoqIndex_starGenType_Bytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 []byte
		}
		Sequence   uint32
		DoFn       MoqIndex_starGenType_Bytes_doFn
		DoReturnFn MoqIndex_starGenType_Bytes_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIndex_starGenType_Bytes_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIndex_starGenType_Bytes_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Bytes {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIndex_starGenType_Bytes_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIndex_starGenType_Bytes_paramsKey]*MoqIndex_starGenType_Bytes_results{},
		}
		r.Moq.ResultsByParams_Bytes = append(r.Moq.ResultsByParams_Bytes, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Bytes) {
			copy(r.Moq.ResultsByParams_Bytes[insertAt+1:], r.Moq.ResultsByParams_Bytes[insertAt:0])
			r.Moq.ResultsByParams_Bytes[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Bytes(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIndex_starGenType_Bytes_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIndex_starGenType_Bytes_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIndex_starGenType_Bytes_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 []byte
				}
				Sequence   uint32
				DoFn       MoqIndex_starGenType_Bytes_doFn
				DoReturnFn MoqIndex_starGenType_Bytes_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIndex_starGenType) PrettyParams_Bytes(params MoqIndex_starGenType_Bytes_params) string {
	return fmt.Sprintf("Bytes()")
}

func (m *MoqIndex_starGenType) ParamsKey_Bytes(params MoqIndex_starGenType_Bytes_params, anyParams uint64) MoqIndex_starGenType_Bytes_paramsKey {
	m.Scene.T.Helper()
	return MoqIndex_starGenType_Bytes_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqIndex_starGenType_recorder) Lookup(s []byte, n int) *MoqIndex_starGenType_Lookup_fnRecorder {
	return &MoqIndex_starGenType_Lookup_fnRecorder{
		Params: MoqIndex_starGenType_Lookup_params{
			S: s,
			N: n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIndex_starGenType_Lookup_fnRecorder) Any() *MoqIndex_starGenType_Lookup_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Lookup(r.Params))
		return nil
	}
	return &MoqIndex_starGenType_Lookup_anyParams{Recorder: r}
}

func (a *MoqIndex_starGenType_Lookup_anyParams) S() *MoqIndex_starGenType_Lookup_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqIndex_starGenType_Lookup_anyParams) N() *MoqIndex_starGenType_Lookup_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqIndex_starGenType_Lookup_fnRecorder) Seq() *MoqIndex_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Lookup(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIndex_starGenType_Lookup_fnRecorder) NoSeq() *MoqIndex_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Lookup(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIndex_starGenType_Lookup_fnRecorder) ReturnResults(result1 []int) *MoqIndex_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Result1 []int }
		Sequence   uint32
		DoFn       MoqIndex_starGenType_Lookup_doFn
		DoReturnFn MoqIndex_starGenType_Lookup_doReturnFn
	}{
		Values: &struct{ Result1 []int }{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIndex_starGenType_Lookup_fnRecorder) AndDo(fn MoqIndex_starGenType_Lookup_doFn) *MoqIndex_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIndex_starGenType_Lookup_fnRecorder) DoReturnResults(fn MoqIndex_starGenType_Lookup_doReturnFn) *MoqIndex_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Result1 []int }
		Sequence   uint32
		DoFn       MoqIndex_starGenType_Lookup_doFn
		DoReturnFn MoqIndex_starGenType_Lookup_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIndex_starGenType_Lookup_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIndex_starGenType_Lookup_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Lookup {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIndex_starGenType_Lookup_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIndex_starGenType_Lookup_paramsKey]*MoqIndex_starGenType_Lookup_results{},
		}
		r.Moq.ResultsByParams_Lookup = append(r.Moq.ResultsByParams_Lookup, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Lookup) {
			copy(r.Moq.ResultsByParams_Lookup[insertAt+1:], r.Moq.ResultsByParams_Lookup[insertAt:0])
			r.Moq.ResultsByParams_Lookup[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Lookup(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIndex_starGenType_Lookup_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIndex_starGenType_Lookup_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIndex_starGenType_Lookup_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ Result1 []int }
				Sequence   uint32
				DoFn       MoqIndex_starGenType_Lookup_doFn
				DoReturnFn MoqIndex_starGenType_Lookup_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIndex_starGenType) PrettyParams_Lookup(params MoqIndex_starGenType_Lookup_params) string {
	return fmt.Sprintf("Lookup(%#v, %#v)", params.S, params.N)
}

func (m *MoqIndex_starGenType) ParamsKey_Lookup(params MoqIndex_starGenType_Lookup_params, anyParams uint64) MoqIndex_starGenType_Lookup_paramsKey {
	m.Scene.T.Helper()
	var sUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Lookup.S == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The s parameter of the Lookup function can't be indexed by value")
		}
		sUsedHash = hash.DeepHash(params.S)
	}
	var nUsed int
	var nUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Lookup.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqIndex_starGenType_Lookup_paramsKey{
		Params: struct{ N int }{
			N: nUsed,
		},
		Hashes: struct {
			S hash.Hash
			N hash.Hash
		}{
			S: sUsedHash,
			N: nUsedHash,
		},
	}
}

func (m *MoqIndex_starGenType_recorder) FindAllIndex(param1 *regexp.Regexp, n int) *MoqIndex_starGenType_FindAllIndex_fnRecorder {
	return &MoqIndex_starGenType_FindAllIndex_fnRecorder{
		Params: MoqIndex_starGenType_FindAllIndex_params{
			Param1: param1,
			N:      n,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqIndex_starGenType_FindAllIndex_fnRecorder) Any() *MoqIndex_starGenType_FindAllIndex_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FindAllIndex(r.Params))
		return nil
	}
	return &MoqIndex_starGenType_FindAllIndex_anyParams{Recorder: r}
}

func (a *MoqIndex_starGenType_FindAllIndex_anyParams) Param1() *MoqIndex_starGenType_FindAllIndex_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqIndex_starGenType_FindAllIndex_anyParams) N() *MoqIndex_starGenType_FindAllIndex_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqIndex_starGenType_FindAllIndex_fnRecorder) Seq() *MoqIndex_starGenType_FindAllIndex_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FindAllIndex(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqIndex_starGenType_FindAllIndex_fnRecorder) NoSeq() *MoqIndex_starGenType_FindAllIndex_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_FindAllIndex(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqIndex_starGenType_FindAllIndex_fnRecorder) ReturnResults(result1 [][]int) *MoqIndex_starGenType_FindAllIndex_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Result1 [][]int }
		Sequence   uint32
		DoFn       MoqIndex_starGenType_FindAllIndex_doFn
		DoReturnFn MoqIndex_starGenType_FindAllIndex_doReturnFn
	}{
		Values: &struct{ Result1 [][]int }{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqIndex_starGenType_FindAllIndex_fnRecorder) AndDo(fn MoqIndex_starGenType_FindAllIndex_doFn) *MoqIndex_starGenType_FindAllIndex_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqIndex_starGenType_FindAllIndex_fnRecorder) DoReturnResults(fn MoqIndex_starGenType_FindAllIndex_doReturnFn) *MoqIndex_starGenType_FindAllIndex_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Result1 [][]int }
		Sequence   uint32
		DoFn       MoqIndex_starGenType_FindAllIndex_doFn
		DoReturnFn MoqIndex_starGenType_FindAllIndex_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqIndex_starGenType_FindAllIndex_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqIndex_starGenType_FindAllIndex_resultsByParams
	for n, res := range r.Moq.ResultsByParams_FindAllIndex {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqIndex_starGenType_FindAllIndex_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqIndex_starGenType_FindAllIndex_paramsKey]*MoqIndex_starGenType_FindAllIndex_results{},
		}
		r.Moq.ResultsByParams_FindAllIndex = append(r.Moq.ResultsByParams_FindAllIndex, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_FindAllIndex) {
			copy(r.Moq.ResultsByParams_FindAllIndex[insertAt+1:], r.Moq.ResultsByParams_FindAllIndex[insertAt:0])
			r.Moq.ResultsByParams_FindAllIndex[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_FindAllIndex(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqIndex_starGenType_FindAllIndex_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqIndex_starGenType_FindAllIndex_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqIndex_starGenType_FindAllIndex_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ Result1 [][]int }
				Sequence   uint32
				DoFn       MoqIndex_starGenType_FindAllIndex_doFn
				DoReturnFn MoqIndex_starGenType_FindAllIndex_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqIndex_starGenType) PrettyParams_FindAllIndex(params MoqIndex_starGenType_FindAllIndex_params) string {
	return fmt.Sprintf("FindAllIndex(%#v, %#v)", params.Param1, params.N)
}

func (m *MoqIndex_starGenType) ParamsKey_FindAllIndex(params MoqIndex_starGenType_FindAllIndex_params, anyParams uint64) MoqIndex_starGenType_FindAllIndex_paramsKey {
	m.Scene.T.Helper()
	var param1Used *regexp.Regexp
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.FindAllIndex.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	var nUsed int
	var nUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.FindAllIndex.N == moq.ParamIndexByValue {
			nUsed = params.N
		} else {
			nUsedHash = hash.DeepHash(params.N)
		}
	}
	return MoqIndex_starGenType_FindAllIndex_paramsKey{
		Params: struct {
			Param1 *regexp.Regexp
			N      int
		}{
			Param1: param1Used,
			N:      nUsed,
		},
		Hashes: struct {
			Param1 hash.Hash
			N      hash.Hash
		}{
			Param1: param1UsedHash,
			N:      nUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqIndex_starGenType) Reset() {
	m.ResultsByParams_Read = nil
	m.ResultsByParams_Write = nil
	m.ResultsByParams_Bytes = nil
	m.ResultsByParams_Lookup = nil
	m.ResultsByParams_FindAllIndex = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqIndex_starGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Read {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Read(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Write {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Write(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Bytes {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Bytes(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Lookup {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Lookup(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_FindAllIndex {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_FindAllIndex(results.Params))
			}
		}
	}
}
